
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

#pragma once
/// dependency: BasicType
/// dependency: AIModule
/// dependency: AkAudio
/// dependency: AnimGraphRuntime
/// dependency: CinematicCamera
/// dependency: CoreUObject
/// dependency: DeveloperSettings
/// dependency: Engine
/// dependency: FaceFX
/// dependency: Foliage
/// dependency: GameplayTags
/// dependency: InputCore
/// dependency: LevelSequence
/// dependency: MediaAssets
/// dependency: MovieScene
/// dependency: NavigationSystem
/// dependency: Niagara
/// dependency: PhysicsCore
/// dependency: Slate
/// dependency: SlateCore
/// dependency: UMG

#pragma pack(push, 0x1)

/// Enum /Script/Indiana.EDamageEventType
/// Size: 0x01 (1 bytes)
enum class EDamageEventType : uint8_t
{
	EDamageEventType__Invalid                                                        = 0,
	EDamageEventType__Point                                                          = 1,
	EDamageEventType__Radial                                                         = 2,
	EDamageEventType__Generic                                                        = 3
};

/// Enum /Script/Indiana.EPhaseOfDay
/// Size: 0x01 (1 bytes)
enum class EPhaseOfDay : uint8_t
{
	EPhaseOfDay__Morning                                                             = 0,
	EPhaseOfDay__Midday                                                              = 1,
	EPhaseOfDay__Afternoon                                                           = 2,
	EPhaseOfDay__Evening                                                             = 3,
	EPhaseOfDay__Night                                                               = 4
};

/// Enum /Script/Indiana.EDodgeDirection
/// Size: 0x01 (1 bytes)
enum class EDodgeDirection : uint8_t
{
	EDodgeDirection__Invalid                                                         = 0,
	EDodgeDirection__Back                                                            = 1,
	EDodgeDirection__Left                                                            = 2,
	EDodgeDirection__Right                                                           = 3,
	EDodgeDirection__Forward                                                         = 4,
	EDodgeDirection__Count                                                           = 5
};

/// Enum /Script/Indiana.EFootstepType
/// Size: 0x01 (1 bytes)
enum class EFootstepType : uint8_t
{
	EFootstepType__Run                                                               = 0,
	EFootstepType__Sprint                                                            = 1,
	EFootstepType__Crouched                                                          = 2,
	EFootstepType__Climb                                                             = 3,
	EFootstepType__Count                                                             = 4
};

/// Enum /Script/Indiana.EFootID
/// Size: 0x01 (1 bytes)
enum class EFootID : uint8_t
{
	EFootID__None                                                                    = 0,
	EFootID__LeftFoot                                                                = 1,
	EFootID__RightFoot                                                               = 2,
	EFootID__Foot3                                                                   = 3,
	EFootID__Foot4                                                                   = 4,
	EFootID__Foot5                                                                   = 5,
	EFootID__Foot6                                                                   = 6,
	EFootID__Foot7                                                                   = 7,
	EFootID__Foot8                                                                   = 8,
	EFootID__Foot9                                                                   = 9,
	EFootID__Foot10                                                                  = 10,
	EFootID__Foot11                                                                  = 11,
	EFootID__Foot12                                                                  = 12,
	EFootID__Foot13                                                                  = 13,
	EFootID__Foot14                                                                  = 14,
	EFootID__Foot15                                                                  = 15,
	EFootID__Foot16                                                                  = 16,
	EFootID__NumFeetID                                                               = 17
};

/// Enum /Script/Indiana.ESpecialMovementEvent
/// Size: 0x01 (1 bytes)
enum class ESpecialMovementEvent : uint8_t
{
	ESpecialMovementEvent__None                                                      = 0,
	ESpecialMovementEvent__Crouch                                                    = 1,
	ESpecialMovementEvent__Uncrouch                                                  = 2,
	ESpecialMovementEvent__Jump                                                      = 3,
	ESpecialMovementEvent__Land                                                      = 4,
	ESpecialMovementEvent__Dodge                                                     = 5
};

/// Enum /Script/Indiana.EStateOfBeing
/// Size: 0x01 (1 bytes)
enum class EStateOfBeing : uint8_t
{
	EStateOfBeing__Healthy                                                           = 0,
	EStateOfBeing__Dying                                                             = 1,
	EStateOfBeing__Dead                                                              = 2
};

/// Enum /Script/Indiana.EAnimNotify
/// Size: 0x01 (1 bytes)
enum class EAnimNotify : uint8_t
{
	EAnimNotify__CalledShotCameraStart                                               = 0,
	EAnimNotify__WeaponFire                                                          = 1,
	EAnimNotify__MeleeAllowInput                                                     = 2,
	EAnimNotify__MeleeDisallowInput                                                  = 3,
	EAnimNotify__MeleeCanStartQueuedAction                                           = 4,
	EAnimNotify__MeleeActionFinished                                                 = 5,
	EAnimNotify__MeleeRecoilFrame                                                    = 6,
	EAnimNotify__MeleeCheckInput                                                     = 7,
	EAnimNotify__MeleeDamageTypePending                                              = 8,
	EAnimNotify__MeleeDamageTypeNext                                                 = 9,
	EAnimNotify__AnimationFinished                                                   = 10,
	EAnimNotify__RefillAmmo                                                          = 11,
	EAnimNotify__AttachWeapon                                                        = 12,
	EAnimNotify__DetachWeapon                                                        = 13,
	EAnimNotify__UseMedKit                                                           = 14,
	EAnimNotify__MedKitEnd                                                           = 15,
	EAnimNotify__Finished                                                            = 16,
	EAnimNotify__MeleeEnableBlock                                                    = 17,
	EAnimNotify__UpdateCanisterVisual                                                = 18,
	EAnimNotify__Invalid                                                             = 19
};

/// Enum /Script/Indiana.EGameDifficulty
/// Size: 0x01 (1 bytes)
enum class EGameDifficulty : uint8_t
{
	EGameDifficulty__Story                                                           = 0,
	EGameDifficulty__Normal                                                          = 1,
	EGameDifficulty__Hard                                                            = 2,
	EGameDifficulty__SuperNova                                                       = 3,
	EGameDifficulty__Count                                                           = 4,
	EGameDifficulty__Invalid                                                         = 5
};

/// Enum /Script/Indiana.EInterrogationResult
/// Size: 0x01 (1 bytes)
enum class EInterrogationResult : uint8_t
{
	EInterrogationResult__Invalid                                                    = 0,
	EInterrogationResult__Bribe                                                      = 1,
	EInterrogationResult__Talk                                                       = 2,
	EInterrogationResult__Fight                                                      = 3
};

/// Enum /Script/Indiana.ECrimeType
/// Size: 0x01 (1 bytes)
enum class ECrimeType : uint8_t
{
	ECrimeType__None                                                                 = 0,
	ECrimeType__RestrictedArea                                                       = 1,
	ECrimeType__Pickpocket                                                           = 2,
	ECrimeType__Lockpick                                                             = 3,
	ECrimeType__Hack                                                                 = 4,
	ECrimeType__Disguised                                                            = 5,
	ECrimeType__Theft                                                                = 6
};

/// Enum /Script/Indiana.ECalledShotCameraStep
/// Size: 0x01 (1 bytes)
enum class ECalledShotCameraStep : uint8_t
{
	ECalledShotCameraStep__Attacker                                                  = 0,
	ECalledShotCameraStep__Target                                                    = 1,
	ECalledShotCameraStep__TargetReaction                                            = 2,
	ECalledShotCameraStep__Complete                                                  = 3
};

/// Enum /Script/Indiana.EAttribute
/// Size: 0x01 (1 bytes)
enum class EAttribute : uint8_t
{
	EAttribute__Strength                                                             = 0,
	EAttribute__Dexterity                                                            = 1,
	EAttribute__Endurance                                                            = 2,
	EAttribute__Intelligence                                                         = 3,
	EAttribute__Perception                                                           = 4,
	EAttribute__Willpower                                                            = 5,
	EAttribute__Charm                                                                = 6,
	EAttribute__Wits                                                                 = 7,
	EAttribute__Temperament                                                          = 8,
	EAttribute__Count                                                                = 9,
	EAttribute__Invalid                                                              = 10
};

/// Enum /Script/Indiana.ESkill
/// Size: 0x01 (1 bytes)
enum class ESkill : uint8_t
{
	ESkill__HandGuns                                                                 = 0,
	ESkill__LongGuns                                                                 = 1,
	ESkill__HeavyWeapons                                                             = 2,
	ESkill__Sneak                                                                    = 3,
	ESkill__Lockpick                                                                 = 4,
	ESkill__Engineering                                                              = 5,
	ESkill__Hack                                                                     = 6,
	ESkill__Medical                                                                  = 7,
	ESkill__LightMelee                                                               = 8,
	ESkill__HeavyMelee                                                               = 9,
	ESkill__Science                                                                  = 10,
	ESkill__Persuade                                                                 = 11,
	ESkill__Lie                                                                      = 12,
	ESkill__Intimidate                                                               = 13,
	ESkill__Dodge                                                                    = 14,
	ESkill__Block                                                                    = 15,
	ESkill__Inspiration                                                              = 16,
	ESkill__Determination                                                            = 17,
	ESkill__Count                                                                    = 18,
	ESkill__Invalid                                                                  = 19
};

/// Enum /Script/Indiana.EOCLState
/// Size: 0x01 (1 bytes)
enum class EOCLState : uint8_t
{
	EOCLState__Closed                                                                = 0,
	EOCLState__Open                                                                  = 1,
	EOCLState__Locked                                                                = 2,
	EOCLState__SealedClosed                                                          = 3,
	EOCLState__SealedOpen                                                            = 4,
	EOCLState__Barred                                                                = 5,
	EOCLState__Opening                                                               = 6,
	EOCLState__OpeningToSealed                                                       = 7,
	EOCLState__Closing                                                               = 8,
	EOCLState__ClosingToSealed                                                       = 9,
	EOCLState__ClosingToLocked                                                       = 10
};

/// Enum /Script/Indiana.ESaveGameType
/// Size: 0x01 (1 bytes)
enum class ESaveGameType : uint8_t
{
	ESaveGameType__Standard                                                          = 0,
	ESaveGameType__Quicksave                                                         = 1,
	ESaveGameType__Autosave                                                          = 2,
	ESaveGameType__PostGame                                                          = 3,
	ESaveGameType__PointOfNoReturn                                                   = 4,
	ESaveGameType__BeforeSkip                                                        = 5,
	ESaveGameType__BeforeEVTransition                                                = 6,
	ESaveGameType__Invalid                                                           = 255
};

/// Enum /Script/Indiana.ESaveGameResult
/// Size: 0x01 (1 bytes)
enum class ESaveGameResult : uint8_t
{
	ESaveGameResult__Success                                                         = 0,
	ESaveGameResult__Restricted                                                      = 1,
	ESaveGameResult__FileWritingFailure                                              = 2,
	ESaveGameResult__UnableToSaveCompanionStates                                     = 3,
	ESaveGameResult__PlayerNotAvailable                                              = 4,
	ESaveGameResult__AsyncSaveTask_Begun                                             = 5,
	ESaveGameResult__AsyncSaveTask_Failed_DeviceFull                                 = 6,
	ESaveGameResult__AsyncSaveTask_FailedDeletingStaleTargetDir                      = 7,
	ESaveGameResult__AsyncSaveTask_FailedCreatingTargetDir                           = 8,
	ESaveGameResult__AsyncSaveTask_StorageUninitialized                              = 9,
	ESaveGameResult__AsyncSaveTask_FailedStorageContainer                            = 10,
	ESaveGameResult__AsyncSaveTask_Suspended                                         = 11,
	ESaveGameResult__AsyncSaveTask_NoMetadata                                        = 12,
	ESaveGameResult__AsyncSaveTask_BufferAccessFailed                                = 13,
	ESaveGameResult__AsyncSaveTask_BufferMaximumReached                              = 14,
	ESaveGameResult__AsyncSaveTask_FailedPopulatingSaveFileMap                       = 15,
	ESaveGameResult__AsyncSaveTask_Delayed                                           = 16,
	ESaveGameResult__AsyncSaveTask_FailedScreenshotWaitTimeout                       = 17,
	ESaveGameResult__AsyncSaveTask_FailedSaveStateCompression                        = 18
};

/// Enum /Script/Indiana.EActiveUserChangeType
/// Size: 0x01 (1 bytes)
enum class EActiveUserChangeType : uint8_t
{
	EActiveUserChangeType__Login                                                     = 0,
	EActiveUserChangeType__LoggingOut                                                = 1,
	EActiveUserChangeType__Logout                                                    = 2,
	EActiveUserChangeType__SwitchingUser                                             = 3,
	EActiveUserChangeType__ControllerChange                                          = 4
};

/// Enum /Script/Indiana.ELoadGameResult
/// Size: 0x01 (1 bytes)
enum class ELoadGameResult : uint8_t
{
	ELoadGameResult__Success                                                         = 0,
	ELoadGameResult__Restricted                                                      = 1,
	ELoadGameResult__MissingFile                                                     = 2,
	ELoadGameResult__FileReadingFailure                                              = 3,
	ELoadGameResult__CorruptionDetected                                              = 4,
	ELoadGameResult__UnableToRestorePlayerState                                      = 5,
	ELoadGameResult__UnableToRestoreCompanionState                                   = 6,
	ELoadGameResult__NoCompanionManager                                              = 7,
	ELoadGameResult__ClassDependencyLoadFailure                                      = 8,
	ELoadGameResult__SpawnFailure                                                    = 9,
	ELoadGameResult__InvalidQuicksaveIndex                                           = 10,
	ELoadGameResult__InvalidAutosaveIndex                                            = 11,
	ELoadGameResult__SaveOfGivenNameNotFound                                         = 12,
	ELoadGameResult__PlatformLoadUnsuccessful                                        = 13,
	ELoadGameResult__StorageUninitialized                                            = 14,
	ELoadGameResult__SaveVersionUnsupported                                          = 15,
	ELoadGameResult__SaveFromNewerBuild                                              = 16,
	ELoadGameResult__MapLoadFailure                                                  = 17,
	ELoadGameResult__ChunkInstallation                                               = 18,
	ELoadGameResult__CompressedGameStateUnpackFailure                                = 19,
	ELoadGameResult__LoadCanceledByUser                                              = 20,
	ELoadGameResult__LoadInturruptedForPONR                                          = 21
};

/// Enum /Script/Indiana.EBehaviorStateEventType
/// Size: 0x01 (1 bytes)
enum class EBehaviorStateEventType : uint8_t
{
	EBehaviorStateEventType__Added                                                   = 0,
	EBehaviorStateEventType__Entered                                                 = 1,
	EBehaviorStateEventType__Exited                                                  = 2,
	EBehaviorStateEventType__Removed                                                 = 3
};

/// Enum /Script/Indiana.EBehaviorState
/// Size: 0x01 (1 bytes)
enum class EBehaviorState : uint8_t
{
	EBehaviorState__None                                                             = 0,
	EBehaviorState__Cover                                                            = 1,
	EBehaviorState__Range                                                            = 2,
	EBehaviorState__MeleeSlot                                                        = 3,
	EBehaviorState__Search                                                           = 4,
	EBehaviorState__RepositionSearch                                                 = 5,
	EBehaviorState__MeleeBlock                                                       = 6,
	EBehaviorState__Dodge                                                            = 7,
	EBehaviorState__Idle                                                             = 8,
	EBehaviorState__Tether                                                           = 9,
	EBehaviorState__SwitchWeapon                                                     = 10,
	EBehaviorState__SwitchTarget                                                     = 11,
	EBehaviorState__Dead                                                             = 12,
	EBehaviorState__Disabled                                                         = 13,
	EBehaviorState__SwitchContext                                                    = 14,
	EBehaviorState__Suspicious                                                       = 15,
	EBehaviorState__Investigate                                                      = 16,
	EBehaviorState__Patrol                                                           = 17,
	EBehaviorState__Wander                                                           = 18,
	EBehaviorState__CompanionFollow                                                  = 19,
	EBehaviorState__Conversation                                                     = 20,
	EBehaviorState__Flee                                                             = 21,
	EBehaviorState__Furniture                                                        = 22,
	EBehaviorState__Jump                                                             = 23,
	EBehaviorState__CompanionCommandMoveTo                                           = 24,
	EBehaviorState__CompanionCommandSuppress                                         = 25,
	EBehaviorState__CompanionCommandHunkerDown                                       = 26,
	EBehaviorState__Deactivated                                                      = 27,
	EBehaviorState__Activated                                                        = 28,
	EBehaviorState__CompanionCommandFlank                                            = 29,
	EBehaviorState__Approach                                                         = 30,
	EBehaviorState__CalledShot                                                       = 31,
	EBehaviorState__Persuade                                                         = 32,
	EBehaviorState__Teleport                                                         = 33,
	EBehaviorState__SpawnActor                                                       = 34,
	EBehaviorState__Cower                                                            = 35,
	EBehaviorState__Follow                                                           = 36,
	EBehaviorState__SpellTarget                                                      = 37,
	EBehaviorState__Retreat                                                          = 38,
	EBehaviorState__Animation                                                        = 39,
	EBehaviorState__MoveTo                                                           = 40,
	EBehaviorState__Crouch                                                           = 41,
	EBehaviorState__QuickCover                                                       = 42,
	EBehaviorState__OnRails                                                          = 43,
	EBehaviorState__HopeBot                                                          = 44,
	EBehaviorState__Walk                                                             = 45,
	EBehaviorState__HealGun                                                          = 46,
	EBehaviorState__Count                                                            = 47
};

/// Enum /Script/Indiana.EUnlockAbility
/// Size: 0x01 (1 bytes)
enum class EUnlockAbility : uint8_t
{
	EUnlockAbility__Invalid                                                          = 0,
	EUnlockAbility__PerfectDodge                                                     = 1,
	EUnlockAbility__PerfectDodgeCounter                                              = 2,
	EUnlockAbility__PerfectDodgeCounterCrit                                          = 3,
	EUnlockAbility__PerfectBlock                                                     = 4,
	EUnlockAbility__PerfectBlockCounter                                              = 5,
	EUnlockAbility__PerfectBlockCounterCrit                                          = 6,
	EUnlockAbility__PickPocket                                                       = 7,
	EUnlockAbility__HackRobots                                                       = 8,
	EUnlockAbility__MedKitOneDrug                                                    = 9,
	EUnlockAbility__MedKitTwoDrugs                                                   = 10,
	EUnlockAbility__MedKitThreeDrugs                                                 = 11,
	EUnlockAbility__Acrophobia                                                       = 12,
	EUnlockAbility__PowerAttacksLightMelee                                           = 13,
	EUnlockAbility__PowerAttacksHeavyMelee                                           = 14,
	EUnlockAbility__WeakSpotLightMelee                                               = 15,
	EUnlockAbility__WeakSpotHeavyMelee                                               = 16,
	EUnlockAbility__WeakSpotHandGuns                                                 = 17,
	EUnlockAbility__WeakSpotLongGuns                                                 = 18,
	EUnlockAbility__WeakSpotHeavyWeapons                                             = 19,
	EUnlockAbility__TTDSpellsLightMelee                                              = 20,
	EUnlockAbility__TTDSpellsHeavyMelee                                              = 21,
	EUnlockAbility__TTDSpellsHandGuns                                                = 22,
	EUnlockAbility__TTDSpellsLongGuns                                                = 23,
	EUnlockAbility__TTDSpellsHeavyWeapons                                            = 24,
	EUnlockAbility__MeleeFartherReach                                                = 25,
	EUnlockAbility__MeleeCannotBeBlocked                                             = 26,
	EUnlockAbility__SneakAttack                                                      = 27,
	EUnlockAbility__FieldRepair                                                      = 28,
	EUnlockAbility__SellToAnyVendingMachine                                          = 29,
	EUnlockAbility__CompanionCommands                                                = 30,
	EUnlockAbility__DodgeForward                                                     = 31,
	EUnlockAbility__FastTravelWhileEncumbered                                        = 32,
	EUnlockAbility__Tinkering                                                        = 33,
	EUnlockAbility__LockPickPreview                                                  = 34,
	EUnlockAbility__MedKitHealsCompanions                                            = 35,
	EUnlockAbility__TinkerScienceCostCap                                             = 36,
	EUnlockAbility__DoubleHackRobots                                                 = 37,
	EUnlockAbility__UndetectableLockpicking                                          = 38,
	EUnlockAbility__UseScienceAsWeaponSkill                                          = 39,
	EUnlockAbility__InstantReloadHeavyOnEmpty                                        = 40,
	EUnlockAbility__StealthInstantKillUndetectable                                   = 41,
	EUnlockAbility__NoDamageOnPerfectBlock                                           = 42,
	EUnlockAbility__Count                                                            = 43
};

/// Enum /Script/Indiana.EStringTableType
/// Size: 0x01 (1 bytes)
enum class EStringTableType : uint8_t
{
	EStringTableType__Unassigned                                                     = 0,
	EStringTableType__Gui                                                            = 1,
	EStringTableType__Items                                                          = 2,
	EStringTableType__Abilities                                                      = 3,
	EStringTableType__Tutorial                                                       = 4,
	EStringTableType__Achievements                                                   = 5,
	EStringTableType__Credits                                                        = 6,
	EStringTableType__Debug                                                          = 7,
	EStringTableType__LoadingTips                                                    = 8,
	EStringTableType__Characters                                                     = 9,
	EStringTableType__Areas                                                          = 10,
	EStringTableType__Waypoints                                                      = 11,
	EStringTableType__Random                                                         = 12,
	EStringTableType__Factions                                                       = 13,
	EStringTableType__Vendors                                                        = 14,
	EStringTableType__Codex                                                          = 15,
	EStringTableType__BrandSlogans                                                   = 16,
	EStringTableType__CutsceneSubtitles                                              = 17,
	EStringTableType__Legal                                                          = 18,
	EStringTableType__Count                                                          = 19
};

/// Enum /Script/Indiana.ERestType
/// Size: 0x01 (1 bytes)
enum class ERestType : uint8_t
{
	ERestType__Sleep                                                                 = 0,
	ERestType__Wait                                                                  = 1
};

/// Enum /Script/Indiana.ETraverseType
/// Size: 0x01 (1 bytes)
enum class ETraverseType : uint8_t
{
	ETraverseType__None                                                              = 0,
	ETraverseType__Jump                                                              = 1,
	ETraverseType__Crouch                                                            = 2,
	ETraverseType__Climb                                                             = 3,
	ETraverseType__Walk                                                              = 4
};

/// Enum /Script/Indiana.EAlarmState
/// Size: 0x01 (1 bytes)
enum class EAlarmState : uint8_t
{
	EAlarmState__Off                                                                 = 0,
	EAlarmState__On                                                                  = 1,
	EAlarmState__Disabled                                                            = 2
};

/// Enum /Script/Indiana.EAlertState
/// Size: 0x01 (1 bytes)
enum class EAlertState : uint8_t
{
	EAlertState__Unaware                                                             = 0,
	EAlertState__Suspicious                                                          = 1,
	EAlertState__Investigating                                                       = 2,
	EAlertState__Alerted                                                             = 3,
	EAlertState__Count                                                               = 4
};

/// Enum /Script/Indiana.EItemDegradationState
/// Size: 0x01 (1 bytes)
enum class EItemDegradationState : uint8_t
{
	EItemDegradationState__None                                                      = 0,
	EItemDegradationState__Damaged                                                   = 1,
	EItemDegradationState__SeverelyDamaged                                           = 2,
	EItemDegradationState__Destroyed                                                 = 3
};

/// Enum /Script/Indiana.EWeaponPreference
/// Size: 0x01 (1 bytes)
enum class EWeaponPreference : uint8_t
{
	EWeaponPreference__UsePrimary                                                    = 0,
	EWeaponPreference__PreferRanged                                                  = 1,
	EWeaponPreference__PreferMelee                                                   = 2,
	EWeaponPreference__StronglyPreferMelee                                           = 3,
	EWeaponPreference__AlwaysRanged                                                  = 4,
	EWeaponPreference__AlwaysMelee                                                   = 5,
	EWeaponPreference__PreferLimitedRanged                                           = 6,
	EWeaponPreference__AlwaysUnlimitedRanged                                         = 7
};

/// Enum /Script/Indiana.EInteractionType
/// Size: 0x01 (1 bytes)
enum class EInteractionType : uint8_t
{
	EInteractionType__None                                                           = 0,
	EInteractionType__Door                                                           = 1,
	EInteractionType__DoorBar                                                        = 2,
	EInteractionType__Ladder                                                         = 3,
	EInteractionType__Elevator                                                       = 4,
	EInteractionType__Switch                                                         = 5,
	EInteractionType__Pickup                                                         = 6,
	EInteractionType__Container                                                      = 7,
	EInteractionType__Computer                                                       = 8,
	EInteractionType__Trap                                                           = 9,
	EInteractionType__Loot                                                           = 10,
	EInteractionType__Conversation                                                   = 11,
	EInteractionType__PickPocket                                                     = 12,
	EInteractionType__Workbench                                                      = 13,
	EInteractionType__Vendor                                                         = 14,
	EInteractionType__Generic                                                        = 15,
	EInteractionType__OCL                                                            = 16,
	EInteractionType__Travel                                                         = 17,
	EInteractionType__NoConversationChatter                                          = 18,
	EInteractionType__Bed                                                            = 19,
	EInteractionType__NotAllowedInCombat                                             = 20,
	EInteractionType__Chair                                                          = 21,
	EInteractionType__Hack                                                           = 22,
	EInteractionType__ShipTerminal                                                   = 23,
	EInteractionType__Respec                                                         = 24,
	EInteractionType__GenericDelayed                                                 = 25,
	EInteractionType__ContainerKeyUnlock                                             = 26,
	EInteractionType__Pet                                                            = 27,
	EInteractionType__Evidence                                                       = 28,
	EInteractionType__AudioLog                                                       = 29
};

/// Enum /Script/Indiana.EDetectionType
/// Size: 0x01 (1 bytes)
enum class EDetectionType : uint8_t
{
	EDetectionType__None                                                             = 0,
	EDetectionType__Suspicious                                                       = 1,
	EDetectionType__Investigate                                                      = 2,
	EDetectionType__Pacifist                                                         = 3,
	EDetectionType__MindControlled                                                   = 4,
	EDetectionType__PacifistCombat                                                   = 5,
	EDetectionType__Crime                                                            = 6,
	EDetectionType__Combat                                                           = 7,
	EDetectionType__Count                                                            = 8
};

/// Enum /Script/Indiana.EReputationType
/// Size: 0x01 (1 bytes)
enum class EReputationType : uint8_t
{
	EReputationType__Positive                                                        = 0,
	EReputationType__Negative                                                        = 1
};

/// Enum /Script/Indiana.EComputerLockState
/// Size: 0x01 (1 bytes)
enum class EComputerLockState : uint8_t
{
	EComputerLockState__Unlocked                                                     = 0,
	EComputerLockState__Locked                                                       = 1
};

/// Enum /Script/Indiana.ETrapState
/// Size: 0x01 (1 bytes)
enum class ETrapState : uint8_t
{
	ETrapState__Armed                                                                = 0,
	ETrapState__Disarmed                                                             = 1,
	ETrapState__Deactivated                                                          = 2
};

/// Enum /Script/Indiana.ECompanionCommand
/// Size: 0x01 (1 bytes)
enum class ECompanionCommand : uint8_t
{
	ECompanionCommand__Invalid                                                       = 0,
	ECompanionCommand__MoveTo                                                        = 1,
	ECompanionCommand__Return                                                        = 2,
	ECompanionCommand__ForceReturn                                                   = 3,
	ECompanionCommand__Attack                                                        = 4,
	ECompanionCommand__Flank                                                         = 5,
	ECompanionCommand__Suppress                                                      = 6,
	ECompanionCommand__HunkerDown                                                    = 7,
	ECompanionCommand__CalledShot                                                    = 8,
	ECompanionCommand__Count                                                         = 9
};

/// Enum /Script/Indiana.ETrapTriggerState
/// Size: 0x01 (1 bytes)
enum class ETrapTriggerState : uint8_t
{
	ETrapTriggerState__Armed                                                         = 0,
	ETrapTriggerState__Disarmed                                                      = 1,
	ETrapTriggerState__Deployed                                                      = 2
};

/// Enum /Script/Indiana.EAudioLogPlayState
/// Size: 0x01 (1 bytes)
enum class EAudioLogPlayState : uint8_t
{
	EAudioLogPlayState__Stopped                                                      = 0,
	EAudioLogPlayState__Playing                                                      = 1,
	EAudioLogPlayState__PausedByGame                                                 = 2,
	EAudioLogPlayState__PausedByPlayer                                               = 3
};

/// Enum /Script/Indiana.EIndianaUIColorType
/// Size: 0x01 (1 bytes)
enum class EIndianaUIColorType : uint8_t
{
	EIndianaUIColorType__Invalid                                                     = 0,
	EIndianaUIColorType__Stamina                                                     = 1,
	EIndianaUIColorType__Health                                                      = 2,
	EIndianaUIColorType__TacticalTimeDilation                                        = 3,
	EIndianaUIColorType__Ammo                                                        = 4,
	EIndianaUIColorType__CalledShot                                                  = 5,
	EIndianaUIColorType__Intimidate                                                  = 6,
	EIndianaUIColorType__Hostile                                                     = 7,
	EIndianaUIColorType__Neutral                                                     = 8,
	EIndianaUIColorType__ConversationVisitedNode                                     = 9,
	EIndianaUIColorType__ConversationUnvisitedNode                                   = 10,
	EIndianaUIColorType__UIPiping                                                    = 11,
	EIndianaUIColorType__InteractionPlayerResources                                  = 12,
	EIndianaUIColorType__InteractionPossible                                         = 13,
	EIndianaUIColorType__InteractionImpossible                                       = 14,
	EIndianaUIColorType__InteractIcon                                                = 15,
	EIndianaUIColorType__InWorldQuestBeacon                                          = 16,
	EIndianaUIColorType__StandardFontGlow                                            = 17,
	EIndianaUIColorType__QuestBeaconFontGlow                                         = 18,
	EIndianaUIColorType__CompanionCommandMoveTo                                      = 19,
	EIndianaUIColorType__NotificationQuestMessage                                    = 20,
	EIndianaUIColorType__NotificationComputerInteractionMessage                      = 21,
	EIndianaUIColorType__NotificationGenericMessage                                  = 22,
	EIndianaUIColorType__OutOfAmmo                                                   = 23,
	EIndianaUIColorType__IndianaYellow                                               = 24,
	EIndianaUIColorType__IndianaNotQuiteYellow                                       = 25,
	EIndianaUIColorType__IndianaGrey                                                 = 26,
	EIndianaUIColorType__IndianaBrown                                                = 27,
	EIndianaUIColorType__IndianaDarkBrown                                            = 28,
	EIndianaUIColorType__IndianaRed                                                  = 29,
	EIndianaUIColorType__IndianaGreen                                                = 30,
	EIndianaUIColorType__NRayDamageText                                              = 31,
	EIndianaUIColorType__NRayDamageTextShadow                                        = 32,
	EIndianaUIColorType__EnergyDamageText                                            = 33,
	EIndianaUIColorType__EnergyDamageTextShadow                                      = 34,
	EIndianaUIColorType__ThermalDamageText                                           = 35,
	EIndianaUIColorType__ThermalDamageTextShadow                                     = 36,
	EIndianaUIColorType__CorrosiveDamageText                                         = 37,
	EIndianaUIColorType__CorrosiveDamageTextShadow                                   = 38,
	EIndianaUIColorType__ShockDamageText                                             = 39,
	EIndianaUIColorType__ShockDamageTextShadow                                       = 40,
	EIndianaUIColorType__BallisticDamageText                                         = 41,
	EIndianaUIColorType__BallisticDamageTextShadow                                   = 42,
	EIndianaUIColorType__TTDTextColor                                                = 43,
	EIndianaUIColorType__Pacifist                                                    = 44,
	EIndianaUIColorType__SkillTextColor                                              = 45,
	EIndianaUIColorType__IndianaBlack                                                = 46,
	EIndianaUIColorType__HealingText                                                 = 47,
	EIndianaUIColorType__HealingTextShadow                                           = 48,
	EIndianaUIColorType__INX1Color                                                   = 49,
	EIndianaUIColorType__INX2Color                                                   = 50,
	EIndianaUIColorType__ColdDamageText                                              = 51,
	EIndianaUIColorType__ColdDamageTextShadow                                        = 52,
	EIndianaUIColorType__Count                                                       = 53
};

/// Enum /Script/Indiana.ECharacterAttributeRange
/// Size: 0x01 (1 bytes)
enum class ECharacterAttributeRange : uint8_t
{
	ECharacterAttributeRange__Minimum                                                = 0,
	ECharacterAttributeRange__BelowAverage                                           = 1,
	ECharacterAttributeRange__Average                                                = 2,
	ECharacterAttributeRange__Good                                                   = 3,
	ECharacterAttributeRange__High                                                   = 4,
	ECharacterAttributeRange__VeryHigh                                               = 5,
	ECharacterAttributeRange__Maximum                                                = 6,
	ECharacterAttributeRange__Count                                                  = 7,
	ECharacterAttributeRange__Invalid                                                = 8
};

/// Enum /Script/Indiana.ECharacterCreationPageType
/// Size: 0x01 (1 bytes)
enum class ECharacterCreationPageType : uint8_t
{
	ECharacterCreationPageType__Attributes                                           = 0,
	ECharacterCreationPageType__Skills                                               = 1,
	ECharacterCreationPageType__Aptitude                                             = 2,
	ECharacterCreationPageType__Physical                                             = 3,
	ECharacterCreationPageType__Naming                                               = 4,
	ECharacterCreationPageType__Summary                                              = 5,
	ECharacterCreationPageType__Count                                                = 6
};

/// Enum /Script/Indiana.ESkillCategory
/// Size: 0x01 (1 bytes)
enum class ESkillCategory : uint8_t
{
	ESkillCategory__Melee                                                            = 0,
	ESkillCategory__Ranged                                                           = 1,
	ESkillCategory__Defense                                                          = 2,
	ESkillCategory__Dialog                                                           = 3,
	ESkillCategory__Stealth                                                          = 4,
	ESkillCategory__Tech                                                             = 5,
	ESkillCategory__Leadership                                                       = 6,
	ESkillCategory__Count                                                            = 7,
	ESkillCategory__Invalid                                                          = 8
};

/// Enum /Script/Indiana.EAptitudeType
/// Size: 0x01 (1 bytes)
enum class EAptitudeType : uint8_t
{
	EAptitudeType__NoAptitude                                                        = 0,
	EAptitudeType__BeverageTech                                                      = 1,
	EAptitudeType__Bureaucrat                                                        = 2,
	EAptitudeType__Cashier                                                           = 3,
	EAptitudeType__Construction                                                      = 4,
	EAptitudeType__Elevator                                                          = 5,
	EAptitudeType__Factory                                                           = 6,
	EAptitudeType__Farmer                                                            = 7,
	EAptitudeType__FoodTester                                                        = 8,
	EAptitudeType__Janitor                                                           = 9,
	EAptitudeType__Mascot                                                            = 10,
	EAptitudeType__MedicalTech                                                       = 11,
	EAptitudeType__SafetyInspector                                                   = 12,
	EAptitudeType__Scientist                                                         = 13,
	EAptitudeType__Chef                                                              = 14,
	EAptitudeType__Invalid                                                           = 15
};

/// Enum /Script/Indiana.EAbilityPosition
/// Size: 0x01 (1 bytes)
enum class EAbilityPosition : uint8_t
{
	EAbilityPosition__Bottom                                                         = 0,
	EAbilityPosition__Left                                                           = 1,
	EAbilityPosition__Top                                                            = 2,
	EAbilityPosition__Right                                                          = 3
};

/// Enum /Script/Indiana.EAchievementOnlineUpdateType
/// Size: 0x01 (1 bytes)
enum class EAchievementOnlineUpdateType : uint8_t
{
	EAchievementOnlineUpdateType__None                                               = 0,
	EAchievementOnlineUpdateType__ProgressChangeOnly                                 = 1,
	EAchievementOnlineUpdateType__Force                                              = 2
};

/// Enum /Script/Indiana.EActorPoolingMethod
/// Size: 0x04 (4 bytes)
enum class EActorPoolingMethod : uint32_t
{
	EActorPoolingMethod__Unregister                                                  = 0,
	EActorPoolingMethod__Hide                                                        = 1,
	EActorPoolingMethod__Nothing                                                     = 2
};

/// Enum /Script/Indiana.ESoundAcceptanceType
/// Size: 0x01 (1 bytes)
enum class ESoundAcceptanceType : uint8_t
{
	ESoundAcceptanceType__None                                                       = 0,
	ESoundAcceptanceType__Hostile                                                    = 1,
	ESoundAcceptanceType__NonHostile                                                 = 2,
	ESoundAcceptanceType__ChangeHostile                                              = 3,
	ESoundAcceptanceType__AutoDetectPlayer                                           = 4,
	ESoundAcceptanceType__ChangeHostileAutoDetectPlayer                              = 5
};

/// Enum /Script/Indiana.ESoundDetectionType
/// Size: 0x01 (1 bytes)
enum class ESoundDetectionType : uint8_t
{
	ESoundDetectionType__None                                                        = 0,
	ESoundDetectionType__Projectile                                                  = 1,
	ESoundDetectionType__Gun                                                         = 2,
	ESoundDetectionType__Shout                                                       = 3,
	ESoundDetectionType__ShoutLoS                                                    = 4,
	ESoundDetectionType__ShoutDeath                                                  = 5,
	ESoundDetectionType__LockPick                                                    = 6,
	ESoundDetectionType__Hack                                                        = 7,
	ESoundDetectionType__ArmTrap                                                     = 8,
	ESoundDetectionType__DisarmTrap                                                  = 9,
	ESoundDetectionType__Footstep                                                    = 10,
	ESoundDetectionType__PickPocket                                                  = 11,
	ESoundDetectionType__ProjectileWizz                                              = 12,
	ESoundDetectionType__Bumped                                                      = 13,
	ESoundDetectionType__ShoutSight                                                  = 14,
	ESoundDetectionType__ShoutProxy                                                  = 15,
	ESoundDetectionType__ShoutDeathProxy                                             = 16,
	ESoundDetectionType__NumSoundDetectionType                                       = 17
};

/// Enum /Script/Indiana.EDetectionDataType
/// Size: 0x01 (1 bytes)
enum class EDetectionDataType : uint8_t
{
	EDetectionDataType__Unknown                                                      = 0,
	EDetectionDataType__SoundData                                                    = 1,
	EDetectionDataType__DamageData                                                   = 2,
	EDetectionDataType__Count                                                        = 3
};

/// Enum /Script/Indiana.ETeamAttitudeFlag
/// Size: 0x04 (4 bytes)
enum class ETeamAttitudeFlag : uint32_t
{
	ETeamAttitudeFlag__None                                                          = 0,
	ETeamAttitudeFlag__Friendly                                                      = 2,
	ETeamAttitudeFlag__Neutral                                                       = 4,
	ETeamAttitudeFlag__Hostile                                                       = 8,
	ETeamAttitudeFlag__All                                                           = -1
};

/// Enum /Script/Indiana.EAsyncQueryResult
/// Size: 0x01 (1 bytes)
enum class EAsyncQueryResult : uint8_t
{
	EAsyncQueryResult__Invalid                                                       = 0,
	EAsyncQueryResult__Pending                                                       = 1,
	EAsyncQueryResult__Success                                                       = 2,
	EAsyncQueryResult__Failure                                                       = 3
};

/// Enum /Script/Indiana.EBehaviorRestoreType
/// Size: 0x01 (1 bytes)
enum class EBehaviorRestoreType : uint8_t
{
	EBehaviorRestoreType__Restore                                                    = 0,
	EBehaviorRestoreType__None                                                       = 1,
	EBehaviorRestoreType__Discard                                                    = 2
};

/// Enum /Script/Indiana.ECompanionState
/// Size: 0x01 (1 bytes)
enum class ECompanionState : uint8_t
{
	ECompanionState__CompanionNotRecruited                                           = 0,
	ECompanionState__CompanionRecruited                                              = 1,
	ECompanionState__CompanionInActiveParty                                          = 2,
	ECompanionState__CompanionDismissed                                              = 3
};

/// Enum /Script/Indiana.ECompanionCombatMode
/// Size: 0x01 (1 bytes)
enum class ECompanionCombatMode : uint8_t
{
	ECompanionCombatMode__Passive                                                    = 0,
	ECompanionCombatMode__Defensive                                                  = 1,
	ECompanionCombatMode__Aggressive                                                 = 2
};

/// Enum /Script/Indiana.ERagdollFreezeState
/// Size: 0x01 (1 bytes)
enum class ERagdollFreezeState : uint8_t
{
	ERagdollFreezeState__None                                                        = 0,
	ERagdollFreezeState__PrePhysicsFreeze                                            = 1,
	ERagdollFreezeState__Frozen                                                      = 2
};

/// Enum /Script/Indiana.ERagdollSettleState
/// Size: 0x01 (1 bytes)
enum class ERagdollSettleState : uint8_t
{
	ERagdollSettleState__None                                                        = 0,
	ERagdollSettleState__Alive                                                       = 1,
	ERagdollSettleState__Dead                                                        = 2
};

/// Enum /Script/Indiana.EFurnitureAnimationInterrupt
/// Size: 0x01 (1 bytes)
enum class EFurnitureAnimationInterrupt : uint8_t
{
	EFurnitureAnimationInterrupt__BlendToBaseIdle                                    = 0,
	EFurnitureAnimationInterrupt__BlendToEnd                                         = 1,
	EFurnitureAnimationInterrupt__BlendEndToBaseIdleInConversation                   = 2
};

/// Enum /Script/Indiana.EFurnitureBehaviorState
/// Size: 0x01 (1 bytes)
enum class EFurnitureBehaviorState : uint8_t
{
	EFurnitureBehaviorState__InitialMove                                             = 0,
	EFurnitureBehaviorState__MovingToEnter                                           = 1,
	EFurnitureBehaviorState__MovingToExit                                            = 2,
	EFurnitureBehaviorState__Furniture                                               = 3,
	EFurnitureBehaviorState__Conversation                                            = 4,
	EFurnitureBehaviorState__ReEnterFurniture                                        = 5,
	EFurnitureBehaviorState__Complete                                                = 6,
	EFurnitureBehaviorState__WaitingToReserve                                        = 7
};

/// Enum /Script/Indiana.EPseudoGodMode
/// Size: 0x01 (1 bytes)
enum class EPseudoGodMode : uint8_t
{
	EPseudoGodMode__Off                                                              = 0,
	EPseudoGodMode__NonPlayer_LowMinHealth                                           = 1,
	EPseudoGodMode__NonPlayer_MediumMinHealth                                        = 2,
	EPseudoGodMode__NonPlayer_HighMinHealth                                          = 3
};

/// Enum /Script/Indiana.ETetherExpansionEvent
/// Size: 0x01 (1 bytes)
enum class ETetherExpansionEvent : uint8_t
{
	ETetherExpansionEvent__None                                                      = 0,
	ETetherExpansionEvent__PlayerDamage                                              = 1,
	ETetherExpansionEvent__CompanionDamage                                           = 2,
	ETetherExpansionEvent__NPCDamage                                                 = 3,
	ETetherExpansionEvent__CompanionCommand                                          = 4,
	ETetherExpansionEvent__SwitchTargetFromPlayer                                    = 5,
	ETetherExpansionEvent__SwitchTargetToPlayer                                      = 6,
	ETetherExpansionEvent__EnterCombat                                               = 7
};

/// Enum /Script/Indiana.EBribeDifficulty
/// Size: 0x01 (1 bytes)
enum class EBribeDifficulty : uint8_t
{
	EBribeDifficulty__CrimeInterrogation                                             = 0,
	EBribeDifficulty__Easy                                                           = 1,
	EBribeDifficulty__Medium                                                         = 2,
	EBribeDifficulty__Hard                                                           = 3,
	EBribeDifficulty__Extreme                                                        = 4
};

/// Enum /Script/Indiana.ECombatReaction
/// Size: 0x01 (1 bytes)
enum class ECombatReaction : uint8_t
{
	ECombatReaction__Attack                                                          = 0,
	ECombatReaction__Cower                                                           = 1,
	ECombatReaction__Flee                                                            = 2,
	ECombatReaction__CowerOrFlee                                                     = 3,
	ECombatReaction__None                                                            = 4
};

/// Enum /Script/Indiana.EDetectionMode
/// Size: 0x01 (1 bytes)
enum class EDetectionMode : uint8_t
{
	EDetectionMode__Perception                                                       = 0,
	EDetectionMode__PlayerProximity                                                  = 1,
	EDetectionMode__None                                                             = 2
};

/// Enum /Script/Indiana.EThirdPersonSocket
/// Size: 0x01 (1 bytes)
enum class EThirdPersonSocket : uint8_t
{
	EThirdPersonSocket__None                                                         = 0,
	EThirdPersonSocket__Chest                                                        = 1,
	EThirdPersonSocket__Head                                                         = 2,
	EThirdPersonSocket__RightArm                                                     = 3,
	EThirdPersonSocket__LeftArm                                                      = 4,
	EThirdPersonSocket__RightLeg                                                     = 5,
	EThirdPersonSocket__LeftLeg                                                      = 6,
	EThirdPersonSocket__Groin                                                        = 7
};

/// Enum /Script/Indiana.EStationaryRotateTarget
/// Size: 0x01 (1 bytes)
enum class EStationaryRotateTarget : uint8_t
{
	EStationaryRotateTarget__None                                                    = 0,
	EStationaryRotateTarget__NextPathCorner                                          = 1,
	EStationaryRotateTarget__CurrentTarget                                           = 2
};

/// Enum /Script/Indiana.EStationaryRotationType
/// Size: 0x01 (1 bytes)
enum class EStationaryRotationType : uint8_t
{
	EStationaryRotationType__None                                                    = 0,
	EStationaryRotationType__OutOfCombatOnly                                         = 1,
	EStationaryRotationType__AlwaysDuringTurns                                       = 2,
	EStationaryRotationType__Always                                                  = 3
};

/// Enum /Script/Indiana.EChangeRelationshipSource
/// Size: 0x01 (1 bytes)
enum class EChangeRelationshipSource : uint8_t
{
	EChangeRelationshipSource__CompanionCommand                                      = 0,
	EChangeRelationshipSource__CrimeActive                                           = 1,
	EChangeRelationshipSource__CrimeDetected                                         = 2,
	EChangeRelationshipSource__Default                                               = 3
};

/// Enum /Script/Indiana.EReputationRankType
/// Size: 0x01 (1 bytes)
enum class EReputationRankType : uint8_t
{
	EReputationRankType__Bad                                                         = 0,
	EReputationRankType__Mixed                                                       = 1,
	EReputationRankType__Default                                                     = 2,
	EReputationRankType__Good                                                        = 3
};

/// Enum /Script/Indiana.EReputationIncrementType
/// Size: 0x01 (1 bytes)
enum class EReputationIncrementType : uint8_t
{
	EReputationIncrementType__None                                                   = 0,
	EReputationIncrementType__Low                                                    = 1,
	EReputationIncrementType__Medium                                                 = 2,
	EReputationIncrementType__High                                                   = 3,
	EReputationIncrementType__Custom                                                 = 4
};

/// Enum /Script/Indiana.EMoraleContribution
/// Size: 0x01 (1 bytes)
enum class EMoraleContribution : uint8_t
{
	EMoraleContribution__Low                                                         = 0,
	EMoraleContribution__Medium                                                      = 1,
	EMoraleContribution__High                                                        = 2,
	EMoraleContribution__Custom                                                      = 3
};

/// Enum /Script/Indiana.EReputationActionType
/// Size: 0x01 (1 bytes)
enum class EReputationActionType : uint8_t
{
	EReputationActionType__Invalid                                                   = 0,
	EReputationActionType__Damage                                                    = 1,
	EReputationActionType__Kill                                                      = 2,
	EReputationActionType__Trespass                                                  = 3,
	EReputationActionType__CrimeRestrictedAreaDisguise                               = 4,
	EReputationActionType__CrimeRestrictedAreaNoDisguise                             = 5,
	EReputationActionType__CrimePickpocket                                           = 6,
	EReputationActionType__CrimeLockpick                                             = 7,
	EReputationActionType__CrimeHack                                                 = 8,
	EReputationActionType__CrimeDisguised                                            = 9,
	EReputationActionType__CrimeTheft                                                = 10
};

/// Enum /Script/Indiana.ETrackingMode
/// Size: 0x01 (1 bytes)
enum class ETrackingMode : uint8_t
{
	ETrackingMode__None                                                              = 0,
	ETrackingMode__Default                                                           = 1,
	ETrackingMode__Bark                                                              = 2,
	ETrackingMode__Conversation                                                      = 4,
	ETrackingMode__Elevator                                                          = 8
};

/// Enum /Script/Indiana.ETrackingRegion
/// Size: 0x01 (1 bytes)
enum class ETrackingRegion : uint8_t
{
	TR_Head                                                                          = 0,
	TR_Body                                                                          = 1,
	TR_Eyes                                                                          = 2,
	TR_WeaponAim                                                                     = 3,
	TR_Count                                                                         = 4
};

/// Enum /Script/Indiana.ETrackingPriority
/// Size: 0x01 (1 bytes)
enum class ETrackingPriority : uint8_t
{
	TP_Default                                                                       = 0,
	TP_PersonalSpace                                                                 = 1,
	TP_Moving                                                                        = 2,
	TP_Conversation                                                                  = 3,
	TP_Scripted                                                                      = 4,
	TP_Behavior                                                                      = 5,
	TP_Reaction                                                                      = 6,
	TP_Debug                                                                         = 7,
	TP_Count                                                                         = 8
};

/// Enum /Script/Indiana.EBehaviorStateCompletionType
/// Size: 0x01 (1 bytes)
enum class EBehaviorStateCompletionType : uint8_t
{
	EBehaviorStateCompletionType__None                                               = 0,
	EBehaviorStateCompletionType__Success                                            = 1,
	EBehaviorStateCompletionType__Complete                                           = 2,
	EBehaviorStateCompletionType__ExternalComplete                                   = 3
};

/// Enum /Script/Indiana.EAIEventType
/// Size: 0x01 (1 bytes)
enum class EAIEventType : uint8_t
{
	EAIEventType__Invalid                                                            = 0,
	EAIEventType__BehaviorDiscrete                                                   = 1,
	EAIEventType__BehaviorContinuous                                                 = 2,
	EAIEventType__ExternalDiscrete                                                   = 3,
	EAIEventType__ExternalContinuous                                                 = 4
};

/// Enum /Script/Indiana.EStimulusType
/// Size: 0x01 (1 bytes)
enum class EStimulusType : uint8_t
{
	EStimulusType__None                                                              = 0,
	EStimulusType__Distraction                                                       = 1,
	EStimulusType__SightInactive                                                     = 2,
	EStimulusType__Projectile                                                        = 3,
	EStimulusType__GenericSound                                                      = 4,
	EStimulusType__DeadBodyKiller                                                    = 5,
	EStimulusType__Shout                                                             = 6,
	EStimulusType__ForceDetect                                                       = 7,
	EStimulusType__SightActive                                                       = 8,
	EStimulusType__Damage                                                            = 9,
	EStimulusType__FriendInCombat                                                    = 10,
	EStimulusType__EncounterAggro                                                    = 11,
	EStimulusType__EnteredRestrictedArea                                             = 12,
	EStimulusType__Crime                                                             = 13,
	EStimulusType__SawFriendKilledByPlayer                                           = 14,
	EStimulusType__AutoDetect                                                        = 15,
	EStimulusType__PickpocketSound                                                   = 16,
	EStimulusType__LockpickSound                                                     = 17,
	EStimulusType__HackSound                                                         = 18
};

/// Enum /Script/Indiana.ETargetOverrideType
/// Size: 0x01 (1 bytes)
enum class ETargetOverrideType : uint8_t
{
	ETargetOverrideType__None                                                        = 0,
	ETargetOverrideType__Taunt                                                       = 1,
	ETargetOverrideType__CommandAttack                                               = 2,
	ETargetOverrideType__CommandCalledShot                                           = 3
};

/// Enum /Script/Indiana.ETargetRequestType
/// Size: 0x01 (1 bytes)
enum class ETargetRequestType : uint8_t
{
	ETargetRequestType__Clear                                                        = 0,
	ETargetRequestType__Fresh                                                        = 1,
	ETargetRequestType__FirstTarget                                                  = 2,
	ETargetRequestType__Override                                                     = 3,
	ETargetRequestType__ClearOverride                                                = 4,
	ETargetRequestType__Lost                                                         = 5,
	ETargetRequestType__Untargetable                                                 = 6,
	ETargetRequestType__Threat                                                       = 7,
	ETargetRequestType__Unreachable                                                  = 8,
	ETargetRequestType__Restore                                                      = 9
};

/// Enum /Script/Indiana.ECoverTypes
/// Size: 0x01 (1 bytes)
enum class ECoverTypes : uint8_t
{
	ECoverTypes__FullHeight                                                          = 0,
	ECoverTypes__HalfHeight                                                          = 1,
	ECoverTypes__None                                                                = 2
};

/// Enum /Script/Indiana.ERangedRepositionCondition
/// Size: 0x01 (1 bytes)
enum class ERangedRepositionCondition : uint8_t
{
	ERangedRepositionCondition__None                                                 = 0,
	ERangedRepositionCondition__TooNear                                              = 1,
	ERangedRepositionCondition__PreferredRange                                       = 2,
	ERangedRepositionCondition__TooFar                                               = 3
};

/// Enum /Script/Indiana.ERangedRepositionType
/// Size: 0x01 (1 bytes)
enum class ERangedRepositionType : uint8_t
{
	ERangedRepositionType__Default                                                   = 0,
	ERangedRepositionType__Stationary                                                = 1,
	ERangedRepositionType__Forward                                                   = 2,
	ERangedRepositionType__Backward                                                  = 3,
	ERangedRepositionType__Strafe                                                    = 4
};

/// Enum /Script/Indiana.EAnimTreeState
/// Size: 0x01 (1 bytes)
enum class EAnimTreeState : uint8_t
{
	EAnimTreeState__None                                                             = 0,
	EAnimTreeState__Neutral                                                          = 1,
	EAnimTreeState__Precombat                                                        = 2,
	EAnimTreeState__CombatNotReady                                                   = 3,
	EAnimTreeState__Combat                                                           = 4,
	EAnimTreeState__Count                                                            = 5
};

/// Enum /Script/Indiana.EDecisionTreeContextType
/// Size: 0x04 (4 bytes)
enum class EDecisionTreeContextType : uint32_t
{
	EDecisionTreeContextType__None                                                   = 0,
	EDecisionTreeContextType__All                                                    = 1,
	EDecisionTreeContextType__OutOfCombat                                            = 2,
	EDecisionTreeContextType__InCombat                                               = 3,
	EDecisionTreeContextType__Count                                                  = 4
};

/// Enum /Script/Indiana.EDisablePriority
/// Size: 0x01 (1 bytes)
enum class EDisablePriority : uint8_t
{
	EDisablePriority__Invalid                                                        = 0,
	EDisablePriority__IdleDisable                                                    = 1,
	EDisablePriority__ShockFace                                                      = 2,
	EDisablePriority__DelayableCombatEffect                                          = 3,
	EDisablePriority__LightHitReact                                                  = 4,
	EDisablePriority__HeavyHitReact                                                  = 5,
	EDisablePriority__ImmediateCombatEffect                                          = 6,
	EDisablePriority__CalledShotCombatEffect                                         = 7,
	EDisablePriority__PushEffect                                                     = 8,
	EDisablePriority__RagdollDisable                                                 = 9
};

/// Enum /Script/Indiana.EParentDefaultBehaviorType
/// Size: 0x01 (1 bytes)
enum class EParentDefaultBehaviorType : uint8_t
{
	EParentDefaultBehaviorType__Idle                                                 = 0,
	EParentDefaultBehaviorType__Wander                                               = 1
};

/// Enum /Script/Indiana.EDefaultBehaviorType
/// Size: 0x01 (1 bytes)
enum class EDefaultBehaviorType : uint8_t
{
	EDefaultBehaviorType__None                                                       = 0,
	EDefaultBehaviorType__Idle                                                       = 1,
	EDefaultBehaviorType__Patrol                                                     = 2,
	EDefaultBehaviorType__Follow                                                     = 3,
	EDefaultBehaviorType__FollowPlayer                                               = 4,
	EDefaultBehaviorType__Wander                                                     = 5
};

/// Enum /Script/Indiana.EBehaviorStatePriority
/// Size: 0x01 (1 bytes)
enum class EBehaviorStatePriority : uint8_t
{
	EBehaviorStatePriority__None                                                     = 0,
	EBehaviorStatePriority__Default                                                  = 1,
	EBehaviorStatePriority__SwitchContext                                            = 2,
	EBehaviorStatePriority__SwitchWeapon                                             = 3,
	EBehaviorStatePriority__Approach                                                 = 4,
	EBehaviorStatePriority__IdleDisable                                              = 5,
	EBehaviorStatePriority__Conversation                                             = 6,
	EBehaviorStatePriority__ShockFace                                                = 7,
	EBehaviorStatePriority__Blackout                                                 = 8,
	EBehaviorStatePriority__DelayableCombatEffect                                    = 9,
	EBehaviorStatePriority__LightHitReact                                            = 10,
	EBehaviorStatePriority__HeavyHitReact                                            = 11,
	EBehaviorStatePriority__ImmediateCombatEffect                                    = 12,
	EBehaviorStatePriority__CalledShotCombatEffect                                   = 13,
	EBehaviorStatePriority__PushEffect                                               = 14,
	EBehaviorStatePriority__RagdollDisable                                           = 15,
	EBehaviorStatePriority__CalledShot                                               = 16,
	EBehaviorStatePriority__ForceTeleport                                            = 17,
	EBehaviorStatePriority__Dead                                                     = 18
};

/// Enum /Script/Indiana.EDecisionTreeRequestPriority
/// Size: 0x01 (1 bytes)
enum class EDecisionTreeRequestPriority : uint8_t
{
	EDecisionTreeRequestPriority__None                                               = 0,
	EDecisionTreeRequestPriority__OutOfCombat                                        = 1,
	EDecisionTreeRequestPriority__Default                                            = 2,
	EDecisionTreeRequestPriority__ForcedQueued                                       = 3,
	EDecisionTreeRequestPriority__HardScript                                         = 4,
	EDecisionTreeRequestPriority__ForcedImmediate                                    = 5
};

/// Enum /Script/Indiana.ESlotPriority
/// Size: 0x01 (1 bytes)
enum class ESlotPriority : uint8_t
{
	ESlotPriority__Lowest                                                            = 0,
	ESlotPriority__Low                                                               = 1,
	ESlotPriority__Normal                                                            = 2,
	ESlotPriority__High                                                              = 3,
	ESlotPriority__Highest                                                           = 4
};

/// Enum /Script/Indiana.EWeaponSwitchType
/// Size: 0x01 (1 bytes)
enum class EWeaponSwitchType : uint8_t
{
	EWeaponSwitchType__Type                                                          = 0,
	EWeaponSwitchType__Slot                                                          = 1,
	EWeaponSwitchType__LimitedRanged                                                 = 2,
	EWeaponSwitchType__UnlimitedRanged                                               = 3,
	EWeaponSwitchType__CalledShot                                                    = 4
};

/// Enum /Script/Indiana.EAvoidanceGroupType
/// Size: 0x01 (1 bytes)
enum class EAvoidanceGroupType : uint8_t
{
	EAvoidanceGroupType__Default                                                     = 0,
	EAvoidanceGroupType__FleeingCritter                                              = 1
};

/// Enum /Script/Indiana.EJumpGravityState
/// Size: 0x01 (1 bytes)
enum class EJumpGravityState : uint8_t
{
	EJumpGravityState__Off                                                           = 0,
	EJumpGravityState__On                                                            = 1,
	EJumpGravityState__ForcedOn                                                      = 2
};

/// Enum /Script/Indiana.EStationaryRotateState
/// Size: 0x01 (1 bytes)
enum class EStationaryRotateState : uint8_t
{
	EStationaryRotateState__None                                                     = 0,
	EStationaryRotateState__Rotating                                                 = 1
};

/// Enum /Script/Indiana.ETraverseState
/// Size: 0x01 (1 bytes)
enum class ETraverseState : uint8_t
{
	ETraverseState__None                                                             = 0,
	ETraverseState__Waiting                                                          = 1,
	ETraverseState__Traversing                                                       = 2
};

/// Enum /Script/Indiana.EAIMovementState
/// Size: 0x01 (1 bytes)
enum class EAIMovementState : uint8_t
{
	EAIMovementState__Walk                                                           = 0,
	EAIMovementState__Run                                                            = 1,
	EAIMovementState__Sprint                                                         = 2,
	EAIMovementState__Dynamic                                                        = 3
};

/// Enum /Script/Indiana.EUsableCoverTypes
/// Size: 0x01 (1 bytes)
enum class EUsableCoverTypes : uint8_t
{
	EUsableCoverTypes__All                                                           = 0,
	EUsableCoverTypes__FullOnly                                                      = 1,
	EUsableCoverTypes__HalfOnly                                                      = 2
};

/// Enum /Script/Indiana.EDefensiveActionType
/// Size: 0x01 (1 bytes)
enum class EDefensiveActionType : uint8_t
{
	EDefensiveActionType__Unknown                                                    = 0,
	EDefensiveActionType__MeleeBlock                                                 = 1,
	EDefensiveActionType__Dodge                                                      = 2,
	EDefensiveActionType__ReactiveRange                                              = 3,
	EDefensiveActionType__Count                                                      = 4
};

/// Enum /Script/Indiana.ELostTargetSearchMode
/// Size: 0x01 (1 bytes)
enum class ELostTargetSearchMode : uint8_t
{
	ELostTargetSearchMode__DirectSearch                                              = 0,
	ELostTargetSearchMode__RepositionSearch                                          = 1
};

/// Enum /Script/Indiana.ELostTargetWaitTime
/// Size: 0x01 (1 bytes)
enum class ELostTargetWaitTime : uint8_t
{
	ELostTargetWaitTime__Invalid                                                     = 0,
	ELostTargetWaitTime__VeryShort                                                   = 1,
	ELostTargetWaitTime__Short                                                       = 2,
	ELostTargetWaitTime__Medium                                                      = 3,
	ELostTargetWaitTime__Long                                                        = 4
};

/// Enum /Script/Indiana.EMeleeRecoveryType
/// Size: 0x01 (1 bytes)
enum class EMeleeRecoveryType : uint8_t
{
	EMeleeRecoveryType__None                                                         = 0,
	EMeleeRecoveryType__Move                                                         = 1,
	EMeleeRecoveryType__Dodge                                                        = 2
};

/// Enum /Script/Indiana.EMeleeActionUseCase
/// Size: 0x01 (1 bytes)
enum class EMeleeActionUseCase : uint8_t
{
	EMeleeActionUseCase__Default                                                     = 0,
	EMeleeActionUseCase__WithinRange                                                 = 1,
	EMeleeActionUseCase__OutsideRange                                                = 2,
	EMeleeActionUseCase__AbilityOnly                                                 = 3,
	EMeleeActionUseCase__ForceIfOutsideRange                                         = 4
};

/// Enum /Script/Indiana.EPatrolType
/// Size: 0x01 (1 bytes)
enum class EPatrolType : uint8_t
{
	EPatrolType__OneShot                                                             = 0,
	EPatrolType__Loop                                                                = 1,
	EPatrolType__PingPong                                                            = 2
};

/// Enum /Script/Indiana.EAggresionType
/// Size: 0x01 (1 bytes)
enum class EAggresionType : uint8_t
{
	EAggresionType__Low                                                              = 0,
	EAggresionType__Medium                                                           = 1,
	EAggresionType__High                                                             = 2
};

/// Enum /Script/Indiana.ERangeBehaviorType
/// Size: 0x01 (1 bytes)
enum class ERangeBehaviorType : uint8_t
{
	ERangeBehaviorType__Cover                                                        = 0,
	ERangeBehaviorType__Range                                                        = 1,
	ERangeBehaviorType__PreferredRange                                               = 2,
	ERangeBehaviorType__None                                                         = 3
};

/// Enum /Script/Indiana.EOnEnterCombatBehavior
/// Size: 0x01 (1 bytes)
enum class EOnEnterCombatBehavior : uint8_t
{
	EOnEnterCombatBehavior__None                                                     = 0,
	EOnEnterCombatBehavior__StationaryFire                                           = 1,
	EOnEnterCombatBehavior__StationaryFireIfOutsidePreferredRange                    = 2
};

/// Enum /Script/Indiana.ESuppressingFireDuration
/// Size: 0x01 (1 bytes)
enum class ESuppressingFireDuration : uint8_t
{
	ESuppressingFireDuration__Invalid                                                = 0,
	ESuppressingFireDuration__Disabled                                               = 1,
	ESuppressingFireDuration__Short                                                  = 2,
	ESuppressingFireDuration__Medium                                                 = 3,
	ESuppressingFireDuration__Long                                                   = 4
};

/// Enum /Script/Indiana.EWeaponFireType
/// Size: 0x01 (1 bytes)
enum class EWeaponFireType : uint8_t
{
	EWeaponFireType__Ranged                                                          = 0,
	EWeaponFireType__Melee                                                           = 1
};

/// Enum /Script/Indiana.EAmmoType
/// Size: 0x01 (1 bytes)
enum class EAmmoType : uint8_t
{
	EAmmoType__Invalid                                                               = 0,
	EAmmoType__Handgun                                                               = 1,
	EAmmoType__Rifle                                                                 = 2,
	EAmmoType__Shotgun                                                               = 3,
	EAmmoType__Battery                                                               = 4,
	EAmmoType__EnergyCell                                                            = 5,
	EAmmoType__RPG                                                                   = 6,
	EAmmoType__Needler                                                               = 7
};

/// Enum /Script/Indiana.ENotifyChatterEventType
/// Size: 0x01 (1 bytes)
enum class ENotifyChatterEventType : uint8_t
{
	ENotifyChatterEventType__Invalid                                                 = 0,
	ENotifyChatterEventType__Event01                                                 = 1,
	ENotifyChatterEventType__Event02                                                 = 2,
	ENotifyChatterEventType__Event03                                                 = 3,
	ENotifyChatterEventType__Event04                                                 = 4,
	ENotifyChatterEventType__Event05                                                 = 5,
	ENotifyChatterEventType__Event06                                                 = 6,
	ENotifyChatterEventType__Event07                                                 = 7,
	ENotifyChatterEventType__Event08                                                 = 8,
	ENotifyChatterEventType__Event09                                                 = 9,
	ENotifyChatterEventType__Event10                                                 = 10,
	ENotifyChatterEventType__Event11                                                 = 11,
	ENotifyChatterEventType__Event12                                                 = 12
};

/// Enum /Script/Indiana.EDespawnRules
/// Size: 0x01 (1 bytes)
enum class EDespawnRules : uint8_t
{
	EDespawnRules__Idle                                                              = 0,
	EDespawnRules__Combat                                                            = 1,
	EDespawnRules__Never                                                             = 2
};

/// Enum /Script/Indiana.EHeadStyle
/// Size: 0x01 (1 bytes)
enum class EHeadStyle : uint8_t
{
	EHeadStyle__Normal                                                               = 0,
	EHeadStyle__NormalWithoutBeard                                                   = 1,
	EHeadStyle__CappedHair                                                           = 2,
	EHeadStyle__CappedHairWithoutBeard                                               = 3,
	EHeadStyle__HiddenHair                                                           = 4,
	EHeadStyle__HiddenHairWithoutBeard                                               = 5,
	EHeadStyle__CompletelyHidden                                                     = 6,
	EHeadStyle__None                                                                 = 7
};

/// Enum /Script/Indiana.EArmorModSlot
/// Size: 0x01 (1 bytes)
enum class EArmorModSlot : uint8_t
{
	EArmorModSlot__Armoring                                                          = 0,
	EArmorModSlot__Resistance                                                        = 1,
	EArmorModSlot__Dampening                                                         = 2,
	EArmorModSlot__Utility                                                           = 3,
	EArmorModSlot__Count                                                             = 4,
	EArmorModSlot__Invalid                                                           = 5
};

/// Enum /Script/Indiana.EArmorSlot
/// Size: 0x01 (1 bytes)
enum class EArmorSlot : uint8_t
{
	EArmorSlot__ArmorSet                                                             = 0,
	EArmorSlot__Helmet                                                               = 1,
	EArmorSlot__Count                                                                = 2,
	EArmorSlot__Invalid                                                              = 3
};

/// Enum /Script/Indiana.EAudioLogPackageType
/// Size: 0x01 (1 bytes)
enum class EAudioLogPackageType : uint8_t
{
	EAudioLogPackageType__BaseGame                                                   = 0,
	EAudioLogPackageType__INX01                                                      = 1,
	EAudioLogPackageType__INX02                                                      = 2
};

/// Enum /Script/Indiana.EUIMarkerType
/// Size: 0x01 (1 bytes)
enum class EUIMarkerType : uint8_t
{
	EUIMarkerType__None                                                              = 0,
	EUIMarkerType__Quest                                                             = 1,
	EUIMarkerType__POI_Undiscovered                                                  = 2,
	EUIMarkerType__AreaBeacon                                                        = 3,
	EUIMarkerType__Enemy                                                             = 4,
	EUIMarkerType__Hostile                                                           = 5,
	EUIMarkerType__POI_Discovered                                                    = 6,
	EUIMarkerType__NonHostile                                                        = 7,
	EUIMarkerType__HostilePacifist                                                   = 8,
	EUIMarkerType__Error                                                             = 9
};

/// Enum /Script/Indiana.EBeaconType
/// Size: 0x01 (1 bytes)
enum class EBeaconType : uint8_t
{
	EBeaconType__None                                                                = 0,
	EBeaconType__Type1                                                               = 1,
	EBeaconType__POI                                                                 = 2,
	EBeaconType__Max                                                                 = 3
};

/// Enum /Script/Indiana.ESpecialBeaconType
/// Size: 0x01 (1 bytes)
enum class ESpecialBeaconType : uint8_t
{
	ESpecialBeaconType__None                                                         = 0,
	ESpecialBeaconType__Ship                                                         = 1,
	ESpecialBeaconType__ShipDoor                                                     = 2,
	ESpecialBeaconType__ShipTerminal                                                 = 3
};

/// Enum /Script/Indiana.EFlowAbortCondition
/// Size: 0x01 (1 bytes)
enum class EFlowAbortCondition : uint8_t
{
	EFlowAbortCondition__Conditional                                                 = 0,
	EFlowAbortCondition__Custom                                                      = 1
};

/// Enum /Script/Indiana.EFlowAbortMode
/// Size: 0x01 (1 bytes)
enum class EFlowAbortMode : uint8_t
{
	EFlowAbortMode__None                                                             = 0,
	EFlowAbortMode__Self                                                             = 1
};

/// Enum /Script/Indiana.EAIScriptExecutionType
/// Size: 0x01 (1 bytes)
enum class EAIScriptExecutionType : uint8_t
{
	EAIScriptExecutionType__OnEnter                                                  = 0,
	EAIScriptExecutionType__OnUpdate                                                 = 1,
	EAIScriptExecutionType__OnExit                                                   = 2
};

/// Enum /Script/Indiana.EToggleScriptType
/// Size: 0x01 (1 bytes)
enum class EToggleScriptType : uint8_t
{
	EToggleScriptType__OnEnter                                                       = 0,
	EToggleScriptType__OnExit                                                        = 1
};

/// Enum /Script/Indiana.EAIAnimationParameter
/// Size: 0x01 (1 bytes)
enum class EAIAnimationParameter : uint8_t
{
	EAIAnimationParameter__InCover                                                   = 0,
	EAIAnimationParameter__InvestigatingDeadBody                                     = 1
};

/// Enum /Script/Indiana.EAnimationState
/// Size: 0x01 (1 bytes)
enum class EAnimationState : uint8_t
{
	EAnimationState__Combat                                                          = 0,
	EAnimationState__PreCombat                                                       = 1,
	EAnimationState__Neutral                                                         = 2,
	EAnimationState__None                                                            = 100
};

/// Enum /Script/Indiana.ETargetLostResponse
/// Size: 0x01 (1 bytes)
enum class ETargetLostResponse : uint8_t
{
	ETargetLostResponse__None                                                        = 0,
	ETargetLostResponse__AIEvent                                                     = 1,
	ETargetLostResponse__RequestNewTarget                                            = 2
};

/// Enum /Script/Indiana.EFiringPatternState
/// Size: 0x01 (1 bytes)
enum class EFiringPatternState : uint8_t
{
	EFiringPatternState__PrePause                                                    = 0,
	EFiringPatternState__StartPause                                                  = 1,
	EFiringPatternState__Burst                                                       = 2,
	EFiringPatternState__BurstAnimation                                              = 3,
	EFiringPatternState__BurstPause                                                  = 4,
	EFiringPatternState__EndPause                                                    = 5,
	EFiringPatternState__Invalid                                                     = 6
};

/// Enum /Script/Indiana.EFiringPatternCompleteType
/// Size: 0x01 (1 bytes)
enum class EFiringPatternCompleteType : uint8_t
{
	EFiringPatternCompleteType__FinishBehavior                                       = 0,
	EFiringPatternCompleteType__FinishTask                                           = 1,
	EFiringPatternCompleteType__Repeat                                               = 2
};

/// Enum /Script/Indiana.EMoveToResultResponse
/// Size: 0x01 (1 bytes)
enum class EMoveToResultResponse : uint8_t
{
	EMoveToResultResponse__ContinueTask                                              = 0,
	EMoveToResultResponse__ExitTask                                                  = 1,
	EMoveToResultResponse__ExitBehavior                                              = 2
};

/// Enum /Script/Indiana.EMoveToState
/// Size: 0x01 (1 bytes)
enum class EMoveToState : uint8_t
{
	EMoveToState__None                                                               = 0,
	EMoveToState__MoveToTarget                                                       = 1,
	EMoveToState__MoveToNavMesh                                                      = 2,
	EMoveToState__PartialSuccess                                                     = 3,
	EMoveToState__WaitForUnblock                                                     = 4,
	EMoveToState__Failed                                                             = 5,
	EMoveToState__Succeeded                                                          = 6
};

/// Enum /Script/Indiana.EMoveToResult
/// Size: 0x01 (1 bytes)
enum class EMoveToResult : uint8_t
{
	EMoveToResult__Pending                                                           = 0,
	EMoveToResult__Success                                                           = 1,
	EMoveToResult__Blocked                                                           = 2,
	EMoveToResult__UnexpectedFailure                                                 = 3,
	EMoveToResult__OffNavMesh                                                        = 4,
	EMoveToResult__Repath                                                            = 5,
	EMoveToResult__TotalFailure                                                      = 6
};

/// Enum /Script/Indiana.EAnimMovementModifierState
/// Size: 0x01 (1 bytes)
enum class EAnimMovementModifierState : uint8_t
{
	EAnimMovementModifierState__None                                                 = 0,
	EAnimMovementModifierState__Lamed                                                = 1,
	EAnimMovementModifierState__Hobbled                                              = 2
};

/// Enum /Script/Indiana.EAnimMovementState
/// Size: 0x01 (1 bytes)
enum class EAnimMovementState : uint8_t
{
	EAnimMovementState__OnGround                                                     = 0,
	EAnimMovementState__InAir                                                        = 1,
	EAnimMovementState__Sprinting                                                    = 2,
	EAnimMovementState__Climbing                                                     = 3
};

/// Enum /Script/Indiana.EDeathType
/// Size: 0x01 (1 bytes)
enum class EDeathType : uint8_t
{
	EDeathType__Corrosive                                                            = 0,
	EDeathType__Dismember                                                            = 1,
	EDeathType__Energy                                                               = 2,
	EDeathType__Gib                                                                  = 3,
	EDeathType__NRay                                                                 = 4,
	EDeathType__Ragdoll                                                              = 5,
	EDeathType__Shock                                                                = 6,
	EDeathType__Thermal                                                              = 7,
	EDeathType__Count                                                                = 8
};

/// Enum /Script/Indiana.ECharacterDeathTriBool
/// Size: 0x01 (1 bytes)
enum class ECharacterDeathTriBool : uint8_t
{
	ECharacterDeathTriBool__BFalse                                                   = 0,
	ECharacterDeathTriBool__BTrue                                                    = 1,
	ECharacterDeathTriBool__Any                                                      = 2,
	ECharacterDeathTriBool__Count                                                    = 3
};

/// Enum /Script/Indiana.ECharacterGrouping
/// Size: 0x01 (1 bytes)
enum class ECharacterGrouping : uint8_t
{
	ECharacterGrouping__None                                                         = 0,
	ECharacterGrouping__Complex                                                      = 1,
	ECharacterGrouping__GuardGardener                                                = 2,
	ECharacterGrouping__GuardIconoclasts                                             = 3,
	ECharacterGrouping__GuardLlama                                                   = 4,
	ECharacterGrouping__GuardMardets                                                 = 5,
	ECharacterGrouping__GuardOtherCorporate                                          = 6,
	ECharacterGrouping__GuardOutlaws                                                 = 7,
	ECharacterGrouping__GuardSublight                                                = 8,
	ECharacterGrouping__GuardUDL                                                     = 9,
	ECharacterGrouping__Infected                                                     = 10,
	ECharacterGrouping__Marauder                                                     = 11,
	ECharacterGrouping__RobotBipedCombatant                                          = 12,
	ECharacterGrouping__RobotBipedNonCombatant                                       = 13,
	ECharacterGrouping__RobotHoverCombatant                                          = 14,
	ECharacterGrouping__RobotHoverNonCombatant                                       = 15,
	ECharacterGrouping__RobotTripedCombatant                                         = 16,
	ECharacterGrouping__RobotTripedNonCombatant                                      = 17,
	ECharacterGrouping__TownieByzantium                                              = 18,
	ECharacterGrouping__TownieHoodlum                                                = 19,
	ECharacterGrouping__TownieLight                                                  = 20,
	ECharacterGrouping__TownieNonByzantium                                           = 21
};

/// Enum /Script/Indiana.ECreatureXPType
/// Size: 0x01 (1 bytes)
enum class ECreatureXPType : uint8_t
{
	ECreatureXPType__Invalid                                                         = 0,
	ECreatureXPType__Trivial                                                         = 1,
	ECreatureXPType__Fodder                                                          = 2,
	ECreatureXPType__Normal                                                          = 3,
	ECreatureXPType__Leader                                                          = 4,
	ECreatureXPType__Boss                                                            = 5
};

/// Enum /Script/Indiana.ECharacterSkillRange
/// Size: 0x01 (1 bytes)
enum class ECharacterSkillRange : uint8_t
{
	ECharacterSkillRange__Low                                                        = 0,
	ECharacterSkillRange__Medium                                                     = 1,
	ECharacterSkillRange__High                                                       = 2,
	ECharacterSkillRange__Extreme                                                    = 3,
	ECharacterSkillRange__Cosmetic                                                   = 4,
	ECharacterSkillRange__Count                                                      = 5,
	ECharacterSkillRange__Invalid                                                    = 6
};

/// Enum /Script/Indiana.EAttributeGroup
/// Size: 0x01 (1 bytes)
enum class EAttributeGroup : uint8_t
{
	EAttributeGroup__Body                                                            = 0,
	EAttributeGroup__Mind                                                            = 1,
	EAttributeGroup__Personality                                                     = 2,
	EAttributeGroup__Count                                                           = 3,
	EAttributeGroup__Invalid                                                         = 4
};

/// Enum /Script/Indiana.EChatterEventType
/// Size: 0x01 (1 bytes)
enum class EChatterEventType : uint8_t
{
	EChatterEventType__ALL_BlockHit                                                  = 0,
	EChatterEventType__ALL_Death                                                     = 1,
	EChatterEventType__ALL_DeathCorrosive                                            = 2,
	EChatterEventType__ALL_DeathEnergy                                               = 3,
	EChatterEventType__ALL_DeathGibbed                                               = 4,
	EChatterEventType__ALL_DeathNray                                                 = 5,
	EChatterEventType__ALL_DeathShock                                                = 6,
	EChatterEventType__ALL_DeathThermal                                              = 7,
	EChatterEventType__ALL_FallDamage                                                = 8,
	EChatterEventType__ALL_Hit                                                       = 9,
	EChatterEventType__ALL_HitCrit                                                   = 10,
	EChatterEventType__ALL_HitGraze                                                  = 11,
	EChatterEventType__ALL_HitHeavy                                                  = 12,
	EChatterEventType__ALL_HitNoDamage                                               = 13,
	EChatterEventType__ALL_LowHealth                                                 = 14,
	EChatterEventType__ALL_Melee                                                     = 15,
	EChatterEventType__ALL_MeleeHeavy                                                = 16,
	EChatterEventType__ALL_MeleeSweep                                                = 17,
	EChatterEventType__ALL_MovementDodge                                             = 18,
	EChatterEventType__ALL_MovementFalling                                           = 19,
	EChatterEventType__ALL_MovementJump                                              = 20,
	EChatterEventType__ALL_MovementLand                                              = 21,
	EChatterEventType__ALL_StateAcid                                                 = 22,
	EChatterEventType__ALL_StateBleed                                                = 23,
	EChatterEventType__ALL_StateBlind                                                = 24,
	EChatterEventType__ALL_StateBurning                                              = 25,
	EChatterEventType__ALL_StateConcuss                                              = 26,
	EChatterEventType__ALL_StateCripple                                              = 27,
	EChatterEventType__ALL_StateKnockback                                            = 28,
	EChatterEventType__ALL_StateMaim                                                 = 29,
	EChatterEventType__ALL_StatePoison                                               = 30,
	EChatterEventType__ALL_StateStaggered                                            = 31,
	EChatterEventType__COM_CommandAttack                                             = 32,
	EChatterEventType__COM_CommandCalledshot1                                        = 33,
	EChatterEventType__COM_CommandCalledshot2                                        = 34,
	EChatterEventType__COM_CommandCalledshot3                                        = 35,
	EChatterEventType__COM_CommandMoveInvalidLocation                                = 36,
	EChatterEventType__COM_CommandMove                                               = 37,
	EChatterEventType__COM_CommandReturn                                             = 38,
	EChatterEventType__COM_HackSuccessEasy                                           = 39,
	EChatterEventType__COM_HackSuccessHard                                           = 40,
	EChatterEventType__COM_Idle                                                      = 41,
	EChatterEventType__COM_LockpickSuccessEasy                                       = 42,
	EChatterEventType__COM_LockpickSuccessHard                                       = 43,
	EChatterEventType__COM_PartyCombatEnd                                            = 44,
	EChatterEventType__COM_PartyCombatEndNoDamageTaken                               = 45,
	EChatterEventType__COM_PartyCombatStartAttacked                                  = 46,
	EChatterEventType__COM_PartyCombatStartAttacking                                 = 47,
	EChatterEventType__COM_PartyCombatStartEasy                                      = 48,
	EChatterEventType__COM_PartyCombatStartHard                                      = 49,
	EChatterEventType__COM_PlayerDeath                                               = 50,
	EChatterEventType__COM_PlayerHitCrit                                             = 51,
	EChatterEventType__COM_PlayerHitGraze                                            = 52,
	EChatterEventType__COM_PlayerHitGrazeCorrosive                                   = 53,
	EChatterEventType__COM_PlayerHitGrazeEnergy                                      = 54,
	EChatterEventType__COM_PlayerHitGrazeNray                                        = 55,
	EChatterEventType__COM_PlayerHitGrazeShock                                       = 56,
	EChatterEventType__COM_PlayerHitGrazeThermal                                     = 57,
	EChatterEventType__COM_PlayerKill                                                = 58,
	EChatterEventType__COM_PlayerKillStealth                                         = 59,
	EChatterEventType__COM_PlayerLowHealth                                           = 60,
	EChatterEventType__COM_PlayerUseDrug                                             = 61,
	EChatterEventType__COM_ResumeBanter                                              = 62,
	EChatterEventType__COM_StealthEnter                                              = 63,
	EChatterEventType__COM_StealthExit                                               = 64,
	EChatterEventType__COM_StealthWarning                                            = 65,
	EChatterEventType__COM_WantsToTalk                                               = 66,
	EChatterEventType__NPC_AlertAllyDeath                                            = 67,
	EChatterEventType__NPC_AlertCorpse                                               = 68,
	EChatterEventType__NPC_AlertInvestigate                                          = 69,
	EChatterEventType__NPC_AlertSuspicious                                           = 70,
	EChatterEventType__NPC_CombatEndLostTarget                                       = 71,
	EChatterEventType__NPC_CombatEndTether                                           = 72,
	EChatterEventType__NPC_CombatEndVictory                                          = 73,
	EChatterEventType__NPC_CombatSearchIdle                                          = 74,
	EChatterEventType__NPC_CombatStartAttacked                                       = 75,
	EChatterEventType__NPC_CombatStartAttacking                                      = 76,
	EChatterEventType__NPC_CombatStartCrime                                          = 77,
	EChatterEventType__NPC_CombatStartScared                                         = 78,
	EChatterEventType__NPC_CombatTargetLost                                          = 79,
	EChatterEventType__NPC_CombatTargetReacquired                                    = 80,
	EChatterEventType__NPC_CrimeDetected                                             = 81,
	EChatterEventType__NPC_CrimeDetectedDisguise                                     = 82,
	EChatterEventType__NPC_CrimeDetectedHack                                         = 83,
	EChatterEventType__NPC_CrimeDetectedLockpick                                     = 84,
	EChatterEventType__NPC_CrimeDetectedPickpocket                                   = 85,
	EChatterEventType__NPC_CrimeDetectedRestrictedArea                               = 86,
	EChatterEventType__NPC_CrimeDetectedTheft                                        = 87,
	EChatterEventType__NPC_CrimeFleeing                                              = 88,
	EChatterEventType__NPC_DialogIntimidated                                         = 89,
	EChatterEventType__NPC_DialogLiedTo                                              = 90,
	EChatterEventType__NPC_DialogPersuaded                                           = 91,
	EChatterEventType__NPC_FriendlyFire                                              = 92,
	EChatterEventType__NPC_InterrogationBegin                                        = 93,
	EChatterEventType__NPC_InterrogationBeginRestrictedArea                          = 94,
	EChatterEventType__NPC_InterrogationBribed                                       = 95,
	EChatterEventType__NPC_InterrogationConvinced                                    = 96,
	EChatterEventType__NPC_InterrogationFight                                        = 97,
	EChatterEventType__NPC_InvestigateGiveUp                                         = 98,
	EChatterEventType__NPC_Kill                                                      = 99,
	EChatterEventType__NPC_MeleeWaiting                                              = 100,
	EChatterEventType__NPC_NoConversation                                            = 101,
	EChatterEventType__NPC_HeardCombat                                               = 102,
	EChatterEventType__NPC_ObserveCombat                                             = 103,
	EChatterEventType__NPC_PerfectDisguise                                           = 104,
	EChatterEventType__NPC_PersonalSpaceEnter                                        = 105,
	EChatterEventType__NPC_PersonalSpaceExit                                         = 106,
	EChatterEventType__NPC_SelfAdvance                                               = 107,
	EChatterEventType__NPC_SelfCover                                                 = 108,
	EChatterEventType__NPC_SelfReload                                                = 109,
	EChatterEventType__NPC_SelfSuppress                                              = 110,
	EChatterEventType__NPC_SelfSwitchTarget                                          = 111,
	EChatterEventType__NPC_SquadAdvance                                              = 112,
	EChatterEventType__NPC_SquadCover                                                = 113,
	EChatterEventType__NPC_SquadSuppress                                             = 114,
	EChatterEventType__NPC_SquadSwitchTarget                                         = 115,
	EChatterEventType__NPC_StateDisarmed                                             = 116,
	EChatterEventType__NPC_StateKnockdown                                            = 117,
	EChatterEventType__NPC_StateKnockout                                             = 118,
	EChatterEventType__NPC_StateStunned                                              = 119,
	EChatterEventType__NPC_Threatened                                                = 120,
	EChatterEventType__PL_Medkit                                                     = 121,
	EChatterEventType__PL_SkillIntimidate                                            = 122,
	EChatterEventType__PL_SkillLie                                                   = 123,
	EChatterEventType__PL_SkillPersuade                                              = 124,
	EChatterEventType__ROBO_HackPowerDown                                            = 125,
	EChatterEventType__ROBO_HackPowerUp                                              = 126,
	EChatterEventType__ROBO_HackWarning                                              = 127,
	EChatterEventType__COM_NPCTargetedPlayerBack                                     = 128,
	EChatterEventType__COM_NPCTargetedPlayerFront                                    = 129,
	EChatterEventType__COM_NPCTargetedPlayerLeft                                     = 130,
	EChatterEventType__COM_NPCTargetedPlayerRight                                    = 131,
	EChatterEventType__AnimNotify01                                                  = 132,
	EChatterEventType__AnimNotify02                                                  = 133,
	EChatterEventType__AnimNotify03                                                  = 134,
	EChatterEventType__AnimNotify04                                                  = 135,
	EChatterEventType__AnimNotify05                                                  = 136,
	EChatterEventType__AnimNotify06                                                  = 137,
	EChatterEventType__AnimNotify07                                                  = 138,
	EChatterEventType__AnimNotify08                                                  = 139,
	EChatterEventType__AnimNotify09                                                  = 140,
	EChatterEventType__AnimNotify10                                                  = 141,
	EChatterEventType__AnimNotify11                                                  = 142,
	EChatterEventType__AnimNotify12                                                  = 143,
	EChatterEventType__Cutscene_Line01                                               = 144,
	EChatterEventType__Cutscene_Line02                                               = 145,
	EChatterEventType__Cutscene_Line03                                               = 146,
	EChatterEventType__Cutscene_Line04                                               = 147,
	EChatterEventType__Cutscene_Line05                                               = 148,
	EChatterEventType__Cutscene_Line06                                               = 149,
	EChatterEventType__Cutscene_Line07                                               = 150,
	EChatterEventType__Cutscene_Line08                                               = 151,
	EChatterEventType__Cutscene_Line09                                               = 152,
	EChatterEventType__Cutscene_Line10                                               = 153,
	EChatterEventType__Cutscene_Line11                                               = 154,
	EChatterEventType__Cutscene_Line12                                               = 155,
	EChatterEventType__Cutscene_Line13                                               = 156,
	EChatterEventType__Cutscene_Line14                                               = 157,
	EChatterEventType__Cutscene_Line15                                               = 158,
	EChatterEventType__Cutscene_Line16                                               = 159,
	EChatterEventType__Stub1                                                         = 160,
	EChatterEventType__Stub2                                                         = 161,
	EChatterEventType__Stub3                                                         = 162,
	EChatterEventType__Stub4                                                         = 163,
	EChatterEventType__Stub5                                                         = 164,
	EChatterEventType__Count                                                         = 165
};

/// Enum /Script/Indiana.EChatterLevel
/// Size: 0x01 (1 bytes)
enum class EChatterLevel : uint8_t
{
	EChatterLevel__All                                                               = 0,
	EChatterLevel__EventType                                                         = 1,
	EChatterLevel__Group                                                             = 2,
	EChatterLevel__Character                                                         = 3
};

/// Enum /Script/Indiana.EClearThreatTarget
/// Size: 0x04 (4 bytes)
enum class EClearThreatTarget : uint32_t
{
	EClearThreatTarget__Applier                                                      = 0,
	EClearThreatTarget__Companions                                                   = 1,
	EClearThreatTarget__Player                                                       = 2
};

/// Enum /Script/Indiana.ECameraParamsScore
/// Size: 0x01 (1 bytes)
enum class ECameraParamsScore : uint8_t
{
	ECameraParamsScore__Invalid                                                      = 0,
	ECameraParamsScore__Fail                                                         = 1,
	ECameraParamsScore__InitialEnvSweepFail                                          = 2,
	ECameraParamsScore__InitialEnvCharSweepFail                                      = 3,
	ECameraParamsScore__EnvClear                                                     = 4,
	ECameraParamsScore__InitialEnvCharSweepEnv                                       = 5,
	ECameraParamsScore__EnvCharClear                                                 = 6
};

/// Enum /Script/Indiana.ECompanionSlot
/// Size: 0x01 (1 bytes)
enum class ECompanionSlot : uint8_t
{
	ECompanionSlot__Slot1                                                            = 0,
	ECompanionSlot__Slot2                                                            = 1
};

/// Enum /Script/Indiana.ECompanionFollowDistance
/// Size: 0x01 (1 bytes)
enum class ECompanionFollowDistance : uint8_t
{
	ECompanionFollowDistance__Close                                                  = 0,
	ECompanionFollowDistance__Medium                                                 = 1,
	ECompanionFollowDistance__Far                                                    = 2,
	ECompanionFollowDistance__Invalid                                                = 3
};

/// Enum /Script/Indiana.ECompanionPosition
/// Size: 0x01 (1 bytes)
enum class ECompanionPosition : uint8_t
{
	ECompanionPosition__CompanionLeft                                                = 0,
	ECompanionPosition__CompanionRight                                               = 1,
	ECompanionPosition__NumCompanionPositions                                        = 2,
	ECompanionPosition__Follower                                                     = 3
};

/// Enum /Script/Indiana.EEaseType
/// Size: 0x04 (4 bytes)
enum class EEaseType : uint32_t
{
	EEaseType__CircularIn                                                            = 0,
	EEaseType__CircularOut                                                           = 1,
	EEaseType__CircularInOut                                                         = 2,
	EEaseType__EaseIn                                                                = 3,
	EEaseType__EaseOut                                                               = 4,
	EEaseType__EaseInOut                                                             = 5,
	EEaseType__ExpoIn                                                                = 6,
	EEaseType__ExpoOut                                                               = 7,
	EEaseType__ExpoInOut                                                             = 8,
	EEaseType__SinIn                                                                 = 9,
	EEaseType__SinOut                                                                = 10,
	EEaseType__SinInOut                                                              = 11,
	EEaseType__Step                                                                  = 12,
	EEaseType__Lerp                                                                  = 13
};

/// Enum /Script/Indiana.EComputerTerminalResult
/// Size: 0x01 (1 bytes)
enum class EComputerTerminalResult : uint8_t
{
	EComputerTerminalResult__Success                                                 = 0,
	EComputerTerminalResult__Failed_Locked                                           = 1,
	EComputerTerminalResult__Failed_Locked_Permanent                                 = 2,
	EComputerTerminalResult__Failed_Locked_Key_NoHack                                = 3,
	EComputerTerminalResult__Failed_Locked_ComputerNoKey_HackResource                = 4,
	EComputerTerminalResult__Failed_Locked_Key_HackResource                          = 5,
	EComputerTerminalResult__Failed_Locked_Hack_SkillInsufficient                    = 6,
	EComputerTerminalResult__Failed_Locked_Error                                     = 7,
	EComputerTerminalResult__Pending_Hacking                                         = 8
};

/// Enum /Script/Indiana.EComputerTerminalEventType
/// Size: 0x01 (1 bytes)
enum class EComputerTerminalEventType : uint8_t
{
	EComputerTerminalEventType__Invalid                                              = 0,
	EComputerTerminalEventType__Use                                                  = 1,
	EComputerTerminalEventType__Unlocked                                             = 2,
	EComputerTerminalEventType__UnlockAttemptedLocked                                = 3,
	EComputerTerminalEventType__Locked                                               = 4,
	EComputerTerminalEventType__InsufficientSkill                                    = 5,
	EComputerTerminalEventType__HackSuccess                                          = 6,
	EComputerTerminalEventType__HackStart                                            = 7,
	EComputerTerminalEventType__HackInterrupted                                      = 8,
	EComputerTerminalEventType__InteractLoopFinished                                 = 9
};

/// Enum /Script/Indiana.EComputerType
/// Size: 0x01 (1 bytes)
enum class EComputerType : uint8_t
{
	EComputerType__Invalid                                                           = 0,
	EComputerType__None                                                              = 1,
	EComputerType__SpacersChoice                                                     = 2,
	EComputerType__AuntieCleos                                                       = 3,
	EComputerType__UniversalDefenseLogistics                                         = 4,
	EComputerType__CandP                                                             = 5,
	EComputerType__Rizzo                                                             = 6,
	EComputerType__MonarchStellarIndustries                                          = 7,
	EComputerType__TandL                                                             = 8,
	EComputerType__Error                                                             = 9,
	EComputerType__TheGroundbreaker                                                  = 10,
	EComputerType__TheHope                                                           = 11,
	EComputerType__Iconoclast                                                        = 12,
	EComputerType__JobBoard                                                          = 13
};

/// Enum /Script/Indiana.EConversationRestrictions
/// Size: 0x04 (4 bytes)
enum class EConversationRestrictions : uint32_t
{
	EConversationRestrictions__None                                                  = 0,
	EConversationRestrictions__Combat                                                = 1,
	EConversationRestrictions__HostileSE                                             = 2,
	EConversationRestrictions__All                                                   = -1
};

/// Enum /Script/Indiana.EPayloadID
/// Size: 0x01 (1 bytes)
enum class EPayloadID : uint8_t
{
	EPayloadID__None                                                                 = 0,
	EPayloadID__Payload1                                                             = 1,
	EPayloadID__Payload2                                                             = 2,
	EPayloadID__Payload3                                                             = 3,
	EPayloadID__Payload4                                                             = 4,
	EPayloadID__Payload5                                                             = 5,
	EPayloadID__Payload6                                                             = 6,
	EPayloadID__Payload7                                                             = 7,
	EPayloadID__Payload8                                                             = 8,
	EPayloadID__Payload9                                                             = 9,
	EPayloadID__Payload10                                                            = 10,
	EPayloadID__Payload11                                                            = 11,
	EPayloadID__Payload12                                                            = 12,
	EPayloadID__Payload13                                                            = 13,
	EPayloadID__Payload14                                                            = 14,
	EPayloadID__Payload15                                                            = 15,
	EPayloadID__Payload16                                                            = 16,
	EPayloadID__Payload17                                                            = 17,
	EPayloadID__Payload18                                                            = 18,
	EPayloadID__Payload19                                                            = 19,
	EPayloadID__Payload20                                                            = 20,
	EPayloadID__Payload21                                                            = 21,
	EPayloadID__Payload22                                                            = 22,
	EPayloadID__Payload23                                                            = 23,
	EPayloadID__Payload24                                                            = 24,
	EPayloadID__Payload25                                                            = 25,
	EPayloadID__Payload26                                                            = 26,
	EPayloadID__Payload27                                                            = 27,
	EPayloadID__Payload28                                                            = 28,
	EPayloadID__Payload29                                                            = 29,
	EPayloadID__Payload30                                                            = 30
};

/// Enum /Script/Indiana.ECameraFramingOffset
/// Size: 0x01 (1 bytes)
enum class ECameraFramingOffset : uint8_t
{
	ECameraFramingOffset__Auto                                                       = 0,
	ECameraFramingOffset__Center                                                     = 1,
	ECameraFramingOffset__Left                                                       = 2,
	ECameraFramingOffset__Right                                                      = 3
};

/// Enum /Script/Indiana.ECreateItemCountRule
/// Size: 0x01 (1 bytes)
enum class ECreateItemCountRule : uint8_t
{
	ECreateItemCountRule__UseItemDefinitionCount                                     = 0,
	ECreateItemCountRule__UseFormulaTier1Count                                       = 1,
	ECreateItemCountRule__UseFormulaTier2Count                                       = 2,
	ECreateItemCountRule__UseFormulaTier3Count                                       = 3
};

/// Enum /Script/Indiana.FCreditsSpacingType
/// Size: 0x01 (1 bytes)
enum class FCreditsSpacingType : uint8_t
{
	FCreditsSpacingType__None                                                        = 0,
	FCreditsSpacingType__VerySmall                                                   = 1,
	FCreditsSpacingType__Small                                                       = 2,
	FCreditsSpacingType__Average                                                     = 3,
	FCreditsSpacingType__Large                                                       = 4,
	FCreditsSpacingType__VeryLarge                                                   = 5
};

/// Enum /Script/Indiana.FCreditsTextType
/// Size: 0x01 (1 bytes)
enum class FCreditsTextType : uint8_t
{
	FCreditsTextType__None                                                           = 0,
	FCreditsTextType__Header                                                         = 1,
	FCreditsTextType__Subheader                                                      = 2,
	FCreditsTextType__Title                                                          = 3,
	FCreditsTextType__Subtitle                                                       = 4,
	FCreditsTextType__Normal                                                         = 5
};

/// Enum /Script/Indiana.FCreditsDisplayType
/// Size: 0x01 (1 bytes)
enum class FCreditsDisplayType : uint8_t
{
	FCreditsDisplayType__None                                                        = 0,
	FCreditsDisplayType__Text                                                        = 1,
	FCreditsDisplayType__Image                                                       = 2,
	FCreditsDisplayType__Spacing                                                     = 3
};

/// Enum /Script/Indiana.EMeleeAttackType
/// Size: 0x01 (1 bytes)
enum class EMeleeAttackType : uint8_t
{
	EMeleeAttackType__None                                                           = 0,
	EMeleeAttackType__Light                                                          = 1,
	EMeleeAttackType__Heavy                                                          = 2,
	EMeleeAttackType__WindUp                                                         = 3
};

/// Enum /Script/Indiana.EHitReactType
/// Size: 0x01 (1 bytes)
enum class EHitReactType : uint8_t
{
	EHitReactType__None                                                              = 0,
	EHitReactType__Light                                                             = 1,
	EHitReactType__Heavy                                                             = 2
};

/// Enum /Script/Indiana.EDamageFlags
/// Size: 0x04 (4 bytes)
enum class EDamageFlags : uint32_t
{
	EDamageFlags__None                                                               = 0,
	EDamageFlags__Critical                                                           = 1,
	EDamageFlags__Graze                                                              = 2,
	EDamageFlags__Melee                                                              = 4,
	EDamageFlags__CalledShot                                                         = 8,
	EDamageFlags__Stealth                                                            = 16,
	EDamageFlags__NoDamage                                                           = 32,
	EDamageFlags__Blocked                                                            = 64,
	EDamageFlags__Range                                                              = 128,
	EDamageFlags__IgnoreNonSealedArmor                                               = 256,
	EDamageFlags__WeakSpot                                                           = 512,
	EDamageFlags__KillingBlow                                                        = 1024,
	EDamageFlags__CanDamageFriends                                                   = 2048,
	EDamageFlags__AllDamageTypes                                                     = 4096,
	EDamageFlags__PowerAttack                                                        = 8192,
	EDamageFlags__IgnorePostArmorMult                                                = 16384,
	EDamageFlags__SweepAttack                                                        = 32768,
	EDamageFlags__FriendlyFire                                                       = 65536,
	EDamageFlags__TacticalTimeDilation                                               = 131072,
	EDamageFlags__ScienceWeapon                                                      = 262144,
	EDamageFlags__IgnoreDTDR                                                         = 524288,
	EDamageFlags__Suicide                                                            = 1048576,
	EDamageFlags__HeadShot                                                           = 2097152,
	EDamageFlags__ApplyOnTick                                                        = 4194304,
	EDamageFlags__Spell                                                              = 8388608,
	EDamageFlags__IsLastTarget                                                       = 16777216
};

/// Enum /Script/Indiana.EDamageScalars
/// Size: 0x01 (1 bytes)
enum class EDamageScalars : uint8_t
{
	EDamageScalars__WeaponLevel                                                      = 0,
	EDamageScalars__CharLevel                                                        = 1,
	EDamageScalars__TargetLevel                                                      = 2,
	EDamageScalars__WeaponDurability                                                 = 3,
	EDamageScalars__SneakAttack                                                      = 4,
	EDamageScalars__WeaponCritMult                                                   = 5,
	EDamageScalars__SimulateCrit                                                     = 6
};

/// Enum /Script/Indiana.EDamageValueType
/// Size: 0x01 (1 bytes)
enum class EDamageValueType : uint8_t
{
	EDamageValueType__Value                                                          = 0,
	EDamageValueType__Percent                                                        = 1
};

/// Enum /Script/Indiana.EDamageBaseAmount
/// Size: 0x01 (1 bytes)
enum class EDamageBaseAmount : uint8_t
{
	EDamageBaseAmount__Default                                                       = 0,
	EDamageBaseAmount__WeaponDPS                                                     = 1
};

/// Enum /Script/Indiana.EDecisionTreeProcessType
/// Size: 0x01 (1 bytes)
enum class EDecisionTreeProcessType : uint8_t
{
	EDecisionTreeProcessType__None                                                   = 0,
	EDecisionTreeProcessType__FirstSuccess                                           = 1,
	EDecisionTreeProcessType__Sequential                                             = 2
};

/// Enum /Script/Indiana.EStateInfoResultType
/// Size: 0x01 (1 bytes)
enum class EStateInfoResultType : uint8_t
{
	EStateInfoResultType__Failure                                                    = 0,
	EStateInfoResultType__Success                                                    = 1,
	EStateInfoResultType__RunScript                                                  = 2
};

/// Enum /Script/Indiana.EDestructibleState
/// Size: 0x01 (1 bytes)
enum class EDestructibleState : uint8_t
{
	EDestructibleState__Pristine                                                     = 0,
	EDestructibleState__Damaged                                                      = 1,
	EDestructibleState__Destroyed                                                    = 2
};

/// Enum /Script/Indiana.EDestructibleEventType
/// Size: 0x01 (1 bytes)
enum class EDestructibleEventType : uint8_t
{
	EDestructibleEventType__Invalid                                                  = 0,
	EDestructibleEventType__Pristine                                                 = 1,
	EDestructibleEventType__Damaged                                                  = 2,
	EDestructibleEventType__Destroyed                                                = 3
};

/// Enum /Script/Indiana.EDialogPromptMode
/// Size: 0x01 (1 bytes)
enum class EDialogPromptMode : uint8_t
{
	EDialogPromptMode__AcceptCancel                                                  = 0,
	EDialogPromptMode__ContinueCancel                                                = 1,
	EDialogPromptMode__YesNo                                                         = 2,
	EDialogPromptMode__ConfirmBack                                                   = 3,
	EDialogPromptMode__KeepRevert                                                    = 4
};

/// Enum /Script/Indiana.EVOPositioning
/// Size: 0x01 (1 bytes)
enum class EVOPositioning : uint8_t
{
	EVOPositioning__Default                                                          = 0,
	EVOPositioning__NonPositional                                                    = 1,
	EVOPositioning__Positional                                                       = 2
};

/// Enum /Script/Indiana.EDisableTrackingType
/// Size: 0x01 (1 bytes)
enum class EDisableTrackingType : uint8_t
{
	EDisableTrackingType__Locked                                                     = 0,
	EDisableTrackingType__TrackCaster                                                = 1,
	EDisableTrackingType__None                                                       = 2
};

/// Enum /Script/Indiana.EDisguiseKeyResult
/// Size: 0x01 (1 bytes)
enum class EDisguiseKeyResult : uint8_t
{
	EDisguiseKeyResult__MissingShroud                                                = 0,
	EDisguiseKeyResult__MissingKey                                                   = 1,
	EDisguiseKeyResult__Passed                                                       = 2
};

/// Enum /Script/Indiana.EWeatherType
/// Size: 0x01 (1 bytes)
enum class EWeatherType : uint8_t
{
	EWeatherType__None                                                               = 0,
	EWeatherType__Rain                                                               = 1,
	EWeatherType__Dust                                                               = 2,
	EWeatherType__Snow                                                               = 3
};

/// Enum /Script/Indiana.EElevatorEventType
/// Size: 0x01 (1 bytes)
enum class EElevatorEventType : uint8_t
{
	EElevatorEventType__Invalid                                                      = 0,
	EElevatorEventType__MoveStart                                                    = 1,
	EElevatorEventType__MoveEnd                                                      = 2
};

/// Enum /Script/Indiana.ECoreFaceEmotion
/// Size: 0x01 (1 bytes)
enum class ECoreFaceEmotion : uint8_t
{
	ECoreFaceEmotion__DoNotChange                                                    = 0,
	ECoreFaceEmotion__Fear                                                           = 27,
	ECoreFaceEmotion__Angry                                                          = 1,
	ECoreFaceEmotion__Disgust                                                        = 28,
	ECoreFaceEmotion__Flirtatious                                                    = 17,
	ECoreFaceEmotion__Happy                                                          = 8,
	ECoreFaceEmotion__Sad                                                            = 11,
	ECoreFaceEmotion__Shock                                                          = 12,
	ECoreFaceEmotion__Neutral                                                        = 9,
	ECoreFaceEmotion__Annoyed                                                        = 2,
	ECoreFaceEmotion__Anxious                                                        = 3,
	ECoreFaceEmotion__Awkward                                                        = 4,
	ECoreFaceEmotion__Despair                                                        = 6,
	ECoreFaceEmotion__Proud                                                          = 10,
	ECoreFaceEmotion__Skeptical                                                      = 13,
	ECoreFaceEmotion__SlightlyAngry                                                  = 14,
	ECoreFaceEmotion__SlightlyHappy                                                  = 15,
	ECoreFaceEmotion__Livid                                                          = 20,
	ECoreFaceEmotion__SlightlyAnnoyed                                                = 21,
	ECoreFaceEmotion__Smolder                                                        = 30,
	ECoreFaceEmotion__Confused                                                       = 31,
	ECoreFaceEmotion__Smug                                                           = 32,
	ECoreFaceEmotion__Grimace                                                        = 33,
	ECoreFaceEmotion__Smirk                                                          = 16
};

/// Enum /Script/Indiana.EPosture
/// Size: 0x01 (1 bytes)
enum class EPosture : uint8_t
{
	EPosture__DoNotUse                                                               = 0,
	EPosture__Conspiratorial                                                         = 5,
	EPosture__Drunk                                                                  = 7,
	EPosture__DrunkBar                                                               = 26,
	EPosture__Thinking                                                               = 18,
	EPosture__Neutral                                                                = 9,
	EPosture__Angry                                                                  = 36,
	EPosture__Relaxed                                                                = 37,
	EPosture__ReadDocument                                                           = 38
};

/// Enum /Script/Indiana.EEmotion
/// Size: 0x01 (1 bytes)
enum class EEmotion : uint8_t
{
	EEmotion__DoNotUse                                                               = 0,
	EEmotion__Angry                                                                  = 1,
	EEmotion__Annoyed                                                                = 2,
	EEmotion__Anxious                                                                = 3,
	EEmotion__Awkward                                                                = 4,
	EEmotion__Conspiratorial                                                         = 5,
	EEmotion__Despair                                                                = 6,
	EEmotion__Drunk                                                                  = 7,
	EEmotion__Happy                                                                  = 8,
	EEmotion__Neutral                                                                = 9,
	EEmotion__Proud                                                                  = 10,
	EEmotion__Sad                                                                    = 11,
	EEmotion__Shock                                                                  = 12,
	EEmotion__Skeptical                                                              = 13,
	EEmotion__SlightlyAngry                                                          = 14,
	EEmotion__SlightlyHappy                                                          = 15,
	EEmotion__Smirk                                                                  = 16,
	EEmotion__Smolder                                                                = 17,
	EEmotion__Thinking                                                               = 18,
	EEmotion__WorkBench                                                              = 19,
	EEmotion__Livid                                                                  = 20,
	EEmotion__SlightlyAnnoyed                                                        = 21,
	EEmotion__LookDown                                                               = 22,
	EEmotion__LookLeft                                                               = 23,
	EEmotion__LookRight                                                              = 24,
	EEmotion__LookUp                                                                 = 25,
	EEmotion__DrunkBar                                                               = 26,
	EEmotion__Fear                                                                   = 27,
	EEmotion__Disgust                                                                = 28,
	EEmotion__Injured                                                                = 29,
	EEmotion__SmolderNew                                                             = 30,
	EEmotion__Confused                                                               = 31,
	EEmotion__Smug                                                                   = 32,
	EEmotion__Grimace                                                                = 33,
	EEmotion__Yes                                                                    = 34,
	EEmotion__No                                                                     = 35,
	EEmotion__AngryPosture                                                           = 36,
	EEmotion__RelaxedPosture                                                         = 37,
	EEmotion__ReadDocumentPosture                                                    = 38,
	EEmotion__NumEmotionStates                                                       = 39
};

/// Enum /Script/Indiana.EEncounterAggroType
/// Size: 0x01 (1 bytes)
enum class EEncounterAggroType : uint8_t
{
	EEncounterAggroType__Default                                                     = 0,
	EEncounterAggroType__On                                                          = 1,
	EEncounterAggroType__Off                                                         = 2
};

/// Enum /Script/Indiana.EEndGameImageType
/// Size: 0x01 (1 bytes)
enum class EEndGameImageType : uint8_t
{
	EEndGameImageType__Invalid                                                       = 0,
	EEndGameImageType__SkipHopeToSun                                                 = 1,
	EEndGameImageType__BoardPath                                                     = 2,
	EEndGameImageType__ScientistPath                                                 = 3
};

/// Enum /Script/Indiana.EHolsterRequestSource
/// Size: 0x01 (1 bytes)
enum class EHolsterRequestSource : uint8_t
{
	EHolsterRequestSource__None                                                      = 0,
	EHolsterRequestSource__Player                                                    = 1,
	EHolsterRequestSource__Ladder                                                    = 2,
	EHolsterRequestSource__Medkit                                                    = 4,
	EHolsterRequestSource__Scripted                                                  = 8
};

/// Enum /Script/Indiana.EEventEffectFloatParams
/// Size: 0x01 (1 bytes)
enum class EEventEffectFloatParams : uint8_t
{
	EEventEffectFloatParams__Duration                                                = 0,
	EEventEffectFloatParams__Size                                                    = 1,
	EEventEffectFloatParams__Scalar                                                  = 2,
	EEventEffectFloatParams__NormalizedStartTime                                     = 3,
	EEventEffectFloatParams__SkipAnimations                                          = 4,
	EEventEffectFloatParams__RateOfFire                                              = 5,
	EEventEffectFloatParams__Count                                                   = 6,
	EEventEffectFloatParams__Invalid                                                 = 7
};

/// Enum /Script/Indiana.ETTDState
/// Size: 0x01 (1 bytes)
enum class ETTDState : uint8_t
{
	ETTDState__Invalid                                                               = 0,
	ETTDState__TTDOnly                                                               = 1,
	ETTDState__NotInTTDOnly                                                          = 2
};

/// Enum /Script/Indiana.EFactionHardEnum
/// Size: 0x01 (1 bytes)
enum class EFactionHardEnum : uint8_t
{
	EFactionHardEnum__Anarchists                                                     = 0,
	EFactionHardEnum__Byzantium                                                      = 1,
	EFactionHardEnum__CnPFactory                                                     = 2,
	EFactionHardEnum__Deserters                                                      = 3,
	EFactionHardEnum__EmeraldVale                                                    = 4,
	EFactionHardEnum__Fairfield                                                      = 5,
	EFactionHardEnum__Groundbreaker                                                  = 6,
	EFactionHardEnum__InformationBroker                                              = 7,
	EFactionHardEnum__Keystone                                                       = 8,
	EFactionHardEnum__Marauders                                                      = 9,
	EFactionHardEnum__MatherFamily                                                   = 10,
	EFactionHardEnum__Midway                                                         = 11,
	EFactionHardEnum__MSI                                                            = 12,
	EFactionHardEnum__Roseway                                                        = 13,
	EFactionHardEnum__SpacersChoice                                                  = 14,
	EFactionHardEnum__StellarBayResidents                                            = 15,
	EFactionHardEnum__Syndicate                                                      = 16,
	EFactionHardEnum__TartarusMilitary                                               = 17,
	EFactionHardEnum__TartarusPrisoners                                              = 18,
	EFactionHardEnum__TartarusWorkers                                                = 19,
	EFactionHardEnum__TheBoard                                                       = 20,
	EFactionHardEnum__TheHope                                                        = 21,
	EFactionHardEnum__Count                                                          = 22
};

/// Enum /Script/Indiana.EFactionVisibility
/// Size: 0x01 (1 bytes)
enum class EFactionVisibility : uint8_t
{
	EFactionVisibility__Never                                                        = 0,
	EFactionVisibility__Always                                                       = 1,
	EFactionVisibility__Encounter                                                    = 2
};

/// Enum /Script/Indiana.ERapidFireMode
/// Size: 0x01 (1 bytes)
enum class ERapidFireMode : uint8_t
{
	ERapidFireMode__None                                                             = 0,
	ERapidFireMode__RapidFire                                                        = 1,
	ERapidFireMode__FineRapidFire                                                    = 2
};

/// Enum /Script/Indiana.EFireMode
/// Size: 0x01 (1 bytes)
enum class EFireMode : uint8_t
{
	EFireMode__Automatic                                                             = 0,
	EFireMode__Burst                                                                 = 1,
	EFireMode__Charge                                                                = 2,
	EFireMode__SemiAutomatic                                                         = 3,
	EFireMode__SpinUp                                                                = 4,
	EFireMode__ProjectileCharge                                                      = 5
};

/// Enum /Script/Indiana.EFlawTrigger
/// Size: 0x01 (1 bytes)
enum class EFlawTrigger : uint8_t
{
	EFlawTrigger__SpendMoney                                                         = 0,
	EFlawTrigger__EyeInjury                                                          = 1,
	EFlawTrigger__HeadInjury                                                         = 2,
	EFlawTrigger__DialogFastSelection                                                = 3,
	EFlawTrigger__DialogAttack                                                       = 4,
	EFlawTrigger__SetOffAlarm                                                        = 5,
	EFlawTrigger__MaimedArm                                                          = 6,
	EFlawTrigger__CrippledLeg                                                        = 7,
	EFlawTrigger__Blinded                                                            = 8,
	EFlawTrigger__Concussed                                                          = 9,
	EFlawTrigger__DamageThermal                                                      = 10,
	EFlawTrigger__DamageCorrosion                                                    = 11,
	EFlawTrigger__DamageNRay                                                         = 12,
	EFlawTrigger__DamageShock                                                        = 13,
	EFlawTrigger__DamagePoison                                                       = 14,
	EFlawTrigger__DamageSwarm                                                        = 15,
	EFlawTrigger__DamageFalling                                                      = 16,
	EFlawTrigger__DamageRaptidon                                                     = 17,
	EFlawTrigger__DamageRobot                                                        = 18,
	EFlawTrigger__DamagePhysical                                                     = 19,
	EFlawTrigger__AddictionDrug                                                      = 20,
	EFlawTrigger__AddictionFood                                                      = 21,
	EFlawTrigger__AddictionAlcohol                                                   = 22,
	EFlawTrigger__AddictionSmoke                                                     = 23,
	EFlawTrigger__Count                                                              = 24
};

/// Enum /Script/Indiana.EFlawType
/// Size: 0x01 (1 bytes)
enum class EFlawType : uint8_t
{
	EFlawType__Systemic                                                              = 0,
	EFlawType__Specific                                                              = 1
};

/// Enum /Script/Indiana.ETalkNodeVOAttenuationType
/// Size: 0x01 (1 bytes)
enum class ETalkNodeVOAttenuationType : uint8_t
{
	ETalkNodeVOAttenuationType__Default                                              = 0,
	ETalkNodeVOAttenuationType__None                                                 = 1,
	ETalkNodeVOAttenuationType__SmallDistance                                        = 2,
	ETalkNodeVOAttenuationType__MediumDistance                                       = 3,
	ETalkNodeVOAttenuationType__LargeDistance                                        = 4,
	ETalkNodeVOAttenuationType__Custom01                                             = 5,
	ETalkNodeVOAttenuationType__Custom02                                             = 6,
	ETalkNodeVOAttenuationType__Custom03                                             = 7,
	ETalkNodeVOAttenuationType__Custom04                                             = 8,
	ETalkNodeVOAttenuationType__Custom05                                             = 9,
	ETalkNodeVOAttenuationType__Custom06                                             = 10,
	ETalkNodeVOAttenuationType__Custom07                                             = 11,
	ETalkNodeVOAttenuationType__Custom08                                             = 12,
	ETalkNodeVOAttenuationType__Custom09                                             = 13,
	ETalkNodeVOAttenuationType__Custom10                                             = 14
};

/// Enum /Script/Indiana.EQuestDifficulty
/// Size: 0x01 (1 bytes)
enum class EQuestDifficulty : uint8_t
{
	EQuestDifficulty__Easy                                                           = 0,
	EQuestDifficulty__Normal                                                         = 1,
	EQuestDifficulty__Hard                                                           = 2,
	EQuestDifficulty__Deadly                                                         = 3,
	EQuestDifficulty__Count                                                          = 4
};

/// Enum /Script/Indiana.EQuestLocation
/// Size: 0x01 (1 bytes)
enum class EQuestLocation : uint8_t
{
	EQuestLocation__EmeraldVale                                                      = 0,
	EQuestLocation__Groundbreaker                                                    = 1,
	EQuestLocation__Terra2                                                           = 2,
	EQuestLocation__Monarch                                                          = 3,
	EQuestLocation__Tartarus                                                         = 4,
	EQuestLocation__Roseway                                                          = 5,
	EQuestLocation__Scylla                                                           = 6,
	EQuestLocation__Hephaestus                                                       = 7,
	EQuestLocation__Space                                                            = 8,
	EQuestLocation__Hope                                                             = 9,
	EQuestLocation__Gorgon                                                           = 10,
	EQuestLocation__Eridanos                                                         = 11,
	EQuestLocation__PhaethonPilothouse                                               = 12,
	EQuestLocation__RizzosDistillationStation                                        = 13,
	EQuestLocation__EridanosSpaceport                                                = 14,
	EQuestLocation__TheGrandColonialHotel                                            = 15,
	EQuestLocation__WildernessExploitationReserve                                    = 16,
	EQuestLocation__RizzosPurpleberryOrchards                                        = 17,
	EQuestLocation__RizzosResearchDevelopmentDistrictLabs                            = 18,
	EQuestLocation__HappyDaleFarms                                                   = 19,
	EQuestLocation__StormtailShelter                                                 = 20,
	EQuestLocation__None                                                             = 21,
	EQuestLocation__Count                                                            = 22
};

/// Enum /Script/Indiana.EResponseType
/// Size: 0x01 (1 bytes)
enum class EResponseType : uint8_t
{
	EResponseType__None                                                              = 0,
	EResponseType__Lie                                                               = 1,
	EResponseType__Intimidate                                                        = 2,
	EResponseType__Persuade                                                          = 3,
	EResponseType__Dumb                                                              = 4,
	EResponseType__Science                                                           = 5
};

/// Enum /Script/Indiana.EOEIQuestType
/// Size: 0x01 (1 bytes)
enum class EOEIQuestType : uint8_t
{
	EOEIQuestType__MajorStoryQuest                                                   = 0,
	EOEIQuestType__MajorSideQuest                                                    = 1,
	EOEIQuestType__Task                                                              = 2,
	EOEIQuestType__MinorStoryQuest                                                   = 3,
	EOEIQuestType__MinorSideQuest                                                    = 4,
	EOEIQuestType__MajorFaction                                                      = 5,
	EOEIQuestType__MinorFaction                                                      = 6,
	EOEIQuestType__Companion                                                         = 7,
	EOEIQuestType__INX1MajorStoryQuest                                               = 8,
	EOEIQuestType__INX1MajorSideQuest                                                = 9,
	EOEIQuestType__INX1Task                                                          = 10,
	EOEIQuestType__INX1MinorStoryQuest                                               = 11,
	EOEIQuestType__INX1MinorSideQuest                                                = 12,
	EOEIQuestType__INX1MajorFaction                                                  = 13,
	EOEIQuestType__INX1MinorFaction                                                  = 14,
	EOEIQuestType__INX1Companion                                                     = 15,
	EOEIQuestType__INX2MajorStoryQuest                                               = 16,
	EOEIQuestType__INX2MajorSideQuest                                                = 17,
	EOEIQuestType__INX2Task                                                          = 18,
	EOEIQuestType__INX2MinorStoryQuest                                               = 19,
	EOEIQuestType__INX2MinorSideQuest                                                = 20,
	EOEIQuestType__INX2MajorFaction                                                  = 21,
	EOEIQuestType__INX2MinorFaction                                                  = 22,
	EOEIQuestType__INX2Companion                                                     = 23
};

/// Enum /Script/Indiana.EQuestType
/// Size: 0x01 (1 bytes)
enum class EQuestType : uint8_t
{
	EQuestType__MajorStoryQuest                                                      = 0,
	EQuestType__MinorStoryQuest                                                      = 1,
	EQuestType__INX1MajorStoryQuest                                                  = 2,
	EQuestType__INX1MinorStoryQuest                                                  = 3,
	EQuestType__INX2MajorStoryQuest                                                  = 4,
	EQuestType__INX2MinorStoryQuest                                                  = 5,
	EQuestType__MajorSideQuest                                                       = 6,
	EQuestType__MinorSideQuest                                                       = 7,
	EQuestType__INX1MajorSideQuest                                                   = 8,
	EQuestType__INX1MinorSideQuest                                                   = 9,
	EQuestType__INX2MajorSideQuest                                                   = 10,
	EQuestType__INX2MinorSideQuest                                                   = 11,
	EQuestType__MajorFaction                                                         = 12,
	EQuestType__MinorFaction                                                         = 13,
	EQuestType__INX1MajorFaction                                                     = 14,
	EQuestType__INX1MinorFaction                                                     = 15,
	EQuestType__INX2MajorFaction                                                     = 16,
	EQuestType__INX2MinorFaction                                                     = 17,
	EQuestType__Companion                                                            = 18,
	EQuestType__INX1Companion                                                        = 19,
	EQuestType__INX2Companion                                                        = 20,
	EQuestType__Task                                                                 = 21,
	EQuestType__INX1Task                                                             = 22,
	EQuestType__INX2Task                                                             = 23,
	EQuestType__Count                                                                = 24
};

/// Enum /Script/Indiana.QuestionNodeDisplayType
/// Size: 0x01 (1 bytes)
enum class QuestionNodeDisplayType : uint8_t
{
	QuestionNodeDisplayType__ShowOnce                                                = 0,
	QuestionNodeDisplayType__ShowAlways                                              = 1,
	QuestionNodeDisplayType__ShowNever                                               = 2
};

/// Enum /Script/Indiana.FlowChartNodeType
/// Size: 0x01 (1 bytes)
enum class FlowChartNodeType : uint8_t
{
	FlowChartNodeType__Talk                                                          = 0,
	FlowChartNodeType__PlayerResponse                                                = 1,
	FlowChartNodeType__Script                                                        = 2,
	FlowChartNodeType__TriggerConversation                                           = 3,
	FlowChartNodeType__Chatter                                                       = 4,
	FlowChartNodeType__Bank                                                          = 5,
	FlowChartNodeType__Quest                                                         = 6,
	FlowChartNodeType__Objective                                                     = 7,
	FlowChartNodeType__EndState                                                      = 8,
	FlowChartNodeType__GlobalQuest                                                   = 9,
	FlowChartNodeType__BranchComplete                                                = 10,
	FlowChartNodeType__ChatterEvent                                                  = 11,
	FlowChartNodeType__ChatterBranch                                                 = 12,
	FlowChartNodeType__SoundEffect                                                   = 13
};

/// Enum /Script/Indiana.NodeDisplayType
/// Size: 0x01 (1 bytes)
enum class NodeDisplayType : uint8_t
{
	NodeDisplayType__Hidden                                                          = 0,
	NodeDisplayType__Conversation                                                    = 1,
	NodeDisplayType__Bark                                                            = 2,
	NodeDisplayType__Overlay                                                         = 3
};

/// Enum /Script/Indiana.NodePlayType
/// Size: 0x01 (1 bytes)
enum class NodePlayType : uint8_t
{
	NodePlayType__Normal                                                             = 0,
	NodePlayType__Random                                                             = 1,
	NodePlayType__CycleLoop                                                          = 2,
	NodePlayType__CycleStop                                                          = 3,
	NodePlayType__CycleRandom                                                        = 4
};

/// Enum /Script/Indiana.ConversationType
/// Size: 0x01 (1 bytes)
enum class ConversationType : uint8_t
{
	ConversationType__Conversation                                                   = 0,
	ConversationType__Chatter                                                        = 1,
	ConversationType__Count                                                          = 2,
	ConversationType__Invalid                                                        = 3
};

/// Enum /Script/Indiana.PersistenceType
/// Size: 0x01 (1 bytes)
enum class PersistenceType : uint8_t
{
	PersistenceType__None                                                            = 0,
	PersistenceType__OnceEver                                                        = 1,
	PersistenceType__OncePerConversation                                             = 2,
	PersistenceType__MarkAsRead                                                      = 3
};

/// Enum /Script/Indiana.EParticleSpawnType
/// Size: 0x01 (1 bytes)
enum class EParticleSpawnType : uint8_t
{
	EParticleSpawnType__AtStepLocation                                               = 0,
	EParticleSpawnType__AtSocketLocation                                             = 1,
	EParticleSpawnType__AttachedToSocket                                             = 2
};

/// Enum /Script/Indiana.EClimbValidityStatus
/// Size: 0x01 (1 bytes)
enum class EClimbValidityStatus : uint8_t
{
	EClimbValidityStatus__Valid                                                      = 0,
	EClimbValidityStatus__InvalidStart                                               = 1,
	EClimbValidityStatus__InvalidExit                                                = 2,
	EClimbValidityStatus__InvalidStartExit                                           = 3
};

/// Enum /Script/Indiana.EFurniturePreviewType
/// Size: 0x01 (1 bytes)
enum class EFurniturePreviewType : uint8_t
{
	EFurniturePreviewType__Start                                                     = 0,
	EFurniturePreviewType__Loop                                                      = 1,
	EFurniturePreviewType__Exit                                                      = 2
};

/// Enum /Script/Indiana.EEntryLocationStatus
/// Size: 0x04 (4 bytes)
enum class EEntryLocationStatus : uint32_t
{
	EEntryLocationStatus__Clear                                                      = 0,
	EEntryLocationStatus__InvalidLocation                                            = 1,
	EEntryLocationStatus__Ignored                                                    = 2,
	EEntryLocationStatus__InvalidNav                                                 = 3,
	EEntryLocationStatus__InvalidExitLocation                                        = 4,
	EEntryLocationStatus__SpaceBlocked                                               = 5,
	EEntryLocationStatus__MissingFloor                                               = 6
};

/// Enum /Script/Indiana.EGender
/// Size: 0x01 (1 bytes)
enum class EGender : uint8_t
{
	EGender__Male                                                                    = 0,
	EGender__Female                                                                  = 1,
	EGender__Neuter                                                                  = 2,
	EGender__Count                                                                   = 3
};

/// Enum /Script/Indiana.ENotificationState
/// Size: 0x01 (1 bytes)
enum class ENotificationState : uint8_t
{
	ENotificationState__NotificationHidden                                           = 0,
	ENotificationState__NotificationFadingIn                                         = 1,
	ENotificationState__NotificationFadingInComplete                                 = 2,
	ENotificationState__NotificationSetText                                          = 3,
	ENotificationState__NotificationAnimateIn                                        = 4,
	ENotificationState__NotificationAnimateInComplete                                = 5,
	ENotificationState__NotificationVisible                                          = 6,
	ENotificationState__NotificationShowText                                         = 7,
	ENotificationState__NotificationAnimateOut                                       = 8,
	ENotificationState__NotificationAnimateOutComplete                               = 9,
	ENotificationState__NotificationFadingOut                                        = 10,
	ENotificationState__NotificationFadingOutComplete                                = 11
};

/// Enum /Script/Indiana.EInputBindingType
/// Size: 0x01 (1 bytes)
enum class EInputBindingType : uint8_t
{
	EInputBindingType__Press                                                         = 0,
	EInputBindingType__PressAndRelease                                               = 1,
	EInputBindingType__ReleaseNotHeld                                                = 2,
	EInputBindingType__ReleaseNoConsume                                              = 3,
	EInputBindingType__Release                                                       = 4,
	EInputBindingType__HoldPoint25                                                   = 5,
	EInputBindingType__HoldPoint35                                                   = 6,
	EInputBindingType__HoldPoint5                                                    = 7,
	EInputBindingType__Hold1                                                         = 8,
	EInputBindingType__Hold1Point5                                                   = 9,
	EInputBindingType__Axis                                                          = 10,
	EInputBindingType__Linked                                                        = 11,
	EInputBindingType__ReleaseOnHeldPoint25                                          = 12,
	EInputBindingType__ReleaseOnHeldPoint35                                          = 13,
	EInputBindingType__ReleaseOnHeldPoint5                                           = 14,
	EInputBindingType__ReleaseOnHeld1                                                = 15,
	EInputBindingType__ReleaseOnHeld1Point5                                          = 16,
	EInputBindingType__Invalid                                                       = 17
};

/// Enum /Script/Indiana.EStickLayoutType
/// Size: 0x01 (1 bytes)
enum class EStickLayoutType : uint8_t
{
	EStickLayoutType__Righty                                                         = 0,
	EStickLayoutType__Lefty                                                          = 1
};

/// Enum /Script/Indiana.EGamepadLayoutType
/// Size: 0x01 (1 bytes)
enum class EGamepadLayoutType : uint8_t
{
	EGamepadLayoutType__Standard                                                     = 0,
	EGamepadLayoutType__Modern                                                       = 1,
	EGamepadLayoutType__Legacy                                                       = 2,
	EGamepadLayoutType__Flipped                                                      = 3
};

/// Enum /Script/Indiana.EButtonPress
/// Size: 0x01 (1 bytes)
enum class EButtonPress : uint8_t
{
	EButtonPress__Invalid                                                            = 0,
	EButtonPress__OnPress                                                            = 1,
	EButtonPress__OnTap                                                              = 2,
	EButtonPress__OnHold                                                             = 3,
	EButtonPress__OnRelease                                                          = 4
};

/// Enum /Script/Indiana.EMeleeAction
/// Size: 0x01 (1 bytes)
enum class EMeleeAction : uint8_t
{
	EMeleeAction__Invalid                                                            = 0,
	EMeleeAction__Idle                                                               = 1,
	EMeleeAction__WindUpRight                                                        = 2,
	EMeleeAction__WindUpLeft                                                         = 3,
	EMeleeAction__AttackRightToLeft                                                  = 4,
	EMeleeAction__AttackLeftToRight                                                  = 5,
	EMeleeAction__WindUpPower                                                        = 6,
	EMeleeAction__PowerAttack                                                        = 7,
	EMeleeAction__WindUpSweep                                                        = 8,
	EMeleeAction__SweepAttack                                                        = 9,
	EMeleeAction__CounterAttack                                                      = 10,
	EMeleeAction__Recoil                                                             = 11,
	EMeleeAction__WindUpNoStamina                                                    = 12,
	EMeleeAction__NoStaminaAttack                                                    = 13,
	EMeleeAction__CalledShotAttack                                                   = 14,
	EMeleeAction__SpecialAttack1                                                     = 15,
	EMeleeAction__SpecialAttack2                                                     = 16,
	EMeleeAction__SpecialAttack3                                                     = 17,
	EMeleeAction__SpecialAttack4                                                     = 18,
	EMeleeAction__CalledShot                                                         = 19
};

/// Enum /Script/Indiana.EHazardEventType
/// Size: 0x01 (1 bytes)
enum class EHazardEventType : uint8_t
{
	EHazardEventType__Enabling                                                       = 0,
	EHazardEventType__Enabled                                                        = 1,
	EHazardEventType__Disabling                                                      = 2,
	EHazardEventType__Disabled                                                       = 3
};

/// Enum /Script/Indiana.EHealValueType
/// Size: 0x01 (1 bytes)
enum class EHealValueType : uint8_t
{
	EHealValueType__Value                                                            = 0,
	EHealValueType__Percent                                                          = 1
};

/// Enum /Script/Indiana.EHighlightMode
/// Size: 0x01 (1 bytes)
enum class EHighlightMode : uint8_t
{
	EHighlightMode__InteractableItems                                                = 0
};

/// Enum /Script/Indiana.EIdleCamFailReason
/// Size: 0x01 (1 bytes)
enum class EIdleCamFailReason : uint8_t
{
	EIdleCamFailReason__Invalid                                                      = 0,
	EIdleCamFailReason__PlayerInputDetected                                          = 1,
	EIdleCamFailReason__PlayerInCombat                                               = 2,
	EIdleCamFailReason__PlayerInConversation                                         = 3,
	EIdleCamFailReason__PlayerIsReloading                                            = 4,
	EIdleCamFailReason__PlayerIsAiming                                               = 5,
	EIdleCamFailReason__PlayerIsMoving                                               = 6,
	EIdleCamFailReason__PlayerIsCrouching                                            = 7,
	EIdleCamFailReason__PlayerIsTakingSurvivalDamage                                 = 8,
	EIdleCamFailReason__PlayerHasHostileStatusEffects                                = 9,
	EIdleCamFailReason__PlayerIsNotHealthy                                           = 10,
	EIdleCamFailReason__Success                                                      = 11
};

/// Enum /Script/Indiana.EAnimationAudioLoopType
/// Size: 0x01 (1 bytes)
enum class EAnimationAudioLoopType : uint8_t
{
	EAnimationAudioLoopType__None                                                    = 0,
	EAnimationAudioLoopType__Furniture                                               = 1,
	EAnimationAudioLoopType__Jump                                                    = 2,
	EAnimationAudioLoopType__AnimNotifyState                                         = 3,
	EAnimationAudioLoopType__Count                                                   = 4
};

/// Enum /Script/Indiana.EAudioMovementState
/// Size: 0x01 (1 bytes)
enum class EAudioMovementState : uint8_t
{
	EAudioMovementState__Idle                                                        = 0,
	EAudioMovementState__Walking                                                     = 1,
	EAudioMovementState__Sprinting                                                   = 2,
	EAudioMovementState__Count                                                       = 3
};

/// Enum /Script/Indiana.ECharacterMovementAudioEvents
/// Size: 0x01 (1 bytes)
enum class ECharacterMovementAudioEvents : uint8_t
{
	ECharacterMovementAudioEvents__None                                              = 0,
	ECharacterMovementAudioEvents__Crouch                                            = 1,
	ECharacterMovementAudioEvents__CrouchStanding                                    = 2,
	ECharacterMovementAudioEvents__Uncrouch                                          = 3,
	ECharacterMovementAudioEvents__UncrouchStanding                                  = 4,
	ECharacterMovementAudioEvents__Jump                                              = 5,
	ECharacterMovementAudioEvents__DodgeLeft                                         = 6,
	ECharacterMovementAudioEvents__DodgeBack                                         = 7,
	ECharacterMovementAudioEvents__DodgeRight                                        = 8,
	ECharacterMovementAudioEvents__DodgeForward                                      = 9,
	ECharacterMovementAudioEvents__Land                                              = 10,
	ECharacterMovementAudioEvents__StartClimbing                                     = 11,
	ECharacterMovementAudioEvents__StopClimbing                                      = 12,
	ECharacterMovementAudioEvents__Count                                             = 13
};

/// Enum /Script/Indiana.ECharacterAudioEvent
/// Size: 0x01 (1 bytes)
enum class ECharacterAudioEvent : uint8_t
{
	ECharacterAudioEvent__None                                                       = 0,
	ECharacterAudioEvent__Passive                                                    = 1
};

/// Enum /Script/Indiana.ECrouchState
/// Size: 0x01 (1 bytes)
enum class ECrouchState : uint8_t
{
	ECrouchState__Current                                                            = 0,
	ECrouchState__Crouched                                                           = 1,
	ECrouchState__UnCrouched                                                         = 2
};

/// Enum /Script/Indiana.EUISelectionState
/// Size: 0x01 (1 bytes)
enum class EUISelectionState : uint8_t
{
	EUISelectionState__None                                                          = 0,
	EUISelectionState__Select                                                        = 1,
	EUISelectionState__SelectLoop                                                    = 2,
	EUISelectionState__Deselect                                                      = 3
};

/// Enum /Script/Indiana.EPhaseMode
/// Size: 0x01 (1 bytes)
enum class EPhaseMode : uint8_t
{
	EPhaseMode__None                                                                 = 0,
	EPhaseMode__Partial                                                              = 1,
	EPhaseMode__Full                                                                 = 2
};

/// Enum /Script/Indiana.EIndianaCustomMovementType
/// Size: 0x01 (1 bytes)
enum class EIndianaCustomMovementType : uint8_t
{
	EIndianaCustomMovementType__Climbing                                             = 0
};

/// Enum /Script/Indiana.EIndianaDamageType
/// Size: 0x01 (1 bytes)
enum class EIndianaDamageType : uint8_t
{
	EIndianaDamageType__Physical                                                     = 0,
	EIndianaDamageType__Thermal                                                      = 1,
	EIndianaDamageType__Energy                                                       = 2,
	EIndianaDamageType__Shock                                                        = 3,
	EIndianaDamageType__Corrosion                                                    = 4,
	EIndianaDamageType__NRay                                                         = 5,
	EIndianaDamageType__Swarm                                                        = 6,
	EIndianaDamageType__Cold                                                         = 7,
	EIndianaDamageType__Count                                                        = 8
};

/// Enum /Script/Indiana.EDLCType
/// Size: 0x01 (1 bytes)
enum class EDLCType : uint8_t
{
	EDLCType__INX1                                                                   = 0,
	EDLCType__INX2                                                                   = 1
};

/// Enum /Script/Indiana.EDLCFlags
/// Size: 0x01 (1 bytes)
enum class EDLCFlags : uint8_t
{
	EDLCFlags__None                                                                  = 0,
	EDLCFlags__INX1                                                                  = 1,
	EDLCFlags__INX2                                                                  = 2
};

/// Enum /Script/Indiana.EBoolResult
/// Size: 0x01 (1 bytes)
enum class EBoolResult : uint8_t
{
	EBoolResult__OnTrue                                                              = 0,
	EBoolResult__OnFalse                                                             = 1
};

/// Enum /Script/Indiana.EDownLoadableContent
/// Size: 0x01 (1 bytes)
enum class EDownLoadableContent : uint8_t
{
	EDownLoadableContent__INX1                                                       = 0,
	EDownLoadableContent__INX2                                                       = 1
};

/// Enum /Script/Indiana.ETogglableAction
/// Size: 0x01 (1 bytes)
enum class ETogglableAction : uint8_t
{
	ETogglableAction__Dodge                                                          = 0,
	ETogglableAction__Lunge                                                          = 1,
	ETogglableAction__Disarmed                                                       = 2,
	ETogglableAction__CanFlinch                                                      = 3,
	ETogglableAction__MindControlled                                                 = 4,
	ETogglableAction__IgnoreMeleeDamage                                              = 5,
	ETogglableAction__IgnorePawnCollision                                            = 6,
	ETogglableAction__Untargetable                                                   = 7,
	ETogglableAction__Undamageable                                                   = 8,
	ETogglableAction__Blind                                                          = 9,
	ETogglableAction__Sprint                                                         = 10,
	ETogglableAction__StatusEffectImmune                                             = 11,
	ETogglableAction__WeaponCrit                                                     = 12
};

/// Enum /Script/Indiana.EMeshTarget
/// Size: 0x01 (1 bytes)
enum class EMeshTarget : uint8_t
{
	EMeshTarget__FirstMesh                                                           = 0,
	EMeshTarget__CurrentCharacterMesh                                                = 1,
	EMeshTarget__WeaponMesh                                                          = 2
};

/// Enum /Script/Indiana.ESimplifiedLockpickHackingMode
/// Size: 0x01 (1 bytes)
enum class ESimplifiedLockpickHackingMode : uint8_t
{
	ESimplifiedLockpickHackingMode__Normal                                           = 0,
	ESimplifiedLockpickHackingMode__Simplified                                       = 1
};

/// Enum /Script/Indiana.EWeaponSelectAxisMode
/// Size: 0x01 (1 bytes)
enum class EWeaponSelectAxisMode : uint8_t
{
	EWeaponSelectAxisMode__Vertical                                                  = 0,
	EWeaponSelectAxisMode__Horizontal                                                = 1
};

/// Enum /Script/Indiana.EWeaponSelectMode
/// Size: 0x01 (1 bytes)
enum class EWeaponSelectMode : uint8_t
{
	EWeaponSelectMode__Off                                                           = 0,
	EWeaponSelectMode__TimedFade                                                     = 1,
	EWeaponSelectMode__On                                                            = 2
};

/// Enum /Script/Indiana.ETTDReticleMeterMode
/// Size: 0x01 (1 bytes)
enum class ETTDReticleMeterMode : uint8_t
{
	ETTDReticleMeterMode__Off                                                        = 0,
	ETTDReticleMeterMode__CombatOnly                                                 = 1,
	ETTDReticleMeterMode__On                                                         = 2
};

/// Enum /Script/Indiana.ECompanionAbilityPassiveNotificationMode
/// Size: 0x01 (1 bytes)
enum class ECompanionAbilityPassiveNotificationMode : uint8_t
{
	ECompanionAbilityPassiveNotificationMode__Off                                    = 0,
	ECompanionAbilityPassiveNotificationMode__CombatOnly                             = 1,
	ECompanionAbilityPassiveNotificationMode__TimedFade                              = 2,
	ECompanionAbilityPassiveNotificationMode__On                                     = 3
};

/// Enum /Script/Indiana.ECompanionAbilityPassiveCDMode
/// Size: 0x01 (1 bytes)
enum class ECompanionAbilityPassiveCDMode : uint8_t
{
	ECompanionAbilityPassiveCDMode__Off                                              = 0,
	ECompanionAbilityPassiveCDMode__CombatOnly                                       = 1,
	ECompanionAbilityPassiveCDMode__TimedFade                                        = 2,
	ECompanionAbilityPassiveCDMode__On                                               = 3
};

/// Enum /Script/Indiana.ECompanionStatusMode
/// Size: 0x01 (1 bytes)
enum class ECompanionStatusMode : uint8_t
{
	ECompanionStatusMode__Off                                                        = 0,
	ECompanionStatusMode__CombatOnly                                                 = 1,
	ECompanionStatusMode__TimedFade                                                  = 2,
	ECompanionStatusMode__On                                                         = 3
};

/// Enum /Script/Indiana.EDodgeDisplayMode
/// Size: 0x01 (1 bytes)
enum class EDodgeDisplayMode : uint8_t
{
	EDodgeDisplayMode__Off                                                           = 0,
	EDodgeDisplayMode__CombatOnly                                                    = 1,
	EDodgeDisplayMode__On                                                            = 2
};

/// Enum /Script/Indiana.ETTDDisplayMode
/// Size: 0x01 (1 bytes)
enum class ETTDDisplayMode : uint8_t
{
	ETTDDisplayMode__Off                                                             = 0,
	ETTDDisplayMode__CombatOnly                                                      = 1,
	ETTDDisplayMode__On                                                              = 2
};

/// Enum /Script/Indiana.EAbilityControlMode
/// Size: 0x01 (1 bytes)
enum class EAbilityControlMode : uint8_t
{
	EAbilityControlMode__Off                                                         = 0,
	EAbilityControlMode__CombatOnly                                                  = 1,
	EAbilityControlMode__TimedFade                                                   = 2,
	EAbilityControlMode__On                                                          = 3
};

/// Enum /Script/Indiana.EMedicalInhalerMode
/// Size: 0x01 (1 bytes)
enum class EMedicalInhalerMode : uint8_t
{
	EMedicalInhalerMode__Off                                                         = 0,
	EMedicalInhalerMode__CombatOnly                                                  = 1,
	EMedicalInhalerMode__On                                                          = 2
};

/// Enum /Script/Indiana.ESurvivalMode
/// Size: 0x01 (1 bytes)
enum class ESurvivalMode : uint8_t
{
	ESurvivalMode__Off                                                               = 0,
	ESurvivalMode__TimedFade                                                         = 1,
	ESurvivalMode__On                                                                = 2
};

/// Enum /Script/Indiana.EFPSIndicatorMode
/// Size: 0x01 (1 bytes)
enum class EFPSIndicatorMode : uint8_t
{
	EFPSIndicatorMode__Off                                                           = 0,
	EFPSIndicatorMode__TopLeft                                                       = 1,
	EFPSIndicatorMode__TopRight                                                      = 2,
	EFPSIndicatorMode__BottomRight                                                   = 3,
	EFPSIndicatorMode__BottomLeft                                                    = 4
};

/// Enum /Script/Indiana.EDirectionalDamageIndicatorMode
/// Size: 0x01 (1 bytes)
enum class EDirectionalDamageIndicatorMode : uint8_t
{
	EDirectionalDamageIndicatorMode__Off                                             = 0,
	EDirectionalDamageIndicatorMode__CombatOnly                                      = 1,
	EDirectionalDamageIndicatorMode__On                                              = 2
};

/// Enum /Script/Indiana.EEnemyAwarenessMeterMode
/// Size: 0x01 (1 bytes)
enum class EEnemyAwarenessMeterMode : uint8_t
{
	EEnemyAwarenessMeterMode__Off                                                    = 0,
	EEnemyAwarenessMeterMode__CombatOnly                                             = 1,
	EEnemyAwarenessMeterMode__On                                                     = 2
};

/// Enum /Script/Indiana.EEnemyHealthBarMode
/// Size: 0x01 (1 bytes)
enum class EEnemyHealthBarMode : uint8_t
{
	EEnemyHealthBarMode__Off                                                         = 0,
	EEnemyHealthBarMode__CombatOnly                                                  = 1,
	EEnemyHealthBarMode__On                                                          = 2
};

/// Enum /Script/Indiana.ECompassVisibilityMode
/// Size: 0x01 (1 bytes)
enum class ECompassVisibilityMode : uint8_t
{
	ECompassVisibilityMode__Off                                                      = 0,
	ECompassVisibilityMode__CombatOnly                                               = 1,
	ECompassVisibilityMode__On                                                       = 2
};

/// Enum /Script/Indiana.EHUDMode
/// Size: 0x01 (1 bytes)
enum class EHUDMode : uint8_t
{
	EHUDMode__Minimal                                                                = 0,
	EHUDMode__Default                                                                = 1,
	EHUDMode__Maximum                                                                = 2,
	EHUDMode__Custom                                                                 = 3
};

/// Enum /Script/Indiana.EAreaNameMode
/// Size: 0x01 (1 bytes)
enum class EAreaNameMode : uint8_t
{
	EAreaNameMode__Off                                                               = 0,
	EAreaNameMode__TimedFade                                                         = 1,
	EAreaNameMode__On                                                                = 2
};

/// Enum /Script/Indiana.EHeldWeaponDisplayText
/// Size: 0x01 (1 bytes)
enum class EHeldWeaponDisplayText : uint8_t
{
	EHeldWeaponDisplayText__Off                                                      = 0,
	EHeldWeaponDisplayText__CombatOnly                                               = 1,
	EHeldWeaponDisplayText__TimedFade                                                = 2,
	EHeldWeaponDisplayText__On                                                       = 3
};

/// Enum /Script/Indiana.EHeldWeaponDisplayMode
/// Size: 0x01 (1 bytes)
enum class EHeldWeaponDisplayMode : uint8_t
{
	EHeldWeaponDisplayMode__Off                                                      = 0,
	EHeldWeaponDisplayMode__CombatOnly                                               = 1,
	EHeldWeaponDisplayMode__TimedFade                                                = 2,
	EHeldWeaponDisplayMode__On                                                       = 3
};

/// Enum /Script/Indiana.ECompanionAbilityBindingMode
/// Size: 0x01 (1 bytes)
enum class ECompanionAbilityBindingMode : uint8_t
{
	ECompanionAbilityBindingMode__Off                                                = 0,
	ECompanionAbilityBindingMode__CombatOnly                                         = 1,
	ECompanionAbilityBindingMode__TimedFade                                          = 2,
	ECompanionAbilityBindingMode__On                                                 = 3
};

/// Enum /Script/Indiana.ECompanionAbilityUIMode
/// Size: 0x01 (1 bytes)
enum class ECompanionAbilityUIMode : uint8_t
{
	ECompanionAbilityUIMode__Off                                                     = 0,
	ECompanionAbilityUIMode__CombatOnly                                              = 1,
	ECompanionAbilityUIMode__TimedFade                                               = 2,
	ECompanionAbilityUIMode__On                                                      = 3
};

/// Enum /Script/Indiana.EPlayerStatusEffectTextMode
/// Size: 0x01 (1 bytes)
enum class EPlayerStatusEffectTextMode : uint8_t
{
	EPlayerStatusEffectTextMode__Off                                                 = 0,
	EPlayerStatusEffectTextMode__TimedFade                                           = 1,
	EPlayerStatusEffectTextMode__AlwaysOn                                            = 2
};

/// Enum /Script/Indiana.EPlayerStatusBarMode
/// Size: 0x01 (1 bytes)
enum class EPlayerStatusBarMode : uint8_t
{
	EPlayerStatusBarMode__Off                                                        = 0,
	EPlayerStatusBarMode__TimedFade                                                  = 1,
	EPlayerStatusBarMode__On                                                         = 2
};

/// Enum /Script/Indiana.EQuestUpdateMode
/// Size: 0x01 (1 bytes)
enum class EQuestUpdateMode : uint8_t
{
	EQuestUpdateMode__Off                                                            = 0,
	EQuestUpdateMode__TimedFade                                                      = 1,
	EQuestUpdateMode__On                                                             = 2
};

/// Enum /Script/Indiana.EReticleMode
/// Size: 0x01 (1 bytes)
enum class EReticleMode : uint8_t
{
	EReticleMode__Off                                                                = 0,
	EReticleMode__ADSOnly                                                            = 1,
	EReticleMode__CombatOnly                                                         = 2,
	EReticleMode__On                                                                 = 3
};

/// Enum /Script/Indiana.EAimingReticleMode
/// Size: 0x01 (1 bytes)
enum class EAimingReticleMode : uint8_t
{
	EAimingReticleMode__Off                                                          = 0,
	EAimingReticleMode__CombatOnly                                                   = 1,
	EAimingReticleMode__On                                                           = 2
};

/// Enum /Script/Indiana.EDialogSkillMode
/// Size: 0x01 (1 bytes)
enum class EDialogSkillMode : uint8_t
{
	EDialogSkillMode__Never                                                          = 0,
	EDialogSkillMode__OnlyWhenClose                                                  = 1,
	EDialogSkillMode__Always                                                         = 2
};

/// Enum /Script/Indiana.ESSGIMode
/// Size: 0x01 (1 bytes)
enum class ESSGIMode : uint8_t
{
	ESSGIMode__Halfres                                                               = 1,
	ESSGIMode__Fullres                                                               = 2
};

/// Enum /Script/Indiana.EFSR2Mode
/// Size: 0x01 (1 bytes)
enum class EFSR2Mode : uint8_t
{
	EFSR2Mode__Quality                                                               = 1,
	EFSR2Mode__Balanced                                                              = 2,
	EFSR2Mode__Performance                                                           = 3,
	EFSR2Mode__UltraPerf                                                             = 4
};

/// Enum /Script/Indiana.EPerformanceMode
/// Size: 0x01 (1 bytes)
enum class EPerformanceMode : uint8_t
{
	EPerformanceMode__Performance                                                    = 0,
	EPerformanceMode__Cinematic                                                      = 1
};

/// Enum /Script/Indiana.ELanguageMode
/// Size: 0x01 (1 bytes)
enum class ELanguageMode : uint8_t
{
	ELanguageMode__English                                                           = 0,
	ELanguageMode__French                                                            = 1,
	ELanguageMode__Italian                                                           = 2,
	ELanguageMode__German                                                            = 3,
	ELanguageMode__SpanishCastilian                                                  = 4,
	ELanguageMode__PortugueseBrazilian                                               = 5,
	ELanguageMode__Russian                                                           = 6,
	ELanguageMode__Korean                                                            = 7,
	ELanguageMode__Japanese                                                          = 8,
	ELanguageMode__ChineseSimplified                                                 = 9,
	ELanguageMode__Polish                                                            = 10,
	ELanguageMode__Count                                                             = 11,
	ELanguageMode__Invalid                                                           = 12
};

/// Enum /Script/Indiana.EWeaponTooltipStatMode
/// Size: 0x01 (1 bytes)
enum class EWeaponTooltipStatMode : uint8_t
{
	EWeaponTooltipStatMode__DPS                                                      = 0,
	EWeaponTooltipStatMode__Damage                                                   = 1
};

/// Enum /Script/Indiana.ECompanionOutlineMode
/// Size: 0x01 (1 bytes)
enum class ECompanionOutlineMode : uint8_t
{
	ECompanionOutlineMode__On                                                        = 0,
	ECompanionOutlineMode__CombatOnly                                                = 1,
	ECompanionOutlineMode__Off                                                       = 2
};

/// Enum /Script/Indiana.EConversationSubtitleMode
/// Size: 0x01 (1 bytes)
enum class EConversationSubtitleMode : uint8_t
{
	EConversationSubtitleMode__On                                                    = 0,
	EConversationSubtitleMode__Delayed                                               = 1,
	EConversationSubtitleMode__Off                                                   = 2
};

/// Enum /Script/Indiana.EFPSLimit
/// Size: 0x01 (1 bytes)
enum class EFPSLimit : uint8_t
{
	EFPSLimit__Thirty                                                                = 0,
	EFPSLimit__Sixty                                                                 = 1,
	EFPSLimit__HundredTwenty                                                         = 2,
	EFPSLimit__HundredFourtyFour                                                     = 3,
	EFPSLimit__HundredSixty                                                          = 4,
	EFPSLimit__HundredSixtyFive                                                      = 5,
	EFPSLimit__HundredEighty                                                         = 6,
	EFPSLimit__TwoHundred                                                            = 7,
	EFPSLimit__TwoHundredFourty                                                      = 8,
	EFPSLimit__Unlimited                                                             = 9
};

/// Enum /Script/Indiana.EItemInteraction
/// Size: 0x01 (1 bytes)
enum class EItemInteraction : uint8_t
{
	EItemInteraction__EDragDropStart                                                 = 0,
	EItemInteraction__EDragDropEnd                                                   = 1,
	EItemInteraction__EItemPickup                                                    = 2,
	EItemInteraction__EItemConsumed                                                  = 3
};

/// Enum /Script/Indiana.ECheckBranches
/// Size: 0x01 (1 bytes)
enum class ECheckBranches : uint8_t
{
	ECheckBranches__Valid                                                            = 0,
	ECheckBranches__Invalid                                                          = 1
};

/// Enum /Script/Indiana.EOccupationChannel
/// Size: 0x01 (1 bytes)
enum class EOccupationChannel : uint8_t
{
	EOccupationChannel__Firing                                                       = 0,
	EOccupationChannel__CharacterArea                                                = 1,
	EOccupationChannel__Count                                                        = 2
};

/// Enum /Script/Indiana.EPathBlockedType
/// Size: 0x01 (1 bytes)
enum class EPathBlockedType : uint8_t
{
	EPathBlockedType__None                                                           = 0,
	EPathBlockedType__Stuck                                                          = 1,
	EPathBlockedType__Lost                                                           = 2,
	EPathBlockedType__Destination                                                    = 3
};

/// Enum /Script/Indiana.EPlayerAudioEvent
/// Size: 0x01 (1 bytes)
enum class EPlayerAudioEvent : uint8_t
{
	EPlayerAudioEvent__None                                                          = 0,
	EPlayerAudioEvent__TacticalTimeDilation                                          = 1,
	EPlayerAudioEvent__EndTacticalTimeDilation                                       = 2,
	EPlayerAudioEvent__CalledShot                                                    = 3,
	EPlayerAudioEvent__CalledShotImpactClose                                         = 4,
	EPlayerAudioEvent__CalledShotImpactFar                                           = 5,
	EPlayerAudioEvent__CalledShotCameraCutToTarget                                   = 6,
	EPlayerAudioEvent__CalledShotEnd                                                 = 7,
	EPlayerAudioEvent__CalledShotOffCooldown                                         = 8,
	EPlayerAudioEvent__KillCamera                                                    = 9,
	EPlayerAudioEvent__QuestStarted                                                  = 10,
	EPlayerAudioEvent__QuestCompleted                                                = 11,
	EPlayerAudioEvent__QuestFailed                                                   = 12,
	EPlayerAudioEvent__ObjectiveCompleted                                            = 13,
	EPlayerAudioEvent__ObjectiveFailed                                               = 14,
	EPlayerAudioEvent__AddendumAdded                                                 = 15,
	EPlayerAudioEvent__ObjectiveUpdated                                              = 16,
	EPlayerAudioEvent__CombatStart                                                   = 17,
	EPlayerAudioEvent__BlockRangedAttack                                             = 18,
	EPlayerAudioEvent__BlockMeleeAttack                                              = 19,
	EPlayerAudioEvent__Bribe                                                         = 20,
	EPlayerAudioEvent__DisguiseMeter                                                 = 21,
	EPlayerAudioEvent__DisguiseMeterDrain                                            = 22,
	EPlayerAudioEvent__DisguiseMeterDepleted                                         = 23,
	EPlayerAudioEvent__DisguiseMeterRefilled                                         = 24,
	EPlayerAudioEvent__PickPocketStart                                               = 25,
	EPlayerAudioEvent__PickPocketSuccess                                             = 26,
	EPlayerAudioEvent__PickPocketFail                                                = 27,
	EPlayerAudioEvent__PickPocketStop                                                = 28,
	EPlayerAudioEvent__HackStart                                                     = 29,
	EPlayerAudioEvent__HackSuccess                                                   = 30,
	EPlayerAudioEvent__HackFail                                                      = 31,
	EPlayerAudioEvent__WeaponDamaged                                                 = 32,
	EPlayerAudioEvent__WeaponSeverelyDamaged                                         = 33,
	EPlayerAudioEvent__WeaponDestroyed                                               = 34,
	EPlayerAudioEvent__HelmetDamaged                                                 = 35,
	EPlayerAudioEvent__HelmetSeverelyDamaged                                         = 36,
	EPlayerAudioEvent__HelmetDestroyed                                               = 37,
	EPlayerAudioEvent__ArmorDamaged                                                  = 38,
	EPlayerAudioEvent__ArmorSeverelyDamaged                                          = 39,
	EPlayerAudioEvent__ArmorDestroyed                                                = 40,
	EPlayerAudioEvent__StealthEntered                                                = 41,
	EPlayerAudioEvent__StealthExited                                                 = 42,
	EPlayerAudioEvent__ReloadFail                                                    = 43
};

/// Enum /Script/Indiana.EPlayerAudioDetectionState
/// Size: 0x01 (1 bytes)
enum class EPlayerAudioDetectionState : uint8_t
{
	EPlayerAudioDetectionState__Undetected                                           = 0,
	EPlayerAudioDetectionState__Danger                                               = 1,
	EPlayerAudioDetectionState__Combat                                               = 2
};

/// Enum /Script/Indiana.EMapFlags
/// Size: 0x01 (1 bytes)
enum class EMapFlags : uint8_t
{
	EMapFlags__None                                                                  = 0,
	EMapFlags__Known                                                                 = 1,
	EMapFlags__Visited                                                               = 2
};

/// Enum /Script/Indiana.EIndianaTextAnimationType
/// Size: 0x01 (1 bytes)
enum class EIndianaTextAnimationType : uint8_t
{
	EIndianaTextAnimationType__Invalid                                               = 0,
	EIndianaTextAnimationType__DefaultComputerTerminalHeader                         = 1,
	EIndianaTextAnimationType__DefaultComputerTerminalSubheader                      = 2,
	EIndianaTextAnimationType__ComputerTerminalBody                                  = 3,
	EIndianaTextAnimationType__Count                                                 = 4
};

/// Enum /Script/Indiana.EIndianaAudioEvent
/// Size: 0x01 (1 bytes)
enum class EIndianaAudioEvent : uint8_t
{
	EIndianaAudioEvent__Invalid                                                      = 0,
	EIndianaAudioEvent__CCAptitudeSelect                                             = 1,
	EIndianaAudioEvent__CCRandomizeAppearance                                        = 2,
	EIndianaAudioEvent__CCFinalize                                                   = 3,
	EIndianaAudioEvent__CompanionGained                                              = 4,
	EIndianaAudioEvent__CompanionLost                                                = 5,
	EIndianaAudioEvent__ToggleAdvanceStats                                           = 6,
	EIndianaAudioEvent__CollapseExpandList                                           = 7,
	EIndianaAudioEvent__SliderValueChange                                            = 8,
	EIndianaAudioEvent__PageNext                                                     = 9,
	EIndianaAudioEvent__PagePrev                                                     = 10,
	EIndianaAudioEvent__SubPageChange                                                = 11,
	EIndianaAudioEvent__Back                                                         = 12,
	EIndianaAudioEvent__Sort                                                         = 13,
	EIndianaAudioEvent__FlipSort                                                     = 14,
	EIndianaAudioEvent__Hold                                                         = 15,
	EIndianaAudioEvent__HoldCancel                                                   = 16,
	EIndianaAudioEvent__HoldFinished                                                 = 17,
	EIndianaAudioEvent__OpenToMap                                                    = 18,
	EIndianaAudioEvent__OpenToQuests                                                 = 19,
	EIndianaAudioEvent__OpenToInventory                                              = 20,
	EIndianaAudioEvent__TabOpenLedger                                                = 21,
	EIndianaAudioEvent__LootBody                                                     = 22,
	EIndianaAudioEvent__PickpocketAction                                             = 23,
	EIndianaAudioEvent__ItemViewerPageChange                                         = 24,
	EIndianaAudioEvent__InventoryChangeTab                                           = 25,
	EIndianaAudioEvent__CantDo                                                       = 26,
	EIndianaAudioEvent__CharacterCreationRespecConfirm                               = 27,
	EIndianaAudioEvent__ExaminablePopUp                                              = 28,
	EIndianaAudioEvent__GlobalSelect                                                 = 29,
	EIndianaAudioEvent__TutorialAccept                                               = 30,
	EIndianaAudioEvent__ItemAdded                                                    = 31,
	EIndianaAudioEvent__ItemRemoved                                                  = 32,
	EIndianaAudioEvent__ItemRepair                                                   = 33,
	EIndianaAudioEvent__ItemRepairAll                                                = 34,
	EIndianaAudioEvent__ItemBreakdown                                                = 35,
	EIndianaAudioEvent__ItemJunkUnjunk                                               = 36,
	EIndianaAudioEvent__ItemDrop                                                     = 37,
	EIndianaAudioEvent__ItemInspect                                                  = 38,
	EIndianaAudioEvent__ItemCompare                                                  = 39,
	EIndianaAudioEvent__ItemInspectZoom                                              = 40,
	EIndianaAudioEvent__TutorialPopUpFullScreen                                      = 41,
	EIndianaAudioEvent__TutorialPopUpMinor                                           = 42,
	EIndianaAudioEvent__RepIncreased                                                 = 43,
	EIndianaAudioEvent__RepDecreased                                                 = 44,
	EIndianaAudioEvent__SkillCheckPass                                               = 45,
	EIndianaAudioEvent__POIDiscovered                                                = 46,
	EIndianaAudioEvent__XPGained                                                     = 47,
	EIndianaAudioEvent__LevelUpNotificationStart                                     = 48,
	EIndianaAudioEvent__LevelUpNotificationEnd                                       = 49,
	EIndianaAudioEvent__FastTravelImpossible_Encumbered                              = 50,
	EIndianaAudioEvent__FastTravelImpossible_Combat                                  = 51,
	EIndianaAudioEvent__ManualSave                                                   = 52,
	EIndianaAudioEvent__FastTravelAdded                                              = 53,
	EIndianaAudioEvent__TextEntryTyping                                              = 54,
	EIndianaAudioEvent__WarningDialog                                                = 55,
	EIndianaAudioEvent__NewGame                                                      = 56,
	EIndianaAudioEvent__ContinueGame                                                 = 57,
	EIndianaAudioEvent__Zoom                                                         = 58,
	EIndianaAudioEvent__Pan                                                          = 59,
	EIndianaAudioEvent__FastTravelConfirm                                            = 60,
	EIndianaAudioEvent__MapTabChange                                                 = 61,
	EIndianaAudioEvent__SystemMapOpen                                                = 62,
	EIndianaAudioEvent__SystemMapOpenAmbient                                         = 63,
	EIndianaAudioEvent__SystemMapClose                                               = 64,
	EIndianaAudioEvent__SystemMapCloseAmbient                                        = 65,
	EIndianaAudioEvent__SystemMapShipStart                                           = 66,
	EIndianaAudioEvent__SystemMapShipStop                                            = 67,
	EIndianaAudioEvent__SystemMapShipLandingPad                                      = 68,
	EIndianaAudioEvent__SystemMapFastTravelConfirm                                   = 69,
	EIndianaAudioEvent__SystemMapPanStart                                            = 70,
	EIndianaAudioEvent__SystemMapPanStop                                             = 71,
	EIndianaAudioEvent__SystemMapDestinationUnlocked                                 = 72,
	EIndianaAudioEvent__QuestSelect                                                  = 73,
	EIndianaAudioEvent__QuestFilterChange                                            = 74,
	EIndianaAudioEvent__SkillSelectUnselect                                          = 75,
	EIndianaAudioEvent__SkillUnavailable                                             = 76,
	EIndianaAudioEvent__SkillApply                                                   = 77,
	EIndianaAudioEvent__PerkAddRemove                                                = 78,
	EIndianaAudioEvent__PerkApply                                                    = 79,
	EIndianaAudioEvent__PerkFinalConfirm                                             = 80,
	EIndianaAudioEvent__VendorOpenClose                                              = 81,
	EIndianaAudioEvent__VendorOpenClose_AC                                           = 82,
	EIndianaAudioEvent__VendorOpenClose_CP                                           = 83,
	EIndianaAudioEvent__VendorOpenClose_Groundbreaker                                = 84,
	EIndianaAudioEvent__VendorOpenClose_MSI                                          = 85,
	EIndianaAudioEvent__VendorOpenClose_SC                                           = 86,
	EIndianaAudioEvent__VendorOpenClose_Sublight                                     = 87,
	EIndianaAudioEvent__VendorOpenClose_TL                                           = 88,
	EIndianaAudioEvent__VendorChangeTab                                              = 89,
	EIndianaAudioEvent__VendorBuy                                                    = 90,
	EIndianaAudioEvent__VendorCantBuy                                                = 91,
	EIndianaAudioEvent__VendorSell                                                   = 92,
	EIndianaAudioEvent__VendorChangeCategory                                         = 93,
	EIndianaAudioEvent__VendorSellJunk                                               = 94,
	EIndianaAudioEvent__VendorRepair                                                 = 95,
	EIndianaAudioEvent__Vendor_Machine_Open_Factionless                              = 96,
	EIndianaAudioEvent__Vendor_Machine_Open_AC                                       = 97,
	EIndianaAudioEvent__Vendor_Machine_Open_CP                                       = 98,
	EIndianaAudioEvent__Vendor_Machine_Open_Groundbreaker                            = 99,
	EIndianaAudioEvent__Vendor_Machine_Open_MSI                                      = 100,
	EIndianaAudioEvent__Vendor_Machine_Open_SC                                       = 101,
	EIndianaAudioEvent__Vendor_Machine_Open_Sublight                                 = 102,
	EIndianaAudioEvent__Vendor_Machine_Open_TL                                       = 103,
	EIndianaAudioEvent__Vendor_Human_Open_Factionless                                = 104,
	EIndianaAudioEvent__Vendor_Human_Open_AC                                         = 105,
	EIndianaAudioEvent__Vendor_Human_Open_CP                                         = 106,
	EIndianaAudioEvent__Vendor_Human_Open_Groundbreaker                              = 107,
	EIndianaAudioEvent__Vendor_Human_Open_MSI                                        = 108,
	EIndianaAudioEvent__Vendor_Human_Open_SC                                         = 109,
	EIndianaAudioEvent__Vendor_Human_Open_Sublight                                   = 110,
	EIndianaAudioEvent__Vendor_Human_Open_TL                                         = 111,
	EIndianaAudioEvent__Vendor_Machine_Close_Factionless                             = 112,
	EIndianaAudioEvent__Vendor_Machine_Close_AC                                      = 113,
	EIndianaAudioEvent__Vendor_Machine_Close_CP                                      = 114,
	EIndianaAudioEvent__Vendor_Machine_Close_Groundbreaker                           = 115,
	EIndianaAudioEvent__Vendor_Machine_Close_MSI                                     = 116,
	EIndianaAudioEvent__Vendor_Machine_Close_SC                                      = 117,
	EIndianaAudioEvent__Vendor_Machine_Close_Sublight                                = 118,
	EIndianaAudioEvent__Vendor_Machine_Close_TL                                      = 119,
	EIndianaAudioEvent__Vendor_Human_Close_Factionless                               = 120,
	EIndianaAudioEvent__Vendor_Human_Close_AC                                        = 121,
	EIndianaAudioEvent__Vendor_Human_Close_CP                                        = 122,
	EIndianaAudioEvent__Vendor_Human_Close_Groundbreaker                             = 123,
	EIndianaAudioEvent__Vendor_Human_Close_MSI                                       = 124,
	EIndianaAudioEvent__Vendor_Human_Close_SC                                        = 125,
	EIndianaAudioEvent__Vendor_Human_Close_Sublight                                  = 126,
	EIndianaAudioEvent__Vendor_Human_Close_TL                                        = 127,
	EIndianaAudioEvent__WBOpenClose                                                  = 128,
	EIndianaAudioEvent__WBInstallMod                                                 = 129,
	EIndianaAudioEvent__WBRepair                                                     = 130,
	EIndianaAudioEvent__WBTinker                                                     = 131,
	EIndianaAudioEvent__TextReadOut                                                  = 132,
	EIndianaAudioEvent__TerminalEnter                                                = 133,
	EIndianaAudioEvent__TerminalExit                                                 = 134,
	EIndianaAudioEvent__RespecEnter                                                  = 135,
	EIndianaAudioEvent__SleepBed                                                     = 136,
	EIndianaAudioEvent__WaitChair                                                    = 137,
	EIndianaAudioEvent__PauseMenuOpen                                                = 138,
	EIndianaAudioEvent__PauseMenuClose                                               = 139,
	EIndianaAudioEvent__PerkSuppressionNotification                                  = 140,
	EIndianaAudioEvent__AudioLogAcquiredNew                                          = 141,
	EIndianaAudioEvent__AudioLogAcquiredRepeat                                       = 142,
	EIndianaAudioEvent__AudioLogStarted                                              = 143,
	EIndianaAudioEvent__AudioLogResumed                                              = 144,
	EIndianaAudioEvent__AudioLogPaused                                               = 145,
	EIndianaAudioEvent__AudioLogStopped                                              = 146,
	EIndianaAudioEvent__Count                                                        = 147
};

/// Enum /Script/Indiana.EIndianaUIOpacityType
/// Size: 0x01 (1 bytes)
enum class EIndianaUIOpacityType : uint8_t
{
	EIndianaUIOpacityType__Invalid                                                   = 0,
	EIndianaUIOpacityType__PipingOpacity                                             = 1,
	EIndianaUIOpacityType__BackgroundOpacity                                         = 2,
	EIndianaUIOpacityType__Count                                                     = 3
};

/// Enum /Script/Indiana.EWidgetOpenState
/// Size: 0x01 (1 bytes)
enum class EWidgetOpenState : uint8_t
{
	EWidgetOpenState__Maximized                                                      = 0,
	EWidgetOpenState__TransitioningToMinimized                                       = 1,
	EWidgetOpenState__Minimized                                                      = 2,
	EWidgetOpenState__TransitioningToMaximized                                       = 3
};

/// Enum /Script/Indiana.EPlayerHomeBaseType
/// Size: 0x01 (1 bytes)
enum class EPlayerHomeBaseType : uint8_t
{
	EPlayerHomeBaseType__None                                                        = 0,
	EPlayerHomeBaseType__Fake                                                        = 1,
	EPlayerHomeBaseType__Real                                                        = 2
};

/// Enum /Script/Indiana.EObjectInteractionUIType
/// Size: 0x01 (1 bytes)
enum class EObjectInteractionUIType : uint8_t
{
	EObjectInteractionUIType__Lockpick                                               = 0,
	EObjectInteractionUIType__Hack                                                   = 1,
	EObjectInteractionUIType__Trap                                                   = 2,
	EObjectInteractionUIType__Pickpocket                                             = 3
};

/// Enum /Script/Indiana.EPropagationMode
/// Size: 0x01 (1 bytes)
enum class EPropagationMode : uint8_t
{
	EPropagationMode__None                                                           = 0,
	EPropagationMode__Parent                                                         = 1,
	EPropagationMode__Indirect                                                       = 2
};

/// Enum /Script/Indiana.EInteractPayloadType
/// Size: 0x01 (1 bytes)
enum class EInteractPayloadType : uint8_t
{
	EInteractPayloadType__Int32                                                      = 0,
	EInteractPayloadType__Float                                                      = 1,
	EInteractPayloadType__String                                                     = 2
};

/// Enum /Script/Indiana.EInterruptType
/// Size: 0x01 (1 bytes)
enum class EInterruptType : uint8_t
{
	EInterruptType__Interrupt                                                        = 0,
	EInterruptType__PlaySimultaneously                                               = 1
};

/// Enum /Script/Indiana.EItemType
/// Size: 0x01 (1 bytes)
enum class EItemType : uint8_t
{
	EItemType__Weapon                                                                = 0,
	EItemType__ArmorSet                                                              = 1,
	EItemType__Ammo                                                                  = 2,
	EItemType__Currency                                                              = 3,
	EItemType__Resource                                                              = 4,
	EItemType__Quest                                                                 = 5,
	EItemType__WeaponMod                                                             = 6,
	EItemType__Helmet                                                                = 7,
	EItemType__ArmorModArmoring                                                      = 8,
	EItemType__ArmorModUtility                                                       = 9,
	EItemType__ArmorModResistance                                                    = 10,
	EItemType__ArmorModDampening                                                     = 11,
	EItemType__MedKit                                                                = 12,
	EItemType__Gadget                                                                = 13,
	EItemType__Count                                                                 = 14,
	EItemType__Invalid                                                               = 15
};

/// Enum /Script/Indiana.EItemStat
/// Size: 0x01 (1 bytes)
enum class EItemStat : uint8_t
{
	EItemStat__WeaponType                                                            = 0,
	EItemStat__FireMode                                                              = 1,
	EItemStat__AmmoType                                                              = 2,
	EItemStat__SkillType                                                             = 3,
	EItemStat__DamageType                                                            = 4,
	EItemStat__DamageTypeEnumValue                                                   = 5,
	EItemStat__Damage                                                                = 6,
	EItemStat__DPM                                                                   = 7,
	EItemStat__DPS                                                                   = 8,
	EItemStat__RPM                                                                   = 9,
	EItemStat__RoF                                                                   = 10,
	EItemStat__SwingAttackRate                                                       = 11,
	EItemStat__EquipTime                                                             = 12,
	EItemStat__ReloadTime                                                            = 13,
	EItemStat__CriticalChance                                                        = 14,
	EItemStat__CriticalMultiplier                                                    = 15,
	EItemStat__PostArmorMultiplier                                                   = 16,
	EItemStat__MagazineSize                                                          = 17,
	EItemStat__EffectiveRange                                                        = 18,
	EItemStat__MaxRange                                                              = 19,
	EItemStat__Recoil                                                                = 20,
	EItemStat__AimSpreadReduction                                                    = 21,
	EItemStat__SwayAngle                                                             = 22,
	EItemStat__SpreadAngle                                                           = 23,
	EItemStat__NoiseRange                                                            = 24,
	EItemStat__AoEOuterRadius                                                        = 25,
	EItemStat__MaxChargeTime                                                         = 26,
	EItemStat__AmmoPerShot                                                           = 27,
	EItemStat__AmmoTypeEmbedded                                                      = 28,
	EItemStat__DamageSpecialEffect                                                   = 29,
	EItemStat__ArmorThresholdPhysical                                                = 30,
	EItemStat__ArmorResistancePhysical                                               = 31,
	EItemStat__ArmorThresholdThermal                                                 = 32,
	EItemStat__ArmorResistanceThermal                                                = 33,
	EItemStat__ArmorThresholdEnergy                                                  = 34,
	EItemStat__ArmorResistanceEnergy                                                 = 35,
	EItemStat__ArmorThresholdCorruption                                              = 36,
	EItemStat__ArmorResistanceCorruption                                             = 37,
	EItemStat__ArmorThresholdShock                                                   = 38,
	EItemStat__ArmorResistanceShock                                                  = 39,
	EItemStat__ArmorThresholdNRay                                                    = 40,
	EItemStat__ArmorResistanceNRay                                                   = 41,
	EItemStat__ArmorThresholdCold                                                    = 42,
	EItemStat__ArmorResistanceCold                                                   = 43,
	EItemStat__ArmorSkillBonus                                                       = 44,
	EItemStat__ArmorType                                                             = 45,
	EItemStat__Durability                                                            = 46,
	EItemStat__Count                                                                 = 47
};

/// Enum /Script/Indiana.EItemSorting
/// Size: 0x01 (1 bytes)
enum class EItemSorting : uint8_t
{
	EItemSorting__CustomSort                                                         = 0,
	EItemSorting__Alphabetical                                                       = 1,
	EItemSorting__Value                                                              = 2,
	EItemSorting__Weight                                                             = 3,
	EItemSorting__ValueToWeight                                                      = 4,
	EItemSorting__DamageRating                                                       = 5,
	EItemSorting__WeaponType                                                         = 6,
	EItemSorting__ArmorRating                                                        = 7,
	EItemSorting__ArmorType                                                          = 8,
	EItemSorting__RangedMeleeArmorMod                                                = 9
};

/// Enum /Script/Indiana.ELedgerPages
/// Size: 0x01 (1 bytes)
enum class ELedgerPages : uint8_t
{
	ELedgerPages__CharacterStats                                                     = 0,
	ELedgerPages__Inventory                                                          = 1,
	ELedgerPages__Journal                                                            = 2,
	ELedgerPages__Map                                                                = 3,
	ELedgerPages__Companion1                                                         = 4,
	ELedgerPages__Companion2                                                         = 5,
	ELedgerPages__Companion3                                                         = 6,
	ELedgerPages__Companion4                                                         = 7,
	ELedgerPages__Companion5                                                         = 8,
	ELedgerPages__Companion6                                                         = 9,
	ELedgerPages__Null                                                               = 10,
	ELedgerPages__Count                                                              = 11,
	ELedgerPages__Invalid                                                            = 12
};

/// Enum /Script/Indiana.ELoadingScreenRegion
/// Size: 0x01 (1 bytes)
enum class ELoadingScreenRegion : uint8_t
{
	ELoadingScreenRegion__NoRegion                                                   = 0,
	ELoadingScreenRegion__Byzantium                                                  = 1,
	ELoadingScreenRegion__EmeraldVale                                                = 2,
	ELoadingScreenRegion__Groundbreaker                                              = 3,
	ELoadingScreenRegion__Monarch                                                    = 4,
	ELoadingScreenRegion__PlayerShip                                                 = 5,
	ELoadingScreenRegion__Roseway                                                    = 6,
	ELoadingScreenRegion__ScientistLab                                               = 7,
	ELoadingScreenRegion__Scylla                                                     = 8,
	ELoadingScreenRegion__Tartarus                                                   = 9,
	ELoadingScreenRegion__TheHope                                                    = 10,
	ELoadingScreenRegion__Gorgon                                                     = 11,
	ELoadingScreenRegion__Eridanos                                                   = 12,
	ELoadingScreenRegion__Count                                                      = 13
};

/// Enum /Script/Indiana.ELocomotionCategory
/// Size: 0x01 (1 bytes)
enum class ELocomotionCategory : uint8_t
{
	ELocomotionCategory__LC_WalkStart                                                = 0,
	ELocomotionCategory__LC_WalkStop                                                 = 1,
	ELocomotionCategory__LC_WalkTurn                                                 = 2,
	ELocomotionCategory__LC_RunStart                                                 = 3,
	ELocomotionCategory__LC_RunStop                                                  = 4,
	ELocomotionCategory__LC_RunTurn                                                  = 5,
	ELocomotionCategory__LC_WalkToRun                                                = 6,
	ELocomotionCategory__LC_RunToWalk                                                = 7,
	ELocomotionCategory__LC_TurnInPlace                                              = 8,
	ELocomotionCategory__LC_Walk                                                     = 9,
	ELocomotionCategory__LC_Idle                                                     = 10,
	ELocomotionCategory__LC_Run                                                      = 11,
	ELocomotionCategory__LC_Invalid                                                  = 12
};

/// Enum /Script/Indiana.EEqualityComparison
/// Size: 0x01 (1 bytes)
enum class EEqualityComparison : uint8_t
{
	EEqualityComparison__Equal                                                       = 0,
	EEqualityComparison__NotEqual                                                    = 1
};

/// Enum /Script/Indiana.EGlobalVariableComparison
/// Size: 0x01 (1 bytes)
enum class EGlobalVariableComparison : uint8_t
{
	EGlobalVariableComparison__Equal                                                 = 0,
	EGlobalVariableComparison__NotEqual                                              = 1,
	EGlobalVariableComparison__GreaterThan                                           = 2,
	EGlobalVariableComparison__LessThan                                              = 3,
	EGlobalVariableComparison__GreaterThanEqual                                      = 4,
	EGlobalVariableComparison__LessThanEqual                                         = 5
};

/// Enum /Script/Indiana.EConditionalType
/// Size: 0x01 (1 bytes)
enum class EConditionalType : uint8_t
{
	EConditionalType__GlobalVar                                                      = 0,
	EConditionalType__QuestState                                                     = 1,
	EConditionalType__CompanionState                                                 = 2,
	EConditionalType__PCGender                                                       = 3,
	EConditionalType__DLCInstalled                                                   = 4
};

/// Enum /Script/Indiana.ELogicalOperator
/// Size: 0x01 (1 bytes)
enum class ELogicalOperator : uint8_t
{
	ELogicalOperator__And                                                            = 0,
	ELogicalOperator__Or                                                             = 1
};

/// Enum /Script/Indiana.EDebugPCPlatformID
/// Size: 0x01 (1 bytes)
enum class EDebugPCPlatformID : uint8_t
{
	EDebugPCPlatformID__Normal                                                       = 0,
	EDebugPCPlatformID__PC_EpicGamesStore                                            = 1,
	EDebugPCPlatformID__PC_Steam                                                     = 2,
	EDebugPCPlatformID__PC_WindowsStore                                              = 3,
	EDebugPCPlatformID__PC_Gamepass                                                  = 4
};

/// Enum /Script/Indiana.EWaitingForInputState
/// Size: 0x01 (1 bytes)
enum class EWaitingForInputState : uint8_t
{
	EWaitingForInputState__AutosaveSplash                                            = 0,
	EWaitingForInputState__WaitingForInput                                           = 1,
	EWaitingForInputState__HidingText                                                = 2,
	EWaitingForInputState__Complete                                                  = 3
};

/// Enum /Script/Indiana.EMaterialParamType
/// Size: 0x01 (1 bytes)
enum class EMaterialParamType : uint8_t
{
	EMaterialParamType__Scalar                                                       = 0,
	EMaterialParamType__Vector                                                       = 1,
	EMaterialParamType__Texture                                                      = 2
};

/// Enum /Script/Indiana.EAttackerSlottingState
/// Size: 0x01 (1 bytes)
enum class EAttackerSlottingState : uint8_t
{
	EAttackerSlottingState__Unslotted_NoMove                                         = 0,
	EAttackerSlottingState__Unslotted                                                = 1,
	EAttackerSlottingState__Waiting                                                  = 2,
	EAttackerSlottingState__Slotted                                                  = 3
};

/// Enum /Script/Indiana.EMusicChangeReason
/// Size: 0x01 (1 bytes)
enum class EMusicChangeReason : uint8_t
{
	EMusicChangeReason__NoMusicAvailable                                             = 0,
	EMusicChangeReason__LoadingDefault                                               = 1,
	EMusicChangeReason__LoadingConditional                                           = 2,
	EMusicChangeReason__GameOver                                                     = 3,
	EMusicChangeReason__ScriptedOverride                                             = 4,
	EMusicChangeReason__ConditionalOverride                                          = 5,
	EMusicChangeReason__PlayerInDanger                                               = 6,
	EMusicChangeReason__PlayerInCombat                                               = 7,
	EMusicChangeReason__Default                                                      = 8,
	EMusicChangeReason__PlayerInPostCombat                                           = 9,
	EMusicChangeReason__UserSkip                                                     = 10
};

/// Enum /Script/Indiana.ESpecialObsidianID
/// Size: 0x01 (1 bytes)
enum class ESpecialObsidianID : uint8_t
{
	ESpecialObsidianID__None                                                         = 0,
	ESpecialObsidianID__Companion1                                                   = 1,
	ESpecialObsidianID__Companion2                                                   = 2,
	ESpecialObsidianID__Companion3                                                   = 3,
	ESpecialObsidianID__Companion4                                                   = 4,
	ESpecialObsidianID__Companion5                                                   = 5,
	ESpecialObsidianID__Companion6                                                   = 6,
	ESpecialObsidianID__Companion7                                                   = 7,
	ESpecialObsidianID__Count                                                        = 8
};

/// Enum /Script/Indiana.EOCLEventType
/// Size: 0x01 (1 bytes)
enum class EOCLEventType : uint8_t
{
	EOCLEventType__Invalid                                                           = 0,
	EOCLEventType__Open                                                              = 1,
	EOCLEventType__Opening                                                           = 2,
	EOCLEventType__Closed                                                            = 3,
	EOCLEventType__Closing                                                           = 4,
	EOCLEventType__Unlocked                                                          = 5,
	EOCLEventType__Barred                                                            = 6,
	EOCLEventType__Locked                                                            = 7,
	EOCLEventType__LockpickSuccess                                                   = 8,
	EOCLEventType__LockpickInterrupted                                               = 9,
	EOCLEventType__Lockpick                                                          = 10,
	EOCLEventType__TravelStart                                                       = 11,
	EOCLEventType__Ambient                                                           = 12,
	EOCLEventType__Unbarred                                                          = 13,
	EOCLEventType__Unsealed                                                          = 14,
	EOCLEventType__InteractLoopFinished                                              = 15
};

/// Enum /Script/Indiana.EOCLResult
/// Size: 0x01 (1 bytes)
enum class EOCLResult : uint8_t
{
	EOCLResult__Success                                                              = 0,
	EOCLResult__Failed_Locked                                                        = 1,
	EOCLResult__Failed_LockedPermanent                                               = 2,
	EOCLResult__Failed_Sealed                                                        = 3,
	EOCLResult__Failed_IsOpening                                                     = 4,
	EOCLResult__Failed_IsClosing                                                     = 5,
	EOCLResult__Failed_Barred                                                        = 6,
	EOCLResult__Pending_Lockpicking                                                  = 7
};

/// Enum /Script/Indiana.EOCLDifficulty
/// Size: 0x01 (1 bytes)
enum class EOCLDifficulty : uint8_t
{
	EOCLDifficulty__Easy                                                             = 0,
	EOCLDifficulty__Medium                                                           = 1,
	EOCLDifficulty__Difficult                                                        = 2,
	EOCLDifficulty__Extreme                                                          = 3
};

/// Enum /Script/Indiana.EPatrolMovementType
/// Size: 0x04 (4 bytes)
enum class EPatrolMovementType : uint32_t
{
	EPatrolMovementType__Run                                                         = 0,
	EPatrolMovementType__Walk                                                        = 1
};

/// Enum /Script/Indiana.EPerkCategory
/// Size: 0x01 (1 bytes)
enum class EPerkCategory : uint8_t
{
	EPerkCategory__Military                                                          = 0,
	EPerkCategory__Adventurer                                                        = 1,
	EPerkCategory__SilverTongue                                                      = 2,
	EPerkCategory__Companion                                                         = 3,
	EPerkCategory__Count                                                             = 4
};

/// Enum /Script/Indiana.EPersonalSpaceZone
/// Size: 0x01 (1 bytes)
enum class EPersonalSpaceZone : uint8_t
{
	EPersonalSpaceZone__None                                                         = 0,
	EPersonalSpaceZone__Acknowledgement                                              = 1,
	EPersonalSpaceZone__Interaction                                                  = 2,
	EPersonalSpaceZone__Violation                                                    = 3
};

/// Enum /Script/Indiana.EPlanetType
/// Size: 0x01 (1 bytes)
enum class EPlanetType : uint8_t
{
	EPlanetType__Hephaestus                                                          = 0,
	EPlanetType__Monarch                                                             = 1,
	EPlanetType__Tartarus                                                            = 2,
	EPlanetType__Terra2                                                              = 3
};

/// Enum /Script/Indiana.EDesiredEvent
/// Size: 0x01 (1 bytes)
enum class EDesiredEvent : uint8_t
{
	EDesiredEvent__None                                                              = 0,
	EDesiredEvent__Single                                                            = 1,
	EDesiredEvent__Loop                                                              = 2
};

/// Enum /Script/Indiana.EXPGainReason
/// Size: 0x01 (1 bytes)
enum class EXPGainReason : uint8_t
{
	EXPGainReason__EnemyKilled                                                       = 0,
	EXPGainReason__QuestCompleted                                                    = 1,
	EXPGainReason__QuestObjectiveCompleted                                           = 2,
	EXPGainReason__DiscoveredPointOfInterest                                         = 3,
	EXPGainReason__HackTerminal                                                      = 4,
	EXPGainReason__LockPick                                                          = 5,
	EXPGainReason__Conversation                                                      = 6,
	EXPGainReason__FoundCollectible                                                  = 7,
	EXPGainReason__Debug                                                             = 8,
	EXPGainReason__DiscoveredTravelDestination                                       = 9
};

/// Enum /Script/Indiana.EPointOfInterestXPType
/// Size: 0x01 (1 bytes)
enum class EPointOfInterestXPType : uint8_t
{
	EPointOfInterestXPType__None                                                     = 0,
	EPointOfInterestXPType__LargePointOfInterest                                     = 1,
	EPointOfInterestXPType__MediumPointOfInterest                                    = 2,
	EPointOfInterestXPType__SmallPointOfInterest                                     = 3,
	EPointOfInterestXPType__MicroPointOfInterest                                     = 4,
	EPointOfInterestXPType__Services                                                 = 5
};

/// Enum /Script/Indiana.EPointOfInterestLocationType
/// Size: 0x01 (1 bytes)
enum class EPointOfInterestLocationType : uint8_t
{
	EPointOfInterestLocationType__FastTravel                                         = 0,
	EPointOfInterestLocationType__Town                                               = 1,
	EPointOfInterestLocationType__Cave                                               = 2,
	EPointOfInterestLocationType__Dungeon                                            = 3,
	EPointOfInterestLocationType__Landmark                                           = 4,
	EPointOfInterestLocationType__Vendor                                             = 5,
	EPointOfInterestLocationType__VendingMachine                                     = 6,
	EPointOfInterestLocationType__Workbench                                          = 7
};

/// Enum /Script/Indiana.EPointOfInterestState
/// Size: 0x01 (1 bytes)
enum class EPointOfInterestState : uint8_t
{
	EPointOfInterestState__Hidden                                                    = 0,
	EPointOfInterestState__HiddenUndiscoverable                                      = 1,
	EPointOfInterestState__Unknown                                                   = 2,
	EPointOfInterestState__Mentioned                                                 = 3,
	EPointOfInterestState__Discovered                                                = 4
};

/// Enum /Script/Indiana.EQuestState
/// Size: 0x01 (1 bytes)
enum class EQuestState : uint8_t
{
	EQuestState__Invalid                                                             = 0,
	EQuestState__InProgress                                                          = 1,
	EQuestState__Completed                                                           = 2,
	EQuestState__Failed                                                              = 3,
	EQuestState__Mentioned                                                           = 4
};

/// Enum /Script/Indiana.ECompletionStatus
/// Size: 0x01 (1 bytes)
enum class ECompletionStatus : uint8_t
{
	ECompletionStatus__Invalid                                                       = 0,
	ECompletionStatus__Unstarted                                                     = 1,
	ECompletionStatus__InProgress                                                    = 2,
	ECompletionStatus__Completed                                                     = 3,
	ECompletionStatus__Botched                                                       = 4
};

/// Enum /Script/Indiana.EQueueType
/// Size: 0x01 (1 bytes)
enum class EQueueType : uint8_t
{
	EQueueType__Queue                                                                = 0,
	EQueueType__Discard                                                              = 1
};

/// Enum /Script/Indiana.ERandomBankType
/// Size: 0x01 (1 bytes)
enum class ERandomBankType : uint8_t
{
	ERandomBankType__RandomGoodbye                                                   = 0,
	ERandomBankType__Count                                                           = 1
};

/// Enum /Script/Indiana.ERecoilState
/// Size: 0x01 (1 bytes)
enum class ERecoilState : uint8_t
{
	ERecoilState__Active                                                             = 0,
	ERecoilState__ReturnToZero                                                       = 1,
	ERecoilState__Inactive                                                           = 2
};

/// Enum /Script/Indiana.ERegionType
/// Size: 0x01 (1 bytes)
enum class ERegionType : uint8_t
{
	ERegionType__None                                                                = 0,
	ERegionType__Player_Ship_0301                                                    = 1,
	ERegionType__EmeraldVale_0001_Exterior                                           = 2,
	ERegionType__EmeraldVale_0002_Town                                               = 3,
	ERegionType__EmeraldVale_0004_Geothermal_Plant                                   = 4,
	ERegionType__EmeraldVale_0005_Outcast_Camp                                       = 5,
	ERegionType__Groundbreaker_0101_Docking_Bays                                     = 6,
	ERegionType__Groundbreaker_0102_Promenade                                        = 7,
	ERegionType__Groundbreaker_0103_Operations                                       = 8,
	ERegionType__Monarch_0401_Exterior                                               = 9,
	ERegionType__Monarch_0402_Stellar_Bay                                            = 10,
	ERegionType__Monarch_0410_Stellar_Bay_Secret_Entrance                            = 11,
	ERegionType__Monarch_0403_Info_Broker_Compound                                   = 12,
	ERegionType__Monarch_0406_Devils_Peak_Station                                    = 13,
	ERegionType__Monarch_0408_Devils_Peak_Caverns                                    = 14,
	ERegionType__Monarch_0409_Nyoka_Secret_Passage                                   = 15,
	ERegionType__Roseway_0801_Forest                                                 = 16,
	ERegionType__Roseway_0802_Town                                                   = 17,
	ERegionType__Roseway_0804_Cleo_Lab                                               = 18,
	ERegionType__Roseway_0803_Covert_Lab                                             = 19,
	ERegionType__Roseway_0805_Storage_Facility                                       = 20,
	ERegionType__Terra2_0201_Exterior                                                = 21,
	ERegionType__Terra2_0202_Byzantium                                               = 22,
	ERegionType__Terra2_0203_HHCBuilding                                             = 23
};

/// Enum /Script/Indiana.ERelevancyType
/// Size: 0x01 (1 bytes)
enum class ERelevancyType : uint8_t
{
	ERelevancyType__None                                                             = 0,
	ERelevancyType__Standard                                                         = 1,
	ERelevancyType__Complete                                                         = 2
};

/// Enum /Script/Indiana.ECrosshairState
/// Size: 0x01 (1 bytes)
enum class ECrosshairState : uint8_t
{
	ECrosshairState__Invalid                                                         = 0,
	ECrosshairState__Default                                                         = 1,
	ECrosshairState__Hostile                                                         = 2,
	ECrosshairState__Neutral                                                         = 3
};

/// Enum /Script/Indiana.EReticleType
/// Size: 0x01 (1 bytes)
enum class EReticleType : uint8_t
{
	EReticleType__Invalid                                                            = 0,
	EReticleType__GenericMelee                                                       = 1,
	EReticleType__GenericRanged                                                      = 2
};

/// Enum /Script/Indiana.EStatClampingMethod
/// Size: 0x01 (1 bytes)
enum class EStatClampingMethod : uint8_t
{
	EStatClampingMethod__None                                                        = 0,
	EStatClampingMethod__ClampTo0                                                    = 1,
	EStatClampingMethod__Custom                                                      = 2,
	EStatClampingMethod__Attribute                                                   = 3,
	EStatClampingMethod__Skill                                                       = 4
};

/// Enum /Script/Indiana.EIndianaChunkIndex
/// Size: 0x04 (4 bytes)
enum class EIndianaChunkIndex : uint32_t
{
	EIndianaChunkIndex__EarlyInteractive                                             = 0,
	EIndianaChunkIndex__BaseGame                                                     = 1,
	EIndianaChunkIndex__INX1                                                         = 15,
	EIndianaChunkIndex__INX2                                                         = 16
};

/// Enum /Script/Indiana.EAutoSaveType
/// Size: 0x01 (1 bytes)
enum class EAutoSaveType : uint8_t
{
	EAutoSaveType__Default                                                           = 0,
	EAutoSaveType__Travel                                                            = 1,
	EAutoSaveType__Scripted                                                          = 2
};

/// Enum /Script/Indiana.EDeleteGameResult
/// Size: 0x01 (1 bytes)
enum class EDeleteGameResult : uint8_t
{
	EDeleteGameResult__Success                                                       = 0,
	EDeleteGameResult__Restricted                                                    = 1,
	EDeleteGameResult__Failed                                                        = 2,
	EDeleteGameResult__SaveOfGivenNameNotFound                                       = 3,
	EDeleteGameResult__FailedDeletingStaleTargetDir                                  = 4
};

/// Enum /Script/Indiana.ESaveLoadRestriction
/// Size: 0x01 (1 bytes)
enum class ESaveLoadRestriction : uint8_t
{
	ESaveLoadRestriction__NoCurrentRestriction                                       = 0,
	ESaveLoadRestriction__RunningPlayInEditor                                        = 1,
	ESaveLoadRestriction__NoPlayerPresent                                            = 2,
	ESaveLoadRestriction__CinematicInProgress                                        = 3,
	ESaveLoadRestriction__PlayerInConversation                                       = 4,
	ESaveLoadRestriction__PlayerInCombat                                             = 5,
	ESaveLoadRestriction__PlayerCrimeDetected                                        = 6,
	ESaveLoadRestriction__LevelTraveling                                             = 7,
	ESaveLoadRestriction__ModalInterface                                             = 8,
	ESaveLoadRestriction__PlayerIsIncapacitated                                      = 9,
	ESaveLoadRestriction__SaveInProgress                                             = 10,
	ESaveLoadRestriction__LoadInProgress                                             = 11,
	ESaveLoadRestriction__TimeDilation                                               = 12,
	ESaveLoadRestriction__ManualRestriction                                          = 13,
	ESaveLoadRestriction__Unsupported                                                = 14,
	ESaveLoadRestriction__DeviceFull                                                 = 15,
	ESaveLoadRestriction__PlatformSaveSystemNull                                     = 16,
	ESaveLoadRestriction__PlatformStorageInaccessible                                = 17,
	ESaveLoadRestriction__PlayerFalling                                              = 18,
	ESaveLoadRestriction__PlayerInActiveHazard                                       = 19,
	ESaveLoadRestriction__PlayerInterpolatingToSpline                                = 20,
	ESaveLoadRestriction__PlayerDeadOrDying                                          = 21,
	ESaveLoadRestriction__SuperNovaOnlySaveOnShip                                    = 22,
	ESaveLoadRestriction__UserLoggingOut                                             = 23,
	ESaveLoadRestriction__UIWindowActive                                             = 24,
	ESaveLoadRestriction__UICharacterCreationActive                                  = 25
};

/// Enum /Script/Indiana.EButtonType
/// Size: 0x01 (1 bytes)
enum class EButtonType : uint8_t
{
	EButtonType__Normal                                                              = 0,
	EButtonType__Selectable                                                          = 1
};

/// Enum /Script/Indiana.EScalarType
/// Size: 0x01 (1 bytes)
enum class EScalarType : uint8_t
{
	EScalarType__Invalid                                                             = 0,
	EScalarType__Health                                                              = 1,
	EScalarType__Damage                                                              = 2,
	EScalarType__Armor                                                               = 3
};

/// Enum /Script/Indiana.ComparisonOperator
/// Size: 0x01 (1 bytes)
enum class ComparisonOperator : uint8_t
{
	ComparisonOperator__Equals                                                       = 0,
	ComparisonOperator__GreaterThan                                                  = 1,
	ComparisonOperator__LessThan                                                     = 2,
	ComparisonOperator__NotEqual                                                     = 3,
	ComparisonOperator__GreaterThanOrEquals                                          = 4,
	ComparisonOperator__LessThanOrEquals                                             = 5,
	ComparisonOperator__Count                                                        = 6,
	ComparisonOperator__Invalid                                                      = 7
};

/// Enum /Script/Indiana.ExpressionComponentType
/// Size: 0x01 (1 bytes)
enum class ExpressionComponentType : uint8_t
{
	ExpressionComponentType__ScriptCall                                              = 0,
	ExpressionComponentType__Expression                                              = 1
};

/// Enum /Script/Indiana.LogicalOperator
/// Size: 0x01 (1 bytes)
enum class LogicalOperator : uint8_t
{
	LogicalOperator__And                                                             = 0,
	LogicalOperator__Or                                                              = 1
};

/// Enum /Script/Indiana.EPlatformFamily
/// Size: 0x01 (1 bytes)
enum class EPlatformFamily : uint8_t
{
	EPlatformFamily__PC                                                              = 0,
	EPlatformFamily__Xbox                                                            = 1,
	EPlatformFamily__PS4                                                             = 2,
	EPlatformFamily__Switch                                                          = 3
};

/// Enum /Script/Indiana.ESettingSubcategory
/// Size: 0x01 (1 bytes)
enum class ESettingSubcategory : uint8_t
{
	ESettingSubcategory__Invalid                                                     = 0,
	ESettingSubcategory__GraphicsDisplay                                             = 1,
	ESettingSubcategory__GraphicsQuality                                             = 2,
	ESettingSubcategory__AudioVolume                                                 = 3,
	ESettingSubcategory__ControlsController                                          = 4,
	ESettingSubcategory__Subtitles                                                   = 5,
	ESettingSubcategory__General                                                     = 6,
	ESettingSubcategory__Quests                                                      = 7,
	ESettingSubcategory__Movement                                                    = 8,
	ESettingSubcategory__Gameplay                                                    = 9,
	ESettingSubcategory__Menus                                                       = 10,
	ESettingSubcategory__ControlsMouseKeyboard                                       = 11,
	ESettingSubcategory__UI                                                          = 12,
	ESettingSubcategory__GameplayDisplay                                             = 13,
	ESettingSubcategory__HUD                                                         = 14,
	ESettingSubcategory__UIGeneral                                                   = 15,
	ESettingSubcategory__GraphicsEffects                                             = 16
};

/// Enum /Script/Indiana.ESetting
/// Size: 0x01 (1 bytes)
enum class ESetting : uint8_t
{
	ESetting__Invalid                                                                = 0,
	ESetting__Resolution                                                             = 1,
	ESetting__WindowMode                                                             = 2,
	ESetting__VerticalSync                                                           = 3,
	ESetting__ViewDistanceQuality                                                    = 4,
	ESetting__ShadowQuality                                                          = 5,
	ESetting__AAQuality                                                              = 6,
	ESetting__TextureQuality                                                         = 7,
	ESetting__VisualEffectQuality                                                    = 8,
	ESetting__PostProcessingQuality                                                  = 9,
	ESetting__FolliageQuality                                                        = 10,
	ESetting__MasterVolume                                                           = 11,
	ESetting__EffectsVolume                                                          = 12,
	ESetting__MusicVolume                                                            = 13,
	ESetting__UIVolume                                                               = 14,
	ESetting__InvertControllerY                                                      = 15,
	ESetting__ConversationSubtitleMode                                               = 16,
	ESetting__ConversationContinueOnVOEnd                                            = 17,
	ESetting__ConversationResponsesVisibleDuringVO                                   = 18,
	ESetting__QuestLogVisibleAllTimes                                                = 19,
	ESetting__MotionBlur                                                             = 20,
	ESetting__AAMethod                                                               = 21,
	ESetting__MouseSensitivity                                                       = 22,
	ESetting__VoiceVolume                                                            = 23,
	ESetting__ItemStatsRaw                                                           = 24,
	ESetting__GameDifficulty                                                         = 25,
	ESetting__RadialSensitivity                                                      = 26,
	ESetting__ControllerSensitivity                                                  = 27,
	ESetting__ShowTutorials                                                          = 28,
	ESetting__ShowFloatingDamageText                                                 = 29,
	ESetting__ShowPlayerHelmet                                                       = 30,
	ESetting__ShowCompanionHelmets                                                   = 31,
	ESetting__GeneralQuality                                                         = 32,
	ESetting__Gamma                                                                  = 33,
	ESetting__BarkSubtitleVisibility                                                 = 34,
	ESetting__CinematicSubtitleVisibility                                            = 35,
	ESetting__CompanionOutlineVisibility                                             = 36,
	ESetting__KeyBinds                                                               = 37,
	ESetting__GamePadLayout                                                          = 38,
	ESetting__StickLayout                                                            = 39,
	ESetting__MoveForward                                                            = 40,
	ESetting__MoveBackward                                                           = 41,
	ESetting__StrafeLeft                                                             = 42,
	ESetting__StrafeRight                                                            = 43,
	ESetting__LookUp                                                                 = 44,
	ESetting__LookDown                                                               = 45,
	ESetting__TurnLeft                                                               = 46,
	ESetting__TurnRight                                                              = 47,
	ESetting__Sprint                                                                 = 48,
	ESetting__Jump                                                                   = 49,
	ESetting__CrouchSneak                                                            = 50,
	ESetting__QuickSave                                                              = 51,
	ESetting__QuickLoad                                                              = 52,
	ESetting__UseInteract                                                            = 53,
	ESetting__WeaponOne                                                              = 54,
	ESetting__WeaponTwo                                                              = 55,
	ESetting__WeaponThree                                                            = 56,
	ESetting__WeaponFour                                                             = 57,
	ESetting__Inhaler                                                                = 58,
	ESetting__NextWeapon                                                             = 59,
	ESetting__PreviousWeapon                                                         = 60,
	ESetting__LastWeapon                                                             = 61,
	ESetting__PrimaryFire                                                            = 62,
	ESetting__AlernateFire                                                           = 63,
	ESetting__Overcharge                                                             = 64,
	ESetting__QuickMelee                                                             = 65,
	ESetting__Reload                                                                 = 66,
	ESetting__WeaponWheel                                                            = 67,
	ESetting__TimeDilation                                                           = 68,
	ESetting__CompanionMove                                                          = 69,
	ESetting__CompanionAttack                                                        = 70,
	ESetting__CompanionFollow                                                        = 71,
	ESetting__CompanionOneSpecialAbility                                             = 72,
	ESetting__CompanionTwoSpecialAbility                                             = 73,
	ESetting__Pause                                                                  = 74,
	ESetting__ViewInventory                                                          = 75,
	ESetting__ViewLedger                                                             = 76,
	ESetting__ViewCharacterMenu                                                      = 77,
	ESetting__ViewJournal                                                            = 78,
	ESetting__ViewMap                                                                = 79,
	ESetting__ViewRegionMap                                                          = 80,
	ESetting__ViewCompanionMenu                                                      = 81,
	ESetting__ViewPerks                                                              = 82,
	ESetting__ViewSkills                                                             = 83,
	ESetting__ViewCodex                                                              = 84,
	ESetting__ViewSummary                                                            = 85,
	ESetting__ViewDetails                                                            = 86,
	ESetting__ViewReputation                                                         = 87,
	ESetting__InvertMouseY                                                           = 88,
	ESetting__ControllerRumble                                                       = 89,
	ESetting__AutoCollapseInventory                                                  = 90,
	ESetting__GameplayGamma                                                          = 91,
	ESetting__Language                                                               = 92,
	ESetting__WeaponTooltipStatMode                                                  = 93,
	ESetting__HUDVisibility                                                          = 94,
	ESetting__HUDMode                                                                = 95,
	ESetting__CompassVisibility                                                      = 96,
	ESetting__ShowDialogSkill                                                        = 97,
	ESetting__TooltipDelay                                                           = 98,
	ESetting__NotificationDuration                                                   = 99,
	ESetting__InteractionOutlines                                                    = 100,
	ESetting__InteractionControls                                                    = 101,
	ESetting__WaypointMarkers                                                        = 102,
	ESetting__EnemyHealthBars                                                        = 103,
	ESetting__EnemyAwarenessMeters                                                   = 104,
	ESetting__AimingReticle                                                          = 105,
	ESetting__ReticleFeedback                                                        = 106,
	ESetting__QuestUpdates                                                           = 107,
	ESetting__PlayerStatusBars                                                       = 108,
	ESetting__PlayerStatusEffects                                                    = 109,
	ESetting__PlayerStatusEffectNames                                                = 110,
	ESetting__CompanionAbilityUI                                                     = 111,
	ESetting__CompanionAbilityBindings                                               = 112,
	ESetting__HeldWeaponDisplay                                                      = 113,
	ESetting__HeldWeaponDisplayText                                                  = 114,
	ESetting__AreaNames                                                              = 115,
	ESetting__DirectionalDamageIndicators                                            = 116,
	ESetting__FPSIndicator                                                           = 117,
	ESetting__SurvivalMeters                                                         = 118,
	ESetting__MedicalInhaler                                                         = 119,
	ESetting__AbilityControls                                                        = 120,
	ESetting__CompanionStatus                                                        = 121,
	ESetting__CompanionPassiveCooldowns                                              = 122,
	ESetting__CompanionPassiveCooldownNotification                                   = 123,
	ESetting__LevelUpNotifications                                                   = 124,
	ESetting__LevelUpReminders                                                       = 125,
	ESetting__CombatIndicator                                                        = 126,
	ESetting__TTDScanner                                                             = 127,
	ESetting__TTDReticleMeter                                                        = 128,
	ESetting__TTDStatusEffectPreview                                                 = 129,
	ESetting__DisguiseMeter                                                          = 130,
	ESetting__EquipmentRepairWarning                                                 = 131,
	ESetting__SimplifiedEquipmentRepairWarning                                       = 132,
	ESetting__WeaponSelect                                                           = 133,
	ESetting__WeaponSelectAxis                                                       = 134,
	ESetting__SimplifiedLockpickHacking                                              = 135,
	ESetting__LootTooltips                                                           = 136,
	ESetting__LootControls                                                           = 137,
	ESetting__ShowTutorialNotifications                                              = 138,
	ESetting__FPSLimit                                                               = 139,
	ESetting__Resolution3D                                                           = 140,
	ESetting__DetectGraphics                                                         = 141,
	ESetting__FieldOfView                                                            = 142,
	ESetting__TTDDisplayMode                                                         = 143,
	ESetting__DodgeDisplayMode                                                       = 144,
	ESetting__ControllerDeadZoneLeftInner                                            = 145,
	ESetting__ControllerDeadZoneLeftOuter                                            = 146,
	ESetting__ControllerDeadZoneRightInner                                           = 147,
	ESetting__ControllerDeadZoneRightOuter                                           = 148,
	ESetting__EnlargedFontSize                                                       = 149,
	ESetting__ColorblindMode                                                         = 150,
	ESetting__OffsetReticle                                                          = 151,
	ESetting__CinematicKillCam                                                       = 152,
	ESetting__ChromaticAberration                                                    = 153,
	ESetting__Headbobbing                                                            = 154,
	ESetting__MouseADSSensitivity                                                    = 155,
	ESetting__ControllerADSSensitivity                                               = 156,
	ESetting__FontSizeModifier                                                       = 157,
	ESetting__ControllerEnableAutoSprint                                             = 158,
	ESetting__AutoSprint                                                             = 159,
	ESetting__InvertMouseX                                                           = 160,
	ESetting__InvertControllerX                                                      = 161,
	ESetting__InterruptAudioLog                                                      = 162,
	ESetting__PerformanceMode                                                        = 163,
	ESetting__ControllerEnableImpulseTriggers                                        = 164,
	ESetting__ImpulseTriggerIntensity                                                = 165,
	ESetting__DynamicResolution                                                      = 166,
	ESetting__SSGI                                                                   = 167,
	ESetting__FSR2                                                                   = 168
};

/// Enum /Script/Indiana.ECategory
/// Size: 0x01 (1 bytes)
enum class ECategory : uint8_t
{
	ECategory__None                                                                  = 0,
	ECategory__Graphics                                                              = 1,
	ECategory__Audio                                                                 = 2,
	ECategory__Control                                                               = 3,
	ECategory__Gameplay                                                              = 4,
	ECategory__UI                                                                    = 5,
	ECategory__Debug                                                                 = 6,
	ECategory__Count                                                                 = 7
};

/// Enum /Script/Indiana.EShapeType
/// Size: 0x01 (1 bytes)
enum class EShapeType : uint8_t
{
	EShapeType__Unknown                                                              = 0,
	EShapeType__Box                                                                  = 1,
	EShapeType__Sphere                                                               = 2,
	EShapeType__Capsule                                                              = 3
};

/// Enum /Script/Indiana.ESpawnActorEventLocationSetting
/// Size: 0x01 (1 bytes)
enum class ESpawnActorEventLocationSetting : uint8_t
{
	ESpawnActorEventLocationSetting__MatchTargetActor                                = 0,
	ESpawnActorEventLocationSetting__ProjectToGround                                 = 1
};

/// Enum /Script/Indiana.ESpawnActorEventRotationSetting
/// Size: 0x01 (1 bytes)
enum class ESpawnActorEventRotationSetting : uint8_t
{
	ESpawnActorEventRotationSetting__DoNotRotate                                     = 0,
	ESpawnActorEventRotationSetting__MatchTargetActor                                = 1
};

/// Enum /Script/Indiana.ESpellApplicationResult
/// Size: 0x01 (1 bytes)
enum class ESpellApplicationResult : uint8_t
{
	ESpellApplicationResult__NotApplied                                              = 0,
	ESpellApplicationResult__OneShot                                                 = 1,
	ESpellApplicationResult__Persistent                                              = 2
};

/// Enum /Script/Indiana.EConeAxis
/// Size: 0x01 (1 bytes)
enum class EConeAxis : uint8_t
{
	EConeAxis__None                                                                  = 0,
	EConeAxis__X                                                                     = 1,
	EConeAxis__Y                                                                     = 2,
	EConeAxis__Z                                                                     = 3
};

/// Enum /Script/Indiana.ESpellEffectDirectionType
/// Size: 0x01 (1 bytes)
enum class ESpellEffectDirectionType : uint8_t
{
	ESpellEffectDirectionType__Default                                               = 0,
	ESpellEffectDirectionType__CasterToTarget                                        = 1,
	ESpellEffectDirectionType__CasterForward                                         = 2,
	ESpellEffectDirectionType__TargetForward                                         = 3
};

/// Enum /Script/Indiana.ESpellEffectTarget
/// Size: 0x01 (1 bytes)
enum class ESpellEffectTarget : uint8_t
{
	ESpellEffectTarget__Self                                                         = 0,
	ESpellEffectTarget__Player                                                       = 1,
	ESpellEffectTarget__Companions                                                   = 2,
	ESpellEffectTarget__Target                                                       = 3,
	ESpellEffectTarget__Party                                                        = 4,
	ESpellEffectTarget__AOE                                                          = 5,
	ESpellEffectTarget__Cone                                                         = 6,
	ESpellEffectTarget__RandomCompanion                                              = 7,
	ESpellEffectTarget__RandomCompanionOnCooldown                                    = 8,
	ESpellEffectTarget__OtherCompanion                                               = 9,
	ESpellEffectTarget__CharactersDetectingPlayer                                    = 10,
	ESpellEffectTarget__AOESingleChoice                                              = 11,
	ESpellEffectTarget__Count                                                        = 12,
	ESpellEffectTarget__Invalid                                                      = 13
};

/// Enum /Script/Indiana.ESpellCastResult
/// Size: 0x01 (1 bytes)
enum class ESpellCastResult : uint8_t
{
	ESpellCastResult__Success                                                        = 0,
	ESpellCastResult__AlreadyActive                                                  = 1,
	ESpellCastResult__InvalidTarget                                                  = 2,
	ESpellCastResult__OnCooldown                                                     = 3,
	ESpellCastResult__NotEnoughResources                                             = 4,
	ESpellCastResult__Count                                                          = 5,
	ESpellCastResult__Invalid                                                        = 6
};

/// Enum /Script/Indiana.EStackSplitStyle
/// Size: 0x01 (1 bytes)
enum class EStackSplitStyle : uint8_t
{
	EStackSplitStyle__Default                                                        = 0,
	EStackSplitStyle__CenterBG                                                       = 1,
	EStackSplitStyle__Center                                                         = 2,
	EStackSplitStyle__LeftBG                                                         = 3,
	EStackSplitStyle__Left                                                           = 4,
	EStackSplitStyle__TopBG                                                          = 5,
	EStackSplitStyle__Top                                                            = 6,
	EStackSplitStyle__RightBG                                                        = 7,
	EStackSplitStyle__Right                                                          = 8,
	EStackSplitStyle__BottomBG                                                       = 9,
	EStackSplitStyle__Bottom                                                         = 10
};

/// Enum /Script/Indiana.TestEnum
/// Size: 0x01 (1 bytes)
enum class TestEnum : uint8_t
{
	TestEnum__EnumValue0                                                             = 0,
	TestEnum__EnumValue1                                                             = 1,
	TestEnum__EnumValue2                                                             = 2
};

/// Enum /Script/Indiana.EAdjustmentDirection
/// Size: 0x01 (1 bytes)
enum class EAdjustmentDirection : uint8_t
{
	EAdjustmentDirection__Neutral                                                    = 0,
	EAdjustmentDirection__Positive                                                   = 1,
	EAdjustmentDirection__Negative                                                   = 2
};

/// Enum /Script/Indiana.ERpgStatGroupMask
/// Size: 0x01 (1 bytes)
enum class ERpgStatGroupMask : uint8_t
{
	ERpgStatGroupMask__None                                                          = 0,
	ERpgStatGroupMask__CharacterOnly                                                 = 1,
	ERpgStatGroupMask__WeaponOnly                                                    = 2,
	ERpgStatGroupMask__CharacterAndWeapon                                            = 3
};

/// Enum /Script/Indiana.ERpgStatGroup
/// Size: 0x01 (1 bytes)
enum class ERpgStatGroup : uint8_t
{
	ERpgStatGroup__Character                                                         = 0,
	ERpgStatGroup__Weapon                                                            = 1,
	ERpgStatGroup__Count                                                             = 2,
	ERpgStatGroup__Invalid                                                           = 255
};

/// Enum /Script/Indiana.EStatModifierType
/// Size: 0x01 (1 bytes)
enum class EStatModifierType : uint8_t
{
	EStatModifierType__PreAdd                                                        = 0,
	EStatModifierType__Multiplier                                                    = 1,
	EStatModifierType__PostAdd                                                       = 2
};

/// Enum /Script/Indiana.EStatusEffectApplicationType
/// Size: 0x01 (1 bytes)
enum class EStatusEffectApplicationType : uint8_t
{
	EStatusEffectApplicationType__ApplyOnStart                                       = 0,
	EStatusEffectApplicationType__ApplyOnTick                                        = 1,
	EStatusEffectApplicationType__ApplyOverTime                                      = 2,
	EStatusEffectApplicationType__ApplyAtEnd                                         = 3
};

/// Enum /Script/Indiana.EStatusEffectDurationType
/// Size: 0x01 (1 bytes)
enum class EStatusEffectDurationType : uint8_t
{
	EStatusEffectDurationType__UseDurationTime                                       = 0,
	EStatusEffectDurationType__Instant                                               = 1,
	EStatusEffectDurationType__Infinite                                              = 2,
	EStatusEffectDurationType__Parent                                                = 3,
	EStatusEffectDurationType__Formula                                               = 4,
	EStatusEffectDurationType__PassThroughValue                                      = 5
};

/// Enum /Script/Indiana.EStatusEffectInitialApplicationType
/// Size: 0x01 (1 bytes)
enum class EStatusEffectInitialApplicationType : uint8_t
{
	EStatusEffectInitialApplicationType__StackIfAlreadyApplied                       = 0,
	EStatusEffectInitialApplicationType__RemoveExistingIfAlreadyApplied              = 1,
	EStatusEffectInitialApplicationType__UseLongerDurationIfAlreadyApplied           = 2,
	EStatusEffectInitialApplicationType__AddDurationIfAlreadyApplied                 = 3,
	EStatusEffectInitialApplicationType__DontApplyIfAlreadyApplied                   = 4,
	EStatusEffectInitialApplicationType__StackSingleInstance                         = 5
};

/// Enum /Script/Indiana.EStatusEffectKeywordType
/// Size: 0x01 (1 bytes)
enum class EStatusEffectKeywordType : uint8_t
{
	EStatusEffectKeywordType__None                                                   = 0,
	EStatusEffectKeywordType__Acid                                                   = 1,
	EStatusEffectKeywordType__Bleed                                                  = 2,
	EStatusEffectKeywordType__Disease                                                = 3,
	EStatusEffectKeywordType__Fire                                                   = 4,
	EStatusEffectKeywordType__Ice                                                    = 5,
	EStatusEffectKeywordType__Poison                                                 = 6
};

/// Enum /Script/Indiana.EGuiText
/// Size: 0x02 (2 bytes)
enum class EGuiText : uint16_t
{
	EGuiText____Invalid__                                                            = 0,
	EGuiText__No                                                                     = 1,
	EGuiText__Accept                                                                 = 2,
	EGuiText__Cancel                                                                 = 3,
	EGuiText__Continue                                                               = 4,
	EGuiText__EndDialogue                                                            = 6,
	EGuiText__Back                                                                   = 7,
	EGuiText__Quit                                                                   = 9,
	EGuiText__NewSaveFile                                                            = 17,
	EGuiText__LedgerNavigation_Inventory                                             = 18,
	EGuiText__Ledger_Tab_Journal                                                     = 19,
	EGuiText__LedgerNavigation_Map                                                   = 20,
	EGuiText__Male                                                                   = 22,
	EGuiText__Female                                                                 = 23,
	EGuiText__StatusEffect_Injure                                                    = 24,
	EGuiText__StatusEffect_Stagger                                                   = 25,
	EGuiText__StatusEffect_Knockback                                                 = 26,
	EGuiText__StatusEffect_Wind                                                      = 27,
	EGuiText__StatusEffect_Lame                                                      = 28,
	EGuiText__StatusEffect_Maim                                                      = 29,
	EGuiText__StatusEffect_Stun                                                      = 30,
	EGuiText__StatusEffect_Concuss                                                   = 31,
	EGuiText__StatusEffect_Knockdown                                                 = 32,
	EGuiText__StatusEffect_Blur                                                      = 33,
	EGuiText__StatusEffect_Disarm                                                    = 34,
	EGuiText__StatusEffect_Knockout                                                  = 35,
	EGuiText__On                                                                     = 36,
	EGuiText__Off                                                                    = 37,
	EGuiText__Revert                                                                 = 38,
	EGuiText__Yes                                                                    = 39,
	EGuiText__SoundMaster                                                            = 40,
	EGuiText__SoundEffects                                                           = 41,
	EGuiText__SoundMusic                                                             = 42,
	EGuiText__SoundUI                                                                = 43,
	EGuiText__SettingCategorySound                                                   = 44,
	EGuiText__SettingCategoryGeneral                                                 = 45,
	EGuiText__YAxisInverted                                                          = 46,
	EGuiText__Default                                                                = 47,
	EGuiText__Fullscreen                                                             = 48,
	EGuiText__ResponseLie                                                            = 49,
	EGuiText__ResponseIntimidate                                                     = 50,
	EGuiText__ResponsePersuade                                                       = 51,
	EGuiText__QuestAdded                                                             = 52,
	EGuiText__QuestUpdated                                                           = 53,
	EGuiText__QuestCompleted                                                         = 54,
	EGuiText__QuestFailed                                                            = 55,
	EGuiText__Door_BarredShut                                                        = 56,
	EGuiText__Door_InformLocked                                                      = 57,
	EGuiText__Door_InformPermanentlyLocked                                           = 58,
	EGuiText__Door_Unlocked                                                          = 61,
	EGuiText__KeyItem_Removed                                                        = 63,
	EGuiText__Menu_Resume                                                            = 64,
	EGuiText__Menu_Restart                                                           = 65,
	EGuiText__Menu_MainMenu                                                          = 66,
	EGuiText__Menu_Settings                                                          = 67,
	EGuiText__Settings_Debug                                                         = 68,
	EGuiText__Menu_Dead                                                              = 69,
	EGuiText__Menu_Levels                                                            = 70,
	EGuiText__Level_BeautifulCorner                                                  = 71,
	EGuiText__Level_Prototype                                                        = 72,
	EGuiText__Level_Dialog                                                           = 73,
	EGuiText__Level_Stealth                                                          = 74,
	EGuiText__Level_Combat                                                           = 75,
	EGuiText__Level_Movement                                                         = 76,
	EGuiText__Level_Back                                                             = 77,
	EGuiText__Settings_VSync                                                         = 78,
	EGuiText__Settings_General                                                       = 79,
	EGuiText__Container_BarredShut                                                   = 81,
	EGuiText__Level_Area                                                             = 82,
	EGuiText__Level_QuestTest                                                        = 83,
	EGuiText__Level_GameObjectsTest                                                  = 84,
	EGuiText__Button_Claim                                                           = 85,
	EGuiText__Button_Close                                                           = 86,
	EGuiText__Button_Unlock                                                          = 88,
	EGuiText__Button_Transfer                                                        = 89,
	EGuiText__Button_Claim_All                                                       = 90,
	EGuiText__Door_Guide_Open                                                        = 92,
	EGuiText__Door_Guide_Locked                                                      = 93,
	EGuiText__Door_Guide_Barred                                                      = 94,
	EGuiText__Guide_Unlock_With_Requirement                                          = 95,
	EGuiText__Switch_Guide_Use                                                       = 96,
	EGuiText__Ladder_Guide_Use                                                       = 97,
	EGuiText__Pickup_Guide_Use                                                       = 98,
	EGuiText__Elevator_Guide_Use                                                     = 99,
	EGuiText__Switch_Guide_Use_Travel                                                = 106,
	EGuiText__Build_Version                                                          = 107,
	EGuiText__Computer_Guide_Use                                                     = 108,
	EGuiText__Computer_Guide_Locked                                                  = 109,
	EGuiText__Computer_KeyItem_Removed                                               = 111,
	EGuiText__Computer_Unlocked_Key                                                  = 113,
	EGuiText__Computer_Locked                                                        = 114,
	EGuiText__Computer_InformLocked_Error                                            = 117,
	EGuiText__Computer_Difficulty_Easy                                               = 118,
	EGuiText__Computer_Difficulty_Medium                                             = 119,
	EGuiText__Computer_Difficulty_Difficult                                          = 120,
	EGuiText__Computer_Difficulty_Extreme                                            = 121,
	EGuiText__Button_Clear                                                           = 122,
	EGuiText__Talk                                                                   = 123,
	EGuiText__Available                                                              = 132,
	EGuiText__StatusEffect_Intimidate                                                = 133,
	EGuiText__StatusEffect_ReducedRange                                              = 134,
	EGuiText__StatusEffect_ReducedSight                                              = 135,
	EGuiText__StatusEffect_Disabled                                                  = 136,
	EGuiText__StatusEffect_ReducedDamage                                             = 137,
	EGuiText__StatusEffect_Slow                                                      = 138,
	EGuiText__Settings_Apply                                                         = 139,
	EGuiText__Settings_Back                                                          = 140,
	EGuiText__Settings_Graphics                                                      = 141,
	EGuiText__Settings_Audio                                                         = 142,
	EGuiText__Settings_Controls                                                      = 143,
	EGuiText__Settings_Game                                                          = 144,
	EGuiText__Settings_UI                                                            = 145,
	EGuiText__Settings_Subcat_Volume                                                 = 146,
	EGuiText__Settings_Fullscreen                                                    = 147,
	EGuiText__Settings_WindowedFullscreen                                            = 148,
	EGuiText__Settings_Windowed                                                      = 149,
	EGuiText__Settings_WindowMode                                                    = 150,
	EGuiText__Settings_Low                                                           = 151,
	EGuiText__Settings_Medium                                                        = 152,
	EGuiText__Settings_High                                                          = 153,
	EGuiText__Settings_VeryHigh                                                      = 154,
	EGuiText__Settings_ViewDistanceQuality                                           = 155,
	EGuiText__Settings_ShadowQuality                                                 = 156,
	EGuiText__Settings_AAQuality                                                     = 157,
	EGuiText__Settings_TextureQuality                                                = 158,
	EGuiText__Settings_PostProcessingQuality                                         = 159,
	EGuiText__Settings_FoliageQuality                                                = 160,
	EGuiText__Settings_HDR                                                           = 161,
	EGuiText__Settings_VisualEffectQuality                                           = 162,
	EGuiText__Settings_Subcat_Quality                                                = 163,
	EGuiText__Settings_Subcat_General                                                = 164,
	EGuiText__Settings_Resolution                                                    = 165,
	EGuiText__Settings_Subcat_Camera                                                 = 166,
	EGuiText__Settings_Reserved                                                      = 167,
	EGuiText__Settings_Subcat_Display                                                = 168,
	EGuiText__InputLabel_MoveSelection                                               = 169,
	EGuiText__InputLabel_Select                                                      = 170,
	EGuiText__InputLabel_Back                                                        = 171,
	EGuiText__InputLabel_PageLeft                                                    = 172,
	EGuiText__InputLabel_PageRight                                                   = 173,
	EGuiText__Settings_Defaults_Confirmation                                         = 176,
	EGuiText__Trap_Difficulty_Easy                                                   = 177,
	EGuiText__Trap_Difficulty_Medium                                                 = 178,
	EGuiText__Trap_Difficulty_Difficult                                              = 179,
	EGuiText__Trap_Difficulty_Extreme                                                = 180,
	EGuiText__Trap_Guide_Armed                                                       = 181,
	EGuiText__Trap_Guide_Disarmed                                                    = 182,
	EGuiText__Trap_Guide_Deactivated                                                 = 183,
	EGuiText__Conversation_PlayerName                                                = 185,
	EGuiText__Settings_On                                                            = 193,
	EGuiText__Settings_Off                                                           = 194,
	EGuiText__Conversation_Exit_Conversation                                         = 201,
	EGuiText__ContextMenu_Repair                                                     = 205,
	EGuiText__ContextMenu_Drop                                                       = 206,
	EGuiText__ContextMenu_Deconstruct                                                = 207,
	EGuiText__ContextMenu_Inspect                                                    = 208,
	EGuiText__ContextMenu_Unequip                                                    = 209,
	EGuiText__Input_Zero                                                             = 210,
	EGuiText__Input_One                                                              = 211,
	EGuiText__Input_Two                                                              = 212,
	EGuiText__Input_Three                                                            = 213,
	EGuiText__Input_Four                                                             = 214,
	EGuiText__Input_Five                                                             = 215,
	EGuiText__Input_Six                                                              = 216,
	EGuiText__Input_Seven                                                            = 217,
	EGuiText__Input_Eight                                                            = 218,
	EGuiText__Input_Nine                                                             = 219,
	EGuiText__StatusEffect_Burn                                                      = 220,
	EGuiText__StatusEffect_Bleed                                                     = 221,
	EGuiText__ContextMenu_MarkAsJunk                                                 = 222,
	EGuiText__ContextMenu_UnmarkAsJunk                                               = 223,
	EGuiText__LedgerNavigation_Quests                                                = 224,
	EGuiText__Ledger_Tab_Companion                                                   = 225,
	EGuiText__Inventory_ToggleComparison                                             = 226,
	EGuiText__Inventory_AddToJunk                                                    = 227,
	EGuiText__Inventory_Keep                                                         = 228,
	EGuiText__Inventory_Inspect                                                      = 229,
	EGuiText__CharacterTitleFighting                                                 = 232,
	EGuiText__CharacterTitleDialog                                                   = 233,
	EGuiText__CharacterTitleStealth                                                  = 234,
	EGuiText__CharacterTitleLeadership                                               = 235,
	EGuiText__CharacterNameFighting                                                  = 236,
	EGuiText__CharacterNameDialog                                                    = 237,
	EGuiText__CharacterNameStealth                                                   = 238,
	EGuiText__CharacterNameLeadership                                                = 239,
	EGuiText__CharacterBioFighting                                                   = 240,
	EGuiText__CharacterBioDialog                                                     = 241,
	EGuiText__CharacterBioStealth                                                    = 242,
	EGuiText__CharacterBioLeadership                                                 = 243,
	EGuiText__Item_Inspector                                                         = 244,
	EGuiText__WeaponStats_UnoccupiedMod                                              = 245,
	EGuiText__WeaponStat_Damage                                                      = 247,
	EGuiText__WeaponStat_Rof                                                         = 248,
	EGuiText__WeaponStat_MagSize                                                     = 249,
	EGuiText__WeaponStat_DPS                                                         = 250,
	EGuiText__WeaponStat_Accuracy                                                    = 251,
	EGuiText__WeaponStat_ReloadTime                                                  = 252,
	EGuiText__WeaponStat_Range                                                       = 253,
	EGuiText__WeaponStat_EquipTime                                                   = 254,
	EGuiText__WeaponStat_CritChanceBonus                                             = 255,
	EGuiText__WeaponStat_CritDamageBonus                                             = 256,
	EGuiText__WeaponStat_NoiseRange                                                  = 257,
	EGuiText__WeaponStat_Recoil                                                      = 258,
	EGuiText__WeaponStat_AimAccuracyBonus                                            = 259,
	EGuiText__WeaponStat_AimStaminaCost                                              = 260,
	EGuiText__WeaponStat_AmmoPerShot                                                 = 261,
	EGuiText__WeaponStat_PostArmorMultiplier                                         = 262,
	EGuiText__WeaponStat_OverchargeDurationBonus                                     = 263,
	EGuiText__WeaponStat_OverchargeTime                                              = 264,
	EGuiText__WeaponStat_AOESpreadRadius                                             = 265,
	EGuiText__Settings_ConversationSubtitle_Delayed                                  = 266,
	EGuiText__DT_Physical                                                            = 268,
	EGuiText__DT_Thermal                                                             = 269,
	EGuiText__DT_Energy                                                              = 270,
	EGuiText__DT_Shock                                                               = 271,
	EGuiText__DT_Corrosion                                                           = 272,
	EGuiText__DT_NRay                                                                = 273,
	EGuiText__WeaponStat_DamageType                                                  = 274,
	EGuiText__Unit_RoundsOverSeconds                                                 = 275,
	EGuiText__WeaponStat_MinMaxEffectiveRange                                        = 276,
	EGuiText__WeaponStat_EffectiveRange                                              = 277,
	EGuiText__Unit_Meters                                                            = 278,
	EGuiText__Unit_Percent                                                           = 279,
	EGuiText__Unit_Meters_Range                                                      = 280,
	EGuiText__Unit_Range                                                             = 281,
	EGuiText__WeaponStat_Ranged                                                      = 282,
	EGuiText__WeaponStat_Melee                                                       = 283,
	EGuiText__WeaponStat_Type                                                        = 284,
	EGuiText__WeaponStat_Class                                                       = 285,
	EGuiText__WeaponStat_SwayAngle                                                   = 291,
	EGuiText__WeaponStat_SpreadAngle                                                 = 292,
	EGuiText__Unit_PerSecond                                                         = 293,
	EGuiText__Unit_PercentPerSecond                                                  = 294,
	EGuiText__Unit_Degrees                                                           = 295,
	EGuiText__WeaponStat_AimSpreadReduction                                          = 296,
	EGuiText__WeaponStat_DPM                                                         = 297,
	EGuiText__ContextMenu_Use                                                        = 298,
	EGuiText__Unit_Seconds                                                           = 299,
	EGuiText__Health_Kit                                                             = 300,
	EGuiText__Quest_InProgress                                                       = 301,
	EGuiText__Quest_Completed                                                        = 302,
	EGuiText__Quest_Botched                                                          = 303,
	EGuiText__ContextMenu_Equip                                                      = 304,
	EGuiText__Quest_SetAsActive                                                      = 305,
	EGuiText__Quest_SortQuestType                                                    = 307,
	EGuiText__Quest_SortNewest                                                       = 308,
	EGuiText__Quest_SortOldest                                                       = 309,
	EGuiText__ResponseDumb                                                           = 314,
	EGuiText__ResponseScience                                                        = 315,
	EGuiText__Computer_Guide_Hack_Requirements                                       = 316,
	EGuiText__Door_Guide_Lockpick_Requirements                                       = 317,
	EGuiText__InteractionGuide_Lockpick_Hold                                         = 318,
	EGuiText__InteractionGuide_Hack_Hold                                             = 319,
	EGuiText__InteractionGuide_Disarm_Hold                                           = 320,
	EGuiText__Container_GenericName                                                  = 321,
	EGuiText__Door_Guide_Close                                                       = 328,
	EGuiText__InventoryCategory_Weapons                                              = 329,
	EGuiText__InventoryCategory_Armor                                                = 330,
	EGuiText__InventoryCategory_Consumables                                          = 331,
	EGuiText__InventoryCategory_Modifications                                        = 332,
	EGuiText__InventoryCategory_General                                              = 333,
	EGuiText__InventoryCategory_Quests                                               = 334,
	EGuiText__Settings_Ultra                                                         = 338,
	EGuiText__Guide_Unlock_With_Key                                                  = 342,
	EGuiText__Guide_Requires_Key                                                     = 343,
	EGuiText__Settings_MotionBlur                                                    = 344,
	EGuiText__Settings_None                                                          = 345,
	EGuiText__Settings_FXAA                                                          = 346,
	EGuiText__Settings_Temporal                                                      = 347,
	EGuiText__Settings_MSAA                                                          = 348,
	EGuiText__Settings_AAMethod                                                      = 349,
	EGuiText__Settings_MouseSensitivity                                              = 350,
	EGuiText__CharacterStats_Attributes                                              = 351,
	EGuiText__CharacterStats_Skills                                                  = 352,
	EGuiText__CharacterStats_Abilities                                               = 353,
	EGuiText__Skill_Desc_Block                                                       = 368,
	EGuiText__Skill_Desc_Determination                                               = 369,
	EGuiText__Skill_Desc_Dodge                                                       = 370,
	EGuiText__Skill_Desc_Hack                                                        = 371,
	EGuiText__Skill_Desc_HandGuns                                                    = 372,
	EGuiText__Skill_Desc_HeavyMelee                                                  = 373,
	EGuiText__Skill_Desc_HeavyWeapons                                                = 374,
	EGuiText__Skill_Desc_Inspiration                                                 = 375,
	EGuiText__Skill_Desc_Intimidate                                                  = 376,
	EGuiText__Skill_Desc_Lie                                                         = 377,
	EGuiText__Skill_Desc_LightMelee                                                  = 378,
	EGuiText__Skill_Desc_Lockpick                                                    = 379,
	EGuiText__Skill_Desc_LongGuns                                                    = 380,
	EGuiText__Skill_Desc_Medical                                                     = 381,
	EGuiText__Skill_Desc_Persuade                                                    = 382,
	EGuiText__Skill_Desc_Engineering                                                 = 383,
	EGuiText__Skill_Desc_Science                                                     = 384,
	EGuiText__Skill_Desc_Sneak                                                       = 385,
	EGuiText__LedgerNavigation_Character                                             = 386,
	EGuiText__GenericNotification_Quest                                              = 388,
	EGuiText__InteractionGuide_Lockpick_Impossible                                   = 389,
	EGuiText__InteractionGuide_Hack_Impossible                                       = 390,
	EGuiText__InteractionGuide_Trap_Impossible                                       = 391,
	EGuiText__InteractionGuide_Arm_Hold                                              = 392,
	EGuiText__PauseMenu_Dialog_ConfirmExit                                           = 393,
	EGuiText__PauseMenu_Dialog_ConfirmMainMenu                                       = 394,
	EGuiText__Location_EmeraldVale                                                   = 404,
	EGuiText__Door_Guide_Unbar                                                       = 405,
	EGuiText__CompanionCommand_Temp_Ability_One                                      = 406,
	EGuiText__CompanionCommand_Temp_Ability_Two                                      = 407,
	EGuiText__CompanionCommand_Temp_Ability_Three                                    = 408,
	EGuiText__CompanionCommand_Temp_Ability_Desc                                     = 409,
	EGuiText__CompanionCommand_MissingCompanion                                      = 410,
	EGuiText__CompanionCommand_Flank                                                 = 411,
	EGuiText__CompanionCommand_Attack                                                = 412,
	EGuiText__CompanionCommand_Suppress                                              = 413,
	EGuiText__Location_Monarch                                                       = 414,
	EGuiText__Location_Groundbreaker                                                 = 415,
	EGuiText__SaveLoad_ConfirmLoad                                                   = 418,
	EGuiText__SaveLoad_ConfirmSaveOverwrite                                          = 419,
	EGuiText__SaveLoad_LoadHeader                                                    = 420,
	EGuiText__SaveLoad_SaveHeader                                                    = 421,
	EGuiText__UseVendingMachine                                                      = 429,
	EGuiText__SaveLoad_ConfirmSaveDelete                                             = 432,
	EGuiText__SaveLoad_StandardSave                                                  = 433,
	EGuiText__SaveLoad_Quicksave                                                     = 434,
	EGuiText__SaveLoad_Autosave                                                      = 435,
	EGuiText__SaveLoad_PostgameSave                                                  = 436,
	EGuiText__Saveload_Playtime                                                      = 437,
	EGuiText__SaveLoad_SaveDate                                                      = 438,
	EGuiText__SaveLoad_SaveSubHeader                                                 = 439,
	EGuiText__SaveLoad__PlayerLevel                                                  = 442,
	EGuiText__SaveLoad_SaveTypeAndRegion                                             = 443,
	EGuiText__Computer_Guide_Unlock_Requirement                                      = 444,
	EGuiText__CharacterTab_Perks                                                     = 447,
	EGuiText__GenericNotification_SaveComplete                                       = 449,
	EGuiText__GenericNotification_SaveFailed                                         = 450,
	EGuiText__Skill_HandGuns                                                         = 451,
	EGuiText__Skill_LightMelee                                                       = 452,
	EGuiText__Skill_HeavyMelee                                                       = 453,
	EGuiText__Skill_LongGuns                                                         = 454,
	EGuiText__Skill_HeavyWeapons                                                     = 455,
	EGuiText__Skill_Dodge                                                            = 456,
	EGuiText__Skill_Block                                                            = 457,
	EGuiText__Skill_Persuade                                                         = 458,
	EGuiText__Skill_Lie                                                              = 459,
	EGuiText__Skill_Intimidate                                                       = 460,
	EGuiText__Skill_Sneak                                                            = 461,
	EGuiText__Skill_Hack                                                             = 462,
	EGuiText__Skill_Lockpick                                                         = 463,
	EGuiText__Skill_Medical                                                          = 464,
	EGuiText__Skill_Engineering                                                      = 465,
	EGuiText__Skill_Science                                                          = 466,
	EGuiText__Skill_Inspiration                                                      = 467,
	EGuiText__Skill_Determination                                                    = 468,
	EGuiText__Category_Melee                                                         = 469,
	EGuiText__Category_Ranged                                                        = 470,
	EGuiText__Category_Defense                                                       = 471,
	EGuiText__Category_Dialog                                                        = 472,
	EGuiText__Category_Stealth                                                       = 473,
	EGuiText__Category_Tech                                                          = 474,
	EGuiText__Category_Leadership                                                    = 475,
	EGuiText__CharacterStats_Attribute_Strength                                      = 526,
	EGuiText__CharacterStats_Attribute_Desc_Strength                                 = 527,
	EGuiText__CharacterStats_Attribute_Dexterity                                     = 528,
	EGuiText__CharacterStats_Attribute_Desc_Dexterity                                = 529,
	EGuiText__CharacterStats_Attribute_Endurance                                     = 530,
	EGuiText__CharacterStats_Attribute_Desc_Endurance                                = 531,
	EGuiText__CharacterStats_Attribute_Intelligence                                  = 532,
	EGuiText__CharacterStats_Attribute_Desc_Intelligence                             = 533,
	EGuiText__CharacterStats_Attribute_Perception                                    = 534,
	EGuiText__CharacterStats_Attribute_Desc_Perception                               = 535,
	EGuiText__CharacterStats_Attribute_Willpower                                     = 536,
	EGuiText__CharacterStats_Attribute_Charm                                         = 538,
	EGuiText__CharacterStats_Attribute_Desc_Charm                                    = 539,
	EGuiText__CharacterStats_Attribute_Wits                                          = 540,
	EGuiText__CharacterStats_Attribute_Temperament                                   = 542,
	EGuiText__CharacterStats_Attribute_Desc_Temperament                              = 543,
	EGuiText__Attribute_Category_Mind                                                = 544,
	EGuiText__Attribute_Category_Body                                                = 545,
	EGuiText__Attribute_Category_Personality                                         = 546,
	EGuiText__Attribute_Range_Minimum                                                = 547,
	EGuiText__Attribute_Range_BelowAverage                                           = 548,
	EGuiText__Attribute_Range_Average                                                = 549,
	EGuiText__Attribute_Range_Good                                                   = 550,
	EGuiText__Attribute_Range_High                                                   = 551,
	EGuiText__Attribute_Range_VeryHigh                                               = 552,
	EGuiText__Maximum                                                                = 553,
	EGuiText__WeaponStat_ProjectilesPerShot                                          = 557,
	EGuiText__WeaponStat_MaxChargeTime                                               = 558,
	EGuiText__CharacterStats_CategoryRefund_Warning                                  = 559,
	EGuiText__CharacterStats_SkillsPage_Leave_Warning                                = 560,
	EGuiText__InventoryCategory_Gadgets                                              = 562,
	EGuiText__WeaponStat_RoundsPerMin                                                = 563,
	EGuiText__ContextMenu_Compare                                                    = 566,
	EGuiText__ContextMenu_StopCompare                                                = 567,
	EGuiText__Unit_RoundsOverMinutes                                                 = 568,
	EGuiText__WeaponStat_Skill                                                       = 569,
	EGuiText__AmmoType_Handgun                                                       = 570,
	EGuiText__AmmoType_Rifle                                                         = 571,
	EGuiText__AmmoType_EnergyCell                                                    = 572,
	EGuiText__WeaponStat_AmmoType                                                    = 573,
	EGuiText__WeaponStat_SwingAttackRate                                             = 574,
	EGuiText__WeaponStat_PowerAttackRate                                             = 575,
	EGuiText__WeaponStat_SweepAttackRate                                             = 576,
	EGuiText__WeaponStat_FireMode                                                    = 577,
	EGuiText__FireMode_SemiAutomatic                                                 = 578,
	EGuiText__FireMode_Automatic                                                     = 579,
	EGuiText__FireMode_Burst                                                         = 580,
	EGuiText__FireMode_Charge                                                        = 581,
	EGuiText__WeaponStat_AOE                                                         = 582,
	EGuiText__ArmorStat_DT                                                           = 583,
	EGuiText__ArmorStat_DTP                                                          = 584,
	EGuiText__ArmorStat_DR                                                           = 585,
	EGuiText__ArmorStat_DRP                                                          = 586,
	EGuiText__ModSlot_MeleeGrip                                                      = 587,
	EGuiText__ModSlot_MeleeAttack                                                    = 588,
	EGuiText__ModSlot_Barrel                                                         = 589,
	EGuiText__ModSlot_Sight                                                          = 590,
	EGuiText__ModSlot_Magazine                                                       = 591,
	EGuiText__ModSlot_UnderBarrel                                                    = 592,
	EGuiText__Mod_DamageType                                                         = 593,
	EGuiText__Stat_Delta                                                             = 594,
	EGuiText__WeaponStat_SecondaryDamageType                                         = 595,
	EGuiText__ModAffix_Add                                                           = 598,
	EGuiText__Unit_AttacksOverSeconds                                                = 599,
	EGuiText__Location_Terra2                                                        = 600,
	EGuiText__CharacterStats_FinalAllocation_Confirmation                            = 601,
	EGuiText__WeaponStat_OnHitEffectChance                                           = 602,
	EGuiText__WeaponStat_OnHitEffect                                                 = 603,
	EGuiText__AmmoType_Needler                                                       = 604,
	EGuiText__WeaponStat_SkillRequirement                                            = 629,
	EGuiText__WeaponStat_DamageMultiProjectile                                       = 630,
	EGuiText__Unit_Count                                                             = 644,
	EGuiText__ItemStack_Count                                                        = 645,
	EGuiText__Body                                                                   = 646,
	EGuiText__Mind                                                                   = 647,
	EGuiText__Personality                                                            = 648,
	EGuiText__CharacterCreation_AtttributeGroupDesc_Body                             = 649,
	EGuiText__CharacterCreation_AtttributeGroupDesc_Mind                             = 650,
	EGuiText__CharacterCreation_AtttributeGroupDesc_Personality                      = 651,
	EGuiText__CharacterCreation_SkillsRemaining                                      = 652,
	EGuiText__RawItemStats                                                           = 654,
	EGuiText__Background01                                                           = 661,
	EGuiText__Background02                                                           = 662,
	EGuiText__Background03                                                           = 663,
	EGuiText__Background04                                                           = 664,
	EGuiText__Background05                                                           = 665,
	EGuiText__Background_Desc_Background01                                           = 666,
	EGuiText__Background_Desc_Background02                                           = 667,
	EGuiText__Background_Desc_Background03                                           = 668,
	EGuiText__Background_Desc_Background04                                           = 669,
	EGuiText__Background_Desc_Background05                                           = 670,
	EGuiText__UseWorkbench                                                           = 671,
	EGuiText__NoBackground                                                           = 672,
	EGuiText__CharacterCreation_FinalizationConfirmation                             = 673,
	EGuiText__Background_Desc_NoBackground                                           = 674,
	EGuiText__ContextMenu_Mod                                                        = 677,
	EGuiText__ContextMenu_InstallMod                                                 = 681,
	EGuiText__AttributeBonus_Strength_Maximum                                        = 686,
	EGuiText__AttributeBonus_Strength_VeryHigh                                       = 687,
	EGuiText__AttributeBonus_Strength_High                                           = 688,
	EGuiText__AttributeBonus_Strength_Good                                           = 689,
	EGuiText__AttributeBonus_Strength_Average                                        = 690,
	EGuiText__AttributeBonus_Strength_BelowAverage                                   = 691,
	EGuiText__AttributeBonus_Strength_Minimum                                        = 692,
	EGuiText__AttributeBonus_Dexterity_Maximum                                       = 693,
	EGuiText__AttributeBonus_Dexterity_VeryHigh                                      = 694,
	EGuiText__AttributeBonus_Dexterity_High                                          = 695,
	EGuiText__AttributeBonus_Dexterity_Good                                          = 696,
	EGuiText__AttributeBonus_Dexterity_Average                                       = 697,
	EGuiText__AttributeBonus_Dexterity_BelowAverage                                  = 698,
	EGuiText__AttributeBonus_Dexterity_Minimum                                       = 699,
	EGuiText__AttributeBonus_Endurance_Maximum                                       = 700,
	EGuiText__AttributeBonus_Endurance_VeryHigh                                      = 701,
	EGuiText__AttributeBonus_Endurance_High                                          = 702,
	EGuiText__AttributeBonus_Endurance_Good                                          = 703,
	EGuiText__AttributeBonus_Endurance_Average                                       = 704,
	EGuiText__AttributeBonus_Endurance_BelowAverage                                  = 705,
	EGuiText__AttributeBonus_Endurance_Minimum                                       = 706,
	EGuiText__AttributeBonus_Intelligence_Maximum                                    = 707,
	EGuiText__AttributeBonus_Intelligence_VeryHigh                                   = 708,
	EGuiText__AttributeBonus_Intelligence_High                                       = 709,
	EGuiText__AttributeBonus_Intelligence_Good                                       = 710,
	EGuiText__AttributeBonus_Intelligence_Average                                    = 711,
	EGuiText__AttributeBonus_Intelligence_BelowAverage                               = 712,
	EGuiText__AttributeBonus_Intelligence_Minimum                                    = 713,
	EGuiText__AttributeBonus_Perception_Maximum                                      = 714,
	EGuiText__AttributeBonus_Perception_VeryHigh                                     = 715,
	EGuiText__AttributeBonus_Perception_High                                         = 716,
	EGuiText__AttributeBonus_Perception_Good                                         = 717,
	EGuiText__AttributeBonus_Perception_Average                                      = 718,
	EGuiText__AttributeBonus_Perception_BelowAverage                                 = 719,
	EGuiText__AttributeBonus_Perception_Minimum                                      = 720,
	EGuiText__AttributeBonus_Willpower_Maximum                                       = 721,
	EGuiText__AttributeBonus_Charm_Maximum                                           = 728,
	EGuiText__AttributeBonus_Charm_VeryHigh                                          = 729,
	EGuiText__AttributeBonus_Charm_High                                              = 730,
	EGuiText__AttributeBonus_Charm_Good                                              = 731,
	EGuiText__AttributeBonus_Charm_Average                                           = 732,
	EGuiText__AttributeBonus_Charm_BelowAverage                                      = 733,
	EGuiText__AttributeBonus_Charm_Minimum                                           = 734,
	EGuiText__AttributeBonus_Wits_Maximum                                            = 735,
	EGuiText__AttributeBonus_Temperament_Maximum                                     = 742,
	EGuiText__AttributeBonus_Temperament_VeryHigh                                    = 743,
	EGuiText__AttributeBonus_Temperament_High                                        = 744,
	EGuiText__AttributeBonus_Temperament_Good                                        = 745,
	EGuiText__AttributeBonus_Temperament_Average                                     = 746,
	EGuiText__AttributeBonus_Temperament_BelowAverage                                = 747,
	EGuiText__AttributeBonus_Temperament_Minimum                                     = 748,
	EGuiText__Modifications_InstallConfirmation                                      = 750,
	EGuiText__Breakdown_Confirmation                                                 = 751,
	EGuiText__Repair_Confirm                                                         = 753,
	EGuiText__CharacterCreation_ReturnToMenu                                         = 785,
	EGuiText__AttributeBonus_Strength_Advanced                                       = 787,
	EGuiText__AttributeBonus_Dexterity_Advanced                                      = 788,
	EGuiText__AttributeBonus_Endurance_Advanced                                      = 789,
	EGuiText__AttributeBonus_Intelligence_Advanced                                   = 790,
	EGuiText__AttributeBonus_Perception_Advanced                                     = 791,
	EGuiText__AttributeBonus_Willpower_Advanced                                      = 792,
	EGuiText__AttributeBonus_Charm_Advanced                                          = 793,
	EGuiText__AttributeBonus_Wits_Advanced                                           = 794,
	EGuiText__AttributeBonus_Temperament_Advanced                                    = 795,
	EGuiText__X_Of_Y                                                                 = 819,
	EGuiText__Perks_PerksRemaining                                                   = 823,
	EGuiText__ArmorStat_DamageThreshold                                              = 824,
	EGuiText__ArmorStat_DamageThresholdPercentage                                    = 825,
	EGuiText__ArmorModSlot_Armoring                                                  = 827,
	EGuiText__ArmorModSlot_Dampening                                                 = 828,
	EGuiText__ArmorModSlot_Resistance                                                = 829,
	EGuiText__ArmorModSlot_Utility                                                   = 830,
	EGuiText__Dialog_Dumb                                                            = 889,
	EGuiText__Dialog_Prefix                                                          = 890,
	EGuiText__Requirements_Header                                                    = 891,
	EGuiText__Perk_Purchase_Requirements                                             = 892,
	EGuiText__Perk_Requirement_Skill                                                 = 893,
	EGuiText__CharacterStats_PerkUpgrade                                             = 899,
	EGuiText__Category_Desc_Ranged                                                   = 955,
	EGuiText__Category_Desc_Defense                                                  = 956,
	EGuiText__Category_Desc_Dialog                                                   = 957,
	EGuiText__Category_Desc_Stealth                                                  = 958,
	EGuiText__Category_Desc_Tech                                                     = 959,
	EGuiText__Category_Desc_Leadership                                               = 960,
	EGuiText__AttributeBonus_Strength_BAEffect                                       = 961,
	EGuiText__AttributeBonus_Dexterity_BAEffect                                      = 962,
	EGuiText__AttributeBonus_Endurance_BAEffect                                      = 963,
	EGuiText__AttributeBonus_Intelligence_BAEffect                                   = 964,
	EGuiText__AttributeBonus_Perception_BAEffect                                     = 965,
	EGuiText__AttributeBonus_Willpower_BAEffect                                      = 966,
	EGuiText__AttributeBonus_Charm_BAEffect                                          = 967,
	EGuiText__AttributeBonus_Wits_BAEffect                                           = 968,
	EGuiText__AttributeBonus_Temperament_BAEffect                                    = 969,
	EGuiText__FactionResponse_KOS                                                    = 1001,
	EGuiText__FactionResponse_Friendly                                               = 1002,
	EGuiText__FactionResponse_Neutral                                                = 1003,
	EGuiText__FactionResponse_VendorPriceIncrease                                    = 1004,
	EGuiText__FactionResponse_VendorPriceDecrease                                    = 1005,
	EGuiText__AmmoType_Light                                                         = 1028,
	EGuiText__AmmoType_Heavy                                                         = 1029,
	EGuiText__AmmoType_Energy                                                        = 1030,
	EGuiText__UseVendor                                                              = 1032,
	EGuiText__ContextMenu_Buy                                                        = 1038,
	EGuiText__ContextMenu_Pawn                                                       = 1039,
	EGuiText__ContextMenu_ClearBuy                                                   = 1041,
	EGuiText__ContextMenu_ClearPawn                                                  = 1042,
	EGuiText__Trade                                                                  = 1043,
	EGuiText__Vendor_TotalToPay                                                      = 1044,
	EGuiText__Vendor_TotalToEarn                                                     = 1045,
	EGuiText__Vendor_TotalEven                                                       = 1046,
	EGuiText__Vendor_VendorLacksCurrency                                             = 1047,
	EGuiText__Vendor_BuyerLacksCurrency                                              = 1048,
	EGuiText__Vendor_BuyerHasCurrency                                                = 1049,
	EGuiText__LedgerMap_AcceptFastTravel                                             = 1056,
	EGuiText__LedgerMap_FastTravel                                                   = 1062,
	EGuiText__WalkSpeed                                                              = 1072,
	EGuiText__CrouchSpeed                                                            = 1073,
	EGuiText__SprintSpeed                                                            = 1074,
	EGuiText__Unit_MetersOverSeconds                                                 = 1076,
	EGuiText__Unit_Ratio                                                             = 1077,
	EGuiText__Unit_HealthOverSeconds                                                 = 1079,
	EGuiText__Generic_Guide_Locked                                                   = 1090,
	EGuiText__Generic_Guide_Travel                                                   = 1091,
	EGuiText__OCL_Guide_Sealed                                                       = 1097,
	EGuiText__ContextMenu_Unload                                                     = 1139,
	EGuiText__GameDifficulty                                                         = 1143,
	EGuiText__GameDifficulty_Story                                                   = 1144,
	EGuiText__GameDifficulty_Normal                                                  = 1145,
	EGuiText__GameDifficulty_Hard                                                    = 1146,
	EGuiText__GameDifficulty_SuperNova                                               = 1147,
	EGuiText__Difficulty_Desc_Story                                                  = 1162,
	EGuiText__Difficulty_Desc_Normal                                                 = 1163,
	EGuiText__Difficulty_Desc_Hard                                                   = 1164,
	EGuiText__Difficulty_Desc_SuperNova                                              = 1165,
	EGuiText__ArmorPartsRequired                                                     = 1329,
	EGuiText__WeaponPartsRequired                                                    = 1330,
	EGuiText__ItemBreakdown_ArmorParts                                               = 1331,
	EGuiText__ItemBreakdown_WeaponParts                                              = 1332,
	EGuiText__Heal_Percent_Over_Time                                                 = 1441,
	EGuiText__RestrictedStock                                                        = 1442,
	EGuiText__RestrictedStockLocked                                                  = 1443,
	EGuiText__Skill_Category_Weapon_Melee                                            = 1449,
	EGuiText__Skill_Category_Weapon_Ranged                                           = 1450,
	EGuiText__Skill_Category_Defense                                                 = 1451,
	EGuiText__Skill_Category_Dialog                                                  = 1452,
	EGuiText__Skill_Category_Stealth                                                 = 1453,
	EGuiText__Skill_Category_Tech                                                    = 1454,
	EGuiText__Skill_Category_Leadership                                              = 1455,
	EGuiText__Skill_Unlock_Header                                                    = 1456,
	EGuiText__Stat_WalkSpeed                                                         = 1457,
	EGuiText__Skill_Tier1_Format                                                     = 1458,
	EGuiText__Skill_Tier2_Format                                                     = 1459,
	EGuiText__Skill_Tier3_Format                                                     = 1460,
	EGuiText__Weapon_OnCritHit                                                       = 1469,
	EGuiText__QuestLog_NoActiveQuest                                                 = 1470,
	EGuiText__ContextMenu_Swap                                                       = 1472,
	EGuiText__Location_Hephaestus                                                    = 1475,
	EGuiText__Location_Scylla                                                        = 1476,
	EGuiText__AbilityUnlock_WeakSpotHandguns                                         = 1511,
	EGuiText__AbilityUnlock_TTDSpellsHandguns                                        = 1514,
	EGuiText__AbilityUnlock_PowerAttackHeavyMelee                                    = 1531,
	EGuiText__AbilityUnlock_WeakSpotHeavyMelee                                       = 1533,
	EGuiText__AbilityUnlock_MeleeUnblockable                                         = 1535,
	EGuiText__AbilityUnlock_WeakSpotHeavyWeapons                                     = 1540,
	EGuiText__AbilityUnlock_TTDSpellsHeavyWeapons                                    = 1542,
	EGuiText__AbilityUnlock_CompanionAbilities                                       = 1548,
	EGuiText__AbilityUnlock_WeakSpotLongGuns                                         = 1573,
	EGuiText__AbilityUnlock_TTDSpellsLongGuns                                        = 1575,
	EGuiText__AbilityUnlock_PowerAttackLightMelee                                    = 1582,
	EGuiText__AbilityUnlock_WeakSpotLightMelee                                       = 1584,
	EGuiText__AbilityUnlock_MeleeReach                                               = 1586,
	EGuiText__WeaponStat_AmmoPerSecond                                               = 1605,
	EGuiText__Dialog_Bribe                                                           = 1606,
	EGuiText__UseBed                                                                 = 1611,
	EGuiText__Positive_Reputation_Gained                                             = 1616,
	EGuiText__Positive_Reputation_Lost                                               = 1617,
	EGuiText__Negative_Reputation_Gained                                             = 1620,
	EGuiText__Negative_Reputation_Lost                                               = 1621,
	EGuiText__Faction_Reputation_Changed                                             = 1623,
	EGuiText__Companion_Gained_Morale                                                = 1624,
	EGuiText__Companion_Lost_Morale                                                  = 1625,
	EGuiText__Companion_Joined                                                       = 1627,
	EGuiText__Companion_Left                                                         = 1628,
	EGuiText__XP_Enemy_Killed                                                        = 1631,
	EGuiText__XP_Point_of_Interest                                                   = 1632,
	EGuiText__XP_Skill_Used                                                          = 1633,
	EGuiText__XP_Collectible_Found                                                   = 1634,
	EGuiText__XP_Generic                                                             = 1635,
	EGuiText__Item_Gained                                                            = 1647,
	EGuiText__Item_Lost                                                              = 1648,
	EGuiText__PerkSurcharges_Percent                                                 = 1765,
	EGuiText__PerkBuyingPrice_Percent                                                = 1766,
	EGuiText__Duration_S                                                             = 1801,
	EGuiText__Duration_M_S                                                           = 1802,
	EGuiText__Duration_M                                                             = 1803,
	EGuiText__Duration_H                                                             = 1804,
	EGuiText__Duration_H_M                                                           = 1805,
	EGuiText__DT_All                                                                 = 1811,
	EGuiText__AbilityUnlock_Dodge                                                    = 1813,
	EGuiText__AbilityUnlock_Block                                                    = 1816,
	EGuiText__AbilityUnlock_Pickpocket                                               = 1819,
	EGuiText__AbilityUnlock_HackRobots                                               = 1820,
	EGuiText__AbilityUnlock_Medkit1                                                  = 1821,
	EGuiText__AbilityUnlock_Medkit2                                                  = 1822,
	EGuiText__AbilityUnlock_Medkit3                                                  = 1823,
	EGuiText__DT_Abbreviation                                                        = 1829,
	EGuiText__Rank_X_Colon                                                           = 1834,
	EGuiText__Heal_Over_Duration                                                     = 1837,
	EGuiText__Distance_Meters                                                        = 1843,
	EGuiText__UI_Cooldown                                                            = 1844,
	EGuiText__UI_Create_Item_Format                                                  = 1854,
	EGuiText__Location_Roseway                                                       = 1903,
	EGuiText__UI_Passive_Bonuses                                                     = 1907,
	EGuiText__RestrictedArea                                                         = 1966,
	EGuiText__FastTravel_InCombat                                                    = 1972,
	EGuiText__FastTravel_InConversation                                              = 1973,
	EGuiText__FastTravel_Hazard                                                      = 1974,
	EGuiText__FastTravel_Encumbered                                                  = 1975,
	EGuiText__FastTravel_Interior                                                    = 1976,
	EGuiText__FastTravel_Crime                                                       = 1977,
	EGuiText__FastTravel_General                                                     = 1978,
	EGuiText__FastTravel_NearHostiles                                                = 1979,
	EGuiText__NotAllowedInCombat                                                     = 1988,
	EGuiText__FastTravelLocationDiscovered                                           = 1989,
	EGuiText__Bribe_Prefix                                                           = 1993,
	EGuiText__Companion_Unlocked                                                     = 1994,
	EGuiText__Skills_Level_X                                                         = 2012,
	EGuiText__UseChair                                                               = 2031,
	EGuiText__SystemMap_SelectDestination                                            = 2073,
	EGuiText__SystemMap_TravelTo_X                                                   = 2074,
	EGuiText__CharacterCreation_NameEntry                                            = 2075,
	EGuiText__Location_Tartarus                                                      = 2085,
	EGuiText__Companion_Follow_Close                                                 = 2093,
	EGuiText__Companion_Follow_Medium                                                = 2094,
	EGuiText__Companion_Follow_Far                                                   = 2095,
	EGuiText__Companion_WeaponPref_Melee                                             = 2096,
	EGuiText__Companion_WeaponPref_Mixed                                             = 2097,
	EGuiText__Companion_WeaponPref_Ranged                                            = 2098,
	EGuiText__Companion_Combat_Defensive                                             = 2099,
	EGuiText__Companion_Combat_Offensive                                             = 2100,
	EGuiText__CharacterCreation_NamePrompt                                           = 2101,
	EGuiText__SurvivalMode_Desc                                                      = 2110,
	EGuiText__Input_X_Hold                                                           = 2145,
	EGuiText__Hold                                                                   = 2146,
	EGuiText__AbilityUnlock_Acrophobia                                               = 2148,
	EGuiText__ShipTerminal                                                           = 2151,
	EGuiText__Companion_Combat_Passive                                               = 2152,
	EGuiText__Companion_PerksPage_Revert_Warning                                     = 2153,
	EGuiText__FastTravel_Exhausted                                                   = 2157,
	EGuiText__FastTravel_Starving                                                    = 2158,
	EGuiText__FastTravel_Dehydrated                                                  = 2159,
	EGuiText__FastTravel_ShipRestrict                                                = 2160,
	EGuiText__ItemCondition                                                          = 2173,
	EGuiText__ItemStats_AmmoTypeEmbedded                                             = 2174,
	EGuiText__ArmorType_Heavy                                                        = 2176,
	EGuiText__ArmorType_Medium                                                       = 2177,
	EGuiText__ArmorType_Light                                                        = 2178,
	EGuiText__ArmorType_Header                                                       = 2179,
	EGuiText__StatBonus_SkillBonus                                                   = 2180,
	EGuiText__SpacersChoice_Flaw                                                     = 2181,
	EGuiText__Reward_Perk_Point                                                      = 2182,
	EGuiText__Name_Exclamation                                                       = 2183,
	EGuiText__CharacterTab_Skills                                                    = 2190,
	EGuiText__Ledger_Level_Up_Offer                                                  = 2192,
	EGuiText__Flaw_Effects                                                           = 2193,
	EGuiText__Skill_Tier4_Format                                                     = 2200,
	EGuiText__Skill_Tier5_Format                                                     = 2201,
	EGuiText__AbilityUnlock_SneakAttack                                              = 2215,
	EGuiText__AbilityUnlock_LockpickPreview                                          = 2217,
	EGuiText__Item_Salvaged_With_Count                                               = 2220,
	EGuiText__Item_Salvaged                                                          = 2221,
	EGuiText__AbilityUnlock_SellToMachine                                            = 2225,
	EGuiText__AbilityUnlock_FieldRepair                                              = 2237,
	EGuiText__Optional_Item_Name_X                                                   = 2244,
	EGuiText__Value_X_Seconds                                                        = 2245,
	EGuiText__AbilityUnlock_Leap                                                     = 2249,
	EGuiText__SaveLoad_SaveUnavailable                                               = 2254,
	EGuiText__AbilityUnlock_TTDSpellsLightMelee                                      = 2262,
	EGuiText__AbilityUnlock_TTDSpellsHeavyMelee                                      = 2263,
	EGuiText__AbilityUnlock_FastTravelWhileEncumbered                                = 2266,
	EGuiText__PerkAdditionalAmmoStock_Percent                                        = 2280,
	EGuiText__PerkAdditionalConsumableStock_Percent                                  = 2281,
	EGuiText__Perk_Tier_Header                                                       = 2283,
	EGuiText__Prompt_Steal_Item                                                      = 2284,
	EGuiText__Category_Desc_Melee                                                    = 2314,
	EGuiText__SaveLoad_XboxActiveUserSignedOutInGame                                 = 2348,
	EGuiText__SaveLoad_XboxActiveUserSignedOutTitle                                  = 2349,
	EGuiText__SaveLoad_XboxActiveUserSignedOutMainMenu                               = 2353,
	EGuiText__AbilityUnlock_Tinkering                                                = 2354,
	EGuiText__FlavorAptitude                                                         = 2356,
	EGuiText__FlavorCharacterGeneric                                                 = 2360,
	EGuiText__FlavorCharacterLevelUp                                                 = 2361,
	EGuiText__FlavorSkills                                                           = 2362,
	EGuiText__FlavorPerks                                                            = 2363,
	EGuiText__FlavorCharacterDetails                                                 = 2364,
	EGuiText__FlavorCharacterReputation                                              = 2365,
	EGuiText__FlavorInventoryGeneric                                                 = 2366,
	EGuiText__FlavorInventoryBucket                                                  = 2367,
	EGuiText__FlavorQuestsGeneric                                                    = 2368,
	EGuiText__FlavorMapGeneric                                                       = 2369,
	EGuiText__FlavorCompanionsGeneric                                                = 2370,
	EGuiText__FlavorCompanionsInventoryHover                                         = 2371,
	EGuiText__FlavorCompanionsStatsHover                                             = 2372,
	EGuiText__FlavorCompanionsBehaviorHover                                          = 2373,
	EGuiText__FlavorCompanionPerksHover                                              = 2374,
	EGuiText__FlavorWorkbenchGeneric                                                 = 2375,
	EGuiText__FlavorWorkbenchRepairHover                                             = 2376,
	EGuiText__FlavorWorkbenchBreakdownHover                                          = 2377,
	EGuiText__FlavorWorkbenchJunkHover                                               = 2378,
	EGuiText__FlavorWorkbenchModGeneric                                              = 2379,
	EGuiText__FlavorWorkbenchBreakdownHover765                                       = 2380,
	EGuiText__FlavorCCAttributes                                                     = 2381,
	EGuiText__FlavorCCAppearance                                                     = 2382,
	EGuiText__FlavorCCName                                                           = 2383,
	EGuiText__FlavorCCReview                                                         = 2384,
	EGuiText__FlavorPartySelection                                                   = 2385,
	EGuiText__FlavorCCAtrributesMajor                                                = 2386,
	EGuiText__FlavorCCAttributesMinor                                                = 2387,
	EGuiText__FlavorCCSkills                                                         = 2388,
	EGuiText__FlavorInventoryCategoryWeapons                                         = 2396,
	EGuiText__FlavorInventoryCategoryArmor                                           = 2397,
	EGuiText__FlavorInventoryCategoryConsumables                                     = 2398,
	EGuiText__FlavorInventoryCategoryModifications                                   = 2399,
	EGuiText__FlavorInventoryCategoryGeneral                                         = 2400,
	EGuiText__FlavorInventoryCategoryQuests                                          = 2401,
	EGuiText__FlavorCompanionsPerksGeneric                                           = 2404,
	EGuiText__FlavorCompanionsPerksAvailable                                         = 2405,
	EGuiText__FlavorCompanionsInventoryRanged                                        = 2406,
	EGuiText__FlavorCompanionsInventoryMelee                                         = 2407,
	EGuiText__FlavorCompanionsInventoryHelmet                                        = 2408,
	EGuiText__FlavorCompanionsInventoryArmor                                         = 2409,
	EGuiText__FlavorWorkbenchBreakDownGeneric                                        = 2419,
	EGuiText__FlavorWorkbenchRepairGeneric                                           = 2420,
	EGuiText__Archive                                                                = 2434,
	EGuiText__CharacterStats_Respec                                                  = 2455,
	EGuiText__CharacterStats_Respec_Dialog1                                          = 2456,
	EGuiText__CharacterStats_Respec_Dialog2                                          = 2457,
	EGuiText__QualityLevel                                                           = 2460,
	EGuiText__Settings_Custom                                                        = 2461,
	EGuiText__SavingWidget_Saving                                                    = 2483,
	EGuiText__X_Number_Uses                                                          = 2485,
	EGuiText__Disguise_RequiresKey                                                   = 2489,
	EGuiText__Disguise_Failed                                                        = 2490,
	EGuiText__Disguise_DialogueDifficulty                                            = 2491,
	EGuiText__X_Number                                                               = 2492,
	EGuiText__Companion_WeaponPref_LongRange                                         = 2493,
	EGuiText__Companion_WeaponPref_CloseRange                                        = 2494,
	EGuiText__Scanner_EnemyLevel                                                     = 2501,
	EGuiText__X_Percent_Discount                                                     = 2506,
	EGuiText__X_Percent_Surcharge                                                    = 2508,
	EGuiText__Workbench_TinkerItem                                                   = 2509,
	EGuiText__Workbench_TinkerWeaponBase                                             = 2510,
	EGuiText__Workbench_TinkerArmorBase                                              = 2511,
	EGuiText__ItemModding_ItemNameDesc                                               = 2522,
	EGuiText__RepairAllEquipped_X_Bits                                               = 2523,
	EGuiText__RepairAllEquipped_X_WeaponParts                                        = 2524,
	EGuiText__RepairAllEquipped_X_ArmorParts                                         = 2525,
	EGuiText__Quest_SortLocation                                                     = 2530,
	EGuiText__Quest_SortDifficulty                                                   = 2531,
	EGuiText__Quest_SortAlphabetical                                                 = 2533,
	EGuiText__Inventory_StackSplitDrop                                               = 2534,
	EGuiText__Inventory_StackSplitJunk                                               = 2535,
	EGuiText__Inventory_StackSplitUnjunk                                             = 2536,
	EGuiText__QuestType_Main                                                         = 2537,
	EGuiText__QuestType_Side                                                         = 2538,
	EGuiText__QuestType_Faction                                                      = 2539,
	EGuiText__QuestType_Companion                                                    = 2540,
	EGuiText__QuestType_Task                                                         = 2541,
	EGuiText__Location_Space                                                         = 2542,
	EGuiText__QuestDifficulty_Easy                                                   = 2543,
	EGuiText__QuestDifficulty_Normal                                                 = 2544,
	EGuiText__QuestDifficulty_Hard                                                   = 2545,
	EGuiText__QuestDifficulty_Deadly                                                 = 2546,
	EGuiText__Sell_X                                                                 = 2547,
	EGuiText__Buy_X                                                                  = 2548,
	EGuiText__Clear_Cart                                                             = 2550,
	EGuiText__SaveLoad_LoadSubHeader                                                 = 2551,
	EGuiText__SaveLoad_SaveFlavorText                                                = 2552,
	EGuiText__SaveLoad_LoadFlavorText                                                = 2553,
	EGuiText__VendorStackSplitBuy                                                    = 2566,
	EGuiText__VendorStackSplitUnbuy                                                  = 2567,
	EGuiText__VendorStackSplitSell                                                   = 2568,
	EGuiText__VendorStackSplitUnsell                                                 = 2569,
	EGuiText__LevelUp_NewLevel                                                       = 2577,
	EGuiText__PointsAvailable_Skills                                                 = 2578,
	EGuiText__PointOfInterestDiscovered                                              = 2592,
	EGuiText__XP_Fast_Travel                                                         = 2593,
	EGuiText__Weapon_Parts_Required_Value                                            = 2595,
	EGuiText__Armor_Parts_Required_Value                                             = 2596,
	EGuiText__FlavorInventoryCategoryJunk                                            = 2600,
	EGuiText__SaveLoad_PointOfNoReturnDelete                                         = 2601,
	EGuiText__UI_Empty                                                               = 2603,
	EGuiText__Unicode_Infinity                                                       = 2605,
	EGuiText__Warning_PointOfNoReturn_Phineas                                        = 2608,
	EGuiText__SettingName_PseudoGod                                                  = 2609,
	EGuiText__SettingCategory_Cheat                                                  = 2610,
	EGuiText__SettingName_God                                                        = 2611,
	EGuiText__SettingName_InfiniteAmmo                                               = 2612,
	EGuiText__SettingCategory_Movement                                               = 2613,
	EGuiText__SettingCategory_Attributes                                             = 2614,
	EGuiText__SettingCategory_Skills                                                 = 2615,
	EGuiText__SaveLoad_PointOfNoReturn                                               = 2616,
	EGuiText__Unknown                                                                = 2629,
	EGuiText__CC_ChangeAttributeValue                                                = 2645,
	EGuiText__CharacterCreation_AttributePoints_Remaining                            = 2647,
	EGuiText__AbilityUnlock_PowerAttackScience                                       = 2648,
	EGuiText__EyeHorizontal                                                          = 2665,
	EGuiText__MouthVertical                                                          = 2675,
	EGuiText__Missing                                                                = 2683,
	EGuiText__Skills_AdjustedValue                                                   = 2690,
	EGuiText__Value_Hyphen_Locked                                                    = 2699,
	EGuiText__MainMenu_Keyboard_Prompt                                               = 2715,
	EGuiText__Perk_Purchased                                                         = 2719,
	EGuiText__Perk_Unlocked                                                          = 2720,
	EGuiText__Perk_Marked                                                            = 2721,
	EGuiText__CharacterCustomization_PlayerAge                                       = 2722,
	EGuiText__SaveLoad_XboxActiveUserSignedOut                                       = 2876,
	EGuiText__SaveLoad_XboxActiveUserDisconnected                                    = 2877,
	EGuiText__Item_on_Display                                                        = 2969,
	EGuiText__LedgerMap_LocalMapName                                                 = 2982,
	EGuiText__Lasts_Duration                                                         = 3002,
	EGuiText__OneYear                                                                = 3003,
	EGuiText__XYears                                                                 = 3004,
	EGuiText__OneMonth                                                               = 3005,
	EGuiText__XMonths                                                                = 3006,
	EGuiText__OneWeek                                                                = 3007,
	EGuiText__XWeeks                                                                 = 3008,
	EGuiText__OneDay                                                                 = 3009,
	EGuiText__XDays                                                                  = 3010,
	EGuiText__OneHour                                                                = 3011,
	EGuiText__XHours                                                                 = 3012,
	EGuiText__OneMinute                                                              = 3013,
	EGuiText__XMinutes                                                               = 3014,
	EGuiText__OneSecond                                                              = 3015,
	EGuiText__XSeconds                                                               = 3016,
	EGuiText__ValueCommaSpace                                                        = 3017,
	EGuiText__Vendor_Confirm                                                         = 3018,
	EGuiText__NameColonText                                                          = 3033,
	EGuiText__Journal_Codex                                                          = 3102,
	EGuiText__RespecificationMachine                                                 = 3108,
	EGuiText__MainMenu_Gamepad_Prompt                                                = 3142,
	EGuiText__Inventory_InCombat                                                     = 3146,
	EGuiText__SelectTravelDestinationOn_X                                            = 3164,
	EGuiText__Disguise_RequiresID                                                    = 3170,
	EGuiText__SavedLoadRestriction_LoggingOut                                        = 3172,
	EGuiText__SavedLoadRestriction_PlatformStorageInacessible                        = 3173,
	EGuiText__SavedLoadRestriction_PlatformSaveSystemNull                            = 3174,
	EGuiText__SavedLoadRestriction_DeviceFull                                        = 3175,
	EGuiText__SavedLoadRestriction_Unsupported                                       = 3176,
	EGuiText__SavedLoadRestriction_GenericFail                                       = 3177,
	EGuiText__Supernova_DifficultyChange                                             = 3179,
	EGuiText__DownloadComplete_Percent_X                                             = 3181,
	EGuiText__Disguise_RequiresShroud                                                = 3183,
	EGuiText__Key_CannotBeRebound                                                    = 3189,
	EGuiText__Key_CannotBeAssignedTo_Action                                          = 3190,
	EGuiText__Key_AssignedTo_Action_NewAction                                        = 3191,
	EGuiText__MissingKeybinds_Actions                                                = 3192,
	EGuiText__AutosaveSplash_PS4                                                     = 3197,
	EGuiText__AutosaveSplash_Xbox                                                    = 3198,
	EGuiText__AutosaveSplash_PC                                                      = 3199,
	EGuiText__AutosaveSplash_PS5                                                     = 3200,
	EGuiText__Keybinds_Rebind                                                        = 3239,
	EGuiText__Keybindings_Attack                                                     = 3279,
	EGuiText__Keybindings_Reload                                                     = 3284,
	EGuiText__Keybindings_CompanionMove                                              = 3287,
	EGuiText__Righty                                                                 = 3317,
	EGuiText__Lefty                                                                  = 3318,
	EGuiText__Normal                                                                 = 3319,
	EGuiText__Inverted                                                               = 3320,
	EGuiText__Hold_X                                                                 = 3329,
	EGuiText__Click_X                                                                = 3330,
	EGuiText__Move                                                                   = 3332,
	EGuiText__Look                                                                   = 3337,
	EGuiText__CodexCategory_Symbols                                                  = 3339,
	EGuiText__CombatOnly                                                             = 3348,
	EGuiText__SystemMapLocationUnlocked                                              = 3355,
	EGuiText__Items_Gained                                                           = 3358,
	EGuiText__Items_Lost                                                             = 3359,
	EGuiText__Repair_X                                                               = 3378,
	EGuiText__ArmorType_Flesh                                                        = 3379,
	EGuiText__GamepadNotAllowedWarning                                               = 3381,
	EGuiText__RestrictedStockUnlocked                                                = 3382,
	EGuiText__NowAvailable                                                           = 3384,
	EGuiText__Breakdown_EngineeringLevel                                             = 3387,
	EGuiText__Breakdown_BasicModChance                                               = 3388,
	EGuiText__Breakdown_RareModChance                                                = 3389,
	EGuiText__Breakdown_PopupTitle                                                   = 3390,
	EGuiText__ModifyNoRecovery                                                       = 3393,
	EGuiText__ModifyItemWithMod                                                      = 3394,
	EGuiText__CurrentMod_MeleeGrip                                                   = 3396,
	EGuiText__NewMod_MeleeGrip                                                       = 3397,
	EGuiText__CurrentMod_MeleeAttack                                                 = 3398,
	EGuiText__NewMod_MeleeAttack                                                     = 3399,
	EGuiText__CurrentMod_Barrel                                                      = 3400,
	EGuiText__NewMod_Barrel                                                          = 3401,
	EGuiText__CurrentMod_Magazine                                                    = 3402,
	EGuiText__NewMod_Magazine                                                        = 3403,
	EGuiText__CurrentMod_Sight                                                       = 3404,
	EGuiText__NewMod_Sight                                                           = 3405,
	EGuiText__CurrentMod_Armoring                                                    = 3406,
	EGuiText__NewMod_Armoring                                                        = 3407,
	EGuiText__CurrentMod_Resistance                                                  = 3408,
	EGuiText__NewMod_Resistance                                                      = 3409,
	EGuiText__CurrentMod_Dampening                                                   = 3410,
	EGuiText__NewMod_Dampening                                                       = 3411,
	EGuiText__CurrentMod_Utility                                                     = 3412,
	EGuiText__NewMod_Utility                                                         = 3413,
	EGuiText__YourBits                                                               = 3423,
	EGuiText__SaveLoad_BeforeSkippingHope                                            = 3424,
	EGuiText__YourWeaponParts                                                        = 3433,
	EGuiText__YourArmorParts                                                         = 3434,
	EGuiText__ItemSorting_Alphabetical                                               = 3436,
	EGuiText__ItemSorting_Value                                                      = 3437,
	EGuiText__ItemSorting_Weight                                                     = 3438,
	EGuiText__ItemSorting_ValueToWeight                                              = 3439,
	EGuiText__ItemSorting_DamageRating                                               = 3440,
	EGuiText__ItemSorting_ArmorRating                                                = 3441,
	EGuiText__ItemSorting_WeaponType                                                 = 3442,
	EGuiText__ItemSorting_ArmorType                                                  = 3443,
	EGuiText__ItemSorting_RangedMeleeArmorMod                                        = 3445,
	EGuiText__Breakdown_ItemCount                                                    = 3449,
	EGuiText__EquipmentMods_ModCount                                                 = 3496,
	EGuiText__AlreadyInstalledMod                                                    = 3497,
	EGuiText__TinkerMaxLevelReachedPostDLC                                           = 3498,
	EGuiText__TinkerSkillLocked                                                      = 3499,
	EGuiText__SaveLoad_PS4ActiveUserDisconnected                                     = 3503,
	EGuiText__MainMenu_Gamepad_PS4_Prompt                                            = 3531,
	EGuiText__PointsAvailable_Perks                                                  = 3536,
	EGuiText__Perk_Cost                                                              = 3537,
	EGuiText__PointsAvailable_SkillPerks                                             = 3538,
	EGuiText__Language_English                                                       = 3570,
	EGuiText__Language_French                                                        = 3571,
	EGuiText__Language_Italian                                                       = 3572,
	EGuiText__Language_German                                                        = 3573,
	EGuiText__Language_Spanish                                                       = 3574,
	EGuiText__Language_Portuguese                                                    = 3575,
	EGuiText__Language_Russian                                                       = 3576,
	EGuiText__Language_Korean                                                        = 3577,
	EGuiText__Language_Japanese                                                      = 3578,
	EGuiText__Language_Chinese                                                       = 3579,
	EGuiText__Language_Polish                                                        = 3580,
	EGuiText__Minimal                                                                = 3622,
	EGuiText__Always                                                                 = 3627,
	EGuiText__OnlyWhenClose                                                          = 3628,
	EGuiText__Never                                                                  = 3629,
	EGuiText__TimedFade                                                              = 3646,
	EGuiText__FPSIndicator                                                           = 3668,
	EGuiText__FPSIndicatorDescription                                                = 3669,
	EGuiText__TopLeft                                                                = 3670,
	EGuiText__TopRight                                                               = 3671,
	EGuiText__BottomLeft                                                             = 3672,
	EGuiText__BottomRight                                                            = 3673,
	EGuiText__AbilityUnlock_TinkerScienceCostCap                                     = 3789,
	EGuiText__Vertical                                                               = 3804,
	EGuiText__Horizontal                                                             = 3805,
	EGuiText__Simplified                                                             = 3809,
	EGuiText__SellToVendingMachines_Locked                                           = 3810,
	EGuiText__Conversation_Trade                                                     = 3814,
	EGuiText__Attribute_Range_Maximum                                                = 3822,
	EGuiText__Setting_LanguageDisabled                                               = 3839,
	EGuiText__Keybinds_UnbindKey                                                     = 3840,
	EGuiText__Keybinds_ResetDefault                                                  = 3841,
	EGuiText__Keybinds_CurrentlyBound                                                = 3842,
	EGuiText__Keybinds_CurrentBinding                                                = 3843,
	EGuiText__Keybinds_CurrentlyUnbound                                              = 3844,
	EGuiText__DetectGraphicsSettings                                                 = 3845,
	EGuiText__Thirty                                                                 = 3846,
	EGuiText__Sixty                                                                  = 3847,
	EGuiText__OneHundredTwenty                                                       = 3848,
	EGuiText__OneHundredFourtyFour                                                   = 3849,
	EGuiText__OneHundredSixty                                                        = 3850,
	EGuiText__OneHundredSixtyFive                                                    = 3851,
	EGuiText__OneHundredEighty                                                       = 3852,
	EGuiText__TwoHundred                                                             = 3853,
	EGuiText__TwoHundredFourty                                                       = 3854,
	EGuiText__Unlimited                                                              = 3855,
	EGuiText__CompanionCommand_Ability_One                                           = 3864,
	EGuiText__CompanionCommand_Ability_Two                                           = 3865,
	EGuiText__ModifyReplaceWarning                                                   = 3873,
	EGuiText__RepairAllEquipped_X_Parts                                              = 3875,
	EGuiText__Inventory_SamWarning                                                   = 3876,
	EGuiText__InventorySlot_BodyArmor                                                = 3877,
	EGuiText__InventorySlot_Helmet                                                   = 3878,
	EGuiText__Companion_Disguise                                                     = 3879,
	EGuiText__Perk_Purchase_Requirements1039                                         = 3880,
	EGuiText__Flavor_CompanionsInventory_Hover                                       = 3881,
	EGuiText__SaveLoad_Maximum_Saves                                                 = 3882,
	EGuiText__Keybindings_Unbind                                                     = 3884,
	EGuiText__Keybindings_Bind                                                       = 3887,
	EGuiText__Keybindings_Rebind                                                     = 3888,
	EGuiText__CompanionPerkUnlocked                                                  = 3890,
	EGuiText__SaveLoad_LeavingEV                                                     = 3891,
	EGuiText__SaveLoad_LeavingEVDescription                                          = 3892,
	EGuiText__SaveLoad_Sorting_Date                                                  = 3899,
	EGuiText__SaveLoad_Sorting_PlayTime                                              = 3900,
	EGuiText__SaveLoad_Sorting_Location                                              = 3901,
	EGuiText__SaveLoad_Sorting_Level                                                 = 3902,
	EGuiText__SaveLoad_SaveConfirm                                                   = 3903,
	EGuiText__SaveLoad_SaveDoubleConfirm                                             = 3904,
	EGuiText__Cannot_Rebind                                                          = 3905,
	EGuiText__Menus_Cannot_Rebind                                                    = 3906,
	EGuiText__PartySelect_Encumbered                                                 = 3907,
	EGuiText__PartySelect_WeightAllowance                                            = 3908,
	EGuiText__Settings_ApplyNow                                                      = 3912,
	EGuiText__Settings_RevertWarn                                                    = 3913,
	EGuiText__NameBlacklisted                                                        = 3914,
	EGuiText__Appearance_Warn                                                        = 3920,
	EGuiText__NotSignedIn_Xbox                                                       = 3921,
	EGuiText__Settings_LanguageSelect                                                = 3922,
	EGuiText__Perk_Confirmation                                                      = 3923,
	EGuiText__Map_Active                                                             = 3994,
	EGuiText__Map_Inactive                                                           = 3995,
	EGuiText__Map_Toggle_Inactive                                                    = 3996,
	EGuiText__Pristine                                                               = 3997,
	EGuiText__Settings_AimingOnly                                                    = 4001,
	EGuiText__AndMore_Ellipsis                                                       = 4038,
	EGuiText__InactiveQuests                                                         = 4039,
	EGuiText__ShowInactiveQuests                                                     = 4040,
	EGuiText__HideInactiveQuests                                                     = 4041,
	EGuiText__MultipleQuests                                                         = 4042,
	EGuiText__Format_DotSpaceEntry                                                   = 4043,
	EGuiText__DoubleClick_x                                                          = 4048,
	EGuiText__IdleCameraAvailable                                                    = 4064,
	EGuiText__IdleCameraUnavailable                                                  = 4067,
	EGuiText__AdjustedSkillValue                                                     = 4093,
	EGuiText__Location_Gorgon                                                        = 4094,
	EGuiText__UsePet                                                                 = 4105,
	EGuiText__Play                                                                   = 4181,
	EGuiText__Stop                                                                   = 4182,
	EGuiText__AudioLog                                                               = 4183,
	EGuiText__AudioLogs                                                              = 4184,
	EGuiText__AudioLogs_BaseGame                                                     = 4185,
	EGuiText__AudioLogs_INX01                                                        = 4186,
	EGuiText__AudioLogs_INX02                                                        = 4187,
	EGuiText__INX01_Name                                                             = 4216,
	EGuiText__INX02_Name                                                             = 4217,
	EGuiText__NowAvailableExclamation                                                = 4218,
	EGuiText__ComingSoon                                                             = 4219,
	EGuiText__OwnedUninstalled                                                       = 4220,
	EGuiText__Installed                                                              = 4221,
	EGuiText__Skill_Tier6_Format                                                     = 4228,
	EGuiText__AbilityUnlock_InstantReloadHeavyOnEmpty                                = 4232,
	EGuiText__DT_Cold                                                                = 4273,
	EGuiText__PerkSuppressed                                                         = 4309,
	EGuiText__PerkUnsuppressed                                                       = 4310,
	EGuiText__PerkSuppressedEffect                                                   = 4312,
	EGuiText__AbilityUnlock__StealthInstantKillUndetectable                          = 4315,
	EGuiText__AbilityUnlock__DoubleHackRobots                                        = 4316,
	EGuiText__AbilityUnlock__UndetectableLockpicking                                 = 4317,
	EGuiText__AbilityUnlock__UseScienceAsWeaponSkill                                 = 4325,
	EGuiText__FlawDecidophobia                                                       = 4327,
	EGuiText__PerkSuppressedByNameDuration                                           = 4328,
	EGuiText__CurSuppressingNameDuration                                             = 4329,
	EGuiText__CurrentBitsValue                                                       = 4332,
	EGuiText__CurrentWeaponPartsValue                                                = 4333,
	EGuiText__CurrentArmorPartsValue                                                 = 4334,
	EGuiText__CurVersionValue                                                        = 4335,
	EGuiText__VersionMismatchValue                                                   = 4336,
	EGuiText__SaveVersionValue                                                       = 4337,
	EGuiText__QuoteValueMissing                                                      = 4338,
	EGuiText__QuoteValueInstalled                                                    = 4339,
	EGuiText__PurchaseDLC                                                            = 4340,
	EGuiText__Workbench_PlayerLacksWeaponParts                                       = 4341,
	EGuiText__Workbench_PlayerLacksArmorParts                                        = 4342,
	EGuiText__Analyze                                                                = 4373,
	EGuiText__TinkerMaxLevelReachedPreDLC                                            = 4374,
	EGuiText__TinkerMaxLevelReached                                                  = 4375,
	EGuiText__Location_PhaethonPilothouse                                            = 4438,
	EGuiText__Location_RizzosDistillationStation                                     = 4439,
	EGuiText__Location_EridanosSpaceport                                             = 4440,
	EGuiText__Location_TheGrandColonialHotel                                         = 4441,
	EGuiText__Location_WildernessExploitationReserve                                 = 4442,
	EGuiText__Location_RizzosPurpleberryOrchards                                     = 4443,
	EGuiText__Location_RizzosResearchDevelopmentDistrictLabs                         = 4444,
	EGuiText__Location_HappyDaleFarms                                                = 4445,
	EGuiText__Location_StormtailShelter                                              = 4446,
	EGuiText__SkillName_Virtuoso_Value                                               = 4455,
	EGuiText__ModRecoveryEngineeringVirtuoso                                         = 4456,
	EGuiText__PreviousModRecovered                                                   = 4457,
	EGuiText__ModInstallWarningEngineeringVirtuoso                                   = 4458,
	EGuiText__GameName                                                               = 4461,
	EGuiText__Quest_SortContent                                                      = 4462,
	EGuiText__Stop_Audio_Log                                                         = 4487,
	EGuiText__Warning_PointOfNoReturn_Overwrite                                      = 4493,
	EGuiText__DLCpopup_Gorgon_Title                                                  = 4506,
	EGuiText__DLCpopup_Gorgon                                                        = 4507,
	EGuiText__FastTravel_EridanosQuest                                               = 4511,
	EGuiText__MoreInfo                                                               = 4512,
	EGuiText__DLCpopup_Eridanos_Title                                                = 4513,
	EGuiText__DLCpopup_Eridanos                                                      = 4514,
	EGuiText__DLC_PONR_Prompt                                                        = 4574,
	EGuiText__DLC_PONR_Prompt_Dual                                                   = 4575,
	EGuiText__DLCpopup_Dual                                                          = 4576,
	EGuiText__DLCpopup_Dual_Title                                                    = 4577,
	EGuiText__EvidenceNearbyNotification                                             = 4583,
	EGuiText__Settings_ControllerEnableImpulseTriggers                               = 4585,
	EGuiText__Settings_ImpulseTriggerIntensity                                       = 4586,
	EGuiText__Settings_ControllerEnableImpulseTriggersDescription                    = 4587,
	EGuiText__Settings_ImpulseTriggerIntensityDescription                            = 4588,
	EGuiText__Settings_PerformanceMode                                               = 4589,
	EGuiText__Settings_PerformanceModeDescription                                    = 4590,
	EGuiText__Mode_PerformanceMode                                                   = 4591,
	EGuiText__Mode_CinematicMode                                                     = 4592,
	EGuiText__Settings_SSGI                                                          = 4593,
	EGuiText__Settings_SSGIDescription                                               = 4594,
	EGuiText__Mode_SSGIOff                                                           = 4595,
	EGuiText__Mode_SSGIFullres                                                       = 4596,
	EGuiText__Mode_SSGIHalfres                                                       = 4597,
	EGuiText__Settings_DynRes                                                        = 4598,
	EGuiText__Settings_DynResDescription                                             = 4599,
	EGuiText__Settings_FSR2                                                          = 4600,
	EGuiText__Settings_FSR2Description                                               = 4601,
	EGuiText__Settings_FSR2Quality                                                   = 4602,
	EGuiText__Settings_FSR2Balanced                                                  = 4603,
	EGuiText__Settings_FSR2Performance                                               = 4604
};

/// Enum /Script/Indiana.ESurvivalBar
/// Size: 0x01 (1 bytes)
enum class ESurvivalBar : uint8_t
{
	ESurvivalBar__Hunger                                                             = 0,
	ESurvivalBar__Thirst                                                             = 1,
	ESurvivalBar__Sleep                                                              = 2,
	ESurvivalBar__Invalid                                                            = 3
};

/// Enum /Script/Indiana.CycleBehavior
/// Size: 0x01 (1 bytes)
enum class CycleBehavior : uint8_t
{
	CycleBehavior__LinearRepeat                                                      = 0,
	CycleBehavior__LinearOnceOnly                                                    = 1,
	CycleBehavior__PingPong                                                          = 2
};

/// Enum /Script/Indiana.ESwitchEventType
/// Size: 0x01 (1 bytes)
enum class ESwitchEventType : uint8_t
{
	ESwitchEventType__Invalid                                                        = 0,
	ESwitchEventType__Changed                                                        = 1,
	ESwitchEventType__AnimateSwitch                                                  = 2
};

/// Enum /Script/Indiana.ESymbolType
/// Size: 0x01 (1 bytes)
enum class ESymbolType : uint8_t
{
	ESymbolType__DamageType                                                          = 0,
	ESymbolType__Buff                                                                = 1,
	ESymbolType__Debuff                                                              = 2,
	ESymbolType__MapCompass                                                          = 3,
	ESymbolType__Count                                                               = 4,
	ESymbolType__Invalid                                                             = 5
};

/// Enum /Script/Indiana.EDesiredBrushType
/// Size: 0x01 (1 bytes)
enum class EDesiredBrushType : uint8_t
{
	EDesiredBrushType__Normal                                                        = 0,
	EDesiredBrushType__Hovered                                                       = 1,
	EDesiredBrushType__Pressed                                                       = 2,
	EDesiredBrushType__Focused                                                       = 3
};

/// Enum /Script/Indiana.ETargetRelationship
/// Size: 0x01 (1 bytes)
enum class ETargetRelationship : uint8_t
{
	ETargetRelationship__Friendly                                                    = 0,
	ETargetRelationship__Neutral                                                     = 1,
	ETargetRelationship__Hostile                                                     = 2,
	ETargetRelationship__PacifistHostile                                             = 3
};

/// Enum /Script/Indiana.EScriptedTeamType
/// Size: 0x01 (1 bytes)
enum class EScriptedTeamType : uint8_t
{
	EScriptedTeamType__Script                                                        = 0,
	EScriptedTeamType__MindControl                                                   = 1
};

/// Enum /Script/Indiana.ETimeDilationType
/// Size: 0x01 (1 bytes)
enum class ETimeDilationType : uint8_t
{
	ETimeDilationType__Static                                                        = 0,
	ETimeDilationType__Curve                                                         = 1
};

/// Enum /Script/Indiana.ETimeDilationPriority
/// Size: 0x01 (1 bytes)
enum class ETimeDilationPriority : uint8_t
{
	ETimeDilationPriority__Low                                                       = 0,
	ETimeDilationPriority__Medium                                                    = 1,
	ETimeDilationPriority__High                                                      = 2,
	ETimeDilationPriority__Critical                                                  = 3
};

/// Enum /Script/Indiana.ERagdollGetupState
/// Size: 0x01 (1 bytes)
enum class ERagdollGetupState : uint8_t
{
	ERagdollGetupState__Inactive                                                     = 0,
	ERagdollGetupState__AnimationDelayed                                             = 1,
	ERagdollGetupState__AnimationQueued                                              = 2,
	ERagdollGetupState__AnimationBegan                                               = 3,
	ERagdollGetupState__AnimationActive                                              = 4
};

/// Enum /Script/Indiana.ETrapResult
/// Size: 0x01 (1 bytes)
enum class ETrapResult : uint8_t
{
	ETrapResult__Success                                                             = 0,
	ETrapResult__Failed                                                              = 1,
	ETrapResult__Failed_Skill                                                        = 2,
	ETrapResult__Failed_Error                                                        = 3,
	ETrapResult__Pending_Arming                                                      = 4,
	ETrapResult__Pending_Disarming                                                   = 5
};

/// Enum /Script/Indiana.ETrapDifficulty
/// Size: 0x01 (1 bytes)
enum class ETrapDifficulty : uint8_t
{
	ETrapDifficulty__Easy                                                            = 0,
	ETrapDifficulty__Medium                                                          = 1,
	ETrapDifficulty__Difficult                                                       = 2,
	ETrapDifficulty__Extreme                                                         = 3
};

/// Enum /Script/Indiana.ETrapEventType
/// Size: 0x01 (1 bytes)
enum class ETrapEventType : uint8_t
{
	ETrapEventType__Invalid                                                          = 0,
	ETrapEventType__Armed                                                            = 1,
	ETrapEventType__Disarmed                                                         = 2,
	ETrapEventType__PreDetonate                                                      = 3,
	ETrapEventType__Detonate                                                         = 4
};

/// Enum /Script/Indiana.EDiscoveryStatusFlags
/// Size: 0x01 (1 bytes)
enum class EDiscoveryStatusFlags : uint8_t
{
	EDiscoveryStatusFlags__Aware                                                     = 0,
	EDiscoveryStatusFlags__Visited                                                   = 1,
	EDiscoveryStatusFlags__Locked                                                    = 2,
	EDiscoveryStatusFlags__Hidden                                                    = 3
};

/// Enum /Script/Indiana.ETutorialCategory
/// Size: 0x01 (1 bytes)
enum class ETutorialCategory : uint8_t
{
	ETutorialCategory__Basics                                                        = 0,
	ETutorialCategory__Exploration                                                   = 1,
	ETutorialCategory__Loot                                                          = 2,
	ETutorialCategory__WeaponsAndArmor                                               = 3,
	ETutorialCategory__SkillsAndReputation                                           = 4,
	ETutorialCategory__Combat                                                        = 5,
	ETutorialCategory__Stealth                                                       = 6,
	ETutorialCategory__Companions                                                    = 7,
	ETutorialCategory__Supernova                                                     = 8,
	ETutorialCategory__Count                                                         = 9,
	ETutorialCategory__Invalid                                                       = 10
};

/// Enum /Script/Indiana.ETutorialEvent
/// Size: 0x01 (1 bytes)
enum class ETutorialEvent : uint8_t
{
	ETutorialEvent__Invalid                                                          = 0,
	ETutorialEvent__DisguiseActivated                                                = 1,
	ETutorialEvent__DisguiseDurationEnded                                            = 2,
	ETutorialEvent__DisguiseImperfectThresholdReached                                = 3,
	ETutorialEvent__DisguiseInterrogationBegun                                       = 4,
	ETutorialEvent__DisguiseInterrogationFailed                                      = 5,
	ETutorialEvent__DisguiseInterrogationSuccess                                     = 6,
	ETutorialEvent__DisguiseIntro                                                    = 7,
	ETutorialEvent__DisguiseIntro9                                                   = 8,
	ETutorialEvent__DisguiseIntro10                                                  = 9,
	ETutorialEvent__DisguiseIntro11                                                  = 10,
	ETutorialEvent__FastTravelPointLearned                                           = 11,
	ETutorialEvent__FlawOffered                                                      = 12,
	ETutorialEvent__InterrogationBegun                                               = 13,
	ETutorialEvent__InterrogationFailed                                              = 14,
	ETutorialEvent__InterrogationSuccess                                             = 15,
	ETutorialEvent__PlayerArmor                                                      = 16,
	ETutorialEvent__PlayerArmorGamepad                                               = 17,
	ETutorialEvent__PlayerBasicMovement                                              = 18,
	ETutorialEvent__PlayerBlocking                                                   = 19,
	ETutorialEvent__PlayerCombatAttack                                               = 20,
	ETutorialEvent__PlayerCombatDialogAbilities                                      = 21,
	ETutorialEvent__PlayerCompanionAbilities                                         = 22,
	ETutorialEvent__PlayerCompanionBonuses                                           = 23,
	ETutorialEvent__PlayerCompanionCommands                                          = 24,
	ETutorialEvent__PlayerCompanionGain                                              = 25,
	ETutorialEvent__PlayerCompanionGear                                              = 26,
	ETutorialEvent__PlayerCompanionPerks                                             = 27,
	ETutorialEvent__PlayerCompanionPerksAssigned                                     = 28,
	ETutorialEvent__PlayerConsumables                                                = 29,
	ETutorialEvent__PlayerConsumablesController                                      = 30,
	ETutorialEvent__PlayerCover                                                      = 31,
	ETutorialEvent__PlayerCriminalActivities                                         = 32,
	ETutorialEvent__PlayerCrouch                                                     = 33,
	ETutorialEvent__PlayerDamageTypes                                                = 34,
	ETutorialEvent__PlayerDestructibles                                              = 35,
	ETutorialEvent__PlayerDodging                                                    = 36,
	ETutorialEvent__PlayerDodgeLeap                                                  = 37,
	ETutorialEvent__PlayerEncumbrance                                                = 38,
	ETutorialEvent__PlayerEnemyAwareness                                             = 39,
	ETutorialEvent__PlayerFalling                                                    = 40,
	ETutorialEvent__PlayerFlaws                                                      = 41,
	ETutorialEvent__PlayerFlawOffered                                                = 42,
	ETutorialEvent__PlayerGrazes                                                     = 43,
	ETutorialEvent__PlayerFastTravel                                                 = 44,
	ETutorialEvent__PlayerHealthMedkitMax                                            = 45,
	ETutorialEvent__PlayerItemBroke                                                  = 46,
	ETutorialEvent__PlayerItemDegradation                                            = 47,
	ETutorialEvent__PlayerItemGain                                                   = 48,
	ETutorialEvent__PlayerItemPristine                                               = 49,
	ETutorialEvent__PlayerItemRepair                                                 = 50,
	ETutorialEvent__PlayerJump                                                       = 51,
	ETutorialEvent__PlayerLevelInstructions                                          = 52,
	ETutorialEvent__PlayerLevelSkills                                                = 53,
	ETutorialEvent__PlayerLevelUp                                                    = 54,
	ETutorialEvent__PlayerLoot                                                       = 55,
	ETutorialEvent__PlayerLootController                                             = 56,
	ETutorialEvent__PlayerMedKit                                                     = 57,
	ETutorialEvent__PlayerMeleePowerAttack                                           = 58,
	ETutorialEvent__PlayerMeleeWithRanged                                            = 59,
	ETutorialEvent__PlayerModIntro                                                   = 60,
	ETutorialEvent__PlayerModUse                                                     = 61,
	ETutorialEvent__PlayerNRayDamage                                                 = 62,
	ETutorialEvent__PlayerObjectiveMarkers                                           = 63,
	ETutorialEvent__PlayerPerfectBlocks                                              = 64,
	ETutorialEvent__PlayerPerks                                                      = 65,
	ETutorialEvent__PlayerPerksUnlocked                                              = 66,
	ETutorialEvent__PlayerLockpicks                                                  = 67,
	ETutorialEvent__PlayerQuestDependencies                                          = 68,
	ETutorialEvent__PlayerQuestScreen                                                = 69,
	ETutorialEvent__PlayerQuestSwitching                                             = 70,
	ETutorialEvent__PlayerReinforcement                                              = 71,
	ETutorialEvent__PlayerReinforcement2                                             = 72,
	ETutorialEvent__PlayerReinforcement3                                             = 73,
	ETutorialEvent__PlayerReinforcement4                                             = 74,
	ETutorialEvent__PlayerReinforcement5                                             = 75,
	ETutorialEvent__PlayerReinforcement6                                             = 76,
	ETutorialEvent__PlayerReinforcement7                                             = 77,
	ETutorialEvent__PlayerReinforcement8                                             = 78,
	ETutorialEvent__PlayerReinforcement9                                             = 79,
	ETutorialEvent__PlayerReinforcement10                                            = 80,
	ETutorialEvent__PlayerReinforcement11                                            = 81,
	ETutorialEvent__PlayerReinforcement12                                            = 82,
	ETutorialEvent__PlayerReinforcement13                                            = 83,
	ETutorialEvent__PlayerReinforcement14                                            = 84,
	ETutorialEvent__PlayerReinforcement15                                            = 85,
	ETutorialEvent__PlayerReputations                                                = 86,
	ETutorialEvent__PlayerRespec                                                     = 87,
	ETutorialEvent__PlayerResting                                                    = 88,
	ETutorialEvent__PlayerScienceWeapons                                             = 89,
	ETutorialEvent__PlayerSneak                                                      = 90,
	ETutorialEvent__PlayerSneakAttack                                                = 91,
	ETutorialEvent__PlayerSprint                                                     = 92,
	ETutorialEvent__PlayerStarmap                                                    = 93,
	ETutorialEvent__PlayerStealthAttack                                              = 94,
	ETutorialEvent__PlayerSwitchingWeapons                                           = 95,
	ETutorialEvent__PlayerTacticalTimeDilation                                       = 96,
	ETutorialEvent__PlayerTTDLocationHits                                            = 97,
	ETutorialEvent__PlayerTallGrass                                                  = 98,
	ETutorialEvent__PlayerVendingMachine                                             = 99,
	ETutorialEvent__PlayerVendorScreen                                               = 100,
	ETutorialEvent__PlayerWeakspots                                                  = 101,
	ETutorialEvent__PlayerWeapons                                                    = 102,
	ETutorialEvent__PlayerWeaponsController                                          = 103,
	ETutorialEvent__PlayerWorkbench                                                  = 104,
	ETutorialEvent__PlayerHunger                                                     = 105,
	ETutorialEvent__PlayerSleepDeprivation                                           = 106,
	ETutorialEvent__PlayerThirst                                                     = 107,
	ETutorialEvent__PlayerSpecialEffects                                             = 108,
	ETutorialEvent__PlayerDamageTypeCodex                                            = 109,
	ETutorialEvent__PlayerReinforcement16                                            = 110,
	ETutorialEvent__PlayerReinforcement17                                            = 111,
	ETutorialEvent__PlayerReinforcement18                                            = 112,
	ETutorialEvent__PlayerReinforcement19                                            = 113,
	ETutorialEvent__PlayerReinforcement20                                            = 114,
	ETutorialEvent__SpinUpWeapons                                                    = 115,
	ETutorialEvent__ChargedBurstWeapons                                              = 116,
	ETutorialEvent__LowGravity                                                       = 117,
	ETutorialEvent__DiscrepancyAmplifierAcquired                                     = 118,
	ETutorialEvent__DiscrepancyAmplifierEquipped                                     = 119,
	ETutorialEvent__DiscrepancyAmplifierUnacquired                                   = 120,
	ETutorialEvent__PlayerItemImprovised                                             = 121,
	ETutorialEvent__Count                                                            = 122
};

/// Enum /Script/Indiana.EControlDevice
/// Size: 0x01 (1 bytes)
enum class EControlDevice : uint8_t
{
	EControlDevice__None                                                             = 0,
	EControlDevice__Keyboard                                                         = 1,
	EControlDevice__Gamepad                                                          = 2
};

/// Enum /Script/Indiana.ETutorialDisplayType
/// Size: 0x01 (1 bytes)
enum class ETutorialDisplayType : uint8_t
{
	ETutorialDisplayType__Invalid                                                    = 0,
	ETutorialDisplayType__Simple                                                     = 1,
	ETutorialDisplayType__CorporateLarge                                             = 2,
	ETutorialDisplayType__Count                                                      = 3
};

/// Enum /Script/Indiana.EInputGroup
/// Size: 0x01 (1 bytes)
enum class EInputGroup : uint8_t
{
	EInputGroup__None                                                                = 0,
	EInputGroup__LeftStick                                                           = 1,
	EInputGroup__RightStick                                                          = 2,
	EInputGroup__DPad                                                                = 4
};

/// Enum /Script/Indiana.ETransactionValidationResult
/// Size: 0x01 (1 bytes)
enum class ETransactionValidationResult : uint8_t
{
	ETransactionValidationResult__Valid                                              = 0,
	ETransactionValidationResult__PlayerLacksCurrency                                = 1,
	ETransactionValidationResult__VendorLacksCurrency                                = 2,
	ETransactionValidationResult__NullPlayerInventory                                = 3,
	ETransactionValidationResult__VendorLacksInventory                               = 4,
	ETransactionValidationResult__VendorInventoryMismatch                            = 5,
	ETransactionValidationResult__PlayerInventoryMismatch                            = 6,
	ETransactionValidationResult__VendorDoesntBuy                                    = 7,
	ETransactionValidationResult__CantBuyRestrictedStock                             = 8,
	ETransactionValidationResult__CantPawnNoDropItems                                = 9,
	ETransactionValidationResult__NoItems                                            = 10,
	ETransactionValidationResult__CantRepairHealthyItems                             = 11
};

/// Enum /Script/Indiana.EVendorPages
/// Size: 0x01 (1 bytes)
enum class EVendorPages : uint8_t
{
	EVendorPages__Buy                                                                = 0,
	EVendorPages__Sell                                                               = 1,
	EVendorPages__Repair                                                             = 2,
	EVendorPages__Count                                                              = 3
};

/// Enum /Script/Indiana.EHolsterState
/// Size: 0x01 (1 bytes)
enum class EHolsterState : uint8_t
{
	EHolsterState__Holstered                                                         = 0,
	EHolsterState__Holstering                                                        = 1,
	EHolsterState__Unholstering                                                      = 2,
	EHolsterState__Unholstered                                                       = 3
};

/// Enum /Script/Indiana.EWeaponEquipMode
/// Size: 0x01 (1 bytes)
enum class EWeaponEquipMode : uint8_t
{
	EWeaponEquipMode__FirstPerson                                                    = 0,
	EWeaponEquipMode__ThirdPerson                                                    = 1,
	EWeaponEquipMode__UIPreview                                                      = 2
};

/// Enum /Script/Indiana.EModSlot
/// Size: 0x01 (1 bytes)
enum class EModSlot : uint8_t
{
	EModSlot__None                                                                   = 0,
	EModSlot__Barrel                                                                 = 1,
	EModSlot__UnderBarrel                                                            = 2,
	EModSlot__Magazine                                                               = 3,
	EModSlot__Sight                                                                  = 4,
	EModSlot__MeleeGrip                                                              = 5,
	EModSlot__MeleeAttack                                                            = 6,
	EModSlot__SlotCount                                                              = 7
};

/// Enum /Script/Indiana.EAttackRestrictions
/// Size: 0x02 (2 bytes)
enum class EAttackRestrictions : uint16_t
{
	EAttackRestrictions__None                                                        = 0,
	EAttackRestrictions__PendingReload                                               = 1,
	EAttackRestrictions__Sprinting                                                   = 2,
	EAttackRestrictions__Blocking                                                    = 4,
	EAttackRestrictions__AttackSuspended                                             = 8,
	EAttackRestrictions__InputSuppressed                                             = 16,
	EAttackRestrictions__Reloading                                                   = 32,
	EAttackRestrictions__NoAmmo                                                      = 64,
	EAttackRestrictions__QuickMeleeCooldown                                          = 128,
	EAttackRestrictions__FireCooldown                                                = 256
};

/// Enum /Script/Indiana.EWeaponState
/// Size: 0x01 (1 bytes)
enum class EWeaponState : uint8_t
{
	EWeaponState__Invalid                                                            = 0,
	EWeaponState__Equipped                                                           = 1,
	EWeaponState__Reloading                                                          = 2,
	EWeaponState__Firing                                                             = 3,
	EWeaponState__Active                                                             = 4,
	EWeaponState__Charging                                                           = 5,
	EWeaponState__ChargeUp                                                           = 6,
	EWeaponState__ChargeFull                                                         = 7,
	EWeaponState__Scoped                                                             = 8,
	EWeaponState__FineAiming                                                         = 9,
	EWeaponState__BeamLocked                                                         = 10,
	EWeaponState__FiringFineAiming                                                   = 11,
	EWeaponState__FiringScoped                                                       = 12,
	EWeaponState__FiringNotAiming                                                    = 13,
	EWeaponState__CalledShot                                                         = 14
};

/// Enum /Script/Indiana.EWeaponEvent
/// Size: 0x01 (1 bytes)
enum class EWeaponEvent : uint8_t
{
	EWeaponEvent__Invalid                                                            = 0,
	EWeaponEvent__Equip                                                              = 1,
	EWeaponEvent__Unequip                                                            = 2,
	EWeaponEvent__Holster                                                            = 3,
	EWeaponEvent__Unholster                                                          = 4,
	EWeaponEvent__InstantEquip                                                       = 5,
	EWeaponEvent__InstantUnequip                                                     = 6,
	EWeaponEvent__Fire                                                               = 7,
	EWeaponEvent__FireFineAim                                                        = 8,
	EWeaponEvent__FireScoped                                                         = 9,
	EWeaponEvent__DryFire                                                            = 10,
	EWeaponEvent__DamageTicked                                                       = 11,
	EWeaponEvent__CalledShot                                                         = 12,
	EWeaponEvent__FireCalledShot                                                     = 13,
	EWeaponEvent__FakeFireCalledShot                                                 = 14,
	EWeaponEvent__Reload                                                             = 15,
	EWeaponEvent__ChargeMax                                                          = 16,
	EWeaponEvent__MeleeWindUpLeft                                                    = 17,
	EWeaponEvent__MeleeWindUpRight                                                   = 18,
	EWeaponEvent__MeleeAttackRight                                                   = 19,
	EWeaponEvent__MeleeAttackLeft                                                    = 20,
	EWeaponEvent__PowerAttackWindUp                                                  = 21,
	EWeaponEvent__PowerAttackSwing                                                   = 22,
	EWeaponEvent__SweepAttackWindUp                                                  = 23,
	EWeaponEvent__SweepAttackSwing                                                   = 24,
	EWeaponEvent__CounterAttack                                                      = 25,
	EWeaponEvent__Recoil                                                             = 26,
	EWeaponEvent__WindUpNoStamina                                                    = 27,
	EWeaponEvent__NoStaminaAttack                                                    = 28,
	EWeaponEvent__MeleeImpact                                                        = 29,
	EWeaponEvent__Block                                                              = 30,
	EWeaponEvent__QuickMelee                                                         = 31,
	EWeaponEvent__Stagger                                                            = 32,
	EWeaponEvent__CustomFire                                                         = 33,
	EWeaponEvent__SpecialAttack1                                                     = 34,
	EWeaponEvent__SpecialAttack2                                                     = 35,
	EWeaponEvent__SpecialAttack3                                                     = 36,
	EWeaponEvent__SpecialAttack4                                                     = 37,
	EWeaponEvent__FineAimStart                                                       = 38,
	EWeaponEvent__FineAimLeave                                                       = 39,
	EWeaponEvent__ScopeStart                                                         = 40,
	EWeaponEvent__ScopeLeave                                                         = 41,
	EWeaponEvent__ScopeEnter                                                         = 42,
	EWeaponEvent__ScopeExit                                                          = 43,
	EWeaponEvent__InstantHolster                                                     = 44,
	EWeaponEvent__InstantUnholster                                                   = 45,
	EWeaponEvent__StealthMelee                                                       = 46,
	EWeaponEvent__PerfectBlock                                                       = 47
};

/// Enum /Script/Indiana.EWorkbenchPages
/// Size: 0x01 (1 bytes)
enum class EWorkbenchPages : uint8_t
{
	EWorkbenchPages__Modification                                                    = 0,
	EWorkbenchPages__Upgrade                                                         = 1,
	EWorkbenchPages__Repair                                                          = 2,
	EWorkbenchPages__Breakdown                                                       = 3,
	EWorkbenchPages__Count                                                           = 4
};

/// Enum /Script/Indiana.ETextDirectionType
/// Size: 0x01 (1 bytes)
enum class ETextDirectionType : uint8_t
{
	ETextDirectionType__NoDirectionalBias                                            = 0,
	ETextDirectionType__Up                                                           = 1,
	ETextDirectionType__Down                                                         = 2
};

/// Class /Script/Indiana.IndianaUserWidget
/// Size: 0x0300 (768 bytes) (0x000278 - 0x000300) align 8 MaxSize: 0x0300
class UIndianaUserWidget : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0278   (0x0018)  MISSED
	FName                                              AssetKey;                                                   // 0x0290   (0x0008)  
	bool                                               bStopOnlyGameInput;                                         // 0x0298   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0299   (0x0001)  MISSED
	bool                                               bRecordFocusHistory;                                        // 0x029A   (0x0001)  
	unsigned char                                      UnknownData02_6[0xD];                                       // 0x029B   (0x000D)  MISSED
	class UIndianaWidgetComponent*                     OwnerWidgetComponent;                                       // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData03_7[0x50];                                      // 0x02B0   (0x0050)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaUserWidget.StartMinimize
	// void StartMinimize();                                                                                                    // [0x1866970] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.StartMaximize
	// void StartMaximize();                                                                                                    // [0x1866950] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.StartIntro
	// void StartIntro();                                                                                                       // [0x1866930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.SetDefaultUserFocus
	// void SetDefaultUserFocus();                                                                                              // [0x1866910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.RestoreOrSetDefaultUserFocus
	// void RestoreOrSetDefaultUserFocus();                                                                                     // [0x18668f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.OnStartOutroCb
	// void OnStartOutroCb();                                                                                                   // [0x18668d0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnStartMinimizeCb
	// void OnStartMinimizeCb();                                                                                                // [0x18668b0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnStartMaximizeCb
	// void OnStartMaximizeCb();                                                                                                // [0x1866890] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnStartIntroCb
	// void OnStartIntroCb();                                                                                                   // [0x1866870] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnOutro
	// bool OnOutro(FDelegateProperty& AnimationCompleteCallback);                                                              // [0x18667b0] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnMinimize
	// bool OnMinimize(FDelegateProperty& AnimationCompleteCallback);                                                           // [0x18666f0] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnMaximize
	// bool OnMaximize(FDelegateProperty& AnimationCompleteCallback);                                                           // [0x1866630] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnIntro
	// bool OnIntro(FDelegateProperty& AnimationCompleteCallback);                                                              // [0x1866570] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnInputDeviceChanged
	// void OnInputDeviceChanged(bool bUsingGamepad);                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeOutroCb
	// void OnFinalizeOutroCb();                                                                                                // [0x1866550] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeMinimizeCb
	// void OnFinalizeMinimizeCb();                                                                                             // [0x1866530] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeMinimize
	// void OnFinalizeMinimize();                                                                                               // [0x1866510] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeMaximizeCb
	// void OnFinalizeMaximizeCb();                                                                                             // [0x18664f0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeMaximize
	// void OnFinalizeMaximize();                                                                                               // [0x18664d0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeIntroCb
	// void OnFinalizeIntroCb();                                                                                                // [0x18664b0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnCounterZero
	// void OnCounterZero();                                                                                                    // [0x1866490] Native|Public        
	// Function /Script/Indiana.IndianaUserWidget.OnCounterNonZero
	// void OnCounterNonZero();                                                                                                 // [0x1866470] Native|Public        
	// Function /Script/Indiana.IndianaUserWidget.OnCancelShutdown
	// void OnCancelShutdown();                                                                                                 // [0x1866450] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnCancelMinimize
	// void OnCancelMinimize();                                                                                                 // [0x1866430] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.ObjectRefHasReferencers
	// bool ObjectRefHasReferencers();                                                                                          // [0x1866400] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.IsShuttingDown
	// bool IsShuttingDown(bool bIncludeTransitioning);                                                                         // [0x18662d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.IsMinimized
	// bool IsMinimized(bool bIncludeTransitioning);                                                                            // [0x1866230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.IsMaximized
	// bool IsMaximized(bool bIncludeTransitioning);                                                                            // [0x1866190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.GetOpenState
	// EWidgetOpenState GetOpenState();                                                                                         // [0x1866170] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.GetIndianaUI
	// class AIndianaUI* GetIndianaUI();                                                                                        // [0x18660c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.AbilityOverviewChildWidget
/// Size: 0x0370 (880 bytes) (0x000300 - 0x000370) align 8 MaxSize: 0x0370
class UAbilityOverviewChildWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x50];                                      // 0x0300   (0x0050)  MISSED
	class UProgressBar*                                AbilityProgressBar;                                         // 0x0350   (0x0008)  
	float                                              PulseDuration;                                              // 0x0358   (0x0004)  
	float                                              PulseInterpExponent;                                        // 0x035C   (0x0004)  
	float                                              FadeOutThreshold;                                           // 0x0360   (0x0004)  
	EAbilityPosition                                   AbilityPosition;                                            // 0x0364   (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x0365   (0x000B)  MISSED


	/// Functions
	// Function /Script/Indiana.AbilityOverviewChildWidget.OnAbilityCooldownComplete
	// void OnAbilityCooldownComplete();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewChildWidget.ModifyPulseScale
	// void ModifyPulseScale(float PulseScale);                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.AbilityOverviewDetailWidget
/// Size: 0x0400 (1024 bytes) (0x000370 - 0x000400) align 8 MaxSize: 0x0400
class UAbilityOverviewDetailWidget : public UAbilityOverviewChildWidget
{ 
public:
	bool                                               bRegroupCommand;                                            // 0x0370   (0x0001)  
	bool                                               bGamepadAbility;                                            // 0x0371   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0372   (0x0006)  MISSED
	class UTexture2D*                                  CompanionAttackBackgroundTexture;                           // 0x0378   (0x0008)  
	class UTexture2D*                                  CompanionAttackFillTexture;                                 // 0x0380   (0x0008)  
	class UTexture2D*                                  CompanionMoveToBackgroundTexture;                           // 0x0388   (0x0008)  
	class UTexture2D*                                  CompanionMoveToFillTexture;                                 // 0x0390   (0x0008)  
	float                                              HoldFillRatio;                                              // 0x0398   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x039C   (0x0004)  MISSED
	class UVerticalBox*                                HoldPCBox;                                                  // 0x03A0   (0x0008)  
	class UImage*                                      HoldRingPC;                                                 // 0x03A8   (0x0008)  
	class UHorizontalBox*                              HoldGamepadBox;                                             // 0x03B0   (0x0008)  
	class UImage*                                      HoldRingGamepad;                                            // 0x03B8   (0x0008)  
	unsigned char                                      UnknownData02_7[0x40];                                      // 0x03C0   (0x0040)  MISSED


	/// Functions
	// Function /Script/Indiana.AbilityOverviewDetailWidget.OnAbilityUnlockChange
	// void OnAbilityUnlockChange(EUnlockAbility Ability);                                                                      // [0x177f780] Final|Native|Public  
};

/// Class /Script/Indiana.AbilityOverviewWidget
/// Size: 0x05A0 (1440 bytes) (0x000300 - 0x0005A0) align 8 MaxSize: 0x05A0
class UAbilityOverviewWidget : public UIndianaUserWidget
{ 
public:
	class UOverlay*                                    GamepadPanelOverlay;                                        // 0x0300   (0x0008)  
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0308   (0x0008)  
	class UImage*                                      CommandOneLightImage;                                       // 0x0310   (0x0008)  
	class UImage*                                      CommandTwoLightImage;                                       // 0x0318   (0x0008)  
	class UImage*                                      CommandThreeLightImage;                                     // 0x0320   (0x0008)  
	class UImage*                                      CommandFourLightImage;                                      // 0x0328   (0x0008)  
	class UImage*                                      CommandOneButtonImage;                                      // 0x0330   (0x0008)  
	class UImage*                                      CommandTwoButtonImage;                                      // 0x0338   (0x0008)  
	class UImage*                                      CommandThreeButtonImage;                                    // 0x0340   (0x0008)  
	class UImage*                                      CommandFourButtonImage;                                     // 0x0348   (0x0008)  
	class UImage*                                      CommandOneButtonPress;                                      // 0x0350   (0x0008)  
	class UImage*                                      CommandTwoButtonPress;                                      // 0x0358   (0x0008)  
	class UImage*                                      CommandThreeButtonPress;                                    // 0x0360   (0x0008)  
	class UImage*                                      CommandFourButtonPress;                                     // 0x0368   (0x0008)  
	class UAbilityOverviewDetailWidget*                CompanionCommandOne;                                        // 0x0370   (0x0008)  
	class UAbilityOverviewDetailWidget*                CompanionCommandTwo;                                        // 0x0378   (0x0008)  
	class UAbilityOverviewDetailWidget*                CompanionCommandThree;                                      // 0x0380   (0x0008)  
	class UAbilityOverviewDetailWidget*                CompanionCommandFour;                                       // 0x0388   (0x0008)  
	class UInputLabelWidget*                           CompanionInputLabelOne;                                     // 0x0390   (0x0008)  
	class UInputLabelWidget*                           CompanionInputLabelTwo;                                     // 0x0398   (0x0008)  
	class UInputLabelWidget*                           CompanionInputLabelThree;                                   // 0x03A0   (0x0008)  
	class UInputLabelWidget*                           CompanionInputLabelFour;                                    // 0x03A8   (0x0008)  
	class UInputWidget*                                CompanionInputWidgetOne;                                    // 0x03B0   (0x0008)  
	class UInputWidget*                                CompanionInputWidgetTwo;                                    // 0x03B8   (0x0008)  
	class UInputWidget*                                CompanionInputWidgetThree;                                  // 0x03C0   (0x0008)  
	class UInputWidget*                                CompanionInputWidgetFour;                                   // 0x03C8   (0x0008)  
	class UTexture2D*                                  AbilityIcon;                                                // 0x03D0   (0x0008)  
	class UTexture2D*                                  ButtonUnavailableTexture;                                   // 0x03D8   (0x0008)  
	class UTexture2D*                                  ButtonAvailableTexture;                                     // 0x03E0   (0x0008)  
	class UTexture2D*                                  ButtonPressedTexture;                                       // 0x03E8   (0x0008)  
	bool                                               bShowGamepad;                                               // 0x03F0   (0x0001)  
	bool                                               bShowPC;                                                    // 0x03F1   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x03F2   (0x0002)  MISSED
	float                                              FadeInThreshold;                                            // 0x03F4   (0x0004)  
	unsigned char                                      UnknownData01_7[0x1A8];                                     // 0x03F8   (0x01A8)  MISSED


	/// Functions
	// Function /Script/Indiana.AbilityOverviewWidget.OnPlayerCombatStateChange
	// void OnPlayerCombatStateChange(bool IsPlayerInCombat, bool bRestoring);                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x177fdd0] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnHUDModeChanged
	// void OnHUDModeChanged(int32_t ModeIn);                                                                                   // [0x177fd40] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnCompanionAbilityModeChanged
	// void OnCompanionAbilityModeChanged(int32_t ModeIn);                                                                      // [0x177fbc0] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnCompanionAbilityBindingModeChanged
	// void OnCompanionAbilityBindingModeChanged(int32_t ModeIn);                                                               // [0x177fb30] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnCommandButtonPressed
	// void OnCommandButtonPressed(EAbilityPosition AbillityPosition);                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityUsed
	// void OnAbilityUsed(class UAbilityOverviewDetailWidget* Widget, EAbilityPosition AbilityPosition);                        // [0x177f800] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityCooldownTriggered
	// void OnAbilityCooldownTriggered(EAbilityPosition AbilityPosition);                                                       // [0x177f700] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityCooldownStarted
	// void OnAbilityCooldownStarted(EAbilityPosition AbilityPosition);                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityCooldownFinished
	// void OnAbilityCooldownFinished(EAbilityPosition AbillityPosition);                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityCooldownEnded
	// void OnAbilityCooldownEnded(EAbilityPosition AbilityPosition);                                                           // [0x177f680] Final|Native|Protected 
};

/// Class /Script/Indiana.AchievementDataAsset
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align 8 MaxSize: 0x0060
class UAchievementDataAsset : public UDataAsset
{ 
public:
	class UEventListener*                              EventListener;                                              // 0x0038   (0x0008)  
	int32_t                                            Count;                                                      // 0x0040   (0x0004)  
	int32_t                                            AchievementID;                                              // 0x0044   (0x0004)  
	FName                                              SteamName;                                                  // 0x0048   (0x0008)  
	FName                                              PS4Name;                                                    // 0x0050   (0x0008)  
	FName                                              XboxName;                                                   // 0x0058   (0x0008)  
};

/// Class /Script/Indiana.AchievementsManager
/// Size: 0x0160 (352 bytes) (0x000030 - 0x000160) align 8 MaxSize: 0x0160
class UAchievementsManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0xD8];                                      // 0x0030   (0x00D8)  MISSED
	class UPresenceData*                               CurrentPresenceData;                                        // 0x0108   (0x0008)  
	unsigned char                                      UnknownData01_7[0x50];                                      // 0x0110   (0x0050)  MISSED


	/// Functions
	// Function /Script/Indiana.AchievementsManager.ResetAchievements
	// void ResetAchievements();                                                                                                // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.AchievementsManager.OnWeaponSlotted
	// void OnWeaponSlotted(class UItem* Item);                                                                                 // [0x177fe60] Final|Native|Protected 
	// Function /Script/Indiana.AchievementsManager.OnKillPreDeath
	// void OnKillPreDeath(class AActor* Victim);                                                                               // [0x177fef0] Final|Native|Protected 
	// Function /Script/Indiana.AchievementsManager.OnItemEquipped
	// void OnItemEquipped(class UItem* Item);                                                                                  // [0x177fe60] Final|Native|Protected 
	// Function /Script/Indiana.AchievementsManager.OnActiveUserChanged
	// void OnActiveUserChanged(EActiveUserChangeType ChangeType);                                                              // [0x177f8d0] Final|Native|Protected 
	// Function /Script/Indiana.AchievementsManager.IncrementAchievement
	// void IncrementAchievement(FName& AchievementBPName, int32_t Count);                                                      // [0x177f5b0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.AchievementsManager.GameOver
	// void GameOver();                                                                                                         // [0x177f590] Final|Exec|Native|Public 
	// Function /Script/Indiana.AchievementsManager.CompleteAchievementBP
	// void CompleteAchievementBP(class UAchievementDataAsset* Achievement);                                                    // [0x177f510] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.AchievementsManager.CompleteAchievement
	// void CompleteAchievement(FName& AchievementBPName);                                                                      // [0x177f480] Final|Exec|Native|Public|HasOutParms 
};

/// Class /Script/Indiana.AIAction
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UAIAction : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Indiana.ActionSequence
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UActionSequence : public UAIAction
{ 
public:
	TArray<class UAIAction*>                           Actions;                                                    // 0x0038   (0x0010)  
	class UAIAction*                                   ConstructedAction;                                          // 0x0048   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Indiana.BehaviorStateInfo
/// Size: 0x0120 (288 bytes) (0x000030 - 0x000120) align 8 MaxSize: 0x0120
class UBehaviorStateInfo : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0xF0];                                      // 0x0030   (0x00F0)  MISSED
};

/// Class /Script/Indiana.Empty_BehaviorStateInfo
/// Size: 0x0120 (288 bytes) (0x000120 - 0x000120) align 8 MaxSize: 0x0120
class UEmpty_BehaviorStateInfo : public UBehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.ActivatedBehaviorStateInfo
/// Size: 0x0120 (288 bytes) (0x000120 - 0x000120) align 8 MaxSize: 0x0120
class UActivatedBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.DecisionTreeRequestData
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UDecisionTreeRequestData : public UDataAsset
{ 
public:
};

/// Struct /Script/Indiana.AISelector_FValue
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_FValue
{ 
	class UClass*                                      AIFValue;                                                   // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BehaviorStateRequestData
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align 8 MaxSize: 0x0060
class UBehaviorStateRequestData : public UDecisionTreeRequestData
{ 
public:
	bool                                               bRequiresRange;                                             // 0x0038   (0x0001)  
	bool                                               bSkipRequiresRangeIfUnreachable;                            // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x003A   (0x0006)  MISSED
	FAISelector_FValue                                 MinRange;                                                   // 0x0040   (0x0008)  
	FAISelector_FValue                                 PreferredRange;                                             // 0x0048   (0x0008)  
	class UDecisionTreeRequestData*                    RequiresRangeRequest;                                       // 0x0050   (0x0008)  
	bool                                               bInitiatesCooldown;                                         // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Indiana.DecisionTreeEmptyRequestData
/// Size: 0x0068 (104 bytes) (0x000060 - 0x000068) align 8 MaxSize: 0x0068
class UDecisionTreeEmptyRequestData : public UBehaviorStateRequestData
{ 
public:
	class UClass*                                      InfoType;                                                   // 0x0060   (0x0008)  
};

/// Class /Script/Indiana.ActivatedRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UActivatedRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.ActivityManager
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UActivityManager : public UObject
{ 
public:
};

/// Class /Script/Indiana.PooledActor
/// Size: 0x02C0 (704 bytes) (0x0002B8 - 0x0002C0) align 8 MaxSize: 0x02C0
class APooledActor : public AActor
{ 
public:
	class UActorPool*                                  OwningPool;                                                 // 0x02B8   (0x0008)  
};

/// Struct /Script/Indiana.ActorPoolConfiguration
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FActorPoolConfiguration
{ 
	EActorPoolingMethod                                PoolingMethod;                                              // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UClass*                                      ActorClass;                                                 // 0x0008   (0x0008)  
	int32_t                                            MaxActorsToRetain;                                          // 0x0010   (0x0004)  
	bool                                               bCanSpawnMoreThanMaxActors;                                 // 0x0014   (0x0001)  
	bool                                               bReuseOldestActorsWhenExhausted;                            // 0x0015   (0x0001)  
	bool                                               bDeferSpawnRequests;                                        // 0x0016   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x0017   (0x0001)  MISSED
};

/// Class /Script/Indiana.ActorPool
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align 8 MaxSize: 0x0080
class UActorPool : public UObject
{ 
public:
	FActorPoolConfiguration                            PoolConfiguration;                                          // 0x0030   (0x0018)  
	TArray<class APooledActor*>                        ActiveActors;                                               // 0x0048   (0x0010)  
	TArray<class APooledActor*>                        FreeActors;                                                 // 0x0058   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0068   (0x0018)  MISSED
};

/// Class /Script/Indiana.ActorRenderWidget
/// Size: 0x0398 (920 bytes) (0x000300 - 0x000398) align 8 MaxSize: 0x0398
class UActorRenderWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	class UClass*                                      ActorStageClass;                                            // 0x0318   (0x0008)  
	bool                                               bRouteAnalogInput;                                          // 0x0320   (0x0001)  
	bool                                               bSetupInConstruction;                                       // 0x0321   (0x0001)  
	bool                                               bFlipHorizontally;                                          // 0x0322   (0x0001)  
	bool                                               bEnableZoomAction;                                          // 0x0323   (0x0001)  
	float                                              ZoomFull;                                                   // 0x0324   (0x0004)  
	float                                              ZoomReduced;                                                // 0x0328   (0x0004)  
	bool                                               bZoomReduced;                                               // 0x032C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x032D   (0x0003)  MISSED
	FVector2D                                          MouseSensitivity;                                           // 0x0330   (0x0008)  
	FVector2D                                          GamepadSensitivity;                                         // 0x0338   (0x0008)  
	class UMaterialInterface*                          ImageMaterial;                                              // 0x0340   (0x0008)  
	bool                                               bResizeRenderTargetWithResolution;                          // 0x0348   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0349   (0x0003)  MISSED
	int32_t                                            RenderTargetSizeX;                                          // 0x034C   (0x0004)  
	int32_t                                            RenderTargetSizeY;                                          // 0x0350   (0x0004)  
	TEnumAsByte<ETextureRenderTargetFormat>            RenderTargetFormat;                                         // 0x0354   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0355   (0x0003)  MISSED
	class UBorder*                                     Border;                                                     // 0x0358   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0360   (0x0008)  
	unsigned char                                      UnknownData04_7[0x30];                                      // 0x0368   (0x0030)  MISSED


	/// Functions
	// Function /Script/Indiana.ActorRenderWidget.OnMouseZoomOut
	// void OnMouseZoomOut();                                                                                                   // [0x177ffa0] Final|Native|Protected 
	// Function /Script/Indiana.ActorRenderWidget.OnMouseZoomIn
	// void OnMouseZoomIn();                                                                                                    // [0x177ff80] Final|Native|Protected 
	// Function /Script/Indiana.ActorRenderWidget.OnGamepadToggleFullZoom
	// void OnGamepadToggleFullZoom();                                                                                          // [0x177fd20] Final|Native|Protected 
	// Function /Script/Indiana.ActorRenderWidget.OnBorderMouseDown
	// FEventReply OnBorderMouseDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                          // [0x177f950] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ActorRenderWidget.CanZoom
	// bool CanZoom();                                                                                                          // [0x177f450] Final|Native|Protected|Const 
};

/// Class /Script/Indiana.ActorStage
/// Size: 0x0380 (896 bytes) (0x0002B8 - 0x000380) align 8 MaxSize: 0x0380
class AActorStage : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02B8   (0x0008)  MISSED
	class USceneComponent*                             AttachPointSceneComponent;                                  // 0x02C0   (0x0008)  
	class USceneCaptureComponent2D*                    FinalColorCaptureComponent;                                 // 0x02C8   (0x0008)  
	class USceneCaptureComponent2D*                    AlphaCaptureComponent;                                      // 0x02D0   (0x0008)  
	bool                                               bEnableManualRotation;                                      // 0x02D8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x02D9   (0x0003)  MISSED
	float                                              IdleResetSeconds;                                           // 0x02DC   (0x0004)  
	float                                              IdleTransitionSeconds;                                      // 0x02E0   (0x0004)  
	bool                                               bLimitPitch;                                                // 0x02E4   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x02E5   (0x0003)  MISSED
	float                                              MaxPitch;                                                   // 0x02E8   (0x0004)  
	FRotator                                           IdleRotationSpeed;                                          // 0x02EC   (0x000C)  
	FRotator                                           IdleRotationStart;                                          // 0x02F8   (0x000C)  
	bool                                               bShowWeapon;                                                // 0x0304   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0305   (0x0003)  MISSED
	class AActor*                                      ActiveVisuals;                                              // 0x0308   (0x0008)  
	unsigned char                                      UnknownData04_7[0x70];                                      // 0x0310   (0x0070)  MISSED
};

/// Struct /Script/Indiana.AkPlaySoundState
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FAkPlaySoundState
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Indiana.AkPlaySoundStatePair
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FAkPlaySoundStatePair
{ 
	TWeakObjectPtr<class UAkPlaySoundEventEffect*>     EventEffect;                                                // 0x0000   (0x0008)  
	FAkPlaySoundState                                  State;                                                      // 0x0008   (0x0018)  
};

/// Struct /Script/Indiana.PlayFxState
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FPlayFxState
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Indiana.PlayFxPair
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FPlayFxPair
{ 
	TWeakObjectPtr<class UPlayFxEventEffect*>          EventEffect;                                                // 0x0000   (0x0008)  
	FPlayFxState                                       State;                                                      // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.EventEffectState
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FEventEffectState
{ 
	TArray<FAkPlaySoundStatePair>                      PlayAkSoundStateMap;                                        // 0x0000   (0x0010)  
	TArray<FPlayFxPair>                                PlayFxStateMap;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/Indiana.LocString
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FLocString
{ 
	int32_t                                            StringID;                                                   // 0x0000   (0x0004)  
	EStringTableType                                   TableType;                                                  // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Indiana.StatusEffect
/// Size: 0x0188 (392 bytes) (0x000030 - 0x000188) align 8 MaxSize: 0x0188
class UStatusEffect : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x50];                                      // 0x0030   (0x0050)  MISSED
	FEventEffectState                                  EventEffectState;                                           // 0x0080   (0x0020)  
	class UClass*                                      ParentSpell;                                                // 0x00A0   (0x0008)  
	unsigned char                                      UnknownData01_6[0x56];                                      // 0x00A8   (0x0056)  MISSED
	EStatusEffectInitialApplicationType                InitialApplicationType;                                     // 0x00FE   (0x0001)  
	EStatusEffectDurationType                          DurationType;                                               // 0x00FF   (0x0001)  
	ESkill                                             OriginOffensiveSkill;                                       // 0x0100   (0x0001)  
	EAttribute                                         TargetDefensiveAttribute;                                   // 0x0101   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0102   (0x0002)  MISSED
	float                                              Duration;                                                   // 0x0104   (0x0004)  
	float                                              MaxDuration;                                                // 0x0108   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	class URpgStat*                                    DurationStat;                                               // 0x0110   (0x0008)  
	bool                                               bDurationIgnoresTimeDilation;                               // 0x0118   (0x0001)  
	EStatusEffectApplicationType                       ApplicationType;                                            // 0x0119   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x011A   (0x0002)  MISSED
	float                                              Interval;                                                   // 0x011C   (0x0004)  
	bool                                               bIsHostile;                                                 // 0x0120   (0x0001)  
	bool                                               bProhibitsConversations;                                    // 0x0121   (0x0001)  
	bool                                               bDurationAlwaysAffected;                                    // 0x0122   (0x0001)  
	ESkill                                             Skill;                                                      // 0x0123   (0x0001)  
	float                                              MaxSkillValue;                                              // 0x0124   (0x0004)  
	bool                                               bSkillFromCaster;                                           // 0x0128   (0x0001)  
	bool                                               bRemoveWithSpell;                                           // 0x0129   (0x0001)  
	bool                                               bAllowOnDead;                                               // 0x012A   (0x0001)  
	bool                                               bRestoreSpellReference;                                     // 0x012B   (0x0001)  
	bool                                               bSavePermanentStatusEffect;                                 // 0x012C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x012D   (0x0003)  MISSED
	FLocString                                         EffectName;                                                 // 0x0130   (0x0008)  
	FLocString                                         EffectDescription;                                          // 0x0138   (0x0008)  
	class UEventEffects*                               StartEventEffects;                                          // 0x0140   (0x0008)  
	class UEventEffects*                               ApplyEventEffects;                                          // 0x0148   (0x0008)  
	class UEventEffects*                               EndEventEffects;                                            // 0x0150   (0x0008)  
	class UStatusEffectUIVisualsData*                  UIVisualsData;                                              // 0x0158   (0x0008)  
	FLocString                                         DescriptionFormat;                                          // 0x0160   (0x0008)  
	bool                                               bDontDisplayDescription;                                    // 0x0168   (0x0001)  
	bool                                               bDontDisplayNameInDescription;                              // 0x0169   (0x0001)  
	bool                                               bAppendDescriptionToPrevious;                               // 0x016A   (0x0001)  
	unsigned char                                      UnknownData06_6[0x5];                                       // 0x016B   (0x0005)  MISSED
	SDK_UNDEFINED(16,340) /* FMulticastInlineDelegate */ __um(OnClearStatusEffect);                                // 0x0170   (0x0010)  
	bool                                               bUseXFHSkillScaling;                                        // 0x0180   (0x0001)  
	bool                                               bForceApplyOnStart;                                         // 0x0181   (0x0001)  
	unsigned char                                      UnknownData07_7[0x6];                                       // 0x0182   (0x0006)  MISSED


	/// Functions
	// Function /Script/Indiana.StatusEffect.ReceiveClearEffect
	// void ReceiveClearEffect(class AActor* Target);                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusEffect.ReceiveApplyEffect
	// void ReceiveApplyEffect(class AActor* Target, float Ratio, bool bRestoredFromSave);                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusEffect.GetStatusEffectOriginActor
	// class AActor* GetStatusEffectOriginActor();                                                                              // [0x18c8310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.AdjustCCCooldownStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UAdjustCCCooldownStatusEffect : public UStatusEffect
{ 
public:
	ECompanionCommand                                  Command;                                                    // 0x0188   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0189   (0x0003)  MISSED
	float                                              CooldownScalar;                                             // 0x018C   (0x0004)  
};

/// Class /Script/Indiana.AdjustDurationStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UAdjustDurationStatusEffect : public UStatusEffect
{ 
public:
	float                                              Modifier;                                                   // 0x0188   (0x0004)  
	bool                                               bHostileOnly;                                               // 0x018C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x018D   (0x0003)  MISSED
};

/// Class /Script/Indiana.AICastSpell_AnimNotify
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align 8 MaxSize: 0x0048
class UAICastSpell_AnimNotify : public UAnimNotify
{ 
public:
	class UClass*                                      SpellType;                                                  // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.AICastSpell_AnimNotifyState
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UAICastSpell_AnimNotifyState : public UAnimNotifyState
{ 
public:
	FGameplayTag                                       TriggerEvent;                                               // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.SpawnBehavior_AnimNotify
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class USpawnBehavior_AnimNotify : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AIDecisionUpdate
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIDecisionUpdate : public UObject
{ 
public:
};

/// Class /Script/Indiana.AIDecisionUpdate_Mantisaur
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UAIDecisionUpdate_Mantisaur : public UAIDecisionUpdate
{ 
public:
	float                                              DistanceToBlock;                                            // 0x0030   (0x0004)  
	float                                              DistanceToUnblock;                                          // 0x0034   (0x0004)  
};

/// Class /Script/Indiana.AIDecisionUpdate_Mantiqueen
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UAIDecisionUpdate_Mantiqueen : public UAIDecisionUpdate
{ 
public:
	float                                              FireBreathCooldown;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Indiana.AIDecisionUpdate_HealDrone
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UAIDecisionUpdate_HealDrone : public UAIDecisionUpdate
{ 
public:
	float                                              ReevaulateHealCooldown;                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Indiana.AIDecisionUpdate_CanidHowl
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UAIDecisionUpdate_CanidHowl : public UAIDecisionUpdate
{ 
public:
	float                                              HowlCooldown;                                               // 0x0030   (0x0004)  
	float                                              PercentChanceToHowl;                                        // 0x0034   (0x0004)  
	int32_t                                            HowlCount;                                                  // 0x0038   (0x0004)  
	bool                                               bHowlOnEnter;                                               // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_7[0xB];                                       // 0x003D   (0x000B)  MISSED
};

/// Class /Script/Indiana.AIDecisionUpdate_ShieldBot
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UAIDecisionUpdate_ShieldBot : public UAIDecisionUpdate
{ 
public:
	float                                              ChargeCooldown;                                             // 0x0030   (0x0004)  
	float                                              MinDistanceToTarget;                                        // 0x0034   (0x0004)  
	float                                              JumpCooldown;                                               // 0x0038   (0x0004)  
	float                                              JumpDistanceToTarget;                                       // 0x003C   (0x0004)  
};

/// Class /Script/Indiana.AIDefensiveActionsComponent
/// Size: 0x0120 (288 bytes) (0x0000E0 - 0x000120) align 8 MaxSize: 0x0120
class UAIDefensiveActionsComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x00E0   (0x0040)  MISSED


	/// Functions
	// Function /Script/Indiana.AIDefensiveActionsComponent.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x1780240] Final|Native|Public|HasOutParms 
};

/// Class /Script/Indiana.AIDetectionComponent
/// Size: 0x0218 (536 bytes) (0x0000E0 - 0x000218) align 8 MaxSize: 0x0218
class UAIDetectionComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x00E0   (0x0018)  MISSED
	SDK_UNDEFINED(16,341) /* FMulticastInlineDelegate */ __um(OnAlertStateChange);                                 // 0x00F8   (0x0010)  
	SDK_UNDEFINED(16,342) /* FMulticastInlineDelegate */ __um(OnPlayerProximityChange);                            // 0x0108   (0x0010)  
	unsigned char                                      UnknownData01_7[0x100];                                     // 0x0118   (0x0100)  MISSED


	/// Functions
	// Function /Script/Indiana.AIDetectionComponent.OnPlayerKill
	// void OnPlayerKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                              // [0x1780150] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.AIDetectionComponent.OnPerceptionUpdate
	// void OnPerceptionUpdate(class AActor* Actor, FAIStimulus Stimulus);                                                      // [0x177ffc0] Final|Native|Private 
	// Function /Script/Indiana.AIDetectionComponent.OnDetectedNonHostileCombatStateChange
	// void OnDetectedNonHostileCombatStateChange(bool bIsInCombat, bool bRestoring);                                           // [0x177fc50] Final|Native|Private 
};

/// Class /Script/Indiana.AIEventInfo
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIEventInfo : public UObject
{ 
public:
};

/// Class /Script/Indiana.AIEventInfo_Location
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UAIEventInfo_Location : public UAIEventInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/Indiana.AIEventInfo_Direction
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UAIEventInfo_Direction : public UAIEventInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/Indiana.AIEventInfo_Actor
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UAIEventInfo_Actor : public UAIEventInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Indiana.AIEventInfo_StatusEffect
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UAIEventInfo_StatusEffect : public UAIEventInfo
{ 
public:
	class UStatusEffect*                               StatusEffect;                                               // 0x0030   (0x0008)  
};

/// Class /Script/Indiana.AIEventInfo_Spell
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UAIEventInfo_Spell : public UAIEventInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0030   (0x0018)  MISSED
};

/// Class /Script/Indiana.AIEventInfo_CalledShot
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UAIEventInfo_CalledShot : public UAIEventInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0030   (0x0018)  MISSED
};

/// Class /Script/Indiana.AIEventInfo_Behavior
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UAIEventInfo_Behavior : public UAIEventInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/Indiana.AIEventInfo_Float
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UAIEventInfo_Float : public UAIEventInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Indiana.AIEventInfo_Transform
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align 16 MaxSize: 0x0060
class UAIEventInfo_Transform : public UAIEventInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0030   (0x0030)  MISSED
};

/// Class /Script/Indiana.InteractionComponent
/// Size: 0x00F0 (240 bytes) (0x0000E0 - 0x0000F0) align 8 MaxSize: 0x00F0
class UInteractionComponent : public UActorComponent
{ 
public:
	float                                              MaxInteractRange;                                           // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x00E4   (0x000C)  MISSED
};

/// Class /Script/Indiana.AIInteractionComponent
/// Size: 0x0140 (320 bytes) (0x0000F0 - 0x000140) align 8 MaxSize: 0x0140
class UAIInteractionComponent : public UInteractionComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x00F0   (0x0050)  MISSED


	/// Functions
	// Function /Script/Indiana.AIInteractionComponent.OnNavigationPathUpdate
	// void OnNavigationPathUpdate();                                                                                           // [0x1783ff0] Final|Native|Private 
};

/// Struct /Script/Indiana.AimAssistConfig
/// Size: 0x01C0 (448 bytes) (0x000000 - 0x0001C0) align 8 MaxSize: 0x01C0
struct FAimAssistConfig
{ 
	float                                              TargetLockHorizontalRate;                                   // 0x0000   (0x0004)  
	float                                              TargetLockStrength;                                         // 0x0004   (0x0004)  
	float                                              TargetLockNoTouchDuration;                                  // 0x0008   (0x0004)  
	float                                              TargetLockNoTouchFadeTime;                                  // 0x000C   (0x0004)  
	float                                              TrackQuickTargetInputThreshold;                             // 0x0010   (0x0004)  
	float                                              TrackQuickTargetIdleTime;                                   // 0x0014   (0x0004)  
	float                                              TrackQuickTargetDuration;                                   // 0x0018   (0x0004)  
	float                                              TrackQuickTargetMinVelocity;                                // 0x001C   (0x0004)  
	float                                              TrackQuickTargetHorizontalRate;                             // 0x0020   (0x0004)  
	float                                              TrackQuickTargetVerticalRate;                               // 0x0024   (0x0004)  
	FRuntimeFloatCurve                                 FrictionInputCurve;                                         // 0x0028   (0x0088)  
	FRuntimeFloatCurve                                 FrictionStrengthTowardsTargetCurve;                         // 0x00B0   (0x0088)  
	FRuntimeFloatCurve                                 FrictionStrengthAwayFromTargetCurve;                        // 0x0138   (0x0088)  
};

/// Class /Script/Indiana.AimAssistComponent
/// Size: 0x05E0 (1504 bytes) (0x0000E0 - 0x0005E0) align 16 MaxSize: 0x05E0
class UAimAssistComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	TArray<float>                                      DifficultyBulletScalars;                                    // 0x00E8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x315];                                     // 0x00F8   (0x0315)  MISSED
	bool                                               bAimAssistEnabled;                                          // 0x040D   (0x0001)  
	bool                                               bFrictionEnabled;                                           // 0x040E   (0x0001)  
	bool                                               bTargetStrafeLockEnabled;                                   // 0x040F   (0x0001)  
	bool                                               bBulletMagnetismEnabled;                                    // 0x0410   (0x0001)  
	bool                                               bBulletMagnetIgnoreSpread;                                  // 0x0411   (0x0001)  
	bool                                               bTrackQuickTargetEnabled;                                   // 0x0412   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0413   (0x0001)  MISSED
	float                                              TrackForcedTargetDivisor;                                   // 0x0414   (0x0004)  
	float                                              FrictionInTime;                                             // 0x0418   (0x0004)  
	float                                              FrictionOutTime;                                            // 0x041C   (0x0004)  
	FAimAssistConfig                                   DefaultAimAssistConfig;                                     // 0x0420   (0x01C0)  


	/// Functions
	// Function /Script/Indiana.AimAssistComponent.ToggleTrackQuickTarget
	// void ToggleTrackQuickTarget();                                                                                           // [0x1784220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.ToggleTargetStrafeLock
	// void ToggleTargetStrafeLock();                                                                                           // [0x17841f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.ToggleFriction
	// void ToggleFriction();                                                                                                   // [0x17841c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.ToggleBulletMagnetism
	// void ToggleBulletMagnetism();                                                                                            // [0x1784190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.ToggleAimAssist
	// void ToggleAimAssist();                                                                                                  // [0x1784160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty NewDifficulty);                                                                 // [0x1783c00] Final|Native|Protected 
	// Function /Script/Indiana.AimAssistComponent.EnableAimAssist
	// void EnableAimAssist(bool Enabled);                                                                                      // [0x1783b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.AimAssistVisualSpread
	// void AimAssistVisualSpread(bool bEnable);                                                                                // [0x1783ae0] Final|Exec|Native|Public 
	// Function /Script/Indiana.AimAssistComponent.AimAssistVisualFriction
	// void AimAssistVisualFriction(bool bEnable);                                                                              // [0x1783a50] Final|Exec|Native|Public 
	// Function /Script/Indiana.AimAssistComponent.AimAssistVisualBulletMagnetism
	// void AimAssistVisualBulletMagnetism(bool bEnable);                                                                       // [0x17839c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.AimAssistComponent.AimAssistVisualAdhesion
	// void AimAssistVisualAdhesion(bool bEnable);                                                                              // [0x1783930] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.AimAssistData
/// Size: 0x0068 (104 bytes) (0x000038 - 0x000068) align 8 MaxSize: 0x0068
class UAimAssistData : public UDataAsset
{ 
public:
	float                                              AimAssistScalar;                                            // 0x0038   (0x0004)  
	float                                              RangeTooCloseMin;                                           // 0x003C   (0x0004)  
	float                                              RangeTooCloseMax;                                           // 0x0040   (0x0004)  
	float                                              RangeTooFarMin;                                             // 0x0044   (0x0004)  
	float                                              RangeTooFarMax;                                             // 0x0048   (0x0004)  
	bool                                               bBulletMagnetism;                                           // 0x004C   (0x0001)  
	bool                                               bBulletMagnetIgnoreSpread;                                  // 0x004D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x004E   (0x0002)  MISSED
	float                                              BulletMagnetismPercent;                                     // 0x0050   (0x0004)  
	float                                              FrictionConeDegrees;                                        // 0x0054   (0x0004)  
	float                                              AdhesionConeDegrees;                                        // 0x0058   (0x0004)  
	float                                              FrictionPercent;                                            // 0x005C   (0x0004)  
	float                                              AdhesionPercent;                                            // 0x0060   (0x0004)  
	bool                                               bAllSockets;                                                // 0x0064   (0x0001)  
	bool                                               bStrictCursorOver;                                          // 0x0065   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0066   (0x0002)  MISSED
};

/// Class /Script/Indiana.IndianaCharMovementComponent
/// Size: 0x0E00 (3584 bytes) (0x000B60 - 0x000E00) align 16 MaxSize: 0x0E00
class UIndianaCharMovementComponent : public UCharacterMovementComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0B60   (0x0010)  MISSED
	SDK_UNDEFINED(16,343) /* FMulticastInlineDelegate */ __um(OnJumped);                                           // 0x0B70   (0x0010)  
	SDK_UNDEFINED(16,344) /* FMulticastInlineDelegate */ __um(OnLanded);                                           // 0x0B80   (0x0010)  
	SDK_UNDEFINED(16,345) /* FMulticastInlineDelegate */ __um(OnLandedExtended);                                   // 0x0B90   (0x0010)  
	SDK_UNDEFINED(16,346) /* FMulticastInlineDelegate */ __um(OnStartCrouch);                                      // 0x0BA0   (0x0010)  
	SDK_UNDEFINED(16,347) /* FMulticastInlineDelegate */ __um(OnStopCrouch);                                       // 0x0BB0   (0x0010)  
	SDK_UNDEFINED(16,348) /* FMulticastInlineDelegate */ __um(OnCrouchComplete);                                   // 0x0BC0   (0x0010)  
	SDK_UNDEFINED(16,349) /* FMulticastInlineDelegate */ __um(OnStartSprint);                                      // 0x0BD0   (0x0010)  
	SDK_UNDEFINED(16,350) /* FMulticastInlineDelegate */ __um(OnStopSprint);                                       // 0x0BE0   (0x0010)  
	float                                              SprintSpeed;                                                // 0x0BF0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x54];                                      // 0x0BF4   (0x0054)  MISSED
	float                                              CrouchTime;                                                 // 0x0C48   (0x0004)  
	float                                              UncrouchTime;                                               // 0x0C4C   (0x0004)  
	float                                              FineAimSpeedMultiplier;                                     // 0x0C50   (0x0004)  
	float                                              BlockSpeedMultiplier;                                       // 0x0C54   (0x0004)  
	class URpgStat*                                    BlockSpeedMultStat;                                         // 0x0C58   (0x0008)  
	float                                              SprintTurnRateMultiplier;                                   // 0x0C60   (0x0004)  
	float                                              SprintStrafeRateMultiplier;                                 // 0x0C64   (0x0004)  
	float                                              SprintStaminaDrainRate;                                     // 0x0C68   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0C6C   (0x0004)  MISSED
	class UClass*                                      FallingDamageType;                                          // 0x0C70   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x0C78   (0x0020)  MISSED
	SDK_UNDEFINED(16,351) /* FMulticastInlineDelegate */ __um(OnDodged);                                           // 0x0C98   (0x0010)  
	SDK_UNDEFINED(16,352) /* FMulticastInlineDelegate */ __um(OnStartClimb);                                       // 0x0CA8   (0x0010)  
	SDK_UNDEFINED(16,353) /* FMulticastInlineDelegate */ __um(OnStopClimb);                                        // 0x0CB8   (0x0010)  
	float                                              ClimbSpeed;                                                 // 0x0CC8   (0x0004)  
	bool                                               bCanClimb;                                                  // 0x0CCC   (0x0001)  
	unsigned char                                      UnknownData04_6[0xB];                                       // 0x0CCD   (0x000B)  MISSED
	SDK_UNDEFINED(16,354) /* FMulticastInlineDelegate */ __um(OnOccupiedNavAreaChanged);                           // 0x0CD8   (0x0010)  
	unsigned char                                      UnknownData05_6[0x98];                                      // 0x0CE8   (0x0098)  MISSED
	SDK_UNDEFINED(16,355) /* FMulticastInlineDelegate */ __um(OnNewFootstepData);                                  // 0x0D80   (0x0010)  
	SDK_UNDEFINED(16,356) /* FMulticastInlineDelegate */ __um(OnFootstep);                                         // 0x0D90   (0x0010)  
	SDK_UNDEFINED(16,357) /* FMulticastInlineDelegate */ __um(OnSpecialMovementEvent);                             // 0x0DA0   (0x0010)  
	SDK_UNDEFINED(16,358) /* FMulticastInlineDelegate */ __um(OnDodgedExt);                                        // 0x0DB0   (0x0010)  
	SDK_UNDEFINED(16,359) /* FMulticastInlineDelegate */ __um(OnLandedExt);                                        // 0x0DC0   (0x0010)  
	class UFootstepData*                               DefaultFootstepData;                                        // 0x0DD0   (0x0008)  
	class UFootstepData*                               OverrideFootstepData;                                       // 0x0DD8   (0x0008)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0DE0   (0x0008)  MISSED
	float                                              ControllerSprintToggleDoubleClickWindow;                    // 0x0DE8   (0x0004)  
	unsigned char                                      UnknownData07_7[0x14];                                      // 0x0DEC   (0x0014)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaCharMovementComponent.OnBumped
	// void OnBumped(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);                // [0x18469c0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Struct /Script/Indiana.ExtremaOverlap
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FExtremaOverlap
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	TWeakObjectPtr<class AIndianaCharacter*>           Overlapper;                                                 // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Class /Script/Indiana.AIMovementComponent
/// Size: 0x0F50 (3920 bytes) (0x000E00 - 0x000F50) align 16 MaxSize: 0x0F50
class UAIMovementComponent : public UIndianaCharMovementComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0E00   (0x0030)  MISSED
	float                                              WalkSpeed;                                                  // 0x0E30   (0x0004)  
	float                                              CombatWalkSpeed;                                            // 0x0E34   (0x0004)  
	float                                              RunSpeed;                                                   // 0x0E38   (0x0004)  
	float                                              CrouchWalkSpeed;                                            // 0x0E3C   (0x0004)  
	bool                                               bAllowNavWalkingOptimizations;                              // 0x0E40   (0x0001)  
	unsigned char                                      UnknownData01_6[0x17];                                      // 0x0E41   (0x0017)  MISSED
	bool                                               bElongated;                                                 // 0x0E58   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0E59   (0x0003)  MISSED
	float                                              ElongatedCapsuleLength;                                     // 0x0E5C   (0x0004)  
	float                                              ElongatedCapsuleHeight;                                     // 0x0E60   (0x0004)  
	float                                              ElongatedCapsuleOverlapPadding;                             // 0x0E64   (0x0004)  
	float                                              ElongatedCapsuleHorizontalOffset;                           // 0x0E68   (0x0004)  
	float                                              ElongatedCapsuleVerticalOffset;                             // 0x0E6C   (0x0004)  
	float                                              ElongatedBumpFallingLateralFriction;                        // 0x0E70   (0x0004)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x0E74   (0x000C)  MISSED
	class USceneComponent*                             ExtremaSceneComponent;                                      // 0x0E80   (0x0008)  
	class UCapsuleComponent*                           ExtremaOverlapper;                                          // 0x0E88   (0x0008)  
	class UCapsuleComponent*                           ExtremaBlocker;                                             // 0x0E90   (0x0008)  
	TArray<FExtremaOverlap>                            ExtremaOverlaps;                                            // 0x0E98   (0x0010)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0EA8   (0x0004)  MISSED
	float                                              JumpDownClearance;                                          // 0x0EAC   (0x0004)  
	float                                              JumpUpClearance;                                            // 0x0EB0   (0x0004)  
	float                                              JumpAcrossClearance;                                        // 0x0EB4   (0x0004)  
	float                                              JumpMaxXYSpeed;                                             // 0x0EB8   (0x0004)  
	float                                              JumpGravityScalar;                                          // 0x0EBC   (0x0004)  
	SDK_UNDEFINED(16,360) /* FMulticastInlineDelegate */ __um(OnAIStartTraverse);                                  // 0x0EC0   (0x0010)  
	unsigned char                                      UnknownData05_6[0x28];                                      // 0x0ED0   (0x0028)  MISSED
	SDK_UNDEFINED(16,361) /* FMulticastInlineDelegate */ __um(OnStationaryRotateEnd);                              // 0x0EF8   (0x0010)  
	unsigned char                                      UnknownData06_7[0x48];                                      // 0x0F08   (0x0048)  MISSED


	/// Functions
	// Function /Script/Indiana.AIMovementComponent.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x17840e0] Final|Native|Protected 
	// Function /Script/Indiana.AIMovementComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x1784010] Final|Native|Protected 
	// Function /Script/Indiana.AIMovementComponent.OnExtremaEndOverlap
	// void OnExtremaEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1783ea0] Native|Protected     
	// Function /Script/Indiana.AIMovementComponent.OnExtremaBeginOverlap
	// void OnExtremaBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1783c80] Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.AIPossessable
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIPossessable : public UInterface
{ 
public:
};

/// Class /Script/Indiana.AI_AIAction
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_AIAction : public UObject
{ 
public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeAction
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPatrol_PatrolNodeAction : public UAI_AIAction
{ 
public:
};

/// Class /Script/Indiana.AIActor
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIActor : public UObject
{ 
public:
};

/// Class /Script/Indiana.AIActorWritable
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIActorWritable : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.General_Player
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_Player : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTarget : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.General_DecisionTreeActor
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_DecisionTreeActor : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.General_Self
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_Self : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.Patrol_PatrolNode
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPatrol_PatrolNode : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.Patrol_PatrolNode_LookAtOverride
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPatrol_PatrolNode_LookAtOverride : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.Furniture_LookAtOverride
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFurniture_LookAtOverride : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.Cover_CurrentCoverNode
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCover_CurrentCoverNode : public UAIActorWritable
{ 
public:
};

/// Class /Script/Indiana.CompanionFollow_Target
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionFollow_Target : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.CompanionFollow_Position
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionFollow_Position : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.Follow_Target
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFollow_Target : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.General_HealTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_HealTarget : public UAIActor
{ 
public:
};

/// Class /Script/Indiana.AIBool
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIBool : public UObject
{ 
public:
};

/// Class /Script/Indiana.AIBoolWriteable
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIBoolWriteable : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_True
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_True : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Settings_MovingFireEnabled
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MovingFireEnabled : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Settings_WalkingFireEnabled
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_WalkingFireEnabled : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_ShouldServiceExitTask
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_ShouldServiceExitTask : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_ShouldFaceTargetWhileMoving
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_ShouldFaceTargetWhileMoving : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_IsWeaponRanged
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_IsWeaponRanged : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_ShouldScope
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_ShouldScope : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_IsFullyCrouched
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_IsFullyCrouched : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_IsFullyUncrouched
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_IsFullyUncrouched : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_IsMoveToSuccessful
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_IsMoveToSuccessful : public UAIBoolWriteable
{ 
public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeOrientOnArrival
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPatrol_PatrolNodeOrientOnArrival : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeLookAtWhileWalking
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPatrol_PatrolNodeLookAtWhileWalking : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Patrol_PatrolRunMovementStateEnabled
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPatrol_PatrolRunMovementStateEnabled : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeActionInfiniteDuration
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPatrol_PatrolNodeActionInfiniteDuration : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Follow_ClearTargetDetection
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFollow_ClearTargetDetection : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Follow_Retreating
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFollow_Retreating : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Follow_IsCompanionCommandOrClearTargetDetection
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFollow_IsCompanionCommandOrClearTargetDetection : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.CalledShot_IsTargetReactionComplete
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCalledShot_IsTargetReactionComplete : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.CalledShot_IsAttackAnimationComplete
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCalledShot_IsAttackAnimationComplete : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.SwitchWeapon_IsInstant
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USwitchWeapon_IsInstant : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Jump_ShouldRotateToFaceTargetMidAir
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UJump_ShouldRotateToFaceTargetMidAir : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Search_ShouldFire
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_ShouldFire : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Search_ShouldStationaryFire
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_ShouldStationaryFire : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Search_HasNoQueuedDecisionTreeRequest
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_HasNoQueuedDecisionTreeRequest : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Search_RequiresReachable
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_RequiresReachable : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Search_ShouldIgnoreCollisionDuringTargetApproach
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_ShouldIgnoreCollisionDuringTargetApproach : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Search_ShouldBumpDuringTargetApproach
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_ShouldBumpDuringTargetApproach : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Search_ShouldSprintDuringTargetApproach
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_ShouldSprintDuringTargetApproach : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.OnRails_ShouldChase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UOnRails_ShouldChase : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.OnRails_IsOnRails
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UOnRails_IsOnRails : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Melee_UseAdaptiveRootMotion
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMelee_UseAdaptiveRootMotion : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Melee_IsPatternComplete
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMelee_IsPatternComplete : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Melee_ShouldLookAtTargetDuringRecovery
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMelee_ShouldLookAtTargetDuringRecovery : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Melee_ShouldIgnoreCollisionDuringApproach
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMelee_ShouldIgnoreCollisionDuringApproach : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Melee_ShouldBumpDuringApproach
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMelee_ShouldBumpDuringApproach : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Melee_ShouldSprintDuringApproach
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMelee_ShouldSprintDuringApproach : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Furniture_ShouldComplete
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFurniture_ShouldComplete : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.CompanionCommandMoveTo_StationaryAttackEnabled
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionCommandMoveTo_StationaryAttackEnabled : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.CompanionCommandMoveTo_MovingAttackEnabled
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionCommandMoveTo_MovingAttackEnabled : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Cower_ShouldCower
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCower_ShouldCower : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.MoveTo_ShouldFaceTargetWhileWaiting
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMoveTo_ShouldFaceTargetWhileWaiting : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Spawn_IsFinishedSpawning
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USpawn_IsFinishedSpawning : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.Conversation_ShouldTeleport
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UConversation_ShouldTeleport : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_CanSeeHealTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_CanSeeHealTarget : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.General_IsFinishedWatchingKilledTeammate
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_IsFinishedWatchingKilledTeammate : public UAIBool
{ 
public:
};

/// Class /Script/Indiana.AIEQSParameter
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIEQSParameter : public UObject
{ 
public:
};

/// Class /Script/Indiana.CompanionFollow_DefaultRadius
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionFollow_DefaultRadius : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionFollow_InnerRadius
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionFollow_InnerRadius : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionFollow_InnerPointAmount
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionFollow_InnerPointAmount : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionFollow_DefaultIdealAngle
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionFollow_DefaultIdealAngle : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionFollow_DefaultMinAngle
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionFollow_DefaultMinAngle : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionMoveTo_DefaultRadius
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionMoveTo_DefaultRadius : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionMoveTo_DefaultIdealAngle
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionMoveTo_DefaultIdealAngle : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionMoveTo_DefaultMinAngle
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionMoveTo_DefaultMinAngle : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_MinMoveDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MinMoveDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_MaxMoveDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MaxMoveDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_MaxMoveDistanceThreshold
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MaxMoveDistanceThreshold : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_MinPreferredRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MinPreferredRange : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_MaxPreferredRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MaxPreferredRange : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_AllowedCoverTypes
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_AllowedCoverTypes : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_FullHeight
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_FullHeight : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_RepositionType
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_RepositionType : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_MeleeRecoveryMoveMinDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MeleeRecoveryMoveMinDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_MeleeRecoveryMoveMaxDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MeleeRecoveryMoveMaxDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.MeleeSlot_NumRings
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMeleeSlot_NumRings : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.MeleeSlot_PointsPerRing
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMeleeSlot_PointsPerRing : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Wander_Radius
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWander_Radius : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Wander_MinMoveDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWander_MinMoveDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Wander_MaxMoveDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWander_MaxMoveDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Wander_MaxPathDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWander_MaxPathDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.RangedRepositionType_Stationary
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class URangedRepositionType_Stationary : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.RangedRepositionType_Strafe
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class URangedRepositionType_Strafe : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.RangedRepositionType_Forward
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class URangedRepositionType_Forward : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionCalledShot_MinMeleeRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionCalledShot_MinMeleeRange : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionCalledShot_MaxMeleeRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionCalledShot_MaxMeleeRange : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionCalledShot_MinLimitedRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionCalledShot_MinLimitedRange : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.CompanionCalledShot_MaxLimitedRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionCalledShot_MaxLimitedRange : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Townie_MaxFleeDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UTownie_MaxFleeDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_MaxUnmarkedFleeDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MaxUnmarkedFleeDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Settings_MaxUnmarkedFleePathDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MaxUnmarkedFleePathDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderRadius
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_DeadBodyWanderRadius : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderMinMoveDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_DeadBodyWanderMinMoveDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderMaxMoveDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_DeadBodyWanderMaxMoveDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderMaxPathDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_DeadBodyWanderMaxPathDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Search_WanderRadius
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_WanderRadius : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Search_WanderMinMoveDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_WanderMinMoveDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Search_WanderMaxMoveDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_WanderMaxMoveDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.Search_WanderMaxPathDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_WanderMaxPathDistance : public UAIEQSParameter
{ 
public:
};

/// Class /Script/Indiana.AIFiringPattern
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIFiringPattern : public UObject
{ 
public:
};

/// Class /Script/Indiana.Settings_StationaryFiringPattern
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_StationaryFiringPattern : public UAIFiringPattern
{ 
public:
};

/// Class /Script/Indiana.Settings_CoverFiringPattern
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_CoverFiringPattern : public UAIFiringPattern
{ 
public:
};

/// Class /Script/Indiana.Settings_MovingFiringPattern
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MovingFiringPattern : public UAIFiringPattern
{ 
public:
};

/// Class /Script/Indiana.Settings_CalledShotRangeFiringPattern
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_CalledShotRangeFiringPattern : public UAIFiringPattern
{ 
public:
};

/// Class /Script/Indiana.AIFValue
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIFValue : public UObject
{ 
public:
};

/// Class /Script/Indiana.Weapon_MinMeleeRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWeapon_MinMeleeRange : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Weapon_MaxMeleeRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWeapon_MaxMeleeRange : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Weapon_MaxMeleeRangeWithPadding
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWeapon_MaxMeleeRangeWithPadding : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Weapon_MeleeRecoveryMoveRandomChance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWeapon_MeleeRecoveryMoveRandomChance : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Weapon_MeleeRecoveryDodgeRandomChance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWeapon_MeleeRecoveryDodgeRandomChance : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Weapon_MeleeRecoveryMaxTargetDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWeapon_MeleeRecoveryMaxTargetDistance : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Weapon_MeleeAdapativeRootmotionStopDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWeapon_MeleeAdapativeRootmotionStopDistance : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Weapon_CalledShotMeleeAdapativeRootmotionStopDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWeapon_CalledShotMeleeAdapativeRootmotionStopDistance : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_MovingFirePrePauseTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MovingFirePrePauseTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_MaxPreferredRangeF
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MaxPreferredRangeF : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_MaxAbsoluteRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MaxAbsoluteRange : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_PreferredRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_PreferredRange : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_CoverWalkingDistanceThreshold
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_CoverWalkingDistanceThreshold : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_RangedRepositionWalkingDistanceThreshold
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_RangedRepositionWalkingDistanceThreshold : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_TargetLostTimeInitiallySeenRanged
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_TargetLostTimeInitiallySeenRanged : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_TargetLostTimeInitiallyUnseenRanged
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_TargetLostTimeInitiallyUnseenRanged : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_TargetLostTimeInitiallySeenCover
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_TargetLostTimeInitiallySeenCover : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_TargetLostTimeInitiallyUnseenCover
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_TargetLostTimeInitiallyUnseenCover : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_SuppressingFireTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_SuppressingFireTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_MinMeleeActionDelay
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MinMeleeActionDelay : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_MeleeRecoveryDelay
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MeleeRecoveryDelay : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_MeleeWaitDistance
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_MeleeWaitDistance : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_WanderIdleTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_WanderIdleTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_WeaponPauseTimeFuzz
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_WeaponPauseTimeFuzz : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_CompanionCommandHunkerDownDuration
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_CompanionCommandHunkerDownDuration : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_CompanionCommandFlankDuration
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_CompanionCommandFlankDuration : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_CompanionCommandSuppressDuration
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_CompanionCommandSuppressDuration : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_DelayDodge
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_DelayDodge : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_DelayMeleeBlock
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_DelayMeleeBlock : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_CompanionCommandSuppressLostTargetTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_CompanionCommandSuppressLostTargetTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Settings_CompanionCommandFlankLostTargetTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USettings_CompanionCommandFlankLostTargetTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Follow_TeleportRotation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFollow_TeleportRotation : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Conversation_TeleportRotation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UConversation_TeleportRotation : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Wander_WanderRadius
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWander_WanderRadius : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Search_UnreachableWaitTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_UnreachableWaitTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Search_WanderIdleTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USearch_WanderIdleTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Teleport_TeleportDuration
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UTeleport_TeleportDuration : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Teleport_TeleportTargetRotation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UTeleport_TeleportTargetRotation : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Follow_MinRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFollow_MinRange : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Follow_MaxRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFollow_MaxRange : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.SpellTarget_MaxRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USpellTarget_MaxRange : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.SpellTarget_MinRange
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USpellTarget_MinRange : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Investigate_PreMoveWaitTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_PreMoveWaitTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Investigate_ArrivalRadius
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_ArrivalRadius : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderIdleTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_DeadBodyWanderIdleTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Investigate_SeeKilledTeammateTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_SeeKilledTeammateTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Investigate_EndWaitTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_EndWaitTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Investigate_StimulusUpdateMinDuration
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_StimulusUpdateMinDuration : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Investigate_ExitChatterTriggerTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInvestigate_ExitChatterTriggerTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.Furniture_EntryAcceptanceRadius
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFurniture_EntryAcceptanceRadius : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.MoveTo_ArrivalWaitTime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMoveTo_ArrivalWaitTime : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.CalledShot_CameraCutDelay
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCalledShot_CameraCutDelay : public UAIFValue
{ 
public:
};

/// Class /Script/Indiana.AIInt
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAIInt : public UObject
{ 
public:
};

/// Class /Script/Indiana.CalledShot_FireIndex
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCalledShot_FireIndex : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.FiringPatternComplete_FinishBehavior
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFiringPatternComplete_FinishBehavior : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.FiringPatternComplete_FinishTask
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFiringPatternComplete_FinishTask : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.FiringPatternComplete_Repeat
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFiringPatternComplete_Repeat : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.FiringPatternComplete_Cover
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFiringPatternComplete_Cover : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.MeleeAction_CurrentRequest
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMeleeAction_CurrentRequest : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.MeleeAction_RecoveryDodgeDirection
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMeleeAction_RecoveryDodgeDirection : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.WeaponSlot_CurrentRequest
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWeaponSlot_CurrentRequest : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.Context_CurrentRequest
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UContext_CurrentRequest : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.Dodge_Direction
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UDodge_Direction : public UAIInt
{ 
public:
};

/// Class /Script/Indiana.AILocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAILocation : public UObject
{ 
public:
};

/// Class /Script/Indiana.AILocationWritable
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAILocationWritable : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_MoveLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_MoveLocation : public UAILocationWritable
{ 
public:
};

/// Class /Script/Indiana.General_DecisionTreeLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_DecisionTreeLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_DecisionTreeActorLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_DecisionTreeActorLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_CurrentLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_CurrentLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetStimulusLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetStimulusLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetAimLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetAimLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetHeadLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetHeadLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetCheatAimLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetCheatAimLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetCheatHeadLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetCheatHeadLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetMovingAimLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetMovingAimLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetMovingHeadLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetMovingHeadLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetSphereCheatLocaiton
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetSphereCheatLocaiton : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetStimulusSourceActorLocaiton
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetStimulusSourceActorLocaiton : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_PrimaryTargetProjectedStimulusLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_PrimaryTargetProjectedStimulusLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_RandomNearbyLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_RandomNearbyLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_VantageLocationForPrimaryTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_VantageLocationForPrimaryTarget : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_FurthestLocationOnSpline
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_FurthestLocationOnSpline : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Cover_CoverFiringLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCover_CoverFiringLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Cover_CoverFiringAimLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCover_CoverFiringAimLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Cover_CoverIntoCoverFiringAim
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCover_CoverIntoCoverFiringAim : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Cover_CoverLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCover_CoverLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Cover_CoverWallLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCover_CoverWallLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Melee_BodyAttackingTargetLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMelee_BodyAttackingTargetLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeOrientationLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPatrol_PatrolNodeOrientationLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Follow_TeleportLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFollow_TeleportLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Conversation_TeleportLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UConversation_TeleportLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Follow_FollowTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFollow_FollowTarget : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Wander_Origin
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWander_Origin : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Idle_Origin
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UIdle_Origin : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Idle_OrientationLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UIdle_OrientationLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Furniture_EntryLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFurniture_EntryLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Furniture_ProjectedEntryLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFurniture_ProjectedEntryLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Furniture_ExitLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFurniture_ExitLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Furniture_RotationLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFurniture_RotationLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Jump_StartLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UJump_StartLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Jump_EndLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UJump_EndLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Crouch_StartLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCrouch_StartLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Crouch_EndLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCrouch_EndLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Walk_StartLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWalk_StartLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.Walk_EndLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UWalk_EndLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.CompanionCommand_MoveTo
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCompanionCommand_MoveTo : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.General_HealTargetLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UGeneral_HealTargetLocation : public UAILocation
{ 
public:
};

/// Class /Script/Indiana.AI_UObject
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_UObject : public UObject
{ 
public:
};

/// Class /Script/Indiana.AI_DisableStatusEffect
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_DisableStatusEffect : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AI_FleeStatusEffect
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_FleeStatusEffect : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AI_PersuadeStatusEffect
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_PersuadeStatusEffect : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AI_TeleportStartAnimation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_TeleportStartAnimation : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AI_TeleportEmergingAnimation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_TeleportEmergingAnimation : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AI_TeleportExitAnimation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_TeleportExitAnimation : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AI_TeleportEQS
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_TeleportEQS : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AI_SpawnActorAnimation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_SpawnActorAnimation : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AI_CowerAnimation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_CowerAnimation : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AI_AnimationStateAnimation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAI_AnimationStateAnimation : public UAI_UObject
{ 
public:
};

/// Class /Script/Indiana.AISettings_Behavior
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAISettings_Behavior : public UObject
{ 
public:
};

/// Struct /Script/Indiana.DefensiveActionElement
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 MaxSize: 0x0004
struct FDefensiveActionElement
{ 
	float                                              Probability;                                                // 0x0000   (0x0004)  
};

/// Struct /Script/Indiana.ReactiveToMeleeElement
/// Size: 0x0060 (96 bytes) (0x000004 - 0x000060) align 8 MaxSize: 0x0060
struct FReactiveToMeleeElement : FDefensiveActionElement
{ 
	float                                              PerMeleeHitModifier;                                        // 0x0004   (0x0004)  
	float                                              MaxProbability;                                             // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TMap<EMeleeAction, float>                          MeleeActionProbabilityOverrides;                            // 0x0010   (0x0050)  
};

/// Struct /Script/Indiana.ReactiveToRangeElement
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FReactiveToRangeElement
{ 
	float                                              MinSustainFireDuration;                                     // 0x0000   (0x0004)  
	float                                              MaxSustainFireDuration;                                     // 0x0004   (0x0004)  
	float                                              SustainFirePauseDuration;                                   // 0x0008   (0x0004)  
	float                                              DodgeProbability;                                           // 0x000C   (0x0004)  
	float                                              BlockProbability;                                           // 0x0010   (0x0004)  
};

/// Class /Script/Indiana.AISettings_DefensiveAction
/// Size: 0x00B0 (176 bytes) (0x000038 - 0x0000B0) align 8 MaxSize: 0x00B0
class UAISettings_DefensiveAction : public UDataAsset
{ 
public:
	TMap<EDefensiveActionType, FReactiveToMeleeElement> ReactiveToMeleeActions;                                    // 0x0038   (0x0050)  
	FReactiveToRangeElement                            ReactiveToRangeActions;                                     // 0x0088   (0x0014)  
	float                                              PreEmptiveActionProbability;                                // 0x009C   (0x0004)  
	TArray<EDefensiveActionType>                       PreemptiveMeleeActions;                                     // 0x00A0   (0x0010)  
};

/// Class /Script/Indiana.AISettings_Follow
/// Size: 0x0088 (136 bytes) (0x000030 - 0x000088) align 8 MaxSize: 0x0088
class UAISettings_Follow : public UAISettings_Behavior
{ 
public:
	TWeakObjectPtr<class AIndianaCharacter*>           FollowTarget;                                               // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0038   (0x0020)  MISSED
	TWeakObjectPtr<class ASpawnNodeBase*>              FollowTargetSpawnNode;                                      // 0x0058   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0060   (0x0020)  MISSED
	float                                              MinRange;                                                   // 0x0080   (0x0004)  
	float                                              MaxRange;                                                   // 0x0084   (0x0004)  
};

/// Class /Script/Indiana.AISettings_FollowPlayer
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAISettings_FollowPlayer : public UAISettings_Behavior
{ 
public:
};

/// Class /Script/Indiana.AISettings_Furniture
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align 8 MaxSize: 0x0058
class UAISettings_Furniture : public UAISettings_Behavior
{ 
public:
	class AFurnitureActor*                             Furniture;                                                  // 0x0030   (0x0008)  
	bool                                               bTeleport;                                                  // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	class AActor*                                      FurnitureActor;                                             // 0x0040   (0x0008)  
	class UFurnitureComponent*                         FurnitureComponent;                                         // 0x0048   (0x0008)  
	bool                                               bInfiniteDuration;                                          // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Class /Script/Indiana.AISettings_Idle
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAISettings_Idle : public UAISettings_Behavior
{ 
public:
};

/// Class /Script/Indiana.AISettings_Patrol
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UAISettings_Patrol : public UAISettings_Behavior
{ 
public:
	class APatrolNode*                                 PatrolNode;                                                 // 0x0030   (0x0008)  
	EPatrolType                                        PatrolType;                                                 // 0x0038   (0x0001)  
	bool                                               bTeleport;                                                  // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x003A   (0x0006)  MISSED
};

/// Class /Script/Indiana.AISettings_Traverse
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align 8 MaxSize: 0x0050
class UAISettings_Traverse : public UAISettings_Behavior
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0030   (0x0020)  MISSED
};

/// Class /Script/Indiana.AISettings_Wander
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UAISettings_Wander : public UAISettings_Behavior
{ 
public:
	float                                              Radius;                                                     // 0x0030   (0x0004)  
	float                                              MinMoveDistance;                                            // 0x0034   (0x0004)  
	float                                              MaxMoveDistance;                                            // 0x0038   (0x0004)  
	float                                              MinIdleTime;                                                // 0x003C   (0x0004)  
	float                                              MaxIdleTime;                                                // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Indiana.AISettings_RecoveryBackupBehavior
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 4 MaxSize: 0x0020
struct FAISettings_RecoveryBackupBehavior
{ 
	EMeleeRecoveryType                                 RecoveryType;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              BackupChance;                                               // 0x0004   (0x0004)  
	float                                              MaxBackupDistance;                                          // 0x0008   (0x0004)  
	float                                              MinBackupDistance;                                          // 0x000C   (0x0004)  
	float                                              DodgeChance;                                                // 0x0010   (0x0004)  
	EDodgeDirection                                    DodgeDirection;                                             // 0x0014   (0x0001)  
	bool                                               bDodgeRequiresClearPath;                                    // 0x0015   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	float                                              MaxValidTargetDistance;                                     // 0x0018   (0x0004)  
	bool                                               bShouldLookAtTarget;                                        // 0x001C   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Indiana.AISettings_MeleeActionBase
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 MaxSize: 0x003C
struct FAISettings_MeleeActionBase
{ 
	float                                              RecoveryDelay;                                              // 0x0000   (0x0004)  
	bool                                               bUseAdaptiveRootMotion;                                     // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              AdaptiveRootMotionStopDistance;                             // 0x0008   (0x0004)  
	bool                                               bOverrideBackupBehavior;                                    // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FAISettings_RecoveryBackupBehavior                 BackupBehavior;                                             // 0x0010   (0x0020)  
	float                                              AttackingRotationThreshold;                                 // 0x0030   (0x0004)  
	float                                              PreferredAttackDistance;                                    // 0x0034   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x0038   (0x0004)  MISSED
};

/// Struct /Script/Indiana.AISettings_MeleeAction
/// Size: 0x0058 (88 bytes) (0x00003C - 0x000058) align 4 MaxSize: 0x0058
struct FAISettings_MeleeAction : FAISettings_MeleeActionBase
{ 
	float                                              Cooldown;                                                   // 0x003C   (0x0004)  
	EMeleeActionUseCase                                UseCase;                                                    // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              UseRange;                                                   // 0x0044   (0x0004)  
	float                                              Weight;                                                     // 0x0048   (0x0004)  
	bool                                               bOverrideNumMeleeSlotsRequired;                             // 0x004C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	int32_t                                            NumMeleeSlotsRequired;                                      // 0x0050   (0x0004)  
	bool                                               bIgnoreCollisionDuringApproach;                             // 0x0054   (0x0001)  
	bool                                               bBumpDuringApproach;                                        // 0x0055   (0x0001)  
	bool                                               bSprintDuringApproach;                                      // 0x0056   (0x0001)  
	unsigned char                                      UnknownData02_7[0x1];                                       // 0x0057   (0x0001)  MISSED
};

/// Struct /Script/Indiana.AISettings_MeleePatternEntry
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 MaxSize: 0x0048
struct FAISettings_MeleePatternEntry
{ 
	class UMeleeSlotRequestData*                       MeleeAction;                                                // 0x0000   (0x0008)  
	FAISettings_MeleeActionBase                        Settings;                                                   // 0x0008   (0x003C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Indiana.AISettings_MeleePattern
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FAISettings_MeleePattern
{ 
	float                                              MaxValidTargetDistance;                                     // 0x0000   (0x0004)  
	float                                              Weight;                                                     // 0x0004   (0x0004)  
	float                                              Cooldown;                                                   // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FAISettings_MeleePatternEntry>              AttackPattern;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Indiana.AISettings_Melee
/// Size: 0x00E0 (224 bytes) (0x000000 - 0x0000E0) align 8 MaxSize: 0x00E0
struct FAISettings_Melee
{ 
	bool                                               bEnabled;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              MinDelayBetweenActions;                                     // 0x0004   (0x0004)  
	float                                              LostTargetTime;                                             // 0x0008   (0x0004)  
	float                                              LostTargetRangeScalar;                                      // 0x000C   (0x0004)  
	float                                              MeleeWaitDistance;                                          // 0x0010   (0x0004)  
	FAISettings_RecoveryBackupBehavior                 MainBackupBehavior;                                         // 0x0014   (0x0020)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TMap<class UMeleeSlotRequestData*, FAISettings_MeleeAction> MeleeActions;                                      // 0x0038   (0x0050)  
	bool                                               bUseAttackPattern;                                          // 0x0088   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0089   (0x0007)  MISSED
	TMap<class UMeleeSlotPatternRequestData*, FAISettings_MeleePattern> AttackPatterns;                            // 0x0090   (0x0050)  
};

/// Struct /Script/Indiana.AISettings_FiringPattern
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 MaxSize: 0x0018
struct FAISettings_FiringPattern
{ 
	float                                              StartPauseTime;                                             // 0x0000   (0x0004)  
	int32_t                                            BurstRounds;                                                // 0x0004   (0x0004)  
	float                                              BurstTime;                                                  // 0x0008   (0x0004)  
	int32_t                                            BurstCount;                                                 // 0x000C   (0x0004)  
	float                                              BurstPauseTime;                                             // 0x0010   (0x0004)  
	float                                              EndPauseTime;                                               // 0x0014   (0x0004)  
};

/// Struct /Script/Indiana.AISettings_StationaryFire
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 MaxSize: 0x001C
struct FAISettings_StationaryFire
{ 
	bool                                               bEnabled;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FAISettings_FiringPattern                          FiringPattern;                                              // 0x0004   (0x0018)  
};

/// Struct /Script/Indiana.AISettings_CoverFire
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 MaxSize: 0x002C
struct FAISettings_CoverFire
{ 
	bool                                               bEnabled;                                                   // 0x0000   (0x0001)  
	EUsableCoverTypes                                  CoverTypes;                                                 // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	int32_t                                            MaxCoverUses;                                               // 0x0004   (0x0004)  
	FAISettings_FiringPattern                          FiringPattern;                                              // 0x0008   (0x0018)  
	int32_t                                            CoverUseCount;                                              // 0x0020   (0x0004)  
	float                                              CoverTime;                                                  // 0x0024   (0x0004)  
	float                                              CoverTimeFuzz;                                              // 0x0028   (0x0004)  
};

/// Struct /Script/Indiana.AISettings_MovingFire
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 MaxSize: 0x002C
struct FAISettings_MovingFire
{ 
	bool                                               bEnabled;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              PrePauseTime;                                               // 0x0004   (0x0004)  
	FAISettings_FiringPattern                          FiringPattern;                                              // 0x0008   (0x0018)  
	bool                                               bCanFireWhileRunning;                                       // 0x0020   (0x0001)  
	bool                                               bFireWhileMovingToPreferredRange;                           // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0022   (0x0002)  MISSED
	float                                              MovingToPreferredRangeNoFireTime;                           // 0x0024   (0x0004)  
	float                                              MovingToPreferredRangeFireTime;                             // 0x0028   (0x0004)  
};

/// Struct /Script/Indiana.AISettings_SuppressingFire
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 MaxSize: 0x0001
struct FAISettings_SuppressingFire
{ 
	ESuppressingFireDuration                           Duration;                                                   // 0x0000   (0x0001)  
};

/// Struct /Script/Indiana.AISettings_LostTarget
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FAISettings_LostTarget
{ 
	ELostTargetWaitTime                                WaitTime;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ReenterCoverCount;                                          // 0x0004   (0x0004)  
	ELostTargetSearchMode                              SearchMode;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Indiana.AISettings_RangedBehavior_Set
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FAISettings_RangedBehavior_Set
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	float                                              CoverWeight;                                                // 0x0008   (0x0004)  
	float                                              RangeWeight;                                                // 0x000C   (0x0004)  
};

/// Struct /Script/Indiana.AISettings_RangedBehavior_TooFar_Set
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align 8 MaxSize: 0x0018
struct FAISettings_RangedBehavior_TooFar_Set : FAISettings_RangedBehavior_Set
{ 
	float                                              PreferredRangeWeight;                                       // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Indiana.AISettings_RangePositioning_Set
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FAISettings_RangePositioning_Set
{ 
	float                                              StationaryWeight;                                           // 0x0000   (0x0004)  
	float                                              BackwardWeight;                                             // 0x0004   (0x0004)  
	float                                              ForwardWeight;                                              // 0x0008   (0x0004)  
	float                                              StrafeWeight;                                               // 0x000C   (0x0004)  
};

/// Struct /Script/Indiana.AISettings_RangedPositioning
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 4 MaxSize: 0x0030
struct FAISettings_RangedPositioning
{ 
	FAISettings_RangePositioning_Set                   TooNear;                                                    // 0x0000   (0x0010)  
	FAISettings_RangePositioning_Set                   PreferredRange;                                             // 0x0010   (0x0010)  
	FAISettings_RangePositioning_Set                   TooFar;                                                     // 0x0020   (0x0010)  
};

/// Struct /Script/Indiana.AISettings_RangedBehavior
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 MaxSize: 0x0080
struct FAISettings_RangedBehavior
{ 
	EOnEnterCombatBehavior                             OnEnterCombatBehavior;                                      // 0x0000   (0x0001)  
	bool                                               bLimitedRange;                                              // 0x0001   (0x0001)  
	bool                                               bShootAtFeet;                                               // 0x0002   (0x0001)  
	bool                                               bArcingWeapon;                                              // 0x0003   (0x0001)  
	float                                              MinMoveDistance;                                            // 0x0004   (0x0004)  
	float                                              MaxMoveDistance;                                            // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FAISettings_RangedBehavior_Set                     Near;                                                       // 0x0010   (0x0010)  
	FAISettings_RangedBehavior_Set                     PreferedRange;                                              // 0x0020   (0x0010)  
	FAISettings_RangedBehavior_TooFar_Set              ToFar;                                                      // 0x0030   (0x0018)  
	bool                                               bOverrideRangeReposition;                                   // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FAISettings_RangedPositioning                      OverrideRangeRepositionData;                                // 0x004C   (0x0030)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.AISettings_Block
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FAISettings_Block
{ 
	bool                                               bEnabled;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Cooldown;                                                   // 0x0004   (0x0004)  
	float                                              Duration;                                                   // 0x0008   (0x0004)  
	float                                              MaxBlockTime;                                               // 0x000C   (0x0004)  
	float                                              BlockAttemptTimeWindow;                                     // 0x0010   (0x0004)  
};

/// Struct /Script/Indiana.AISettings_Dodge
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FAISettings_Dodge
{ 
	bool                                               bEnabled;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Cooldown;                                                   // 0x0004   (0x0004)  
};

/// Struct /Script/Indiana.AISettings_Positioning
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FAISettings_Positioning
{ 
	float                                              PreferredMinRange;                                          // 0x0000   (0x0004)  
	float                                              PreferredMaxRange;                                          // 0x0004   (0x0004)  
	float                                              AbsoluteRangeBuffer;                                        // 0x0008   (0x0004)  
};

/// Class /Script/Indiana.AISettings_Weapon
/// Size: 0x0260 (608 bytes) (0x000038 - 0x000260) align 8 MaxSize: 0x0260
class UAISettings_Weapon : public UDataAsset
{ 
public:
	EWeaponFireType                                    WeaponFireType;                                             // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	FAISettings_Melee                                  Melee;                                                      // 0x0040   (0x00E0)  
	float                                              PauseTimeFuzz;                                              // 0x0120   (0x0004)  
	bool                                               ScopeWhileShooting;                                         // 0x0124   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0125   (0x0003)  MISSED
	FAISettings_StationaryFire                         StationaryFire;                                             // 0x0128   (0x001C)  
	FAISettings_CoverFire                              CoverFire;                                                  // 0x0144   (0x002C)  
	FAISettings_MovingFire                             MovingFire;                                                 // 0x0170   (0x002C)  
	FAISettings_SuppressingFire                        SuppressingFire;                                            // 0x019C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x019D   (0x0003)  MISSED
	FAISettings_LostTarget                             LostTarget;                                                 // 0x01A0   (0x000C)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x01AC   (0x0004)  MISSED
	FAISettings_RangedBehavior                         RangeBehavior;                                              // 0x01B0   (0x0080)  
	class UAISettings_DefensiveAction*                 AI_SettingsDefensiveActions;                                // 0x0230   (0x0008)  
	FAISettings_Block                                  Block;                                                      // 0x0238   (0x0014)  
	FAISettings_Dodge                                  Dodge;                                                      // 0x024C   (0x0008)  
	FAISettings_Positioning                            Positioning;                                                // 0x0254   (0x000C)  
};

/// Struct /Script/Indiana.AISettingsWander
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FAISettingsWander
{ 
	float                                              Radius;                                                     // 0x0000   (0x0004)  
	float                                              MinMoveDistance;                                            // 0x0004   (0x0004)  
	float                                              MaxMoveDistance;                                            // 0x0008   (0x0004)  
	float                                              MinIdleTime;                                                // 0x000C   (0x0004)  
	float                                              MaxIdleTime;                                                // 0x0010   (0x0004)  
};

/// Struct /Script/Indiana.BehaviorSettings_Set
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FBehaviorSettings_Set
{ 
	class UAISettings_Behavior*                        DefaultBehavior;                                            // 0x0000   (0x0008)  
	class UInterestDataPackage*                        InterestData;                                               // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.GlobalVariable
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FGlobalVariable
{ 
	FString                                            DisplayName;                                                // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.GlobalVariableConditional
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FGlobalVariableConditional
{ 
	FGlobalVariable                                    GlobalVariable;                                             // 0x0000   (0x0010)  
	EGlobalVariableComparison                          Operator;                                                   // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	FGlobalVariable                                    OtherGlobalVariable;                                        // 0x0018   (0x0010)  
	int32_t                                            Value;                                                      // 0x0028   (0x0004)  
	bool                                               bDefault;                                                   // 0x002C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x002D   (0x0003)  MISSED
};

/// Struct /Script/Indiana.QuestReference
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FQuestReference
{ 
	FGuid                                              ID;                                                         // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.QuestStateConditional
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FQuestStateConditional
{ 
	FQuestReference                                    QuestReference;                                             // 0x0000   (0x0010)  
	EEqualityComparison                                Operator;                                                   // 0x0010   (0x0001)  
	EQuestState                                        ComparisonState;                                            // 0x0011   (0x0001)  
	bool                                               bDefault;                                                   // 0x0012   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x0013   (0x0001)  MISSED
};

/// Struct /Script/Indiana.CompanionStateConditional
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 1 MaxSize: 0x0004
struct FCompanionStateConditional
{ 
	ESpecialObsidianID                                 CompanionToCheck;                                           // 0x0000   (0x0001)  
	EEqualityComparison                                Operator;                                                   // 0x0001   (0x0001)  
	ECompanionState                                    ComparisonState;                                            // 0x0002   (0x0001)  
	bool                                               bDefault;                                                   // 0x0003   (0x0001)  
};

/// Struct /Script/Indiana.PCGenderConditional
/// Size: 0x0003 (3 bytes) (0x000000 - 0x000003) align 1 MaxSize: 0x0003
struct FPCGenderConditional
{ 
	EEqualityComparison                                Operator;                                                   // 0x0000   (0x0001)  
	EGender                                            ComparisonGender;                                           // 0x0001   (0x0001)  
	bool                                               bDefault;                                                   // 0x0002   (0x0001)  
};

/// Struct /Script/Indiana.DLCInstalledConditional
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 MaxSize: 0x0002
struct FDLCInstalledConditional
{ 
	EDLCType                                           DLCToCheck;                                                 // 0x0000   (0x0001)  
	bool                                               bDefault;                                                   // 0x0001   (0x0001)  
};

/// Struct /Script/Indiana.LogicalStatement
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 MaxSize: 0x0058
struct FLogicalStatement
{ 
	ELogicalOperator                                   Operator;                                                   // 0x0000   (0x0001)  
	EConditionalType                                   ConditionalType;                                            // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	FGlobalVariableConditional                         Condition;                                                  // 0x0008   (0x0030)  
	FQuestStateConditional                             QuestStateCondition;                                        // 0x0038   (0x0014)  
	FCompanionStateConditional                         CompanionStateCondition;                                    // 0x004C   (0x0004)  
	FPCGenderConditional                               PCGenderCondition;                                          // 0x0050   (0x0003)  
	FDLCInstalledConditional                           DLCInstalledCondition;                                      // 0x0053   (0x0002)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Struct /Script/Indiana.LogicalExpression
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 MaxSize: 0x0068
struct FLogicalExpression
{ 
	EConditionalType                                   ConditionalType;                                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FGlobalVariableConditional                         BaseCondition;                                              // 0x0008   (0x0030)  
	FQuestStateConditional                             BaseQuestStateCondition;                                    // 0x0038   (0x0014)  
	FCompanionStateConditional                         BaseCompanionStateCondition;                                // 0x004C   (0x0004)  
	FPCGenderConditional                               BasePCGenderCondition;                                      // 0x0050   (0x0003)  
	FDLCInstalledConditional                           BaseDLCInstalledCondition;                                  // 0x0053   (0x0002)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	TArray<FLogicalStatement>                          AdditionalConditions;                                       // 0x0058   (0x0010)  
};

/// Struct /Script/Indiana.ScriptedBehavior_Set
/// Size: 0x0078 (120 bytes) (0x000010 - 0x000078) align 8 MaxSize: 0x0078
struct FScriptedBehavior_Set : FBehaviorSettings_Set
{ 
	FLogicalExpression                                 GlobalVariableExpression;                                   // 0x0010   (0x0068)  
};

/// Struct /Script/Indiana.BehaviorPackage
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 MaxSize: 0x0098
struct FBehaviorPackage
{ 
	FBehaviorSettings_Set                              DefaultBehaviorData;                                        // 0x0000   (0x0010)  
	TMap<EPhaseOfDay, FBehaviorSettings_Set>           TimeOfDayData;                                              // 0x0010   (0x0050)  
	TArray<FScriptedBehavior_Set>                      ScriptedBehaviors;                                          // 0x0060   (0x0010)  
	float                                              InterestRadius;                                             // 0x0070   (0x0004)  
	unsigned char                                      UnknownData00_7[0x24];                                      // 0x0074   (0x0024)  MISSED
};

/// Struct /Script/Indiana.BehaviorPhases
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FBehaviorPhases
{ 
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0000   (0x0018)  MISSED
	TArray<class UEventListener*>                      PhaseListeners;                                             // 0x0018   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Indiana.SaveGameDataBehaviorStack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FSaveGameDataBehaviorStack
{ 
	TArray<class UBehaviorStateInfo*>                  SavedStateInfos;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.SaveGameDataDetection
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FSaveGameDataDetection
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Indiana.SaveGameDataTargetInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FSaveGameDataTargetInfo
{ 
	unsigned char                                      UnknownData00_2[0x14];                                      // 0x0000   (0x0014)  MISSED
};

/// Struct /Script/Indiana.SaveGameDataDecisionTree
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FSaveGameDataDecisionTree
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Indiana.SaveGameDataInterest
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FSaveGameDataInterest
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Indiana.SaveGameDataAIController
/// Size: 0x00C0 (192 bytes) (0x000000 - 0x0000C0) align 8 MaxSize: 0x00C0
struct FSaveGameDataAIController
{ 
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	FSaveGameDataBehaviorStack                         BehaviorStackData;                                          // 0x0010   (0x0010)  
	FSaveGameDataDetection                             DetectionData;                                              // 0x0020   (0x0030)  
	FSaveGameDataTargetInfo                            TargetInfoData;                                             // 0x0050   (0x0014)  
	FSaveGameDataDecisionTree                          DecisionTreeData;                                           // 0x0064   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	FSaveGameDataInterest                              InterestData;                                               // 0x0070   (0x0050)  
};

/// Class /Script/Indiana.AISettingsComponent
/// Size: 0x03A8 (936 bytes) (0x0000E0 - 0x0003A8) align 8 MaxSize: 0x03A8
class UAISettingsComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	TArray<FString>                                    LevelsToWaitForLoad;                                        // 0x00E8   (0x0010)  
	class UDecisionTreeDesignerDataBundle*             OverrideDecisionTreeData;                                   // 0x00F8   (0x0008)  
	class UDecisionTreeDesignerDataBundle*             SecondaryOverrideDecisionTreeData;                          // 0x0100   (0x0008)  
	class UClass*                                      CustomAIUpdate;                                             // 0x0108   (0x0008)  
	class UClass*                                      DebugDecisionTree;                                          // 0x0110   (0x0008)  
	class UBehaviorStateRequestData*                   DebugDecisionTreeRequest;                                   // 0x0118   (0x0008)  
	bool                                               bCanOpenDoors;                                              // 0x0120   (0x0001)  
	bool                                               bCanPathThroughHazards;                                     // 0x0121   (0x0001)  
	bool                                               bCanPathThroughTraps;                                       // 0x0122   (0x0001)  
	bool                                               bCanPathThroughMines;                                       // 0x0123   (0x0001)  
	bool                                               bCanJump;                                                   // 0x0124   (0x0001)  
	bool                                               bCanCrouch;                                                 // 0x0125   (0x0001)  
	bool                                               bCanUseLadders;                                             // 0x0126   (0x0001)  
	unsigned char                                      UnknownData01_6[0x31];                                      // 0x0127   (0x0031)  MISSED
	EDetectionMode                                     DetectionMode;                                              // 0x0158   (0x0001)  
	bool                                               bGodVision;                                                 // 0x0159   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x015A   (0x0001)  MISSED
	bool                                               bVisionAnimationDrivenPreCombat;                            // 0x015B   (0x0001)  
	unsigned char                                      UnknownData03_6[0x14];                                      // 0x015C   (0x0014)  MISSED
	ECombatReaction                                    CombatReaction;                                             // 0x0170   (0x0001)  
	EWeaponPreference                                  WeaponPreference;                                           // 0x0171   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0172   (0x0002)  MISSED
	float                                              MeleePreferenceRange;                                       // 0x0174   (0x0004)  
	int32_t                                            NumMeleeSlotsRequired;                                      // 0x0178   (0x0004)  
	ESlotPriority                                      SlotPriority;                                               // 0x017C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x017D   (0x0003)  MISSED
	float                                              PlayerProximityDistanceThreshold;                           // 0x0180   (0x0004)  
	float                                              CowerMinTime;                                               // 0x0184   (0x0004)  
	class AFleeNode*                                   OverrideFleeNode;                                           // 0x0188   (0x0008)  
	bool                                               bCanFleeToUnmarkedLocations;                                // 0x0190   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0191   (0x0003)  MISSED
	float                                              MaxUnmarkedFleeDistance;                                    // 0x0194   (0x0004)  
	bool                                               bTetherEnabled;                                             // 0x0198   (0x0001)  
	bool                                               bUseTetherOverrideRadius;                                   // 0x0199   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x019A   (0x0002)  MISSED
	float                                              TetherOverrideRadius;                                       // 0x019C   (0x0004)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x01A0   (0x0001)  MISSED
	EDefaultBehaviorType                               DefaultBehaviorType;                                        // 0x01A1   (0x0001)  
	unsigned char                                      UnknownData09_6[0x6];                                       // 0x01A2   (0x0006)  MISSED
	class APatrolNode*                                 PatrolNode;                                                 // 0x01A8   (0x0008)  
	class UInterestDataPackage*                        InterestData;                                               // 0x01B0   (0x0008)  
	EParentDefaultBehaviorType                         ParentDefaultBehaviorType;                                  // 0x01B8   (0x0001)  
	bool                                               bParentOverrideWanderSettings;                              // 0x01B9   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x01BA   (0x0002)  MISSED
	FAISettingsWander                                  ParentOverrideWanderSettings;                               // 0x01BC   (0x0014)  
	class UInterestDataPackage*                        ParentInterestData;                                         // 0x01D0   (0x0008)  
	FBehaviorPackage                                   OutOfCombatData;                                            // 0x01D8   (0x0098)  
	class UAISettings_Behavior*                        ParentDefaultBehavior;                                      // 0x0270   (0x0008)  
	class UAISettings_Behavior*                        OverrideDefaultBehavior;                                    // 0x0278   (0x0008)  
	unsigned char                                      UnknownData11_6[0x10];                                      // 0x0280   (0x0010)  MISSED
	class UAISettings_Weapon*                          AISettings;                                                 // 0x0290   (0x0008)  
	unsigned char                                      UnknownData12_6[0x8];                                       // 0x0298   (0x0008)  MISSED
	FBehaviorPhases                                    PhaseInfo;                                                  // 0x02A0   (0x0030)  
	FSaveGameDataAIController                          ControllerSaveData;                                         // 0x02D0   (0x00C0)  
	unsigned char                                      UnknownData13_6[0x8];                                       // 0x0390   (0x0008)  MISSED
	class UAISenseConfig_Sight*                        OutOfCombatSightConfigOverride;                             // 0x0398   (0x0008)  
	EPseudoGodMode                                     PseudoGodMode;                                              // 0x03A0   (0x0001)  
	unsigned char                                      UnknownData14_7[0x7];                                       // 0x03A1   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.AISettingsComponent.OnUnequipWeapon
	// void OnUnequipWeapon(class UWeapon* Weapon);                                                                             // [0x179c170] Final|Native|Private 
	// Function /Script/Indiana.AISettingsComponent.OnEquipWeapon
	// void OnEquipWeapon(class UWeapon* Weapon);                                                                               // [0x179bd50] Final|Native|Private 
};

/// Class /Script/Indiana.TargetingComponent
/// Size: 0x00E8 (232 bytes) (0x0000E0 - 0x0000E8) align 8 MaxSize: 0x00E8
class UTargetingComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00E0   (0x0008)  MISSED
};

/// Class /Script/Indiana.AiTargetingComponent
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align 8 MaxSize: 0x00F8
class UAiTargetingComponent : public UTargetingComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x00E8   (0x0010)  MISSED
};

/// Class /Script/Indiana.Alarm
/// Size: 0x02C8 (712 bytes) (0x0002B8 - 0x0002C8) align 8 MaxSize: 0x02C8
class AAlarm : public AActor
{ 
public:
	class USceneComponent*                             SceneComponent;                                             // 0x02B8   (0x0008)  
	TWeakObjectPtr<class ARestrictedArea*>             RestrictedArea;                                             // 0x02C0   (0x0008)  
};

/// Class /Script/Indiana.AlarmComponent
/// Size: 0x00F8 (248 bytes) (0x0000E0 - 0x0000F8) align 8 MaxSize: 0x00F8
class UAlarmComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,362) /* FMulticastInlineDelegate */ __um(OnAlarmStateChange);                                 // 0x00E0   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x00F0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.AlarmComponent.GetAlarmState
	// EAlarmState GetAlarmState();                                                                                             // [0x179bc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.ExaminableStringSet
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 4 MaxSize: 0x0020
struct FExaminableStringSet
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	FLocString                                         Description;                                                // 0x0008   (0x0008)  
	FLocString                                         OverrideLabel;                                              // 0x0010   (0x0008)  
	FName                                              RemoteEventOnExaminationEnd;                                // 0x0018   (0x0008)  
};

/// Struct /Script/Indiana.ItemTutorialSet
/// Size: 0x0006 (6 bytes) (0x000000 - 0x000006) align 1 MaxSize: 0x0006
struct FItemTutorialSet
{ 
	ETutorialEvent                                     OnItemAddedTutorial;                                        // 0x0000   (0x0001)  
	ETutorialEvent                                     OnItemEquippedTutorial;                                     // 0x0001   (0x0001)  
	ETutorialEvent                                     OnItemLostTutorial;                                         // 0x0002   (0x0001)  
	ETutorialEvent                                     OnItemBreakDownTutorial;                                    // 0x0003   (0x0001)  
	ETutorialEvent                                     OnItemDroppedTutorial;                                      // 0x0004   (0x0001)  
	ETutorialEvent                                     OnItemSoldTutorial;                                         // 0x0005   (0x0001)  
};

/// Struct /Script/Indiana.GameDateTime
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FGameDateTime
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Class /Script/Indiana.Item
/// Size: 0x0118 (280 bytes) (0x000030 - 0x000118) align 8 MaxSize: 0x0118
class UItem : public UObject
{ 
public:
	FLocString                                         Name;                                                       // 0x0030   (0x0008)  
	FLocString                                         Brand;                                                      // 0x0038   (0x0008)  
	FLocString                                         Description;                                                // 0x0040   (0x0008)  
	bool                                               bHideDescriptionFromTooltip;                                // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FLocString                                         Lore;                                                       // 0x004C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	class UTexture2D*                                  UIImage;                                                    // 0x0058   (0x0008)  
	bool                                               bIsExaminable;                                              // 0x0060   (0x0001)  
	bool                                               bRequiresUIPromptOnAcquire;                                 // 0x0061   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0062   (0x0002)  MISSED
	FExaminableStringSet                               ExaminableStringSet;                                        // 0x0064   (0x0020)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	class UBrandDataAsset*                             BrandData;                                                  // 0x0088   (0x0008)  
	bool                                               bUnique;                                                    // 0x0090   (0x0001)  
	bool                                               bPristine;                                                  // 0x0091   (0x0001)  
	bool                                               bCanBeScavenged;                                            // 0x0092   (0x0001)  
	bool                                               bAutoJunk;                                                  // 0x0093   (0x0001)  
	int32_t                                            ItemLevel;                                                  // 0x0094   (0x0004)  
	int32_t                                            BaseValue;                                                  // 0x0098   (0x0004)  
	float                                              Weight;                                                     // 0x009C   (0x0004)  
	FRotator                                           PaperdollOriginRotation;                                    // 0x00A0   (0x000C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	class UAkAudioEvent*                               OnUseEvent;                                                 // 0x00B0   (0x0008)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x00B8   (0x0008)  MISSED
	class UClass*                                      OwningFaction;                                              // 0x00C0   (0x0008)  
	TWeakObjectPtr<class AActor*>                      OwningActor;                                                // 0x00C8   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x00D0   (0x0020)  MISSED
	bool                                               bPlayerOwned;                                               // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x00F1   (0x0003)  MISSED
	FGameplayTag                                       GameplayTag;                                                // 0x00F4   (0x0008)  
	FItemTutorialSet                                   Tutorials;                                                  // 0x00FC   (0x0006)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x0102   (0x0002)  MISSED
	uint32_t                                           ItemFlags;                                                  // 0x0104   (0x0004)  
	uint32_t                                           AmountOfSaleByPlayer;                                       // 0x0108   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	FGameDateTime                                      TimeOfSaleByPlayer;                                         // 0x0110   (0x0008)  


	/// Functions
	// Function /Script/Indiana.Item.SetPlayerOwnership
	// void SetPlayerOwnership(bool bRemoveNonPlayerOwnership);                                                                 // [0x186ea60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.SetOwnership
	// void SetOwnership(class UClass* Faction, TWeakObjectPtr<AActor*> Actor, bool bInPlayerOwned);                            // [0x186e8b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.SetNonPlayerOwnership
	// void SetNonPlayerOwnership(class UClass* Faction, TWeakObjectPtr<AActor*> Actor, bool bRemovePlayerOwnership);           // [0x186e700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.IsPlayerOwned
	// bool IsPlayerOwned();                                                                                                    // [0x179bc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Item.GetOwningFaction
	// class UClass* GetOwningFaction();                                                                                        // [0x186dae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Item.GetOwningActor
	// TWeakObjectPtr<AActor*> GetOwningActor();                                                                                // [0x186da90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Item.ClearPlayerOwnership
	// void ClearPlayerOwnership();                                                                                             // [0x186da30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.ClearNonPlayerOwnership
	// void ClearNonPlayerOwnership();                                                                                          // [0x186da10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.ClearAllOwnership
	// void ClearAllOwnership();                                                                                                // [0x186d9f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.CanPlayerSafelyTake
	// bool CanPlayerSafelyTake();                                                                                              // [0x186d9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.DamageMultipliers
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FDamageMultipliers
{ 
	float                                              BaseDamageMultiplier;                                       // 0x0000   (0x0004)  
	float                                              DamageThresholdMultiplier;                                  // 0x0004   (0x0004)  
	float                                              DamageResistanceMultiplier;                                 // 0x0008   (0x0004)  
	float                                              PostArmorDamageMultiplier;                                  // 0x000C   (0x0004)  
};

/// Class /Script/Indiana.Ammo
/// Size: 0x01A0 (416 bytes) (0x000118 - 0x0001A0) align 8 MaxSize: 0x01A0
class UAmmo : public UItem
{ 
public:
	EAmmoType                                          AmmoType;                                                   // 0x0118   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0119   (0x0003)  MISSED
	FDamageMultipliers                                 DamageMultipliers;                                          // 0x011C   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x012C   (0x0004)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  AmmoIcon;                                                   // 0x0130   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0138   (0x0020)  MISSED
	FGameplayTag                                       AmmoTypeTag;                                                // 0x0158   (0x0008)  
	bool                                               bCanPenetrate;                                              // 0x0160   (0x0001)  
	bool                                               bForceRadialDamage;                                         // 0x0161   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x0162   (0x0006)  MISSED
	class UClass*                                      OnHitSpell;                                                 // 0x0168   (0x0008)  
	class UClass*                                      PassiveSpell;                                               // 0x0170   (0x0008)  
	TWeakObjectPtr<class UStaticMesh*>                 PickupMesh;                                                 // 0x0178   (0x0008)  
	unsigned char                                      UnknownData04_7[0x20];                                      // 0x0180   (0x0020)  MISSED
};

/// Class /Script/Indiana.AmmoPoolBase
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align 8 MaxSize: 0x0080
class UAmmoPoolBase : public UObject
{ 
public:
	float                                              ReloadTime;                                                 // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4C];                                      // 0x0034   (0x004C)  MISSED


	/// Functions
	// Function /Script/Indiana.AmmoPoolBase.UsesConsumables
	// bool UsesConsumables();                                                                                                  // [0x179c2c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.UsesAmmo
	// bool UsesAmmo();                                                                                                         // [0x179c290] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.OnTacticalTimeDilationEnd
	// void OnTacticalTimeDilationEnd(float Duration);                                                                          // [0x179c0f0] Final|Native|Protected 
	// Function /Script/Indiana.AmmoPoolBase.IsReloading
	// bool IsReloading();                                                                                                      // [0x179bd20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.GetCurrentPoolSize
	// int32_t GetCurrentPoolSize();                                                                                            // [0x179bcf0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.GetCurrentConsumableClass
	// class UClass* GetCurrentConsumableClass();                                                                               // [0x179bcb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.GetCurrentAmmoClass
	// class UClass* GetCurrentAmmoClass();                                                                                     // [0x179bc70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.GetBaseReloadTime
	// float GetBaseReloadTime();                                                                                               // [0x179bc50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.RadialSectionWidget
/// Size: 0x0288 (648 bytes) (0x000278 - 0x000288) align 8 MaxSize: 0x0288
class URadialSectionWidget : public UUserWidget
{ 
public:
	bool                                               bAdjustOpacityOnUnusableChanged;                            // 0x0278   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x0279   (0x000F)  MISSED
};

/// Class /Script/Indiana.AmmoRadialSectionWidget
/// Size: 0x02A8 (680 bytes) (0x000288 - 0x0002A8) align 8 MaxSize: 0x02A8
class UAmmoRadialSectionWidget : public URadialSectionWidget
{ 
public:
	class UVerticalBox*                                VerticalBox;                                                // 0x0288   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0290   (0x0008)  
	class UTextBlockBase*                              CountTextBlock;                                             // 0x0298   (0x0008)  
	class UImage*                                      Image;                                                      // 0x02A0   (0x0008)  
};

/// Class /Script/Indiana.AmmoReadoutWidget
/// Size: 0x03B0 (944 bytes) (0x000300 - 0x0003B0) align 8 MaxSize: 0x03B0
class UAmmoReadoutWidget : public UIndianaUserWidget
{ 
public:
	class UInvalidationBox*                            InvalidationWrapper;                                        // 0x0300   (0x0008)  
	class UOverlay*                                    AmmoReadout;                                                // 0x0308   (0x0008)  
	class UImage*                                      AmmoTypeImage;                                              // 0x0310   (0x0008)  
	class UImage*                                      AmmoBrandImage;                                             // 0x0318   (0x0008)  
	class UTextBlockBase*                              LoadedAmmoTextBlock;                                        // 0x0320   (0x0008)  
	class UTextBlockBase*                              RemainingAmmoTextBlock;                                     // 0x0328   (0x0008)  
	class UTextBlockBase*                              LoadedConsumeableTextBlock;                                 // 0x0330   (0x0008)  
	class UImage*                                      LoadedConsumeableIcon;                                      // 0x0338   (0x0008)  
	float                                              LowAmmoWarningPercent;                                      // 0x0340   (0x0004)  
	float                                              TimedFadeActivityTimer;                                     // 0x0344   (0x0004)  
	bool                                               bWasInfiniteAmmo;                                           // 0x0348   (0x0001)  
	unsigned char                                      UnknownData00_7[0x67];                                      // 0x0349   (0x0067)  MISSED


	/// Functions
	// Function /Script/Indiana.AmmoReadoutWidget.OnWeaponSwitch
	// void OnWeaponSwitch(class UWeapon* EquippedWeapon);                                                                      // [0x179c200] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnReloadComplete
	// void OnReloadComplete(class UWeapon* EquippedWeapon);                                                                    // [0x179bf90] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnPlayerCombatStateChange
	// void OnPlayerCombatStateChange(bool bCombatIn, bool bRestoring);                                                         // [0x179c020] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnInterruptReload
	// void OnInterruptReload(class UWeapon* EquippedWeapon);                                                                   // [0x179bf90] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x179bde0] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnHeldWeaponTextDisplayModeChanged
	// void OnHeldWeaponTextDisplayModeChanged(int32_t ModeIn);                                                                 // [0x179bf00] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnHeldWeaponDisplayModeChanged
	// void OnHeldWeaponDisplayModeChanged(int32_t ModeIn);                                                                     // [0x179be70] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.EvaluateLowAmmoWarning
	// void EvaluateLowAmmoWarning(int32_t MaxClipSize, int32_t CurrentClipSize, int32_t RemainingAmmo);                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.AnimationAudioSet
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UAnimationAudioSet : public UDataAsset
{ 
public:
	TMap<FGameplayTag, class UAkAudioEvent*>           Events;                                                     // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.AnimationBehaviorStateInfo
/// Size: 0x0120 (288 bytes) (0x000120 - 0x000120) align 8 MaxSize: 0x0120
class UAnimationBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.AnimationRequestData
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align 8 MaxSize: 0x0078
class UAnimationRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
	FGameplayTag                                       AnimationTag;                                               // 0x0068   (0x0008)  
	bool                                               bFaceTargetBeforePlayback;                                  // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	float                                              AllowedYawForFacing;                                        // 0x0074   (0x0004)  
};

/// Class /Script/Indiana.AnimationCurveUtils
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAnimationCurveUtils : public UObject
{ 
public:
};

/// Class /Script/Indiana.DisableStatusEffect
/// Size: 0x0198 (408 bytes) (0x000188 - 0x000198) align 8 MaxSize: 0x0198
class UDisableStatusEffect : public UStatusEffect
{ 
public:
	FGameplayTag                                       DisableType;                                                // 0x0188   (0x0008)  
	bool                                               bRotateToFace;                                              // 0x0190   (0x0001)  
	bool                                               bHeadTrackToCaster;                                         // 0x0191   (0x0001)  
	bool                                               bClearAwareness;                                            // 0x0192   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x0193   (0x0005)  MISSED
};

/// Class /Script/Indiana.AnimDisableStatusEffect
/// Size: 0x01A0 (416 bytes) (0x000198 - 0x0001A0) align 8 MaxSize: 0x01A0
class UAnimDisableStatusEffect : public UDisableStatusEffect
{ 
public:
	bool                                               bLoopForDuration;                                           // 0x0198   (0x0001)  
	bool                                               bInvalidIfNoAnimation;                                      // 0x0199   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x019A   (0x0006)  MISSED
};

/// Struct /Script/Indiana.BoneMod
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 MaxSize: 0x0040
struct FBoneMod
{ 
	FTransform                                         Transform;                                                  // 0x0000   (0x0030)  
	bool                                               ApplyTranslation;                                           // 0x0030   (0x0001)  
	bool                                               ApplyRotation;                                              // 0x0031   (0x0001)  
	bool                                               ApplyScale;                                                 // 0x0032   (0x0001)  
	unsigned char                                      UnknownData00_7[0xD];                                       // 0x0033   (0x000D)  MISSED
};

/// Class /Script/Indiana.BoneModifications
/// Size: 0x00A0 (160 bytes) (0x000038 - 0x0000A0) align 8 MaxSize: 0x00A0
class UBoneModifications : public UPrimaryDataAsset
{ 
public:
	TMap<FName, FBoneMod>                              BoneMods;                                                   // 0x0038   (0x0050)  
	float                                              MinStrength;                                                // 0x0088   (0x0004)  
	float                                              MaxStrength;                                                // 0x008C   (0x0004)  
	float                                              StrengthStep;                                               // 0x0090   (0x0004)  
	FLocString                                         UIDisplayText;                                              // 0x0094   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x009C   (0x0004)  MISSED
};

/// Class /Script/Indiana.BoneModificationsPreset
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UBoneModificationsPreset : public UPrimaryDataAsset
{ 
public:
	TMap<class UBoneModifications*, float>             BoneSettings;                                               // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.AnimNotify_AttachWeapon
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_AttachWeapon : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_AudioEvent
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align 8 MaxSize: 0x0050
class UAnimNotify_AudioEvent : public UAnimNotify
{ 
public:
	FGameplayTag                                       Event;                                                      // 0x0040   (0x0008)  
	EAnimationAudioLoopType                            LoopType;                                                   // 0x0048   (0x0001)  
	bool                                               bStop;                                                      // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x004A   (0x0006)  MISSED
};

/// Class /Script/Indiana.AnimNotify_Despawn
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_Despawn : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_DetachWeapon
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_DetachWeapon : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_EventEffects
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align 8 MaxSize: 0x0048
class UAnimNotify_EventEffects : public UAnimNotify
{ 
public:
	class UEventEffects*                               EventEffects;                                               // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.AnimNotify_Finished
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_Finished : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_FootStep
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align 8 MaxSize: 0x0048
class UAnimNotify_FootStep : public UAnimNotify
{ 
public:
	EFootID                                            FootID;                                                     // 0x0040   (0x0001)  
	bool                                               bIsSpecialEvent;                                            // 0x0041   (0x0001)  
	ESpecialMovementEvent                              SpecialEvent;                                               // 0x0042   (0x0001)  
	bool                                               bIsLadder;                                                  // 0x0043   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Indiana.AnimNotify_IndianaAkEvent
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align 8 MaxSize: 0x0050
class UAnimNotify_IndianaAkEvent : public UAnimNotify
{ 
public:
	class UAkAudioEvent*                               Event;                                                      // 0x0040   (0x0008)  
	bool                                               Follow;                                                     // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Indiana.AnimNotify_MedkitEnd
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_MedkitEnd : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_MeleeActionFinished
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_MeleeActionFinished : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_MeleeAllowInput
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align 8 MaxSize: 0x0048
class UAnimNotify_MeleeAllowInput : public UAnimNotify
{ 
public:
	bool                                               bEnableInput;                                               // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Indiana.AnimNotify_MeleeCanSwing
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_MeleeCanSwing : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_MeleeCheckInput
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_MeleeCheckInput : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_MeleeRecoil
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_MeleeRecoil : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_ParamsEvent
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align 8 MaxSize: 0x0048
class UAnimNotify_ParamsEvent : public UAnimNotify
{ 
public:
	EAnimNotify                                        Event;                                                      // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Indiana.AnimNotify_PlayChatter
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align 8 MaxSize: 0x0048
class UAnimNotify_PlayChatter : public UAnimNotify
{ 
public:
	ENotifyChatterEventType                            NotifyChatterEvent;                                         // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Indiana.AnimNotify_PropDespawn
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align 8 MaxSize: 0x0050
class UAnimNotify_PropDespawn : public UAnimNotify
{ 
public:
	FGameplayTag                                       PropToDespawn;                                              // 0x0040   (0x0008)  
	class UNewPropData*                                PropDataToDespawn;                                          // 0x0048   (0x0008)  
};

/// Struct /Script/Indiana.PropEntry
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 MaxSize: 0x0068
struct FPropEntry
{ 
	FGameplayTag                                       PropTag;                                                    // 0x0000   (0x0008)  
	class USkeletalMesh*                               SkeletalMeshToSpawn;                                        // 0x0008   (0x0008)  
	class UStaticMesh*                                 StaticMeshToSpawn;                                          // 0x0010   (0x0008)  
	FName                                              SocketToAttachTo;                                           // 0x0018   (0x0008)  
	FVector                                            SocketOffset;                                               // 0x0020   (0x000C)  
	FRotator                                           SocketRotation;                                             // 0x002C   (0x000C)  
	class UParticleSystem*                             ParticleSystemToSpawn;                                      // 0x0038   (0x0008)  
	FName                                              ParticleSocketToAttachTo;                                   // 0x0040   (0x0008)  
	FVector                                            ParticleSocketOffset;                                       // 0x0048   (0x000C)  
	FRotator                                           ParticleSocketRotation;                                     // 0x0054   (0x000C)  
	EDespawnRules                                      DespawnRule;                                                // 0x0060   (0x0001)  
	bool                                               bSkeletalMeshUsesParentPose;                                // 0x0061   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0062   (0x0006)  MISSED
};

/// Class /Script/Indiana.PropData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UPropData : public UDataAsset
{ 
public:
	TArray<FPropEntry>                                 Props;                                                      // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.NewPropData
/// Size: 0x00A0 (160 bytes) (0x000038 - 0x0000A0) align 8 MaxSize: 0x00A0
class UNewPropData : public UDataAsset
{ 
public:
	FPropEntry                                         PropInfo;                                                   // 0x0038   (0x0068)  
};

/// Class /Script/Indiana.AnimNotify_PropSpawn
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align 8 MaxSize: 0x0050
class UAnimNotify_PropSpawn : public UAnimNotify
{ 
public:
	FGameplayTag                                       PropToSpawn;                                                // 0x0040   (0x0008)  
	class UNewPropData*                                PropDataToSpawn;                                            // 0x0048   (0x0008)  
};

/// Class /Script/Indiana.AnimNotify_RagDoll
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align 8 MaxSize: 0x0060
class UAnimNotify_RagDoll : public UAnimNotify
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0040   (0x0018)  MISSED
	bool                                               bAlwaysRagdoll;                                             // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Indiana.AnimNotify_UpdateCanisterVisual
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_UpdateCanisterVisual : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_UseMedKit
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_UseMedKit : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_WeaponFire
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotify_WeaponFire : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.AnimNotify_WeaponVisualEvent
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align 8 MaxSize: 0x0050
class UAnimNotify_WeaponVisualEvent : public UAnimNotify
{ 
public:
	FName                                              Event;                                                      // 0x0040   (0x0008)  
	bool                                               bCustomState;                                               // 0x0048   (0x0001)  
	bool                                               bStop;                                                      // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x004A   (0x0006)  MISSED
};

/// Class /Script/Indiana.AnimNotifyState_AltIKToggle
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotifyState_AltIKToggle : public UAnimNotifyState
{ 
public:
	bool                                               bUseRight;                                                  // 0x0038   (0x0001)  
	bool                                               bUseLeft;                                                   // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x003A   (0x0006)  MISSED
};

/// Class /Script/Indiana.AnimNotifyState_AudioEventLoop
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotifyState_AudioEventLoop : public UAnimNotifyState
{ 
public:
	FGameplayTag                                       Event;                                                      // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.AnimNotifyState_DisableAutoStep
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_DisableAutoStep : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_DisableDetection
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_DisableDetection : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_DisableHipPoses
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_DisableHipPoses : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_DisableVision
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_DisableVision : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_HideWeapon
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_HideWeapon : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_InspectEnd
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_InspectEnd : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_Invulnerable
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotifyState_Invulnerable : public UAnimNotifyState
{ 
public:
	bool                                               bMeleeDamageOnly;                                           // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Indiana.AnimNotifyState_PreventInterrupts
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_PreventInterrupts : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_FurnitureInterrupt
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotifyState_FurnitureInterrupt : public UAnimNotifyState
{ 
public:
	EFurnitureAnimationInterrupt                       InterruptType;                                              // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Indiana.AnimNotifyState_MeleeAllowInput
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotifyState_MeleeAllowInput : public UAnimNotifyState
{ 
public:
	bool                                               bEnableInput;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Indiana.AnimNotifyState_MeleeCanSwing
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_MeleeCanSwing : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_MeleeCheckInput
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_MeleeCheckInput : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_MeleeDamage
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UAnimNotifyState_MeleeDamage : public UAnimNotifyState
{ 
public:
	FGameplayTag                                       MeleeCollisionTrigger;                                      // 0x0038   (0x0008)  
	bool                                               bSpellAttack;                                               // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Indiana.AnimNotifyState_Prop
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UAnimNotifyState_Prop : public UAnimNotifyState
{ 
public:
	FGameplayTag                                       PropToSpawn;                                                // 0x0038   (0x0008)  
	class UNewPropData*                                PropDataToSpawn;                                            // 0x0040   (0x0008)  
	float                                              PropDespawnTime;                                            // 0x0048   (0x0004)  
	bool                                               bProjectile;                                                // 0x004C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x004D   (0x0003)  MISSED


	/// Functions
	// Function /Script/Indiana.AnimNotifyState_Prop.OnMontageEnded
	// void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted, class USkeletalMeshComponent* MeshComp);             // [0x17a5180] Final|Native|Protected|Const 
};

/// Class /Script/Indiana.AnimNotifyState_SuppressFire
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_SuppressFire : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_ToggleArmPose
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UAnimNotifyState_ToggleArmPose : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Indiana.AnimNotifyState_ToggleTracking
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UAnimNotifyState_ToggleTracking : public UAnimNotifyState
{ 
public:
	bool                                               bDisableHeadTracking;                                       // 0x0038   (0x0001)  
	bool                                               bDisableEyeTracking;                                        // 0x0039   (0x0001)  
	bool                                               bDisableTrackingWhenTalking;                                // 0x003A   (0x0001)  
	bool                                               bDisableBodyTracking;                                       // 0x003B   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.TransformedShape
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 MaxSize: 0x0040
struct FTransformedShape
{ 
	class UShape*                                      Shape;                                                      // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         ShapeTransform;                                             // 0x0010   (0x0030)  
};

/// Class /Script/Indiana.AoEStatusEffect
/// Size: 0x01E0 (480 bytes) (0x000188 - 0x0001E0) align 16 MaxSize: 0x01E0
class UAoEStatusEffect : public UStatusEffect
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0188   (0x0008)  MISSED
	FTransformedShape                                  CollisionShape;                                             // 0x0190   (0x0040)  
	class UClass*                                      StatusEffect;                                               // 0x01D0   (0x0008)  
	bool                                               bOnlyFriendlyTargets;                                       // 0x01D8   (0x0001)  
	bool                                               bOnlyHostileTargets;                                        // 0x01D9   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x01DA   (0x0006)  MISSED
};

/// Struct /Script/Indiana.AppearanceCustomizations
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 MaxSize: 0x0078
struct FAppearanceCustomizations
{ 
	float                                              Age;                                                        // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UEyeColor*                                   EyeColor;                                                   // 0x0008   (0x0008)  
	class UHairAppearances*                            Hair;                                                       // 0x0010   (0x0008)  
	class UHairColor*                                  HairColor;                                                  // 0x0018   (0x0008)  
	class UBrows*                                      Brows;                                                      // 0x0020   (0x0008)  
	class UBeardAppearances*                           Beard;                                                      // 0x0028   (0x0008)  
	class UBeardColor*                                 BeardColor;                                                 // 0x0030   (0x0008)  
	class USkinTone*                                   SkinTone;                                                   // 0x0038   (0x0008)  
	class UScar*                                       Scar;                                                       // 0x0040   (0x0008)  
	class UDirt*                                       Dirt;                                                       // 0x0048   (0x0008)  
	class UMakeup*                                     Makeup;                                                     // 0x0050   (0x0008)  
	class UTexture*                                    DetailMask;                                                 // 0x0058   (0x0008)  
	FLinearColor                                       DetailColor;                                                // 0x0060   (0x0010)  
	float                                              DetailRoughness;                                            // 0x0070   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Struct /Script/Indiana.AppearanceMatch
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FAppearanceMatch
{ 
	FGameplayTagContainer                              Genders;                                                    // 0x0000   (0x0020)  
	FGameplayTagContainer                              Views;                                                      // 0x0020   (0x0020)  
};

/// Struct /Script/Indiana.MainAppearances
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FMainAppearances
{ 
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Indiana.AppliedAppearanceMod
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 MaxSize: 0x0058
struct FAppliedAppearanceMod
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UModAppearances*                             ModAppearances;                                             // 0x0008   (0x0008)  
	class UModVisual*                                  SourceMod;                                                  // 0x0010   (0x0008)  
	class UModVisual*                                  Mod;                                                        // 0x0018   (0x0008)  
	TArray<FName>                                      ComponentTags;                                              // 0x0020   (0x0010)  
	TArray<FName>                                      RequiredTags;                                               // 0x0030   (0x0010)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0040   (0x0018)  MISSED
};

/// Struct /Script/Indiana.HeadAppearanceMods
/// Size: 0x0090 (144 bytes) (0x000058 - 0x000090) align 8 MaxSize: 0x0090
struct FHeadAppearanceMods : FAppliedAppearanceMod
{ 
	EHeadStyle                                         HeadStyle;                                                  // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	FName                                              HairMorphTarget;                                            // 0x005C   (0x0008)  
	bool                                               bHelmetVisible;                                             // 0x0064   (0x0001)  
	unsigned char                                      UnknownData01_6[0x13];                                      // 0x0065   (0x0013)  MISSED
	class UPosedSkeletalMeshModVisual*                 HairMeshMod;                                                // 0x0078   (0x0008)  
	class UPosedSkeletalMeshModVisual*                 BeardMeshMod;                                               // 0x0080   (0x0008)  
	class UMaterialParamModVisual*                     MaterialParamMods;                                          // 0x0088   (0x0008)  
};

/// Struct /Script/Indiana.AppearanceInstance
/// Size: 0x02C8 (712 bytes) (0x000000 - 0x0002C8) align 8 MaxSize: 0x02C8
struct FAppearanceInstance
{ 
	FName                                              TargetMeshName;                                             // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FAppearanceMatch                                   AppearanceMatch;                                            // 0x0010   (0x0040)  
	bool                                               bUseHeadAsBaseSkeleton;                                     // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	class UPosedSkeletalMeshModVisual*                 SecondaryAppearanceMesh;                                    // 0x0058   (0x0008)  
	class UMaterialParamModVisual*                     AppearanceModVisual;                                        // 0x0060   (0x0008)  
	FMainAppearances                                   CurrentAppearances;                                         // 0x0068   (0x0028)  
	FMainAppearances                                   PendingAppearances;                                         // 0x0090   (0x0028)  
	FHeadAppearanceMods                                CurrentHeadAppearanceMods;                                  // 0x00B8   (0x0090)  
	FHeadAppearanceMods                                PendingHeadAppearanceMods;                                  // 0x0148   (0x0090)  
	TMap<class UClass*, FAppliedAppearanceMod>         CurrentMods;                                                // 0x01D8   (0x0050)  
	TMap<class UClass*, FAppliedAppearanceMod>         PendingMods;                                                // 0x0228   (0x0050)  
	TArray<FName>                                      CurrentBaseMeshComponentTags;                               // 0x0278   (0x0010)  
	class UFootstepData*                               CurrentFootstepData;                                        // 0x0288   (0x0008)  
	bool                                               bActive;                                                    // 0x0290   (0x0001)  
	unsigned char                                      UnknownData02_7[0x37];                                      // 0x0291   (0x0037)  MISSED
};

/// Struct /Script/Indiana.MaterialParamDescription
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FMaterialParamDescription
{ 
	FName                                              MaterialSlot;                                               // 0x0000   (0x0008)  
	FName                                              MaterialParam;                                              // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.FadeSettings
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 MaxSize: 0x0038
struct FFadeSettings
{ 
	FVector                                            RevealEmissiveColor;                                        // 0x0000   (0x000C)  
	float                                              LeadingEdgeBlend;                                           // 0x000C   (0x0004)  
	float                                              EmissiveLevel;                                              // 0x0010   (0x0004)  
	float                                              LeadingEdgeAmount;                                          // 0x0014   (0x0004)  
	float                                              RevealEdgeTightness;                                        // 0x0018   (0x0004)  
	float                                              EmissiveBaseValue;                                          // 0x001C   (0x0004)  
	class UTexture*                                    RevealRMEA;                                                 // 0x0020   (0x0008)  
	class UTexture*                                    RevealNormal;                                               // 0x0028   (0x0008)  
	class UTexture*                                    RevealBaseColor;                                            // 0x0030   (0x0008)  
};

/// Class /Script/Indiana.AppearanceComponent
/// Size: 0x0480 (1152 bytes) (0x0000E0 - 0x000480) align 8 MaxSize: 0x0480
class UAppearanceComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x00E0   (0x0018)  MISSED
	class UAppearancePreset*                           AppearancePreset;                                           // 0x00F8   (0x0008)  
	FGameplayTag                                       AppearanceGender;                                           // 0x0100   (0x0008)  
	class UHeadAppearances*                            DefaultHead;                                                // 0x0108   (0x0008)  
	class UBodyAppearances*                            DefaultBody;                                                // 0x0110   (0x0008)  
	bool                                               bEnableCustomization;                                       // 0x0118   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0119   (0x0007)  MISSED
	FAppearanceCustomizations                          Customization;                                              // 0x0120   (0x0078)  
	bool                                               bAllowUnlimitedBoneMods;                                    // 0x0198   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0199   (0x0007)  MISSED
	class UBoneModificationsPreset*                    BoneModPreset;                                              // 0x01A0   (0x0008)  
	class UBoneModificationsPreset*                    UglyStickBoneModPreset;                                     // 0x01A8   (0x0008)  
	TMap<class UBoneModifications*, float>             BoneModifications;                                          // 0x01B0   (0x0050)  
	FName                                              AppearanceTransitionParam;                                  // 0x0200   (0x0008)  
	class UBodyAppearances*                            CurrentBody;                                                // 0x0208   (0x0008)  
	TArray<FName>                                      BodyComponentTags;                                          // 0x0210   (0x0010)  
	TArray<FAppearanceInstance>                        AppearanceInstances;                                        // 0x0220   (0x0010)  
	bool                                               bShouldCacheAssets;                                         // 0x0230   (0x0001)  
	bool                                               bShouldCacheEquipmentAssets;                                // 0x0231   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x0232   (0x0006)  MISSED
	SDK_UNDEFINED(80,363) /* TSet<UObject*> */         __um(CachedAssetSet);                                       // 0x0238   (0x0050)  
	bool                                               bHelmetVisible;                                             // 0x0288   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0289   (0x0007)  MISSED
	TMap<FMaterialParamDescription, float>             RuntimeSetScalars;                                          // 0x0290   (0x0050)  
	TMap<FMaterialParamDescription, FVector>           RuntimeSetVectors;                                          // 0x02E0   (0x0050)  
	SDK_UNDEFINED(80,364) /* TMap<FMaterialParamDescription, TWeakObjectPtr<UTexture*>> */ __um(RuntimeSetTextures); // 0x0330   (0x0050)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0380   (0x0008)  MISSED
	class UBodyPartData*                               BodyPartData;                                               // 0x0388   (0x0008)  
	bool                                               bHasLimbBreakConstraintSetup;                               // 0x0390   (0x0001)  
	bool                                               bDoesntNeedGorecaps;                                        // 0x0391   (0x0001)  
	unsigned char                                      UnknownData06_6[0x6];                                       // 0x0392   (0x0006)  MISSED
	TArray<class UMeshComponent*>                      AttachedGoreCaps;                                           // 0x0398   (0x0010)  
	unsigned char                                      UnknownData07_6[0xA0];                                      // 0x03A8   (0x00A0)  MISSED
	FFadeSettings                                      FadeSettings;                                               // 0x0448   (0x0038)  


	/// Functions
	// Function /Script/Indiana.AppearanceComponent.SetVectorParameter
	// void SetVectorParameter(FName Parameter, FVector& Vector);                                                               // [0x17a6090] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetSlotVectorParameter
	// void SetSlotVectorParameter(FName SlotName, FName Parameter, FVector& Vector);                                           // [0x17a5f70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetSlotTextureParameter
	// void SetSlotTextureParameter(FName SlotName, FName Parameter, class UTexture* Texture);                                  // [0x17a5e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetSlotScalarParameter
	// void SetSlotScalarParameter(FName SlotName, FName Parameter, float Scalar);                                              // [0x17a5d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetSkinTone
	// void SetSkinTone(class USkinTone* NewSkinTone);                                                                          // [0x17a5cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetScar
	// void SetScar(class UScar* NewScar);                                                                                      // [0x17a5c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetScalarParameter
	// void SetScalarParameter(FName Parameter, float Scalar);                                                                  // [0x17a5b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetMakeup
	// void SetMakeup(class UMakeup* NewMakeup);                                                                                // [0x17a5ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetHairColor
	// void SetHairColor(class UHairColor* NewColor);                                                                           // [0x17a5a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetHair
	// void SetHair(class UHairAppearances* NewHair);                                                                           // [0x17a59a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetGender
	// void SetGender(FGameplayTag& Gender);                                                                                    // [0x17a5910] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetEyeColor
	// void SetEyeColor(class UEyeColor* NewColor);                                                                             // [0x17a5880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetDirt
	// void SetDirt(class UDirt* NewDirt);                                                                                      // [0x17a57f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetDefaultHead
	// void SetDefaultHead(class UHeadAppearances* Head);                                                                       // [0x17a5760] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetDefaultBody
	// void SetDefaultBody(class UBodyAppearances* Body);                                                                       // [0x17a56d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBrows
	// void SetBrows(class UBrows* NewBrows);                                                                                   // [0x17a5640] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBoneModificationPresets
	// void SetBoneModificationPresets(class UBoneModificationsPreset* Presets);                                                // [0x17a55b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBoneModification
	// void SetBoneModification(class UBoneModifications* Modifications, float Value);                                          // [0x17a54e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBeardColor
	// void SetBeardColor(class UBeardColor* NewColor);                                                                         // [0x17a5450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBeard
	// void SetBeard(class UBeardAppearances* NewBeard);                                                                        // [0x17a53c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetAge
	// void SetAge(float NewAge);                                                                                               // [0x17a5340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.RemoveBoneModification
	// void RemoveBoneModification(class UBoneModifications* Modifications);                                                    // [0x17a52b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.RefreshFullAppearance
	// void RefreshFullAppearance();                                                                                            // [0x17a5290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.InvalidateOldBoneModifications
	// void InvalidateOldBoneModifications();                                                                                   // [0x17a5160] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBreakBoneName
	// bool GetBreakBoneName(FGameplayTag BodyPartTag, FName& BoneName);                                                        // [0x17a4f90] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBreakBoneAndSocketNames
	// bool GetBreakBoneAndSocketNames(FGameplayTag BodyPartTag, FName& BoneName, FName& AttachedSocket, FName& DetachedSocket); // [0x17a4df0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBreakableBoneNames
	// TSet<FName> GetBreakableBoneNames();                                                                                     // [0x17a5070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBodyPartTags
	// TSet<FGameplayTag> GetBodyPartTags();                                                                                    // [0x17a4b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBodyPartsArray
	// TArray<FBodyPart> GetBodyPartsArray();                                                                                   // [0x17a4c80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBodyPart
	// FGameplayTag GetBodyPart(FName& BoneName, FVector& ImpactLocation);                                                      // [0x17a4aa0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.DebugTargetVertexColors
	// void DebugTargetVertexColors();                                                                                          // [0x17a4a80] Final|Exec|Native|Protected 
	// Function /Script/Indiana.AppearanceComponent.ApplyAppearancePreset
	// void ApplyAppearancePreset(class UAppearancePreset* Preset);                                                             // [0x17a49f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.AppearancePreset
/// Size: 0x0128 (296 bytes) (0x000038 - 0x000128) align 8 MaxSize: 0x0128
class UAppearancePreset : public UPrimaryDataAsset
{ 
public:
	class UHeadAppearances*                            Head;                                                       // 0x0038   (0x0008)  
	class UBodyAppearances*                            Body;                                                       // 0x0040   (0x0008)  
	FGameplayTag                                       Gender;                                                     // 0x0048   (0x0008)  
	FAppearanceCustomizations                          Customizations;                                             // 0x0050   (0x0078)  
	bool                                               bAllowUnlimitedBoneMods;                                    // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00C9   (0x0007)  MISSED
	class UBoneModificationsPreset*                    BoneModPreset;                                              // 0x00D0   (0x0008)  
	TMap<class UBoneModifications*, float>             BoneModifications;                                          // 0x00D8   (0x0050)  
};

/// Class /Script/Indiana.ApplyRosterSkillBonusesStatusEffect
/// Size: 0x01C0 (448 bytes) (0x000188 - 0x0001C0) align 8 MaxSize: 0x01C0
class UApplyRosterSkillBonusesStatusEffect : public UStatusEffect
{ 
public:
	float                                              Scalar;                                                     // 0x0188   (0x0004)  
	unsigned char                                      UnknownData00_7[0x34];                                      // 0x018C   (0x0034)  MISSED
};

/// Class /Script/Indiana.ApproachBehaviorStateInfo
/// Size: 0x0160 (352 bytes) (0x000120 - 0x000160) align 8 MaxSize: 0x0160
class UApproachBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0120   (0x0040)  MISSED
};

/// Class /Script/Indiana.ApproachRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UApproachRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Struct /Script/Indiana.AptitudeTextures
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 MaxSize: 0x0078
struct FAptitudeTextures
{ 
	TWeakObjectPtr<class UTexture*>                    Uninteractable;                                             // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture*>                    Highlighted;                                                // 0x0028   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0030   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture*>                    Icon;                                                       // 0x0050   (0x0008)  
	unsigned char                                      UnknownData02_7[0x20];                                      // 0x0058   (0x0020)  MISSED
};

/// Class /Script/Indiana.Aptitude
/// Size: 0x00D0 (208 bytes) (0x000030 - 0x0000D0) align 8 MaxSize: 0x00D0
class UAptitude : public UObject
{ 
public:
	FLocString                                         Name;                                                       // 0x0030   (0x0008)  
	FLocString                                         Description;                                                // 0x0038   (0x0008)  
	TArray<class UClass*>                              Spells;                                                     // 0x0040   (0x0010)  
	FAptitudeTextures                                  Icons;                                                      // 0x0050   (0x0078)  
	EAptitudeType                                      Aptitude;                                                   // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00C9   (0x0007)  MISSED
};

/// Class /Script/Indiana.AptitudeReadoutWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class UAptitudeReadoutWidget : public UIndianaUserWidget
{ 
public:
	class UVerticalBox*                                TextContainer;                                              // 0x0300   (0x0008)  
	class UTextBlockBase*                              AptitudeNameTextBlock;                                      // 0x0308   (0x0008)  
	class UTextBlockBase*                              AptitudeSynopsisTextBlock;                                  // 0x0310   (0x0008)  
	class UTextBlockBase*                              AptitudeDescriptionTextBlock;                               // 0x0318   (0x0008)  
};

/// Class /Script/Indiana.AptitudeSummaryWidget
/// Size: 0x0290 (656 bytes) (0x000278 - 0x000290) align 8 MaxSize: 0x0290
class UAptitudeSummaryWidget : public UUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0278   (0x0008)  
	class UTextBlockBase*                              AptitudeTitleTextBlock;                                     // 0x0280   (0x0008)  
	class UTextBlockBase*                              AptitudeDescTextBlock;                                      // 0x0288   (0x0008)  
};

/// Class /Script/Indiana.DegradableItem
/// Size: 0x0128 (296 bytes) (0x000118 - 0x000128) align 8 MaxSize: 0x0128
class UDegradableItem : public UItem
{ 
public:
	unsigned char                                      UnknownData00_8[0x4];                                       // 0x0118   (0x0004)  MISSED
	float                                              ItemMaxHealth;                                              // 0x011C   (0x0004)  
	EItemDegradationState                              DegradationState;                                           // 0x0120   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0121   (0x0007)  MISSED
};

/// Class /Script/Indiana.ArmorBase
/// Size: 0x01B8 (440 bytes) (0x000128 - 0x0001B8) align 8 MaxSize: 0x01B8
class UArmorBase : public UDegradableItem
{ 
public:
	TWeakObjectPtr<class UStaticMesh*>                 PickupMesh;                                                 // 0x0128   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0130   (0x0020)  MISSED
	SDK_UNDEFINED(80,365) /* TMap<FName, TWeakObjectPtr<UMaterialInterface*>> */ __um(PickupMaterialOverrides);    // 0x0150   (0x0050)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x01A0   (0x0008)  MISSED
	class UModAppearances*                             Dummy;                                                      // 0x01A8   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x01B0   (0x0008)  MISSED
};

/// Struct /Script/Indiana.ArmorData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 4 MaxSize: 0x0048
struct FArmorData
{ 
	int32_t                                            PhysicalDT;                                                 // 0x0000   (0x0004)  
	int32_t                                            PhysicalDR;                                                 // 0x0004   (0x0004)  
	int32_t                                            ThermalDT;                                                  // 0x0008   (0x0004)  
	int32_t                                            ThermalDR;                                                  // 0x000C   (0x0004)  
	int32_t                                            EnergyDT;                                                   // 0x0010   (0x0004)  
	int32_t                                            EnergyDR;                                                   // 0x0014   (0x0004)  
	int32_t                                            ShockDT;                                                    // 0x0018   (0x0004)  
	int32_t                                            ShockDR;                                                    // 0x001C   (0x0004)  
	int32_t                                            CorrosionDT;                                                // 0x0020   (0x0004)  
	int32_t                                            CorrosionDR;                                                // 0x0024   (0x0004)  
	int32_t                                            NRayDT;                                                     // 0x0028   (0x0004)  
	int32_t                                            NRayDR;                                                     // 0x002C   (0x0004)  
	int32_t                                            ColdDT;                                                     // 0x0030   (0x0004)  
	int32_t                                            ColdDR;                                                     // 0x0034   (0x0004)  
	int32_t                                            DamageThreshold;                                            // 0x0038   (0x0004)  
	int32_t                                            DamageResistance;                                           // 0x003C   (0x0004)  
	FGameplayTag                                       ArmorType;                                                  // 0x0040   (0x0008)  
};

/// Struct /Script/Indiana.ArmorPiece
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 MaxSize: 0x0068
struct FArmorPiece
{ 
	FGameplayTagContainer                              BodyParts;                                                  // 0x0000   (0x0020)  
	FArmorData                                         ArmorData;                                                  // 0x0020   (0x0048)  
};

/// Struct /Script/Indiana.ArmorModifier
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FArmorModifier
{ 
	FGameplayTagContainer                              EffectedBodyParts;                                          // 0x0000   (0x0020)  
	TArray<class UClass*>                              DamageTypes;                                                // 0x0020   (0x0010)  
	int32_t                                            DamageThreshold;                                            // 0x0030   (0x0004)  
	float                                              DamageThresholdPercent;                                     // 0x0034   (0x0004)  
	int32_t                                            DamageResistance;                                           // 0x0038   (0x0004)  
	float                                              DamageResistancePercent;                                    // 0x003C   (0x0004)  
};

/// Struct /Script/Indiana.ArmorPieceEntry
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 MaxSize: 0x0070
struct FArmorPieceEntry
{ 
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x0000   (0x0070)  MISSED
};

/// Struct /Script/Indiana.ArmorModifierEntry
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FArmorModifierEntry
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Class /Script/Indiana.ArmorComponent
/// Size: 0x0150 (336 bytes) (0x0000E0 - 0x000150) align 8 MaxSize: 0x0150
class UArmorComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	TArray<FArmorPiece>                                InnateArmorValues;                                          // 0x00E8   (0x0010)  
	FGameplayTag                                       UnarmoredArmorType;                                         // 0x00F8   (0x0008)  
	TArray<FArmorModifier>                             InnateArmorModifiers;                                       // 0x0100   (0x0010)  
	bool                                               bSwarm;                                                     // 0x0110   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0111   (0x0007)  MISSED
	TArray<FArmorPieceEntry>                           EquippedArmor;                                              // 0x0118   (0x0010)  
	TArray<FArmorModifierEntry>                        ArmorModifiers;                                             // 0x0128   (0x0010)  
	unsigned char                                      UnknownData02_7[0x18];                                      // 0x0138   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.ArmorComponent.TinkerAdvanceArmor
	// void TinkerAdvanceArmor(bool bIgnoreCost);                                                                               // [0x17ab350] Final|Exec|Native|Public 
};

/// Struct /Script/Indiana.StatModifierDescriptionBase
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FStatModifierDescriptionBase
{ 
	class URpgStat*                                    RpgStat;                                                    // 0x0000   (0x0008)  
	ERpgStatGroup                                      Group;                                                      // 0x0008   (0x0001)  
	EStatModifierType                                  ModifierType;                                               // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x000A   (0x0006)  MISSED
};

/// Struct /Script/Indiana.StatModifierDescription
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align 8 MaxSize: 0x0018
struct FStatModifierDescription : FStatModifierDescriptionBase
{ 
	float                                              Value;                                                      // 0x0010   (0x0004)  
	bool                                               bIgnoreScalingBonus;                                        // 0x0014   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Class /Script/Indiana.ArmorItem
/// Size: 0x01F8 (504 bytes) (0x0001B8 - 0x0001F8) align 8 MaxSize: 0x01F8
class UArmorItem : public UArmorBase
{ 
public:
	bool                                               bSealed;                                                    // 0x01B8   (0x0001)  
	bool                                               bCanGenerateLootOnBreakdown;                                // 0x01B9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x01BA   (0x0006)  MISSED
	TArray<FArmorModifier>                             ArmorModifiers;                                             // 0x01C0   (0x0010)  
	TArray<FStatModifierDescription>                   StatModifiers;                                              // 0x01D0   (0x0010)  
	EArmorSlot                                         ArmorSlot;                                                  // 0x01E0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x01E1   (0x0017)  MISSED
};

/// Struct /Script/Indiana.NewArmorModVisual
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FNewArmorModVisual
{ 
	class UModAppearances*                             ModAppearances;                                             // 0x0000   (0x0008)  
	bool                                               bAppliesToAllArmorSets;                                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	SDK_UNDEFINED(16,366) /* TArray<TSoftObjectPtr<UClass*>> */ __um(ArmorSets);                                   // 0x0010   (0x0010)  
};

/// Struct /Script/Indiana.ArmorVisualProperties
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 MaxSize: 0x0058
struct FArmorVisualProperties
{ 
	bool                                               bModdableByArmorSet;                                        // 0x0000   (0x0001)  
	bool                                               bModdableByHelmet;                                          // 0x0001   (0x0001)  
	bool                                               bModdableByModsDefault;                                     // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x0003   (0x0005)  MISSED
	TMap<EArmorModSlot, bool>                          ModdablePerMod;                                             // 0x0008   (0x0050)  
};

/// Class /Script/Indiana.ArmorModItem
/// Size: 0x0260 (608 bytes) (0x0001B8 - 0x000260) align 8 MaxSize: 0x0260
class UArmorModItem : public UArmorBase
{ 
public:
	TArray<FNewArmorModVisual>                         NewVisuals;                                                 // 0x01B8   (0x0010)  
	FArmorVisualProperties                             VisualProperties;                                           // 0x01C8   (0x0058)  
	TArray<FArmorModifier>                             ArmorModifiers;                                             // 0x0220   (0x0010)  
	TArray<FStatModifierDescription>                   StatModifiers;                                              // 0x0230   (0x0010)  
	class UClass*                                      Spell;                                                      // 0x0240   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0248   (0x0018)  MISSED
};

/// Class /Script/Indiana.ArmorModArmoring
/// Size: 0x0260 (608 bytes) (0x000260 - 0x000260) align 8 MaxSize: 0x0260
class UArmorModArmoring : public UArmorModItem
{ 
public:
};

/// Class /Script/Indiana.ArmorModUtility
/// Size: 0x0260 (608 bytes) (0x000260 - 0x000260) align 8 MaxSize: 0x0260
class UArmorModUtility : public UArmorModItem
{ 
public:
};

/// Class /Script/Indiana.ArmorModResistance
/// Size: 0x0260 (608 bytes) (0x000260 - 0x000260) align 8 MaxSize: 0x0260
class UArmorModResistance : public UArmorModItem
{ 
public:
};

/// Class /Script/Indiana.ArmorModDampening
/// Size: 0x0260 (608 bytes) (0x000260 - 0x000260) align 8 MaxSize: 0x0260
class UArmorModDampening : public UArmorModItem
{ 
public:
};

/// Struct /Script/Indiana.NewArmorSetModVisual
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FNewArmorSetModVisual
{ 
	class UModAppearances*                             ModAppearances;                                             // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,367) /* TArray<TSoftObjectPtr<UClass*>> */ __um(ArmorMods);                                   // 0x0008   (0x0010)  
};

/// Struct /Script/Indiana.ArmorSetModSlot
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FArmorSetModSlot
{ 
	EArmorModSlot                                      ModSlot;                                                    // 0x0000   (0x0001)  
	bool                                               bModdable;                                                  // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	class UClass*                                      CurrentModClass;                                            // 0x0008   (0x0008)  
	class UArmorModItem*                               EquippedMod;                                                // 0x0010   (0x0008)  
};

/// Struct /Script/Indiana.StatModifierInstance
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FStatModifierInstance
{ 
	TWeakObjectPtr<class UObject*>                     SourceObject;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FStatModifierDescription                           StatModifier;                                               // 0x0010   (0x0018)  
};

/// Struct /Script/Indiana.StatInstance
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 MaxSize: 0x0038
struct FStatInstance
{ 
	float                                              InherentValue;                                              // 0x0000   (0x0004)  
	float                                              InherentMultiplier;                                         // 0x0004   (0x0004)  
	TArray<FStatModifierInstance>                      Modifiers;                                                  // 0x0008   (0x0010)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0018   (0x0020)  MISSED
};

/// Struct /Script/Indiana.RpgStatCollection
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 MaxSize: 0x0068
struct FRpgStatCollection
{ 
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	TMap<class URpgStat*, FStatInstance>               StatMap;                                                    // 0x0010   (0x0050)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Indiana.ArmorSet
/// Size: 0x0370 (880 bytes) (0x0001F8 - 0x000370) align 8 MaxSize: 0x0370
class UArmorSet : public UArmorItem
{ 
public:
	class UBodyAppearances*                            BodyAppearances;                                            // 0x01F8   (0x0008)  
	TArray<FNewArmorSetModVisual>                      NewArmorModVisuals;                                         // 0x0200   (0x0010)  
	FArmorVisualProperties                             VisualProperties;                                           // 0x0210   (0x0058)  
	TArray<FArmorPiece>                                Armor;                                                      // 0x0268   (0x0010)  
	FArmorSetModSlot                                   ArmorModSlots[4];                                           // 0x0278   (0x0060)  
	FName                                              ArmorSetAudio;                                              // 0x02D8   (0x0008)  
	TEnumAsByte<EPhysicalSurface>                      AudioPlayerSurfaceType;                                     // 0x02E0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02E1   (0x0007)  MISSED
	FRpgStatCollection                                 RpgStatCollection;                                          // 0x02E8   (0x0068)  
	TArray<class UMicroModTable*>                      MicroModTables;                                             // 0x0350   (0x0010)  
	class UClass*                                      EquippedMicroMod;                                           // 0x0360   (0x0008)  
	TWeakObjectPtr<class URpgStatComponent*>           WearerRpgStatComponent;                                     // 0x0368   (0x0008)  
};

/// Class /Script/Indiana.ArmorStatusEffect
/// Size: 0x01A8 (424 bytes) (0x000188 - 0x0001A8) align 8 MaxSize: 0x01A8
class UArmorStatusEffect : public UStatusEffect
{ 
public:
	TArray<FArmorModifier>                             Modifiers;                                                  // 0x0188   (0x0010)  
	bool                                               bPrependValue;                                              // 0x0198   (0x0001)  
	bool                                               bAppendSignToValue;                                         // 0x0199   (0x0001)  
	unsigned char                                      UnknownData00_7[0xE];                                       // 0x019A   (0x000E)  MISSED
};

/// Struct /Script/Indiana.AssetInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FAssetInfo
{ 
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0000   (0x0020)  MISSED
	class UObject*                                     Asset;                                                      // 0x0020   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Indiana.AssetCollection
/// Size: 0x00D8 (216 bytes) (0x000030 - 0x0000D8) align 8 MaxSize: 0x00D8
class UAssetCollection : public UObject
{ 
public:
	TMap<uint32_t, FAssetInfo>                         AssetInfos;                                                 // 0x0030   (0x0050)  
	unsigned char                                      UnknownData00_7[0x58];                                      // 0x0080   (0x0058)  MISSED
};

/// Class /Script/Indiana.AssetList
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UAssetList : public UDataAsset
{ 
public:
	SDK_UNDEFINED(80,368) /* TSet<FString> */          __um(Assets);                                               // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.ModVisual
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align 8 MaxSize: 0x0068
class UModVisual : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0030   (0x0010)  MISSED
	TArray<FName>                                      NewComponentTags;                                           // 0x0040   (0x0010)  
	TArray<FName>                                      RequiredComponentTags;                                      // 0x0050   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Indiana.AttachFxModVisual
/// Size: 0x00A0 (160 bytes) (0x000068 - 0x0000A0) align 8 MaxSize: 0x00A0
class UAttachFxModVisual : public UModVisual
{ 
public:
	TWeakObjectPtr<class UParticleSystem*>             ParticleSystem;                                             // 0x0068   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0070   (0x0020)  MISSED
	FName                                              AttachSocket;                                               // 0x0090   (0x0008)  
	class UParticleSystemComponent*                    AddedComponent;                                             // 0x0098   (0x0008)  
};

/// Class /Script/Indiana.AttachNiagaraFxModVisual
/// Size: 0x00A0 (160 bytes) (0x000068 - 0x0000A0) align 8 MaxSize: 0x00A0
class UAttachNiagaraFxModVisual : public UModVisual
{ 
public:
	TWeakObjectPtr<class UNiagaraSystem*>              ParticleSystem;                                             // 0x0068   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0070   (0x0020)  MISSED
	FName                                              AttachSocket;                                               // 0x0090   (0x0008)  
	class UNiagaraComponent*                           AddedComponent;                                             // 0x0098   (0x0008)  
};

/// Class /Script/Indiana.AttackInfo
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align 8 MaxSize: 0x0050
class UAttackInfo : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0030   (0x0020)  MISSED
};

/// Class /Script/Indiana.MeleeAttackInfo
/// Size: 0x0058 (88 bytes) (0x000050 - 0x000058) align 8 MaxSize: 0x0058
class UMeleeAttackInfo : public UAttackInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Indiana.AttributeSliderGroupWidget
/// Size: 0x03D0 (976 bytes) (0x000300 - 0x0003D0) align 8 MaxSize: 0x03D0
class UAttributeSliderGroupWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0300   (0x0020)  MISSED
	class UTextBlockBase*                              TitleTextBlock;                                             // 0x0320   (0x0008)  
	class UCompanionBehaviorOptionWidget*              OptionSelector1;                                            // 0x0328   (0x0008)  
	class UCompanionBehaviorOptionWidget*              OptionSelector2;                                            // 0x0330   (0x0008)  
	class UImage*                                      Option1ValueImage;                                          // 0x0338   (0x0008)  
	class UImage*                                      Option2ValueImage;                                          // 0x0340   (0x0008)  
	FLocString                                         OptionOneNameLocString;                                     // 0x0348   (0x0008)  
	FLocString                                         OptionOneDescriptionLocString;                              // 0x0350   (0x0008)  
	FLocString                                         OptionTwoNameLocString;                                     // 0x0358   (0x0008)  
	FLocString                                         OptionTwoDescriptionLocString;                              // 0x0360   (0x0008)  
	TMap<int32_t, class UTexture2D*>                   AttributeValueImages;                                       // 0x0368   (0x0050)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x03B8   (0x0018)  MISSED
};

/// Class /Script/Indiana.AttributeSliderPageWidget
/// Size: 0x0388 (904 bytes) (0x000300 - 0x000388) align 8 MaxSize: 0x0388
class UAttributeSliderPageWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x28];                                      // 0x0300   (0x0028)  MISSED
	class UVerticalBox*                                SliderContainer;                                            // 0x0328   (0x0008)  
	class UAttributeSliderGroupWidget*                 AttributeSliderGroup1;                                      // 0x0330   (0x0008)  
	class UAttributeSliderGroupWidget*                 AttributeSliderGroup2;                                      // 0x0338   (0x0008)  
	class UAttributeSliderGroupWidget*                 AttributeSliderGroup3;                                      // 0x0340   (0x0008)  
	class UTextBlockBase*                              PointsRemainingTextBlock;                                   // 0x0348   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0350   (0x0008)  
	class UCharacterDescriptionPanel*                  DescriptionPanel;                                           // 0x0358   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0360   (0x0028)  MISSED
};

/// Class /Script/Indiana.AttributeSummaryEntryWidget
/// Size: 0x02B0 (688 bytes) (0x000278 - 0x0002B0) align 8 MaxSize: 0x02B0
class UAttributeSummaryEntryWidget : public UUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0278   (0x0008)  
	class UTextBlockBase*                              AttributeNameText;                                          // 0x0280   (0x0008)  
	class UTextBlockBase*                              AttributeLevelText;                                         // 0x0288   (0x0008)  
	TArray<class UTexture2D*>                          AttributeValueImages;                                       // 0x0290   (0x0010)  
	class UImage*                                      ValueImage;                                                 // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x02A8   (0x0008)  MISSED
};

/// Class /Script/Indiana.AttributeSummaryGroupWidget
/// Size: 0x0290 (656 bytes) (0x000278 - 0x000290) align 8 MaxSize: 0x0290
class UAttributeSummaryGroupWidget : public UUserWidget
{ 
public:
	class UAttributeSummaryEntryWidget*                AttributeOne;                                               // 0x0278   (0x0008)  
	class UAttributeSummaryEntryWidget*                AttributeTwo;                                               // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0288   (0x0008)  MISSED
};

/// Class /Script/Indiana.AttributeSummaryWidget
/// Size: 0x02E0 (736 bytes) (0x000278 - 0x0002E0) align 8 MaxSize: 0x02E0
class UAttributeSummaryWidget : public UUserWidget
{ 
public:
	class UAttributeSummaryGroupWidget*                MindEntry;                                                  // 0x0278   (0x0008)  
	class UAttributeSummaryGroupWidget*                BodyEntry;                                                  // 0x0280   (0x0008)  
	class UAttributeSummaryGroupWidget*                PersonalityEntry;                                           // 0x0288   (0x0008)  
	TMap<int32_t, class UTexture2D*>                   AttributeValueImages;                                       // 0x0290   (0x0050)  
};

/// Class /Script/Indiana.AudioHelpers
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UAudioHelpers : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Indiana.AudioHelpers.LoadAkAudioEventReference
	// class UAkAudioEvent* LoadAkAudioEventReference(FString Path);                                                            // [0x17ab2a0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InteractableActor
/// Size: 0x0308 (776 bytes) (0x0002B8 - 0x000308) align 8 MaxSize: 0x0308
class AInteractableActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02B8   (0x0008)  MISSED
	SDK_UNDEFINED(16,369) /* FMulticastInlineDelegate */ __um(OnInteract);                                         // 0x02C0   (0x0010)  
	class UInteractableComponent*                      Interactable;                                               // 0x02D0   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x02D8   (0x0008)  
	FVector                                            Floats;                                                     // 0x02E0   (0x000C)  
	FIntVector                                         Ints;                                                       // 0x02EC   (0x000C)  
	bool                                               bUseInteractHoldTime;                                       // 0x02F8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x02F9   (0x0003)  MISSED
	FGameplayTag                                       GameplayTag;                                                // 0x02FC   (0x0008)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x0304   (0x0004)  MISSED
};

/// Class /Script/Indiana.AudioLogActor
/// Size: 0x0358 (856 bytes) (0x000308 - 0x000358) align 8 MaxSize: 0x0358
class AAudioLogActor : public AInteractableActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0308   (0x0030)  MISSED
	class UAudioLogDataAsset*                          AudioLogData;                                               // 0x0338   (0x0008)  
	TArray<class UScriptEvent*>                        ScriptEvents;                                               // 0x0340   (0x0010)  
	bool                                               bPlayOnPickup;                                              // 0x0350   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0351   (0x0007)  MISSED
};

/// Struct /Script/Indiana.AudioLogDefinition
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FAudioLogDefinition
{ 
	class UConversationData*                           ConversationData;                                           // 0x0000   (0x0008)  
	int32_t                                            StartNode;                                                  // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Indiana.AudioLogDataAsset
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UAudioLogDataAsset : public UDataAsset
{ 
public:
	FLocString                                         Name;                                                       // 0x0038   (0x0008)  
	FLocString                                         DescriptionText;                                            // 0x0040   (0x0008)  
	FAudioLogDefinition                                AudioLogDefinition;                                         // 0x0048   (0x0010)  
};

/// Class /Script/Indiana.AudioLogLibraryDataAsset
/// Size: 0x0078 (120 bytes) (0x000038 - 0x000078) align 8 MaxSize: 0x0078
class UAudioLogLibraryDataAsset : public UDataAsset
{ 
public:
	TArray<class UAudioLogDataAsset*>                  BaseGameAudioLogs;                                          // 0x0038   (0x0010)  
	TArray<class UAudioLogDataAsset*>                  INX01AudioLogs;                                             // 0x0048   (0x0010)  
	TArray<class UAudioLogDataAsset*>                  INX02AudioLogs;                                             // 0x0058   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0068   (0x0010)  MISSED
};

/// Class /Script/Indiana.GenericCollapsableList
/// Size: 0x0358 (856 bytes) (0x000300 - 0x000358) align 8 MaxSize: 0x0358
class UGenericCollapsableList : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0300   (0x0020)  MISSED
	class UImage*                                      UnseenImage;                                                // 0x0320   (0x0008)  
	class UExpandableAreaBase*                         ExpandableArea;                                             // 0x0328   (0x0008)  
	class UTextBlockBase*                              TitleTextBlock;                                             // 0x0330   (0x0008)  
	class UVerticalBox*                                EntryContainer;                                             // 0x0338   (0x0008)  
	FLocString                                         ListTitle;                                                  // 0x0340   (0x0008)  
	class UClass*                                      ListEntryClass;                                             // 0x0348   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0350   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.GenericCollapsableList.ExpandableAreaExpansionChanged
	// void ExpandableAreaExpansionChanged(class UExpandableAreaBase* Area, bool bIsExpanded);                                  // [0x182ca00] Final|Native|Protected 
};

/// Class /Script/Indiana.AudioLogList
/// Size: 0x03F8 (1016 bytes) (0x000358 - 0x0003F8) align 8 MaxSize: 0x03F8
class UAudioLogList : public UGenericCollapsableList
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0358   (0x0010)  MISSED
	EAudioLogPackageType                               PackageType;                                                // 0x0368   (0x0001)  
	unsigned char                                      UnknownData01_7[0x8F];                                      // 0x0369   (0x008F)  MISSED


	/// Functions
	// Function /Script/Indiana.AudioLogList.OnAudioLogViewedCB
	// void OnAudioLogViewedCB(class UGenericCollapsableListEntry* ListEntry);                                                  // [0x17b0260] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogList.OnAudioLogSelectedCB
	// void OnAudioLogSelectedCB(class UGenericCollapsableListEntry* ListEntry);                                                // [0x17b01d0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogList.OnAudioLogLibraryLoaded
	// void OnAudioLogLibraryLoaded(class UAudioLogLibraryDataAsset* LoadedAudioLogLibrary);                                    // [0x17affa0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogList.AddOldAudioLog
	// void AddOldAudioLog(class UAudioLogDataAsset* AudioLogDataAsset);                                                        // [0x17afc90] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogList.AddNewAudioLog
	// void AddNewAudioLog(class UAudioLogDataAsset* AudioLogDataAsset);                                                        // [0x17afc00] Final|Native|Protected 
};

/// Class /Script/Indiana.GenericCollapsableListEntry
/// Size: 0x02A0 (672 bytes) (0x000278 - 0x0002A0) align 8 MaxSize: 0x02A0
class UGenericCollapsableListEntry : public UUserWidget
{ 
public:
	class UImage*                                      ActiveImage;                                                // 0x0278   (0x0008)  
	class UImage*                                      UnseenImage;                                                // 0x0280   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0288   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0298   (0x0008)  MISSED
};

/// Class /Script/Indiana.AudioLogListEntryWidget
/// Size: 0x02A0 (672 bytes) (0x0002A0 - 0x0002A0) align 8 MaxSize: 0x02A0
class UAudioLogListEntryWidget : public UGenericCollapsableListEntry
{ 
public:
};

/// Class /Script/Indiana.AudioLogManager
/// Size: 0x0178 (376 bytes) (0x000030 - 0x000178) align 8 MaxSize: 0x0178
class UAudioLogManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0030   (0x0030)  MISSED
	TWeakObjectPtr<class UAudioLogLibraryDataAsset*>   SoftAudioLogLibrary;                                        // 0x0060   (0x0008)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x0068   (0x0030)  MISSED
	class UAudioLogLibraryDataAsset*                   AudioLogLibrary;                                            // 0x0098   (0x0008)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x00A0   (0x0010)  MISSED
	FLocString                                         InvalidAudioLogName;                                        // 0x00B0   (0x0008)  
	class UAkAudioEvent*                               PauseEvent;                                                 // 0x00B8   (0x0008)  
	class UAkAudioEvent*                               ResumeEvent;                                                // 0x00C0   (0x0008)  
	FLocString                                         TempAudioLogName;                                           // 0x00C8   (0x0008)  
	float                                              PostCombatTime;                                             // 0x00D0   (0x0004)  
	float                                              PostConversationTime;                                       // 0x00D4   (0x0004)  
	EAudioLogPlayState                                 CurrentAudioLogPlayState;                                   // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData03_7[0x9F];                                      // 0x00D9   (0x009F)  MISSED


	/// Functions
	// Function /Script/Indiana.AudioLogManager.StopCurrentAudioLog
	// void StopCurrentAudioLog(bool bForce);                                                                                   // [0x17b0e50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AudioLogManager.ResumeCurrentAudioLog
	// void ResumeCurrentAudioLog(bool bForce, bool bFromPlay);                                                                 // [0x17b0d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AudioLogManager.PlayAudioLog
	// void PlayAudioLog(int32_t AudioLogIndex);                                                                                // [0x17b0bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AudioLogManager.PauseCurrentAudioLog
	// void PauseCurrentAudioLog(bool bForce, bool bFromStop);                                                                  // [0x17b0b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AudioLogManager.OnPreMapLoad
	// void OnPreMapLoad(FString MapName);                                                                                      // [0x17b0930] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnPostMapLoad
	// void OnPostMapLoad(class UWorld* World);                                                                                 // [0x17b08a0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x17b07b0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnConversationEnded
	// void OnConversationEnded(class UConversationInstance* ConversationInstance);                                             // [0x17b03c0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnCombatStateChanged
	// void OnCombatStateChanged(bool bInCombat, bool bRestoring);                                                              // [0x17b02f0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnAudioLogLibraryLoaded
	// void OnAudioLogLibraryLoaded(TWeakObjectPtr<UAudioLogLibraryDataAsset*> LibraryDataAsset);                               // [0x17b0030] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.IsPlayingAudioLog
	// bool IsPlayingAudioLog();                                                                                                // [0x17aff70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AudioLogManager.GetCurrentAudioLogPlayState
	// EAudioLogPlayState GetCurrentAudioLogPlayState();                                                                        // [0x17aff30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AudioLogManager.CanStopCurrentAudioLog
	// bool CanStopCurrentAudioLog(bool bExclusive);                                                                            // [0x17afe90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AudioLogManager.CanResumeCurrentAudioLog
	// bool CanResumeCurrentAudioLog(bool bExclusive);                                                                          // [0x17afdc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AudioLogManager.CanPauseCurrentAudioLog
	// bool CanPauseCurrentAudioLog(bool bExclusive);                                                                           // [0x17afd20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaInterfaceUserWidget
/// Size: 0x0308 (776 bytes) (0x000300 - 0x000308) align 8 MaxSize: 0x0308
class UIndianaInterfaceUserWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0300   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaInterfaceUserWidget.SetInterfaceUserFocus
	// void SetInterfaceUserFocus();                                                                                            // [0x185b730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaInterfaceUserWidget.SetCursorVisible
	// void SetCursorVisible(bool bVisible);                                                                                    // [0x185b6a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.AudioLogWidget
/// Size: 0x0398 (920 bytes) (0x000308 - 0x000398) align 8 MaxSize: 0x0398
class UAudioLogWidget : public UIndianaInterfaceUserWidget
{ 
public:
	float                                              TimeToFadeIn;                                               // 0x0308   (0x0004)  
	float                                              TimeToFadeOut;                                              // 0x030C   (0x0004)  
	class UAudioLogLibraryDataAsset*                   AudioLogLibrary;                                            // 0x0310   (0x0008)  
	bool                                               bExclusiveMini;                                             // 0x0318   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0319   (0x0007)  MISSED
	class UTextBlockBase*                              LogNameTextBlock;                                           // 0x0320   (0x0008)  
	class UOverlay*                                    IconOverlay;                                                // 0x0328   (0x0008)  
	class UImage*                                      StopImage;                                                  // 0x0330   (0x0008)  
	class UTextBlockBase*                              TimerText;                                                  // 0x0338   (0x0008)  
	class UProgressBar*                                TrackProgressBar;                                           // 0x0340   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0348   (0x0008)  
	class UImage*                                      BackgroundImage;                                            // 0x0350   (0x0008)  
	class UTextBlockBase*                              SpeakerTextBlock;                                           // 0x0358   (0x0008)  
	class UTextBlockBase*                              MessageTextBlock;                                           // 0x0360   (0x0008)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x0368   (0x0030)  MISSED


	/// Functions
	// Function /Script/Indiana.AudioLogWidget.TacticalTimeDilationStart
	// void TacticalTimeDilationStart();                                                                                        // [0x17b0f60] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogWidget.TacticalTimeDilationEnd
	// void TacticalTimeDilationEnd(float Delta);                                                                               // [0x17b0ee0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogWidget.ShowAudioLog
	// void ShowAudioLog(bool bShow, float CurrentRenderOpacity);                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AudioLogWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x17b0690] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogWidget.OnAudioLogPlayStateChanged
	// void OnAudioLogPlayStateChanged(EAudioLogPlayState NewPlayState);                                                        // [0x17b0150] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogWidget.CanStopAudioLog
	// bool CanStopAudioLog();                                                                                                  // [0x17afe60] Final|Native|Public|Const 
};

/// Class /Script/Indiana.AudioParamModVisual
/// Size: 0x0088 (136 bytes) (0x000068 - 0x000088) align 8 MaxSize: 0x0088
class UAudioParamModVisual : public UModVisual
{ 
public:
	FName                                              RTPCName;                                                   // 0x0068   (0x0008)  
	float                                              RTPCValue;                                                  // 0x0070   (0x0004)  
	int32_t                                            InterpolationTime;                                          // 0x0074   (0x0004)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0078   (0x0010)  MISSED
};

/// Class /Script/Indiana.AudioSwitchModVisual
/// Size: 0x0088 (136 bytes) (0x000068 - 0x000088) align 8 MaxSize: 0x0088
class UAudioSwitchModVisual : public UModVisual
{ 
public:
	FName                                              SwitchGroupName;                                            // 0x0068   (0x0008)  
	FName                                              SwitchStateName;                                            // 0x0070   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0078   (0x0010)  MISSED
};

/// Class /Script/Indiana.AutoSneakAttackStatusEffect
/// Size: 0x0188 (392 bytes) (0x000188 - 0x000188) align 8 MaxSize: 0x0188
class UAutoSneakAttackStatusEffect : public UStatusEffect
{ 
public:
};

/// Class /Script/Indiana.AutoStasisTriggerComponent
/// Size: 0x0270 (624 bytes) (0x000268 - 0x000270) align 16 MaxSize: 0x0270
class UAutoStasisTriggerComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0268   (0x0008)  MISSED
};

/// Class /Script/Indiana.AutoStasisTrigger
/// Size: 0x0338 (824 bytes) (0x000310 - 0x000338) align 8 MaxSize: 0x0338
class AAutoStasisTrigger : public AVolume
{ 
public:
	SDK_UNDEFINED(16,370) /* TArray<TWeakObjectPtr<AActor*>> */ __um(StasisActors);                                // 0x0310   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0320   (0x0018)  MISSED
};

/// Class /Script/Indiana.BackgroundPanelWidget
/// Size: 0x0300 (768 bytes) (0x000278 - 0x000300) align 8 MaxSize: 0x0300
class UBackgroundPanelWidget : public UUserWidget
{ 
public:
	class UBorder*                                     Border;                                                     // 0x0278   (0x0008)  
	class UBorder*                                     BorderInner;                                                // 0x0280   (0x0008)  
	TWeakObjectPtr<class UTexture2D*>                  OuterTexture;                                               // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0290   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  InnerTexture;                                               // 0x02B0   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x02B8   (0x0020)  MISSED
	float                                              InnerDefaultOpacity;                                        // 0x02D8   (0x0004)  
	bool                                               bZeroOpacityIfNoTexture;                                    // 0x02DC   (0x0001)  
	unsigned char                                      UnknownData02_7[0x23];                                      // 0x02DD   (0x0023)  MISSED


	/// Functions
	// Function /Script/Indiana.BackgroundPanelWidget.SetBackgroundFocused
	// void SetBackgroundFocused(bool bFocused);                                                                                // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.BackgroundPanelWidget.RegisterButtons
	// void RegisterButtons(TArray<UButtonBase*> Buttons);                                                                      // [0x17b0c60] Final|Native|Public  
	// Function /Script/Indiana.BackgroundPanelWidget.OnOuterTextureLoaded
	// void OnOuterTextureLoaded(class UTexture2D* Texture);                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.BackgroundPanelWidget.OnInnerTextureLoaded
	// void OnInnerTextureLoaded(class UTexture2D* Texture);                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.BackgroundSplitPanelWidget
/// Size: 0x0360 (864 bytes) (0x000278 - 0x000360) align 8 MaxSize: 0x0360
class UBackgroundSplitPanelWidget : public UUserWidget
{ 
public:
	TWeakObjectPtr<class UTexture2D*>                  OuterTextureTop;                                            // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0280   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  OuterTextureBottom;                                         // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x02A8   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  InnerTextureTop;                                            // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x02D0   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  InnerTextureBottom;                                         // 0x02F0   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x02F8   (0x0020)  MISSED
	float                                              InnerDefaultOpacity;                                        // 0x0318   (0x0004)  
	unsigned char                                      UnknownData04_7[0x44];                                      // 0x031C   (0x0044)  MISSED


	/// Functions
	// Function /Script/Indiana.BackgroundSplitPanelWidget.OnOuterTopTextureLoaded
	// void OnOuterTopTextureLoaded(class UTexture2D* Texture);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.BackgroundSplitPanelWidget.OnOuterBottomTextureLoaded
	// void OnOuterBottomTextureLoaded(class UTexture2D* Texture);                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.BackgroundSplitPanelWidget.OnInnerTopTextureLoaded
	// void OnInnerTopTextureLoaded(class UTexture2D* Texture);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.BackgroundSplitPanelWidget.OnInnerBottomTextureLoaded
	// void OnInnerBottomTextureLoaded(class UTexture2D* Texture);                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.BaseInventoryItemManagement
/// Size: 0x03A0 (928 bytes) (0x000308 - 0x0003A0) align 8 MaxSize: 0x03A0
class UBaseInventoryItemManagement : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0308   (0x0030)  MISSED
	class UItemViewerWidget*                           ItemViewer;                                                 // 0x0338   (0x0008)  
	class UItemViewerNavigationWidget*                 ItemViewerNavigation;                                       // 0x0340   (0x0008)  
	class UClass*                                      ItemRepairClass;                                            // 0x0348   (0x0008)  
	class UScrollBox*                                  PageScrollBox;                                              // 0x0350   (0x0008)  
	class UBreakdownPopupWidget*                       BreakdownPopup;                                             // 0x0358   (0x0008)  
	class UScrollingWidgetGroup*                       ScrollingWidgetGroup;                                       // 0x0360   (0x0008)  
	class UItemViewerButtonWidget*                     HoveredItem;                                                // 0x0368   (0x0008)  
	class UActorRenderWidget*                          CharacterRenderer;                                          // 0x0370   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0378   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.BaseInventoryItemManagement.OnDragDrop_SetArmorSlot
	// void OnDragDrop_SetArmorSlot(class UIndianaDragDropOperation* Operation);                                                // [0x17b0600] Native|Protected     
	// Function /Script/Indiana.BaseInventoryItemManagement.OnDragDrop_JunkItem
	// void OnDragDrop_JunkItem(class UIndianaDragDropOperation* Operation);                                                    // [0x17b0570] Native|Protected     
	// Function /Script/Indiana.BaseInventoryItemManagement.OnDragDrop_ClearWeaponSlot
	// void OnDragDrop_ClearWeaponSlot(class UIndianaDragDropOperation* Operation);                                             // [0x17b04e0] Native|Protected     
	// Function /Script/Indiana.BaseInventoryItemManagement.OnDragDrop_BreakDownItem
	// void OnDragDrop_BreakDownItem(class UIndianaDragDropOperation* Operation);                                               // [0x17b0450] Native|Protected     
};

/// Class /Script/Indiana.BaseMapEntryWidget
/// Size: 0x0300 (768 bytes) (0x000300 - 0x000300) align 8 MaxSize: 0x0300
class UBaseMapEntryWidget : public UIndianaUserWidget
{ 
public:
};

/// Class /Script/Indiana.EventEffect
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEventEffect : public UObject
{ 
public:
};

/// Class /Script/Indiana.BasePlayAnimEventEffect
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UBasePlayAnimEventEffect : public UEventEffect
{ 
public:
	EMeshTarget                                        TargetMesh;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              DelayTimeMin;                                               // 0x0034   (0x0004)  
	float                                              DelayTimeMax;                                               // 0x0038   (0x0004)  
	bool                                               bComputeBlendOutTimeInDurationCalculation;                  // 0x003C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Class /Script/Indiana.BaseTeamData
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align 8 MaxSize: 0x0080
class UBaseTeamData : public UObject
{ 
public:
	SDK_UNDEFINED(80,371) /* TSet<UClass*> */          __um(Teams);                                                // 0x0030   (0x0050)  
};

/// Class /Script/Indiana.BasicMapFloorTrackedActor
/// Size: 0x02E8 (744 bytes) (0x0002B8 - 0x0002E8) align 8 MaxSize: 0x02E8
class ABasicMapFloorTrackedActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x02B8   (0x0030)  MISSED
};

/// Struct /Script/Indiana.BeaconProperties
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FBeaconProperties
{ 
	FLocString                                         DisplayText;                                                // 0x0000   (0x0008)  
	EBeaconType                                        BeaconType;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	class UClass*                                      BeaconTagWidgetClass;                                       // 0x0010   (0x0008)  
	bool                                               bAreaBeacon;                                                // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              AreaBeaconRadius;                                           // 0x001C   (0x0004)  
};

/// Class /Script/Indiana.NewBeacon
/// Size: 0x0338 (824 bytes) (0x0002B8 - 0x000338) align 8 MaxSize: 0x0338
class ANewBeacon : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x02B8   (0x0030)  MISSED
	FBeaconProperties                                  BeaconProperties;                                           // 0x02E8   (0x0020)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x0308   (0x0030)  MISSED
};

/// Class /Script/Indiana.BeaconComponent
/// Size: 0x02A0 (672 bytes) (0x000268 - 0x0002A0) align 16 MaxSize: 0x02A0
class UBeaconComponent : public USceneComponent
{ 
public:
	FBeaconProperties                                  BeaconProperties;                                           // 0x0268   (0x0020)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0288   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.BeaconComponent.Show
	// void Show();                                                                                                             // [0x17b0e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.BeaconComponent.Hide
	// void Hide();                                                                                                             // [0x17aff50] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.BeaconData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FBeaconData
{ 
	FVector                                            Position;                                                   // 0x0000   (0x000C)  
	FName                                              CurrentFloor;                                               // 0x000C   (0x0008)  
	ESpecialBeaconType                                 SpecialType;                                                // 0x0014   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	class UShipDestinationData*                        ShipDestinationData;                                        // 0x0018   (0x0008)  
	FBeaconProperties                                  BeaconProperties;                                           // 0x0020   (0x0020)  
};

/// Struct /Script/Indiana.MapBeaconCache
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 8 MaxSize: 0x00A0
struct FMapBeaconCache
{ 
	TMap<FGuid, FBeaconData>                           BeaconData;                                                 // 0x0000   (0x0050)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0050   (0x0050)  MISSED
};

/// Class /Script/Indiana.BeaconManager
/// Size: 0x0148 (328 bytes) (0x000030 - 0x000148) align 8 MaxSize: 0x0148
class UBeaconManager : public UObject
{ 
public:
	TMap<FString, FMapBeaconCache>                     BeaconCaches;                                               // 0x0030   (0x0050)  
	unsigned char                                      UnknownData00_7[0xC8];                                      // 0x0080   (0x00C8)  MISSED


	/// Functions
	// Function /Script/Indiana.BeaconManager.OnShipChangedLocation
	// void OnShipChangedLocation(class UShipDestinationData* NewShipLocation);                                                 // [0x17b09e0] Final|Native|Protected 
};

/// Class /Script/Indiana.BeaconMapEntryWidget
/// Size: 0x0358 (856 bytes) (0x000300 - 0x000358) align 8 MaxSize: 0x0358
class UBeaconMapEntryWidget : public UBaseMapEntryWidget
{ 
public:
	class UTexture2D*                                  ActiveQuestIcon;                                            // 0x0300   (0x0008)  
	class UTexture2D*                                  InactiveQuestIcon;                                          // 0x0308   (0x0008)  
	class UImage*                                      Icon;                                                       // 0x0310   (0x0008)  
	class UHorizontalBox*                              QuestNameHBox;                                              // 0x0318   (0x0008)  
	class UTextBlockBase*                              QuestNameTextBlock;                                         // 0x0320   (0x0008)  
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x0328   (0x0030)  MISSED
};

/// Class /Script/Indiana.BeaconTagWidget
/// Size: 0x0370 (880 bytes) (0x000300 - 0x000370) align 8 MaxSize: 0x0370
class UBeaconTagWidget : public UIndianaUserWidget
{ 
public:
	class UCanvasPanel*                                MainCanvasPanel;                                            // 0x0300   (0x0008)  
	class UVerticalBox*                                RootBox;                                                    // 0x0308   (0x0008)  
	FString                                            BeaconDisplayText;                                          // 0x0310   (0x0010)  
	class UTextBlockBase*                              DistanceTextBlock;                                          // 0x0320   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0328   (0x0008)  
	class UImage*                                      BeaconImage;                                                // 0x0330   (0x0008)  
	ESlateVisibility                                   HiddenNameTextBlockVisibility;                              // 0x0338   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0339   (0x0007)  MISSED
	class UTexture2D*                                  OnScreenBeaconTexture;                                      // 0x0340   (0x0008)  
	class UTexture2D*                                  OffScreenBeaconTexture;                                     // 0x0348   (0x0008)  
	class UTexture2D*                                  OnScreenAreaBeaconTexture;                                  // 0x0350   (0x0008)  
	class UTexture2D*                                  OffScreenAreaBeaconTexture;                                 // 0x0358   (0x0008)  
	EUIMarkerType                                      LastMarkerType;                                             // 0x0360   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x0361   (0x000F)  MISSED


	/// Functions
	// Function /Script/Indiana.BeaconTagWidget.OnWaypointMarkerVisibilityChanged
	// void OnWaypointMarkerVisibilityChanged(bool bVisible);                                                                   // [0x17b0a70] Final|Native|Protected 
	// Function /Script/Indiana.BeaconTagWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x17b0720] Final|Native|Protected 
};

/// Class /Script/Indiana.IndianaWidgetComponent
/// Size: 0x0670 (1648 bytes) (0x000650 - 0x000670) align 16 MaxSize: 0x0670
class UIndianaWidgetComponent : public UWidgetComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0650   (0x0020)  MISSED
};

/// Class /Script/Indiana.BeaconTagWidgetComponent
/// Size: 0x0680 (1664 bytes) (0x000670 - 0x000680) align 16 MaxSize: 0x0680
class UBeaconTagWidgetComponent : public UIndianaWidgetComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0670   (0x0010)  MISSED
};

/// Struct /Script/Indiana.DeathClassOverride
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FDeathClassOverride
{ 
	class UClass*                                      DeathClass;                                                 // 0x0000   (0x0008)  
	FGameplayTag                                       CreatureType;                                               // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.DamageDescription
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 MaxSize: 0x0078
struct FDamageDescription
{ 
	EDamageEventType                                   DamageEventType;                                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UClass*                                      DamageType;                                                 // 0x0008   (0x0008)  
	class UClass*                                      SecondaryDamageType;                                        // 0x0010   (0x0008)  
	TArray<class UClass*>                              GuaranteedStatusEffects;                                    // 0x0018   (0x0010)  
	EMeleeAttackType                                   MeleeAttackType;                                            // 0x0028   (0x0001)  
	EHitReactType                                      HitReactionType;                                            // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	float                                              BaseDamage;                                                 // 0x002C   (0x0004)  
	float                                              DamageRange;                                                // 0x0030   (0x0004)  
	float                                              BaseCritChance;                                             // 0x0034   (0x0004)  
	float                                              CritMultiplier;                                             // 0x0038   (0x0004)  
	float                                              StealthMultiplier;                                          // 0x003C   (0x0004)  
	float                                              GrazeChanceModifier;                                        // 0x0040   (0x0004)  
	float                                              GrazeMultiplier;                                            // 0x0044   (0x0004)  
	float                                              DamageResistanceMultiplier;                                 // 0x0048   (0x0004)  
	float                                              DamageThresholdMultiplier;                                  // 0x004C   (0x0004)  
	float                                              PostArmorDamageMultiplier;                                  // 0x0050   (0x0004)  
	float                                              ImpulseOverride;                                            // 0x0054   (0x0004)  
	float                                              MinimumDamage;                                              // 0x0058   (0x0004)  
	float                                              InnerRadius;                                                // 0x005C   (0x0004)  
	float                                              OuterRadius;                                                // 0x0060   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0064   (0x0004)  
	TArray<FDeathClassOverride>                        DeathClassOverrides;                                        // 0x0068   (0x0010)  
};

/// Struct /Script/Indiana.DamageLevelScaler
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 MaxSize: 0x0090
struct FDamageLevelScaler
{ 
	bool                                               bScaleBaseDamage;                                           // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FRuntimeFloatCurve                                 BaseDamageCurve;                                            // 0x0008   (0x0088)  
};

/// Class /Script/Indiana.Destructible
/// Size: 0x0478 (1144 bytes) (0x0002B8 - 0x000478) align 8 MaxSize: 0x0478
class ADestructible : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x02B8   (0x0018)  MISSED
	SDK_UNDEFINED(16,372) /* FMulticastInlineDelegate */ __um(OnDestructiblePristine);                             // 0x02D0   (0x0010)  
	SDK_UNDEFINED(16,373) /* FMulticastInlineDelegate */ __um(OnDestructibleDamaged);                              // 0x02E0   (0x0010)  
	SDK_UNDEFINED(16,374) /* FMulticastInlineDelegate */ __um(OnDestructibleDestroyed);                            // 0x02F0   (0x0010)  
	EDestructibleState                                 InitialState;                                               // 0x0300   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0301   (0x0007)  MISSED
	class UStaticMesh*                                 PristineStaticMesh;                                         // 0x0308   (0x0008)  
	class UStaticMesh*                                 DamagedStaticMesh;                                          // 0x0310   (0x0008)  
	class UStaticMesh*                                 DestroyedStaticMesh;                                        // 0x0318   (0x0008)  
	class UImpactDataSet*                              ImpactDataSet;                                              // 0x0320   (0x0008)  
	FDamageDescription                                 DamageDescription;                                          // 0x0328   (0x0078)  
	FDamageLevelScaler                                 DamageLevelScaler;                                          // 0x03A0   (0x0090)  
	class USceneComponent*                             SceneComponent;                                             // 0x0430   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0438   (0x0008)  
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x0440   (0x0008)  
	class UHealthComponent*                            HealthComponent;                                            // 0x0448   (0x0008)  
	class USceneComponent*                             DetonationPoint;                                            // 0x0450   (0x0008)  
	class UTargetableComponent*                        TargetableComponent;                                        // 0x0458   (0x0008)  
	class UDestructibleShoutComponent*                 ShoutComponent;                                             // 0x0460   (0x0008)  
	class UIndianaNavModifierComponent*                NavModComponent;                                            // 0x0468   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0470   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.Destructible.SetDestructibleState
	// void SetDestructibleState(EDestructibleState NewState);                                                                  // [0x17fe5f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.Destructible.ReceiveTriggerUntripped
	// void ReceiveTriggerUntripped();                                                                                          // [0x17fe5c0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceiveTriggerTripped
	// void ReceiveTriggerTripped();                                                                                            // [0x17fe590] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceiveTriggerDisarmed
	// void ReceiveTriggerDisarmed();                                                                                           // [0x17fe560] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceiveTriggerArmed
	// void ReceiveTriggerArmed();                                                                                              // [0x17fe530] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceivePreDeploy
	// void ReceivePreDeploy();                                                                                                 // [0x17fe500] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceiveDeployOrder
	// void ReceiveDeployOrder();                                                                                               // [0x17fe4d0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.OnHealthChanged
	// void OnHealthChanged(float HealthChange, class AActor* InInstigator);                                                    // [0x17fdbb0] Final|Native|Protected 
};

/// Class /Script/Indiana.BeamLauncher
/// Size: 0x05A8 (1448 bytes) (0x000478 - 0x0005A8) align 8 MaxSize: 0x05A8
class ABeamLauncher : public ADestructible
{ 
public:
	FDamageDescription                                 BeamDamageDescription;                                      // 0x0478   (0x0078)  
	FDamageLevelScaler                                 BeamDamageLevelScaler;                                      // 0x04F0   (0x0090)  
	class UImpactDataSet*                              BeamImpactDataSet;                                          // 0x0580   (0x0008)  
	class UParticleSystem*                             AttackFxShotOrigin;                                         // 0x0588   (0x0008)  
	class UParticleSystem*                             AttackFxShotEnd;                                            // 0x0590   (0x0008)  
	class UParticleSystem*                             AttackFxBeam;                                               // 0x0598   (0x0008)  
	FName                                              AttackFxBeamEndParam;                                       // 0x05A0   (0x0008)  
};

/// Struct /Script/Indiana.WeaponInputBuffer
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FWeaponInputBuffer
{ 
	float                                              WindowTime;                                                 // 0x0000   (0x0004)  
	float                                              InputTimeStamp;                                             // 0x0004   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0008   (0x0004)  MISSED
};

/// Class /Script/Indiana.WeaponMode
/// Size: 0x0130 (304 bytes) (0x000030 - 0x000130) align 8 MaxSize: 0x0130
class UWeaponMode : public UObject
{ 
public:
	SDK_UNDEFINED(16,375) /* FMulticastInlineDelegate */ __um(OnAttack);                                           // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x0040   (0x0030)  MISSED
	FDamageDescription                                 DamageDescription;                                          // 0x0070   (0x0078)  
	float                                              StealthCritMultiplier;                                      // 0x00E8   (0x0004)  
	float                                              SoundRadius;                                                // 0x00EC   (0x0004)  
	float                                              ImpactSoundRadiusOverride;                                  // 0x00F0   (0x0004)  
	float                                              AIBaseDamageOverride;                                       // 0x00F4   (0x0004)  
	class URpgStat*                                    DamageModStat;                                              // 0x00F8   (0x0008)  
	float                                              AttackTTDScalar;                                            // 0x0100   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0104   (0x0004)  MISSED
	class UClass*                                      DamageTypeOverride;                                         // 0x0108   (0x0008)  
	FWeaponInputBuffer                                 PrimaryTriggerQueue;                                        // 0x0110   (0x000C)  
	FWeaponInputBuffer                                 QuickMeleeQueue;                                            // 0x011C   (0x000C)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0128   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.WeaponMode.IsIdle
	// bool IsIdle();                                                                                                           // [0x18e9700] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponMode.IsFullyAimed
	// bool IsFullyAimed();                                                                                                     // [0x18e96d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponMode.IsCharging
	// bool IsCharging();                                                                                                       // [0x18e96a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponMode.GetPrimaryDamageTypeEnum
	// EIndianaDamageType GetPrimaryDamageTypeEnum();                                                                           // [0x18e95a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.DepthOfFieldSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FDepthOfFieldSettings
{ 
	bool                                               bUseSettings;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              FocalDistance;                                              // 0x0004   (0x0004)  
	float                                              NearTransition;                                             // 0x0008   (0x0004)  
	float                                              NearBlur;                                                   // 0x000C   (0x0004)  
	float                                              FarBlur;                                                    // 0x0010   (0x0004)  
};

/// Struct /Script/Indiana.CustomShotAngles
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FCustomShotAngles
{ 
	float                                              Pitch;                                                      // 0x0000   (0x0004)  
	float                                              Yaw;                                                        // 0x0004   (0x0004)  
};

/// Class /Script/Indiana.RangedMode
/// Size: 0x05B8 (1464 bytes) (0x000130 - 0x0005B8) align 8 MaxSize: 0x05B8
class URangedMode : public UWeaponMode
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0130   (0x0018)  MISSED
	float                                              MinEffectiveRange;                                          // 0x0148   (0x0004)  
	float                                              MaxEffectiveRange;                                          // 0x014C   (0x0004)  
	float                                              MaxRange;                                                   // 0x0150   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FRuntimeFloatCurve                                 MaxRangeFalloutCurve;                                       // 0x0158   (0x0088)  
	float                                              PerShotCalledShotScalar;                                    // 0x01E0   (0x0004)  
	float                                              PerShotDamageCalledShotScalar;                              // 0x01E4   (0x0004)  
	FRuntimeFloatCurve                                 CalledShotChargeTooCloseCurve;                              // 0x01E8   (0x0088)  
	FRuntimeFloatCurve                                 CalledShotChargeTooFarCurve;                                // 0x0270   (0x0088)  
	bool                                               bUseTargeting;                                              // 0x02F8   (0x0001)  
	bool                                               bDisableCustomFire;                                         // 0x02F9   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x02FA   (0x0002)  MISSED
	FName                                              OverrideShootSocket;                                        // 0x02FC   (0x0008)  
	float                                              AnimShotTimeScalar;                                         // 0x0304   (0x0004)  
	FRuntimeFloatCurve                                 SpreadCurve;                                                // 0x0308   (0x0088)  
	float                                              Spread;                                                     // 0x0390   (0x0004)  
	float                                              AISpread;                                                   // 0x0394   (0x0004)  
	float                                              SpreadMovementScalar;                                       // 0x0398   (0x0004)  
	float                                              MoveSpreadPenalty;                                          // 0x039C   (0x0004)  
	float                                              TTDSpreadScalar;                                            // 0x03A0   (0x0004)  
	float                                              AimAssistSpread;                                            // 0x03A4   (0x0004)  
	float                                              BloomPerShotPercent;                                        // 0x03A8   (0x0004)  
	float                                              MaxBloom;                                                   // 0x03AC   (0x0004)  
	float                                              BloomDecayTime;                                             // 0x03B0   (0x0004)  
	float                                              BloomReturnDelay;                                           // 0x03B4   (0x0004)  
	float                                              FineAimSpreadReduction;                                     // 0x03B8   (0x0004)  
	float                                              FineAimFovAdjustment;                                       // 0x03BC   (0x0004)  
	float                                              FineAimLookStickRateMultiplier;                             // 0x03C0   (0x0004)  
	bool                                               bCanSprintWhileAiming;                                      // 0x03C4   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x03C5   (0x0003)  MISSED
	class UAimAssistData*                              AimAssistData;                                              // 0x03C8   (0x0008)  
	FDepthOfFieldSettings                              FineAnimDoFSettings;                                        // 0x03D0   (0x0014)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x03E4   (0x0004)  MISSED
	TWeakObjectPtr<class UScopeData*>                  ScopeData;                                                  // 0x03E8   (0x0008)  
	unsigned char                                      UnknownData05_6[0x48];                                      // 0x03F0   (0x0048)  MISSED
	float                                              Sway;                                                       // 0x0438   (0x0004)  
	float                                              SwayMovement;                                               // 0x043C   (0x0004)  
	float                                              SwayChangeTime;                                             // 0x0440   (0x0004)  
	float                                              SwayChangeLaziness;                                         // 0x0444   (0x0004)  
	float                                              TTDSwayScalar;                                              // 0x0448   (0x0004)  
	float                                              FullyAimedRecoilScalar;                                     // 0x044C   (0x0004)  
	float                                              HipFireRecoilScalar;                                        // 0x0450   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0454   (0x0004)  MISSED
	class URecoilData*                                 Recoil;                                                     // 0x0458   (0x0008)  
	bool                                               bRecoilReturnToZero;                                        // 0x0460   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0461   (0x0003)  MISSED
	float                                              MovedYawTolerance;                                          // 0x0464   (0x0004)  
	float                                              MovedPitchTolerance;                                        // 0x0468   (0x0004)  
	float                                              ReturnToZeroRecoilSpeed;                                    // 0x046C   (0x0004)  
	float                                              ZoomPerShotPercent;                                         // 0x0470   (0x0004)  
	float                                              MaxZoom;                                                    // 0x0474   (0x0004)  
	float                                              ZoomDecayTime;                                              // 0x0478   (0x0004)  
	float                                              ZoomReturnDelay;                                            // 0x047C   (0x0004)  
	float                                              ZoomAimedScaler;                                            // 0x0480   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x0484   (0x0004)  MISSED
	TArray<FCustomShotAngles>                          CustomProjectileAngles;                                     // 0x0488   (0x0010)  
	unsigned char                                      UnknownData09_6[0xD0];                                      // 0x0498   (0x00D0)  MISSED
	class UQuickMeleeData*                             NonStealthMeleeData;                                        // 0x0568   (0x0008)  
	class UQuickMeleeData*                             StealthMeleeData;                                           // 0x0570   (0x0008)  
	unsigned char                                      UnknownData10_6[0x38];                                      // 0x0578   (0x0038)  MISSED
	float                                              QuickMeleeTTDScalar;                                        // 0x05B0   (0x0004)  
	bool                                               bSpellOnly;                                                 // 0x05B4   (0x0001)  
	unsigned char                                      UnknownData11_7[0x3];                                       // 0x05B5   (0x0003)  MISSED


	/// Functions
	// Function /Script/Indiana.RangedMode.OnMontageBlendingOut
	// void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);                                               // [0x189ff60] Final|Native|Protected 
	// Function /Script/Indiana.RangedMode.HasScope
	// bool HasScope();                                                                                                         // [0x189ff00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetWeaponCurrentAmmoGaugeAlpha
	// float GetWeaponCurrentAmmoGaugeAlpha();                                                                                  // [0x189fec0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetShotOrigin
	// FVector GetShotOrigin();                                                                                                 // [0x189fe80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetMuzzleRotation
	// FRotator GetMuzzleRotation();                                                                                            // [0x189fe40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetMuzzleLocationAndRotation
	// bool GetMuzzleLocationAndRotation(FVector& Location, FRotator& Rotation);                                                // [0x189fd40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetMuzzleLocation
	// FVector GetMuzzleLocation();                                                                                             // [0x189fd00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetAimingUpDirection
	// FVector GetAimingUpDirection();                                                                                          // [0x189fcc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetAimingDirection
	// FVector GetAimingDirection();                                                                                            // [0x189fc80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.BeamMode
/// Size: 0x06A0 (1696 bytes) (0x0005B8 - 0x0006A0) align 8 MaxSize: 0x06A0
class UBeamMode : public URangedMode
{ 
public:
	float                                              TickDamageTime;                                             // 0x05B8   (0x0004)  
	float                                              TickRecoilTime;                                             // 0x05BC   (0x0004)  
	float                                              TargetLockTime;                                             // 0x05C0   (0x0004)  
	float                                              TargetingBoundsScale;                                       // 0x05C4   (0x0004)  
	float                                              TickAmmoTime;                                               // 0x05C8   (0x0004)  
	char                                               AmmoPerTick;                                                // 0x05CC   (0x0001)  
	bool                                               bOnlyConsumeAmmoIfLocked;                                   // 0x05CD   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x05CE   (0x0002)  MISSED
	float                                              NonHostileTargetTime;                                       // 0x05D0   (0x0004)  
	FName                                              BeamLockedRTPCName;                                         // 0x05D4   (0x0008)  
	FName                                              TargetHealthPercentageRTPCName;                             // 0x05DC   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x05E4   (0x0004)  MISSED
	class UAkAudioEvent*                               EmployeeBenefitsRezFailedEvent;                             // 0x05E8   (0x0008)  
	unsigned char                                      UnknownData02_7[0xB0];                                      // 0x05F0   (0x00B0)  MISSED


	/// Functions
	// Function /Script/Indiana.BeamMode.IsTargetingPlayer
	// bool IsTargetingPlayer();                                                                                                // [0x17b4cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.BeamMode.HasLockedTarget
	// bool HasLockedTarget();                                                                                                  // [0x17b4cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.BeamMode.GetTargetLocation
	// FVector GetTargetLocation();                                                                                             // [0x17b4c70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.BeardAppearance
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align 8 MaxSize: 0x0090
struct FBeardAppearance : FAppearanceMatch
{ 
	TWeakObjectPtr<class USkeletalMesh*>               Mesh;                                                       // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0048   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture*>                    BeardTexture;                                               // 0x0068   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0070   (0x0020)  MISSED
};

/// Class /Script/Indiana.BeardAppearances
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UBeardAppearances : public UPrimaryDataAsset
{ 
public:
	TArray<FBeardAppearance>                           BeardAppearances;                                           // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.BeardColor
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UBeardColor : public UPrimaryDataAsset
{ 
public:
	FLinearColor                                       BeardRootColor;                                             // 0x0038   (0x0010)  
	FLinearColor                                       BeardTipColor;                                              // 0x0048   (0x0010)  
};

/// Class /Script/Indiana.FurnitureActor
/// Size: 0x02C8 (712 bytes) (0x0002B8 - 0x0002C8) align 8 MaxSize: 0x02C8
class AFurnitureActor : public AActor
{ 
public:
	class UObsidianIDComponent*                        IDComponent;                                                // 0x02B8   (0x0008)  
	class UFurnitureComponent*                         FurnitureComponent;                                         // 0x02C0   (0x0008)  
};

/// Class /Script/Indiana.Bed
/// Size: 0x0300 (768 bytes) (0x0002C8 - 0x000300) align 8 MaxSize: 0x0300
class ABed : public AFurnitureActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x02C8   (0x0010)  MISSED
	class UInteractableComponent*                      InteractableComponent;                                      // 0x02D8   (0x0008)  
	class UClass*                                      RestSpell;                                                  // 0x02E0   (0x0008)  
	float                                              CameraFadeDuration;                                         // 0x02E8   (0x0004)  
	int32_t                                            MinHours;                                                   // 0x02EC   (0x0004)  
	int32_t                                            MaxHours;                                                   // 0x02F0   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x02F4   (0x000C)  MISSED
};

/// Struct /Script/Indiana.AIStateHistory
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FAIStateHistory
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Class /Script/Indiana.BehaviorStackComponent
/// Size: 0x0230 (560 bytes) (0x0000E0 - 0x000230) align 8 MaxSize: 0x0230
class UBehaviorStackComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x40];                                      // 0x00E0   (0x0040)  MISSED
	class UBehaviorStateInfo*                          CurrentStateInfo;                                           // 0x0120   (0x0008)  
	TArray<class UBehaviorStateInfo*>                  QueuedStateInfos;                                           // 0x0128   (0x0010)  
	unsigned char                                      UnknownData01_6[0x88];                                      // 0x0138   (0x0088)  MISSED
	TArray<FAIStateHistory>                            BehaviorStateHistories;                                     // 0x01C0   (0x0010)  
	TMap<class UDecisionTreeRequestData*, FAIStateHistory> DecisionTreeRequestHistories;                           // 0x01D0   (0x0050)  
	TArray<class UBehaviorStateInfo*>                  PastStateInfos;                                             // 0x0220   (0x0010)  
};

/// Class /Script/Indiana.EQS_BehaviorStateInfo
/// Size: 0x0178 (376 bytes) (0x000120 - 0x000178) align 8 MaxSize: 0x0178
class UEQS_BehaviorStateInfo : public UBehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x0120   (0x0058)  MISSED
};

/// Class /Script/Indiana.BehaviorTreeGlobalParams
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UBehaviorTreeGlobalParams : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0030   (0x0018)  MISSED
};

/// Struct /Script/Indiana.BreakBoneInfo
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 16 MaxSize: 0x0060
struct FBreakBoneInfo
{ 
	FName                                              Target;                                                     // 0x0000   (0x0008)  
	FName                                              Source;                                                     // 0x0008   (0x0008)  
	FName                                              BoneBreakName;                                              // 0x0010   (0x0008)  
	bool                                               bIsBroke;                                                   // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x47];                                      // 0x0019   (0x0047)  MISSED
};

/// Class /Script/Indiana.IndianaAnimInstance
/// Size: 0x04A0 (1184 bytes) (0x0002C8 - 0x0004A0) align 16 MaxSize: 0x04A0
class UIndianaAnimInstance : public UAnimInstance
{ 
public:
	bool                                               bSpeedIsRun;                                                // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02C9   (0x0007)  MISSED
	TArray<FBreakBoneInfo>                             BreakBoneConfig;                                            // 0x02D0   (0x0010)  
	int32_t                                            ForcedLODWhenBroken;                                        // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x02E4   (0x0018)  MISSED
	bool                                               bJustTeleported;                                            // 0x02FC   (0x0001)  
	unsigned char                                      UnknownData02_6[0x93];                                      // 0x02FD   (0x0093)  MISSED
	float                                              IKLeftHandAlpha;                                            // 0x0390   (0x0004)  
	float                                              IKRightHandAlpha;                                           // 0x0394   (0x0004)  
	float                                              AltHandIKLeftAlpha;                                         // 0x0398   (0x0004)  
	float                                              AltHandIKRightAlpha;                                        // 0x039C   (0x0004)  
	float                                              IKBlendTime;                                                // 0x03A0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x84];                                      // 0x03A4   (0x0084)  MISSED
	bool                                               bFootIKEnabled;                                             // 0x0428   (0x0001)  
	bool                                               bFootIKState;                                               // 0x0429   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x042A   (0x0002)  MISSED
	float                                              IKInterpSpeed;                                              // 0x042C   (0x0004)  
	float                                              FootRayUp;                                                  // 0x0430   (0x0004)  
	float                                              FootRayDown;                                                // 0x0434   (0x0004)  
	float                                              IKHipRange;                                                 // 0x0438   (0x0004)  
	float                                              IKHipMaxAdjust;                                             // 0x043C   (0x0004)  
	float                                              HipSpeedAdjust;                                             // 0x0440   (0x0004)  
	float                                              RunHipSpeedAdjust;                                          // 0x0444   (0x0004)  
	float                                              HipAdjustMinRange;                                          // 0x0448   (0x0004)  
	float                                              JointDriverBlendSpeed;                                      // 0x044C   (0x0004)  
	float                                              JointDriverRollBlendSpeed;                                  // 0x0450   (0x0004)  
	FVector                                            IKBoxExtent;                                                // 0x0454   (0x000C)  
	TEnumAsByte<ECollisionChannel>                     IKCollisionChannel;                                         // 0x0460   (0x0001)  
	unsigned char                                      UnknownData05_7[0x3F];                                      // 0x0461   (0x003F)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaAnimInstance.Montage_SkipToEnd
	// float Montage_SkipToEnd(class UAnimMontage* MontageToPlay);                                                              // [0x183e560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAnimInstance.AnimNotify_ToggleFootIK
	// void AnimNotify_ToggleFootIK();                                                                                          // [0x183e500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAnimInstance.AnimNotify_EnableFootIK
	// void AnimNotify_EnableFootIK();                                                                                          // [0x183e4e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAnimInstance.AnimNotify_DisableFootIK
	// void AnimNotify_DisableFootIK();                                                                                         // [0x183e4c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterAnimInstance
/// Size: 0x0560 (1376 bytes) (0x0004A0 - 0x000560) align 16 MaxSize: 0x0558
class UCharacterAnimInstance : public UIndianaAnimInstance
{ 
public:
	class UClass*                                      DefaultWeaponAnimationsTemplate;                            // 0x04A0   (0x0008)  
	class UWeaponAnimations*                           DefaultWeaponAnimations;                                    // 0x04A8   (0x0008)  
	class UWeaponAnimations*                           WeaponAnimations;                                           // 0x04B0   (0x0008)  
	class ULocomotionAnimationSet*                     LocomotionAnimationSet;                                     // 0x04B8   (0x0008)  
	EAnimMovementState                                 MovementState;                                              // 0x04C0   (0x0001)  
	EAnimMovementModifierState                         MovementModifierState;                                      // 0x04C1   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x04C2   (0x0002)  MISSED
	float                                              LastFallDistance;                                           // 0x04C4   (0x0004)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x04C8   (0x0005)  MISSED
	bool                                               bIsEquipping;                                               // 0x04CD   (0x0001)  
	bool                                               bIsUnequipping;                                             // 0x04CE   (0x0001)  
	bool                                               bIsBlocking;                                                // 0x04CF   (0x0001)  
	bool                                               bIsBeingBumped;                                             // 0x04D0   (0x0001)  
	bool                                               bIsHitReacting;                                             // 0x04D1   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x04D2   (0x0002)  MISSED
	float                                              HitReactStrength;                                           // 0x04D4   (0x0004)  
	float                                              HitReactX;                                                  // 0x04D8   (0x0004)  
	float                                              HitReactY;                                                  // 0x04DC   (0x0004)  
	float                                              NormalizedSpeedBlendTime;                                   // 0x04E0   (0x0004)  
	float                                              NormalizedSpeed;                                            // 0x04E4   (0x0004)  
	float                                              Speed;                                                      // 0x04E8   (0x0004)  
	float                                              NormalizedForwardSpeed;                                     // 0x04EC   (0x0004)  
	float                                              ForwardSpeed;                                               // 0x04F0   (0x0004)  
	float                                              NormalizedStrafeSpeed;                                      // 0x04F4   (0x0004)  
	float                                              StrafeSpeed;                                                // 0x04F8   (0x0004)  
	bool                                               bIsCrouching;                                               // 0x04FC   (0x0001)  
	bool                                               bWeaponIsHolstered;                                         // 0x04FD   (0x0001)  
	EHolsterState                                      CurrentHolsterState;                                        // 0x04FE   (0x0001)  
	bool                                               bHelmetIsVisible;                                           // 0x04FF   (0x0001)  
	float                                              WeaponCharge;                                               // 0x0500   (0x0004)  
	FVector                                            WeaponFineAimOffset;                                        // 0x0504   (0x000C)  
	FVector                                            WeaponNormalAimOffset;                                      // 0x0510   (0x000C)  
	unsigned char                                      UnknownData03_7[0x3C];                                      // 0x051C   (0x003C)  MISSED


	/// Functions
	// Function /Script/Indiana.CharacterAnimInstance.SetDisabledAnimation
	// void SetDisabledAnimation(FAnimEventGameplayTagContainer Container);                                                     // [0x17cade0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterAnimInstance.OnRebuildAnimationSetData
	// void OnRebuildAnimationSetData();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterAnimInstance.OnNewWeaponAnimations
	// void OnNewWeaponAnimations(class UWeaponAnimations* NewWeaponAnimations);                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterAnimInstance.OnNewLocomotionAnimationSet
	// void OnNewLocomotionAnimationSet(class ULocomotionAnimationSet* NewLocomtionAnimationSet);                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterAnimInstance.OnMovementLanded
	// void OnMovementLanded(float Distance);                                                                                   // [0x17cac80] Final|Native|Protected 
	// Function /Script/Indiana.CharacterAnimInstance.IsMontagePlayingOnSlot
	// bool IsMontagePlayingOnSlot(FName SlotNodeName);                                                                         // [0x17ca870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.BodyRotationProperties
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FBodyRotationProperties
{ 
	float                                              RotationInitiateThreshold;                                  // 0x0000   (0x0004)  
	float                                              RotationCompleteTolerance;                                  // 0x0004   (0x0004)  
};

/// Struct /Script/Indiana.RandomPlayerSequenceEntryNamed
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 MaxSize: 0x0058
struct FRandomPlayerSequenceEntryNamed
{ 
	class UAnimSequence*                               Sequence;                                                   // 0x0000   (0x0008)  
	float                                              ChanceToPlay;                                               // 0x0008   (0x0004)  
	int32_t                                            MinLoopCount;                                               // 0x000C   (0x0004)  
	int32_t                                            MaxLoopCount;                                               // 0x0010   (0x0004)  
	float                                              MinPlayRate;                                                // 0x0014   (0x0004)  
	float                                              MaxPlayRate;                                                // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FAlphaBlend                                        BlendIn;                                                    // 0x0020   (0x0030)  
	bool                                               bMustPlayFromBeginning;                                     // 0x0050   (0x0001)  
	bool                                               bIgnoreForInitialAnimation;                                 // 0x0051   (0x0001)  
	bool                                               bIgnoreIfHelmetIsVisible;                                   // 0x0052   (0x0001)  
	bool                                               bIgnoreIfWithinTalkRange;                                   // 0x0053   (0x0001)  
	bool                                               bIgnoreIfOutsideOfTalkRange;                                // 0x0054   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Struct /Script/Indiana.LocomotionNode
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FLocomotionNode
{ 
	class UAnimSequence*                               Node0Sequence;                                              // 0x0000   (0x0008)  
	class UAnimSequence*                               Node1Sequence;                                              // 0x0008   (0x0008)  
	bool                                               EnterNode0;                                                 // 0x0010   (0x0001)  
	bool                                               EnterNode1;                                                 // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0012   (0x0006)  MISSED
};

/// Class /Script/Indiana.TPVAnimInstance
/// Size: 0x0950 (2384 bytes) (0x000558 - 0x000950) align 16 MaxSize: 0x0950
class UTPVAnimInstance : public UCharacterAnimInstance
{ 
public:
	unsigned char                                      UnknownData00_8[0x24];                                      // 0x0558   (0x0024)  MISSED
	bool                                               bDisableArmPoses;                                           // 0x057C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x17];                                      // 0x057D   (0x0017)  MISSED
	float                                              StationaryRotationSpeed;                                    // 0x0594   (0x0004)  
	float                                              MovingRotationSpeed;                                        // 0x0598   (0x0004)  
	float                                              MovingRotationSpeedNoTracking;                              // 0x059C   (0x0004)  
	float                                              MaxMovingShuffleAngle;                                      // 0x05A0   (0x0004)  
	FBodyRotationProperties                            DefaultRotationProperties;                                  // 0x05A4   (0x0008)  
	FBodyRotationProperties                            CombatRotationProperties;                                   // 0x05AC   (0x0008)  
	FBodyRotationProperties                            CombatMeleeRotationProperties;                              // 0x05B4   (0x0008)  
	FBodyRotationProperties                            MovingRotationProperties;                                   // 0x05BC   (0x0008)  
	EStationaryRotationType                            StationaryRotationType;                                     // 0x05C4   (0x0001)  
	bool                                               bAlwaysFaceTargetWhileStationary;                           // 0x05C5   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x05C6   (0x0002)  MISSED
	float                                              SmoothedDirectionInterpSpeed;                               // 0x05C8   (0x0004)  
	FVector                                            AimLocation;                                                // 0x05CC   (0x000C)  
	float                                              AimPitch;                                                   // 0x05D8   (0x0004)  
	float                                              AimYaw;                                                     // 0x05DC   (0x0004)  
	float                                              SmoothedAimPitch;                                           // 0x05E0   (0x0004)  
	float                                              SmoothedAimYaw;                                             // 0x05E4   (0x0004)  
	float                                              HeadPitch;                                                  // 0x05E8   (0x0004)  
	float                                              HeadYaw;                                                    // 0x05EC   (0x0004)  
	FVector                                            EyeLocation;                                                // 0x05F0   (0x000C)  
	float                                              EyeStrength;                                                // 0x05FC   (0x0004)  
	float                                              EyeRotationComfortAngle;                                    // 0x0600   (0x0004)  
	float                                              HeadStrength;                                               // 0x0604   (0x0004)  
	float                                              EyeSpeed;                                                   // 0x0608   (0x0004)  
	float                                              HeadSpeed;                                                  // 0x060C   (0x0004)  
	float                                              TurnDelta;                                                  // 0x0610   (0x0004)  
	bool                                               IsTurning;                                                  // 0x0614   (0x0001)  
	bool                                               IsTracking;                                                 // 0x0615   (0x0001)  
	bool                                               IsEyeTracking;                                              // 0x0616   (0x0001)  
	bool                                               InCover;                                                    // 0x0617   (0x0001)  
	bool                                               bIsRagdolling;                                              // 0x0618   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0619   (0x0003)  MISSED
	float                                              IsGibbing;                                                  // 0x061C   (0x0004)  
	bool                                               bIsLocomotionActive;                                        // 0x0620   (0x0001)  
	bool                                               bInvestigatingDeadBody;                                     // 0x0621   (0x0001)  
	bool                                               bCombatEnumIsCombat;                                        // 0x0622   (0x0001)  
	bool                                               bCombatEnumIsPreCombat;                                     // 0x0623   (0x0001)  
	bool                                               bCombatEnumIsNonCombat;                                     // 0x0624   (0x0001)  
	bool                                               bSpeedIsIdle;                                               // 0x0625   (0x0001)  
	bool                                               bSpeedIsWalk;                                               // 0x0626   (0x0001)  
	bool                                               bIsTurningAndSpeedIsIdle;                                   // 0x0627   (0x0001)  
	bool                                               bTalking;                                                   // 0x0628   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0629   (0x0002)  MISSED
	bool                                               bAngleToFutureDirectionChanging;                            // 0x062B   (0x0001)  
	bool                                               bWantsToStartMoving;                                        // 0x062C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x062D   (0x0003)  MISSED
	float                                              Direction;                                                  // 0x0630   (0x0004)  
	float                                              SmoothedDirection;                                          // 0x0634   (0x0004)  
	float                                              SmoothedSpeed;                                              // 0x0638   (0x0004)  
	float                                              FaceFXStrengthSpeed;                                        // 0x063C   (0x0004)  
	float                                              FaceFXStrength;                                             // 0x0640   (0x0004)  
	float                                              ChatterStrengthSpeed;                                       // 0x0644   (0x0004)  
	float                                              ChatterStrength;                                            // 0x0648   (0x0004)  
	FVector                                            FutureLocation;                                             // 0x064C   (0x000C)  
	float                                              AngleToFutureDirection;                                     // 0x0658   (0x0004)  
	float                                              LocomotionPlayRate;                                         // 0x065C   (0x0004)  
	float                                              HitFlinchAlpha;                                             // 0x0660   (0x0004)  
	float                                              WeakPointHitFlinchPercentMultiplier;                        // 0x0664   (0x0004)  
	float                                              HeavyHitFlinchPercent;                                      // 0x0668   (0x0004)  
	float                                              LightHitFlinchPercent;                                      // 0x066C   (0x0004)  
	class UTPVPersonalitySet*                          DefaultPersonality;                                         // 0x0670   (0x0008)  
	class UTPVPersonalitySet*                          CurrentPersonality;                                         // 0x0678   (0x0008)  
	class UEmotionData*                                EmotionData;                                                // 0x0680   (0x0008)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0688   (0x0008)  MISSED
	class UAimOffsetBlendSpace*                        OverrideHeadBlendSpace;                                     // 0x0690   (0x0008)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0698   (0x0004)  MISSED
	bool                                               bHasCustomHeadBlendSpace;                                   // 0x069C   (0x0001)  
	bool                                               bIsEmotionActive;                                           // 0x069D   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x069E   (0x0001)  MISSED
	bool                                               bInConversation;                                            // 0x069F   (0x0001)  
	int32_t                                            EmotionIndex;                                               // 0x06A0   (0x0004)  
	unsigned char                                      UnknownData09_6[0x14];                                      // 0x06A4   (0x0014)  MISSED
	class UAnimSequence*                               WalkForward;                                                // 0x06B8   (0x0008)  
	TArray<FRandomPlayerSequenceEntryNamed>            Emotion0BaseIdle;                                           // 0x06C0   (0x0010)  
	TArray<FRandomPlayerSequenceEntryNamed>            Emotion1BaseIdle;                                           // 0x06D0   (0x0010)  
	bool                                               bIsEmotion0Active;                                          // 0x06E0   (0x0001)  
	bool                                               bIsEmotion0ActiveCut;                                       // 0x06E1   (0x0001)  
	bool                                               bIsEmotion1Active;                                          // 0x06E2   (0x0001)  
	bool                                               bIsEmotion1ActiveCut;                                       // 0x06E3   (0x0001)  
	unsigned char                                      UnknownData10_6[0x54];                                      // 0x06E4   (0x0054)  MISSED
	float                                              WalkPlayRate;                                               // 0x0738   (0x0004)  
	float                                              RunPlayRate;                                                // 0x073C   (0x0004)  
	float                                              CombatWalkPlayRate;                                         // 0x0740   (0x0004)  
	float                                              CombatRunPlayRate;                                          // 0x0744   (0x0004)  
	float                                              CombatHobbledPlayRate;                                      // 0x0748   (0x0004)  
	float                                              SyncRaycastDistances;                                       // 0x074C   (0x0004)  
	float                                              ShapeCastDistance;                                          // 0x0750   (0x0004)  
	bool                                               bWalkSpeedAdjustmentsEnabled;                               // 0x0754   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0755   (0x0003)  MISSED
	float                                              AdditionalHipAdjustment;                                    // 0x0758   (0x0004)  
	float                                              WalkSpeed;                                                  // 0x075C   (0x0004)  
	float                                              RunSpeed;                                                   // 0x0760   (0x0004)  
	float                                              RunSpeedRate;                                               // 0x0764   (0x0004)  
	float                                              CombatWalkSpeedAuthored;                                    // 0x0768   (0x0004)  
	float                                              CombatRunSpeedAuthored;                                     // 0x076C   (0x0004)  
	float                                              CombatHobbledSpeedAuthored;                                 // 0x0770   (0x0004)  
	float                                              MinPlayrateSpeed;                                           // 0x0774   (0x0004)  
	unsigned char                                      UnknownData12_6[0x3E];                                      // 0x0778   (0x003E)  MISSED
	bool                                               bHasLocomotionLogicComponent;                               // 0x07B6   (0x0001)  
	unsigned char                                      UnknownData13_6[0x9];                                       // 0x07B7   (0x0009)  MISSED
	bool                                               bForceToIdle;                                               // 0x07C0   (0x0001)  
	unsigned char                                      UnknownData14_6[0x7];                                       // 0x07C1   (0x0007)  MISSED
	FLocomotionNode                                    NCWalkStart;                                                // 0x07C8   (0x0018)  
	FLocomotionNode                                    NCWalkStop;                                                 // 0x07E0   (0x0018)  
	FLocomotionNode                                    NCTurnInPlace;                                              // 0x07F8   (0x0018)  
	FLocomotionNode                                    CTurnInPlace;                                               // 0x0810   (0x0018)  
	FLocomotionNode                                    NCWalkTurn;                                                 // 0x0828   (0x0018)  
	unsigned char                                      UnknownData15_6[0x20];                                      // 0x0840   (0x0020)  MISSED
	bool                                               bHasJumpStateMachine;                                       // 0x0860   (0x0001)  
	bool                                               bRunningJumpStateMachine;                                   // 0x0861   (0x0001)  
	bool                                               bMovementStateIsInAir;                                      // 0x0862   (0x0001)  
	bool                                               IsJumping;                                                  // 0x0863   (0x0001)  
	int32_t                                            JumpDirection;                                              // 0x0864   (0x0004)  
	bool                                               bOnMovingPlatform;                                          // 0x0868   (0x0001)  
	unsigned char                                      UnknownData16_6[0x7];                                       // 0x0869   (0x0007)  MISSED
	TArray<float>                                      UpdateRateThresholds;                                       // 0x0870   (0x0010)  
	unsigned char                                      UnknownData17_6[0x4];                                       // 0x0880   (0x0004)  MISSED
	float                                              CurrentHipPoseStrength;                                     // 0x0884   (0x0004)  
	unsigned char                                      UnknownData18_6[0x1];                                       // 0x0888   (0x0001)  MISSED
	bool                                               bUseLowGravAnimation;                                       // 0x0889   (0x0001)  
	unsigned char                                      UnknownData19_6[0x16];                                      // 0x088A   (0x0016)  MISSED
	bool                                               bRagdollSnapshotActive;                                     // 0x08A0   (0x0001)  
	unsigned char                                      UnknownData20_6[0x2F];                                      // 0x08A1   (0x002F)  MISSED
	FPoseSnapshot                                      RagdollSnapshot;                                            // 0x08D0   (0x0038)  
	TEnumAsByte<EAxis>                                 GetUpAxis;                                                  // 0x0908   (0x0001)  
	TEnumAsByte<EAxis>                                 ForwardAxis;                                                // 0x0909   (0x0001)  
	unsigned char                                      UnknownData21_6[0x2];                                       // 0x090A   (0x0002)  MISSED
	FName                                              ChestBone;                                                  // 0x090C   (0x0008)  
	FName                                              HipBone;                                                    // 0x0914   (0x0008)  
	bool                                               bFlipFaceDownForwardVector;                                 // 0x091C   (0x0001)  
	bool                                               bFlipFaceUpForwardVector;                                   // 0x091D   (0x0001)  
	bool                                               bConsiderActorForward;                                      // 0x091E   (0x0001)  
	bool                                               bShouldHideWeapon;                                          // 0x091F   (0x0001)  
	bool                                               bUseGetUpAnimation;                                         // 0x0920   (0x0001)  
	unsigned char                                      UnknownData22_6[0x7];                                       // 0x0921   (0x0007)  MISSED
	TArray<class UAnimMontage*>                        GetUpFromFaceDownPose;                                      // 0x0928   (0x0010)  
	TArray<class UAnimMontage*>                        GetUpFromFaceUpPose;                                        // 0x0938   (0x0010)  
	bool                                               bPathFinished;                                              // 0x0948   (0x0001)  
	unsigned char                                      UnknownData23_7[0x7];                                       // 0x0949   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.TPVAnimInstance.UpdateAnimationSetUpdate
	// void UpdateAnimationSetUpdate();                                                                                         // [0x18da320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.SetStateTransitioned
	// void SetStateTransitioned(EAnimTreeState State, bool Transitioned);                                                      // [0x18da150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.SetPersonality
	// void SetPersonality(class UTPVPersonalitySet* Personality);                                                              // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Indiana.TPVAnimInstance.SetNextEmotion
	// bool SetNextEmotion(EEmotion Emotion, float Duration, bool Persist, bool ForceNextEmotion);                              // [0x18d9fe0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.ResetEmotionToDefault
	// void ResetEmotionToDefault();                                                                                            // [0x18d9fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.OnMontageStart
	// void OnMontageStart(class UAnimMontage* Montage);                                                                        // [0x18d9bd0] Final|Native|Public  
	// Function /Script/Indiana.TPVAnimInstance.OnMontageEnd
	// void OnMontageEnd(class UAnimMontage* Montage, bool bInterrupted);                                                       // [0x18d9b00] Final|Native|Public  
	// Function /Script/Indiana.TPVAnimInstance.GetUpFromRagdoll
	// void GetUpFromRagdoll(float GetUpSpeed);                                                                                 // [0x18d9310] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.GetAnimationSetUpdate
	// int32_t GetAnimationSetUpdate();                                                                                         // [0x18d92b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.ClearCurrentEmotion
	// void ClearCurrentEmotion();                                                                                              // [0x18d9090] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_ResetLocomotionState
	// void AnimNotify_ResetLocomotionState();                                                                                  // [0x18d8fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_OnLandEnd
	// void AnimNotify_OnLandEnd();                                                                                             // [0x18d8f70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_OnJumpIntroEnd
	// void AnimNotify_OnJumpIntroEnd();                                                                                        // [0x18d8f40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCWalkStartEntered
	// void AnimNotify_NCWalkStartEntered();                                                                                    // [0x18d8f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCWalkEntered
	// void AnimNotify_NCWalkEntered();                                                                                         // [0x18d8f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCTurnEntered
	// void AnimNotify_NCTurnEntered();                                                                                         // [0x18d8ee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCRunEntered
	// void AnimNotify_NCRunEntered();                                                                                          // [0x18d8ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCIdleEntered
	// void AnimNotify_NCIdleEntered();                                                                                         // [0x18d8ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_JumpStateMachineComplete
	// void AnimNotify_JumpStateMachineComplete();                                                                              // [0x18d8e80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_IdleStateLeft
	// void AnimNotify_IdleStateLeft();                                                                                         // [0x18d8e60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_CTurnEntered
	// void AnimNotify_CTurnEntered();                                                                                          // [0x18d8e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_CombatStateEntered
	// void AnimNotify_CombatStateEntered();                                                                                    // [0x18d8e40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_ClearFurnitureFlag
	// void AnimNotify_ClearFurnitureFlag();                                                                                    // [0x18d8e20] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.BipedWeaponAnims
/// Size: 0x0158 (344 bytes) (0x000000 - 0x000158) align 8 MaxSize: 0x0158
struct FBipedWeaponAnims
{ 
	class UAimOffsetBlendSpace*                        CombatAimBlendSpace;                                        // 0x0000   (0x0008)  
	class UAnimSequence*                               HobbledWalkForward;                                         // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0010   (0x0008)  MISSED
	class UAnimSequence*                               CombatWalkForward;                                          // 0x0018   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0020   (0x0008)  MISSED
	class UAnimSequence*                               CombatRunForward;                                           // 0x0028   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0030   (0x0008)  MISSED
	class UBlendSpace1D*                               ForwardBlendSpace;                                          // 0x0038   (0x0008)  
	class UBlendSpace1D*                               RunForwardBlendSpace;                                       // 0x0040   (0x0008)  
	class UAnimSequence*                               CombatWalkBackward;                                         // 0x0048   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	class UAnimSequence*                               CombatRunBackward;                                          // 0x0058   (0x0008)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	class UBlendSpace1D*                               BackwardBlendSpace;                                         // 0x0068   (0x0008)  
	class UBlendSpace1D*                               RunBackwardBlendSpace;                                      // 0x0070   (0x0008)  
	class UAnimSequence*                               CombatWalkLeft;                                             // 0x0078   (0x0008)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0080   (0x0008)  MISSED
	class UAnimSequence*                               CombatRunLeft;                                              // 0x0088   (0x0008)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0090   (0x0008)  MISSED
	class UBlendSpace1D*                               LeftBlendSpace;                                             // 0x0098   (0x0008)  
	class UBlendSpace1D*                               RunLeftBlendSpace;                                          // 0x00A0   (0x0008)  
	class UAnimSequence*                               CombatWalkRight;                                            // 0x00A8   (0x0008)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x00B0   (0x0008)  MISSED
	class UAnimSequence*                               CombatRunRight;                                             // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x00C0   (0x0008)  MISSED
	class UBlendSpace1D*                               RightBlendSpace;                                            // 0x00C8   (0x0008)  
	class UBlendSpace1D*                               RunRightBlendSpace;                                         // 0x00D0   (0x0008)  
	class UAnimSequence*                               CombatCrouchStartSequence;                                  // 0x00D8   (0x0008)  
	class UAnimSequence*                               CombatCrouchIdleSequence;                                   // 0x00E0   (0x0008)  
	class UAnimSequence*                               CombatCrouchEndSequence;                                    // 0x00E8   (0x0008)  
	class UAnimSequence*                               ReadyFireArmPose;                                           // 0x00F0   (0x0008)  
	class UAnimSequence*                               IdleFireArmPose;                                            // 0x00F8   (0x0008)  
	class UAnimSequence*                               WeaponDownWalkArm;                                          // 0x0100   (0x0008)  
	class UAnimSequence*                               WeaponDownRunArm;                                           // 0x0108   (0x0008)  
	class UAnimSequence*                               BlockStartSequence;                                         // 0x0110   (0x0008)  
	class UAnimSequence*                               BlockIdleSequence;                                          // 0x0118   (0x0008)  
	class UAnimSequence*                               JumpSequence;                                               // 0x0120   (0x0008)  
	class UAnimSequence*                               FallSequence;                                               // 0x0128   (0x0008)  
	class UAnimSequence*                               LandSequence;                                               // 0x0130   (0x0008)  
	class UAnimSequence*                               LowGravJumpSequence;                                        // 0x0138   (0x0008)  
	class UAnimSequence*                               LowGravFallSequence;                                        // 0x0140   (0x0008)  
	class UAnimSequence*                               LowGravLandSequence;                                        // 0x0148   (0x0008)  
	class UAnimSequence*                               SearchingStartSequence;                                     // 0x0150   (0x0008)  
};

/// Struct /Script/Indiana.BipedPersonalityAnims
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 MaxSize: 0x00B8
struct FBipedPersonalityAnims
{ 
	class UAimOffsetBlendSpace*                        NonCombatAimBlendSpace;                                     // 0x0000   (0x0008)  
	class UAnimSequence*                               WalkForward;                                                // 0x0008   (0x0008)  
	class UAnimSequence*                               WalkBackward;                                               // 0x0010   (0x0008)  
	class UAnimSequence*                               RunForward;                                                 // 0x0018   (0x0008)  
	class UAnimSequence*                               RunBackward;                                                // 0x0020   (0x0008)  
	class UAnimSequence*                               LowGravRunForward;                                          // 0x0028   (0x0008)  
	class UAnimSequence*                               LowGravRunBackward;                                         // 0x0030   (0x0008)  
	class UAnimSequence*                               HandPose;                                                   // 0x0038   (0x0008)  
	class UAnimSequence*                               WalkArmPose;                                                // 0x0040   (0x0008)  
	class UAnimSequence*                               RunArmPose;                                                 // 0x0048   (0x0008)  
	class UAnimSequence*                               JumpIntro;                                                  // 0x0050   (0x0008)  
	class UAnimSequence*                               JumpLoop;                                                   // 0x0058   (0x0008)  
	class UAnimSequence*                               JumpLand;                                                   // 0x0060   (0x0008)  
	class UAnimSequence*                               LowGravJumpIntro;                                           // 0x0068   (0x0008)  
	class UAnimSequence*                               LowGravJumpLoop;                                            // 0x0070   (0x0008)  
	class UAnimSequence*                               LowGravJumpLand;                                            // 0x0078   (0x0008)  
	class UAnimSequence*                               CrouchIdleStart;                                            // 0x0080   (0x0008)  
	class UAnimSequence*                               CrouchIdle;                                                 // 0x0088   (0x0008)  
	class UAnimSequence*                               CrouchIdleEnd;                                              // 0x0090   (0x0008)  
	class UAnimSequence*                               CrouchWalkStart;                                            // 0x0098   (0x0008)  
	class UAnimSequence*                               CrouchWalk;                                                 // 0x00A0   (0x0008)  
	class UAnimSequence*                               CrouchWalkEnd;                                              // 0x00A8   (0x0008)  
	class UAnimSequence*                               HeadAdditiveLayer;                                          // 0x00B0   (0x0008)  
};

/// Struct /Script/Indiana.LoopRandomSequence
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FLoopRandomSequence
{ 
	TArray<FRandomPlayerSequenceEntryNamed>            LoopSequences;                                              // 0x0000   (0x0010)  
	class UAnimSequence*                               StartSequence;                                              // 0x0010   (0x0008)  
	class UAnimSequence*                               StopSequence;                                               // 0x0018   (0x0008)  
	float                                              ChanceToPlay;                                               // 0x0020   (0x0004)  
	bool                                               bIgnoreBarkWhileInBLEBranch;                                // 0x0024   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Struct /Script/Indiana.DiscoveredAnims
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 MaxSize: 0x0090
struct FDiscoveredAnims
{ 
	TMap<FName, FLoopRandomSequence>                   TalkingSequences;                                           // 0x0000   (0x0050)  
	TArray<FRandomPlayerSequenceEntryNamed>            BaseIdle;                                                   // 0x0050   (0x0010)  
	TArray<FRandomPlayerSequenceEntryNamed>            DialogIdles;                                                // 0x0060   (0x0010)  
	TArray<FLoopRandomSequence>                        IdleStates;                                                 // 0x0070   (0x0010)  
	class UAnimSequence*                               StartSequence;                                              // 0x0080   (0x0008)  
	class UAnimSequence*                               WalkForwardSequence;                                        // 0x0088   (0x0008)  
};

/// Struct /Script/Indiana.TalkingIdleEntry
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 MaxSize: 0x0090
struct FTalkingIdleEntry
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	class UAnimSequence*                               StartSequence;                                              // 0x0008   (0x0008)  
	TMap<FName, FLoopRandomSequence>                   TalkingSequences;                                           // 0x0010   (0x0050)  
	TArray<FRandomPlayerSequenceEntryNamed>            Idle;                                                       // 0x0060   (0x0010)  
	TArray<FRandomPlayerSequenceEntryNamed>            DialogIdle;                                                 // 0x0070   (0x0010)  
	TArray<FLoopRandomSequence>                        IdleStates;                                                 // 0x0080   (0x0010)  
};

/// Class /Script/Indiana.BipedAnimInstance
/// Size: 0x12E0 (4832 bytes) (0x000950 - 0x0012E0) align 16 MaxSize: 0x12E0
class UBipedAnimInstance : public UTPVAnimInstance
{ 
public:
	float                                              IKStrengthWhileMoving;                                      // 0x0950   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0954   (0x0004)  MISSED
	class UPoseAsset*                                  EyePoseAsset;                                               // 0x0958   (0x0008)  
	float                                              LegIKStrength;                                              // 0x0960   (0x0004)  
	FVector                                            HipOffset;                                                  // 0x0964   (0x000C)  
	FRotator                                           HipRotation;                                                // 0x0970   (0x000C)  
	FRotator                                           SpineCounterRotation;                                       // 0x097C   (0x000C)  
	bool                                               bIkLeftHand;                                                // 0x0988   (0x0001)  
	bool                                               bDelayedReadyFireRequested;                                 // 0x0989   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x098A   (0x0002)  MISSED
	float                                              DelayedReadyFireTime;                                       // 0x098C   (0x0004)  
	float                                              ArmPoseStrength;                                            // 0x0990   (0x0004)  
	float                                              CombatArmPoseStrength;                                      // 0x0994   (0x0004)  
	float                                              FootAngledAmountForSlopes;                                  // 0x0998   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x099C   (0x0004)  MISSED
	bool                                               bLocoForwardActive;                                         // 0x09A0   (0x0001)  
	bool                                               bLocoLeftActive;                                            // 0x09A1   (0x0001)  
	bool                                               bLocoRightActive;                                           // 0x09A2   (0x0001)  
	bool                                               bLocoBackwardActive;                                        // 0x09A3   (0x0001)  
	bool                                               bUpperBodyIsolated;                                         // 0x09A4   (0x0001)  
	bool                                               bUseSearchingLayer;                                         // 0x09A5   (0x0001)  
	unsigned char                                      UnknownData03_6[0x9A];                                      // 0x09A6   (0x009A)  MISSED
	float                                              CombatDirection;                                            // 0x0A40   (0x0004)  
	float                                              BackwardAngle;                                              // 0x0A44   (0x0004)  
	float                                              WalkStartPlaySpeed;                                         // 0x0A48   (0x0004)  
	float                                              HobbledWalkForwardSpeed;                                    // 0x0A4C   (0x0004)  
	float                                              CombatWalkForwardSpeed;                                     // 0x0A50   (0x0004)  
	float                                              CombatRunForwardSpeed;                                      // 0x0A54   (0x0004)  
	float                                              CombatWalkBackwardSpeed;                                    // 0x0A58   (0x0004)  
	float                                              CombatRunBackwardSpeed;                                     // 0x0A5C   (0x0004)  
	float                                              CombatWalkLeftSpeed;                                        // 0x0A60   (0x0004)  
	float                                              CombatRunLeftSpeed;                                         // 0x0A64   (0x0004)  
	float                                              CombatWalkRightSpeed;                                       // 0x0A68   (0x0004)  
	float                                              CombatRunRightSpeed;                                        // 0x0A6C   (0x0004)  
	FBipedWeaponAnims                                  BipedWeaponAnims;                                           // 0x0A70   (0x0158)  
	class UAnimSequence*                               WalkForwardWithEmotion;                                     // 0x0BC8   (0x0008)  
	class UAnimSequence*                               PersonalityIdleAdditive;                                    // 0x0BD0   (0x0008)  
	float                                              PersonalityIdleStrength;                                    // 0x0BD8   (0x0004)  
	float                                              MinimumHillDetectionDistance;                               // 0x0BDC   (0x0004)  
	float                                              CurrentHillAngle;                                           // 0x0BE0   (0x0004)  
	float                                              HillAngleBlendSpeed;                                        // 0x0BE4   (0x0004)  
	FBipedPersonalityAnims                             BipedPersonalityAnim;                                       // 0x0BE8   (0x00B8)  
	TArray<FRandomPlayerSequenceEntryNamed>            SearchingIdleSequences;                                     // 0x0CA0   (0x0010)  
	TArray<FRandomPlayerSequenceEntryNamed>            DeadBodySearchSequences;                                    // 0x0CB0   (0x0010)  
	TArray<FRandomPlayerSequenceEntryNamed>            CombatIdleSequences;                                        // 0x0CC0   (0x0010)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x0CD0   (0x0010)  MISSED
	FDiscoveredAnims                                   DiscoveredPersonality;                                      // 0x0CE0   (0x0090)  
	FDiscoveredAnims                                   DiscoveredDialog;                                           // 0x0D70   (0x0090)  
	FDiscoveredAnims                                   DiscoveredEmotion0;                                         // 0x0E00   (0x0090)  
	FDiscoveredAnims                                   DiscoveredEmotion1;                                         // 0x0E90   (0x0090)  
	unsigned char                                      UnknownData05_6[0x68];                                      // 0x0F20   (0x0068)  MISSED
	TArray<FRandomPlayerSequenceEntryNamed>            CurrentBaseIdle;                                            // 0x0F88   (0x0010)  
	FLoopRandomSequence                                CurrentIdleLoopSequence;                                    // 0x0F98   (0x0028)  
	FLoopRandomSequence                                CurrentBarkTalkSequence;                                    // 0x0FC0   (0x0028)  
	TArray<FRandomPlayerSequenceEntryNamed>            CurrentDialogIdle;                                          // 0x0FE8   (0x0010)  
	FLoopRandomSequence                                CurrentDialogIdleLoopSequence;                              // 0x0FF8   (0x0028)  
	FLoopRandomSequence                                CurrentTalkSequence;                                        // 0x1020   (0x0028)  
	FLoopRandomSequence                                CurrentEmotion0IdleSequences;                               // 0x1048   (0x0028)  
	FLoopRandomSequence                                CurrentEmotion0TalkSequence;                                // 0x1070   (0x0028)  
	TArray<FRandomPlayerSequenceEntryNamed>            Emotion0DialogIdle;                                         // 0x1098   (0x0010)  
	class UAnimSequence*                               CurrentEmotion0StartSequence;                               // 0x10A8   (0x0008)  
	FLoopRandomSequence                                CurrentEmotion1IdleSequences;                               // 0x10B0   (0x0028)  
	FLoopRandomSequence                                CurrentEmotion1TalkSequence;                                // 0x10D8   (0x0028)  
	TArray<FRandomPlayerSequenceEntryNamed>            Emotion1DialogIdle;                                         // 0x1100   (0x0010)  
	class UAnimSequence*                               CurrentEmotion1StartSequence;                               // 0x1110   (0x0008)  
	bool                                               bIsHeadEmotionActive;                                       // 0x1118   (0x0001)  
	bool                                               bCurrentTalkHasStartEndSequence;                            // 0x1119   (0x0001)  
	bool                                               bCurrentBarkTalkHasStartEndSequences;                       // 0x111A   (0x0001)  
	bool                                               bCurrentEmotion0TalkHasStartEndSequences;                   // 0x111B   (0x0001)  
	bool                                               bCurrentEmotion1TalkHasStartEndSequences;                   // 0x111C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x111D   (0x0003)  MISSED
	bool                                               bCurrentEmotion0HasStartSequence;                           // 0x1120   (0x0001)  
	bool                                               bCurrentEmotion1HasStartSequence;                           // 0x1121   (0x0001)  
	bool                                               bIsNeutralIdleSequenceValid;                                // 0x1122   (0x0001)  
	bool                                               bIsDialogIdleSequenceValid;                                 // 0x1123   (0x0001)  
	bool                                               bIsEmotion0IdleSequenceValid;                               // 0x1124   (0x0001)  
	bool                                               bIsEmotion1IdleSequenceValid;                               // 0x1125   (0x0001)  
	bool                                               bConversationIdleStateActive;                               // 0x1126   (0x0001)  
	bool                                               bBaseIdleStateActive;                                       // 0x1127   (0x0001)  
	bool                                               bBaseIdleStateActiveCut;                                    // 0x1128   (0x0001)  
	bool                                               bEmotion0IdleStateActive;                                   // 0x1129   (0x0001)  
	bool                                               bEmotion0IdleStateActiveCut;                                // 0x112A   (0x0001)  
	bool                                               bEmotion1IdleStateActive;                                   // 0x112B   (0x0001)  
	bool                                               bEmotion1IdleStateActiveCut;                                // 0x112C   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1];                                       // 0x112D   (0x0001)  MISSED
	bool                                               bUseTalkingAnimations;                                      // 0x112E   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x112F   (0x0001)  MISSED
	float                                              IKLeftHandStrength;                                         // 0x1130   (0x0004)  
	float                                              HandPoseStrength;                                           // 0x1134   (0x0004)  
	float                                              WalkArmPosesStrength;                                       // 0x1138   (0x0004)  
	float                                              RunArmPosesStrength;                                        // 0x113C   (0x0004)  
	float                                              ArmPoseSpeed;                                               // 0x1140   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x1144   (0x0004)  MISSED
	TArray<class UAnimMontage*>                        GetUpFromFaceDownPoseWeapon;                                // 0x1148   (0x0010)  
	TArray<class UAnimMontage*>                        GetUpFromFaceUpPoseWeapon;                                  // 0x1158   (0x0010)  
	int32_t                                            EmotionLayerInvalidate0;                                    // 0x1168   (0x0004)  
	int32_t                                            EmotionLayerInvalidate1;                                    // 0x116C   (0x0004)  
	class UAnimSequence*                               HeadAdditiveLayer;                                          // 0x1170   (0x0008)  
	class UAnimSequence*                               HeadAdditiveLayerEmotion0;                                  // 0x1178   (0x0008)  
	class UAnimSequence*                               HeadAdditiveLayerEmotion1;                                  // 0x1180   (0x0008)  
	class UAnimSequence*                               HeadAdditiveLayerEmotionStart0;                             // 0x1188   (0x0008)  
	class UAnimSequence*                               HeadAdditiveLayerEmotionStart1;                             // 0x1190   (0x0008)  
	float                                              HeadStrengthSpeed;                                          // 0x1198   (0x0004)  
	float                                              CurrentHeadStrength;                                        // 0x119C   (0x0004)  
	bool                                               bIsEmotion0AdditveStartValid;                               // 0x11A0   (0x0001)  
	bool                                               bIsEmotion1AdditveStartValid;                               // 0x11A1   (0x0001)  
	unsigned char                                      UnknownData10_6[0x6];                                       // 0x11A2   (0x0006)  MISSED
	bool                                               bCutFromIdleLoop;                                           // 0x11A8   (0x0001)  
	bool                                               RandomIdle;                                                 // 0x11A9   (0x0001)  
	unsigned char                                      UnknownData11_6[0x6];                                       // 0x11AA   (0x0006)  MISSED
	FTalkingIdleEntry                                  TalkingOverride;                                            // 0x11B0   (0x0090)  
	unsigned char                                      UnknownData12_6[0x8];                                       // 0x1240   (0x0008)  MISSED
	FTalkingIdleEntry                                  PendingTalkingOverride;                                     // 0x1248   (0x0090)  
	unsigned char                                      UnknownData13_7[0x8];                                       // 0x12D8   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.BipedAnimInstance.UpdatePersonalityAnims
	// void UpdatePersonalityAnims();                                                                                           // [0x17b4d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.BipedAnimInstance.PickRandomIdle
	// void PickRandomIdle();                                                                                                   // [0x17b4d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.BipedAnimInstance.AnimNotify_SafeToReevaluateTalking
	// void AnimNotify_SafeToReevaluateTalking();                                                                               // [0x17b4c50] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.BlockProperties
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 MaxSize: 0x0004
struct FBlockProperties
{ 
	float                                              AttackDamageMultiplier;                                     // 0x0000   (0x0004)  
};

/// Class /Script/Indiana.BlockComponent
/// Size: 0x0260 (608 bytes) (0x0000E0 - 0x000260) align 8 MaxSize: 0x0260
class UBlockComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,376) /* FMulticastInlineDelegate */ __um(OnBlockStart);                                       // 0x00E0   (0x0010)  
	SDK_UNDEFINED(16,377) /* FMulticastInlineDelegate */ __um(OnBlockStop);                                        // 0x00F0   (0x0010)  
	SDK_UNDEFINED(16,378) /* FMulticastInlineDelegate */ __um(OnBlockHit);                                         // 0x0100   (0x0010)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0110   (0x0018)  MISSED
	TMap<EMeleeAttackType, FBlockProperties>           BlockProperties;                                            // 0x0128   (0x0050)  
	FName                                              BlockingParameterName;                                      // 0x0178   (0x0008)  
	float                                              VFXRampInSpeed;                                             // 0x0180   (0x0004)  
	float                                              VFXRampOutSpeed;                                            // 0x0184   (0x0004)  
	FName                                              BlockingHitParameterName;                                   // 0x0188   (0x0008)  
	FRuntimeFloatCurve                                 BlockingHitCurve;                                           // 0x0190   (0x0088)  
	bool                                               bBlocking;                                                  // 0x0218   (0x0001)  
	unsigned char                                      UnknownData01_7[0x47];                                      // 0x0219   (0x0047)  MISSED
};

/// Class /Script/Indiana.BlockInventoryVolume
/// Size: 0x0310 (784 bytes) (0x000310 - 0x000310) align 8 MaxSize: 0x0310
class ABlockInventoryVolume : public AVolume
{ 
public:
};

/// Struct /Script/Indiana.AppearanceGoreCap
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 MaxSize: 0x0098
struct FAppearanceGoreCap
{ 
	FGameplayTagContainer                              BodyParts;                                                  // 0x0000   (0x0020)  
	TWeakObjectPtr<class UStaticMesh*>                 UpperCap;                                                   // 0x0020   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0028   (0x0020)  MISSED
	TWeakObjectPtr<class UStaticMesh*>                 LowerCap;                                                   // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0050   (0x0020)  MISSED
	TWeakObjectPtr<class USkeletalMesh*>               SkinnedCap;                                                 // 0x0070   (0x0008)  
	unsigned char                                      UnknownData02_7[0x20];                                      // 0x0078   (0x0020)  MISSED
};

/// Struct /Script/Indiana.BodyAppearance
/// Size: 0x00F0 (240 bytes) (0x000040 - 0x0000F0) align 8 MaxSize: 0x00F0
struct FBodyAppearance : FAppearanceMatch
{ 
	TWeakObjectPtr<class USkeletalMesh*>               BodyMesh;                                                   // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0048   (0x0020)  MISSED
	SDK_UNDEFINED(80,379) /* TMap<FName, TWeakObjectPtr<UMaterialInterface*>> */ __um(MaterialOverrides);          // 0x0068   (0x0050)  
	TArray<FAppearanceGoreCap>                         GoreCaps;                                                   // 0x00B8   (0x0010)  
	TWeakObjectPtr<class UFootstepData*>               Footsteps;                                                  // 0x00C8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x00D0   (0x0020)  MISSED
};

/// Class /Script/Indiana.BodyAppearances
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UBodyAppearances : public UPrimaryDataAsset
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0038   (0x0008)  MISSED
	TArray<FBodyAppearance>                            BodyAppearances;                                            // 0x0040   (0x0010)  
	FGameplayTag                                       BodyType;                                                   // 0x0050   (0x0008)  
};

/// Struct /Script/Indiana.SpellEffectApplyChance
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 MaxSize: 0x0070
struct FSpellEffectApplyChance
{ 
	FGameplayTagContainer                              BodyParts;                                                  // 0x0000   (0x0020)  
	TMap<class UClass*, float>                         SpellApplyChances;                                          // 0x0020   (0x0050)  
};

/// Class /Script/Indiana.BodyLocationSpellAsset
/// Size: 0x0078 (120 bytes) (0x000038 - 0x000078) align 8 MaxSize: 0x0078
class UBodyLocationSpellAsset : public UDataAsset
{ 
public:
	TArray<FSpellEffectApplyChance>                    LocationSpellChanceMap;                                     // 0x0038   (0x0010)  
	FGameplayTag                                       WeaponHitBodyPartTTD;                                       // 0x0048   (0x0008)  
	FGameplayTagContainer                              ImmuneCreatures;                                            // 0x0050   (0x0020)  
	float                                              TTDChance;                                                  // 0x0070   (0x0004)  
	bool                                               bApplyAllInTTD;                                             // 0x0074   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Struct /Script/Indiana.BodyPart
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FBodyPart
{ 
	FName                                              PhATBodySetupBoneName;                                      // 0x0000   (0x0008)  
	bool                                               bRepresentsMultipleBodyParts;                               // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	FGameplayTag                                       BodyPartTag;                                                // 0x000C   (0x0008)  
	FName                                              TransformSocketName;                                        // 0x0014   (0x0008)  
	float                                              DirectionalBodyPartsOffset;                                 // 0x001C   (0x0004)  
	TArray<FGameplayTag>                               DirectionalBodyParts;                                       // 0x0020   (0x0010)  
	bool                                               bCanBeSevered;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              SeverBoneNameOverride;                                      // 0x0034   (0x0008)  
	FName                                              AttachedSocket;                                             // 0x003C   (0x0008)  
	FName                                              DetachedSocket;                                             // 0x0044   (0x0008)  
	bool                                               bBulletMagnetism;                                           // 0x004C   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Indiana.BodyPartData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UBodyPartData : public UDataAsset
{ 
public:
	TArray<FBodyPart>                                  BodyParts;                                                  // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.BodyPartsComponent
/// Size: 0x00E0 (224 bytes) (0x0000E0 - 0x0000E0) align 8 MaxSize: 0x00E0
class UBodyPartsComponent : public UActorComponent
{ 
public:
};

/// Class /Script/Indiana.BoneModStatusEffect
/// Size: 0x0198 (408 bytes) (0x000188 - 0x000198) align 8 MaxSize: 0x0198
class UBoneModStatusEffect : public UStatusEffect
{ 
public:
	TArray<class UBoneModifications*>                  BoneMods;                                                   // 0x0188   (0x0010)  
};

/// Class /Script/Indiana.BossComponent
/// Size: 0x0110 (272 bytes) (0x0000E0 - 0x000110) align 8 MaxSize: 0x0110
class UBossComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x00E0   (0x0030)  MISSED


	/// Functions
	// Function /Script/Indiana.BossComponent.OnHealthChanged
	// void OnHealthChanged(float HealthChange, class AActor* InInstigator);                                                    // [0x17ba520] Final|Native|Private 
	// Function /Script/Indiana.BossComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bIsInCombat, bool bRestoring);                                                            // [0x17ba450] Final|Native|Private 
};

/// Class /Script/Indiana.BossFightManager
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align 8 MaxSize: 0x0060
class UBossFightManager : public UObject
{ 
public:
	SDK_UNDEFINED(16,380) /* FMulticastInlineDelegate */ __um(OnBossHealthChanged);                                // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0040   (0x0020)  MISSED
};

/// Class /Script/Indiana.BotAnimInstance
/// Size: 0x0AA0 (2720 bytes) (0x000950 - 0x000AA0) align 16 MaxSize: 0x0AA0
class UBotAnimInstance : public UTPVAnimInstance
{ 
public:
	TArray<class UAnimSequence*>                       LocomotionTurnInPlace;                                      // 0x0950   (0x0010)  
	TArray<class UAnimSequence*>                       CombatTurnInPlace;                                          // 0x0960   (0x0010)  
	class UBlendSpace1D*                               ForwardBlendSpace;                                          // 0x0970   (0x0008)  
	class UBlendSpace1D*                               LeftBlendSpace;                                             // 0x0978   (0x0008)  
	class UBlendSpace1D*                               RightBlendSpace;                                            // 0x0980   (0x0008)  
	class UBlendSpace1D*                               BackBlendSpace;                                             // 0x0988   (0x0008)  
	float                                              ForwardBlendMin;                                            // 0x0990   (0x0004)  
	float                                              ForwardBlendMax;                                            // 0x0994   (0x0004)  
	float                                              LeftBlendMin;                                               // 0x0998   (0x0004)  
	float                                              LeftBlendMax;                                               // 0x099C   (0x0004)  
	float                                              RightBlendMin;                                              // 0x09A0   (0x0004)  
	float                                              RightBlendMax;                                              // 0x09A4   (0x0004)  
	float                                              BackwardBlendMin;                                           // 0x09A8   (0x0004)  
	float                                              BackwardBlendMax;                                           // 0x09AC   (0x0004)  
	unsigned char                                      UnknownData00_6[0x80];                                      // 0x09B0   (0x0080)  MISSED
	float                                              IKHipBlendSpeed;                                            // 0x0A30   (0x0004)  
	float                                              LegIKStrength;                                              // 0x0A34   (0x0004)  
	FVector                                            HipOffset;                                                  // 0x0A38   (0x000C)  
	bool                                               bLocoForwardActive;                                         // 0x0A44   (0x0001)  
	bool                                               bLocoLeftActive;                                            // 0x0A45   (0x0001)  
	bool                                               bLocoRightActive;                                           // 0x0A46   (0x0001)  
	bool                                               bLocoBackwardActive;                                        // 0x0A47   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1C];                                      // 0x0A48   (0x001C)  MISSED
	float                                              CombatDirection;                                            // 0x0A64   (0x0004)  
	float                                              BackwardAngle;                                              // 0x0A68   (0x0004)  
	float                                              RightAngle;                                                 // 0x0A6C   (0x0004)  
	float                                              LeftAngle;                                                  // 0x0A70   (0x0004)  
	float                                              FootAngledAmountForSlopes;                                  // 0x0A74   (0x0004)  
	float                                              CombatWalkForwardSpeed;                                     // 0x0A78   (0x0004)  
	float                                              CombatWalkForwardDistance;                                  // 0x0A7C   (0x0004)  
	float                                              CombatWalkBackwardSpeed;                                    // 0x0A80   (0x0004)  
	float                                              CombatWalkBackwardDistance;                                 // 0x0A84   (0x0004)  
	float                                              CombatWalkLeftSpeed;                                        // 0x0A88   (0x0004)  
	float                                              CombatWalkLeftDistance;                                     // 0x0A8C   (0x0004)  
	float                                              CombatWalkRightSpeed;                                       // 0x0A90   (0x0004)  
	float                                              CombatWalkRightDistance;                                    // 0x0A94   (0x0004)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0A98   (0x0008)  MISSED
};

/// Class /Script/Indiana.BrandDataAsset
/// Size: 0x00E0 (224 bytes) (0x000038 - 0x0000E0) align 8 MaxSize: 0x00E0
class UBrandDataAsset : public UDataAsset
{ 
public:
	FLocString                                         Name;                                                       // 0x0038   (0x0008)  
	TWeakObjectPtr<class UTexture2D*>                  Image;                                                      // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0048   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  SmallBrandImage;                                            // 0x0068   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0070   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  LargeTutorialImage;                                         // 0x0090   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0098   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  SmallTutorialImage;                                         // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData03_7[0x20];                                      // 0x00C0   (0x0020)  MISSED
};

/// Class /Script/Indiana.BreakdownPopupWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UBreakdownPopupWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              BreakdownItemsTextBox;                                      // 0x0300   (0x0008)  
	class UImage*                                      PartsImage;                                                 // 0x0308   (0x0008)  
	class UTexture2D*                                  WeaponPartTexture;                                          // 0x0310   (0x0008)  
	class UTexture2D*                                  ArmorPartTexture;                                           // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0320   (0x0010)  MISSED
};

/// Class /Script/Indiana.Brows
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UBrows : public UPrimaryDataAsset
{ 
public:
	class UTexture*                                    BrowsMask;                                                  // 0x0038   (0x0008)  
	class UTexture*                                    BrowsNormal;                                                // 0x0040   (0x0008)  
	float                                              NormalIntensity;                                            // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Indiana.BTDecorator_IndianaConditional
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align 8 MaxSize: 0x0078
class UBTDecorator_IndianaConditional : public UBTDecorator
{ 
public:
	EFlowAbortMode                                     AbortMode;                                                  // 0x0070   (0x0001)  
	EFlowAbortCondition                                AbortCondition;                                             // 0x0071   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0072   (0x0006)  MISSED
};

/// Struct /Script/Indiana.CompositeConditionalElement
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FCompositeConditionalElement
{ 
	class UBTDecorator_IndianaConditional*             Conditional;                                                // 0x0000   (0x0008)  
	LogicalOperator                                    LogicalOperator;                                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Con_Composite
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBT_Con_Composite : public UBTDecorator_IndianaConditional
{ 
public:
	TArray<FCompositeConditionalElement>               Conditionals;                                               // 0x0078   (0x0010)  
};

/// Struct /Script/Indiana.AISelector_Location
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_Location
{ 
	class UClass*                                      AILocation;                                                 // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsLocationValid
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBT_Con_General_IsLocationValid : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Location                               LocationSelector;                                           // 0x0078   (0x0008)  
	float                                              AbortDistanceThreshold;                                     // 0x0080   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Class /Script/Indiana.BT_Con_Animation_ShouldFaceTargetBeforePlayback
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Animation_ShouldFaceTargetBeforePlayback : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Approach_IsTargetInConversation
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Approach_IsTargetInConversation : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Approach_IsInInterrogationRange
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Approach_IsInInterrogationRange : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_CompanionFollow_ShouldWait
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_CompanionFollow_ShouldWait : public UBTDecorator_IndianaConditional
{ 
public:
	float                                              TargetDistanceThreshold;                                    // 0x0078   (0x0004)  
	float                                              PlayerDistanceThreshold;                                    // 0x007C   (0x0004)  
};

/// Class /Script/Indiana.BT_Con_CompanionFollow_IsFollowLocationValid
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_CompanionFollow_IsFollowLocationValid : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Cover_IsCoverType
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_Cover_IsCoverType : public UBTDecorator_IndianaConditional
{ 
public:
	ECoverTypes                                        CoverType;                                                  // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Con_Cover_WasInterrupted
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Cover_WasInterrupted : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Crouch_IsCrouchInPlace
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Crouch_IsCrouchInPlace : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Furniture_IsCurrentBehaviorState
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_Furniture_IsCurrentBehaviorState : public UBTDecorator_IndianaConditional
{ 
public:
	EFurnitureBehaviorState                            FurnitureState;                                             // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Con_Furniture_ShouldOrientToFurniture
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Furniture_ShouldOrientToFurniture : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Furniture_IsReserved
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Furniture_IsReserved : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Furniture_IsValid
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Furniture_IsValid : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Struct /Script/Indiana.AISelector_Actor
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_Actor
{ 
	class UClass*                                      AIActor;                                                    // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsSeen
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBT_Con_General_IsSeen : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
	float                                              SeenTime;                                                   // 0x0080   (0x0004)  
	bool                                               bAllowGodVision;                                            // 0x0084   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0085   (0x0003)  MISSED
};

/// Class /Script/Indiana.BT_Con_General_IsAimingPossible
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_IsAimingPossible : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsFollowTargetValid
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_IsFollowTargetValid : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsFollower
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_IsFollower : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsOnRails
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_IsOnRails : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_HasEquippedWeapon
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_HasEquippedWeapon : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsInRange
/// Size: 0x00B0 (176 bytes) (0x000078 - 0x0000B0) align 8 MaxSize: 0x00B0
class UBT_Con_General_IsInRange : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
	FAISelector_Location                               LocationSelector;                                           // 0x0080   (0x0008)  
	float                                              MinRange;                                                   // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	FAISelector_FValue                                 MinRangeSelector;                                           // 0x0090   (0x0008)  
	float                                              MaxRange;                                                   // 0x0098   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x009C   (0x0004)  MISSED
	FAISelector_FValue                                 MaxRangeSelector;                                           // 0x00A0   (0x0008)  
	float                                              AcceptableHalfHeightDifference;                             // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Indiana.BT_Con_General_CanMoveCloserOnRails
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align 8 MaxSize: 0x0090
class UBT_Con_General_CanMoveCloserOnRails : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
	FAISelector_Location                               LocationSelector;                                           // 0x0080   (0x0008)  
	float                                              MinTravelDistance;                                          // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Indiana.BT_Con_General_ClosestVantageIsInRange
/// Size: 0x00A8 (168 bytes) (0x000078 - 0x0000A8) align 8 MaxSize: 0x00A8
class UBT_Con_General_ClosestVantageIsInRange : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
	FAISelector_Location                               LocationSelector;                                           // 0x0080   (0x0008)  
	float                                              MinRange;                                                   // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	FAISelector_FValue                                 MinRangeSelector;                                           // 0x0090   (0x0008)  
	float                                              MaxRange;                                                   // 0x0098   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x009C   (0x0004)  MISSED
	FAISelector_FValue                                 MaxRangeSelector;                                           // 0x00A0   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsFacingTarget
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align 8 MaxSize: 0x0090
class UBT_Con_General_IsFacingTarget : public UBTDecorator_IndianaConditional
{ 
public:
	float                                              MaxAngle;                                                   // 0x0078   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	FAISelector_FValue                                 MaxAngleSelector;                                           // 0x0080   (0x0008)  
	bool                                               bClampMaxAngleToInitiationThreshold;                        // 0x0088   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Struct /Script/Indiana.AISelector_Bool
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_Bool
{ 
	class UClass*                                      AIBool;                                                     // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_CheckBooleanSelector
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_CheckBooleanSelector : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Bool                                   BooleanSelector;                                            // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsTimeSinceBehaviorState
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBT_Con_General_IsTimeSinceBehaviorState : public UBTDecorator_IndianaConditional
{ 
public:
	EBehaviorState                                     BehaviorState;                                              // 0x0078   (0x0001)  
	ComparisonOperator                                 Operator;                                                   // 0x0079   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x007A   (0x0002)  MISSED
	float                                              Time;                                                       // 0x007C   (0x0004)  
	FAISelector_FValue                                 TimeSelector;                                               // 0x0080   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_TestContinuousSeenTime
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBT_Con_General_TestContinuousSeenTime : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
	float                                              Threshold;                                                  // 0x0080   (0x0004)  
	ComparisonOperator                                 ComparisonOp;                                               // 0x0084   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0085   (0x0003)  MISSED
};

/// Class /Script/Indiana.BT_Con_General_IsBehaviorStateComplete
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_IsBehaviorStateComplete : public UBTDecorator_IndianaConditional
{ 
public:
	EBehaviorStateCompletionType                       CompletionType;                                             // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Con_General_WithInDistance
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align 8 MaxSize: 0x0090
class UBT_Con_General_WithInDistance : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Location                               StartLocation;                                              // 0x0078   (0x0008)  
	FAISelector_Location                               EndLocation;                                                // 0x0080   (0x0008)  
	float                                              Distance;                                                   // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Indiana.BT_Con_General_IsInPlayerConversation
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_General_IsInPlayerConversation : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_General_IsValidHealTarget
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_IsValidHealTarget : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsPrimaryTargetStimulusType
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_IsPrimaryTargetStimulusType : public UBTDecorator_IndianaConditional
{ 
public:
	EStimulusType                                      StimulusType;                                               // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Con_General_Random
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_Random : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_FValue                                 RandomValueSelector;                                        // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsAlertStateTimeRemainingEstimateGreaterThan
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_IsAlertStateTimeRemainingEstimateGreaterThan : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_FValue                                 TimeRemainingThresholdSelector;                             // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_WantsNonBehaviorCrouch
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_General_WantsNonBehaviorCrouch : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_General_Dot
/// Size: 0x00A0 (160 bytes) (0x000078 - 0x0000A0) align 8 MaxSize: 0x00A0
class UBT_Con_General_Dot : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Location                               StartLinePointA;                                            // 0x0078   (0x0008)  
	FAISelector_Location                               EndLinePointA;                                              // 0x0080   (0x0008)  
	FAISelector_Location                               StartLinePointB;                                            // 0x0088   (0x0008)  
	FAISelector_Location                               EndLinePointB;                                              // 0x0090   (0x0008)  
	float                                              Dot;                                                        // 0x0098   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x009C   (0x0004)  MISSED
};

/// Class /Script/Indiana.BT_Con_General_HasVantageOnActor
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_HasVantageOnActor : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_SimpleIsSeen
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_General_SimpleIsSeen : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Con_General_IsCreatureType
/// Size: 0x00A0 (160 bytes) (0x000078 - 0x0000A0) align 8 MaxSize: 0x00A0
class UBT_Con_General_IsCreatureType : public UBTDecorator_IndianaConditional
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
	FGameplayTagContainer                              CreatureTypes;                                              // 0x0080   (0x0020)  
};

/// Class /Script/Indiana.BT_Con_Jump_ShouldRotateToFaceJumpDirection
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Jump_ShouldRotateToFaceJumpDirection : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Jump_IsJumpInPlace
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Jump_IsJumpInPlace : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Jump_IsIntroAnimationComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Jump_IsIntroAnimationComplete : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Jump_IsOutroAnimationComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Jump_IsOutroAnimationComplete : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Melee_IsSlottingState
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_Melee_IsSlottingState : public UBTDecorator_IndianaConditional
{ 
public:
	EAttackerSlottingState                             State;                                                      // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Con_Melee_IsRecoveryType
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Con_Melee_IsRecoveryType : public UBTDecorator_IndianaConditional
{ 
public:
	EMeleeRecoveryType                                 RecoveryType;                                               // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Con_Melee_IsDodgeRecoveryPossible
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Melee_IsDodgeRecoveryPossible : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_MoveTo_ShouldWaitAfterArrival
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_MoveTo_ShouldWaitAfterArrival : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Patrol_IsPatrolNodeValid
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Patrol_IsPatrolNodeValid : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Patrol_HasPatrolNodeAction
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Patrol_HasPatrolNodeAction : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Patrol_IsBeyondRotate
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Patrol_IsBeyondRotate : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Patrol_OrientOnArrival
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Patrol_OrientOnArrival : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BT_Con_Search_ShouldMoveDirectlyToTarget
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Con_Search_ShouldMoveDirectlyToTarget : public UBTDecorator_IndianaConditional
{ 
public:
};

/// Class /Script/Indiana.BTDecorator_IndianaScript
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align 8 MaxSize: 0x0078
class UBTDecorator_IndianaScript : public UBTDecorator
{ 
public:
	EAIScriptExecutionType                             ScriptExecutionType;                                        // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Indiana.BTDecorator_IndianaToggleScript
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBTDecorator_IndianaToggleScript : public UBTDecorator
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_SetMovementState
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_SetMovementState : public UBTDecorator_IndianaToggleScript
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0070   (0x0008)  
	EAIMovementState                                   MovementState;                                              // 0x0078   (0x0001)  
	bool                                               bUseDisabledMovementState;                                  // 0x0079   (0x0001)  
	EAIMovementState                                   DisabledMovementState;                                      // 0x007A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x007B   (0x0005)  MISSED
};

/// Class /Script/Indiana.BT_Scr_SetMovementState_Distance
/// Size: 0x0098 (152 bytes) (0x000080 - 0x000098) align 8 MaxSize: 0x0098
class UBT_Scr_SetMovementState_Distance : public UBT_Scr_SetMovementState
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0080   (0x0008)  
	FAISelector_Location                               LocationSelector;                                           // 0x0088   (0x0008)  
	FAISelector_FValue                                 DistanceThresholdSelector;                                  // 0x0090   (0x0008)  
};

/// Class /Script/Indiana.BT_Scr_Approach_Interrogate
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Approach_Interrogate : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Approach_SetApproaching
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_Approach_SetApproaching : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_CalledShot_CameraStep
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_CalledShot_CameraStep : public UBTDecorator_IndianaScript
{ 
public:
	ECalledShotCameraStep                              CameraStep;                                                 // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Scr_CalledShot_Teleport
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_CalledShot_Teleport : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Cover_IncrementCoverUseCounter
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Cover_IncrementCoverUseCounter : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Cover_SetCoverType
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_Cover_SetCoverType : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Cover_ClearInterrupted
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Cover_ClearInterrupted : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Crouch_UpdatePrematureExit
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Crouch_UpdatePrematureExit : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Flank_ForceTargetOverride
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Flank_ForceTargetOverride : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Follow_ClearTeleportFlag
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Follow_ClearTeleportFlag : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_SetFurniture
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_Furniture_SetFurniture : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_SetConversationWaitState
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_Furniture_SetConversationWaitState : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_TransitionState
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Furniture_TransitionState : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_AttemptToReserve
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Furniture_AttemptToReserve : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_ForceInterest
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Furniture_ForceInterest : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_SetAnimationParameter
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_General_SetAnimationParameter : public UBTDecorator_IndianaToggleScript
{ 
public:
	EAIAnimationParameter                              Parameter;                                                  // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Scr_General_LockAIState
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_LockAIState : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_RequestPrimaryTarget
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_General_RequestPrimaryTarget : public UBTDecorator_IndianaScript
{ 
public:
	ETargetRequestType                                 RequestType;                                                // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Scr_General_PromoteQueuedToPrimaryTarget
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_General_PromoteQueuedToPrimaryTarget : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_ClearStimulus
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_General_ClearStimulus : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_SetBehaviorStateComplete
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBT_Scr_General_SetBehaviorStateComplete : public UBTDecorator_IndianaScript
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0078   (0x0008)  
	EBehaviorStateCompletionType                       CompletionType;                                             // 0x0080   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Scr_General_TriggerChatterEvent
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_General_TriggerChatterEvent : public UBTDecorator_IndianaScript
{ 
public:
	EChatterEventType                                  Event;                                                      // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Scr_General_ClearTargetDetection
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBT_Scr_General_ClearTargetDetection : public UBTDecorator_IndianaScript
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0078   (0x0008)  
	bool                                               bClearDetectionOfCompanionAndPlayer;                        // 0x0080   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	float                                              MinDistanceToPlayer;                                        // 0x0084   (0x0004)  
};

/// Class /Script/Indiana.BT_Scr_General_CancelCompanionCommandAttack
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_General_CancelCompanionCommandAttack : public UBTDecorator_IndianaScript
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Scr_General_ChangeCapsuleRadius
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_General_ChangeCapsuleRadius : public UBTDecorator_IndianaToggleScript
{ 
public:
	float                                              RadiusScalar;                                               // 0x0070   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Indiana.BT_Scr_General_SetCanBump
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_General_SetCanBump : public UBTDecorator_IndianaToggleScript
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0070   (0x0008)  
};

/// Class /Script/Indiana.BT_Scr_General_LockAllRotations
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_General_LockAllRotations : public UBTDecorator_IndianaToggleScript
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0070   (0x0008)  
};

/// Struct /Script/Indiana.AISelector_Int
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_Int
{ 
	class UClass*                                      AIInt;                                                      // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BT_Scr_General_SwitchContext
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_General_SwitchContext : public UBTDecorator_IndianaScript
{ 
public:
	FAISelector_Int                                    ContextSelector;                                            // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Scr_General_Crouch
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_Crouch : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_StartBehaviorStateCountdown
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_General_StartBehaviorStateCountdown : public UBTDecorator_IndianaScript
{ 
public:
	FAISelector_FValue                                 CountDownTimeSelector;                                      // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Scr_General_TurnOffCharacterCollisionToggle
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_TurnOffCharacterCollisionToggle : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_TurnOffMesh
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_TurnOffMesh : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_EnableContinousMovement
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_EnableContinousMovement : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_Teleport
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBT_Scr_General_Teleport : public UBTDecorator_IndianaScript
{ 
public:
	FAISelector_Location                               TeleportLocationSelector;                                   // 0x0078   (0x0008)  
	FAISelector_FValue                                 TeleportRotationSelector;                                   // 0x0080   (0x0008)  
};

/// Class /Script/Indiana.BT_Scr_General_EnableGodVision
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_EnableGodVision : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_SetAlertStateMinDuration
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_General_SetAlertStateMinDuration : public UBTDecorator_IndianaScript
{ 
public:
	FAISelector_FValue                                 MinDurationSelector;                                        // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BT_Scr_General_RegisterAreaRange
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_General_RegisterAreaRange : public UBTDecorator_IndianaToggleScript
{ 
public:
	FAISelector_Location                               LocationSelector;                                           // 0x0070   (0x0008)  
};

/// Class /Script/Indiana.BT_Scr_General_SetBehaviorNavigationSettings
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_General_SetBehaviorNavigationSettings : public UBTDecorator_IndianaToggleScript
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0070   (0x0008)  
	bool                                               bCanOpenDoors;                                              // 0x0078   (0x0001)  
	bool                                               bCanPathThroughHazards;                                     // 0x0079   (0x0001)  
	bool                                               bCanPathThroughTraps;                                       // 0x007A   (0x0001)  
	bool                                               bCanPathThroughMines;                                       // 0x007B   (0x0001)  
	bool                                               bCanJump;                                                   // 0x007C   (0x0001)  
	bool                                               bCanCrouch;                                                 // 0x007D   (0x0001)  
	bool                                               bCanUseLadders;                                             // 0x007E   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x007F   (0x0001)  MISSED
};

/// Class /Script/Indiana.BT_Scr_General_SetOverrideBehaviorAnimation
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_General_SetOverrideBehaviorAnimation : public UBTDecorator_IndianaToggleScript
{ 
public:
	EAnimTreeState                                     AnimState;                                                  // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Scr_General_SetArcing
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_SetArcing : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_SetTogglableAction
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align 8 MaxSize: 0x0080
class UBT_Scr_General_SetTogglableAction : public UBTDecorator_IndianaToggleScript
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0070   (0x0008)  
	ETogglableAction                                   TogglableAction;                                            // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BT_Scr_General_ToggleMovementOptimizations
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_ToggleMovementOptimizations : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_DisableNavWalking
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_DisableNavWalking : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_SetCowering
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_SetCowering : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_Mute
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_Mute : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_General_DisableRelavancy
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_General_DisableRelavancy : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Investigate_NotifyPreMoveWaitCompleted
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Investigate_NotifyPreMoveWaitCompleted : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Investigate_EndWaitExit
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Investigate_EndWaitExit : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Jump_SetAnimationJumpFlag
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_Jump_SetAnimationJumpFlag : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Jump_LaunchJump
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Jump_LaunchJump : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Jump_SetJumpGravity
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_Jump_SetJumpGravity : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Melee_IncrementPattern
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Melee_IncrementPattern : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Melee_SetIsAttacking
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align 8 MaxSize: 0x0070
class UBT_Scr_Melee_SetIsAttacking : public UBTDecorator_IndianaToggleScript
{ 
public:
};

/// Class /Script/Indiana.BT_Scr_Patrol_SetBehaviorStateComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBT_Scr_Patrol_SetBehaviorStateComplete : public UBTDecorator_IndianaScript
{ 
public:
};

/// Class /Script/Indiana.BTService_IndianaBase
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_IndianaBase : public UBTService
{ 
public:
};

/// Class /Script/Indiana.BTService_Chatter
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBTService_Chatter : public UBTService_IndianaBase
{ 
public:
	EChatterEventType                                  ChatterEventType;                                           // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BTService_EventFirer_TargetLostCover
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBTService_EventFirer_TargetLostCover : public UBTService_IndianaBase
{ 
public:
	FAISelector_FValue                                 InitiallySeenTargetLostTimeSelector;                        // 0x0078   (0x0008)  
	FAISelector_FValue                                 InitiallyUnseenTargetLostTimeSelector;                      // 0x0080   (0x0008)  
};

/// Class /Script/Indiana.BTService_EventFirer_TargetLostRanged
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align 8 MaxSize: 0x0098
class UBTService_EventFirer_TargetLostRanged : public UBTService_IndianaBase
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0078   (0x0008)  
	FAISelector_FValue                                 InitiallySeenTargetLostTimeSelector;                        // 0x0080   (0x0008)  
	FAISelector_FValue                                 InitiallyUnseenTargetLostTimeSelector;                      // 0x0088   (0x0008)  
	ETargetLostResponse                                TargetLostResponse;                                         // 0x0090   (0x0001)  
	bool                                               bDynamicEnabled;                                            // 0x0091   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0092   (0x0006)  MISSED
};

/// Class /Script/Indiana.BTService_EventFirer_UnsafeCover
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align 8 MaxSize: 0x0098
class UBTService_EventFirer_UnsafeCover : public UBTService_IndianaBase
{ 
public:
	float                                              RequiredUnsafeTime;                                         // 0x0078   (0x0004)  
	bool                                               bCheckFireAngle;                                            // 0x007C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	FAISelector_Location                               LocationSelector;                                           // 0x0080   (0x0008)  
	float                                              UnsafeRadius;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	FAISelector_Location                               UnsafeRadiusTarget;                                         // 0x0090   (0x0008)  
};

/// Class /Script/Indiana.BTService_EventFirer_UnsafeOccupiedCover
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBTService_EventFirer_UnsafeOccupiedCover : public UBTService_IndianaBase
{ 
public:
	float                                              RequiredUnsafeTime;                                         // 0x0078   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/Indiana.BTService_EventFirer_SuspiciousComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_SuspiciousComplete : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_InvestigateComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_InvestigateComplete : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_DeactivatedComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_DeactivatedComplete : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_ApproachComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_ApproachComplete : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_RetreatComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_RetreatComplete : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_CompanionFollowComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_CompanionFollowComplete : public UBTService_IndianaBase
{ 
public:
};

/// Struct /Script/Indiana.AISelector_UObject
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_UObject
{ 
	class UClass*                                      Object;                                                     // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BTService_EventFirer_SEComplete
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBTService_EventFirer_SEComplete : public UBTService_IndianaBase
{ 
public:
	FAISelector_UObject                                DisableStatusEffectSelector;                                // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BTService_EventFirer_InvalidSearch
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_InvalidSearch : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_SearchComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_SearchComplete : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_SearchTargetLost
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_SearchTargetLost : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_ConversationComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_ConversationComplete : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_InvalidMelee
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_InvalidMelee : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_MeleeWait
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_MeleeWait : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_BlockedLOS
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBTService_EventFirer_BlockedLOS : public UBTService_IndianaBase
{ 
public:
	bool                                               bUsingCover;                                                // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Indiana.BTService_EventFirer_IsNotSeen
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBTService_EventFirer_IsNotSeen : public UBTService_IndianaBase
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BTService_EventFirer_TargetOutsideMaxAbsoluteRange
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_TargetOutsideMaxAbsoluteRange : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_CCMoveToEnterCombatMode
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_CCMoveToEnterCombatMode : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_CowerComplete
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventFirer_CowerComplete : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_EventFirer_Generic
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBTService_EventFirer_Generic : public UBTService_IndianaBase
{ 
public:
	FGameplayTag                                       GameplayTag;                                                // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BTService_EventReload_InCover
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_EventReload_InCover : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_TeammateKilled_InCombat
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_TeammateKilled_InCombat : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_WatchKilledTeammate_InCombat
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBTService_WatchKilledTeammate_InCombat : public UBTService_IndianaBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0078   (0x0008)  MISSED
};

/// Struct /Script/Indiana.AISelector_FiringPattern
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_FiringPattern
{ 
	class UClass*                                      AIFiringPattern;                                            // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BTService_General_FiringPattern
/// Size: 0x00C0 (192 bytes) (0x000078 - 0x0000C0) align 8 MaxSize: 0x00C0
class UBTService_General_FiringPattern : public UBTService_IndianaBase
{ 
public:
	FAISelector_FiringPattern                          FiringPatternSelector;                                      // 0x0078   (0x0008)  
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0080   (0x0008)  
	FAISelector_Bool                                   ScopedEnabled;                                              // 0x0088   (0x0008)  
	FAISelector_FValue                                 PrePauseTimeSelector;                                       // 0x0090   (0x0008)  
	FAISelector_FValue                                 SuppressionTimeSelector;                                    // 0x0098   (0x0008)  
	FAISelector_FValue                                 PauseTimeFuzzSelector;                                      // 0x00A0   (0x0008)  
	FAISelector_Int                                    CompleteTypeSelector;                                       // 0x00A8   (0x0008)  
	bool                                               bDynamicEnabled;                                            // 0x00B0   (0x0001)  
	bool                                               bForceFire;                                                 // 0x00B1   (0x0001)  
	bool                                               bSaveProgress;                                              // 0x00B2   (0x0001)  
	bool                                               bCalledShot;                                                // 0x00B3   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	FAISelector_Int                                    CalledShotFireIndexSelector;                                // 0x00B8   (0x0008)  
};

/// Class /Script/Indiana.BTService_General_FocusAt
/// Size: 0x00D8 (216 bytes) (0x000078 - 0x0000D8) align 8 MaxSize: 0x00D8
class UBTService_General_FocusAt : public UBTService_IndianaBase
{ 
public:
	bool                                               bIsMoving;                                                  // 0x0078   (0x0001)  
	bool                                               bAutoComputeMoving;                                         // 0x0079   (0x0001)  
	bool                                               bForceBodyRotation;                                         // 0x007A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x007B   (0x0005)  MISSED
	FAISelector_Location                               HeadTargetSelector;                                         // 0x0080   (0x0008)  
	FAISelector_Actor                                  HeadTargetActorSelector;                                    // 0x0088   (0x0008)  
	FAISelector_Location                               BodyTargetSelector;                                         // 0x0090   (0x0008)  
	FAISelector_Actor                                  BodyTargetActorSelector;                                    // 0x0098   (0x0008)  
	FAISelector_Location                               EyesTargetSelector;                                         // 0x00A0   (0x0008)  
	FAISelector_Actor                                  EyesTargetActorSelector;                                    // 0x00A8   (0x0008)  
	FAISelector_Location                               WeaponAimTargetSelector;                                    // 0x00B0   (0x0008)  
	FAISelector_Actor                                  WeaponAimTargetActorSelector;                               // 0x00B8   (0x0008)  
	FAISelector_Bool                                   EnabledSelector;                                            // 0x00C0   (0x0008)  
	FAISelector_Bool                                   ShouldExitCondition;                                        // 0x00C8   (0x0008)  
	bool                                               bSetShouldExitRegion;                                       // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Class /Script/Indiana.BTService_RequestPrimaryTarget
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align 8 MaxSize: 0x0088
class UBTService_RequestPrimaryTarget : public UBTService_IndianaBase
{ 
public:
	FAISelector_Bool                                   EnabledSelector;                                            // 0x0078   (0x0008)  
	ETargetRequestType                                 RequestType;                                                // 0x0080   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	float                                              RequestInterval;                                            // 0x0084   (0x0004)  
};

/// Class /Script/Indiana.BTService_Search_Chatter
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UBTService_Search_Chatter : public UBTService_Chatter
{ 
public:
};

/// Class /Script/Indiana.BTService_Search_UpdateFire
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBTService_Search_UpdateFire : public UBTService_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTService_SpellTargetService
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class UBTService_SpellTargetService : public UBTService_IndianaBase
{ 
public:
	FAISelector_Actor                                  Target;                                                     // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.BTTask_IndianaBase
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align 8 MaxSize: 0x0090
class UBTTask_IndianaBase : public UBTTaskNode
{ 
public:
	bool                                               bInstant;                                                   // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0079   (0x0003)  MISSED
	bool                                               bNotifyRestore : 1;                                         // 0x007C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x007D   (0x0003)  MISSED
	FGuid                                              SaveGameTaskGuid;                                           // 0x0080   (0x0010)  
};

/// Class /Script/Indiana.BTTask_Block
/// Size: 0x00A0 (160 bytes) (0x000090 - 0x0000A0) align 8 MaxSize: 0x00A0
class UBTTask_Block : public UBTTask_IndianaBase
{ 
public:
	float                                              DefaultBlockTime;                                           // 0x0090   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	FAISelector_FValue                                 Delay;                                                      // 0x0098   (0x0008)  
};

/// Class /Script/Indiana.BTTask_Death
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align 8 MaxSize: 0x0090
class UBTTask_Death : public UBTTask_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTTask_Disable
/// Size: 0x0108 (264 bytes) (0x000090 - 0x000108) align 8 MaxSize: 0x0108
class UBTTask_Disable : public UBTTask_IndianaBase
{ 
public:
	unsigned char                                      UnknownData00_8[0x50];                                      // 0x0090   (0x0050)  MISSED
	FAISelector_UObject                                DisableStatusEffectSelector;                                // 0x00E0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x00E8   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.BTTask_Disable.OnRagdollComplete
	// void OnRagdollComplete(class UStatusEffect* StatusEffect);                                                               // [0x17c4fe0] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnPushComplete
	// void OnPushComplete(class UStatusEffect* StatusEffect);                                                                  // [0x17c4f50] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnMontageBlendingOut
	// void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);                                               // [0x17c4e80] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnIdleFinished
	// void OnIdleFinished(class UStatusEffect* StatusEffect);                                                                  // [0x17c4df0] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnFreezeComplete
	// void OnFreezeComplete(class UStatusEffect* StatusEffect);                                                                // [0x17c4d60] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnDisableFinished
	// void OnDisableFinished(class UStatusEffect* StatusEffect);                                                               // [0x17c4cd0] Final|Native|Protected 
};

/// Class /Script/Indiana.BTTask_Dodge
/// Size: 0x0098 (152 bytes) (0x000090 - 0x000098) align 8 MaxSize: 0x0098
class UBTTask_Dodge : public UBTTask_IndianaBase
{ 
public:
	FAISelector_Int                                    DodgeDirection;                                             // 0x0090   (0x0008)  
};

/// Class /Script/Indiana.BTTask_Indiana_PlayAnimation
/// Size: 0x00B8 (184 bytes) (0x000090 - 0x0000B8) align 8 MaxSize: 0x00B8
class UBTTask_Indiana_PlayAnimation : public UBTTask_IndianaBase
{ 
public:
	FAISelector_UObject                                AnimationToPlay;                                            // 0x0090   (0x0008)  
	bool                                               bLoop;                                                      // 0x0098   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	FAISelector_Bool                                   LoopCondition;                                              // 0x00A0   (0x0008)  
	bool                                               bAnimationOptional;                                         // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	float                                              MinPlayRate;                                                // 0x00AC   (0x0004)  
	float                                              MaxPlayRate;                                                // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Struct /Script/Indiana.AISelector_BoolWriteable
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_BoolWriteable
{ 
	class UClass*                                      AIBool;                                                     // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BTTask_IndianaMoveTo
/// Size: 0x00C8 (200 bytes) (0x000090 - 0x0000C8) align 8 MaxSize: 0x00C8
class UBTTask_IndianaMoveTo : public UBTTask_IndianaBase
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0090   (0x0008)  
	FAISelector_Location                               LocationSelector;                                           // 0x0098   (0x0008)  
	EMoveToResultResponse                              BlockedResponse;                                            // 0x00A0   (0x0001)  
	EMoveToResultResponse                              FailResponse;                                               // 0x00A1   (0x0001)  
	EMoveToResultResponse                              PartialPathResponse;                                        // 0x00A2   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x00A3   (0x0001)  MISSED
	float                                              AcceptableRadius;                                           // 0x00A4   (0x0004)  
	FAISelector_FValue                                 AcceptableRadiusSelector;                                   // 0x00A8   (0x0008)  
	FAISelector_BoolWriteable                          IsMoveToSuccessful;                                         // 0x00B0   (0x0008)  
	class UClass*                                      FilterClass;                                                // 0x00B8   (0x0008)  
	bool                                               bAllowStrafe : 1;                                           // 0x00C0:0 (0x0001)  
	bool                                               bAllowPartialPath : 1;                                      // 0x00C0:1 (0x0001)  
	bool                                               bTrackMovingGoal : 1;                                       // 0x00C0:2 (0x0001)  
	bool                                               bProjectGoalLocation : 1;                                   // 0x00C0:3 (0x0001)  
	bool                                               bStopOnOverlap : 1;                                         // 0x00C0:4 (0x0001)  
	bool                                               bUsePathfinding : 1;                                        // 0x00C0:5 (0x0001)  
	bool                                               bCompletionRequiresDirectPath : 1;                          // 0x00C0:6 (0x0001)  
	bool                                               bThrowPartialPathError : 1;                                 // 0x00C0:7 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00C1   (0x0007)  MISSED
};

/// Class /Script/Indiana.BTTask_IndianaDirectMoveTo
/// Size: 0x00D0 (208 bytes) (0x0000C8 - 0x0000D0) align 8 MaxSize: 0x00D0
class UBTTask_IndianaDirectMoveTo : public UBTTask_IndianaMoveTo
{ 
public:
	bool                                               bAcceptOvershoot : 1;                                       // 0x00C8:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00C9   (0x0003)  MISSED
	float                                              OvershootAcceptableRadius;                                  // 0x00CC   (0x0004)  
};

/// Struct /Script/Indiana.AISelector_ActorWritable
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_ActorWritable
{ 
	class UClass*                                      AIActor;                                                    // 0x0000   (0x0008)  
};

/// Struct /Script/Indiana.AISelector_LocationWritable
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_LocationWritable
{ 
	class UClass*                                      AILocation;                                                 // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BTTask_IndianaRunEQSQuery
/// Size: 0x00C0 (192 bytes) (0x000090 - 0x0000C0) align 8 MaxSize: 0x00C0
class UBTTask_IndianaRunEQSQuery : public UBTTask_IndianaBase
{ 
public:
	class UEQSRequest_IndianaBase*                     EQSRequest;                                                 // 0x0090   (0x0008)  
	FAISelector_ActorWritable                          ActorSelector;                                              // 0x0098   (0x0008)  
	FAISelector_LocationWritable                       LocationSelector;                                           // 0x00A0   (0x0008)  
	FAISelector_UObject                                EQSSelector;                                                // 0x00A8   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x00B0   (0x0010)  MISSED
};

/// Class /Script/Indiana.BTTask_IndianaWait
/// Size: 0x00A8 (168 bytes) (0x000090 - 0x0000A8) align 8 MaxSize: 0x00A8
class UBTTask_IndianaWait : public UBTTask_IndianaBase
{ 
public:
	float                                              WaitTime;                                                   // 0x0090   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	FAISelector_FValue                                 WaitTimeSelector;                                           // 0x0098   (0x0008)  
	FAISelector_Bool                                   WaitExitConditionSelector;                                  // 0x00A0   (0x0008)  
};

/// Class /Script/Indiana.BTTask_MeleeAttack
/// Size: 0x00C0 (192 bytes) (0x000090 - 0x0000C0) align 8 MaxSize: 0x00C0
class UBTTask_MeleeAttack : public UBTTask_IndianaBase
{ 
public:
	FAISelector_Int                                    MeleeActionSelector;                                        // 0x0090   (0x0008)  
	FAISelector_Bool                                   UseAdaptiveRootMotionSelector;                              // 0x0098   (0x0008)  
	FAISelector_FValue                                 AdapativeRootMotionMinDistanceSelector;                     // 0x00A0   (0x0008)  
	bool                                               bAdaptiveRootMotionLimitRangeOnly;                          // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
	FAISelector_FValue                                 RecoveryTimeSelector;                                       // 0x00B0   (0x0008)  
	bool                                               bCalledShot;                                                // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00B9   (0x0007)  MISSED
};

/// Struct /Script/Indiana.AISelector_Action
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_Action
{ 
	class UClass*                                      AIAction;                                                   // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.BTTask_RunActions
/// Size: 0x00A0 (160 bytes) (0x000090 - 0x0000A0) align 8 MaxSize: 0x00A0
class UBTTask_RunActions : public UBTTask_IndianaBase
{ 
public:
	FAISelector_Action                                 ActionSelector;                                             // 0x0090   (0x0008)  
	FAISelector_Bool                                   InfiniteDurationSelector;                                   // 0x0098   (0x0008)  
};

/// Class /Script/Indiana.BTTask_RunRandomEQSQuery
/// Size: 0x00C8 (200 bytes) (0x0000C0 - 0x0000C8) align 8 MaxSize: 0x00C8
class UBTTask_RunRandomEQSQuery : public UBTTask_IndianaRunEQSQuery
{ 
public:
	class URandomQuerySet*                             RandomQuerySet;                                             // 0x00C0   (0x0008)  
};

/// Class /Script/Indiana.BTTask_Script
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align 8 MaxSize: 0x0090
class UBTTask_Script : public UBTTask_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTTask_SwitchWeapon
/// Size: 0x00A0 (160 bytes) (0x000090 - 0x0000A0) align 8 MaxSize: 0x00A0
class UBTTask_SwitchWeapon : public UBTTask_IndianaBase
{ 
public:
	FAISelector_Bool                                   InstantSelector;                                            // 0x0090   (0x0008)  
	FAISelector_Int                                    WeaponSlotSelector;                                         // 0x0098   (0x0008)  
};

/// Class /Script/Indiana.BTTask_TriggerPatrolNodeEvent
/// Size: 0x0098 (152 bytes) (0x000090 - 0x000098) align 8 MaxSize: 0x0098
class UBTTask_TriggerPatrolNodeEvent : public UBTTask_IndianaBase
{ 
public:
	FAISelector_Actor                                  ActorSelector;                                              // 0x0090   (0x0008)  
};

/// Class /Script/Indiana.BTTask_UseCover
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align 8 MaxSize: 0x0090
class UBTTask_UseCover : public UBTTask_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.BTTask_UseFurniture
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align 8 MaxSize: 0x0090
class UBTTask_UseFurniture : public UBTTask_IndianaBase
{ 
public:
};

/// Struct /Script/Indiana.SlateBrushContainer
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 MaxSize: 0x0090
struct FSlateBrushContainer
{ 
	class USlateBrushAsset*                            BrushAsset;                                                 // 0x0000   (0x0008)  
	FSlateBrush                                        Brush;                                                      // 0x0008   (0x0088)  
};

/// Struct /Script/Indiana.SizeConstraint
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FSizeConstraint
{ 
	bool                                               bEnabled;                                                   // 0x0000   (0x0001)  
	bool                                               bUseBrushAsMinSize;                                         // 0x0001   (0x0001)  
	bool                                               bUseSnap;                                                   // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FVector2D                                          Minimum;                                                    // 0x0004   (0x0008)  
	FVector2D                                          Snap;                                                       // 0x000C   (0x0008)  
};

/// Struct /Script/Indiana.IndianaTextBlockStyle
/// Size: 0x0288 (648 bytes) (0x000278 - 0x000288) align 8 MaxSize: 0x0288
struct FIndianaTextBlockStyle : FTextBlockStyle
{ 
	class USlateWidgetStyleAsset*                      ImportAsset;                                                // 0x0278   (0x0008)  
	EIndianaUIColorType                                ColorOverride;                                              // 0x0280   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0281   (0x0007)  MISSED
};

/// Struct /Script/Indiana.IndianaButtonStyle
/// Size: 0x0828 (2088 bytes) (0x000008 - 0x000828) align 8 MaxSize: 0x0828
struct FIndianaButtonStyle : FSlateWidgetStyle
{ 
	FSlateBrushContainer                               NormalBrush;                                                // 0x0008   (0x0090)  
	FSlateBrushContainer                               HoveredBrush;                                               // 0x0098   (0x0090)  
	FSlateBrushContainer                               PressedBrush;                                               // 0x0128   (0x0090)  
	FSlateBrushContainer                               FocusedBrush;                                               // 0x01B8   (0x0090)  
	FSlateBrushContainer                               SelectedNormalBrush;                                        // 0x0248   (0x0090)  
	FSlateBrushContainer                               SelectedHoveredBrush;                                       // 0x02D8   (0x0090)  
	FSlateBrushContainer                               SelectedPressedBrush;                                       // 0x0368   (0x0090)  
	FSlateBrushContainer                               SelectedFocusedBrush;                                       // 0x03F8   (0x0090)  
	FSlateBrushContainer                               DisabledBrush;                                              // 0x0488   (0x0090)  
	FLinearColor                                       ContentColor;                                               // 0x0518   (0x0010)  
	FLinearColor                                       ButtonColor;                                                // 0x0528   (0x0010)  
	FMargin                                            NormalPadding;                                              // 0x0538   (0x0010)  
	FMargin                                            PressedPadding;                                             // 0x0548   (0x0010)  
	FSizeConstraint                                    SizeConstraints;                                            // 0x0558   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x056C   (0x0004)  MISSED
	FIndianaTextBlockStyle                             TextBlockStyle;                                             // 0x0570   (0x0288)  
	class UAkAudioEvent*                               PressedSoundOverride;                                       // 0x07F8   (0x0008)  
	class UAkAudioEvent*                               HoveredSoundOverride;                                       // 0x0800   (0x0008)  
	class UAkAudioEvent*                               FocusedSoundOverride;                                       // 0x0808   (0x0008)  
	class UAkAudioEvent*                               SelectedPressedSoundOverride;                               // 0x0810   (0x0008)  
	class UAkAudioEvent*                               SelectedHoveredSoundOverride;                               // 0x0818   (0x0008)  
	class UAkAudioEvent*                               SelectedFocusedSoundOverride;                               // 0x0820   (0x0008)  
};

/// Class /Script/Indiana.ButtonBase
/// Size: 0x0B98 (2968 bytes) (0x000138 - 0x000B98) align 8 MaxSize: 0x0B98
class UButtonBase : public UContentWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0138   (0x0020)  MISSED
	class UClass*                                      ToolTipClass;                                               // 0x0158   (0x0008)  
	FLocString                                         TextReference;                                              // 0x0160   (0x0008)  
	EButtonType                                        ButtonType;                                                 // 0x0168   (0x0001)  
	bool                                               bClickEnabled;                                              // 0x0169   (0x0001)  
	bool                                               bSelected;                                                  // 0x016A   (0x0001)  
	bool                                               IsFocusable;                                                // 0x016B   (0x0001)  
	bool                                               bAllowSelectionStateChange;                                 // 0x016C   (0x0001)  
	bool                                               bCanActivateByKey;                                          // 0x016D   (0x0001)  
	bool                                               bProcessDoubleClickAsClick;                                 // 0x016E   (0x0001)  
	TEnumAsByte<EButtonClickMethod>                    ClickMethod;                                                // 0x016F   (0x0001)  
	TEnumAsByte<EButtonTouchMethod>                    TouchMethod;                                                // 0x0170   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0171   (0x0007)  MISSED
	SDK_UNDEFINED(16,381) /* FMulticastInlineDelegate */ __um(OnHoveredMCD);                                       // 0x0178   (0x0010)  
	SDK_UNDEFINED(16,382) /* FMulticastInlineDelegate */ __um(OnPressedMCD);                                       // 0x0188   (0x0010)  
	SDK_UNDEFINED(16,383) /* FMulticastInlineDelegate */ __um(OnReleasedMCD);                                      // 0x0198   (0x0010)  
	SDK_UNDEFINED(16,384) /* FMulticastInlineDelegate */ __um(OnClickedMCD);                                       // 0x01A8   (0x0010)  
	SDK_UNDEFINED(16,385) /* FMulticastInlineDelegate */ __um(OnDoubleClickedMCD);                                 // 0x01B8   (0x0010)  
	SDK_UNDEFINED(16,386) /* FMulticastInlineDelegate */ __um(OnUnhoveredMCD);                                     // 0x01C8   (0x0010)  
	SDK_UNDEFINED(16,387) /* FMulticastInlineDelegate */ __um(OnFocusLostMCD);                                     // 0x01D8   (0x0010)  
	SDK_UNDEFINED(16,388) /* FMulticastInlineDelegate */ __um(OnFocusReceivedMCD);                                 // 0x01E8   (0x0010)  
	SDK_UNDEFINED(16,389) /* FMulticastInlineDelegate */ __um(OnSelectedMCD);                                      // 0x01F8   (0x0010)  
	SDK_UNDEFINED(16,390) /* FMulticastInlineDelegate */ __um(OnUnselectedMCD);                                    // 0x0208   (0x0010)  
	FIndianaButtonStyle                                WidgetStyle;                                                // 0x0218   (0x0828)  
	FMargin                                            HitTestMargin;                                              // 0x0A40   (0x0010)  
	bool                                               bCenterSweepHitTest;                                        // 0x0A50   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0A51   (0x0007)  MISSED
	class UTexture2D*                                  AdvancedHitTexture;                                         // 0x0A58   (0x0008)  
	int32_t                                            AdvancedHitAlpha;                                           // 0x0A60   (0x0004)  
	unsigned char                                      UnknownData03_7[0x134];                                     // 0x0A64   (0x0134)  MISSED


	/// Functions
	// Function /Script/Indiana.ButtonBase.SetSelectedPressedBrush
	// void SetSelectedPressedBrush(FSlateBrush& InBrush);                                                                      // [0x17c5d90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetSelectedNormalBrush
	// void SetSelectedNormalBrush(FSlateBrush& InBrush);                                                                       // [0x17c5c70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetSelectedHoveredBrush
	// void SetSelectedHoveredBrush(FSlateBrush& InBrush);                                                                      // [0x17c5b50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetSelectedFocusedBrush
	// void SetSelectedFocusedBrush(FSlateBrush& InBrush);                                                                      // [0x17c5a30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetSelected
	// void SetSelected(bool bSelected, EFocusCause Cause);                                                                     // [0x17c5960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetPressedBrush
	// void SetPressedBrush(FSlateBrush& InBrush);                                                                              // [0x17c5840] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetNormalBrush
	// void SetNormalBrush(FSlateBrush& InBrush);                                                                               // [0x17c5720] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetHoveredBrush
	// void SetHoveredBrush(FSlateBrush& InBrush);                                                                              // [0x17c5600] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetFocusedBrush
	// void SetFocusedBrush(FSlateBrush& InBrush);                                                                              // [0x17c54e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetFocusable
	// void SetFocusable(bool bFocused);                                                                                        // [0x17c5450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetEnabled
	// void SetEnabled(bool bInEnabled);                                                                                        // [0x17c53c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetContentColor
	// void SetContentColor(FLinearColor InColorAndOpacity);                                                                    // [0x17c5330] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetButtonType
	// void SetButtonType(EButtonType TypeIn);                                                                                  // [0x17c52b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetButtonColor
	// void SetButtonColor(FLinearColor InBackgroundColor);                                                                     // [0x17c5220] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetAllowSelectionStateChange
	// void SetAllowSelectionStateChange(bool bAllowChange);                                                                    // [0x17c5190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetAdvancedHitTexture
	// void SetAdvancedHitTexture(class UTexture2D* InTexture);                                                                 // [0x17c5100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetAdvancedHitAlpha
	// void SetAdvancedHitAlpha(int32_t InAlpha);                                                                               // [0x17c5070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.IsSelected
	// bool IsSelected();                                                                                                       // [0x17c4ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ButtonBase.IsPressed
	// bool IsPressed();                                                                                                        // [0x17c4c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ButtonBase.GetSelectedPressedBrush
	// FSlateBrush GetSelectedPressedBrush();                                                                                   // [0x17c4c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetSelectedNormalBrush
	// FSlateBrush GetSelectedNormalBrush();                                                                                    // [0x17c4bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetSelectedHoveredBrush
	// FSlateBrush GetSelectedHoveredBrush();                                                                                   // [0x17c4bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetSelectedFocusedBrush
	// FSlateBrush GetSelectedFocusedBrush();                                                                                   // [0x17c4b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetPressedBrush
	// FSlateBrush GetPressedBrush();                                                                                           // [0x17c4b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetNormalBrush
	// FSlateBrush GetNormalBrush();                                                                                            // [0x17c4af0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetHoveredBrush
	// FSlateBrush GetHoveredBrush();                                                                                           // [0x17c4ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetFocusedBrush
	// FSlateBrush GetFocusedBrush();                                                                                           // [0x17c4a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetButtonType
	// EButtonType GetButtonType();                                                                                             // [0x17c4a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ButtonBase.AllowsSelectionStateChange
	// bool AllowsSelectionStateChange();                                                                                       // [0x17c4a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ButtonBaseContainerWidget
/// Size: 0x02B0 (688 bytes) (0x000278 - 0x0002B0) align 8 MaxSize: 0x02B0
class UButtonBaseContainerWidget : public UUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0278   (0x0008)  
	class UTextBlockBase*                              TextBlock;                                                  // 0x0280   (0x0008)  
	class UImage*                                      InterestIcon;                                               // 0x0288   (0x0008)  
	class USizeBox*                                    ButtonSizeBox;                                              // 0x0290   (0x0008)  
	FLocString                                         TextReference;                                              // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x02A0   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.ButtonBaseContainerWidget.OnActivatableChange
	// void OnActivatableChange(bool bActivatable);                                                                             // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.ButtonBaseSlot
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align 8 MaxSize: 0x0068
class UButtonBaseSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0052   (0x0016)  MISSED


	/// Functions
	// Function /Script/Indiana.ButtonBaseSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x17caff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBaseSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x17caf60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBaseSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x17caee0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ButtonLedgerHeader
/// Size: 0x0B98 (2968 bytes) (0x000B98 - 0x000B98) align 8 MaxSize: 0x0B98
class UButtonLedgerHeader : public UButtonBase
{ 
public:
};

/// Class /Script/Indiana.IndianaButtonWidgetStyle
/// Size: 0x0860 (2144 bytes) (0x000038 - 0x000860) align 8 MaxSize: 0x0860
class UIndianaButtonWidgetStyle : public USlateWidgetStyleContainerBase
{ 
public:
	FIndianaButtonStyle                                ButtonStyle;                                                // 0x0038   (0x0828)  
};

/// Class /Script/Indiana.CalledShotBehaviorStateInfo
/// Size: 0x0240 (576 bytes) (0x000178 - 0x000240) align 16 MaxSize: 0x0240
class UCalledShotBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	class UEventListener*                              ApplyEventListener;                                         // 0x0178   (0x0008)  
	class UCalledShotData*                             CalledShotData;                                             // 0x0180   (0x0008)  
	unsigned char                                      UnknownData00_7[0xB8];                                      // 0x0188   (0x00B8)  MISSED
};

/// Class /Script/Indiana.DecisionTreeEQSRequestData
/// Size: 0x0080 (128 bytes) (0x000060 - 0x000080) align 8 MaxSize: 0x0080
class UDecisionTreeEQSRequestData : public UBehaviorStateRequestData
{ 
public:
	class UEQSRequest_IndianaBase*                     EQSRequest;                                                 // 0x0060   (0x0008)  
	TArray<class UEQSRequest_IndianaBase*>             BackupEQSRequests;                                          // 0x0068   (0x0010)  
	class UClass*                                      InfoType;                                                   // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.CalledShotRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UCalledShotRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.CombatCameraComponent
/// Size: 0x0120 (288 bytes) (0x0000E0 - 0x000120) align 8 MaxSize: 0x0120
class UCombatCameraComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	SDK_UNDEFINED(16,391) /* FMulticastInlineDelegate */ __um(OnCameraStarted);                                    // 0x00E8   (0x0010)  
	SDK_UNDEFINED(16,392) /* FMulticastInlineDelegate */ __um(OnCameraEnded);                                      // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0108   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.CombatCameraComponent.EndCamera
	// void EndCamera();                                                                                                        // [0x17d8c60] Final|Native|Protected 
};

/// Class /Script/Indiana.CalledShotCameraComponent
/// Size: 0x01B8 (440 bytes) (0x000120 - 0x0001B8) align 8 MaxSize: 0x01B8
class UCalledShotCameraComponent : public UCombatCameraComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x14];                                      // 0x0120   (0x0014)  MISSED
	float                                              CloseRangeDistanceThreshold;                                // 0x0134   (0x0004)  
	SDK_UNDEFINED(16,393) /* TArray<TSoftObjectPtr<UClass*>> */ __um(AttackerFarCameraAnimationClasses);           // 0x0138   (0x0010)  
	float                                              SmallTargetHalfHeightThreshold;                             // 0x0148   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x014C   (0x0004)  MISSED
	TArray<class UCineCombatCameraParams*>             AttackerAndTargetCloseCameras;                              // 0x0150   (0x0010)  
	TArray<class UCineCombatCameraParams*>             AttackerAndTargetFarCameras;                                // 0x0160   (0x0010)  
	TArray<class UCineCombatCameraParams*>             AttackerCloseCameras;                                       // 0x0170   (0x0010)  
	TArray<class UCineCombatCameraParams*>             AttackerFarCameras;                                         // 0x0180   (0x0010)  
	TArray<class UCineCombatCameraParams*>             TargetCloseCameras;                                         // 0x0190   (0x0010)  
	TArray<class UCineCombatCameraParams*>             TargetFarCameras;                                           // 0x01A0   (0x0010)  
	class UClass*                                      ImpactCameraShake;                                          // 0x01B0   (0x0008)  
};

/// Struct /Script/Indiana.TimeDilationData
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 MaxSize: 0x00A8
struct FTimeDilationData
{ 
	ETimeDilationPriority                              Priority;                                                   // 0x0000   (0x0001)  
	ETimeDilationType                                  Type;                                                       // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              BlendTimeIn;                                                // 0x0004   (0x0004)  
	float                                              BlendTimeOut;                                               // 0x0008   (0x0004)  
	float                                              TimeDilationStatic;                                         // 0x000C   (0x0004)  
	FRuntimeFloatCurve                                 TimeDilationCurve;                                          // 0x0010   (0x0088)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0098   (0x0010)  MISSED
};

/// Class /Script/Indiana.CalledShotData
/// Size: 0x01D0 (464 bytes) (0x000038 - 0x0001D0) align 8 MaxSize: 0x01D0
class UCalledShotData : public UDataAsset
{ 
public:
	class UClass*                                      WeaponClass;                                                // 0x0038   (0x0008)  
	class UClass*                                      Spell;                                                      // 0x0040   (0x0008)  
	EThirdPersonSocket                                 SocketToTarget;                                             // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              DamageScalar;                                               // 0x004C   (0x0004)  
	class UTexture2D*                                  UIBackgroundAbilityIcon;                                    // 0x0050   (0x0008)  
	class UTexture2D*                                  UIAbilityIcon;                                              // 0x0058   (0x0008)  
	float                                              TargetReactionTime;                                         // 0x0060   (0x0004)  
	float                                              TimeDilationDuration;                                       // 0x0064   (0x0004)  
	FTimeDilationData                                  TimeDilationData;                                           // 0x0068   (0x00A8)  
	class UClass*                                      AlternativeSpell;                                           // 0x0110   (0x0008)  
	EThirdPersonSocket                                 AlternativeSocketToTarget;                                  // 0x0118   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0119   (0x0003)  MISSED
	float                                              AlternativeSpellProbability;                                // 0x011C   (0x0004)  
	float                                              MaxMeleeDistance;                                           // 0x0120   (0x0004)  
	int32_t                                            ShotCountBeforeCameraCut;                                   // 0x0124   (0x0004)  
	float                                              CameraCutDelay;                                             // 0x0128   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x012C   (0x0004)  MISSED
	FRuntimeFloatCurve                                 SpreadRadiusVsDistanceCurve;                                // 0x0130   (0x0088)  
	FAISettings_FiringPattern                          FiringPattern;                                              // 0x01B8   (0x0018)  
};

/// Class /Script/Indiana.CartInfoWidget
/// Size: 0x03B0 (944 bytes) (0x000300 - 0x0003B0) align 8 MaxSize: 0x03B0
class UCartInfoWidget : public UIndianaUserWidget
{ 
public:
	class UHorizontalBox*                              HBoxYourCurrency;                                           // 0x0300   (0x0008)  
	class UTextBlockBase*                              YourCurrencyTextBlock;                                      // 0x0308   (0x0008)  
	class UTextBlockBase*                              YourCurrencyValueTextBlock;                                 // 0x0310   (0x0008)  
	class UHorizontalBox*                              HBoxItemValue;                                              // 0x0318   (0x0008)  
	class UTextBlockBase*                              ItemValueTextBlock;                                         // 0x0320   (0x0008)  
	class UHorizontalBox*                              HBoxDivider;                                                // 0x0328   (0x0008)  
	class UHorizontalBox*                              BindingLabelHorizontalBox;                                  // 0x0330   (0x0008)  
	class UHorizontalBox*                              HBoxPostTransaction;                                        // 0x0338   (0x0008)  
	class UTextBlockBase*                              PostTransactionValueTextBlock;                              // 0x0340   (0x0008)  
	class UTextBlockBase*                              ActionValueTextBlock;                                       // 0x0348   (0x0008)  
	class UTextBlockBase*                              ErrorMessage;                                               // 0x0350   (0x0008)  
	class UImage*                                      TotalCurrencyImage;                                         // 0x0358   (0x0008)  
	class UImage*                                      PurchaseCurrencyImage;                                      // 0x0360   (0x0008)  
	class UOverlay*                                    InputLabelRepairOverlay;                                    // 0x0368   (0x0008)  
	class UOverlay*                                    InputLabelTinkerOverlay;                                    // 0x0370   (0x0008)  
	class UOverlay*                                    InputLabelBreakdownOverlay;                                 // 0x0378   (0x0008)  
	class UTexture2D*                                  BitTexture;                                                 // 0x0380   (0x0008)  
	class UTexture2D*                                  WeaponPartTexture;                                          // 0x0388   (0x0008)  
	class UTexture2D*                                  ArmorPartTexture;                                           // 0x0390   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0398   (0x0018)  MISSED
};

/// Class /Script/Indiana.CastSpellEventEffect
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UCastSpellEventEffect : public UEventEffect
{ 
public:
	class UClass*                                      Spell;                                                      // 0x0030   (0x0008)  
};

/// Class /Script/Indiana.CastSpellStatusEffect
/// Size: 0x0198 (408 bytes) (0x000188 - 0x000198) align 8 MaxSize: 0x0198
class UCastSpellStatusEffect : public UStatusEffect
{ 
public:
	class UClass*                                      Spell;                                                      // 0x0188   (0x0008)  
	bool                                               bAddTarget;                                                 // 0x0190   (0x0001)  
	bool                                               bForcePlayerCast;                                           // 0x0191   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0192   (0x0006)  MISSED
};

/// Class /Script/Indiana.StatsSkillButtonEntryBase
/// Size: 0x0470 (1136 bytes) (0x000300 - 0x000470) align 8 MaxSize: 0x0470
class UStatsSkillButtonEntryBase : public UIndianaUserWidget
{ 
public:
	FSlateBrush                                        AvailablePressedBrush;                                      // 0x0300   (0x0088)  
	FSlateBrush                                        UnavailablePressedBrush;                                    // 0x0388   (0x0088)  
	class UImage*                                      IconImage;                                                  // 0x0410   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0418   (0x0008)  
	class UTextBlockBase*                              SkillLevelText;                                             // 0x0420   (0x0008)  
	class UTextBlockBase*                              AdjustedSkillLevelText;                                     // 0x0428   (0x0008)  
	class UTextBlockBase*                              SkillNameText;                                              // 0x0430   (0x0008)  
	class USelectedNotificationWidget*                 NotificationWidget;                                         // 0x0438   (0x0008)  
	bool                                               bIsButtonEnabled;                                           // 0x0440   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2F];                                      // 0x0441   (0x002F)  MISSED


	/// Functions
	// Function /Script/Indiana.StatsSkillButtonEntryBase.UpdateButtonBrush
	// void UpdateButtonBrush();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.CategoryButtonEntryWidget
/// Size: 0x0498 (1176 bytes) (0x000470 - 0x000498) align 8 MaxSize: 0x0498
class UCategoryButtonEntryWidget : public UStatsSkillButtonEntryBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0470   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.CategoryButtonEntryWidget.OnCategoryUnhoveredUnfocused
	// void OnCategoryUnhoveredUnfocused();                                                                                     // [0x17caaf0] Final|Native|Protected 
};

/// Class /Script/Indiana.CauseDamageReticleWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class UCauseDamageReticleWidget : public UIndianaUserWidget
{ 
public:
	bool                                               bUseAnims;                                                  // 0x0300   (0x0001)  
	bool                                               bExclusiveHitVisuals;                                       // 0x0301   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0302   (0x0002)  MISSED
	float                                              ShowHitTime;                                                // 0x0304   (0x0004)  
	float                                              ShowWeakspotTime;                                           // 0x0308   (0x0004)  
	float                                              ShowKillTime;                                               // 0x030C   (0x0004)  
	class UImage*                                      HitCrosshair;                                               // 0x0310   (0x0008)  
	class UImage*                                      WeakspotCrosshair;                                          // 0x0318   (0x0008)  
	class UImage*                                      KillCrosshair;                                              // 0x0320   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0328   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.CauseDamageReticleWidget.ShowWeakAnim
	// void ShowWeakAnim();                                                                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CauseDamageReticleWidget.ShowKillAnim
	// void ShowKillAnim();                                                                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CauseDamageReticleWidget.ShowHitAnim
	// void ShowHitAnim();                                                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CauseDamageReticleWidget.OnCauseDamage
	// void OnCauseDamage(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x17cab10] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.CCAppearancePageWidget
/// Size: 0x0408 (1032 bytes) (0x000300 - 0x000408) align 8 MaxSize: 0x0408
class UCCAppearancePageWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0300   (0x0030)  MISSED
	class UExpandableAreaBase*                         GenderArea;                                                 // 0x0330   (0x0008)  
	class UExpandableAreaBase*                         FaceArea;                                                   // 0x0338   (0x0008)  
	class UExpandableAreaBase*                         HairArea;                                                   // 0x0340   (0x0008)  
	class UExpandableAreaBase*                         FeaturesArea;                                               // 0x0348   (0x0008)  
	class UCCGenderSelectionWidget*                    GenderSelection;                                            // 0x0350   (0x0008)  
	class UCCCharacterCustomizationBaseWdgt*           FacialCustomization;                                        // 0x0358   (0x0008)  
	class UCCCharacterCustomizationBaseWdgt*           HairCustomization;                                          // 0x0360   (0x0008)  
	class UCCCharacterCustomizationBaseWdgt*           FeaturesCustomization;                                      // 0x0368   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0370   (0x0008)  
	class UBorder*                                     CharacterRotationBorder;                                    // 0x0378   (0x0008)  
	FVector2D                                          MouseSensitivity;                                           // 0x0380   (0x0008)  
	FVector2D                                          GamepadSensitivity;                                         // 0x0388   (0x0008)  
	unsigned char                                      UnknownData01_7[0x78];                                      // 0x0390   (0x0078)  MISSED


	/// Functions
	// Function /Script/Indiana.CCAppearancePageWidget.SetCharacterDefaults
	// void SetCharacterDefaults();                                                                                             // [0x17cadc0] Final|Native|Protected 
	// Function /Script/Indiana.CCAppearancePageWidget.RandomizeCharacter
	// void RandomizeCharacter();                                                                                               // [0x17cada0] Final|Native|Protected 
	// Function /Script/Indiana.CCAppearancePageWidget.OnProgressToNextPage
	// void OnProgressToNextPage();                                                                                             // [0x17cad00] Final|Native|Protected 
	// Function /Script/Indiana.CCAppearancePageWidget.OnExpandableAreaChanged
	// void OnExpandableAreaChanged(class UExpandableAreaBase* AreaBaseWidget, bool bIsExpanded);                               // [0x17cabb0] Final|Native|Protected 
	// Function /Script/Indiana.CCAppearancePageWidget.OnBorderMouseDown
	// FEventReply OnBorderMouseDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                          // [0x17ca910] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.CCAptitudeListEntry
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class UCCAptitudeListEntry : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x28];                                      // 0x0300   (0x0028)  MISSED
	class UImage*                                      SelectedPipImage;                                           // 0x0328   (0x0008)  
	class UTextBlockBase*                              AptitudeNameTextBlock;                                      // 0x0330   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0338   (0x0008)  
};

/// Class /Script/Indiana.CCAptitudeListWidget
/// Size: 0x0328 (808 bytes) (0x000300 - 0x000328) align 8 MaxSize: 0x0328
class UCCAptitudeListWidget : public UIndianaUserWidget
{ 
public:
	class UButtonGroup*                                ButtonGroup;                                                // 0x0300   (0x0008)  
	class UScrollBox*                                  DetailContainer;                                            // 0x0308   (0x0008)  
	class UClass*                                      EntryClass;                                                 // 0x0310   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0318   (0x0010)  MISSED
};

/// Class /Script/Indiana.CCAptitudePageWidget
/// Size: 0x0388 (904 bytes) (0x000300 - 0x000388) align 8 MaxSize: 0x0388
class UCCAptitudePageWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x40];                                      // 0x0300   (0x0040)  MISSED
	class UTextBlockBase*                              AptitudeTitle;                                              // 0x0340   (0x0008)  
	class UTextBlockBase*                              AptitudeDescription;                                        // 0x0348   (0x0008)  
	class UTextBlockBase*                              AptitudeBenefits;                                           // 0x0350   (0x0008)  
	class UCCAptitudeListWidget*                       AptitudesList;                                              // 0x0358   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0360   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0368   (0x0020)  MISSED
};

/// Class /Script/Indiana.CCAptitudeSummaryWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UCCAptitudeSummaryWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              AptitudeNameTextBlock;                                      // 0x0300   (0x0008)  
	class UTextBlockBase*                              AptitudeEffectTextBlock;                                    // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0310   (0x0008)  MISSED
};

/// Class /Script/Indiana.CCAttributeSummaryWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UCCAttributeSummaryWidget : public UIndianaUserWidget
{ 
public:
	class UAttributeSliderGroupWidget*                 AttributeSliderGroup1;                                      // 0x0300   (0x0008)  
	class UAttributeSliderGroupWidget*                 AttributeSliderGroup2;                                      // 0x0308   (0x0008)  
	class UAttributeSliderGroupWidget*                 AttributeSliderGroup3;                                      // 0x0310   (0x0008)  
};

/// Struct /Script/Indiana.UIAppearanceData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 MaxSize: 0x0018
struct FUIAppearanceData
{ 
	FName                                              AssetName;                                                  // 0x0000   (0x0008)  
	FLocString                                         CustomizationName;                                          // 0x0008   (0x0008)  
	float                                              StepSize;                                                   // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/Indiana.CCCharacterCustomizationBaseWdgt
/// Size: 0x0398 (920 bytes) (0x000300 - 0x000398) align 8 MaxSize: 0x0398
class UCCCharacterCustomizationBaseWdgt : public UIndianaUserWidget
{ 
public:
	class UVerticalBox*                                EntryContainer;                                             // 0x0300   (0x0008)  
	class UClass*                                      SliderClass;                                                // 0x0308   (0x0008)  
	TArray<FUIAppearanceData>                          AssetData;                                                  // 0x0310   (0x0010)  
	bool                                               bRoundSliderToWhole;                                        // 0x0320   (0x0001)  
	unsigned char                                      UnknownData00_7[0x77];                                      // 0x0321   (0x0077)  MISSED
};

/// Class /Script/Indiana.CCCharacterSummaryPageWidget
/// Size: 0x0460 (1120 bytes) (0x000300 - 0x000460) align 8 MaxSize: 0x0460
class UCCCharacterSummaryPageWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0300   (0x0030)  MISSED
	class UCCAptitudeSummaryWidget*                    AptitudeSummary;                                            // 0x0330   (0x0008)  
	class UCCAttributeSummaryWidget*                   AttributeSummary;                                           // 0x0338   (0x0008)  
	class UCCSkillsSummaryListWidget*                  SkillSummary;                                               // 0x0340   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0348   (0x0008)  
	class UCharacterSkillsDescriptionPanel*            DescriptionPanel;                                           // 0x0350   (0x0008)  
	float                                              GamepadScrollMultiplier;                                    // 0x0358   (0x0004)  
	unsigned char                                      UnknownData01_7[0x104];                                     // 0x035C   (0x0104)  MISSED
};

/// Struct /Script/Indiana.BoneModificationUIWrapper
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FBoneModificationUIWrapper
{ 
	class UBoneModifications*                          Modification;                                               // 0x0000   (0x0008)  
	bool                                               bRequiredInverseValue;                                      // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Indiana.CCFacialCustomizationWidget
/// Size: 0x03F8 (1016 bytes) (0x000398 - 0x0003F8) align 8 MaxSize: 0x03F8
class UCCFacialCustomizationWidget : public UCCCharacterCustomizationBaseWdgt
{ 
public:
	TArray<class UBoneModifications*>                  BoneModifications;                                          // 0x0398   (0x0010)  
	TMap<class UBoneModifications*, FBoneModificationUIWrapper> BoneMappings;                                      // 0x03A8   (0x0050)  
};

/// Class /Script/Indiana.CCFeaturesCustomizationWidget
/// Size: 0x0398 (920 bytes) (0x000398 - 0x000398) align 8 MaxSize: 0x0398
class UCCFeaturesCustomizationWidget : public UCCCharacterCustomizationBaseWdgt
{ 
public:
};

/// Class /Script/Indiana.CCGenderSelectionWidget
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class UCCGenderSelectionWidget : public UIndianaUserWidget
{ 
public:
	class UOptionPresenterWidget*                      GenderSelector;                                             // 0x0300   (0x0008)  
	class UButtonBase*                                 GamepadButton;                                              // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x0310   (0x0030)  MISSED
};

/// Class /Script/Indiana.CCNameSelectionWidget
/// Size: 0x0350 (848 bytes) (0x000300 - 0x000350) align 8 MaxSize: 0x0350
class UCCNameSelectionWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0300   (0x0030)  MISSED
	class UTextEntryWidget*                            TextEntry;                                                  // 0x0330   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0338   (0x0008)  
	class UButtonBase*                                 InvisibleButton;                                            // 0x0340   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0348   (0x0008)  MISSED
};

/// Class /Script/Indiana.CCPerksPageWidget
/// Size: 0x0478 (1144 bytes) (0x000300 - 0x000478) align 8 MaxSize: 0x0478
class UCCPerksPageWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0300   (0x0030)  MISSED
	class UPerkReadoutWidget*                          PerkReadout;                                                // 0x0330   (0x0008)  
	class UPerksListWidget*                            MilitaryPerks;                                              // 0x0338   (0x0008)  
	class UPerksListWidget*                            AdventurerPerks;                                            // 0x0340   (0x0008)  
	class UPerksListWidget*                            LeadershipPerks;                                            // 0x0348   (0x0008)  
	class UButtonBase*                                 PreviousStepButton;                                         // 0x0350   (0x0008)  
	class UButtonBase*                                 NextStepButton;                                             // 0x0358   (0x0008)  
	unsigned char                                      UnknownData01_7[0x118];                                     // 0x0360   (0x0118)  MISSED
};

/// Struct /Script/Indiana.SkillCategoryDetail
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FSkillCategoryDetail
{ 
	ESkillCategory                                     Category;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  Icon;                                                       // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0010   (0x0020)  MISSED
	TArray<ESkill>                                     AssociatedSkills;                                           // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.CharacterSkillsBasePage
/// Size: 0x0430 (1072 bytes) (0x000300 - 0x000430) align 8 MaxSize: 0x0430
class UCharacterSkillsBasePage : public UIndianaUserWidget
{ 
public:
	TArray<FSkillCategoryDetail>                       CategoryInformation;                                        // 0x0300   (0x0010)  
	class UClass*                                      SkillGroupClass;                                            // 0x0310   (0x0008)  
	class UScrollBox*                                  SkillGroupScrollBox;                                        // 0x0318   (0x0008)  
	class UTextBlockBase*                              SkillPointsRemainingTextBlock;                              // 0x0320   (0x0008)  
	class UCharacterSkillsDescriptionPanel*            DescriptionPanel;                                           // 0x0328   (0x0008)  
	unsigned char                                      UnknownData00_7[0x100];                                     // 0x0330   (0x0100)  MISSED
};

/// Class /Script/Indiana.CCSkillsPageWidget
/// Size: 0x04B0 (1200 bytes) (0x000430 - 0x0004B0) align 8 MaxSize: 0x04B0
class UCCSkillsPageWidget : public UCharacterSkillsBasePage
{ 
public:
	unsigned char                                      UnknownData00_8[0x40];                                      // 0x0430   (0x0040)  MISSED
	float                                              GamepadScrollMultiplier;                                    // 0x0470   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0474   (0x0004)  MISSED
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0478   (0x0008)  
	class UImage*                                      ScrollIndicator;                                            // 0x0480   (0x0008)  
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x0488   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.CCSkillsPageWidget.OnUserScrolled
	// void OnUserScrolled(float ScrollAmount);                                                                                 // [0x17cad20] Final|Native|Protected 
};

/// Class /Script/Indiana.CCSkillsSummaryCategoryWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UCCSkillsSummaryCategoryWidget : public UIndianaUserWidget
{ 
public:
	class UVerticalBox*                                SkillContainer;                                             // 0x0300   (0x0008)  
	class UClass*                                      SkillClass;                                                 // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0310   (0x0008)  MISSED
};

/// Class /Script/Indiana.CCSkillsSummaryListWidget
/// Size: 0x0310 (784 bytes) (0x000300 - 0x000310) align 8 MaxSize: 0x0310
class UCCSkillsSummaryListWidget : public UIndianaUserWidget
{ 
public:
	class UVerticalBox*                                GroupContainer;                                             // 0x0300   (0x0008)  
	class UClass*                                      CategoryClass;                                              // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.CCSkillSummaryDetailWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class UCCSkillSummaryDetailWidget : public UIndianaUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0300   (0x0008)  
	class UTextBlockBase*                              SkillNameTextBlock;                                         // 0x0308   (0x0008)  
	class UTextBlockBase*                              SkillValueTextBlock;                                        // 0x0310   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0318   (0x0008)  MISSED
};

/// Class /Script/Indiana.CCSkillSummaryWidget
/// Size: 0x0308 (776 bytes) (0x000300 - 0x000308) align 8 MaxSize: 0x0308
class UCCSkillSummaryWidget : public UIndianaUserWidget
{ 
public:
	class UCCSkillsSummaryListWidget*                  SkillsList;                                                 // 0x0300   (0x0008)  
};

/// Class /Script/Indiana.Chair
/// Size: 0x0300 (768 bytes) (0x0002C8 - 0x000300) align 8 MaxSize: 0x0300
class AChair : public AFurnitureActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x02C8   (0x0010)  MISSED
	class UInteractableComponent*                      InteractableComponent;                                      // 0x02D8   (0x0008)  
	class UClass*                                      WaitSpell;                                                  // 0x02E0   (0x0008)  
	float                                              CameraFadeDuration;                                         // 0x02E8   (0x0004)  
	int32_t                                            MinHours;                                                   // 0x02EC   (0x0004)  
	int32_t                                            MaxHours;                                                   // 0x02F0   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x02F4   (0x000C)  MISSED
};

/// Class /Script/Indiana.CharacterCreationData
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UCharacterCreationData : public UDataAsset
{ 
public:
	TArray<class UClass*>                              Aptitudes;                                                  // 0x0038   (0x0010)  
	int32_t                                            NumStartingAttributePoints;                                 // 0x0048   (0x0004)  
	int32_t                                            NumStartingSkillCategories;                                 // 0x004C   (0x0004)  
	int32_t                                            NumSkillSpecializationPoints;                               // 0x0050   (0x0004)  
	int32_t                                            NumStartingPerks;                                           // 0x0054   (0x0004)  
};

/// Class /Script/Indiana.CharacterCreationMasterWidget
/// Size: 0x0420 (1056 bytes) (0x000308 - 0x000420) align 8 MaxSize: 0x0420
class UCharacterCreationMasterWidget : public UIndianaInterfaceUserWidget
{ 
public:
	SDK_UNDEFINED(16,394) /* FMulticastInlineDelegate */ __um(OnPageChange);                                       // 0x0308   (0x0010)  
	SDK_UNDEFINED(16,395) /* FMulticastInlineDelegate */ __um(OnNewSkillCategorySelected);                         // 0x0318   (0x0010)  
	SDK_UNDEFINED(16,396) /* FMulticastInlineDelegate */ __um(OnNewAptitudeSelected);                              // 0x0328   (0x0010)  
	SDK_UNDEFINED(16,397) /* FMulticastInlineDelegate */ __um(OnAttributeChanged);                                 // 0x0338   (0x0010)  
	class UScrollBox*                                  PageScrollBox;                                              // 0x0348   (0x0008)  
	class UButtonGroup*                                PageButtonGroup;                                            // 0x0350   (0x0008)  
	class UScrollingWidgetGroup*                       ScrollingWidgetGroup;                                       // 0x0358   (0x0008)  
	class UAttributeSliderPageWidget*                  AttributeSliderPage;                                        // 0x0360   (0x0008)  
	class UCCSkillsPageWidget*                         SkillPage;                                                  // 0x0368   (0x0008)  
	class UCCAptitudePageWidget*                       AptitudePage;                                               // 0x0370   (0x0008)  
	class UCCCharacterSummaryPageWidget*               SummaryPage;                                                // 0x0378   (0x0008)  
	class UCCAppearancePageWidget*                     AppearancePage;                                             // 0x0380   (0x0008)  
	class UCCNameSelectionWidget*                      NamePage;                                                   // 0x0388   (0x0008)  
	class UOverlay*                                    ContentContainer;                                           // 0x0390   (0x0008)  
	class UNavigationGroupWidget*                      NavigationBar;                                              // 0x0398   (0x0008)  
	class UOverlay*                                    FramingOverlay;                                             // 0x03A0   (0x0008)  
	class UTextBlockBase*                              PlayerNameTextBlock;                                        // 0x03A8   (0x0008)  
	class UWidget*                                     BackgroundEffect;                                           // 0x03B0   (0x0008)  
	class UDataTable*                                  BannedNames;                                                // 0x03B8   (0x0008)  
	FSoftObjectPath                                    NewGameLevel;                                               // 0x03C0   (0x0018)  
	FSoftObjectPath                                    MainMenuLevel;                                              // 0x03D8   (0x0018)  
	class UFileMediaSource*                            IntroMovie;                                                 // 0x03F0   (0x0008)  
	class UFileMediaSource*                            OutroMoviePartOne;                                          // 0x03F8   (0x0008)  
	class UFileMediaSource*                            OutroMoviePartTwo;                                          // 0x0400   (0x0008)  
	class UFileMediaSource*                            IntroMovieXSX;                                              // 0x0408   (0x0008)  
	class UFileMediaSource*                            OutroMoviePartOneXSX;                                       // 0x0410   (0x0008)  
	class UFileMediaSource*                            OutroMoviePartTwoXSX;                                       // 0x0418   (0x0008)  


	/// Functions
	// Function /Script/Indiana.CharacterCreationMasterWidget.PlayPartTwoOutroMovie
	// void PlayPartTwoOutroMovie(bool bWasSkipped);                                                                            // [0x17ceeb0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnPageBack
	// void OnPageBack();                                                                                                       // [0x17ceb80] Final|Native|Protected 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnOutroMovieTwoComplete
	// void OnOutroMovieTwoComplete(bool bWasSkipped);                                                                          // [0x17ceaf0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnOutroMovieStarted
	// void OnOutroMovieStarted();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnOutroMoviePartTwoComplete
	// void OnOutroMoviePartTwoComplete(bool bWasSkipped);                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnOutroMoviePartOneComplete
	// void OnOutroMoviePartOneComplete(bool bWasSkipped);                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnIntroMovieCompleteImpl
	// void OnIntroMovieCompleteImpl(bool bWasSkipped);                                                                         // [0x17ce990] Final|Native|Protected 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnIntroMovieComplete
	// void OnIntroMovieComplete(bool bWasSkipped);                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnIntroAnimSequenceComplete
	// void OnIntroAnimSequenceComplete();                                                                                      // [0x17ce970] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnFadeOutContents
	// void OnFadeOutContents();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnFadeInContents
	// void OnFadeInContents();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnCharacterCreationUIStart
	// void OnCharacterCreationUIStart();                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Struct /Script/Indiana.DeathClassRow
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FDeathClassRow
{ 
	class UClass*                                      DeathClass;                                                 // 0x0000   (0x0008)  
	class UDeathBodyTypeParticleSystems*               ParticleSystemData;                                         // 0x0008   (0x0008)  
	class UDeathBodyTypeAudioEvents*                   AudioEventData;                                             // 0x0010   (0x0008)  
	bool                                               bExagerateVerticalImpulse;                                  // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              ExageratedStrength;                                         // 0x001C   (0x0004)  
};

/// Class /Script/Indiana.DeathClass
/// Size: 0x0120 (288 bytes) (0x000030 - 0x000120) align 8 MaxSize: 0x0120
class UDeathClass : public UObject
{ 
public:
	FLinearColor                                       RevealEmissiveColor;                                        // 0x0030   (0x0010)  
	float                                              FadeOut;                                                    // 0x0040   (0x0004)  
	float                                              LeadingEdgeBlend;                                           // 0x0044   (0x0004)  
	float                                              RevealAmount;                                               // 0x0048   (0x0004)  
	float                                              EmissiveLevel;                                              // 0x004C   (0x0004)  
	float                                              LeadingEdgeAmount;                                          // 0x0050   (0x0004)  
	float                                              RevealEdgeTightness;                                        // 0x0054   (0x0004)  
	float                                              EmissiveBaseValue;                                          // 0x0058   (0x0004)  
	EDeathType                                         DeathType;                                                  // 0x005C   (0x0001)  
	bool                                               bHideWeapon;                                                // 0x005D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x005E   (0x0002)  MISSED
	class UTexture*                                    Reveal_RMEA;                                                // 0x0060   (0x0008)  
	class UTexture*                                    Reveal_Normal;                                              // 0x0068   (0x0008)  
	class UTexture*                                    Reveal_Base_Color;                                          // 0x0070   (0x0008)  
	TArray<class UMaterialInstanceDynamic*>            MIDs;                                                       // 0x0078   (0x0010)  
	class UCharacterDeathComponent*                    DeathComponent;                                             // 0x0088   (0x0008)  
	class AActor*                                      OwningActor;                                                // 0x0090   (0x0008)  
	class USkeletalMeshComponent*                      SkeletalMesh;                                               // 0x0098   (0x0008)  
	FGameplayTag                                       BodyType;                                                   // 0x00A0   (0x0008)  
	FGameplayTag                                       BodyPartHit;                                                // 0x00A8   (0x0008)  
	FDeathClassRow                                     DeathClassRow;                                              // 0x00B0   (0x0020)  
	FVector                                            ImpactLocation;                                             // 0x00D0   (0x000C)  
	FVector                                            ImpactDirection;                                            // 0x00DC   (0x000C)  
	FName                                              BoneHit;                                                    // 0x00E8   (0x0008)  
	FName                                              BreakBoneName;                                              // 0x00F0   (0x0008)  
	FName                                              BreakAttachedSocket;                                        // 0x00F8   (0x0008)  
	FName                                              BreakDetachedSocket;                                        // 0x0100   (0x0008)  
	bool                                               bTransitionStarted;                                         // 0x0108   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0109   (0x0003)  MISSED
	float                                              TransitionTimePrimary;                                      // 0x010C   (0x0004)  
	float                                              TransitionTimeSecondary;                                    // 0x0110   (0x0004)  
	float                                              TransitionRevealAmount;                                     // 0x0114   (0x0004)  
	float                                              TransitionEmissiveLevel;                                    // 0x0118   (0x0004)  
	float                                              TransitionCompletionDelay;                                  // 0x011C   (0x0004)  


	/// Functions
	// Function /Script/Indiana.DeathClass.Tick
	// void Tick(float Delta);                                                                                                  // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DeathClass.FindAudioEvent
	// class UAkAudioEvent* FindAudioEvent(FGameplayTag& DeathAudioEvent);                                                      // [0x17ce620] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.DeathClass.FindAndPostAudioEvent
	// void FindAndPostAudioEvent(FGameplayTag& DeathAudioEvent);                                                               // [0x17ce590] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.DeathClass.ExecuteOnReload
	// void ExecuteOnReload(class UCharacterDeathComponent* InDeathComponent);                                                  // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DeathClass.Execute
	// void Execute(class UCharacterDeathComponent* InDeathComponent);                                                          // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.DeathComponent
/// Size: 0x00F8 (248 bytes) (0x0000E0 - 0x0000F8) align 8 MaxSize: 0x00F8
class UDeathComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,398) /* FMulticastInlineDelegate */ __um(OnDeathComplete);                                    // 0x00E0   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x00F0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.DeathComponent.DeathComplete
	// void DeathComplete();                                                                                                    // [0x17f9560] Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.CharacterDeathDamageInfo
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 MaxSize: 0x0070
struct FCharacterDeathDamageInfo
{ 
	class UClass*                                      DmgType;                                                    // 0x0000   (0x0008)  
	FGameplayTag                                       WeaponCategory;                                             // 0x0008   (0x0008)  
	bool                                               bCalledShot;                                                // 0x0010   (0x0001)  
	bool                                               bCritical;                                                  // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0012   (0x0002)  MISSED
	float                                              ImpulseOverride;                                            // 0x0014   (0x0004)  
	FGameplayTag                                       BodyPartHit;                                                // 0x0018   (0x0008)  
	FName                                              BoneHit;                                                    // 0x0020   (0x0008)  
	FVector                                            ImpactLocation;                                             // 0x0028   (0x000C)  
	FVector                                            ImpactDirection;                                            // 0x0034   (0x000C)  
	FName                                              BreakBoneHit;                                               // 0x0040   (0x0008)  
	FName                                              BreakAttachedSocket;                                        // 0x0048   (0x0008)  
	FName                                              BreakDetachedSocket;                                        // 0x0050   (0x0008)  
	bool                                               bIsGibbing;                                                 // 0x0058   (0x0001)  
	bool                                               bAllBonesBroken;                                            // 0x0059   (0x0001)  
	bool                                               bBreakBoneRemoved;                                          // 0x005A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x005B   (0x0005)  MISSED
	TArray<FDeathClassOverride>                        DeathClassOverrides;                                        // 0x0060   (0x0010)  
};

/// Class /Script/Indiana.CharacterDeathComponent
/// Size: 0x02B8 (696 bytes) (0x0000F8 - 0x0002B8) align 8 MaxSize: 0x02B8
class UCharacterDeathComponent : public UDeathComponent
{ 
public:
	FCharacterDeathDamageInfo                          DeathDamageInfo;                                            // 0x00F8   (0x0070)  
	bool                                               bAutoHideWeaponOnDeath;                                     // 0x0168   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0169   (0x0007)  MISSED
	TMap<class UClass*, class UClass*>                 DeathClassOverrideByDamageType;                             // 0x0170   (0x0050)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x01C0   (0x0008)  MISSED
	class UDeathClass*                                 DeathClass;                                                 // 0x01C8   (0x0008)  
	class UClass*                                      DeathClassOverride;                                         // 0x01D0   (0x0008)  
	class UDeathClassData*                             DeathClassData;                                             // 0x01D8   (0x0008)  
	bool                                               bApplyDeathMaterials;                                       // 0x01E0   (0x0001)  
	unsigned char                                      UnknownData02_6[0xF];                                       // 0x01E1   (0x000F)  MISSED
	class UCharacterDeathImpulse*                      DeathImpulse;                                               // 0x01F0   (0x0008)  
	class USkeletalMeshComponent*                      OwnerMesh;                                                  // 0x01F8   (0x0008)  
	class UAppearanceComponent*                        AppearanceComponent;                                        // 0x0200   (0x0008)  
	unsigned char                                      UnknownData03_6[0x30];                                      // 0x0208   (0x0030)  MISSED
	class UClass*                                      ChosenDeathUClass;                                          // 0x0238   (0x0008)  
	unsigned char                                      UnknownData04_7[0x78];                                      // 0x0240   (0x0078)  MISSED


	/// Functions
	// Function /Script/Indiana.CharacterDeathComponent.StoreDeathImpact
	// void StoreDeathImpact(FVector Impulse, FVector Location, FName BoneName);                                                // [0x17cf130] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.SpawnAshPile
	// class UMaterialInstanceDynamic* SpawnAshPile(class UStaticMesh* Mesh, class UMaterialInterface* LootablePileMaterial);   // [0x17cf060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.RagdollCharacter
	// void RagdollCharacter(bool bIgnoreDeathMontages);                                                                        // [0x17cef40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.OnMontageEnded
	// void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);                                                     // [0x17cea20] Final|Native|Protected 
	// Function /Script/Indiana.CharacterDeathComponent.HideProps
	// void HideProps();                                                                                                        // [0x17ce880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.HideAppearanceMeshes
	// void HideAppearanceMeshes();                                                                                             // [0x17ce860] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.GibCharacter
	// void GibCharacter();                                                                                                     // [0x17ce840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.DetachImpactFx
	// void DetachImpactFx();                                                                                                   // [0x17ce570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.CalcImpactVector
	// FVector CalcImpactVector();                                                                                              // [0x17ce530] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.BreakBone
	// void BreakBone();                                                                                                        // [0x17ce510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.BreakAllBones
	// void BreakAllBones();                                                                                                    // [0x17ce4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.AttachGoreCaps
	// void AttachGoreCaps();                                                                                                   // [0x17ce4d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.AttachAllGoreCaps
	// void AttachAllGoreCaps();                                                                                                // [0x17ce4b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterDeathImpulse
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UCharacterDeathImpulse : public UDataAsset
{ 
public:
	float                                              Magnitude;                                                  // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.CharacterDeathDataRow
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FCharacterDeathDataRow
{ 
	class UClass*                                      DmgType;                                                    // 0x0000   (0x0008)  
	FGameplayTag                                       WeaponCategory;                                             // 0x0008   (0x0008)  
	ECharacterDeathTriBool                             CalledShot;                                                 // 0x0010   (0x0001)  
	ECharacterDeathTriBool                             CriticalHit;                                                // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0012   (0x0002)  MISSED
	int32_t                                            Priority;                                                   // 0x0014   (0x0004)  
	class UCharacterDeathImpulse*                      Impulse;                                                    // 0x0018   (0x0008)  
	float                                              EffectChance;                                               // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UClass*                                      DeathClass;                                                 // 0x0028   (0x0008)  
};

/// Class /Script/Indiana.CharacterDeathData
/// Size: 0x0068 (104 bytes) (0x000038 - 0x000068) align 8 MaxSize: 0x0068
class UCharacterDeathData : public UDataAsset
{ 
public:
	TArray<FCharacterDeathDataRow>                     DeathData;                                                  // 0x0038   (0x0010)  
	class UClass*                                      DefaultDeathClass;                                          // 0x0048   (0x0008)  
	class UCharacterDeathImpulse*                      DefaultImpulse;                                             // 0x0050   (0x0008)  
	int32_t                                            PriorityRange;                                              // 0x0058   (0x0004)  
	FGameplayTag                                       AshPileCreatureType;                                        // 0x005C   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Indiana.CharacterDerivedStatsWidget
/// Size: 0x0378 (888 bytes) (0x000300 - 0x000378) align 8 MaxSize: 0x0378
class UCharacterDerivedStatsWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UDerivedStatWidget*                          Level;                                                      // 0x0310   (0x0008)  
	class UDerivedStatWidget*                          CurrentExperience;                                          // 0x0318   (0x0008)  
	class UDerivedStatWidget*                          ExperienceNeededToLevel;                                    // 0x0320   (0x0008)  
	class UDerivedStatWidget*                          CurrentHealth;                                              // 0x0328   (0x0008)  
	class UDerivedStatWidget*                          HealthRegen;                                                // 0x0330   (0x0008)  
	class UDerivedStatWidget*                          HeadArmor;                                                  // 0x0338   (0x0008)  
	class UDerivedStatWidget*                          BodyArmor;                                                  // 0x0340   (0x0008)  
	class UDerivedStatWidget*                          SprintSpeed;                                                // 0x0348   (0x0008)  
	class UDerivedStatWidget*                          CrouchSpeed;                                                // 0x0350   (0x0008)  
	class UDerivedStatWidget*                          TacticalTimeDilation;                                       // 0x0358   (0x0008)  
	class UDerivedStatWidget*                          MerchantSkill;                                              // 0x0360   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0368   (0x0010)  MISSED
};

/// Class /Script/Indiana.LedgerDescriptionPanel
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class ULedgerDescriptionPanel : public UIndianaUserWidget
{ 
public:
	class UScrollBox*                                  DetailsScrollBox;                                           // 0x0300   (0x0008)  
	class UTextBlockBase*                              HeaderText;                                                 // 0x0308   (0x0008)  
	class UTextBlockBase*                              HeaderBodyText;                                             // 0x0310   (0x0008)  
	class UTextBlockBase*                              MinorHeaderBodyText;                                        // 0x0318   (0x0008)  
};

/// Class /Script/Indiana.CharacterDescriptionPanel
/// Size: 0x0368 (872 bytes) (0x000320 - 0x000368) align 8 MaxSize: 0x0368
class UCharacterDescriptionPanel : public ULedgerDescriptionPanel
{ 
public:
	class UVerticalBox*                                PrimaryAdjustmentsVerticalBox;                              // 0x0320   (0x0008)  
	class UVerticalBox*                                SecondaryAdjustmentsVerticalBox;                            // 0x0328   (0x0008)  
	class UTextBlockBase*                              AdjustedSkillValueText;                                     // 0x0330   (0x0008)  
	class UTextBlockBase*                              AdjustedSkillDescText;                                      // 0x0338   (0x0008)  
	class USizeBox*                                    HeaderBodySizeBox;                                          // 0x0340   (0x0008)  
	class UHorizontalBox*                              BelowAverageWarningContainer;                               // 0x0348   (0x0008)  
	class UTextBlockBase*                              AttributeEffectTextBlock;                                   // 0x0350   (0x0008)  
	class UClass*                                      AdjustmentClass;                                            // 0x0358   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0360   (0x0008)  MISSED
};

/// Class /Script/Indiana.CharacterDetailsWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class UCharacterDetailsWidget : public UIndianaUserWidget
{ 
public:
	class UCharacterDerivedStatsWidget*                DerivedStats;                                               // 0x0300   (0x0008)  
	class UCharacterStatusEffectsWidget*               StatusEffects;                                              // 0x0308   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0310   (0x0008)  
	class UStatsFlawSummaryWidget*                     FlawSummary;                                                // 0x0318   (0x0008)  
	class UCharacterDescriptionPanel*                  DescriptionPanel;                                           // 0x0320   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0328   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0330   (0x0008)  MISSED
};

/// Struct /Script/Indiana.GameDataReferenceID
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FGameDataReferenceID
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FGuid                                              ID;                                                         // 0x0008   (0x0010)  
};

/// Struct /Script/Indiana.SpeakerGameDataReferenceID
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align 8 MaxSize: 0x0018
struct FSpeakerGameDataReferenceID : FGameDataReferenceID
{ 
};

/// Struct /Script/Indiana.ScannerAbility
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FScannerAbility
{ 
	FString                                            AbilityName;                                                // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.RangedStatModifierDescription
/// Size: 0x00B0 (176 bytes) (0x000010 - 0x0000B0) align 8 MaxSize: 0x00B0
struct FRangedStatModifierDescription : FStatModifierDescriptionBase
{ 
	bool                                               bUseCurve;                                                  // 0x0010   (0x0001)  
	bool                                               bNormalizeCurveValue;                                       // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0012   (0x0006)  MISSED
	FRuntimeFloatCurve                                 RangedCurve;                                                // 0x0018   (0x0088)  
	float                                              MinRpgStatValue;                                            // 0x00A0   (0x0004)  
	float                                              MaxRpgStatValue;                                            // 0x00A4   (0x0004)  
	bool                                               bRequiresDLC;                                               // 0x00A8   (0x0001)  
	bool                                               bRequiresMinSkill;                                          // 0x00A9   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x00AA   (0x0002)  MISSED
	int32_t                                            MinSkill;                                                   // 0x00AC   (0x0004)  
};

/// Struct /Script/Indiana.PerkSubclassArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FPerkSubclassArray
{ 
	TArray<class UClass*>                              Perks;                                                      // 0x0000   (0x0010)  
};

/// Class /Script/Indiana.CharacterInfoComponent
/// Size: 0x03A0 (928 bytes) (0x0000E0 - 0x0003A0) align 8 MaxSize: 0x03A0
class UCharacterInfoComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0xB0];                                      // 0x00E0   (0x00B0)  MISSED
	FLocString                                         Name;                                                       // 0x0190   (0x0008)  
	EGender                                            Gender;                                                     // 0x0198   (0x0001)  
	ECreatureXPType                                    CreatureXPType;                                             // 0x0199   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x019A   (0x0006)  MISSED
	FSpeakerGameDataReferenceID                        Reference;                                                  // 0x01A0   (0x0018)  
	bool                                               bOverrideSpeakerName;                                       // 0x01B8   (0x0001)  
	bool                                               bAddToScriptManager;                                        // 0x01B9   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x01BA   (0x0006)  MISSED
	TArray<FScannerAbility>                            ScannerAbilities;                                           // 0x01C0   (0x0010)  
	FLocString                                         ScannerAnalysisString;                                      // 0x01D0   (0x0008)  
	class UScannerFlavorTextData*                      FlavorTextAsset;                                            // 0x01D8   (0x0008)  
	FLocString                                         FlavorTextString;                                           // 0x01E0   (0x0008)  
	int32_t                                            MinLevel;                                                   // 0x01E8   (0x0004)  
	int32_t                                            MaxLevel;                                                   // 0x01EC   (0x0004)  
	int32_t                                            LevelOffset;                                                // 0x01F0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x01F4   (0x0004)  MISSED
	TArray<FRangedStatModifierDescription>             RangedLevelStatModifiers;                                   // 0x01F8   (0x0010)  
	int32_t                                            InherentAttributeValues[9];                                 // 0x0208   (0x0024)  
	int32_t                                            InherentSkillValues[18];                                    // 0x022C   (0x0048)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0274   (0x0004)  MISSED
	class UPerkTree*                                   PerkTree;                                                   // 0x0278   (0x0008)  
	TArray<class UClass*>                              PostLoadPerks;                                              // 0x0280   (0x0010)  
	int32_t                                            LevelsPerPerk;                                              // 0x0290   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4C];                                      // 0x0294   (0x004C)  MISSED
	TMap<int32_t, FPerkSubclassArray>                  Perks;                                                      // 0x02E0   (0x0050)  
	TMap<int32_t, FPerkSubclassArray>                  PerkTransactions;                                           // 0x0330   (0x0050)  
	unsigned char                                      UnknownData06_7[0x20];                                      // 0x0380   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.CharacterInfoComponent.UnlockPerksWithRandomLevels_Debug
	// void UnlockPerksWithRandomLevels_Debug();                                                                                // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.CharacterInfoComponent.SetLevel
	// void SetLevel(int32_t NewLevel);                                                                                         // [0x17cefd0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterInfoComponent.PerkRemove
	// void PerkRemove(FString PerkName);                                                                                       // [0x17cee00] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.PerkPurchase
	// void PerkPurchase(FString PerkName);                                                                                     // [0x17ced50] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.PerkPointsAdd
	// void PerkPointsAdd(int32_t Value);                                                                                       // [0x17cecc0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.OnWeaponEndUnequip
	// void OnWeaponEndUnequip(class UWeapon* Weapon);                                                                          // [0x17cec30] Final|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.OnWeaponEndEquip
	// void OnWeaponEndEquip(class UWeapon* Weapon);                                                                            // [0x17cec30] Final|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x17ceba0] Final|Native|Public  
	// Function /Script/Indiana.CharacterInfoComponent.OnCompanionRegistered
	// void OnCompanionRegistered(class AIndianaAiCharacter* Companion, bool bRegister);                                        // [0x17ce8a0] Final|Native|Public  
	// Function /Script/Indiana.CharacterInfoComponent.GetName
	// FString GetName();                                                                                                       // [0x17ce800] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetLevelScaledByWorld
	// int32_t GetLevelScaledByWorld();                                                                                         // [0x17ce7d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetLevelScaledAtLocation
	// int32_t GetLevelScaledAtLocation(FVector& Location);                                                                     // [0x17ce730] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetLevel
	// int32_t GetLevel();                                                                                                      // [0x17ce710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetGender
	// EGender GetGender();                                                                                                     // [0x17ce6e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetCreatureXPType
	// ECreatureXPType GetCreatureXPType();                                                                                     // [0x17ce6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.BaseItemDefinition
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FBaseItemDefinition
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	bool                                               bPristine;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Struct /Script/Indiana.DegradableItemDefinition
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align 8 MaxSize: 0x0018
struct FDegradableItemDefinition : FBaseItemDefinition
{ 
	float                                              Condition;                                                  // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Indiana.WeaponItemDefinition
/// Size: 0x0058 (88 bytes) (0x000018 - 0x000058) align 8 MaxSize: 0x0058
struct FWeaponItemDefinition : FDegradableItemDefinition
{ 
	class UClass*                                      WeaponClass;                                                // 0x0018   (0x0008)  
	class UClass*                                      AmmoClass;                                                  // 0x0020   (0x0008)  
	class UClass*                                      AmmoConsumableClass;                                        // 0x0028   (0x0008)  
	int32_t                                            AmmoPoolSize;                                               // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<class UClass*>                              EquippedMods;                                               // 0x0038   (0x0010)  
	bool                                               bGenerateRandomMicroMod;                                    // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0049   (0x0007)  MISSED
	class UClass*                                      EquippedMicroMod;                                           // 0x0050   (0x0008)  
};

/// Struct /Script/Indiana.ArmorItemDefinition
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align 8 MaxSize: 0x0018
struct FArmorItemDefinition : FDegradableItemDefinition
{ 
};

/// Struct /Script/Indiana.ArmorSetItemDefinition
/// Size: 0x0050 (80 bytes) (0x000018 - 0x000050) align 8 MaxSize: 0x0050
struct FArmorSetItemDefinition : FArmorItemDefinition
{ 
	class UClass*                                      ArmorSetClass;                                              // 0x0018   (0x0008)  
	class UClass*                                      ArmoringModClass;                                           // 0x0020   (0x0008)  
	class UClass*                                      UtilityModClass;                                            // 0x0028   (0x0008)  
	class UClass*                                      ResistanceModClass;                                         // 0x0030   (0x0008)  
	class UClass*                                      DampeningModClass;                                          // 0x0038   (0x0008)  
	bool                                               bGenerateRandomMicroMod;                                    // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
	class UClass*                                      EquippedMicroMod;                                           // 0x0048   (0x0008)  
};

/// Struct /Script/Indiana.AmmoItemDefinition
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align 8 MaxSize: 0x0018
struct FAmmoItemDefinition : FBaseItemDefinition
{ 
	class UClass*                                      AmmoClass;                                                  // 0x0010   (0x0008)  
};

/// Struct /Script/Indiana.CurrencyItmDefinition
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align 8 MaxSize: 0x0018
struct FCurrencyItmDefinition : FBaseItemDefinition
{ 
	class UClass*                                      CurrencyItemClass;                                          // 0x0010   (0x0008)  
};

/// Struct /Script/Indiana.ResourceItmDefinition
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align 8 MaxSize: 0x0018
struct FResourceItmDefinition : FBaseItemDefinition
{ 
	class UClass*                                      ResourceItemClass;                                          // 0x0010   (0x0008)  
};

/// Struct /Script/Indiana.QuestItmDefinition
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align 8 MaxSize: 0x0018
struct FQuestItmDefinition : FBaseItemDefinition
{ 
	class UClass*                                      QuestItemClass;                                             // 0x0010   (0x0008)  
};

/// Struct /Script/Indiana.WeaponModItemDefinition
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align 8 MaxSize: 0x0018
struct FWeaponModItemDefinition : FBaseItemDefinition
{ 
	class UClass*                                      WeaponModClass;                                             // 0x0010   (0x0008)  
};

/// Struct /Script/Indiana.HelmetItemDefinition
/// Size: 0x0020 (32 bytes) (0x000018 - 0x000020) align 8 MaxSize: 0x0020
struct FHelmetItemDefinition : FArmorItemDefinition
{ 
	class UClass*                                      HelmetClass;                                                // 0x0018   (0x0008)  
};

/// Struct /Script/Indiana.ArmorModArmoringItemDefinition
/// Size: 0x0020 (32 bytes) (0x000018 - 0x000020) align 8 MaxSize: 0x0020
struct FArmorModArmoringItemDefinition : FArmorItemDefinition
{ 
	class UClass*                                      ArmoringModClass;                                           // 0x0018   (0x0008)  
};

/// Struct /Script/Indiana.ArmorModUtilityItemDefinition
/// Size: 0x0020 (32 bytes) (0x000018 - 0x000020) align 8 MaxSize: 0x0020
struct FArmorModUtilityItemDefinition : FArmorItemDefinition
{ 
	class UClass*                                      UtilityModClass;                                            // 0x0018   (0x0008)  
};

/// Struct /Script/Indiana.ArmorModResistanceItemDefinition
/// Size: 0x0020 (32 bytes) (0x000018 - 0x000020) align 8 MaxSize: 0x0020
struct FArmorModResistanceItemDefinition : FArmorItemDefinition
{ 
	class UClass*                                      ResistanceModClass;                                         // 0x0018   (0x0008)  
};

/// Struct /Script/Indiana.ArmorModDampeningItemDefinition
/// Size: 0x0020 (32 bytes) (0x000018 - 0x000020) align 8 MaxSize: 0x0020
struct FArmorModDampeningItemDefinition : FArmorItemDefinition
{ 
	class UClass*                                      DampeningModClass;                                          // 0x0018   (0x0008)  
};

/// Struct /Script/Indiana.GadgetItemDefinition
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align 8 MaxSize: 0x0018
struct FGadgetItemDefinition : FBaseItemDefinition
{ 
	class UClass*                                      GadgetClass;                                                // 0x0010   (0x0008)  
};

/// Struct /Script/Indiana.ItemDefinitionVariant
/// Size: 0x01F0 (496 bytes) (0x000000 - 0x0001F0) align 8 MaxSize: 0x01F0
struct FItemDefinitionVariant
{ 
	EItemType                                          ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FWeaponItemDefinition                              WeaponItemDefinition;                                       // 0x0008   (0x0058)  
	FArmorSetItemDefinition                            ArmorSetItemDefinition;                                     // 0x0060   (0x0050)  
	FAmmoItemDefinition                                AmmoItemDefinition;                                         // 0x00B0   (0x0018)  
	FCurrencyItmDefinition                             CurrencyItemDefinition;                                     // 0x00C8   (0x0018)  
	FResourceItmDefinition                             ResourceItemDefinition;                                     // 0x00E0   (0x0018)  
	FQuestItmDefinition                                QuestItemDefinition;                                        // 0x00F8   (0x0018)  
	FWeaponModItemDefinition                           WeaponModItemDefinition;                                    // 0x0110   (0x0018)  
	FHelmetItemDefinition                              HelmetItemDefinition;                                       // 0x0128   (0x0020)  
	FArmorModArmoringItemDefinition                    ArmorModArmoringItemDefinition;                             // 0x0148   (0x0020)  
	FArmorModUtilityItemDefinition                     ArmorModUtilityItemDefinition;                              // 0x0168   (0x0020)  
	FArmorModResistanceItemDefinition                  ArmorModResistanceItemDefinition;                           // 0x0188   (0x0020)  
	FArmorModDampeningItemDefinition                   ArmorModDampeningItemDefinition;                            // 0x01A8   (0x0020)  
	FBaseItemDefinition                                MedKitItemDefinitionDeprecated;                             // 0x01C8   (0x0010)  
	FGadgetItemDefinition                              GadgetItemDefinition;                                       // 0x01D8   (0x0018)  
};

/// Struct /Script/Indiana.DefaultItemStack
/// Size: 0x01F8 (504 bytes) (0x000000 - 0x0001F8) align 8 MaxSize: 0x01F8
struct FDefaultItemStack
{ 
	FItemDefinitionVariant                             Item;                                                       // 0x0000   (0x01F0)  
	int32_t                                            Count;                                                      // 0x01F0   (0x0004)  
	bool                                               bLootable;                                                  // 0x01F4   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x01F5   (0x0003)  MISSED
};

/// Struct /Script/Indiana.ItemStack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FItemStack
{ 
	class UItem*                                       Item;                                                       // 0x0000   (0x0008)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
	bool                                               bLootable;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Class /Script/Indiana.InventoryComponent
/// Size: 0x0200 (512 bytes) (0x0000E0 - 0x000200) align 8 MaxSize: 0x0200
class UInventoryComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x00E0   (0x0020)  MISSED
	SDK_UNDEFINED(16,399) /* FMulticastInlineDelegate */ __um(ItemStacksChangedDelegate);                          // 0x0100   (0x0010)  
	SDK_UNDEFINED(16,400) /* FMulticastInlineDelegate */ __um(ItemAddedDelegate);                                  // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,401) /* FMulticastInlineDelegate */ __um(ItemCountChangedDelegate);                           // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,402) /* FMulticastInlineDelegate */ __um(ItemRemovedDelegate);                                // 0x0130   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0140   (0x0010)  MISSED
	SDK_UNDEFINED(16,403) /* FMulticastInlineDelegate */ __um(ItemJunkStatusChangedDelegate);                      // 0x0150   (0x0010)  
	TArray<FDefaultItemStack>                          DefaultItemStacks;                                          // 0x0160   (0x0010)  
	bool                                               bCanLoot;                                                   // 0x0170   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0171   (0x0007)  MISSED
	TArray<FItemStack>                                 Items;                                                      // 0x0178   (0x0010)  
	class ULootTableData*                              BaseLootTable;                                              // 0x0188   (0x0008)  
	class ULootTableData*                              SecondaryTable;                                             // 0x0190   (0x0008)  
	TArray<class ULootTableData*>                      AdditionalLoot;                                             // 0x0198   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x01A8   (0x0010)  MISSED
	class UClass*                                      OwningFaction;                                              // 0x01B8   (0x0008)  
	TWeakObjectPtr<class AActor*>                      OwningActor;                                                // 0x01C0   (0x0008)  
	unsigned char                                      UnknownData04_6[0x20];                                      // 0x01C8   (0x0020)  MISSED
	bool                                               bPlayerOwned;                                               // 0x01E8   (0x0001)  
	bool                                               bUseContainerTagForMedKit;                                  // 0x01E9   (0x0001)  
	unsigned char                                      UnknownData05_7[0x16];                                      // 0x01EA   (0x0016)  MISSED


	/// Functions
	// Function /Script/Indiana.InventoryComponent.TransferItemsBetweenActorsByTag
	// bool TransferItemsBetweenActorsByTag(class AActor* SourceActor, class AActor* DestinationActor, FGameplayTagContainer MatchTags, int32_t Count, bool bPotentialTheft); // [0x186af80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.ShowItemRemovedNotification
	// void ShowItemRemovedNotification(class UClass* ItemType, int32_t Count);                                                 // [0x186ae30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.ShowItemGainedNotification
	// void ShowItemGainedNotification(class UClass* ItemType, int32_t Count);                                                  // [0x186ad70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.RemoveItemsFromActorByTag
	// bool RemoveItemsFromActorByTag(class AActor* Actor, FGameplayTagContainer MatchTags, int32_t Count);                     // [0x186ab90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.RemoveItemFromActor
	// bool RemoveItemFromActor(class AActor* Actor, class UClass* ItemType, int32_t Count);                                    // [0x186aa90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.RemoveCurrency
	// void RemoveCurrency(int32_t Amount, bool bVendorInteraction);                                                            // [0x186a9c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.IsEmpty
	// bool IsEmpty();                                                                                                          // [0x186a900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.InventoryComponent.HasItemCountOnActorByTag
	// bool HasItemCountOnActorByTag(class AActor* Actor, FGameplayTagContainer MatchTags, int32_t Count);                      // [0x186a7a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.HasItemCountOnActor
	// bool HasItemCountOnActor(class AActor* Actor, class UClass* ItemType, int32_t Count);                                    // [0x186a6a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.GetItemCountOnActor
	// int32_t GetItemCountOnActor(class AActor* Actor, class UClass* ItemType);                                                // [0x186a5d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.DebugCreateInventory
	// void DebugCreateInventory(int32_t NumToAddPerItem, int32_t Skip);                                                        // [0x186a2f0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.InventoryComponent.ContainsLoot
	// bool ContainsLoot();                                                                                                     // [0x186a2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.InventoryComponent.AddLootFromTable
	// void AddLootFromTable(class ULootTableData* LootTable);                                                                  // [0x186a120] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.AddItemToActor
	// void AddItemToActor(class AActor* Actor, class UClass* ItemType, int32_t Count, bool bLootable);                         // [0x1869fd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.AddItemDebug
	// void AddItemDebug(FName& ItemName, uint32_t Count);                                                                      // [0x1869f00] Final|Exec|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryComponent.AddCurrency
	// void AddCurrency(int32_t Amount, bool bLootable);                                                                        // [0x1869e30] Final|Exec|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterInventoryComponent
/// Size: 0x0238 (568 bytes) (0x000200 - 0x000238) align 8 MaxSize: 0x0238
class UCharacterInventoryComponent : public UInventoryComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0200   (0x0030)  MISSED
	bool                                               bCanBePickPocketed;                                         // 0x0230   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0231   (0x0003)  MISSED
	bool                                               bCanBeHacked;                                               // 0x0234   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x0235   (0x0003)  MISSED
};

/// Class /Script/Indiana.CharacterMedKitWidget
/// Size: 0x03D0 (976 bytes) (0x000300 - 0x0003D0) align 8 MaxSize: 0x03D0
class UCharacterMedKitWidget : public UIndianaUserWidget
{ 
public:
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0300   (0x0008)  
	class UProgressBar*                                MedKitProgressBar;                                          // 0x0308   (0x0008)  
	class UMedKitDrugSlotWidget*                       DrugSlotOne;                                                // 0x0310   (0x0008)  
	class UMedKitDrugSlotWidget*                       DrugSlotTwo;                                                // 0x0318   (0x0008)  
	class UMedKitDrugSlotWidget*                       DrugSlotThree;                                              // 0x0320   (0x0008)  
	class UMedKitDrugSlotWidget*                       DrugSlotFour;                                               // 0x0328   (0x0008)  
	class UHorizontalBox*                              DrugSlotContainer;                                          // 0x0330   (0x0008)  
	class UInputWidget*                                InputLabel;                                                 // 0x0338   (0x0008)  
	class UTextBlockBase*                              MedKitUsageTextBlock;                                       // 0x0340   (0x0008)  
	unsigned char                                      UnknownData00_7[0x88];                                      // 0x0348   (0x0088)  MISSED


	/// Functions
	// Function /Script/Indiana.CharacterMedKitWidget.UpdateDrugSlots
	// void UpdateDrugSlots(int32_t ConsumablesUsed);                                                                           // [0x17d4ce0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterMedKitWidget.OnInventoryItemAddedRemoved
	// void OnInventoryItemAddedRemoved(FItemStack& ItemStack);                                                                 // [0x17d4710] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.CharacterMedKitWidget.OnHealthChanged
	// void OnHealthChanged(float HealthChange, class AActor* InInstigator);                                                    // [0x17d45b0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterMedKitWidget.InhalerModeChanged
	// void InhalerModeChanged(int32_t NewSetting);                                                                             // [0x17d3be0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterMedKitWidget.AbilityControlModeChanged
	// void AbilityControlModeChanged(int32_t NewSetting);                                                                      // [0x17d3be0] Final|Native|Protected 
};

/// Class /Script/Indiana.CharacterNameplateWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UCharacterNameplateWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0300   (0x0008)  
	class UTextBlockBase*                              LevelTextBlock;                                             // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0310   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.CharacterNameplateWidget.OnLevelChanged
	// void OnLevelChanged(int32_t NewLevel);                                                                                   // [0x17d47b0] Final|Native|Protected 
};

/// Class /Script/Indiana.CharacterOverviewWidget
/// Size: 0x04F8 (1272 bytes) (0x000300 - 0x0004F8) align 8 MaxSize: 0x04F8
class UCharacterOverviewWidget : public UIndianaUserWidget
{ 
public:
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0300   (0x0008)  
	class UCanvasPanel*                                MainCanvasPanel;                                            // 0x0308   (0x0008)  
	class UCharacterMedKitWidget*                      CharacterMedKit;                                            // 0x0310   (0x0008)  
	class UHorizontalBox*                              AbilityHorizontalBox;                                       // 0x0318   (0x0008)  
	class USurvivalBarGroupWidget*                     SurvivalBar;                                                // 0x0320   (0x0008)  
	class UTextBlockBase*                              LevelTextBlock;                                             // 0x0328   (0x0008)  
	class UImage*                                      HealthProgressBar;                                          // 0x0330   (0x0008)  
	class UImage*                                      HealthBarTip;                                               // 0x0338   (0x0008)  
	class UImage*                                      HealthBarTipAnim;                                           // 0x0340   (0x0008)  
	class UOverlay*                                    HealthOverlay;                                              // 0x0348   (0x0008)  
	class UImage*                                      TTDProgressBar;                                             // 0x0350   (0x0008)  
	class UImage*                                      TTDThresholdFill;                                           // 0x0358   (0x0008)  
	class UImage*                                      TTDThresholdBar;                                            // 0x0360   (0x0008)  
	class UImage*                                      VentGlow;                                                   // 0x0368   (0x0008)  
	class UImage*                                      XPFill;                                                     // 0x0370   (0x0008)  
	class UImage*                                      XPGlow;                                                     // 0x0378   (0x0008)  
	class UImage*                                      GlowBall;                                                   // 0x0380   (0x0008)  
	class UImage*                                      TTDBarTip;                                                  // 0x0388   (0x0008)  
	class UOverlay*                                    TTDOverlay;                                                 // 0x0390   (0x0008)  
	class UOverlay*                                    StatusEffectBarOverlay;                                     // 0x0398   (0x0008)  
	class UStatusEffectBarWidget*                      StatusEffectBar;                                            // 0x03A0   (0x0008)  
	class USizeBox*                                    TTDSizeBox;                                                 // 0x03A8   (0x0008)  
	class UHorizontalBox*                              TTDHBox;                                                    // 0x03B0   (0x0008)  
	class UInputWidget*                                TTDInputWidget;                                             // 0x03B8   (0x0008)  
	class UProgressBar*                                TTDIconProgressBar;                                         // 0x03C0   (0x0008)  
	class UHorizontalBox*                              DashHBox;                                                   // 0x03C8   (0x0008)  
	class UInputWidget*                                DashInputWidget;                                            // 0x03D0   (0x0008)  
	class UProgressBar*                                DashProgressBar;                                            // 0x03D8   (0x0008)  
	float                                              InhalerActivePadding;                                       // 0x03E0   (0x0004)  
	float                                              InhalerInactivePadding;                                     // 0x03E4   (0x0004)  
	float                                              SurvivalBarBindingsInactivePadding;                         // 0x03E8   (0x0004)  
	float                                              SurvivalBarBindingsActivePadding;                           // 0x03EC   (0x0004)  
	int32_t                                            HealthMeterTipStartHeight;                                  // 0x03F0   (0x0004)  
	int32_t                                            HealthMeterTipEndHeight;                                    // 0x03F4   (0x0004)  
	int32_t                                            HealthMeterTipAnimStartHeight;                              // 0x03F8   (0x0004)  
	int32_t                                            HealthMeterTipAnimEndHeight;                                // 0x03FC   (0x0004)  
	float                                              HealthMeterExpandPercent;                                   // 0x0400   (0x0004)  
	float                                              MeterInnerAnimTime;                                         // 0x0404   (0x0004)  
	int32_t                                            HealthMeterInnerAnimNumFrames;                              // 0x0408   (0x0004)  
	int32_t                                            TTDMeterInnerAnimNumFrames;                                 // 0x040C   (0x0004)  
	float                                              TTDMeterOffsetPercent;                                      // 0x0410   (0x0004)  
	float                                              DefaultXPBarPauseTime;                                      // 0x0414   (0x0004)  
	unsigned char                                      UnknownData00_7[0xE0];                                      // 0x0418   (0x00E0)  MISSED


	/// Functions
	// Function /Script/Indiana.CharacterOverviewWidget.OnTTDDisplayModeChanged
	// void OnTTDDisplayModeChanged(int32_t TTDDisplayModeIn);                                                                  // [0x17d4b90] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnSurvivalModeChanged
	// void OnSurvivalModeChanged(bool bSurvivalBarVisibilityIn);                                                               // [0x17d4b00] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnSkillUpdated
	// void OnSkillUpdated(ESkill Skill, int32_t NewValue);                                                                     // [0x17d4a30] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnPreventTTDChanged
	// void OnPreventTTDChanged(bool bPreventTTD);                                                                              // [0x17d48d0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnPlayerStatusBarModeChanged
	// void OnPlayerStatusBarModeChanged(int32_t ModeIn);                                                                       // [0x17d4840] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnPlayerCombatStateChange
	// void OnPlayerCombatStateChange(bool IsPlayerInCombat);                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterOverviewWidget.OnInhalerModeChanged
	// void OnInhalerModeChanged(int32_t InhalerModeIn);                                                                        // [0x17d4680] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bHUDVisibility);                                                                        // [0x17d4520] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnDodgeDisplayModeChanged
	// void OnDodgeDisplayModeChanged(int32_t DodgeDisplayModeIn);                                                              // [0x17d4410] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnDodged
	// void OnDodged(EDodgeDirection EDodgeDirection);                                                                          // [0x17d44a0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty DifficultyIn);                                                                  // [0x17d4390] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnCombatStateChange
	// void OnCombatStateChange(bool bCombatIn, bool bRestoring);                                                               // [0x17d41f0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnAbilityControlModeChanged
	// void OnAbilityControlModeChanged(int32_t AbilityControlModeIn);                                                          // [0x17d3e90] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.HideTTDMeter
	// void HideTTDMeter(bool bHide);                                                                                           // [0x17d3e00] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterLibrary
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCharacterLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Indiana.CharacterLibrary.GetSkillValue
	// int32_t GetSkillValue(class AActor* Actor, ESkill Skill);                                                                // [0x17d3d30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterLibrary.GetAttributeValue
	// int32_t GetAttributeValue(class AActor* Actor, EAttribute Attribute);                                                    // [0x17d3c60] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterScalingComponent
/// Size: 0x00E0 (224 bytes) (0x0000E0 - 0x0000E0) align 8 MaxSize: 0x00E0
class UCharacterScalingComponent : public UActorComponent
{ 
public:
};

/// Class /Script/Indiana.ShoutComponent
/// Size: 0x0100 (256 bytes) (0x0000E0 - 0x000100) align 8 MaxSize: 0x0100
class UShoutComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	float                                              ShoutRadius;                                                // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	class UStaticMeshComponent*                        ShoutBounds;                                                // 0x00F0   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x00F8   (0x0008)  MISSED
};

/// Class /Script/Indiana.CharacterShoutComponent
/// Size: 0x0160 (352 bytes) (0x000100 - 0x000160) align 8 MaxSize: 0x0160
class UCharacterShoutComponent : public UShoutComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0100   (0x0008)  MISSED
	bool                                               bOnEnterCombat;                                             // 0x0108   (0x0001)  
	bool                                               bCombatIntermittent;                                        // 0x0109   (0x0001)  
	bool                                               bOnDeath;                                                   // 0x010A   (0x0001)  
	bool                                               bOnOneShotDeath;                                            // 0x010B   (0x0001)  
	unsigned char                                      UnknownData01_7[0x54];                                      // 0x010C   (0x0054)  MISSED


	/// Functions
	// Function /Script/Indiana.CharacterShoutComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x17d42c0] Final|Native|Private 
	// Function /Script/Indiana.CharacterShoutComponent.OnCharacterDeath
	// void OnCharacterDeath(FCauseDamageInfo& CDI);                                                                            // [0x17d4150] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.CharacterShoutComponent.OnAlertStateChange
	// void OnAlertStateChange(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x17d3ff0] Final|Native|Private 
};

/// Class /Script/Indiana.CharacterSkillsDescriptionPanel
/// Size: 0x0378 (888 bytes) (0x000368 - 0x000378) align 8 MaxSize: 0x0378
class UCharacterSkillsDescriptionPanel : public UCharacterDescriptionPanel
{ 
public:
	class USkillUnlockPanelWidget*                     SkillUnlockPanel;                                           // 0x0368   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0370   (0x0008)  MISSED
};

/// Class /Script/Indiana.CharacterStatusEffectsWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class UCharacterStatusEffectsWidget : public UIndianaUserWidget
{ 
public:
	class UClass*                                      EntryClass;                                                 // 0x0300   (0x0008)  
	class UScrollBox*                                  ContentScrollBox;                                           // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0310   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.CharacterStatusEffectsWidget.OnRemoveStatusEffect
	// void OnRemoveStatusEffect(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);               // [0x17d4960] Final|Native|Protected 
	// Function /Script/Indiana.CharacterStatusEffectsWidget.OnAddStatusEffect
	// void OnAddStatusEffect(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                  // [0x17d3f20] Final|Native|Protected 
};

/// Class /Script/Indiana.FlowChart
/// Size: 0x00B8 (184 bytes) (0x000030 - 0x0000B8) align 8 MaxSize: 0x00B8
class UFlowChart : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x88];                                      // 0x0030   (0x0088)  MISSED
};

/// Class /Script/Indiana.Chatter
/// Size: 0x0128 (296 bytes) (0x0000B8 - 0x000128) align 8 MaxSize: 0x0128
class UChatter : public UFlowChart
{ 
public:
	unsigned char                                      UnknownData00_1[0x70];                                      // 0x00B8   (0x0070)  MISSED
};

/// Struct /Script/Indiana.ExpressionComponentAsset
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FExpressionComponentAsset
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	LogicalOperator                                    Operator;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Struct /Script/Indiana.ConditionalExpressionAsset
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align 8 MaxSize: 0x0030
struct FConditionalExpressionAsset : FExpressionComponentAsset
{ 
	TArray<ExpressionComponentType>                    ComponentTypes;                                             // 0x0010   (0x0010)  
	TArray<int32_t>                                    ComponentIndices;                                           // 0x0020   (0x0010)  
};

/// Struct /Script/Indiana.ConditionalCallAsset
/// Size: 0x0058 (88 bytes) (0x000010 - 0x000058) align 8 MaxSize: 0x0058
struct FConditionalCallAsset : FExpressionComponentAsset
{ 
	bool                                               Not;                                                        // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	FString                                            ScriptCall;                                                 // 0x0018   (0x0010)  
	FString                                            FullName;                                                   // 0x0028   (0x0010)  
	FString                                            Flags;                                                      // 0x0038   (0x0010)  
	TArray<FString>                                    Parameters;                                                 // 0x0048   (0x0010)  
};

/// Struct /Script/Indiana.ConditionalAsset
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FConditionalAsset
{ 
	TArray<FConditionalExpressionAsset>                ExpressionComponents;                                       // 0x0000   (0x0010)  
	TArray<FConditionalCallAsset>                      CallComponents;                                             // 0x0010   (0x0010)  
	FConditionalExpressionAsset                        Root;                                                       // 0x0020   (0x0030)  
};

/// Struct /Script/Indiana.ChatterLinkAsset
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 MaxSize: 0x0060
struct FChatterLinkAsset
{ 
	int32_t                                            FromNodeID;                                                 // 0x0000   (0x0004)  
	int32_t                                            ToNodeID;                                                   // 0x0004   (0x0004)  
	FConditionalAsset                                  Conditional;                                                // 0x0008   (0x0050)  
	int32_t                                            RandomWeight;                                               // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.ScriptCallAsset
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 MaxSize: 0x0070
struct FScriptCallAsset
{ 
	FString                                            Script;                                                     // 0x0000   (0x0010)  
	FString                                            Flags;                                                      // 0x0010   (0x0010)  
	FConditionalAsset                                  Conditional;                                                // 0x0020   (0x0050)  
};

/// Struct /Script/Indiana.DialogueNodeAsset
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 MaxSize: 0x00B0
struct FDialogueNodeAsset
{ 
	int32_t                                            NodeID;                                                     // 0x0000   (0x0004)  
	int32_t                                            ContainerNodeID;                                            // 0x0004   (0x0004)  
	FlowChartNodeType                                  NodeType;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<FChatterLinkAsset>                          Links;                                                      // 0x0010   (0x0010)  
	FConditionalAsset                                  Conditional;                                                // 0x0020   (0x0050)  
	TArray<FScriptCallAsset>                           OnEnterScripts;                                             // 0x0070   (0x0010)  
	TArray<FScriptCallAsset>                           OnExitScripts;                                              // 0x0080   (0x0010)  
	TArray<FScriptCallAsset>                           OnUpdateScripts;                                            // 0x0090   (0x0010)  
	bool                                               NotSkippable;                                               // 0x00A0   (0x0001)  
	bool                                               IsQuestionNode;                                             // 0x00A1   (0x0001)  
	bool                                               HideSpeaker;                                                // 0x00A2   (0x0001)  
	NodePlayType                                       PlayType;                                                   // 0x00A3   (0x0001)  
	PersistenceType                                    Persistence;                                                // 0x00A4   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00A5   (0x0003)  MISSED
	int32_t                                            NoPlayRandomWeight;                                         // 0x00A8   (0x0004)  
	NodeDisplayType                                    DisplayType;                                                // 0x00AC   (0x0001)  
	EVOPositioning                                     VOPositioning;                                              // 0x00AD   (0x0001)  
	unsigned char                                      UnknownData02_7[0x2];                                       // 0x00AE   (0x0002)  MISSED
};

/// Struct /Script/Indiana.TalkNodeAsset
/// Size: 0x0100 (256 bytes) (0x0000B0 - 0x000100) align 8 MaxSize: 0x0100
struct FTalkNodeAsset : FDialogueNodeAsset
{ 
	FGuid                                              SpeakerGameDataID;                                          // 0x00B0   (0x0010)  
	FGuid                                              ListenerGameDataID;                                         // 0x00C0   (0x0010)  
	FString                                            EmotionType;                                                // 0x00D0   (0x0010)  
	float                                              EmotionStrength;                                            // 0x00E0   (0x0004)  
	float                                              EmotionDelay;                                               // 0x00E4   (0x0004)  
	FString                                            ExternalVO;                                                 // 0x00E8   (0x0010)  
	float                                              VODelayOverride;                                            // 0x00F8   (0x0004)  
	ETalkNodeVOAttenuationType                         VOAttenuationType;                                          // 0x00FC   (0x0001)  
	bool                                               bOmitFromUIHistory;                                         // 0x00FD   (0x0001)  
	bool                                               HasVO;                                                      // 0x00FE   (0x0001)  
	bool                                               bPersistEmotion;                                            // 0x00FF   (0x0001)  
};

/// Struct /Script/Indiana.ScriptNodeAsset
/// Size: 0x00B8 (184 bytes) (0x0000B0 - 0x0000B8) align 8 MaxSize: 0x00B8
struct FScriptNodeAsset : FDialogueNodeAsset
{ 
	bool                                               RequiresValidChildNode;                                     // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Struct /Script/Indiana.ChatterNodeAsset
/// Size: 0x00B8 (184 bytes) (0x0000B0 - 0x0000B8) align 8 MaxSize: 0x00B8
struct FChatterNodeAsset : FDialogueNodeAsset
{ 
	int32_t                                            VariantCount;                                               // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Struct /Script/Indiana.ChatterBranchNodeAsset
/// Size: 0x00D8 (216 bytes) (0x0000B8 - 0x0000D8) align 8 MaxSize: 0x00D8
struct FChatterBranchNodeAsset : FScriptNodeAsset
{ 
	FGuid                                              ParentID;                                                   // 0x00B8   (0x0010)  
	FGuid                                              EventID;                                                    // 0x00C8   (0x0010)  
};

/// Struct /Script/Indiana.GameDataStructure
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FGameDataStructure
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Indiana.ChatterEvent
/// Size: 0x0030 (48 bytes) (0x000008 - 0x000030) align 8 MaxSize: 0x0030
struct FChatterEvent : FGameDataStructure
{ 
	EChatterEventType                                  EventType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              Priority;                                                   // 0x000C   (0x0004)  
	float                                              Cooldown;                                                   // 0x0010   (0x0004)  
	EInterruptType                                     OnInterrupt;                                                // 0x0014   (0x0001)  
	EChatterLevel                                      InterruptionLevel;                                          // 0x0015   (0x0001)  
	EQueueType                                         OnQueued;                                                   // 0x0016   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0017   (0x0001)  MISSED
	float                                              MaxWaitTime;                                                // 0x0018   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FString                                            ChatterPrefix;                                              // 0x0020   (0x0010)  
};

/// Struct /Script/Indiana.ChatterEventNodeAsset
/// Size: 0x00E0 (224 bytes) (0x0000B0 - 0x0000E0) align 8 MaxSize: 0x00E0
struct FChatterEventNodeAsset : FDialogueNodeAsset
{ 
	FChatterEvent                                      EventData;                                                  // 0x00B0   (0x0030)  
};

/// Struct /Script/Indiana.SoundEffectNodeAsset
/// Size: 0x00C8 (200 bytes) (0x0000B0 - 0x0000C8) align 8 MaxSize: 0x00C8
struct FSoundEffectNodeAsset : FDialogueNodeAsset
{ 
	FString                                            AudioEvent;                                                 // 0x00B0   (0x0010)  
	float                                              FadeOutDuration;                                            // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00C4   (0x0004)  MISSED
};

/// Struct /Script/Indiana.ChatterBundle
/// Size: 0x00E0 (224 bytes) (0x000000 - 0x0000E0) align 8 MaxSize: 0x00E0
struct FChatterBundle
{ 
	FString                                            LoadedFilename;                                             // 0x0000   (0x0010)  
	FGuid                                              ID;                                                         // 0x0010   (0x0010)  
	TMap<int32_t, FString>                             AudioLookup;                                                // 0x0020   (0x0050)  
	TArray<FString>                                    StringTableFilenames;                                       // 0x0070   (0x0010)  
	TArray<FTalkNodeAsset>                             TalkNodes;                                                  // 0x0080   (0x0010)  
	TArray<FScriptNodeAsset>                           ScriptNodes;                                                // 0x0090   (0x0010)  
	TArray<FChatterNodeAsset>                          ChatterNodes;                                               // 0x00A0   (0x0010)  
	TArray<FChatterBranchNodeAsset>                    ChatterBranchNodes;                                         // 0x00B0   (0x0010)  
	TArray<FChatterEventNodeAsset>                     ChatterEventNodes;                                          // 0x00C0   (0x0010)  
	TArray<FSoundEffectNodeAsset>                      SoundEffectNodes;                                           // 0x00D0   (0x0010)  
};

/// Class /Script/Indiana.ChatterBundleSet
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UChatterBundleSet : public UDataAsset
{ 
public:
	int32_t                                            Hash;                                                       // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<FChatterBundle>                             ChatterBundles;                                             // 0x0040   (0x0010)  
};

/// Class /Script/Indiana.ChatterEventEffect
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UChatterEventEffect : public UEventEffect
{ 
public:
	EChatterEventType                                  ChatterEvent;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Indiana.GameDataReference
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UGameDataReference : public UDataAsset
{ 
public:
	unsigned char                                      UnknownData00_8[0x4];                                       // 0x0038   (0x0004)  MISSED
	FGuid                                              ID;                                                         // 0x003C   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Indiana.ChatterEventsGameDataReference
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UChatterEventsGameDataReference : public UGameDataReference
{ 
public:
};

/// Class /Script/Indiana.ChatterGameHelpers
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UChatterGameHelpers : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Indiana.ChatterGameHelpers.PlayChatterEvent
	// void PlayChatterEvent(class AActor* Speaker, EChatterEventType ChatterEvent);                                            // [0x17d4c20] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ChatterManager
/// Size: 0x6FDC8 (458184 bytes) (0x000030 - 0x06FDC8) align 8 MaxSize: 0x6FDC8
class UChatterManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0030   (0x0020)  MISSED
	TMap<FGuid, class UChatter*>                       LoadedChatter;                                              // 0x0050   (0x0050)  
	TArray<class UChatterPlayer*>                      ChatterPlayerPool;                                          // 0x00A0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x6FC20];                                   // 0x00B0   (0x6FC20)  MISSED
	class UChatterPlayer*                              PreviewPlayer;                                              // 0x6FCD0   (0x0008)  
	unsigned char                                      UnknownData02_7[0xF0];                                      // 0x6FCD8   (0x00F0)  MISSED


	/// Functions
	// Function /Script/Indiana.ChatterManager.OnConversationBegin
	// void OnConversationBegin(class UConversationInstance* ConversationInstance);                                             // [0x17d9490] Final|Native|Private 
};

/// Class /Script/Indiana.FlowChartPlayer
/// Size: 0x00C0 (192 bytes) (0x000030 - 0x0000C0) align 8 MaxSize: 0x00C0
class UFlowChartPlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x90];                                      // 0x0030   (0x0090)  MISSED
};

/// Class /Script/Indiana.ChatterPlayer
/// Size: 0x0168 (360 bytes) (0x0000C0 - 0x000168) align 8 MaxSize: 0x0168
class UChatterPlayer : public UFlowChartPlayer
{ 
public:
	unsigned char                                      UnknownData00_8[0x98];                                      // 0x00C0   (0x0098)  MISSED
	class UFaceFXAnim*                                 FaceFXAnim;                                                 // 0x0158   (0x0008)  
	class UAkAudioEvent*                               SoundEffectEvent;                                           // 0x0160   (0x0008)  
};

/// Class /Script/Indiana.CheckBoxWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UCheckBoxWidget : public UIndianaUserWidget
{ 
public:
	FVector2D                                          ImageDimensions;                                            // 0x0300   (0x0008)  
	FVector2D                                          MaxImageDimensions;                                         // 0x0308   (0x0008)  
	class USizeBox*                                    CheckBoxSizeBox;                                            // 0x0310   (0x0008)  
	class UButtonBase*                                 CheckBoxButton;                                             // 0x0318   (0x0008)  
	class UImage*                                      CheckedImage;                                               // 0x0320   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0328   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.CheckBoxWidget.UpdateCheckBoxSize
	// void UpdateCheckBoxSize(int32_t FontSizeModifier);                                                                       // [0x17d9a30] Final|Native|Protected 
};

/// Class /Script/Indiana.CineCombatCameraParams
/// Size: 0x0170 (368 bytes) (0x000030 - 0x000170) align 16 MaxSize: 0x0170
class UCineCombatCameraParams : public UObject
{ 
public:
	int32_t                                            Priority;                                                   // 0x0030   (0x0004)  
	FName                                              AttachSocket;                                               // 0x0034   (0x0008)  
	FVector                                            AttachRelativePosition;                                     // 0x003C   (0x000C)  
	FName                                              LookAtSocket;                                               // 0x0048   (0x0008)  
	FVector                                            Offset;                                                     // 0x0050   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	class ULevelSequence*                              LevelSequence;                                              // 0x0060   (0x0008)  
	bool                                               bAttachToActor;                                             // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0069   (0x0007)  MISSED
	FTransformedShape                                  ValidLocationCollisionInfo;                                 // 0x0070   (0x0040)  
	bool                                               bUseTimeDilationData;                                       // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x00B1   (0x0007)  MISSED
	FTimeDilationData                                  TimeDilationData;                                           // 0x00B8   (0x00A8)  
	bool                                               bAllowTimeDilationEdit;                                     // 0x0160   (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x0161   (0x000F)  MISSED
};

/// Class /Script/Indiana.CineCombatCamera
/// Size: 0x0308 (776 bytes) (0x0002B8 - 0x000308) align 8 MaxSize: 0x0308
class ACineCombatCamera : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02B8   (0x0008)  MISSED
	SDK_UNDEFINED(16,404) /* FMulticastInlineDelegate */ __um(CineCombatCameraStartDelegate);                      // 0x02C0   (0x0010)  
	SDK_UNDEFINED(16,405) /* FMulticastInlineDelegate */ __um(CineCombatCameraEndDelegate);                        // 0x02D0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x02E0   (0x0020)  MISSED
	class UCineCombatCameraParams*                     CameraParams;                                               // 0x0300   (0x0008)  
};

/// Class /Script/Indiana.CineCombatSequenceActor
/// Size: 0x0350 (848 bytes) (0x000340 - 0x000350) align 8 MaxSize: 0x0350
class ACineCombatSequenceActor : public ALevelSequenceActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0340   (0x0008)  MISSED
	class UCineCombatCameraParams*                     CameraParams;                                               // 0x0348   (0x0008)  
};

/// Class /Script/Indiana.CineCombatSequencePlayer
/// Size: 0x0648 (1608 bytes) (0x000608 - 0x000648) align 8 MaxSize: 0x0648
class UCineCombatSequencePlayer : public ULevelSequencePlayer
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0608   (0x0040)  MISSED
};

/// Class /Script/Indiana.CinematicPlayerWidget
/// Size: 0x0348 (840 bytes) (0x000308 - 0x000348) align 8 MaxSize: 0x0348
class UCinematicPlayerWidget : public UIndianaInterfaceUserWidget
{ 
public:
	SDK_UNDEFINED(16,406) /* FMulticastInlineDelegate */ __um(OnCinematicEnd);                                     // 0x0308   (0x0010)  
	class UInputLabelWidget*                           HoldInputLabel;                                             // 0x0318   (0x0008)  
	class UBackgroundBlur*                             SkipContainer;                                              // 0x0320   (0x0008)  
	class UOverlay*                                    CinematicOverlay;                                           // 0x0328   (0x0008)  
	float                                              MaxTimeBetweenInputs;                                       // 0x0330   (0x0004)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x0334   (0x0014)  MISSED


	/// Functions
	// Function /Script/Indiana.CinematicPlayerWidget.SkipCinematic
	// void SkipCinematic();                                                                                                    // [0x17d9a10] Final|Native|Protected 
	// Function /Script/Indiana.CinematicPlayerWidget.PlayerInputDetected
	// void PlayerInputDetected();                                                                                              // [0x17d9780] Final|Native|Protected 
	// Function /Script/Indiana.CinematicPlayerWidget.PlayCinematic
	// void PlayCinematic(class UMovieSceneSequencePlayer* Cinematic);                                                          // [0x17d96f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CinematicPlayerWidget.PauseCinematic
	// void PauseCinematic();                                                                                                   // [0x17d96d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CinematicPlayerWidget.InitiateFadeOut
	// void InitiateFadeOut();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CinematicPlayerWidget.InitiateFadeIn
	// void InitiateFadeIn();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CinematicPlayerWidget.FinishCinematic
	// void FinishCinematic();                                                                                                  // [0x17d8d70] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ClearThreatStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UClearThreatStatusEffect : public UStatusEffect
{ 
public:
	EClearThreatTarget                                 ClearTarget;                                                // 0x0188   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x018C   (0x0004)  MISSED
};

/// Class /Script/Indiana.CodexDataAsset
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UCodexDataAsset : public UDataAsset
{ 
public:
	FLocString                                         Name;                                                       // 0x0038   (0x0008)  
	FLocString                                         Description;                                                // 0x0040   (0x0008)  
};

/// Struct /Script/Indiana.InputLabelDescription
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 MaxSize: 0x0038
struct FInputLabelDescription
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	FName                                              IconName;                                                   // 0x0008   (0x0008)  
	FLocString                                         TextReference;                                              // 0x0010   (0x0008)  
	bool                                               bDisplayKeyboardMouse;                                      // 0x0018   (0x0001)  
	bool                                               bDisplayGamepad;                                            // 0x0019   (0x0001)  
	bool                                               bBoundToActionName;                                         // 0x001A   (0x0001)  
	bool                                               bRequiresConstantTicking;                                   // 0x001B   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x001C   (0x001C)  MISSED
};

/// Class /Script/Indiana.CodexJournal
/// Size: 0x03C8 (968 bytes) (0x000300 - 0x0003C8) align 8 MaxSize: 0x03C8
class UCodexJournal : public UIndianaUserWidget
{ 
public:
	class UButtonGroup*                                ButtonGroup;                                                // 0x0300   (0x0008)  
	FInputLabelDescription                             PlayAudioLogDescription_Gamepad;                            // 0x0308   (0x0038)  
	FInputLabelDescription                             PlayAudioLogDescription_Keyboard;                           // 0x0340   (0x0038)  
	class UScrollBox*                                  ListScrollBox;                                              // 0x0378   (0x0008)  
	class UAudioLogList*                               AudioLogList_BaseGame;                                      // 0x0380   (0x0008)  
	class UAudioLogList*                               AudioLogList_INX01;                                         // 0x0388   (0x0008)  
	class UAudioLogList*                               AudioLogList_INX02;                                         // 0x0390   (0x0008)  
	class UTutorialListContainer*                      TutorialListContainer;                                      // 0x0398   (0x0008)  
	class USymbolList*                                 SymbolList;                                                 // 0x03A0   (0x0008)  
	class ULogList*                                    LogList;                                                    // 0x03A8   (0x0008)  
	class UJournalDescriptionPanel*                    DescriptionPanel;                                           // 0x03B0   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x03B8   (0x0008)  
	float                                              GamepadZoomMultiplier;                                      // 0x03C0   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x03C4   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.CodexJournal.OnAudioLogUnhoveredCB
	// void OnAudioLogUnhoveredCB(class UButtonBase* ButtonUnhovered);                                                          // [0x17d91d0] Final|Native|Protected 
	// Function /Script/Indiana.CodexJournal.OnAudioLogUnfocusedCB
	// void OnAudioLogUnfocusedCB(class UButtonBase* ButtonUnfocused);                                                          // [0x17d9140] Final|Native|Protected 
	// Function /Script/Indiana.CodexJournal.OnAudioLogListEntryAdded
	// void OnAudioLogListEntryAdded(class UGenericCollapsableListEntry* ListEntry, class UAudioLogDataAsset* DataAsset);       // [0x17d9070] Final|Native|Protected 
	// Function /Script/Indiana.CodexJournal.OnAudioLogHoveredCB
	// void OnAudioLogHoveredCB(class UButtonBase* ButtonHovered);                                                              // [0x17d8fe0] Final|Native|Protected 
	// Function /Script/Indiana.CodexJournal.OnAudioLogFocusedCB
	// void OnAudioLogFocusedCB(class UButtonBase* ButtonFocused);                                                              // [0x17d8f50] Final|Native|Protected 
};

/// Struct /Script/Indiana.IndianaComboButtonStyle
/// Size: 0x0960 (2400 bytes) (0x000008 - 0x000960) align 8 MaxSize: 0x0960
struct FIndianaComboButtonStyle : FSlateWidgetStyle
{ 
	FIndianaButtonStyle                                ButtonStyle;                                                // 0x0008   (0x0828)  
	FSlateBrushContainer                               DownArrowImage;                                             // 0x0830   (0x0090)  
	FSlateBrushContainer                               MenuBorderBrush;                                            // 0x08C0   (0x0090)  
	FMargin                                            MenuBorderPadding;                                          // 0x0950   (0x0010)  
};

/// Struct /Script/Indiana.IndianaComboBoxStyle
/// Size: 0x0968 (2408 bytes) (0x000008 - 0x000968) align 8 MaxSize: 0x0968
struct FIndianaComboBoxStyle : FSlateWidgetStyle
{ 
	FIndianaComboButtonStyle                           ComboButtonStyle;                                           // 0x0008   (0x0960)  
};

/// Class /Script/Indiana.ComboBoxStringBase
/// Size: 0x0C40 (3136 bytes) (0x000120 - 0x000C40) align 8 MaxSize: 0x0C40
class UComboBoxStringBase : public UWidget
{ 
public:
	TArray<FString>                                    DefaultOptions;                                             // 0x0120   (0x0010)  
	FString                                            SelectedOption;                                             // 0x0130   (0x0010)  
	FIndianaComboBoxStyle                              WidgetStyle;                                                // 0x0140   (0x0968)  
	FMargin                                            ContentPadding;                                             // 0x0AA8   (0x0010)  
	float                                              MaxListHeight;                                              // 0x0AB8   (0x0004)  
	bool                                               HasDownArrow;                                               // 0x0ABC   (0x0001)  
	bool                                               EnableGamepadNavigationMode;                                // 0x0ABD   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5A];                                      // 0x0ABE   (0x005A)  MISSED
	FSlateColor                                        ForegroundColor;                                            // 0x0B18   (0x0028)  
	bool                                               bIsFocusable;                                               // 0x0B40   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0B41   (0x0003)  MISSED
	SDK_UNDEFINED(16,407) /* FDelegateProperty */      __um(OnGenerateWidgetEvent);                                // 0x0B44   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0B54   (0x0004)  MISSED
	SDK_UNDEFINED(16,408) /* FMulticastInlineDelegate */ __um(OnSelectionChanged);                                 // 0x0B58   (0x0010)  
	SDK_UNDEFINED(16,409) /* FMulticastInlineDelegate */ __um(OnOpening);                                          // 0x0B68   (0x0010)  
	SDK_UNDEFINED(16,410) /* FMulticastInlineDelegate */ __um(OnHoveredMCD);                                       // 0x0B78   (0x0010)  
	SDK_UNDEFINED(16,411) /* FMulticastInlineDelegate */ __um(OnUnhoveredMCD);                                     // 0x0B88   (0x0010)  
	SDK_UNDEFINED(16,412) /* FMulticastInlineDelegate */ __um(OnFocusReceivedMCD);                                 // 0x0B98   (0x0010)  
	SDK_UNDEFINED(16,413) /* FMulticastInlineDelegate */ __um(OnFocusLostMCD);                                     // 0x0BA8   (0x0010)  
	unsigned char                                      UnknownData03_7[0x88];                                      // 0x0BB8   (0x0088)  MISSED


	/// Functions
	// Function /Script/Indiana.ComboBoxStringBase.SetSelectedOption
	// void SetSelectedOption(FString Option);                                                                                  // [0x17d9910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.RemoveOption
	// bool RemoveOption(FString Option);                                                                                       // [0x17d97c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.RefreshOptions
	// void RefreshOptions();                                                                                                   // [0x17d97a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.OnSelectionChangedEvent__DelegateSignature
	// void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);           // [0x1c5deb0] MulticastDelegate|Public|Delegate 
	// Function /Script/Indiana.ComboBoxStringBase.OnOpeningEvent__DelegateSignature
	// void OnOpeningEvent__DelegateSignature();                                                                                // [0x1c5deb0] MulticastDelegate|Public|Delegate 
	// Function /Script/Indiana.ComboBoxStringBase.GetSelectedOptionIndex
	// int32_t GetSelectedOptionIndex();                                                                                        // [0x17d8f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.GetSelectedOption
	// FString GetSelectedOption();                                                                                             // [0x17d8ea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.GetOptionCount
	// int32_t GetOptionCount();                                                                                                // [0x17d8e70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.GetOptionAtIndex
	// FString GetOptionAtIndex(int32_t Index);                                                                                 // [0x17d8d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.FindOptionIndex
	// int32_t FindOptionIndex(FString Option);                                                                                 // [0x17d8cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.ClearSelection
	// void ClearSelection();                                                                                                   // [0x17d8c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.ClearOptions
	// void ClearOptions();                                                                                                     // [0x17d8be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.AddOption
	// void AddOption(FString Option);                                                                                          // [0x17d8b30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaComboBoxWidgetStyle
/// Size: 0x09A0 (2464 bytes) (0x000038 - 0x0009A0) align 8 MaxSize: 0x09A0
class UIndianaComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
{ 
public:
	FIndianaComboBoxStyle                              ComboBoxStyle;                                              // 0x0038   (0x0968)  
};

/// Class /Script/Indiana.CommandPointWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UCommandPointWidget : public UIndianaUserWidget
{ 
public:
	class UImage*                                      PipBulbImage;                                               // 0x0300   (0x0008)  
	class UImage*                                      FillImage;                                                  // 0x0308   (0x0008)  
	class UTexture2D*                                  LockedBulbTexture;                                          // 0x0310   (0x0008)  
	class UTexture2D*                                  UnlockedBulbTexture;                                        // 0x0318   (0x0008)  
	class UTexture2D*                                  AvailablePipTexture;                                        // 0x0320   (0x0008)  
	class UTexture2D*                                  UnavailablePipTexture;                                      // 0x0328   (0x0008)  
};

/// Class /Script/Indiana.CompanionBehaviorOptionWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UCompanionBehaviorOptionWidget : public UIndianaUserWidget
{ 
public:
	FLocString                                         NameLocString;                                              // 0x0300   (0x0008)  
	FLocString                                         DescriptionLocString;                                       // 0x0308   (0x0008)  
	class UAkAudioEvent*                               GamepadNextAudio;                                           // 0x0310   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0318   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0320   (0x0008)  
	class UOptionPresenterWidget*                      Option;                                                     // 0x0328   (0x0008)  
};

/// Class /Script/Indiana.CompanionBehaviorsWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class UCompanionBehaviorsWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	class UCompanionBehaviorOptionWidget*              FollowDistanceWidget;                                       // 0x0318   (0x0008)  
	class UCompanionBehaviorOptionWidget*              WeaponPreferenceWidget;                                     // 0x0320   (0x0008)  
	class UCompanionBehaviorOptionWidget*              CombatModeWidget;                                           // 0x0328   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0330   (0x0008)  MISSED
};

/// Struct /Script/Indiana.MoveToQueryInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FMoveToQueryInfo
{ 
	FVector                                            Extent;                                                     // 0x0000   (0x000C)  
	float                                              ZOffset;                                                    // 0x000C   (0x0004)  
};

/// Class /Script/Indiana.CompanionCommandComponent
/// Size: 0x03B8 (952 bytes) (0x0000E0 - 0x0003B8) align 8 MaxSize: 0x03B8
class UCompanionCommandComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x00E0   (0x0020)  MISSED
	float                                              CalledShotTargetDegrees;                                    // 0x0100   (0x0004)  
	float                                              TargetRange;                                                // 0x0104   (0x0004)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x0108   (0x0030)  MISSED
	SDK_UNDEFINED(16,414) /* FMulticastInlineDelegate */ __um(CompanionCommandTimeDilationStarted);                // 0x0138   (0x0010)  
	SDK_UNDEFINED(16,415) /* FMulticastInlineDelegate */ __um(CompanionCommandTimeDilationEnded);                  // 0x0148   (0x0010)  
	float                                              TimeDilation;                                               // 0x0158   (0x0004)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x015C   (0x000C)  MISSED
	SDK_UNDEFINED(16,416) /* FMulticastInlineDelegate */ __um(MeterChangedDelegate);                               // 0x0168   (0x0010)  
	SDK_UNDEFINED(16,417) /* FMulticastInlineDelegate */ __um(MeterMaxChangedDelegate);                            // 0x0178   (0x0010)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0188   (0x0008)  MISSED
	float                                              PerShotMeterChargePerSecond;                                // 0x0190   (0x0004)  
	float                                              PerShotDamageMeterChargePerSecond;                          // 0x0194   (0x0004)  
	int32_t                                            MaxChargeAmount;                                            // 0x0198   (0x0004)  
	int32_t                                            MaxAutoFillMoraleCharges;                                   // 0x019C   (0x0004)  
	float                                              AutoFillRate;                                               // 0x01A0   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x01A4   (0x0004)  MISSED
	TMap<ECompanionCommand, int32_t>                   CommandChargeCosts;                                         // 0x01A8   (0x0050)  
	unsigned char                                      UnknownData05_6[0x20];                                      // 0x01F8   (0x0020)  MISSED
	TMap<ECompanionCommand, float>                     CommandCooldowns;                                           // 0x0218   (0x0050)  
	unsigned char                                      UnknownData06_6[0x90];                                      // 0x0268   (0x0090)  MISSED
	float                                              MoveToMaxRange;                                             // 0x02F8   (0x0004)  
	float                                              MoveToQueryImpactRayPullback;                               // 0x02FC   (0x0004)  
	float                                              MoveToQueryProjectionRange;                                 // 0x0300   (0x0004)  
	FMoveToQueryInfo                                   InitialMoveToQuery;                                         // 0x0304   (0x0010)  
	FMoveToQueryInfo                                   SecondaryMoveToQuery;                                       // 0x0314   (0x0010)  
	FMoveToQueryInfo                                   ProjectedMoveToQuery;                                       // 0x0324   (0x0010)  
	unsigned char                                      UnknownData07_7[0x84];                                      // 0x0334   (0x0084)  MISSED


	/// Functions
	// Function /Script/Indiana.CompanionCommandComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x17d9640] Final|Native|Protected 
	// Function /Script/Indiana.CompanionCommandComponent.OnCalledShotCameraStep
	// void OnCalledShotCameraStep(class AActor* Attacker, ECalledShotCameraStep OldCameraStep, ECalledShotCameraStep NewCameraStep, bool bCloseRange); // [0x17d9260] Final|Native|Protected 
	// Function /Script/Indiana.CompanionCommandComponent.FillMeter
	// void FillMeter();                                                                                                        // [0x17d8c80] Final|Exec|Native|Public 
	// Function /Script/Indiana.CompanionCommandComponent.CompanionCommandInfinite
	// void CompanionCommandInfinite();                                                                                         // [0x17d8c20] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.TimedBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000120 - 0x000128) align 8 MaxSize: 0x0128
class UTimedBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0120   (0x0008)  MISSED
};

/// Class /Script/Indiana.CompanionCommandTimedBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000128 - 0x000128) align 8 MaxSize: 0x0128
class UCompanionCommandTimedBehaviorStateInfo : public UTimedBehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.CompanionCommandFlankBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000128 - 0x000128) align 8 MaxSize: 0x0128
class UCompanionCommandFlankBehaviorStateInfo : public UCompanionCommandTimedBehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.CompanionCommandFlankRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UCompanionCommandFlankRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.CompanionCommandMoveToBehaviorStateInfo
/// Size: 0x0180 (384 bytes) (0x000178 - 0x000180) align 8 MaxSize: 0x0180
class UCompanionCommandMoveToBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0178   (0x0008)  MISSED
};

/// Class /Script/Indiana.CompanionCommandMoveToRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UCompanionCommandMoveToRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.CompanionCommandSuppressBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000128 - 0x000128) align 8 MaxSize: 0x0128
class UCompanionCommandSuppressBehaviorStateInfo : public UCompanionCommandTimedBehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.CompanionCommandSuppressRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UCompanionCommandSuppressRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Struct /Script/Indiana.BotchableQuestInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 MaxSize: 0x001C
struct FBotchableQuestInfo
{ 
	FGuid                                              ID;                                                         // 0x0000   (0x0010)  
	int32_t                                            DeathEventID;                                               // 0x0010   (0x0004)  
	int32_t                                            DeathEndStateID;                                            // 0x0014   (0x0004)  
	bool                                               bKeepDescription;                                           // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Class /Script/Indiana.CompanionComponent
/// Size: 0x0230 (560 bytes) (0x0000E0 - 0x000230) align 8 MaxSize: 0x0230
class UCompanionComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x00E0   (0x0010)  MISSED
	class UTexture2D*                                  CompanionPortrait;                                          // 0x00F0   (0x0008)  
	bool                                               bAlwaysMatchWeaponsAndArmorToCharacterLevel;                // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00F9   (0x0007)  MISSED
	FString                                            DeathGlobalVariableName;                                    // 0x0100   (0x0010)  
	TArray<FBotchableQuestInfo>                        BotchableQuestsOnDeath;                                     // 0x0110   (0x0010)  
	unsigned char                                      UnknownData02_6[0x30];                                      // 0x0120   (0x0030)  MISSED
	class UCalledShotData*                             CalledShot;                                                 // 0x0150   (0x0008)  
	unsigned char                                      UnknownData03_6[0x18];                                      // 0x0158   (0x0018)  MISSED
	SDK_UNDEFINED(80,418) /* TSet<ESkill> */           __um(TaggedSkills);                                         // 0x0170   (0x0050)  
	float                                              SkillCheckPercentToPlayer;                                  // 0x01C0   (0x0004)  
	int32_t                                            LevelsPerSkillIncrease;                                     // 0x01C4   (0x0004)  
	int32_t                                            SkillIncreaseAmount;                                        // 0x01C8   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x01CC   (0x0004)  MISSED
	TArray<class UCompanionMoraleEvent*>               MoraleEvents;                                               // 0x01D0   (0x0010)  
	TArray<class UAnimMontage*>                        InterruptionMontages;                                       // 0x01E0   (0x0010)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x01F0   (0x0008)  MISSED
	TArray<EWeaponPreference>                          PotentialWeaponPreferences;                                 // 0x01F8   (0x0010)  
	FLocString                                         WeaponPreferenceDescText;                                   // 0x0208   (0x0008)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0210   (0x0008)  MISSED
	bool                                               IsFollower;                                                 // 0x0218   (0x0001)  
	unsigned char                                      UnknownData07_7[0x17];                                      // 0x0219   (0x0017)  MISSED


	/// Functions
	// Function /Script/Indiana.CompanionComponent.UpdateCompanionState
	// void UpdateCompanionState();                                                                                             // [0x17d9ac0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionComponent.SetOffering
	// void SetOffering(class UClass* PickupClass);                                                                             // [0x17d9880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionComponent.OnPlayerExitedAcknowledgeZone
	// void OnPlayerExitedAcknowledgeZone(class AActor* ZoneOwner);                                                             // [0x17d95b0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionComponent.OnPlayerEnteredAcknowledgeZone
	// void OnPlayerEnteredAcknowledgeZone(class AActor* ZoneOwner);                                                            // [0x17d9520] Final|Native|Protected 
	// Function /Script/Indiana.CompanionComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x17d93c0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionComponent.DropOffering
	// void DropOffering();                                                                                                     // [0x17d8c40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CompanionDetails
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UCompanionDetails : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              TitleTextBlock;                                             // 0x0300   (0x0008)  
	class UTextBlockBase*                              TopBodyTextBlock;                                           // 0x0308   (0x0008)  
	class UTextBlockBase*                              BottomBodyTextBlock;                                        // 0x0310   (0x0008)  
};

/// Class /Script/Indiana.CompanionEntryWidget
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class UCompanionEntryWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UActorRenderWidget*                          CharacterRender;                                            // 0x0310   (0x0008)  
	class UButtonBase*                                 CharacterButton;                                            // 0x0318   (0x0008)  
	class UImage*                                      LockedCharacterImage;                                       // 0x0320   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0328   (0x0008)  
	class UButtonBase*                                 CustomizeButton;                                            // 0x0330   (0x0008)  
	class UVerticalBox*                                DetailsVerticalBox;                                         // 0x0338   (0x0008)  
};

/// Class /Script/Indiana.CompanionEquipmentBarWidget
/// Size: 0x0470 (1136 bytes) (0x000300 - 0x000470) align 8 MaxSize: 0x0470
class UCompanionEquipmentBarWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0xA0];                                      // 0x0300   (0x00A0)  MISSED
	class UItemViewerButtonWidget*                     Button0;                                                    // 0x03A0   (0x0008)  
	class UItemViewerButtonWidget*                     Button1;                                                    // 0x03A8   (0x0008)  
	class UItemViewerButtonWidget*                     Button2;                                                    // 0x03B0   (0x0008)  
	class UItemViewerButtonWidget*                     Button3;                                                    // 0x03B8   (0x0008)  
	class UDragContainerWidget*                        DragContainer0;                                             // 0x03C0   (0x0008)  
	class UDragContainerWidget*                        DragContainer1;                                             // 0x03C8   (0x0008)  
	class UDragContainerWidget*                        DragContainer2;                                             // 0x03D0   (0x0008)  
	class UDragContainerWidget*                        DragContainer3;                                             // 0x03D8   (0x0008)  
	class UVerticalBox*                                WeaponsVerticalBox;                                         // 0x03E0   (0x0008)  
	class UVerticalBox*                                ArmorVerticalBox;                                           // 0x03E8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x80];                                      // 0x03F0   (0x0080)  MISSED
};

/// Struct /Script/Indiana.PageDimensions
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FPageDimensions
{ 
	int32_t                                            VerticalIndent;                                             // 0x0000   (0x0004)  
	int32_t                                            Rows;                                                       // 0x0004   (0x0004)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	TArray<class UClass*>                              SupportedClasses;                                           // 0x0010   (0x0010)  
	TArray<EItemSorting>                               SupportedSortingOptions;                                    // 0x0020   (0x0010)  
};

/// Struct /Script/Indiana.ItemViewerInitializer
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 8 MaxSize: 0x00A0
struct FItemViewerInitializer
{ 
	bool                                               bShowAllCategory;                                           // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FPageDimensions                                    AllDimensions;                                              // 0x0008   (0x0030)  
	TArray<FPageDimensions>                            PageDimensions;                                             // 0x0038   (0x0010)  
	bool                                               bShowJunkCategory;                                          // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0049   (0x0007)  MISSED
	FPageDimensions                                    JunkDimensions;                                             // 0x0050   (0x0030)  
	TArray<class UTexture2D*>                          Images;                                                     // 0x0080   (0x0010)  
	TArray<FLocString>                                 PageHeaderText;                                             // 0x0090   (0x0010)  
};

/// Class /Script/Indiana.CompanionEquipmentWidget
/// Size: 0x0548 (1352 bytes) (0x0003A0 - 0x000548) align 8 MaxSize: 0x0548
class UCompanionEquipmentWidget : public UBaseInventoryItemManagement
{ 
public:
	class UCompanionEquipmentBarWidget*                EquipmentBar;                                               // 0x03A0   (0x0008)  
	FItemViewerInitializer                             WeaponsInitializer;                                         // 0x03A8   (0x00A0)  
	FItemViewerInitializer                             ArmorInitializer;                                           // 0x0448   (0x00A0)  
	SDK_UNDEFINED(16,419) /* TArray<TSoftObjectPtr<UClass*>> */ __um(ProhibitedCharacterClasses);                  // 0x04E8   (0x0010)  
	bool                                               bIsArmor;                                                   // 0x04F8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x04F9   (0x0007)  MISSED
	class UTextBlockBase*                              NoInventoryReasonText;                                      // 0x0500   (0x0008)  
	unsigned char                                      UnknownData01_7[0x40];                                      // 0x0508   (0x0040)  MISSED


	/// Functions
	// Function /Script/Indiana.CompanionEquipmentWidget.OnItemRemovedFromPlayerInventory
	// void OnItemRemovedFromPlayerInventory(FItemStack& ItemStack);                                                            // [0x17dd770] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.CompanionEquipmentWidget.OnItemAddedToPlayerInventory
	// void OnItemAddedToPlayerInventory(FItemStack& ItemStack);                                                                // [0x17dd6d0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.CompanionEquipmentWidget.OnDragDrop_EquipItem
	// void OnDragDrop_EquipItem(class UIndianaDragDropOperation* Operation);                                                   // [0x17dd5b0] Final|Native|Protected 
};

/// Class /Script/Indiana.CompanionFollowBehaviorStateInfo
/// Size: 0x0138 (312 bytes) (0x000120 - 0x000138) align 8 MaxSize: 0x0138
class UCompanionFollowBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0120   (0x0018)  MISSED
};

/// Class /Script/Indiana.CompanionFollowRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class UCompanionFollowRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
	bool                                               bClearDistantTargets;                                       // 0x0068   (0x0001)  
	bool                                               bIsCompanionCommand;                                        // 0x0069   (0x0001)  
	bool                                               bRetreating;                                                // 0x006A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x006B   (0x0005)  MISSED
};

/// Class /Script/Indiana.CompanionManager
/// Size: 0x0230 (560 bytes) (0x000030 - 0x000230) align 8 MaxSize: 0x0230
class UCompanionManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x200];                                     // 0x0030   (0x0200)  MISSED


	/// Functions
	// Function /Script/Indiana.CompanionManager.SetCompanionWantsToTalk
	// void SetCompanionWantsToTalk(ESpecialObsidianID Companion, bool bWantsToTalk);                                           // [0x17de1b0] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.IsCompanionUnlocked
	// bool IsCompanionUnlocked(ESpecialObsidianID Companion);                                                                  // [0x17dd1e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.IsCompanionInRequestedParty
	// bool IsCompanionInRequestedParty(ESpecialObsidianID Companion);                                                          // [0x17dd160] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.IsCompanionInActiveParty
	// bool IsCompanionInActiveParty(ESpecialObsidianID Companion);                                                             // [0x17dd0e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.IsCompanionDismissed
	// bool IsCompanionDismissed(ESpecialObsidianID Companion);                                                                 // [0x17dd060] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.HasPlayerUnlockedCompanions
	// bool HasPlayerUnlockedCompanions();                                                                                      // [0x17dd030] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.GetCompanionWantsToTalk
	// bool GetCompanionWantsToTalk(ESpecialObsidianID Companion);                                                              // [0x17dcfb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.GetCompanionMorale
	// float GetCompanionMorale(ESpecialObsidianID Companion);                                                                  // [0x17dcf30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.GetCompanionGuid
	// FGuid GetCompanionGuid(ESpecialObsidianID SpecialID);                                                                    // [0x17dcea0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.CompanionManager.DebugUnlockCompanion
	// void DebugUnlockCompanion(ESpecialObsidianID Companion);                                                                 // [0x17dcd10] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.DebugAddCompanionMorale
	// void DebugAddCompanionMorale(char Companion, float MoraleAmount, bool bPositiveMorale);                                  // [0x17dcbf0] Final|Exec|Native|Public 
	// Function /Script/Indiana.CompanionManager.ChangeCompanionMorale
	// void ChangeCompanionMorale(ESpecialObsidianID Companion, EMoraleContribution Contribution, float MoraleAmount, bool bPositiveMorale, bool bOnlyActivePartyMembers); // [0x17dca40] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CompanionManagerComponent
/// Size: 0x0190 (400 bytes) (0x0000E0 - 0x000190) align 8 MaxSize: 0x0190
class UCompanionManagerComponent : public UActorComponent
{ 
public:
	TWeakObjectPtr<class AIndianaAiCharacter*>         ActiveFollower;                                             // 0x00E0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x00E8   (0x0008)  MISSED
	SDK_UNDEFINED(16,420) /* TArray<TWeakObjectPtr<AIndianaAiCharacter*>> */ __um(ActiveCompanions);               // 0x00F0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x40];                                      // 0x0100   (0x0040)  MISSED
	SDK_UNDEFINED(16,421) /* FMulticastInlineDelegate */ __um(OnDynamicRegisterCompanion);                         // 0x0140   (0x0010)  
	TArray<class UClass*>                              StartingCompanionList;                                      // 0x0150   (0x0010)  
	unsigned char                                      UnknownData02_6[0x18];                                      // 0x0160   (0x0018)  MISSED
	SDK_UNDEFINED(16,422) /* FMulticastInlineDelegate */ __um(OnStealthChanged);                                   // 0x0178   (0x0010)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0188   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.CompanionManagerComponent.SetCompanionOutlineMode
	// void SetCompanionOutlineMode(ECompanionOutlineMode OutlineMode);                                                         // [0x17de130] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.SendCharacterToShip
	// void SendCharacterToShip(class AIndianaAiCharacter* Companion);                                                          // [0x17de0a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManagerComponent.ScriptRemoveCompanionFromParty
	// void ScriptRemoveCompanionFromParty(class AIndianaAiCharacter* Companion);                                               // [0x17de020] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManagerComponent.ScriptAddCompanionToParty
	// void ScriptAddCompanionToParty(class AIndianaAiCharacter* Companion);                                                    // [0x17ddfa0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManagerComponent.OnRestartController
	// void OnRestartController(class AIndianaAiCharacter* Character);                                                          // [0x17dddb0] Final|Native|Private 
	// Function /Script/Indiana.CompanionManagerComponent.OnPlayerLevelChanged
	// void OnPlayerLevelChanged(int32_t PlayerLevel);                                                                          // [0x17ddd20] Final|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.OnPlayerIndividualDetected
	// void OnPlayerIndividualDetected(class AIndianaAiCharacter* Detector);                                                    // [0x17ddc90] Final|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.OnPlayerCinematicModeChanged
	// void OnPlayerCinematicModeChanged(bool bCinematicModeEnabled);                                                           // [0x17ddb30] Final|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x17dd900] Final|Native|Private 
	// Function /Script/Indiana.CompanionManagerComponent.OnKill
	// void OnKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                    // [0x17dd810] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.CompanionManagerComponent.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty NewDifficulty);                                                                 // [0x17dd530] Final|Native|Private 
	// Function /Script/Indiana.CompanionManagerComponent.OnDeath
	// void OnDeath(FCauseDamageInfo& DamageInfo);                                                                              // [0x17dd490] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.CompanionManagerComponent.OnCauseDamage
	// void OnCauseDamage(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x17dd290] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.CompanionManagerComponent.IsPartyFull
	// bool IsPartyFull();                                                                                                      // [0x17dd260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CompanionManagerComponent.GetCompanionFromSlot
	// class AIndianaAiCharacter* GetCompanionFromSlot(ECompanionSlot Slot);                                                    // [0x17dce10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CompanionManagerComponent.GetActiveCompanionWithSpecialID
	// class AIndianaAiCharacter* GetActiveCompanionWithSpecialID(ESpecialObsidianID SpecialID);                                // [0x17dcd80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CompanionManagerComponent.DebugKillCompanions
	// void DebugKillCompanions();                                                                                              // [0xbb4890] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.AddPerkPointsToCompanions
	// void AddPerkPointsToCompanions(int32_t Points);                                                                          // [0x17dc9b0] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.CompanionMeterStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UCompanionMeterStatusEffect : public UStatusEffect
{ 
public:
	float                                              Adjustment;                                                 // 0x0188   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x018C   (0x0004)  MISSED
};

/// Class /Script/Indiana.CompanionMoraleEvent
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align 8 MaxSize: 0x0058
class UCompanionMoraleEvent : public UObject
{ 
public:
	EMoraleContribution                                Contribution;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              MoraleAmount;                                               // 0x0034   (0x0004)  
	bool                                               bPositiveMoral;                                             // 0x0038   (0x0001)  
	bool                                               bTriggerOnPlayer;                                           // 0x0039   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x003A   (0x0006)  MISSED
	class UEventListener*                              EventListener;                                              // 0x0040   (0x0008)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0048   (0x0010)  MISSED
};

/// Class /Script/Indiana.CompanionMoraleStatusEffect
/// Size: 0x0198 (408 bytes) (0x000188 - 0x000198) align 8 MaxSize: 0x0198
class UCompanionMoraleStatusEffect : public UStatusEffect
{ 
public:
	EMoraleContribution                                Contribution;                                               // 0x0188   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0189   (0x0003)  MISSED
	float                                              MoraleAmount;                                               // 0x018C   (0x0004)  
	bool                                               bPositiveMoral;                                             // 0x0190   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0191   (0x0007)  MISSED
};

/// Class /Script/Indiana.CompanionMoveToWidget
/// Size: 0x0308 (776 bytes) (0x000300 - 0x000308) align 8 MaxSize: 0x0308
class UCompanionMoveToWidget : public UIndianaUserWidget
{ 
public:
	class UBorder*                                     RootBorder;                                                 // 0x0300   (0x0008)  


	/// Functions
	// Function /Script/Indiana.CompanionMoveToWidget.OnNewLocation
	// void OnNewLocation();                                                                                                    // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.CompanionMoveToWidget.OnMoveToCancelled
	// void OnMoveToCancelled();                                                                                                // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.CompanionMoveToWidgetComponent
/// Size: 0x0690 (1680 bytes) (0x000670 - 0x000690) align 16 MaxSize: 0x0690
class UCompanionMoveToWidgetComponent : public UIndianaWidgetComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0670   (0x0020)  MISSED
};

/// Class /Script/Indiana.CompanionOverviewWidget
/// Size: 0x03C0 (960 bytes) (0x000300 - 0x0003C0) align 8 MaxSize: 0x03C0
class UCompanionOverviewWidget : public UIndianaUserWidget
{ 
public:
	class UOverlay*                                    PortraitInfo;                                               // 0x0300   (0x0008)  
	class UImage*                                      CompanionPortraitImage;                                     // 0x0308   (0x0008)  
	class UImage*                                      CompanionBulbImage;                                         // 0x0310   (0x0008)  
	class UImage*                                      CompanionActionImage;                                       // 0x0318   (0x0008)  
	class UImage*                                      CompanionTalkImage;                                         // 0x0320   (0x0008)  
	class UImage*                                      HealthBarImage;                                             // 0x0328   (0x0008)  
	class UOverlay*                                    ContentContainerOverlay;                                    // 0x0330   (0x0008)  
	class UTextBlockBase*                              CompanionName;                                              // 0x0338   (0x0008)  
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0340   (0x0008)  
	class UStatusEffectBarWidget*                      StatusEffectBar;                                            // 0x0348   (0x0008)  
	class UTexture2D*                                  MoveToImage;                                                // 0x0350   (0x0008)  
	class UTexture2D*                                  FollowImage;                                                // 0x0358   (0x0008)  
	float                                              MeterInnerAnimTime;                                         // 0x0360   (0x0004)  
	int32_t                                            MeterInnerAnimNumFrames;                                    // 0x0364   (0x0004)  
	unsigned char                                      UnknownData00_7[0x58];                                      // 0x0368   (0x0058)  MISSED


	/// Functions
	// Function /Script/Indiana.CompanionOverviewWidget.OnNoStatusEffect
	// void OnNoStatusEffect();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionOverviewWidget.OnMadeInactive
	// void OnMadeInactive();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionOverviewWidget.OnMadeActive
	// void OnMadeActive();                                                                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionOverviewWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x17dd640] Final|Native|Protected 
	// Function /Script/Indiana.CompanionOverviewWidget.OnFirstStatusEffect
	// void OnFirstStatusEffect();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionOverviewWidget.OnCompanionStatusModeChanged
	// void OnCompanionStatusModeChanged(int32_t ModeIn);                                                                       // [0x17dd400] Final|Native|Protected 
	// Function /Script/Indiana.CompanionOverviewWidget.OnCombatStateChanged
	// void OnCombatStateChanged(bool bCombatIn, bool bRestoring);                                                              // [0x17dd330] Final|Native|Protected 
};

/// Class /Script/Indiana.CompanionPerksWidget
/// Size: 0x03B8 (952 bytes) (0x000300 - 0x0003B8) align 8 MaxSize: 0x03B8
class UCompanionPerksWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0300   (0x0030)  MISSED
	TArray<float>                                      TierHeights;                                                // 0x0330   (0x0010)  
	float                                              NormalPerkOverlayHeight;                                    // 0x0340   (0x0004)  
	float                                              ExtendedPerkOverlayHeight;                                  // 0x0344   (0x0004)  
	class UImage*                                      PerkOverlay;                                                // 0x0348   (0x0008)  
	class UTextBlockBase*                              PointsAvailableTextBlock;                                   // 0x0350   (0x0008)  
	class UTextBlockBase*                              PerkTotalTextBlock;                                         // 0x0358   (0x0008)  
	class UTextBlockBase*                              PerkTotalValueTextBlock;                                    // 0x0360   (0x0008)  
	class UPerksListWidget*                            List;                                                       // 0x0368   (0x0008)  
	class UCharacterDescriptionPanel*                  DescriptionPanel;                                           // 0x0370   (0x0008)  
	class UImage*                                      TierBottomImage;                                            // 0x0378   (0x0008)  
	class USizeBox*                                    DynamicSizeBox;                                             // 0x0380   (0x0008)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x0388   (0x0030)  MISSED
};

/// Struct /Script/Indiana.CompanionEQSRequest
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FCompanionEQSRequest
{ 
	class UEQSRequest_IndianaBase*                     EQSRequest;                                                 // 0x0000   (0x0008)  
	float                                              CloseRadius;                                                // 0x0008   (0x0004)  
	float                                              Radius;                                                     // 0x000C   (0x0004)  
	float                                              FarRadius;                                                  // 0x0010   (0x0004)  
	float                                              IdealAngle;                                                 // 0x0014   (0x0004)  
	float                                              MinAngle;                                                   // 0x0018   (0x0004)  
	float                                              MovementDistanceThreshold;                                  // 0x001C   (0x0004)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0020   (0x0008)  MISSED
};

/// Struct /Script/Indiana.ConversationCompanionConfig
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 MaxSize: 0x0018
struct FConversationCompanionConfig
{ 
	FVector                                            Companion1IdealLocation;                                    // 0x0000   (0x000C)  
	FVector                                            Companion2IdealLocation;                                    // 0x000C   (0x000C)  
};

/// Class /Script/Indiana.CompanionPositionComponent
/// Size: 0x0258 (600 bytes) (0x0000E0 - 0x000258) align 8 MaxSize: 0x0258
class UCompanionPositionComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x00E0   (0x0010)  MISSED
	TArray<class UCompanionPositionData*>              CompanionPositions;                                         // 0x00F0   (0x0010)  
	class UCompanionPositionData*                      FollowerPositionData;                                       // 0x0100   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0108   (0x0004)  MISSED
	float                                              CompanionMovementDistanceThreshold;                         // 0x010C   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0110   (0x0004)  MISSED
	float                                              InvalidPathTeleportTime;                                    // 0x0114   (0x0004)  
	float                                              MaxPathDistanceThreshold;                                   // 0x0118   (0x0004)  
	float                                              MaxLinearDistanceThreshold;                                 // 0x011C   (0x0004)  
	float                                              MinLinearDistanceToAllowTeleport;                           // 0x0120   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	float                                              MinLinearDistanceToIgnorePlayerFacingCurrentLocation;       // 0x0128   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x012C   (0x0004)  MISSED
	float                                              MinLinearDistanceToIgnorePlayerFacingTeleportLocation;      // 0x0130   (0x0004)  
	unsigned char                                      UnknownData05_6[0x34];                                      // 0x0134   (0x0034)  MISSED
	FCompanionEQSRequest                               DefaultEQS;                                                 // 0x0168   (0x0028)  
	FCompanionEQSRequest                               StealthEQS;                                                 // 0x0190   (0x0028)  
	FCompanionEQSRequest                               ElevatorEQS;                                                // 0x01B8   (0x0028)  
	float                                              PostFallMovementDistanceThreshold;                          // 0x01E0   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x01E4   (0x0004)  MISSED
	TArray<FConversationCompanionConfig>               ConversationConfigs;                                        // 0x01E8   (0x0010)  
	unsigned char                                      UnknownData07_6[0x10];                                      // 0x01F8   (0x0010)  MISSED
	FCompanionEQSRequest                               MoveToEQS;                                                  // 0x0208   (0x0028)  
	unsigned char                                      UnknownData08_7[0x28];                                      // 0x0230   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.CompanionPositionComponent.RequestForceTeleportCompanions
	// void RequestForceTeleportCompanions(FVector& Position1, FVector& Position2);                                             // [0x17dded0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CompanionPositionComponent.OnStealthChange
	// void OnStealthChange(bool bStealthed);                                                                                   // [0x17dde40] Final|Native|Protected 
	// Function /Script/Indiana.CompanionPositionComponent.OnPlayerConversationChange
	// void OnPlayerConversationChange(class UConversationInstance* Instance, bool bEntered);                                   // [0x17ddbc0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionPositionComponent.OnOccupiedElevatorMove
	// void OnOccupiedElevatorMove(class AElevator* Elevator);                                                                  // [0x17ddaa0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionPositionComponent.OnOccupiedElevatorChange
	// void OnOccupiedElevatorChange(class AElevator* Elevator, bool bOccupied);                                                // [0x17dd9d0] Final|Native|Protected 
};

/// Class /Script/Indiana.CompanionPositionData
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align 8 MaxSize: 0x0078
class UCompanionPositionData : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0030   (0x0018)  MISSED
	class AActor*                                      PositionActor;                                              // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0050   (0x0028)  MISSED
};

/// Class /Script/Indiana.CompanionScreenWrapperWidget
/// Size: 0x0348 (840 bytes) (0x000308 - 0x000348) align 8 MaxSize: 0x0348
class UCompanionScreenWrapperWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0308   (0x0010)  MISSED
	class UCompanionsWidget*                           Companions;                                                 // 0x0318   (0x0008)  
	class UActorRenderWidget*                          ActorRender;                                                // 0x0320   (0x0008)  
	class UItemViewerWidget*                           CompanionItemViewer;                                        // 0x0328   (0x0008)  
	TArray<FPageDimensions>                            PageDimensions;                                             // 0x0330   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0340   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.CompanionScreenWrapperWidget.FadeInSharedItemViewer
	// void FadeInSharedItemViewer();                                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionScreenWrapperWidget.AddItemToItemViewer
	// void AddItemToItemViewer(FItemStack& ItemStack);                                                                         // [0x17e1520] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.CompanionSelectionWidget
/// Size: 0x03B0 (944 bytes) (0x000308 - 0x0003B0) align 8 MaxSize: 0x03B0
class UCompanionSelectionWidget : public UIndianaInterfaceUserWidget
{ 
public:
	SDK_UNDEFINED(16,423) /* FMulticastInlineDelegate */ __um(OnCompanionSelectionConfirmed);                      // 0x0308   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0318   (0x0010)  MISSED
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0328   (0x0008)  
	class UCompanionEntryWidget*                       CompanionEntry0;                                            // 0x0330   (0x0008)  
	class UCompanionEntryWidget*                       CompanionEntry1;                                            // 0x0338   (0x0008)  
	class UCompanionEntryWidget*                       CompanionEntry2;                                            // 0x0340   (0x0008)  
	class UCompanionEntryWidget*                       CompanionEntry3;                                            // 0x0348   (0x0008)  
	class UCompanionEntryWidget*                       CompanionEntry4;                                            // 0x0350   (0x0008)  
	class UCompanionEntryWidget*                       CompanionEntry5;                                            // 0x0358   (0x0008)  
	class UTextBlockBase*                              EncumberedWarningText;                                      // 0x0360   (0x0008)  
	class UTextBlockBase*                              EncumberenceValueText;                                      // 0x0368   (0x0008)  
	TArray<class UCompanionEntryWidget*>               CompanionWidgets;                                           // 0x0370   (0x0010)  
	TArray<ESpecialObsidianID>                         DisplayOrder;                                               // 0x0380   (0x0010)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0390   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.CompanionSelectionWidget.SetCharacterSelected
	// void SetCharacterSelected(int32_t CharacterIndex, bool bSelected);                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionSelectionWidget.SetCharacterAvailable
	// void SetCharacterAvailable(int32_t CharacterIndex, bool bUsable);                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionSelectionWidget.SelectionFailed
	// void SelectionFailed(int32_t CharacterIndex);                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.CompanionSkillSummary
/// Size: 0x0358 (856 bytes) (0x000300 - 0x000358) align 8 MaxSize: 0x0358
class UCompanionSkillSummary : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	class UGenericListEntryWidget*                     Skill0;                                                     // 0x0318   (0x0008)  
	class UGenericListEntryWidget*                     Skill1;                                                     // 0x0320   (0x0008)  
	class UGenericListEntryWidget*                     Skill2;                                                     // 0x0328   (0x0008)  
	class UGenericListEntryWidget*                     Ability0;                                                   // 0x0330   (0x0008)  
	class UGenericListEntryWidget*                     Ability1;                                                   // 0x0338   (0x0008)  
	class UGenericListEntryWidget*                     Ability2;                                                   // 0x0340   (0x0008)  
	class UStatsPerkSummaryWidget*                     StatsPerkSummary;                                           // 0x0348   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0350   (0x0008)  MISSED
};

/// Class /Script/Indiana.CompanionStatSummary
/// Size: 0x0348 (840 bytes) (0x000300 - 0x000348) align 8 MaxSize: 0x0348
class UCompanionStatSummary : public UIndianaUserWidget
{ 
public:
	class UGenericListEntryWidget*                     Level;                                                      // 0x0300   (0x0008)  
	class UGenericListEntryWidget*                     Health;                                                     // 0x0308   (0x0008)  
	class UGenericListEntryWidget*                     HelmetArmor;                                                // 0x0310   (0x0008)  
	class UGenericListEntryWidget*                     BodyArmor;                                                  // 0x0318   (0x0008)  
	class UGenericListEntryWidget*                     MeleeDamage;                                                // 0x0320   (0x0008)  
	class UGenericListEntryWidget*                     RangedDamage;                                               // 0x0328   (0x0008)  
	class UCompanionBehaviorsWidget*                   CompanionBehaviors;                                         // 0x0330   (0x0008)  
	class UCharacterStatusEffectsWidget*               CompanionStatusEffects;                                     // 0x0338   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0340   (0x0008)  MISSED
};

/// Class /Script/Indiana.CompanionStatsWidget
/// Size: 0x03B0 (944 bytes) (0x000300 - 0x0003B0) align 8 MaxSize: 0x03B0
class UCompanionStatsWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x78];                                      // 0x0300   (0x0078)  MISSED
	class UCompanionDetails*                           CompanionDetails;                                           // 0x0378   (0x0008)  
	class UCompanionStatSummary*                       CompanionStatSummary;                                       // 0x0380   (0x0008)  
	class UCompanionSkillSummary*                      CompanionSkillSummary;                                      // 0x0388   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0390   (0x0020)  MISSED
};

/// Class /Script/Indiana.CompanionsWidget
/// Size: 0x03B0 (944 bytes) (0x000300 - 0x0003B0) align 8 MaxSize: 0x03B0
class UCompanionsWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0300   (0x0030)  MISSED
	class UCompanionStatsWidget*                       StatsWidget;                                                // 0x0330   (0x0008)  
	class UCompanionPerksWidget*                       PerksWidget;                                                // 0x0338   (0x0008)  
	class UCompanionEquipmentWidget*                   WeaponsEquipmentWidget;                                     // 0x0340   (0x0008)  
	class UCompanionEquipmentWidget*                   ArmorEquipmentWidget;                                       // 0x0348   (0x0008)  
	class UNavigationGroupWidget*                      NavigationBar;                                              // 0x0350   (0x0008)  
	class UScrollBox*                                  PageScrollBox;                                              // 0x0358   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelWidget;                                           // 0x0360   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0368   (0x0008)  
	class UScrollingWidgetGroup*                       ScrollingTransitionGroup;                                   // 0x0370   (0x0008)  
	bool                                               bFillEmptyNames;                                            // 0x0378   (0x0001)  
	bool                                               bShowBackPrompt;                                            // 0x0379   (0x0001)  
	bool                                               bIsLedger;                                                  // 0x037A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x037B   (0x0005)  MISSED
	TArray<class UTexture2D*>                          CategoryImages;                                             // 0x0380   (0x0010)  
	unsigned char                                      UnknownData02_7[0x20];                                      // 0x0390   (0x0020)  MISSED
};

/// Struct /Script/Indiana.EntryData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FEntryData
{ 
	class UMaterialInstance*                           MaterialInstance;                                           // 0x0000   (0x0008)  
	class UTexture2D*                                  InWorldBeaconImage;                                         // 0x0008   (0x0008)  
};

/// Class /Script/Indiana.CompassEntryData
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UCompassEntryData : public UDataAsset
{ 
public:
	TMap<EUIMarkerType, FEntryData>                    EntryDataMap;                                               // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.CompassEntryWidget
/// Size: 0x02A0 (672 bytes) (0x000278 - 0x0002A0) align 8 MaxSize: 0x02A0
class UCompassEntryWidget : public UUserWidget
{ 
public:
	float                                              Orientation;                                                // 0x0278   (0x0004)  
	bool                                               bIsPlayerFacingEntry;                                       // 0x027C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x027D   (0x0003)  MISSED
	float                                              EntryDistance;                                              // 0x0280   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0284   (0x0004)  MISSED
	class UMaterialInstanceDynamic*                    ImageMaterial;                                              // 0x0288   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0290   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0298   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.CompassEntryWidget.InitProperties
	// void InitProperties(FEntryData& EntryData);                                                                              // [0x1c5deb0] Event|Public|HasOutParms|BlueprintEvent 
};

/// Struct /Script/Indiana.CompassAreaBeaconEaseSetting
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FCompassAreaBeaconEaseSetting
{ 
	EEaseType                                          EaseType;                                                   // 0x0000   (0x0004)  
	float                                              EaseExponent;                                               // 0x0004   (0x0004)  
};

/// Struct /Script/Indiana.DistanceRatioToSpeedPair
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FDistanceRatioToSpeedPair
{ 
	float                                              DistanceRatio;                                              // 0x0000   (0x0004)  
	float                                              Duration;                                                   // 0x0004   (0x0004)  
};

/// Class /Script/Indiana.CompassWidget
/// Size: 0x10F0 (4336 bytes) (0x000300 - 0x0010F0) align 8 MaxSize: 0x10F0
class UCompassWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x4];                                       // 0x0300   (0x0004)  MISSED
	float                                              Orientation;                                                // 0x0304   (0x0004)  
	float                                              HostileInDistance;                                          // 0x0308   (0x0004)  
	float                                              HostileOutDistance;                                         // 0x030C   (0x0004)  
	float                                              HostilePacifistInDistance;                                  // 0x0310   (0x0004)  
	float                                              HostilePacifistOutDistance;                                 // 0x0314   (0x0004)  
	float                                              NonHostileInDistance;                                       // 0x0318   (0x0004)  
	float                                              NonHostileOutDistance;                                      // 0x031C   (0x0004)  
	float                                              UpdateHostileProximitySetTime;                              // 0x0320   (0x0004)  
	float                                              POIInDistance;                                              // 0x0324   (0x0004)  
	float                                              POIOutDistance;                                             // 0x0328   (0x0004)  
	float                                              UpdatePOIMapTime;                                           // 0x032C   (0x0004)  
	uint32_t                                           NumPooledEntries;                                           // 0x0330   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0334   (0x0004)  MISSED
	class UCanvasPanel*                                BeaconCanvas;                                               // 0x0338   (0x0008)  
	class USizeBox*                                    ContentAnimationSizeBox;                                    // 0x0340   (0x0008)  
	class UBorder*                                     AnimationBorder;                                            // 0x0348   (0x0008)  
	class UImage*                                      EnemiesLeftImage;                                           // 0x0350   (0x0008)  
	class UImage*                                      EnemiesRightImage;                                          // 0x0358   (0x0008)  
	class UClass*                                      BeaconWidgetClass;                                          // 0x0360   (0x0008)  
	TArray<class UCompassEntryWidget*>                 AvailableCompassWidgets;                                    // 0x0368   (0x0010)  
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0378   (0x0008)  
	class UImage*                                      AreaBeaconLight;                                            // 0x0380   (0x0008)  
	TMap<class AIndianaAiCharacter*, EUIMarkerType>    CompassStateMap;                                            // 0x0388   (0x0050)  
	TMap<class UPointOfInterestData*, EPointOfInterestState> PointOfInterestStateMap;                              // 0x03D8   (0x0050)  
	TMap<class UPointOfInterestData*, class APointOfInterest*> PointOfInterestActorMap;                            // 0x0428   (0x0050)  
	FCompassAreaBeaconEaseSetting                      AreaBeaconFadeIn;                                           // 0x0478   (0x0008)  
	FCompassAreaBeaconEaseSetting                      AreaBeaconFadeOut;                                          // 0x0480   (0x0008)  
	float                                              AreaBeaconFadeDuration;                                     // 0x0488   (0x0004)  
	FCompassAreaBeaconEaseSetting                      AreaBeaconMovement;                                         // 0x048C   (0x0008)  
	FVector2D                                          AreaBeaconLightClamp;                                       // 0x0494   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x049C   (0x0004)  MISSED
	TArray<FDistanceRatioToSpeedPair>                  AreaBeaconDistanceRatioToSpeed;                             // 0x04A0   (0x0010)  
	float                                              AreaBeaconFallbackAnimationDuration;                        // 0x04B0   (0x0004)  
	unsigned char                                      UnknownData03_7[0xC3C];                                     // 0x04B4   (0x0C3C)  MISSED


	/// Functions
	// Function /Script/Indiana.CompassWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bHUDVisible);                                                                           // [0x17e1a50] Final|Native|Protected 
	// Function /Script/Indiana.CompassWidget.OnEnemyRemoved
	// void OnEnemyRemoved(class AIndianaAiCharacter* Detector);                                                                // [0x17e19c0] Final|Native|Public  
	// Function /Script/Indiana.CompassWidget.OnEnemyAdded
	// void OnEnemyAdded(class AIndianaAiCharacter* Detector);                                                                  // [0x17e1930] Final|Native|Public  
	// Function /Script/Indiana.CompassWidget.OnCompassSettingChanged
	// void OnCompassSettingChanged(int32_t CompassVisibilityModeIn);                                                           // [0x17e1810] Final|Native|Protected 
};

/// Class /Script/Indiana.CompensateForTTDStatusEffect
/// Size: 0x01A0 (416 bytes) (0x000188 - 0x0001A0) align 8 MaxSize: 0x01A0
class UCompensateForTTDStatusEffect : public UStatusEffect
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0188   (0x0018)  MISSED
};

/// Class /Script/Indiana.ComponentDebugInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UComponentDebugInterface : public UInterface
{ 
public:
};

/// Class /Script/Indiana.ComputerTerminal
/// Size: 0x0430 (1072 bytes) (0x0002B8 - 0x000430) align 8 MaxSize: 0x0430
class AComputerTerminal : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x40];                                      // 0x02B8   (0x0040)  MISSED
	bool                                               bSkipAutomaticConversation;                                 // 0x02F8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x02F9   (0x0007)  MISSED
	SDK_UNDEFINED(16,424) /* FMulticastInlineDelegate */ __um(OnComputerStateChange);                              // 0x0300   (0x0010)  
	SDK_UNDEFINED(16,425) /* FMulticastInlineDelegate */ __um(OnComputerUse);                                      // 0x0310   (0x0010)  
	SDK_UNDEFINED(16,426) /* FMulticastInlineDelegate */ __um(OnComputerUnlockAttemptedLocked);                    // 0x0320   (0x0010)  
	SDK_UNDEFINED(16,427) /* FMulticastInlineDelegate */ __um(OnComputerInsufficientSkill);                        // 0x0330   (0x0010)  
	SDK_UNDEFINED(16,428) /* FMulticastInlineDelegate */ __um(OnComputerUnlocked);                                 // 0x0340   (0x0010)  
	SDK_UNDEFINED(16,429) /* FMulticastInlineDelegate */ __um(OnComputerLocked);                                   // 0x0350   (0x0010)  
	SDK_UNDEFINED(16,430) /* FMulticastInlineDelegate */ __um(OnComputerHackStart);                                // 0x0360   (0x0010)  
	SDK_UNDEFINED(16,431) /* FMulticastInlineDelegate */ __um(OnComputerHackSuccess);                              // 0x0370   (0x0010)  
	SDK_UNDEFINED(16,432) /* FMulticastInlineDelegate */ __um(OnComputerHackInterrupted);                          // 0x0380   (0x0010)  
	SDK_UNDEFINED(16,433) /* FMulticastInlineDelegate */ __um(OnComputerHackLoopStop);                             // 0x0390   (0x0010)  
	EComputerLockState                                 InitialState;                                               // 0x03A0   (0x0001)  
	bool                                               bCanHack;                                                   // 0x03A1   (0x0001)  
	EOCLDifficulty                                     HackDifficulty;                                             // 0x03A2   (0x0001)  
	unsigned char                                      UnknownData02_6[0x5];                                       // 0x03A3   (0x0005)  MISSED
	class UClass*                                      HackItem;                                                   // 0x03A8   (0x0008)  
	class UClass*                                      KeyItem;                                                    // 0x03B0   (0x0008)  
	bool                                               bRemoveKeyAfterUse;                                         // 0x03B8   (0x0001)  
	bool                                               bIgnoreForCrime;                                            // 0x03B9   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x03BA   (0x0006)  MISSED
	FSpeakerGameDataReferenceID                        SpeakerReference;                                           // 0x03C0   (0x0018)  
	class USceneComponent*                             SceneComponent;                                             // 0x03D8   (0x0008)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x03E0   (0x0008)  
	class UAkComponent*                                AkComponent;                                                // 0x03E8   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x03F0   (0x0008)  
	class UConversationRegisterComponent*              ConversationComponent;                                      // 0x03F8   (0x0008)  
	class UComputerTerminalWidgetComponent*            TerminalWidgetComponent;                                    // 0x0400   (0x0008)  
	unsigned char                                      UnknownData04_7[0x28];                                      // 0x0408   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.ComputerTerminal.UnlockComputer
	// void UnlockComputer(bool bFireComputerUnlockedEvent);                                                                    // [0x17e1be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminal.LockComputer
	// void LockComputer(bool bFireComputerLockedEvent);                                                                        // [0x17e1780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminal.GetExactHackDifficulty
	// char GetExactHackDifficulty();                                                                                           // [0x17e1760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComputerTerminal.GetCurrentState
	// EComputerLockState GetCurrentState();                                                                                    // [0x17e1740] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminal.AttemptUse
	// EComputerTerminalResult AttemptUse(class AActor* Initiator, bool bForce);                                                // [0x17e1660] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminal.AttemptUnlock
	// EComputerTerminalResult AttemptUnlock(class AActor* Initiator);                                                          // [0x17e15c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InteractableAudioComponent
/// Size: 0x0150 (336 bytes) (0x0000E0 - 0x000150) align 8 MaxSize: 0x0150
class UInteractableAudioComponent : public UActorComponent
{ 
public:
	TMap<FName, class UAkPlaySoundEventEffect*>        NamedEvents;                                                // 0x00E0   (0x0050)  
	FEventEffectState                                  EventEffectState;                                           // 0x0130   (0x0020)  


	/// Functions
	// Function /Script/Indiana.InteractableAudioComponent.StopCustomEventEffect
	// void StopCustomEventEffect(FName& Name);                                                                                 // [0x186aef0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.InteractableAudioComponent.PlayCustomEventEffect
	// void PlayCustomEventEffect(FName& Name);                                                                                 // [0x186a930] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.ComputerTerminalAudioComponent
/// Size: 0x01A0 (416 bytes) (0x000150 - 0x0001A0) align 8 MaxSize: 0x01A0
class UComputerTerminalAudioComponent : public UInteractableAudioComponent
{ 
public:
	TMap<EComputerTerminalEventType, class UAkPlaySoundEventEffect*> AudioEvents;                                  // 0x0150   (0x0050)  


	/// Functions
	// Function /Script/Indiana.ComputerTerminalAudioComponent.Stop
	// void Stop(EComputerTerminalEventType Type);                                                                              // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminalAudioComponent.Play
	// void Play(EComputerTerminalEventType Type);                                                                              // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ComputerTerminalContainerWidget
/// Size: 0x0328 (808 bytes) (0x000300 - 0x000328) align 8 MaxSize: 0x0328
class UComputerTerminalContainerWidget : public UIndianaUserWidget
{ 
public:
	class UImage*                                      ComputerLockedImage;                                        // 0x0300   (0x0008)  
	class UImage*                                      ComputerUnlockedImage;                                      // 0x0308   (0x0008)  
	class UBorder*                                     ContentContainer;                                           // 0x0310   (0x0008)  
	class UClass*                                      ConversationWidgetClass;                                    // 0x0318   (0x0008)  
	class UComputerTerminalWidget*                     ContentWidget;                                              // 0x0320   (0x0008)  


	/// Functions
	// Function /Script/Indiana.ComputerTerminalContainerWidget.OnConversationStateChange
	// void OnConversationStateChange(bool bHasStarted);                                                                        // [0x17e18a0] Final|Native|Protected 
};

/// Struct /Script/Indiana.ComputerBrandData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FComputerBrandData
{ 
	TArray<FLocString>                                 BrandSlogans;                                               // 0x0000   (0x0010)  
	TWeakObjectPtr<class UTexture2D*>                  BrandIcon;                                                  // 0x0010   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0018   (0x0020)  MISSED
	FLocString                                         BrandName;                                                  // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.ComputerTerminalHeaderData
/// Size: 0x00B8 (184 bytes) (0x000038 - 0x0000B8) align 8 MaxSize: 0x00B8
class UComputerTerminalHeaderData : public UDataAsset
{ 
public:
	TMap<EComputerType, FComputerBrandData>            Brands;                                                     // 0x0038   (0x0050)  
	TWeakObjectPtr<class UComputerTerminalHeaderData*> DLCComputerTerminalHeaderData;                              // 0x0088   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0090   (0x0028)  MISSED
};

/// Class /Script/Indiana.ComputerTerminalHeaderWidget
/// Size: 0x03E0 (992 bytes) (0x000300 - 0x0003E0) align 8 MaxSize: 0x03E0
class UComputerTerminalHeaderWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UTextBlockBase*                              HeaderTextblock;                                            // 0x0310   (0x0008)  
	class UTextBlockBase*                              SubheaderTextblock;                                         // 0x0318   (0x0008)  
	class UImage*                                      LogoImage;                                                  // 0x0320   (0x0008)  
	class UHorizontalBox*                              HeaderHBox;                                                 // 0x0328   (0x0008)  
	class UVerticalBox*                                TextVerticalBox;                                            // 0x0330   (0x0008)  
	class USizeBox*                                    ImageSizeBox;                                               // 0x0338   (0x0008)  
	class UTexture2D*                                  CurrentImageTexture;                                        // 0x0340   (0x0008)  
	unsigned char                                      UnknownData01_7[0x98];                                      // 0x0348   (0x0098)  MISSED


	/// Functions
	// Function /Script/Indiana.ComputerTerminalHeaderWidget.FadeInLogoImage
	// void FadeInLogoImage();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.ConversationBaseWidget
/// Size: 0x0360 (864 bytes) (0x000308 - 0x000360) align 8 MaxSize: 0x0360
class UConversationBaseWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0308   (0x0020)  MISSED
	class UVerticalBox*                                ResponsesContainer;                                         // 0x0328   (0x0008)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0330   (0x0018)  MISSED
	float                                              MinSkipThreshold;                                           // 0x0348   (0x0004)  
	unsigned char                                      UnknownData02_7[0x14];                                      // 0x034C   (0x0014)  MISSED


	/// Functions
	// Function /Script/Indiana.ConversationBaseWidget.OnSkipInputAction
	// void OnSkipInputAction();                                                                                                // [0x17eb5d0] Native|Protected     
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse9InputAction
	// void OnResponse9InputAction();                                                                                           // [0x17eb5b0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse8InputAction
	// void OnResponse8InputAction();                                                                                           // [0x17eb590] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse7InputAction
	// void OnResponse7InputAction();                                                                                           // [0x17eb570] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse6InputAction
	// void OnResponse6InputAction();                                                                                           // [0x17eb550] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse5InputAction
	// void OnResponse5InputAction();                                                                                           // [0x17eb530] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse4InputAction
	// void OnResponse4InputAction();                                                                                           // [0x17eb510] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse3InputAction
	// void OnResponse3InputAction();                                                                                           // [0x17eb4f0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse2InputAction
	// void OnResponse2InputAction();                                                                                           // [0x17eb4d0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse1InputAction
	// void OnResponse1InputAction();                                                                                           // [0x17eb4b0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnPauseInputAction
	// void OnPauseInputAction();                                                                                               // [0x17eb490] Native|Protected     
};

/// Class /Script/Indiana.ComputerTerminalWidget
/// Size: 0x0418 (1048 bytes) (0x000360 - 0x000418) align 8 MaxSize: 0x0418
class UComputerTerminalWidget : public UConversationBaseWidget
{ 
public:
	class UNamedSlot*                                  HeaderSlot;                                                 // 0x0360   (0x0008)  
	class UTextBlockBase*                              BodyTextblock;                                              // 0x0368   (0x0008)  
	class UInputLabelWidget*                           SelectLabel;                                                // 0x0370   (0x0008)  
	class UInputLabelWidget*                           ExitLabel;                                                  // 0x0378   (0x0008)  
	class UInputLabelWidget*                           ContinueLabel;                                              // 0x0380   (0x0008)  
	class UScrollBox*                                  ConversationTextScrollBox;                                  // 0x0388   (0x0008)  
	TArray<class UConversationResponseWidget*>         ResponseWidgets;                                            // 0x0390   (0x0010)  
	class UClass*                                      ResponseWidgetClass;                                        // 0x03A0   (0x0008)  
	class UClass*                                      DefaultTerminalHeaderClass;                                 // 0x03A8   (0x0008)  
	class UComputerTerminalHeaderWidget*               HeaderWidget;                                               // 0x03B0   (0x0008)  
	float                                              BodyTextAnimationDuration;                                  // 0x03B8   (0x0004)  
	float                                              GamepadZoomMultiplier;                                      // 0x03BC   (0x0004)  
	unsigned char                                      UnknownData00_7[0x58];                                      // 0x03C0   (0x0058)  MISSED


	/// Functions
	// Function /Script/Indiana.ComputerTerminalWidget.OnExitInputAction
	// void OnExitInputAction();                                                                                                // [0x17e77e0] Final|Native|Protected 
	// Function /Script/Indiana.ComputerTerminalWidget.OnConversationEnded
	// void OnConversationEnded();                                                                                              // [0x17e77c0] Final|Native|Protected 
};

/// Class /Script/Indiana.ComputerTerminalWidgetComponent
/// Size: 0x0680 (1664 bytes) (0x000670 - 0x000680) align 16 MaxSize: 0x0680
class UComputerTerminalWidgetComponent : public UIndianaWidgetComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0670   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.ComputerTerminalWidgetComponent.OnOwnerStateChange
	// void OnOwnerStateChange(EComputerLockState PreviousState, EComputerLockState CurrentState);                              // [0x17e7800] Final|Native|Protected 
};

/// Class /Script/Indiana.Conditionals
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UConditionals : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Indiana.Conditionals.PlayerHasPerk
	// bool PlayerHasPerk(FString Perk);                                                                                        // [0x17e7980] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.PlayerHasFlaw
	// bool PlayerHasFlaw(FString Flaw);                                                                                        // [0x17e78d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsWeaponEquipped
	// bool IsWeaponEquipped(FString Weapon, bool bIncludeDerivedClasses);                                                      // [0x17e76d0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsTrapStateEqual
	// bool IsTrapStateEqual(FGuid TrapObjectID, ETrapTriggerState State);                                                      // [0x17e75f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsTimeSlice
	// bool IsTimeSlice(int32_t StartHour, int32_t EndHour);                                                                    // [0x17e7520] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsSpeakerGender
	// bool IsSpeakerGender(EGender Gender);                                                                                    // [0x17e74a0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsSpeaker
	// bool IsSpeaker(FGuid& SpeakerID);                                                                                        // [0x17e7400] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Conditionals.IsRestrictedAreaEnabled
	// bool IsRestrictedAreaEnabled(FGuid RestrictedAreaID);                                                                    // [0x17e7360] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Conditionals.IsQuestTracked
	// bool IsQuestTracked(FGuid QuestID);                                                                                      // [0x17e71f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestStateVisited
	// bool IsQuestStateVisited(FGuid QuestID, int32_t NodeID);                                                                 // [0x17e7110] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestStateActive
	// bool IsQuestStateActive(FGuid QuestID, int32_t NodeID);                                                                  // [0x17e7030] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestStarted
	// bool IsQuestStarted(FGuid QuestID);                                                                                      // [0x17e6f90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestMentioned
	// bool IsQuestMentioned(FGuid QuestID);                                                                                    // [0x17e6ef0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestionNodeOnResponseBranch
	// bool IsQuestionNodeOnResponseBranch(int32_t QuestionNodeID, int32_t PlayerResponseNodeID);                               // [0x17e7290] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestEventTriggered
	// bool IsQuestEventTriggered(FGuid QuestID, int32_t QuestEventID);                                                         // [0x17e6e10] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestEndStateTriggered
	// bool IsQuestEndStateTriggered(FGuid QuestID, int32_t EndStateID);                                                        // [0x17e6d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestComplete
	// bool IsQuestComplete(FGuid QuestID);                                                                                     // [0x17e6c90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestAddendumTriggered
	// bool IsQuestAddendumTriggered(FGuid QuestID, int32_t AddendumID);                                                        // [0x17e6bb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestActive
	// bool IsQuestActive(FGuid QuestID);                                                                                       // [0x17e6b10] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPlayerTravelDestinationLocked
	// bool IsPlayerTravelDestinationLocked(FString TravelDestination);                                                         // [0x17e6a60] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerTravelDestinationHidden
	// bool IsPlayerTravelDestinationHidden(FString TravelDestination);                                                         // [0x17e69b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerSkillValue
	// bool IsPlayerSkillValue(ESkill Skill, ComparisonOperator Operator, int32_t SkillValue, bool bUseCompanionInterjection, bool bPermanentOnly); // [0x17e6810] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerSkillLevelScaled
	// bool IsPlayerSkillLevelScaled(ESkill Skill, ComparisonOperator Operator, ECharacterSkillRange SkillRange, int32_t LevelOverride, bool bUseCompanionInterjection); // [0x17e6680] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerSkill
	// bool IsPlayerSkill(ESkill Skill, ComparisonOperator Operator, ECharacterSkillRange SkillRange, bool bUseCompanionInterjection); // [0x17e6530] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerShipCurrentAt
	// bool IsPlayerShipCurrentAt(FString ShipDestination);                                                                     // [0x17e6480] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerInStealth
	// bool IsPlayerInStealth();                                                                                                // [0x17e6450] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPlayerInCombat
	// bool IsPlayerInCombat();                                                                                                 // [0x17e6420] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPlayerDisguisedAs
	// bool IsPlayerDisguisedAs(FString Faction);                                                                               // [0x17e6370] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPlayerAwareOfTravelDestination
	// bool IsPlayerAwareOfTravelDestination(FString TravelDestination);                                                        // [0x17e62c0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerAwareOfRegion
	// bool IsPlayerAwareOfRegion(FString TravelRegion);                                                                        // [0x17e6210] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerAwareOfPointOfInterest
	// bool IsPlayerAwareOfPointOfInterest(FString PointOfInterestData);                                                        // [0x17e6160] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerAttribute
	// bool IsPlayerAttribute(EAttribute Attribute, ComparisonOperator Operator, ECharacterAttributeRange AttributeRange);      // [0x17e6050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPhaseOfDay
	// bool IsPhaseOfDay(EPhaseOfDay Phase);                                                                                    // [0x17e5fd0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPartyFull
	// bool IsPartyFull();                                                                                                      // [0x17e5fa0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsOCLStateEqual
	// bool IsOCLStateEqual(FGuid OCLObjectID, EOCLState State);                                                                // [0x17e5ec0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsItemQuantity
	// bool IsItemQuantity(FString Item, ComparisonOperator Operator, int32_t Quantity);                                        // [0x17e5d90] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInterrogationsPassedCount
	// bool IsInterrogationsPassedCount(ComparisonOperator Operator, int32_t Count);                                            // [0x17e5cc0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInterrogationInRestrictedArea
	// bool IsInterrogationInRestrictedArea();                                                                                  // [0x17e5c90] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInterrogationDisguised
	// bool IsInterrogationDisguised();                                                                                         // [0x17e5c60] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInterrogationCrime
	// bool IsInterrogationCrime(ECrimeType Crime);                                                                             // [0x17e5be0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInMap
	// bool IsInMap(FString MapID);                                                                                             // [0x17e5b30] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsGlobalValue
	// bool IsGlobalValue(FString VariableName, ComparisonOperator Operator, int32_t Value);                                    // [0x17e59d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsFactionReputationRankType
	// bool IsFactionReputationRankType(FString Faction, EReputationRankType ReputationRankType, ComparisonOperator Operator);  // [0x17e58a0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsFactionReputationRank
	// bool IsFactionReputationRank(FString Faction, EReputationRankType ReputationRankType, int32_t Rank, ComparisonOperator Operator); // [0x17e5730] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsFactionRelationship
	// bool IsFactionRelationship(FString Faction, TEnumAsByte<ETeamAttitude> AttitudeType);                                    // [0x17e5640] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCurrentActiveCompanionAmount
	// bool IsCurrentActiveCompanionAmount(ComparisonOperator Operator, int32_t Quantity);                                      // [0x17e5570] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCompanionUnlocked
	// bool IsCompanionUnlocked(ESpecialObsidianID CompanionID);                                                                // [0x17e54f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCompanionMoral
	// bool IsCompanionMoral(ESpecialObsidianID CompanionID, ComparisonOperator Operator, float MoralAmount);                   // [0x17e53e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCompanionDismissed
	// bool IsCompanionDismissed(ESpecialObsidianID CompanionID);                                                               // [0x17e5360] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCompanionActiveInParty
	// bool IsCompanionActiveInParty(FGuid CompanionID);                                                                        // [0x17e52c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCharacterGrouping
	// bool IsCharacterGrouping(ECharacterGrouping CharacterGrouping);                                                          // [0x17e5240] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsArmorEquipped
	// bool IsArmorEquipped(FString ArmorItem, bool bIncludeDerivedClasses);                                                    // [0x17e5150] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsAnyArmorEquipped
	// bool IsAnyArmorEquipped();                                                                                               // [0x17e5120] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HaveMinutesElapsedSinceNamedTimestamp
	// bool HaveMinutesElapsedSinceNamedTimestamp(FString TimestampName, int32_t Minutes);                                      // [0x17e5030] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HaveHoursElapsedSinceNamedTimestamp
	// bool HaveHoursElapsedSinceNamedTimestamp(FString TimestampName, int32_t Hours);                                          // [0x17e4f40] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HaveDaysElapsedSinceNamedTimestamp
	// bool HaveDaysElapsedSinceNamedTimestamp(FString TimestampName, int32_t Days);                                            // [0x17e4e50] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasQuestStateFailed
	// bool HasQuestStateFailed(FGuid QuestID, int32_t NodeID);                                                                 // [0x17e4d70] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.HasQuestFailed
	// bool HasQuestFailed(FGuid QuestID);                                                                                      // [0x17e4cd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.HasPlayerVisitedTravelDestination
	// bool HasPlayerVisitedTravelDestination(FString TravelDestination);                                                       // [0x17e4c20] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasPlayerVisitedRegion
	// bool HasPlayerVisitedRegion(FString TravelRegion);                                                                       // [0x17e4b70] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasPlayerOnlyHeardAboutPointOfInterest
	// bool HasPlayerOnlyHeardAboutPointOfInterest(FString PointOfInterestData);                                                // [0x17e4ac0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasPlayerDiscoveredPointOfInterest
	// bool HasPlayerDiscoveredPointOfInterest(FString PointOfInterestData);                                                    // [0x17e4a10] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasItemValue
	// bool HasItemValue(FString VariableName, FString Item);                                                                   // [0x17e47d0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasItemsByTag
	// bool HasItemsByTag(FString GameplayTag, ComparisonOperator Operator, int32_t Quantity);                                  // [0x17e48e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasItem
	// bool HasItem(FString Item);                                                                                              // [0x17e4720] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasDLC
	// bool HasDLC(EDownLoadableContent DLC);                                                                                   // [0x17e46a0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasConversationNodeBeenVisited
	// bool HasConversationNodeBeenVisited(FGuid ConversationID, int32_t NodeID);                                               // [0x17e45c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.GetOCLState
	// void GetOCLState(FGuid OCLObjectID, EOCLState& State, EBoolResult& Result);                                              // [0x17e4490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.GetGlobalValue
	// int32_t GetGlobalValue(FString VariableName);                                                                            // [0x17e4390] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.DoesConversationNodePass
	// bool DoesConversationNodePass(FGuid ConversationID, int32_t NodeID);                                                     // [0x17e42b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.CompareGlobals
	// bool CompareGlobals(FString VariableName1, ComparisonOperator Operator, FString VariableName2);                          // [0x17e40f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.CompanionWantsToTalk
	// bool CompanionWantsToTalk(ESpecialObsidianID CompanionID);                                                               // [0x17e4070] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.CompanionHasPerk
	// bool CompanionHasPerk(FGuid CompanionID, FString Perk);                                                                  // [0x17e3f70] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.CanPlayerSafelyTakePickup
	// bool CanPlayerSafelyTakePickup(FGuid& PickupID);                                                                         // [0x17e3ed0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Conditionals.CanPlayerSafelyTakeItemTypeInContainer
	// bool CanPlayerSafelyTakeItemTypeInContainer(FGuid& ContainerID, FString Item);                                           // [0x17e3dc0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Conditionals.CanPlayerReadRedactions
	// bool CanPlayerReadRedactions();                                                                                          // [0x11e1370] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.CanPlayerDiscoverPointOfInterest
	// bool CanPlayerDiscoverPointOfInterest(FString PointOfInterestData);                                                      // [0x17e3d10] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.CanPlayerAccessTravelDestination
	// bool CanPlayerAccessTravelDestination(FString TravelDestination);                                                        // [0x17e3c60] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.CanBribe
	// bool CanBribe(FString VariableName, EBribeDifficulty BribeDifficulty, int32_t LevelOverride);                            // [0x17e3b30] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.CallGlobalConditional
	// bool CallGlobalConditional(FGuid GlobalScriptID);                                                                        // [0x17e3a90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.AlwaysFalse
	// bool AlwaysFalse();                                                                                                      // [0x11e1370] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ConsumableAmmoPool
/// Size: 0x00A8 (168 bytes) (0x000080 - 0x0000A8) align 8 MaxSize: 0x00A8
class UConsumableAmmoPool : public UAmmoPoolBase
{ 
public:
	TArray<class UClass*>                              IntrinsicConsumableClasses;                                 // 0x0080   (0x0010)  
	float                                              DoubleReloadWindow;                                         // 0x0090   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	class UConsumableItem*                             CurrentConsumable;                                          // 0x0098   (0x0008)  
	int32_t                                            CurrentConsumableIndex;                                     // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00A4   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.ConsumableAmmoPool.GetNextConsumableClass
	// class UClass* GetNextConsumableClass();                                                                                  // [0x17eab50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ResourceItem
/// Size: 0x0140 (320 bytes) (0x000118 - 0x000140) align 8 MaxSize: 0x0140
class UResourceItem : public UItem
{ 
public:
	TWeakObjectPtr<class UObject*>                     ItemMesh;                                                   // 0x0118   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0120   (0x0020)  MISSED
};

/// Class /Script/Indiana.ConsumableItem
/// Size: 0x0230 (560 bytes) (0x000140 - 0x000230) align 8 MaxSize: 0x0230
class UConsumableItem : public UResourceItem
{ 
public:
	class UClass*                                      StatusEffect;                                               // 0x0140   (0x0008)  
	TArray<class UClass*>                              SpellList;                                                  // 0x0148   (0x0010)  
	SDK_UNDEFINED(80,434) /* TSet<FAddictionModifier> */ __um(AddictionModifiers);                                 // 0x0158   (0x0050)  
	bool                                               bCanBeUsedAsAmmo;                                           // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x01A9   (0x0003)  MISSED
	int32_t                                            NumShotsAsAmmo;                                             // 0x01AC   (0x0004)  
	bool                                               bCanBeUsedInMedKit;                                         // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x01B1   (0x0003)  MISSED
	int32_t                                            NumChargesInMedKit;                                         // 0x01B4   (0x0004)  
	float                                              ItemDuration;                                               // 0x01B8   (0x0004)  
	float                                              HungerGained;                                               // 0x01BC   (0x0004)  
	float                                              ThirstGained;                                               // 0x01C0   (0x0004)  
	float                                              ExhaustionGained;                                           // 0x01C4   (0x0004)  
	FGameplayTagContainer                              TagContainer;                                               // 0x01C8   (0x0020)  
	FGameplayTagContainer                              ConsumableTagContainer;                                     // 0x01E8   (0x0020)  
	class URpgStatComponent*                           OwnerStatComponent;                                         // 0x0208   (0x0008)  
	class URpgStat*                                    MedKitDurationStat;                                         // 0x0210   (0x0008)  
	FLocString                                         AmmoName;                                                   // 0x0218   (0x0008)  
	class UTexture2D*                                  AmmoIcon;                                                   // 0x0220   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0228   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.ConsumableItem.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x17eb5f0] Final|Native|Protected 
};

/// Class /Script/Indiana.Container
/// Size: 0x0448 (1096 bytes) (0x0002B8 - 0x000448) align 8 MaxSize: 0x0448
class AContainer : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x40];                                      // 0x02B8   (0x0040)  MISSED
	SDK_UNDEFINED(16,435) /* FMulticastInlineDelegate */ __um(OnOCLOpenStart);                                     // 0x02F8   (0x0010)  
	SDK_UNDEFINED(16,436) /* FMulticastInlineDelegate */ __um(OnOCLOpenEnd);                                       // 0x0308   (0x0010)  
	SDK_UNDEFINED(16,437) /* FMulticastInlineDelegate */ __um(OnOCLCloseStart);                                    // 0x0318   (0x0010)  
	SDK_UNDEFINED(16,438) /* FMulticastInlineDelegate */ __um(OnOCLCloseEnd);                                      // 0x0328   (0x0010)  
	SDK_UNDEFINED(16,439) /* FMulticastInlineDelegate */ __um(OnOCLOpenAttemptedLocked);                           // 0x0338   (0x0010)  
	SDK_UNDEFINED(16,440) /* FMulticastInlineDelegate */ __um(OnOCLOpenAttemptedBarred);                           // 0x0348   (0x0010)  
	SDK_UNDEFINED(16,441) /* FMulticastInlineDelegate */ __um(OnOCLLocked);                                        // 0x0358   (0x0010)  
	SDK_UNDEFINED(16,442) /* FMulticastInlineDelegate */ __um(OnOCLUnlocked);                                      // 0x0368   (0x0010)  
	SDK_UNDEFINED(16,443) /* FMulticastInlineDelegate */ __um(OnOCLBarred);                                        // 0x0378   (0x0010)  
	SDK_UNDEFINED(16,444) /* FMulticastInlineDelegate */ __um(OnOCLUnbarred);                                      // 0x0388   (0x0010)  
	SDK_UNDEFINED(16,445) /* FMulticastInlineDelegate */ __um(OnOCLLockpickStart);                                 // 0x0398   (0x0010)  
	SDK_UNDEFINED(16,446) /* FMulticastInlineDelegate */ __um(OnOCLLockpickSuccess);                               // 0x03A8   (0x0010)  
	SDK_UNDEFINED(16,447) /* FMulticastInlineDelegate */ __um(OnOCLLockpickInterrupted);                           // 0x03B8   (0x0010)  
	SDK_UNDEFINED(16,448) /* FMulticastInlineDelegate */ __um(OnOCLLockpickLoopStop);                              // 0x03C8   (0x0010)  
	SDK_UNDEFINED(16,449) /* FMulticastInlineDelegate */ __um(OnItemAdded);                                        // 0x03D8   (0x0010)  
	SDK_UNDEFINED(16,450) /* FMulticastInlineDelegate */ __um(OnItemRemoved);                                      // 0x03E8   (0x0010)  
	SDK_UNDEFINED(16,451) /* FMulticastInlineDelegate */ __um(OnPlayerOpenedContainer);                            // 0x03F8   (0x0010)  
	FLocString                                         DisplayName;                                                // 0x0408   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x0410   (0x0008)  
	class UOCLComponent*                               OCLComponent;                                               // 0x0418   (0x0008)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x0420   (0x0008)  
	class UInventoryComponent*                         InventoryComponent;                                         // 0x0428   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0430   (0x0008)  
	FGameplayTag                                       GameplayTag;                                                // 0x0438   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0440   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.Container.IsLightEnabled
	// bool IsLightEnabled();                                                                                                   // [0x17eb060] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Container.HandleItemRemoved
	// void HandleItemRemoved(FItemStack& ItemStack);                                                                           // [0x17eaf10] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Container.HandleItemCountChanged
	// void HandleItemCountChanged(FItemStack& ItemStack);                                                                      // [0x17eae70] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Container.HandleItemAdded
	// void HandleItemAdded(FItemStack& ItemStack);                                                                             // [0x17eadd0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Container.GetItemsInContainer
	// void GetItemsInContainer(TArray<UItem*>& OutItems);                                                                      // [0x17eaaa0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.Conversation
/// Size: 0x0188 (392 bytes) (0x0000B8 - 0x000188) align 8 MaxSize: 0x0188
class UConversation : public UFlowChart
{ 
public:
	unsigned char                                      UnknownData00_1[0xD0];                                      // 0x00B8   (0x00D0)  MISSED
};

/// Class /Script/Indiana.ConversationActorInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UConversationActorInterface : public UInterface
{ 
public:


	/// Functions
	// Function /Script/Indiana.ConversationActorInterface.GetSpeakerGameDataID
	// FGuid GetSpeakerGameDataID();                                                                                            // [0x17eac70] Native|Event|Public|HasDefaults|BlueprintEvent|Const 
	// Function /Script/Indiana.ConversationActorInterface.GetConversationDescription
	// FConversationDescription GetConversationDescription();                                                                   // [0x17ea9f0] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Indiana.ConversationBehaviorStateInfo
/// Size: 0x0138 (312 bytes) (0x000120 - 0x000138) align 8 MaxSize: 0x0138
class UConversationBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0120   (0x0018)  MISSED
};

/// Class /Script/Indiana.ConversationRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UConversationRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.ConversationBlueprintLibrary
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UConversationBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartSlideshow
	// bool StartSlideshow(class UConversationData* Conversation, int32_t& InstanceId);                                         // [0x17ec0c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartPlayerControllerConversation
	// bool StartPlayerControllerConversation(ECheckBranches& Branches, int32_t& InstanceId, class UConversationData* ConversationData, int32_t StartNode, TArray<FCharacterDescription> OverrideCharacters, bool bAllowedDuringCombat); // [0x17ebe10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartConversationWithActorInterface
	// bool StartConversationWithActorInterface(ECheckBranches& Branches, TScriptInterface<Class> Actor, int32_t StartNode, int32_t& InstanceId); // [0x17ebc90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartConversationByDescriptionAtNode
	// bool StartConversationByDescriptionAtNode(ECheckBranches& Branches, FConversationDescription Description, int32_t StartNode, int32_t& InstanceId); // [0x17ebac0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartConversationByDescription
	// bool StartConversationByDescription(ECheckBranches& Branches, FConversationDescription Description, int32_t& InstanceId); // [0x17eb930] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartConversation
	// bool StartConversation(ECheckBranches& Branches, int32_t& InstanceId, class UConversationData* Conversation, int32_t StartNode, TArray<FCharacterDescription> OverrideCharacters, bool bAllowedDuringCombat); // [0x17eb680] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.MakeCharacterDescription
	// FCharacterDescription MakeCharacterDescription(class AActor* Actor);                                                     // [0x17eb090] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.ConversationBlueprintLibrary.GetSpeakerGameDataReferences
	// TArray<FSpeakerGameDataReferenceID> GetSpeakerGameDataReferences(class UConversationData* ConversationData);             // [0x17eacb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.EndConversation
	// int32_t EndConversation(int32_t ConversationInstanceID);                                                                 // [0x17ea960] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.CanStartConversationByDescription
	// bool CanStartConversationByDescription(ECheckBranches& Branches, FConversationDescription& Description);                 // [0x17ea840] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.CanStartConversation
	// bool CanStartConversation(ECheckBranches& Branches, class UConversationData* Conversation, int32_t StartNode, TArray<FCharacterDescription> OverrideCharacters, bool bAllowedDuringCombat); // [0x17ea5f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.AssignAllParticipantsAsOverrides
	// void AssignAllParticipantsAsOverrides(FConversationDescription& Description, class AActor* OverrideActor);               // [0x17ea4e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.AddConversationEndedDelegate
	// void AddConversationEndedDelegate(int32_t InstanceId, FDelegateProperty& Event);                                         // [0x17ea400] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.ConversationCamera
/// Size: 0x01F8 (504 bytes) (0x0000E0 - 0x0001F8) align 8 MaxSize: 0x01F8
class UConversationCamera : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x00E0   (0x0018)  MISSED
	class UCineCameraComponent*                        CameraComponent;                                            // 0x00F8   (0x0008)  
	float                                              CameraSphere;                                               // 0x0100   (0x0004)  
	float                                              CameraSphereSweepDistance;                                  // 0x0104   (0x0004)  
	float                                              NearDistance;                                               // 0x0108   (0x0004)  
	float                                              NearFocalLength;                                            // 0x010C   (0x0004)  
	float                                              FarDistance;                                                // 0x0110   (0x0004)  
	float                                              FarFocalLength;                                             // 0x0114   (0x0004)  
	float                                              ConversationCameraHeight;                                   // 0x0118   (0x0004)  
	FVector                                            EyeTargetOffsetAbove;                                       // 0x011C   (0x000C)  
	FVector                                            EyeTargetOffsetBelow;                                       // 0x0128   (0x000C)  
	FVector                                            EyeTargetOffsetNormal;                                      // 0x0134   (0x000C)  
	float                                              EyeAboveThreshold;                                          // 0x0140   (0x0004)  
	float                                              EyeBelowThreshold;                                          // 0x0144   (0x0004)  
	float                                              ConversationLocationInterpSpeed;                            // 0x0148   (0x0004)  
	float                                              ConversationRotationInterpSpeed;                            // 0x014C   (0x0004)  
	float                                              ComputerTerminalLocationInterpSpeed;                        // 0x0150   (0x0004)  
	float                                              ComputerTerminalRotationInterpSpeed;                        // 0x0154   (0x0004)  
	float                                              RotationOffset;                                             // 0x0158   (0x0004)  
	float                                              TimeForEyesToStayOnLastSpeaker;                             // 0x015C   (0x0004)  
	float                                              TimeForHeadToStayOnLastSpeaker;                             // 0x0160   (0x0004)  
	unsigned char                                      UnknownData01_6[0x84];                                      // 0x0164   (0x0084)  MISSED
	float                                              ProximityCheckTime;                                         // 0x01E8   (0x0004)  
	float                                              IndividualProximityCheckDistance;                           // 0x01EC   (0x0004)  
	float                                              CompanionProximityCheckDistance;                            // 0x01F0   (0x0004)  
	float                                              ProximityCheckDistanceCap;                                  // 0x01F4   (0x0004)  
};

/// Class /Script/Indiana.ConversationCroppingComponent
/// Size: 0x0520 (1312 bytes) (0x000520 - 0x000520) align 16 MaxSize: 0x0520
class UConversationCroppingComponent : public UBoxComponent
{ 
public:
};

/// Class /Script/Indiana.ConversationData
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align 8 MaxSize: 0x0080
class UConversationData : public UObject
{ 
public:
	FGuid                                              ObsidianID;                                                 // 0x0030   (0x0010)  
	FString                                            ConversationFile;                                           // 0x0040   (0x0010)  
	TArray<class UConversationData*>                   TriggeredConversations;                                     // 0x0050   (0x0010)  
	TArray<class UObject*>                             ReferencedItems;                                            // 0x0060   (0x0010)  
	TArray<char>                                       SerializedConversationData;                                 // 0x0070   (0x0010)  
};

/// Class /Script/Indiana.ConversationFramingComponent
/// Size: 0x0270 (624 bytes) (0x000268 - 0x000270) align 16 MaxSize: 0x0270
class UConversationFramingComponent : public USceneComponent
{ 
public:
	float                                              ConversationFocalLength;                                    // 0x0268   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x026C   (0x0004)  MISSED
};

/// Class /Script/Indiana.ConversationHistoryWidget
/// Size: 0x02A0 (672 bytes) (0x000278 - 0x0002A0) align 8 MaxSize: 0x02A0
class UConversationHistoryWidget : public UUserWidget
{ 
public:
	class UClass*                                      SpeakerClass;                                               // 0x0278   (0x0008)  
	class USizeBox*                                    SizeBox;                                                    // 0x0280   (0x0008)  
	class UScrollBox*                                  ScrollBox;                                                  // 0x0288   (0x0008)  
	float                                              GamepadScrollMultiplier;                                    // 0x0290   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0294   (0x000C)  MISSED
};

/// Struct /Script/Indiana.CharacterDescription
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FCharacterDescription
{ 
	TWeakObjectPtr<class AActor*>                      Actor;                                                      // 0x0000   (0x0008)  
	FSpeakerGameDataReferenceID                        CharacterReferenceID;                                       // 0x0008   (0x0018)  
};

/// Struct /Script/Indiana.CameraProperties
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FCameraProperties
{ 
	ECameraFramingOffset                               CameraOffset;                                               // 0x0000   (0x0001)  
	bool                                               bCameraTracksMovement;                                      // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	class AActor*                                      FixedCameraTarget;                                          // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.ConversationDescription
/// Size: 0x01F8 (504 bytes) (0x000000 - 0x0001F8) align 8 MaxSize: 0x01F8
struct FConversationDescription
{ 
	class UConversationData*                           ConversationData;                                           // 0x0000   (0x0008)  
	int32_t                                            StartNode;                                                  // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FCharacterDescription>                      Characters;                                                 // 0x0010   (0x0010)  
	TMap<FSpeakerGameDataReferenceID, FCameraProperties> SpeakerCameraOverrides;                                   // 0x0020   (0x0050)  
	TMap<FSpeakerGameDataReferenceID, class AActor*>   SpeakerAudioOverrides;                                      // 0x0070   (0x0050)  
	class UClass*                                      InstanceClass;                                              // 0x00C0   (0x0008)  
	TMap<EPayloadID, class AActor*>                    InstancePayloadActors;                                      // 0x00C8   (0x0050)  
	FCameraProperties                                  BaseCameraProperties;                                       // 0x0118   (0x0010)  
	bool                                               bAllowBarkConversationDuringCombat;                         // 0x0128   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0129   (0x0007)  MISSED
	class ACineCameraActor*                            OverrideCamera;                                             // 0x0130   (0x0008)  
	FLogicalExpression                                 TeleportCondition;                                          // 0x0138   (0x0068)  
	class AIndianaTargetPoint*                         PlayerTeleport;                                             // 0x01A0   (0x0008)  
	bool                                               bCompanionCutscene;                                         // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x01A9   (0x0007)  MISSED
	class AIndianaTargetPoint*                         CompanionOneTeleport;                                       // 0x01B0   (0x0008)  
	ESpecialObsidianID                                 CompanionOnePreference;                                     // 0x01B8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x01B9   (0x0007)  MISSED
	class AIndianaTargetPoint*                         CompanionTwoTeleport;                                       // 0x01C0   (0x0008)  
	ESpecialObsidianID                                 CompanionTwoPreference;                                     // 0x01C8   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x01C9   (0x0007)  MISSED
	class AIndianaTargetPoint*                         OwnerTeleport;                                              // 0x01D0   (0x0008)  
	unsigned char                                      UnknownData05_7[0x20];                                      // 0x01D8   (0x0020)  MISSED
};

/// Struct /Script/Indiana.TalkDependencies
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 MaxSize: 0x0090
struct FTalkDependencies
{ 
	unsigned char                                      UnknownData00_7[0x80];                                      // 0x0000   (0x0080)  MISSED
	class UAnimMontage*                                AnimMontage;                                                // 0x0080   (0x0008)  
	class UFaceFXAnim*                                 AnimFaceFX;                                                 // 0x0088   (0x0008)  
};

/// Class /Script/Indiana.ConversationInstance
/// Size: 0x03E0 (992 bytes) (0x000030 - 0x0003E0) align 16 MaxSize: 0x03E0
class UConversationInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x50];                                      // 0x0030   (0x0050)  MISSED
	FConversationDescription                           Description;                                                // 0x0080   (0x01F8)  
	unsigned char                                      UnknownData01_6[0xD8];                                      // 0x0278   (0x00D8)  MISSED
	class UConversationPlayer*                         ConversationPlayer;                                         // 0x0350   (0x0008)  
	TMap<FGuid, FTalkDependencies>                     TalkDependencies;                                           // 0x0358   (0x0050)  
	unsigned char                                      UnknownData02_7[0x38];                                      // 0x03A8   (0x0038)  MISSED


	/// Functions
	// Function /Script/Indiana.ConversationInstance.OnParticipantEndPlay
	// void OnParticipantEndPlay(class AActor* Actor, TEnumAsByte<EEndPlayReason> Reason);                                      // [0x17eb3c0] Final|Native|Public  
	// Function /Script/Indiana.ConversationInstance.OnCharacterDeath
	// void OnCharacterDeath(class AActor* Instigator, FCauseDamageInfo& CauseDamageInfo);                                      // [0x17eb2d0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ConversationInstance.OnCharacterCombatStateChange
	// void OnCharacterCombatStateChange(bool bInCombat, bool bRestoring);                                                      // [0x17eb200] Final|Native|Protected 
	// Function /Script/Indiana.ConversationInstance.IsCurrentSpeakerGameDataReferenceID
	// bool IsCurrentSpeakerGameDataReferenceID(FSpeakerGameDataReferenceID& SpeakerGameData);                                  // [0x17eafb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ConversationInstance.GetPayloadActorChecked
	// class AActor* GetPayloadActorChecked(EPayloadID Key, ECheckBranches& Branches);                                          // [0x17eab90] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationInstance.GetCurrentSpeakerGameDataReferenceID
	// FSpeakerGameDataReferenceID GetCurrentSpeakerGameDataReferenceID();                                                      // [0x17eaa60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ConversationInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UConversationInterface : public UInterface
{ 
public:


	/// Functions
	// Function /Script/Indiana.ConversationInterface.ConversationStarted
	// bool ConversationStarted(class AActor* Speaker, FGuid& Guid, int32_t NodeID);                                            // [0x1c5deb0] Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Script/Indiana.ConversationInterface.ConversationNodeChanged
	// bool ConversationNodeChanged(class AActor* Character, class AActor* Camera, class AActor* Audio, int32_t NodeID);        // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Indiana.ConversationInterface.ConversationEnded
	// bool ConversationEnded(FGuid& Guid);                                                                                     // [0x1c5deb0] Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/Indiana.SkillCheckInterruption
/// Size: 0x00A0 (160 bytes) (0x000030 - 0x0000A0) align 8 MaxSize: 0x00A0
class USkillCheckInterruption : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x70];                                      // 0x0030   (0x0070)  MISSED


	/// Functions
	// Function /Script/Indiana.SkillCheckInterruption.MontageFinished
	// void MontageFinished(class UAnimMontage* Montage, bool bInterrupted);                                                    // [0x17eb130] Final|Native|Private 
};

/// Class /Script/Indiana.ConversationLighting
/// Size: 0x0360 (864 bytes) (0x0002B8 - 0x000360) align 8 MaxSize: 0x0360
class AConversationLighting : public AActor
{ 
public:
	TMap<FName, FComponentReference>                   SocketLightReferenceMapping;                                // 0x02B8   (0x0050)  
	TMap<FName, class ULightComponent*>                SocketLightComponentMapping;                                // 0x0308   (0x0050)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0358   (0x0008)  MISSED
};

/// Class /Script/Indiana.ConversationManager
/// Size: 0x04A0 (1184 bytes) (0x000030 - 0x0004A0) align 16 MaxSize: 0x04A0
class UConversationManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x48];                                      // 0x0030   (0x0048)  MISSED
	class UConversation*                               CachedConversation;                                         // 0x0078   (0x0008)  
	class UConversationPlayer*                         PreviewPlayer;                                              // 0x0080   (0x0008)  
	TMap<int32_t, class UConversationInstance*>        ActiveConversations;                                        // 0x0088   (0x0050)  
	TMap<FGuid, class UConversation*>                  LoadedConversations;                                        // 0x00D8   (0x0050)  
	unsigned char                                      UnknownData01_7[0x378];                                     // 0x0128   (0x0378)  MISSED


	/// Functions
	// Function /Script/Indiana.ConversationManager.MarkConversationNodeAsRead
	// void MarkConversationNodeAsRead(class UConversationData* Conversation, int32_t NodeID);                                  // [0x17ef900] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.ConversationManager.HasConversationNodeBeenVisited
	// bool HasConversationNodeBeenVisited(class UConversationData* Conversation, int32_t NodeID, ECheckBranches& Branches);    // [0x17ef7c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationManager.ClearConversationNodeAsRead
	// void ClearConversationNodeAsRead(class UConversationData* Conversation, int32_t NodeID);                                 // [0x17ef490] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ConversationMessageWidget
/// Size: 0x02C8 (712 bytes) (0x000278 - 0x0002C8) align 8 MaxSize: 0x02C8
class UConversationMessageWidget : public UUserWidget
{ 
public:
	EIndianaUIColorType                                SpeakerTextColor;                                           // 0x0278   (0x0001)  
	EIndianaUIColorType                                DialogueTextColor;                                          // 0x0279   (0x0001)  
	bool                                               bShouldLerpSizing;                                          // 0x027A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x027B   (0x0001)  MISSED
	float                                              LerpTime;                                                   // 0x027C   (0x0004)  
	class UTextBlockBase*                              SpeakerTextBlock;                                           // 0x0280   (0x0008)  
	class UTextBlockBase*                              MessageTextBlock;                                           // 0x0288   (0x0008)  
	class USizeBox*                                    ContentSizeBox;                                             // 0x0290   (0x0008)  
	class UVerticalBox*                                ContentVerticalBox;                                         // 0x0298   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x02A0   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.ConversationMessageWidget.ContentLerpTick
	// void ContentLerpTick(float DeltaTime);                                                                                   // [0x17ef550] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.ConversationPlayer
/// Size: 0x03B8 (952 bytes) (0x0000C0 - 0x0003B8) align 8 MaxSize: 0x03B8
class UConversationPlayer : public UFlowChartPlayer
{ 
public:
	unsigned char                                      UnknownData00_1[0x2F8];                                     // 0x00C0   (0x02F8)  MISSED
};

/// Class /Script/Indiana.ConversationRegisterComponent
/// Size: 0x08D8 (2264 bytes) (0x0000E0 - 0x0008D8) align 8 MaxSize: 0x08D8
class UConversationRegisterComponent : public UActorComponent
{ 
public:
	FConversationDescription                           Description;                                                // 0x00E0   (0x01F8)  
	bool                                               bCanInterrogate;                                            // 0x02D8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02D9   (0x0007)  MISSED
	FConversationDescription                           BasicInterrogationDescription;                              // 0x02E0   (0x01F8)  
	FConversationDescription                           InterrogationDescription;                                   // 0x04D8   (0x01F8)  
	bool                                               bCanResumeConversation;                                     // 0x06D0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x06D1   (0x0007)  MISSED
	FConversationDescription                           ResumeDescription;                                          // 0x06D8   (0x01F8)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x08D0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.ConversationRegisterComponent.StartConversationByComponent
	// bool StartConversationByComponent(ECheckBranches& Branches, class AActor* ComponentOwner);                               // [0x17efd30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationRegisterComponent.OnResumeConversationTimerComplete
	// void OnResumeConversationTimerComplete();                                                                                // [0x17efcb0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationRegisterComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x17efbe0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationRegisterComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bInCombat, bool bRestoring);                                                               // [0x17efa50] Final|Native|Protected 
	// Function /Script/Indiana.ConversationRegisterComponent.OnChatterComplete
	// void OnChatterComplete(class UChatterPlayer* ChatterPlayer);                                                             // [0x17ef9c0] Final|Native|Protected 
};

/// Class /Script/Indiana.ConversationResponseWidget
/// Size: 0x02D0 (720 bytes) (0x000278 - 0x0002D0) align 8 MaxSize: 0x02D0
class UConversationResponseWidget : public UUserWidget
{ 
public:
	class UImage*                                      ResponsePressedImage;                                       // 0x0278   (0x0008)  
	class UTextBlockBase*                              ResponseNumberTextBlock;                                    // 0x0280   (0x0008)  
	class UTextBlockBase*                              MessageTextBlock;                                           // 0x0288   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0290   (0x0008)  
	class UAkAudioEvent*                               NormalPressedSound;                                         // 0x0298   (0x0008)  
	class UAkAudioEvent*                               SkillCheckPressedSound;                                     // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x02A8   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.ConversationResponseWidget.OnSetSkillCheckRequiredCompanion
	// void OnSetSkillCheckRequiredCompanion(bool bSelectable);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationResponseWidget.OnSetSelectableOption
	// void OnSetSelectableOption(bool bSelectable);                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationResponseWidget.OnResponseSkillsChanged
	// void OnResponseSkillsChanged(bool bContainsSkillCheck);                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationResponseWidget.IsSelectable
	// bool IsSelectable();                                                                                                     // [0x17ef8d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ConversationSubtitleWidget
/// Size: 0x0310 (784 bytes) (0x000308 - 0x000310) align 8 MaxSize: 0x0310
class UConversationSubtitleWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class USubtitlesWidget*                            Subtitle;                                                   // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.ConversationWidget
/// Size: 0x0520 (1312 bytes) (0x000360 - 0x000520) align 8 MaxSize: 0x0520
class UConversationWidget : public UConversationBaseWidget
{ 
public:
	class UHorizontalBox*                              InputLabelContainer;                                        // 0x0360   (0x0008)  
	class UConversationMessageWidget*                  ConversationMessage;                                        // 0x0368   (0x0008)  
	class UConversationHistoryWidget*                  History;                                                    // 0x0370   (0x0008)  
	class UVerticalBox*                                DottedBGVerticalBox;                                        // 0x0378   (0x0008)  
	class UVerticalBox*                                DottedHistoryBGVerticalBox;                                 // 0x0380   (0x0008)  
	class UButtonBase*                                 HistoryButton;                                              // 0x0388   (0x0008)  
	class UInputLabelWidget*                           SelectLabel;                                                // 0x0390   (0x0008)  
	class UInputLabelWidget*                           HistoryToggleLabel;                                         // 0x0398   (0x0008)  
	class UInputLabelWidget*                           ScrollLabel;                                                // 0x03A0   (0x0008)  
	class UInputLabelWidget*                           ExitLabel;                                                  // 0x03A8   (0x0008)  
	class UOverlay*                                    CanvasOverlay;                                              // 0x03B0   (0x0008)  
	class UOverlay*                                    ConversationOverlay;                                        // 0x03B8   (0x0008)  
	class UTextBlockBase*                              SpeakerTextBlock;                                           // 0x03C0   (0x0008)  
	class UOverlay*                                    HistoryOverlay;                                             // 0x03C8   (0x0008)  
	class UOverlay*                                    InputOverlay;                                               // 0x03D0   (0x0008)  
	class UOverlay*                                    ConversationSizeOverlay;                                    // 0x03D8   (0x0008)  
	class UOverlay*                                    ResponseOverlay;                                            // 0x03E0   (0x0008)  
	class USizeBox*                                    HistorySizeBox;                                             // 0x03E8   (0x0008)  
	class USizeBox*                                    DialogueSizeBox;                                            // 0x03F0   (0x0008)  
	class USizeBox*                                    ResponseSizeBox;                                            // 0x03F8   (0x0008)  
	class USizeBox*                                    BGGPSizeBox;                                                // 0x0400   (0x0008)  
	class USizeBox*                                    BGPCSizeBox;                                                // 0x0408   (0x0008)  
	class UBorder*                                     DialogueBorder;                                             // 0x0410   (0x0008)  
	class UBorder*                                     ResponsesBorder;                                            // 0x0418   (0x0008)  
	class UClass*                                      ResponseWidgetClass;                                        // 0x0420   (0x0008)  
	TArray<class UConversationResponseWidget*>         ResponseWidgets;                                            // 0x0428   (0x0010)  
	FVector2D                                          ConversationBackingSourceImageSize;                         // 0x0438   (0x0008)  
	float                                              ConversationDottedBGOffset;                                 // 0x0440   (0x0004)  
	float                                              HistoryDottedBGOffset;                                      // 0x0444   (0x0004)  
	float                                              ConversationHistoryActivePadding;                           // 0x0448   (0x0004)  
	float                                              ConversationHistoryInactivePadding;                         // 0x044C   (0x0004)  
	float                                              ConversationUIAlphaLerpTransitionTime;                      // 0x0450   (0x0004)  
	float                                              ConversationUIAlphaLerpInterpExponent;                      // 0x0454   (0x0004)  
	float                                              ResponsesLerpTransitionTime;                                // 0x0458   (0x0004)  
	float                                              ResponsesLerpInterpExponent;                                // 0x045C   (0x0004)  
	float                                              ResponsesAlphaTransitionTime;                               // 0x0460   (0x0004)  
	float                                              ResponsesAlphaInterpExponent;                               // 0x0464   (0x0004)  
	float                                              DialoguePanelLerpTransitionTime;                            // 0x0468   (0x0004)  
	float                                              DialoguePanelLerpInterpExponent;                            // 0x046C   (0x0004)  
	float                                              BackgroundWidthLerpTransitionTime;                          // 0x0470   (0x0004)  
	float                                              BackgroundWidthLerpInterpExponent;                          // 0x0474   (0x0004)  
	float                                              ConversationHistoryActiveBGWidth;                           // 0x0478   (0x0004)  
	float                                              ConversationHistoryInactiveBGWidth;                         // 0x047C   (0x0004)  
	float                                              HistoryAlphaTransitionTime;                                 // 0x0480   (0x0004)  
	float                                              HistoryAlphaInterpExponent;                                 // 0x0484   (0x0004)  
	float                                              HistoryButtonAlphaTransitionTime;                           // 0x0488   (0x0004)  
	float                                              HistoryButtonAlphaInterpExponent;                           // 0x048C   (0x0004)  
	float                                              ConversationBlackBGOffset;                                  // 0x0490   (0x0004)  
	float                                              HistoryPanelOffset;                                         // 0x0494   (0x0004)  
	unsigned char                                      UnknownData00_7[0x88];                                      // 0x0498   (0x0088)  MISSED


	/// Functions
	// Function /Script/Indiana.ConversationWidget.ShouldShowResponseLine
	// bool ShouldShowResponseLine();                                                                                           // [0x17efd00] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.ConversationWidget.ShouldShowInputLabelLine
	// bool ShouldShowInputLabelLine();                                                                                         // [0x17efcd0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.ConversationWidget.SetHistoryBackingFillRatio
	// void SetHistoryBackingFillRatio(float DesiredHistoryHeight);                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationWidget.SetConversationBackingFillRatio
	// void SetConversationBackingFillRatio(float DesiredOverlayHeight);                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationWidget.OnHistoryToggleInputAction
	// void OnHistoryToggleInputAction();                                                                                       // [0x17efbc0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationWidget.OnHistoryScroll
	// void OnHistoryScroll(float InputDelta);                                                                                  // [0x17efb40] Final|Native|Protected 
	// Function /Script/Indiana.ConversationWidget.OnConversationEnded
	// void OnConversationEnded();                                                                                              // [0x17efb20] Final|Native|Protected 
};

/// Class /Script/Indiana.Corpse
/// Size: 0x0390 (912 bytes) (0x0002B8 - 0x000390) align 8 MaxSize: 0x0390
class ACorpse : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x40];                                      // 0x02B8   (0x0040)  MISSED
	SDK_UNDEFINED(16,452) /* FMulticastInlineDelegate */ __um(OnItemAdded);                                        // 0x02F8   (0x0010)  
	SDK_UNDEFINED(16,453) /* FMulticastInlineDelegate */ __um(OnItemRemoved);                                      // 0x0308   (0x0010)  
	FGameplayTagContainer                              PreSeveredLimbsContainer;                                   // 0x0318   (0x0020)  
	FLocString                                         DisplayName;                                                // 0x0338   (0x0008)  
	EGender                                            Gender;                                                     // 0x0340   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0341   (0x0007)  MISSED
	class UCapsuleComponent*                           CapsuleComponent;                                           // 0x0348   (0x0008)  
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x0350   (0x0008)  
	class UAppearanceComponent*                        AppearanceComponent;                                        // 0x0358   (0x0008)  
	class UInventoryComponent*                         InventoryComponent;                                         // 0x0360   (0x0008)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x0368   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0370   (0x0008)  
	class UEquipmentComponent*                         EquipmentComponent;                                         // 0x0378   (0x0008)  
	FGameplayTag                                       CreatureType;                                               // 0x0380   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0388   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.Corpse.HandleItemRemoved
	// void HandleItemRemoved(FItemStack& ItemStack);                                                                           // [0x17ef720] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Corpse.HandleItemAdded
	// void HandleItemAdded(FItemStack& ItemStack);                                                                             // [0x17ef680] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Corpse.GetItemsOnCorpse
	// void GetItemsOnCorpse(TArray<UItem*>& OutItems);                                                                         // [0x17ef5d0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.CoverBehaviorStateInfo
/// Size: 0x01A0 (416 bytes) (0x000178 - 0x0001A0) align 8 MaxSize: 0x01A0
class UCoverBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0178   (0x0028)  MISSED
};

/// Class /Script/Indiana.CoverRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UCoverRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.QuickCoverStateInfo
/// Size: 0x01A0 (416 bytes) (0x0001A0 - 0x0001A0) align 8 MaxSize: 0x01A0
class UQuickCoverStateInfo : public UCoverBehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.QuickCoverRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UQuickCoverRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Struct /Script/Indiana.CoverAssetCollisionData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 MaxSize: 0x0040
struct FCoverAssetCollisionData
{ 
	FVector                                            BoxExtent;                                                  // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
};

/// Class /Script/Indiana.CoverGenerationAssetData
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UCoverGenerationAssetData : public UDataAsset
{ 
public:
	SDK_UNDEFINED(80,454) /* TMap<TWeakObjectPtr<UStaticMesh*>, FCoverAssetCollisionData> */ __um(MeshCoverCollisionData); // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.EnviromentNode
/// Size: 0x0358 (856 bytes) (0x0002B8 - 0x000358) align 8 MaxSize: 0x0358
class AEnviromentNode : public AActor
{ 
public:
	SDK_UNDEFINED(80,455) /* TSet<TWeakObjectPtr<AEnviromentNode*>> */ __um(ReservationNodes);                     // 0x02B8   (0x0050)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0308   (0x0050)  MISSED
};

/// Class /Script/Indiana.CoverNode
/// Size: 0x03B8 (952 bytes) (0x000358 - 0x0003B8) align 8 MaxSize: 0x03B8
class ACoverNode : public AEnviromentNode
{ 
public:
	float                                              SlotRadius;                                                 // 0x0358   (0x0004)  
	ECoverTypes                                        CoverType;                                                  // 0x035C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x035D   (0x0003)  MISSED
	float                                              ClockWiseWallTheta;                                         // 0x0360   (0x0004)  
	float                                              CounterClockWiseWallTheta;                                  // 0x0364   (0x0004)  
	float                                              ClockWiseFireTheta;                                         // 0x0368   (0x0004)  
	float                                              CounterClockWiseFireTheta;                                  // 0x036C   (0x0004)  
	bool                                               bLocked;                                                    // 0x0370   (0x0001)  
	unsigned char                                      UnknownData01_6[0x17];                                      // 0x0371   (0x0017)  MISSED
	FVector                                            FireAngle;                                                  // 0x0388   (0x000C)  
	FVector                                            WorldFiringPosition;                                        // 0x0394   (0x000C)  
	FVector                                            WallAngle;                                                  // 0x03A0   (0x000C)  
	FVector                                            WorldWallPosition;                                          // 0x03AC   (0x000C)  
};

/// Class /Script/Indiana.CoverNodeComponent
/// Size: 0x00E0 (224 bytes) (0x0000E0 - 0x0000E0) align 8 MaxSize: 0x00E0
class UCoverNodeComponent : public UActorComponent
{ 
public:
};

/// Class /Script/Indiana.CoverNodeGenerationVolume
/// Size: 0x0360 (864 bytes) (0x000310 - 0x000360) align 8 MaxSize: 0x0360
class ACoverNodeGenerationVolume : public AVolume
{ 
public:
	bool                                               bPlaceCoverNodes;                                           // 0x0310   (0x0001)  
	bool                                               bDeleteCoverNodes;                                          // 0x0311   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0312   (0x0002)  MISSED
	float                                              SampleSize;                                                 // 0x0314   (0x0004)  
	float                                              MaxRayWallCheckDistance;                                    // 0x0318   (0x0004)  
	float                                              MaxRayCornerCheckDistance;                                  // 0x031C   (0x0004)  
	float                                              BackUpWallAngleDistance;                                    // 0x0320   (0x0004)  
	float                                              MaxWallCheckDistance;                                       // 0x0324   (0x0004)  
	float                                              MinFullHeightWallDistance;                                  // 0x0328   (0x0004)  
	float                                              MinHalfHeightWallDistance;                                  // 0x032C   (0x0004)  
	float                                              MaxAcceptableGapLength;                                     // 0x0330   (0x0004)  
	float                                              FiringAcceptanceHalfAngle;                                  // 0x0334   (0x0004)  
	float                                              CoverAcceptanceHalfAngle;                                   // 0x0338   (0x0004)  
	float                                              ZOffset;                                                    // 0x033C   (0x0004)  
	float                                              SlotSize;                                                   // 0x0340   (0x0004)  
	float                                              CoverTolerance;                                             // 0x0344   (0x0004)  
	bool                                               bDisplayDebugEdges;                                         // 0x0348   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0349   (0x0007)  MISSED
	TArray<class UBoxComponent*>                       MeshAssetCollisionVolumes;                                  // 0x0350   (0x0010)  
};

/// Class /Script/Indiana.CowerBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000120 - 0x000128) align 8 MaxSize: 0x0128
class UCowerBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0120   (0x0008)  MISSED
};

/// Class /Script/Indiana.CowerRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UCowerRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.CrashLogging
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCrashLogging : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/Indiana.CreateItemStatusEffect
/// Size: 0x01A0 (416 bytes) (0x000188 - 0x0001A0) align 8 MaxSize: 0x01A0
class UCreateItemStatusEffect : public UStatusEffect
{ 
public:
	TArray<FDefaultItemStack>                          ItemsToCreate;                                              // 0x0188   (0x0010)  
	ECreateItemCountRule                               CountRule;                                                  // 0x0198   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0199   (0x0007)  MISSED
};

/// Struct /Script/Indiana.CreditsEntry
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 MaxSize: 0x0038
struct FCreditsEntry
{ 
	FString                                            DebugName;                                                  // 0x0000   (0x0010)  
	bool                                               bIsText;                                                    // 0x0010   (0x0001)  
	FCreditsTextType                                   TextType;                                                   // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0012   (0x0002)  MISSED
	FLocString                                         LocString;                                                  // 0x0014   (0x0008)  
	bool                                               bIsSpacing;                                                 // 0x001C   (0x0001)  
	FCreditsSpacingType                                SpacingType;                                                // 0x001D   (0x0001)  
	bool                                               bIsImage;                                                   // 0x001E   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x001F   (0x0001)  MISSED
	class UTexture2D*                                  ImageAsset;                                                 // 0x0020   (0x0008)  
	bool                                               bOverrideImageSize;                                         // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FVector2D                                          OverrideImageSize;                                          // 0x002C   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Indiana.CreditsGroup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FCreditsGroup
{ 
	FString                                            DebugName;                                                  // 0x0000   (0x0010)  
	TArray<FCreditsEntry>                              Credits;                                                    // 0x0010   (0x0010)  
};

/// Class /Script/Indiana.CreditsData
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align 8 MaxSize: 0x0060
class UCreditsData : public UDataAsset
{ 
public:
	TArray<FCreditsEntry>                              Credits;                                                    // 0x0038   (0x0010)  
	TArray<FCreditsGroup>                              CreditGroups;                                               // 0x0048   (0x0010)  
	class UCreditsFormattingData*                      CreditsFormattingData;                                      // 0x0058   (0x0008)  
};

/// Class /Script/Indiana.CreditsFormattingData
/// Size: 0x00F0 (240 bytes) (0x000038 - 0x0000F0) align 8 MaxSize: 0x00F0
class UCreditsFormattingData : public UDataAsset
{ 
public:
	TMap<FCreditsTextType, FIndianaTextBlockStyle>     TextFormatting;                                             // 0x0038   (0x0050)  
	float                                              TextWrapWidth;                                              // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	TMap<FCreditsSpacingType, int32_t>                 SpaceFormatting;                                            // 0x0090   (0x0050)  
	float                                              ScrollSpeed;                                                // 0x00E0   (0x0004)  
	int32_t                                            InitialSpacing;                                             // 0x00E4   (0x0004)  
	int32_t                                            PostSpacing;                                                // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00EC   (0x0004)  MISSED
};

/// Class /Script/Indiana.CreditsWidget
/// Size: 0x0380 (896 bytes) (0x000308 - 0x000380) align 8 MaxSize: 0x0380
class UCreditsWidget : public UIndianaInterfaceUserWidget
{ 
public:
	SDK_UNDEFINED(16,456) /* FMulticastInlineDelegate */ __um(CreditsClosedDelegate);                              // 0x0308   (0x0010)  
	int32_t                                            WidgetsPerSecond;                                           // 0x0318   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x031C   (0x0004)  MISSED
	class UCreditsData*                                CreditsAsset;                                               // 0x0320   (0x0008)  
	class UCreditsData*                                SwitchCreditsAsset;                                         // 0x0328   (0x0008)  
	ESlateVisibility                                   ActiveVisibility;                                           // 0x0330   (0x0001)  
	ESlateVisibility                                   InactiveVisibility;                                         // 0x0331   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0332   (0x0006)  MISSED
	class UScrollBox*                                  CreditsScrollBox;                                           // 0x0338   (0x0008)  
	class UVerticalBox*                                CreditsVerticalBox;                                         // 0x0340   (0x0008)  
	FGlobalVariable                                    CreditsMusicGlobalVariable;                                 // 0x0348   (0x0010)  
	int32_t                                            OnCreditsStartGlobalVariableValue;                          // 0x0358   (0x0004)  
	int32_t                                            OnCreditsSkippedGlobalVariableValue;                        // 0x035C   (0x0004)  
	int32_t                                            OnCreditsEndedGlobalVariableValue;                          // 0x0360   (0x0004)  
	unsigned char                                      UnknownData02_7[0x1C];                                      // 0x0364   (0x001C)  MISSED
};

/// Class /Script/Indiana.CrosshairWidget
/// Size: 0x0370 (880 bytes) (0x000300 - 0x000370) align 8 MaxSize: 0x0370
class UCrosshairWidget : public UIndianaUserWidget
{ 
public:
	class UCanvasPanel*                                RootCanvas;                                                 // 0x0300   (0x0008)  
	class UCanvasPanel*                                WeaponContainer;                                            // 0x0308   (0x0008)  
	class UOverlay*                                    StandardReticle;                                            // 0x0310   (0x0008)  
	class UImage*                                      StaticImage;                                                // 0x0318   (0x0008)  
	class UImage*                                      ReticuleLeft;                                               // 0x0320   (0x0008)  
	class UImage*                                      ReticuleRight;                                              // 0x0328   (0x0008)  
	class UImage*                                      ReticuleTop;                                                // 0x0330   (0x0008)  
	class UImage*                                      ReticuleBottom;                                             // 0x0338   (0x0008)  
	class UImage*                                      ReticuleCenter;                                             // 0x0340   (0x0008)  
	class UImage*                                      ReticuleStealth;                                            // 0x0348   (0x0008)  
	class UImage*                                      ReticleMinimal;                                             // 0x0350   (0x0008)  
	class UImage*                                      CauseDamageIndicator;                                       // 0x0358   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0360   (0x0010)  MISSED
};

/// Class /Script/Indiana.CrouchBehaviorStateInfo
/// Size: 0x0188 (392 bytes) (0x000178 - 0x000188) align 8 MaxSize: 0x0188
class UCrouchBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0178   (0x0010)  MISSED
};

/// Class /Script/Indiana.CrouchRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UCrouchRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.IndianaNavLink
/// Size: 0x02D0 (720 bytes) (0x0002B8 - 0x0002D0) align 8 MaxSize: 0x02D0
class AIndianaNavLink : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02B8   (0x0008)  MISSED
	TArray<FNavigationLink>                            NavLinks;                                                   // 0x02C0   (0x0010)  
};

/// Class /Script/Indiana.PlaceableNavLink
/// Size: 0x02D0 (720 bytes) (0x0002D0 - 0x0002D0) align 8 MaxSize: 0x02D0
class APlaceableNavLink : public AIndianaNavLink
{ 
public:
};

/// Class /Script/Indiana.ReservableNavLink
/// Size: 0x02E8 (744 bytes) (0x0002D0 - 0x0002E8) align 8 MaxSize: 0x02E8
class AReservableNavLink : public APlaceableNavLink
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02D0   (0x0008)  MISSED
	class UAISettings_Traverse*                        LeftToRightAISettings;                                      // 0x02D8   (0x0008)  
	class UAISettings_Traverse*                        RightToLeftAISettings;                                      // 0x02E0   (0x0008)  
};

/// Class /Script/Indiana.CrouchNavLink
/// Size: 0x02E8 (744 bytes) (0x0002E8 - 0x0002E8) align 8 MaxSize: 0x02E8
class ACrouchNavLink : public AReservableNavLink
{ 
public:
};

/// Class /Script/Indiana.CurrencyItem
/// Size: 0x0140 (320 bytes) (0x000118 - 0x000140) align 8 MaxSize: 0x0140
class UCurrencyItem : public UItem
{ 
public:
	TWeakObjectPtr<class UObject*>                     ItemMesh;                                                   // 0x0118   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0120   (0x0020)  MISSED
};

/// Class /Script/Indiana.CustomEventEffect
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UCustomEventEffect : public UEventEffect
{ 
public:


	/// Functions
	// Function /Script/Indiana.CustomEventEffect.CustomTrigger
	// void CustomTrigger(class AActor* TargetActor, FEventEffectParams& Params);                                               // [0x1c5deb0] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.CustomEventEffect.CustomStop
	// void CustomStop(class AActor* TargetActor);                                                                              // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.CustomHitReceiver
/// Size: 0x02B8 (696 bytes) (0x0002B8 - 0x0002B8) align 8 MaxSize: 0x02B8
class ACustomHitReceiver : public AActor
{ 
public:


	/// Functions
	// Function /Script/Indiana.CustomHitReceiver.CustomOnHit
	// void CustomOnHit(FHitResult& Hit);                                                                                       // [0x1c5deb0] Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent 
};

/// Struct /Script/Indiana.AppliedMaterialParam
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FAppliedMaterialParam
{ 
	TWeakObjectPtr<class UMaterialInstanceDynamic*>    DynamicMaterial;                                            // 0x0000   (0x0008)  
	EMaterialParamType                                 ParamType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	FName                                              ParamName;                                                  // 0x000C   (0x0008)  
};

/// Class /Script/Indiana.CustomMaterialModVisual
/// Size: 0x0090 (144 bytes) (0x000068 - 0x000090) align 8 MaxSize: 0x0090
class UCustomMaterialModVisual : public UModVisual
{ 
public:
	TArray<FAppliedMaterialParam>                      AppliedMaterialParams;                                      // 0x0068   (0x0010)  
	bool                                               bApplyToBase;                                               // 0x0078   (0x0001)  
	bool                                               bApplyToChildren;                                           // 0x0079   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x007A   (0x0016)  MISSED


	/// Functions
	// Function /Script/Indiana.CustomMaterialModVisual.CopyParamOverrides
	// void CopyParamOverrides(class UMaterialInstanceDynamic* Source, FName DestinationSlotName);                              // [0x17f5300] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyVectorParamToAll
	// void ApplyVectorParamToAll(FName ParamName, FLinearColor ParamValue, FName OnlyApplyIfParamSet);                         // [0x17f51e0] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyVectorParam
	// void ApplyVectorParam(FName MaterialSlotName, FName ParamName, FLinearColor ParamValue);                                 // [0x17f50c0] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyTextureParamToAll
	// void ApplyTextureParamToAll(FName ParamName, TWeakObjectPtr<UTexture*> ParamValue, FName OnlyApplyIfParamSet);           // [0x17f4f20] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyTextureParam
	// void ApplyTextureParam(FName MaterialSlotName, FName ParamName, TWeakObjectPtr<UTexture*> ParamValue);                   // [0x17f4d80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyScalarParamToAll
	// void ApplyScalarParamToAll(FName ParamName, float ParamValue, FName OnlyApplyIfParamSet);                                // [0x17f4c60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyScalarParam
	// void ApplyScalarParam(FName MaterialSlotName, FName ParamName, float ParamValue);                                        // [0x17f4b40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.Apply
	// void Apply();                                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.CustomModVisual
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UCustomModVisual : public UModVisual
{ 
public:


	/// Functions
	// Function /Script/Indiana.CustomModVisual.RemoveVisualsTrigger
	// void RemoveVisualsTrigger();                                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CustomModVisual.PermanentlyApplyVisualsTrigger
	// void PermanentlyApplyVisualsTrigger(class UObject* NewTargetObject, class USkeletalMeshComponent* NewParentComponent, bool bShouldWeld); // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.CustomModVisual.NewMeshAddedBP
	// void NewMeshAddedBP(class USkeletalMeshComponent* TargetParentComponent, class UMeshComponent* MeshComponent);           // [0x17f53d0] Final|Native|Protected|BlueprintCallable|Const 
	// Function /Script/Indiana.CustomModVisual.ApplyVisualsTrigger
	// void ApplyVisualsTrigger(class UObject* NewTargetObject, class USkeletalMeshComponent* NewParentComponent);              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CustomModVisual.ApplyToNewMeshTrigger
	// void ApplyToNewMeshTrigger(class UMeshComponent* NewMesh);                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CustomModVisual.ApplyToNewMeshPermanentlyTrigger
	// void ApplyToNewMeshPermanentlyTrigger(class UMeshComponent* NewMesh);                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/Indiana.CustomTimeDilationStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UCustomTimeDilationStatusEffect : public UStatusEffect
{ 
public:
	float                                              CustomTimeDilation;                                         // 0x0188   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x018C   (0x0004)  MISSED
};

/// Class /Script/Indiana.DamageableComponent
/// Size: 0x0298 (664 bytes) (0x0000E0 - 0x000298) align 8 MaxSize: 0x0298
class UDamageableComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,457) /* FMulticastInlineDelegate */ __um(OnTakeDamage);                                       // 0x00E0   (0x0010)  
	class UHitLocationData*                            HitLocationData;                                            // 0x00F0   (0x0008)  
	FName                                              HitFeedbackMaterialParam;                                   // 0x00F8   (0x0008)  
	FRuntimeFloatCurve                                 HitFeedbackParamCurve;                                      // 0x0100   (0x0088)  
	unsigned char                                      UnknownData00_7[0x110];                                     // 0x0188   (0x0110)  MISSED
};

/// Class /Script/Indiana.DamageByGameTagStatusEffect
/// Size: 0x01B0 (432 bytes) (0x000188 - 0x0001B0) align 8 MaxSize: 0x01B0
class UDamageByGameTagStatusEffect : public UStatusEffect
{ 
public:
	FGameplayTagContainer                              GameplayTags;                                               // 0x0188   (0x0020)  
	class URpgStat*                                    RpgStat;                                                    // 0x01A8   (0x0008)  
};

/// Class /Script/Indiana.DamageEffectWidget
/// Size: 0x0370 (880 bytes) (0x000300 - 0x000370) align 8 MaxSize: 0x0370
class UDamageEffectWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UTextBlockBase*                              DamageTextBlock;                                            // 0x0310   (0x0008)  
	class UOverlay*                                    ResizeOverlay;                                              // 0x0318   (0x0008)  
	int32_t                                            FontOutlineSize;                                            // 0x0320   (0x0004)  
	float                                              FontFadeThreshold;                                          // 0x0324   (0x0004)  
	unsigned char                                      UnknownData01_7[0x48];                                      // 0x0328   (0x0048)  MISSED
};

/// Class /Script/Indiana.DamageFlagsStatusEffect
/// Size: 0x0198 (408 bytes) (0x000188 - 0x000198) align 8 MaxSize: 0x0198
class UDamageFlagsStatusEffect : public UStatusEffect
{ 
public:
	TArray<EDamageFlags>                               DamageFlags;                                                // 0x0188   (0x0010)  
};

/// Class /Script/Indiana.DamageStatusEffect
/// Size: 0x0210 (528 bytes) (0x000188 - 0x000210) align 16 MaxSize: 0x0210
class UDamageStatusEffect : public UStatusEffect
{ 
public:
	float                                              DamageValue;                                                // 0x0188   (0x0004)  
	float                                              DamageValuePercent;                                         // 0x018C   (0x0004)  
	EDamageValueType                                   DamageValueType;                                            // 0x0190   (0x0001)  
	EDamageBaseAmount                                  BaseDamageType;                                             // 0x0191   (0x0001)  
	int8_t                                             DamageScalars;                                              // 0x0192   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x0193   (0x0005)  MISSED
	class UClass*                                      DamageType;                                                 // 0x0198   (0x0008)  
	class UClass*                                      DamageTypeSecondary;                                        // 0x01A0   (0x0008)  
	FGameplayTag                                       BodyPart;                                                   // 0x01A8   (0x0008)  
	bool                                               bAllDamageTypes;                                            // 0x01B0   (0x0001)  
	bool                                               bIgnoreDTDR;                                                // 0x01B1   (0x0001)  
	bool                                               bAllowFriendlyFire;                                         // 0x01B2   (0x0001)  
	bool                                               bAOE;                                                       // 0x01B3   (0x0001)  
	bool                                               bCompanionCommand;                                          // 0x01B4   (0x0001)  
	bool                                               bMelee;                                                     // 0x01B5   (0x0001)  
	unsigned char                                      UnknownData01_6[0xA];                                       // 0x01B6   (0x000A)  MISSED
	FTransformedShape                                  AOECollisionShape;                                          // 0x01C0   (0x0040)  
	class URpgStat*                                    DamageScalingStat;                                          // 0x0200   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0208   (0x0008)  MISSED
};

/// Class /Script/Indiana.DamageTextActor
/// Size: 0x02E0 (736 bytes) (0x0002C0 - 0x0002E0) align 8 MaxSize: 0x02E0
class ADamageTextActor : public APooledActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x02C0   (0x0010)  MISSED
	class UWorldSpaceDamageWidgetComponent*            DamageTextComponent;                                        // 0x02D0   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x02D8   (0x0008)  
};

/// Class /Script/Indiana.DeactivatedBehaviorStateInfo
/// Size: 0x0120 (288 bytes) (0x000120 - 0x000120) align 8 MaxSize: 0x0120
class UDeactivatedBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.DeactivatedRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UDeactivatedRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.DeathBehavior
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UDeathBehavior : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0030   (0x0008)  MISSED
	class AActor*                                      Target;                                                     // 0x0038   (0x0008)  


	/// Functions
	// Function /Script/Indiana.DeathBehavior.GetTargetMesh
	// class USkeletalMeshComponent* GetTargetMesh();                                                                           // [0x17f9580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.DeathBehavior.CustomTrigger
	// void CustomTrigger();                                                                                                    // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DeathBehavior.CustomTick
	// void CustomTick();                                                                                                       // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DeathBehavior.Complete
	// void Complete();                                                                                                         // [0x17f9540] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.DeathBehaviorStateInfo
/// Size: 0x0120 (288 bytes) (0x000120 - 0x000120) align 8 MaxSize: 0x0120
class UDeathBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.DeathRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UDeathRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Struct /Script/Indiana.DeathBodyTypeAudioEvent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FDeathBodyTypeAudioEvent
{ 
	FGameplayTag                                       DeathAudioEvent;                                            // 0x0000   (0x0008)  
	class UAkAudioEvent*                               AudioEvent;                                                 // 0x0008   (0x0008)  
};

/// Class /Script/Indiana.DeathBodyTypeAudioEvents
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UDeathBodyTypeAudioEvents : public UDataAsset
{ 
public:
	TArray<FDeathBodyTypeAudioEvent>                   AudioEvents;                                                // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.DeathBodyTypeParticleSystems
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UDeathBodyTypeParticleSystems : public UDataAsset
{ 
public:
	TArray<class UParticleSystem*>                     ParticleSystems;                                            // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.DeathClassData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UDeathClassData : public UDataAsset
{ 
public:
	TArray<FDeathClassRow>                             ClassTypeData;                                              // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.DeathMenuWidget
/// Size: 0x0360 (864 bytes) (0x000308 - 0x000360) align 8 MaxSize: 0x0360
class UDeathMenuWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class UVerticalBox*                                OptionsVerticalBox;                                         // 0x0308   (0x0008)  
	class UButtonBase*                                 ResurrectButton;                                            // 0x0310   (0x0008)  
	class UButtonBase*                                 ContinueButton;                                             // 0x0318   (0x0008)  
	class UButtonBase*                                 LoadButton;                                                 // 0x0320   (0x0008)  
	class UButtonBase*                                 SettingsButton;                                             // 0x0328   (0x0008)  
	class UButtonBase*                                 MainMenuButton;                                             // 0x0330   (0x0008)  
	class UButtonBase*                                 QuitButton;                                                 // 0x0338   (0x0008)  
	FString                                            MainMenuLevelName;                                          // 0x0340   (0x0010)  
	class UClass*                                      SettingsMenuClass;                                          // 0x0350   (0x0008)  
	class UClass*                                      SaveLoadClass;                                              // 0x0358   (0x0008)  


	/// Functions
	// Function /Script/Indiana.DeathMenuWidget.OnQueryLatestSaveFinished
	// void OnQueryLatestSaveFinished(FString LatestSaveName, bool bHasSaves);                                                  // [0x17f96a0] Final|Native|Protected 
	// Function /Script/Indiana.DeathMenuWidget.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x17f95b0] Final|Native|Protected 
};

/// Class /Script/Indiana.DeathOverrideStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UDeathOverrideStatusEffect : public UStatusEffect
{ 
public:
	class UClass*                                      DeathClass;                                                 // 0x0188   (0x0008)  
};

/// Class /Script/Indiana.DeathStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UDeathStatusEffect : public UStatusEffect
{ 
public:
	class UClass*                                      DamageType;                                                 // 0x0188   (0x0008)  
};

/// Class /Script/Indiana.DebugOverlayWidget
/// Size: 0x0310 (784 bytes) (0x000308 - 0x000310) align 8 MaxSize: 0x0310
class UDebugOverlayWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class UImage*                                      OverlayImage;                                               // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UDecisionTree : public UObject
{ 
public:


	/// Functions
	// Function /Script/Indiana.DecisionTree.RunSuperDecisionTree
	// TArray<UDecisionTreeRequestData*> RunSuperDecisionTree(class AIndianaAiCharacter* Owner, FName EventType, class UAIEventInfo* EventInfo, EDecisionTreeRequestPriority& OutPriority); // [0x17f9bd0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.DecisionTree.RunMetaDecisionTree
	// TArray<UDecisionTreeRequestData*> RunMetaDecisionTree(class UClass* DecisionTree, class AIndianaAiCharacter* Owner, FName EventType, class UAIEventInfo* EventInfo, EDecisionTreeRequestPriority& OutPriority); // [0x17f99b0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.DecisionTree.RunDecisionTree
	// TArray<UDecisionTreeRequestData*> RunDecisionTree(class AIndianaAiCharacter* Owner, FName EventType, class UAIEventInfo* EventInfo, EDecisionTreeRequestPriority& OutPriority); // [0x17f97f0] Native|Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/Indiana.DecisionTree_AvoidMeleeAttack
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UDecisionTree_AvoidMeleeAttack : public UDecisionTree
{ 
public:
	class UMeleeBlockRequestData*                      MeleeBlockRequest;                                          // 0x0030   (0x0008)  
	class UClass*                                      MetaDodgeTree;                                              // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_Base
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UDecisionTree_Base : public UDecisionTree
{ 
public:
};

/// Class /Script/Indiana.DecisionTree_DefaultMeleeAttack
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UDecisionTree_DefaultMeleeAttack : public UDecisionTree
{ 
public:
	class USearchRequestData*                          SearchRequest;                                              // 0x0030   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_CanidMeleeAttack
/// Size: 0x0068 (104 bytes) (0x000038 - 0x000068) align 8 MaxSize: 0x0068
class UDecisionTree_CanidMeleeAttack : public UDecisionTree_DefaultMeleeAttack
{ 
public:
	class UDecisionTreeSequenceRequestData*            CreateSpaceDashAttackRequest;                               // 0x0038   (0x0008)  
	class UDecisionTreeSequenceRequestData*            DashAttackRequest;                                          // 0x0040   (0x0008)  
	class UDecisionTreeRequestData*                    HowlRequest;                                                // 0x0048   (0x0008)  
	class UDecisionTreeRequestData*                    DodgeRequest;                                               // 0x0050   (0x0008)  
	float                                              MinTargetDistance;                                          // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	class UClass*                                      HowlStatusEffect;                                           // 0x0060   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_CanidOnStatusEffectAdded
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align 8 MaxSize: 0x0060
class UDecisionTree_CanidOnStatusEffectAdded : public UDecisionTree
{ 
public:
	class UDecisionTreeRequestData*                    HowlRequest;                                                // 0x0030   (0x0008)  
	class UDecisionTreeRequestData*                    DodgeRequest;                                               // 0x0038   (0x0008)  
	float                                              MinTargetDistance;                                          // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	class UClass*                                      HowlStatusEffect;                                           // 0x0048   (0x0008)  
	class UClass*                                      AlphaDeathStatusEffect;                                     // 0x0050   (0x0008)  
	class UDecisionTreeRequestData*                    AlphaDeathFleeRequest;                                      // 0x0058   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_CanidMeleeRecovery
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UDecisionTree_CanidMeleeRecovery : public UDecisionTree
{ 
public:
	EMeleeAction                                       DashAttackMeleeAction;                                      // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
	class UMoveToRequestData*                          DashAttackCreateRangeMoveRequest;                           // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_Combined
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_Combined : public UDecisionTree
{ 
public:
	TArray<class UClass*>                              DecisionTrees;                                              // 0x0030   (0x0010)  
	bool                                               bIncludeSuperDecisionTree;                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Indiana.DecisionTree_CombinedRequests
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_CombinedRequests : public UDecisionTree
{ 
public:
	TArray<class UDecisionTreeRequestData*>            Requests;                                                   // 0x0030   (0x0010)  
	bool                                               bIncludeSuperDecisionTree;                                  // 0x0040   (0x0001)  
	EDecisionTreeRequestPriority                       Priority;                                                   // 0x0041   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0042   (0x0006)  MISSED
};

/// Class /Script/Indiana.DecisionTree_CompanionCalledShot
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align 8 MaxSize: 0x0058
class UDecisionTree_CompanionCalledShot : public UDecisionTree
{ 
public:
	class UDecisionTreeSequenceRequestData*            MeleeCalledShotRequest;                                     // 0x0030   (0x0008)  
	class UDecisionTreeSequenceRequestData*            UnlimitedRangeCalledShotRequest;                            // 0x0038   (0x0008)  
	class UDecisionTreeSequenceRequestData*            LimitedRangeCalledShotRequest;                              // 0x0040   (0x0008)  
	class UDecisionTreeSequenceRequestData*            FromFurnitureCalledShotRequest;                             // 0x0048   (0x0008)  
	class UDecisionTreeSequenceRequestData*            FromFallCalledShotRequest;                                  // 0x0050   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_DefaultAttack
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align 8 MaxSize: 0x0058
class UDecisionTree_DefaultAttack : public UDecisionTree
{ 
public:
	class UIdleRequestData*                            IdleRequest;                                                // 0x0030   (0x0008)  
	class UClass*                                      MeleeUnreachableDecisionTree;                               // 0x0038   (0x0008)  
	class UClass*                                      MeleeDecisionTree;                                          // 0x0040   (0x0008)  
	class UClass*                                      RangedDecisionTree;                                         // 0x0048   (0x0008)  
	class UClass*                                      WeaponPreferenceDecisionTree;                               // 0x0050   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_DefaultOutOfCombat
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_DefaultOutOfCombat : public UDecisionTree
{ 
public:
	class UClass*                                      UnawareDecisionTree;                                        // 0x0030   (0x0008)  
	class USuspiciousRequestData*                      SuspiciousRequest;                                          // 0x0038   (0x0008)  
	class UInvestigateRequestData*                     InvestigateRequest;                                         // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_DefaultPacifist
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UDecisionTree_DefaultPacifist : public UDecisionTree
{ 
public:
	class UCowerRequestData*                           CowerRequest;                                               // 0x0030   (0x0008)  
	class UPopRequestData*                             PopRequest;                                                 // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_DefaultRangeAttack
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align 8 MaxSize: 0x0080
class UDecisionTree_DefaultRangeAttack : public UDecisionTree
{ 
public:
	class UCoverRequestData*                           CoverRequest;                                               // 0x0030   (0x0008)  
	class UQuickCoverRequestData*                      QuickCoverRequest;                                          // 0x0038   (0x0008)  
	class URangeRequestData*                           RangedRequest;                                              // 0x0040   (0x0008)  
	class URangeRequestData*                           RangeRequestNoRangeRequirement;                             // 0x0048   (0x0008)  
	class URangeRequestData*                           StationaryRangedRequest;                                    // 0x0050   (0x0008)  
	class URangeRequestData*                           AggresiveRangeRequest;                                      // 0x0058   (0x0008)  
	class URetreatRequestData*                         RetreatRequest;                                             // 0x0060   (0x0008)  
	class UCompanionFollowRequestData*                 CompanionRetreatRequest;                                    // 0x0068   (0x0008)  
	class USearchRequestData*                          MoveCloserSearch;                                           // 0x0070   (0x0008)  
	class UClass*                                      SearchMetaTree;                                             // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_DefaultSwitchContext
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_DefaultSwitchContext : public UDecisionTree
{ 
public:
	class UDecisionTreeSequenceRequestData*            ApproachRequest;                                            // 0x0030   (0x0008)  
	class USwitchContextRequestData*                   CombatRequest;                                              // 0x0038   (0x0008)  
	class USwitchContextRequestData*                   OutOfCombatRequest;                                         // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_Dodge
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align 8 MaxSize: 0x0058
class UDecisionTree_Dodge : public UDecisionTree
{ 
public:
	class UDodgeRequestData*                           LeftRequest;                                                // 0x0030   (0x0008)  
	class UDodgeRequestData*                           BackRequest;                                                // 0x0038   (0x0008)  
	class UDodgeRequestData*                           RightRequest;                                               // 0x0040   (0x0008)  
	bool                                               bDodgeAlongAttack;                                          // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              AvoidanceToleranceDegrees;                                  // 0x004C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Indiana.DecisionTree_ForceCompanionFollow
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UDecisionTree_ForceCompanionFollow : public UDecisionTree
{ 
public:
	class UCompanionFollowRequestData*                 CompanionFollowRequest;                                     // 0x0030   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_GainedAwareness
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UDecisionTree_GainedAwareness : public UDecisionTree
{ 
public:
};

/// Class /Script/Indiana.DecisionTree_GorillianRangeComplete
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_GorillianRangeComplete : public UDecisionTree
{ 
public:
	class UClass*                                      RequestMeleeDecisionTree;                                   // 0x0030   (0x0008)  
	class UDecisionTreeRequestData*                    BurrowRequest;                                              // 0x0038   (0x0008)  
	float                                              DistanceToSwitchToMelee;                                    // 0x0040   (0x0004)  
	float                                              PercentChanceToBurrow;                                      // 0x0044   (0x0004)  
};

/// Class /Script/Indiana.DecisionTree_GorillianMeleeComplete
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UDecisionTree_GorillianMeleeComplete : public UDecisionTree
{ 
public:
	class UDecisionTreeRequestData*                    BurrowRequest;                                              // 0x0030   (0x0008)  
	float                                              PercentChanceToBurrow;                                      // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Indiana.DecisionTree_GorillianBurrowComplete
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_GorillianBurrowComplete : public UDecisionTree
{ 
public:
	class UClass*                                      RequestMeleeDecisionTree;                                   // 0x0030   (0x0008)  
	class UClass*                                      RequestRangeDecisionTree;                                   // 0x0038   (0x0008)  
	float                                              RangeThreshold;                                             // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Indiana.DecisionTree_GorillianCombatStart
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align 8 MaxSize: 0x0050
class UDecisionTree_GorillianCombatStart : public UDecisionTree
{ 
public:
	class UClass*                                      RequestMeleeDecisionTree;                                   // 0x0030   (0x0008)  
	class UClass*                                      RequestRangeDecisionTree;                                   // 0x0038   (0x0008)  
	float                                              RangeThreshold;                                             // 0x0040   (0x0004)  
	float                                              InRangeThresholdRangeWeight;                                // 0x0044   (0x0004)  
	float                                              OutRangeThresholdRangeWeight;                               // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Indiana.DecisionTree_PrimalRavager
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UDecisionTree_PrimalRavager : public UDecisionTree
{ 
public:
	class UDecisionTreeRequestData*                    BurrowRequest;                                              // 0x0030   (0x0008)  
	int32_t                                            AttackCount;                                                // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Indiana.DecisionTree_JumpReposition
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align 8 MaxSize: 0x0058
class UDecisionTree_JumpReposition : public UDecisionTree
{ 
public:
	bool                                               bEnableJumpOnEnterCombat;                                   // 0x0030   (0x0001)  
	bool                                               bEnableJumpForward;                                         // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0032   (0x0006)  MISSED
	FAISelector_FValue                                 JumpForwardMinRange;                                        // 0x0038   (0x0008)  
	class UJumpRequestData*                            JumpForwardRequest;                                         // 0x0040   (0x0008)  
	float                                              Cooldown;                                                   // 0x0048   (0x0004)  
	float                                              Probability;                                                // 0x004C   (0x0004)  
	class UJumpRequestData*                            JumpStrafeRequest;                                          // 0x0050   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_LineOfFireBlocked
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UDecisionTree_LineOfFireBlocked : public UDecisionTree
{ 
public:
	class UClass*                                      DefaultDecisionTree;                                        // 0x0030   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_LostTarget
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UDecisionTree_LostTarget : public UDecisionTree
{ 
public:
	class URepositionSearchRequestData*                RepositionRequestData;                                      // 0x0030   (0x0008)  
	class USearchRequestData*                          SearchRequestData;                                          // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_MantiQueenDefaultTree
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align 8 MaxSize: 0x0080
class UDecisionTree_MantiQueenDefaultTree : public UDecisionTree
{ 
public:
	class UClass*                                      DefaultAttack;                                              // 0x0030   (0x0008)  
	class UClass*                                      RequestMeleeDecisionTree;                                   // 0x0038   (0x0008)  
	class UClass*                                      RequestRangeDecisionTree;                                   // 0x0040   (0x0008)  
	class UDecisionTreeRequestData*                    SpitRequest;                                                // 0x0048   (0x0008)  
	class UDecisionTreeRequestData*                    GlobRequest;                                                // 0x0050   (0x0008)  
	float                                              GlobCooldown;                                               // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	class UDecisionTreeRequestData*                    TailWhipRequest;                                            // 0x0060   (0x0008)  
	float                                              TailWhipRange;                                              // 0x0068   (0x0004)  
	float                                              TailWhipCooldown;                                           // 0x006C   (0x0004)  
	class UDecisionTreeRequestData*                    SpawnRequest;                                               // 0x0070   (0x0008)  
	float                                              SpawnCooldown;                                              // 0x0078   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/Indiana.DecisionTree_MantiQueenRangeComplete
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_MantiQueenRangeComplete : public UDecisionTree
{ 
public:
	class UClass*                                      GlobWeapon;                                                 // 0x0030   (0x0008)  
	class UDecisionTreeRequestData*                    SpitRequest;                                                // 0x0038   (0x0008)  
	class UClass*                                      RequestMeleeDecisionTree;                                   // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_MantiBlock
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_MantiBlock : public UDecisionTree
{ 
public:
	class UClass*                                      DefaultAttack;                                              // 0x0030   (0x0008)  
	class UDecisionTreeRequestData*                    BlockRequest;                                               // 0x0038   (0x0008)  
	float                                              DistanceToBlock;                                            // 0x0040   (0x0004)  
	int32_t                                            AttackCount;                                                // 0x0044   (0x0004)  
};

/// Class /Script/Indiana.DecisionTree_MeleeUnreachable
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_MeleeUnreachable : public UDecisionTree
{ 
public:
	class USearchRequestData*                          ReachableSearchRequest;                                     // 0x0030   (0x0008)  
	class URequestTargetRequestData*                   UnreachableTargetRequest;                                   // 0x0038   (0x0008)  
	class URetreatRequestData*                         RetreatRequest;                                             // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_PreEmptiveMeleeAction
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_PreEmptiveMeleeAction : public UDecisionTree
{ 
public:
	class UMeleeBlockRequestData*                      MeleeBlockRequest;                                          // 0x0030   (0x0008)  
	class UClass*                                      MetaDodgeTree;                                              // 0x0038   (0x0008)  
	float                                              AcceptablePremptivActionRange;                              // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Indiana.DecisionTree_QueueBehavior
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align 8 MaxSize: 0x0078
class UDecisionTree_QueueBehavior : public UDecisionTree
{ 
public:
	class UIdleRequestData*                            IdleRequest;                                                // 0x0030   (0x0008)  
	class UPatrolRequestData*                          PatrolRequest;                                              // 0x0038   (0x0008)  
	class UWanderRequestData*                          WanderRequest;                                              // 0x0040   (0x0008)  
	class UFurnitureRequestData*                       FurnitureRequest;                                           // 0x0048   (0x0008)  
	class UCompanionFollowRequestData*                 CompanionFollowRequest;                                     // 0x0050   (0x0008)  
	class UJumpRequestData*                            JumpRequest;                                                // 0x0058   (0x0008)  
	class UCrouchRequestData*                          CrouchRequest;                                              // 0x0060   (0x0008)  
	class UFollowRequestData*                          FollowRequest;                                              // 0x0068   (0x0008)  
	class UWalkRequestData*                            WalkRequest;                                                // 0x0070   (0x0008)  
};

/// Struct /Script/Indiana.RandomRequestItem
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FRandomRequestItem
{ 
	class UDecisionTreeRequestData*                    Request;                                                    // 0x0000   (0x0008)  
	float                                              Weight;                                                     // 0x0008   (0x0004)  
	float                                              Cooldown;                                                   // 0x000C   (0x0004)  
};

/// Class /Script/Indiana.DecisionTree_RandomRequest
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_RandomRequest : public UDecisionTree
{ 
public:
	bool                                               bDefaultToSuperDecisionTreeOnNoValidRequests;               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<FRandomRequestItem>                         RandomRequestItems;                                         // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.DecisionTree_RaptidonMatriarchOnPhaseChange
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UDecisionTree_RaptidonMatriarchOnPhaseChange : public UDecisionTree
{ 
public:
	class UDecisionTreeRequestData*                    SwitchWeaponPreferenceRequest;                              // 0x0030   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_ReactiveRangeAction
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UDecisionTree_ReactiveRangeAction : public UDecisionTree
{ 
public:
	class UClass*                                      MetaDodgeTree;                                              // 0x0030   (0x0008)  
	class UClass*                                      MetaBlockTree;                                              // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_SecurityBotOutOfCombat
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UDecisionTree_SecurityBotOutOfCombat : public UDecisionTree
{ 
public:
	class UClass*                                      DefaultOutOfCombatDecisionTree;                             // 0x0030   (0x0008)  
	class UDeactivatedRequestData*                     DeactivatedRequest;                                         // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.DecisionTree_WeaponPreference
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align 8 MaxSize: 0x0068
class UDecisionTree_WeaponPreference : public UDecisionTree
{ 
public:
	class USwitchWeaponRequestData*                    SwitchToPrimaryWeaponRequest;                               // 0x0030   (0x0008)  
	class USwitchWeaponRequestData*                    SwitchToRangedWeaponRequest;                                // 0x0038   (0x0008)  
	class USwitchWeaponRequestData*                    SwitchToLimitedRangedWeaponRequest;                         // 0x0040   (0x0008)  
	class USwitchWeaponRequestData*                    SwitchToUnlimitedRangedWeaponRequest;                       // 0x0048   (0x0008)  
	class USwitchWeaponRequestData*                    SwitchToMeleeWeaponRequest;                                 // 0x0050   (0x0008)  
	class USwitchWeaponRequestData*                    SwitchToUnarmedWeaponRequest;                               // 0x0058   (0x0008)  
	bool                                               bIgnoreCooldown;                                            // 0x0060   (0x0001)  
	bool                                               bUseSettingOverride;                                        // 0x0061   (0x0001)  
	EWeaponPreference                                  OverrideWeaponPreference;                                   // 0x0062   (0x0001)  
	bool                                               bOverrideWeaponSwitchCooldown;                              // 0x0063   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Struct /Script/Indiana.PhaseWeaponDefinition
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FPhaseWeaponDefinition
{ 
	int32_t                                            Phase;                                                      // 0x0000   (0x0004)  
	int32_t                                            WeaponIndex;                                                // 0x0004   (0x0004)  
};

/// Class /Script/Indiana.DecisionTree_WeaponSwapByPhase
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UDecisionTree_WeaponSwapByPhase : public UDecisionTree
{ 
public:
	TArray<FPhaseWeaponDefinition>                     PhaseWeaponArray;                                           // 0x0030   (0x0010)  
	uint32_t                                           TargetWeaponIndex;                                          // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Indiana.DecisionTreeStack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FDecisionTreeStack
{ 
	TArray<class UClass*>                              DecisionTrees;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.DecisionTreeContextMap
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 MaxSize: 0x0060
struct FDecisionTreeContextMap
{ 
	FDecisionTreeStack                                 DefaultDecisionTrees;                                       // 0x0000   (0x0010)  
	TMap<FName, FDecisionTreeStack>                    DecisionTreeMap;                                            // 0x0010   (0x0050)  
};

/// Class /Script/Indiana.DecisionTreeComponent
/// Size: 0x0168 (360 bytes) (0x0000E0 - 0x000168) align 8 MaxSize: 0x0168
class UDecisionTreeComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	TMap<EDecisionTreeContextType, FDecisionTreeContextMap> DecisionTreeContextMap;                                // 0x00E8   (0x0050)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0138   (0x0020)  MISSED
	class UDecisionTreeProcessor*                      DecisionTreeProcessor;                                      // 0x0158   (0x0008)  
	class UDecisionTreeProcessor*                      OutOfCombatDecisionTreeProcessor;                           // 0x0160   (0x0008)  


	/// Functions
	// Function /Script/Indiana.DecisionTreeComponent.OnWeaponPreferenceChange
	// void OnWeaponPreferenceChange(EWeaponPreference NewWeaponPreference, EWeaponPreference OldWeaponPreference);             // [0x17fe400] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnTether
	// void OnTether(bool bCanceled, FVector TetherReturnLocation);                                                             // [0x17fe310] Final|Native|Private|HasDefaults 
	// Function /Script/Indiana.DecisionTreeComponent.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                // [0x17fe240] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnStateOfBeingChange
	// void OnStateOfBeingChange(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                 // [0x17fe170] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnStartTraverse
	// void OnStartTraverse(ETraverseType TraverseType, int32_t NavLinkDirection, class AReservableNavLink* ReservableNavLink, class ALadder* ClimbLadder); // [0x17fe010] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnScriptedBehaviorCall
	// void OnScriptedBehaviorCall(class UAISettings_Behavior* ScriptedBehavior, bool bInterruptible);                          // [0x17fdf40] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnReactiveRangeAction
	// void OnReactiveRangeAction();                                                                                            // [0x17fdf20] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnPlayerProximityChange
	// void OnPlayerProximityChange(bool bEnteredProximity);                                                                    // [0x17fde90] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnPlayerConversationProximityChange
	// void OnPlayerConversationProximityChange(bool bInProximity);                                                             // [0x17fde00] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnPlayerConversationChange
	// void OnPlayerConversationChange(class UConversationInstance* Instance, bool bEntered);                                   // [0x17fdd30] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnNewTarget
	// void OnNewTarget();                                                                                                      // [0x17fdd10] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnNearbyInterestPoint
	// void OnNearbyInterestPoint(class UFurnitureComponent* InterestPoint);                                                    // [0x17fdc80] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnDefaultBehaviorChange
	// void OnDefaultBehaviorChange(class UAISettings_Behavior* NewDefaultBehavior, bool bFullReset);                           // [0x17fda50] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x17fd980] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnBehaviorPhaseChange
	// void OnBehaviorPhaseChange(int32_t NewBehaviorPhase);                                                                    // [0x17fd8f0] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnAlertStateChange
	// void OnAlertStateChange(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x17fd790] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnActionToggled
	// void OnActionToggled(ETogglableAction Action, bool bToggled);                                                            // [0x17fd6c0] Final|Native|Private 
};

/// Struct /Script/Indiana.DecisionTreeMapElement
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FDecisionTreeMapElement
{ 
	FGameplayTag                                       EventType;                                                  // 0x0000   (0x0008)  
	class UClass*                                      DecisionTree;                                               // 0x0008   (0x0008)  
};

/// Class /Script/Indiana.DecisionTreeDesignerData
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UDecisionTreeDesignerData : public UDataAsset
{ 
public:
	class UClass*                                      DefaultDecisionTree;                                        // 0x0038   (0x0008)  
	TArray<FDecisionTreeMapElement>                    DecisionTreeMap;                                            // 0x0040   (0x0010)  
};

/// Class /Script/Indiana.DecisionTreeDesignerDataBundle
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UDecisionTreeDesignerDataBundle : public UDataAsset
{ 
public:
	TMap<EDecisionTreeContextType, class UDecisionTreeDesignerData*> DecisionTreeMaps;                             // 0x0038   (0x0050)  
};

/// Struct /Script/Indiana.DecisionTreeResult
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 MaxSize: 0x0038
struct FDecisionTreeResult
{ 
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	class UAIEventInfo*                                EventInfo;                                                  // 0x0010   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0018   (0x0008)  MISSED
	TArray<class UDecisionTreeRequestData*>            DecisionTreeRequests;                                       // 0x0020   (0x0010)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Indiana.DecisionTreeProcessor
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align 8 MaxSize: 0x0068
class UDecisionTreeProcessor : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0030   (0x0008)  MISSED
	TArray<FDecisionTreeResult>                        DecisionTreeResultQueue;                                    // 0x0038   (0x0010)  
	class UBehaviorStateInfo*                          CurrentProcessedStateInfo;                                  // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	TArray<class UBehaviorStateInfo*>                  ProcessedStateInfoSequence;                                 // 0x0058   (0x0010)  
};

/// Class /Script/Indiana.DecisionTreeSequenceRequestData
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UDecisionTreeSequenceRequestData : public UDecisionTreeRequestData
{ 
public:
	TArray<class UBehaviorStateRequestData*>           Requests;                                                   // 0x0038   (0x0010)  
	EDecisionTreeRequestPriority                       Priority;                                                   // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Indiana.DerivedStatWidget
/// Size: 0x0328 (808 bytes) (0x000300 - 0x000328) align 8 MaxSize: 0x0328
class UDerivedStatWidget : public UIndianaUserWidget
{ 
public:
	FLocString                                         Name;                                                       // 0x0300   (0x0008)  
	FLocString                                         Description;                                                // 0x0308   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0310   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0318   (0x0008)  
	class UTextBlockBase*                              ValueTextBlock;                                             // 0x0320   (0x0008)  
};

/// Class /Script/Indiana.DespawnAction
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UDespawnAction : public UAIAction
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0038   (0x0008)  MISSED
};

/// Class /Script/Indiana.DestructibleAudioComponent
/// Size: 0x01A0 (416 bytes) (0x000150 - 0x0001A0) align 8 MaxSize: 0x01A0
class UDestructibleAudioComponent : public UInteractableAudioComponent
{ 
public:
	TMap<EDestructibleEventType, class UAkPlaySoundEventEffect*> AudioEvents;                                      // 0x0150   (0x0050)  


	/// Functions
	// Function /Script/Indiana.DestructibleAudioComponent.Stop
	// void Stop(EDestructibleEventType Type);                                                                                  // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.DestructibleAudioComponent.Play
	// void Play(EDestructibleEventType Type);                                                                                  // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.DestructibleShoutComponent
/// Size: 0x0108 (264 bytes) (0x000100 - 0x000108) align 8 MaxSize: 0x0108
class UDestructibleShoutComponent : public UShoutComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0100   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.DestructibleShoutComponent.OnDestructibleDestroyed
	// void OnDestructibleDestroyed(class AActor* Instigator);                                                                  // [0x17fdb20] Final|Native|Private 
};

/// Class /Script/Indiana.DevelopmentFunctionality
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UDevelopmentFunctionality : public UObject
{ 
public:


	/// Functions
	// Function /Script/Indiana.DevelopmentFunctionality.ToggleTempVO
	// void ToggleTempVO();                                                                                                     // [0xbb4890] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.Task
	// void Task();                                                                                                             // [0x17fe750] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.StartInfoTracking
	// void StartInfoTracking(float TrackRate, bool bTrackStats);                                                               // [0x17fe670] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.FlushLevelStreaming
	// void FlushLevelStreaming();                                                                                              // [0x17fd6a0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.FlushAsyncLoading
	// void FlushAsyncLoading();                                                                                                // [0x17fd680] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.EndInfoTracking
	// void EndInfoTracking();                                                                                                  // [0xbb4890] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.DumpNameTable
	// void DumpNameTable();                                                                                                    // [0x17fd660] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.DebugDrawLightmapNamesSummary
	// void DebugDrawLightmapNamesSummary(float Duration, int32_t LightmapTextureIndex, float VolumeThreshold);                 // [0x17fd540] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.DebugDrawLightmapNamesPerComponent
	// void DebugDrawLightmapNamesPerComponent(float Duration, int32_t LightmapTextureIndex);                                   // [0x17fd470] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.DebugDrawLightmapInfo
	// void DebugDrawLightmapInfo(FString LightmapName, float Duration);                                                        // [0x17fd380] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.Crash
	// void Crash();                                                                                                            // [0x17fd360] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.CharacterMemReport
	// void CharacterMemReport();                                                                                               // [0xbb4890] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.Bug
	// void Bug();                                                                                                              // [0x17fd340] Final|Exec|Native|Protected 
};

/// Class /Script/Indiana.DialogBoxWidget
/// Size: 0x03B8 (952 bytes) (0x000308 - 0x0003B8) align 8 MaxSize: 0x03B8
class UDialogBoxWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x40];                                      // 0x0308   (0x0040)  MISSED
	class UInputLabelWidget*                           ConfirmLabel;                                               // 0x0348   (0x0008)  
	class UInputLabelWidget*                           BackLabel;                                                  // 0x0350   (0x0008)  
	class UVerticalBox*                                ContentVerticalBox;                                         // 0x0358   (0x0008)  
	class UHorizontalBox*                              KeyboardInputBox;                                           // 0x0360   (0x0008)  
	class UHorizontalBox*                              GamepadInputBox;                                            // 0x0368   (0x0008)  
	class USizeBox*                                    BackingBotSizeBox;                                          // 0x0370   (0x0008)  
	class UTextBlockBase*                              TextBlock;                                                  // 0x0378   (0x0008)  
	class UTextBlockBase*                              SubTextBlock;                                               // 0x0380   (0x0008)  
	class UButtonBase*                                 ConfirmButton;                                              // 0x0388   (0x0008)  
	class UTextBlockBase*                              ConfirmTextBlock;                                           // 0x0390   (0x0008)  
	class UButtonBase*                                 CancelButton;                                               // 0x0398   (0x0008)  
	class UTextBlockBase*                              CancelTextBlock;                                            // 0x03A0   (0x0008)  
	float                                              ContentVerticalPadding;                                     // 0x03A8   (0x0004)  
	int32_t                                            BackingMaterialSize;                                        // 0x03AC   (0x0004)  
	int32_t                                            BackingTopSize;                                             // 0x03B0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x03B4   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.DialogBoxWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DialogBoxWidget.OnInputConfirm
	// void OnInputConfirm();                                                                                                   // [0x18023a0] Final|Native|Protected 
	// Function /Script/Indiana.DialogBoxWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x1802360] Final|Native|Protected 
	// Function /Script/Indiana.DialogBoxWidget.OnInputAbort
	// void OnInputAbort();                                                                                                     // [0x1802340] Final|Native|Protected 
};

/// Class /Script/Indiana.DialogBoxRespecWidget
/// Size: 0x03D0 (976 bytes) (0x0003B8 - 0x0003D0) align 8 MaxSize: 0x03D0
class UDialogBoxRespecWidget : public UDialogBoxWidget
{ 
public:
	class UTextBlockBase*                              TextBlockMiddle;                                            // 0x03B8   (0x0008)  
	class UTextBlockBase*                              TextBlockEnd;                                               // 0x03C0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x03C8   (0x0008)  MISSED
};

/// Class /Script/Indiana.DialogWarningBoxWidget
/// Size: 0x0368 (872 bytes) (0x000308 - 0x000368) align 8 MaxSize: 0x0368
class UDialogWarningBoxWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0308   (0x0020)  MISSED
	class UInputLabelWidget*                           ConfirmLabel;                                               // 0x0328   (0x0008)  
	class UInputLabelWidget*                           BackLabel;                                                  // 0x0330   (0x0008)  
	class UTextBlockBase*                              BodyTextblock;                                              // 0x0338   (0x0008)  
	class UHorizontalBox*                              KeyboardInputBox;                                           // 0x0340   (0x0008)  
	class UHorizontalBox*                              GamepadInputBox;                                            // 0x0348   (0x0008)  
	class UButtonBase*                                 ConfirmButton;                                              // 0x0350   (0x0008)  
	class UButtonBase*                                 CancelButton;                                               // 0x0358   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0360   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.DialogWarningBoxWidget.OnInputConfirm
	// void OnInputConfirm();                                                                                                   // [0x18023c0] Final|Native|Protected 
	// Function /Script/Indiana.DialogWarningBoxWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x1802380] Final|Native|Protected 
};

/// Class /Script/Indiana.DifficultyManager
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align 8 MaxSize: 0x0058
class UDifficultyManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0030   (0x0020)  MISSED
	EGameDifficulty                                    Difficulty;                                                 // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0051   (0x0001)  MISSED
	bool                                               SurvivalMode;                                               // 0x0052   (0x0001)  
	unsigned char                                      UnknownData02_7[0x5];                                       // 0x0053   (0x0005)  MISSED


	/// Functions
	// Function /Script/Indiana.DifficultyManager.SetSurvivalMode
	// void SetSurvivalMode(bool IsSurvivalMode);                                                                               // [0x18026e0] Final|Exec|Native|Public 
	// Function /Script/Indiana.DifficultyManager.SetDifficulty
	// void SetDifficulty(EGameDifficulty NewDifficulty);                                                                       // [0x1802660] Final|Exec|Native|Public 
	// Function /Script/Indiana.DifficultyManager.GetGameDifficulty
	// EGameDifficulty GetGameDifficulty();                                                                                     // [0x1801e60] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.DifficultyModifier
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 MaxSize: 0x0090
struct FDifficultyModifier
{ 
	bool                                               bUseCurve;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Value;                                                      // 0x0004   (0x0004)  
	FRuntimeFloatCurve                                 Curve;                                                      // 0x0008   (0x0088)  
};

/// Struct /Script/Indiana.DifficultyStatModifierDescription
/// Size: 0x0250 (592 bytes) (0x000010 - 0x000250) align 8 MaxSize: 0x0250
struct FDifficultyStatModifierDescription : FStatModifierDescriptionBase
{ 
	FDifficultyModifier                                DifficultyModifiers[4];                                     // 0x0010   (0x0240)  
};

/// Class /Script/Indiana.DifficultyRpgStatModifiers
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UDifficultyRpgStatModifiers : public UDataAsset
{ 
public:
	TArray<FDifficultyStatModifierDescription>         RpgStatMods;                                                // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.DifficultySelectWidget
/// Size: 0x0480 (1152 bytes) (0x000308 - 0x000480) align 8 MaxSize: 0x0480
class UDifficultySelectWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x38];                                      // 0x0308   (0x0038)  MISSED
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0340   (0x0008)  
	class UVerticalBox*                                SelectDifficultyPanel;                                      // 0x0348   (0x0008)  
	class UButtonBase*                                 EasyButton;                                                 // 0x0350   (0x0008)  
	class UButtonBase*                                 NormalButton;                                               // 0x0358   (0x0008)  
	class UButtonBase*                                 HardButton;                                                 // 0x0360   (0x0008)  
	class UButtonBase*                                 SuperNovaButton;                                            // 0x0368   (0x0008)  
	class UTextBlockBase*                              DifficultyTextBlock;                                        // 0x0370   (0x0008)  
	class UVerticalBox*                                DifficultyButtonContainer;                                  // 0x0378   (0x0008)  
	class UScrollBox*                                  DifficultyScrollBox;                                        // 0x0380   (0x0008)  
	class UScrollBox*                                  ConversationScrollBox;                                      // 0x0388   (0x0008)  
	float                                              GamepadScrollMultiplier;                                    // 0x0390   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0394   (0x0004)  MISSED
	class UVerticalBox*                                SubtitleSettingsPanel;                                      // 0x0398   (0x0008)  
	class USettingsMenuSlotWidget*                     ConversationTextMenuSlot;                                   // 0x03A0   (0x0008)  
	class USettingsMenuSlotWidget*                     ShowBarkMenuSlot;                                           // 0x03A8   (0x0008)  
	class USettingsMenuSlotWidget*                     ShowCinematicMenuSlot;                                      // 0x03B0   (0x0008)  
	class USettingsMenuSlotWidget*                     FontSizeMenuSlot;                                           // 0x03B8   (0x0008)  
	class UTextBlockBase*                              ConversationSubOptionHeader;                                // 0x03C0   (0x0008)  
	class UTextBlockBase*                              ConversationDescriptionTextBlock;                           // 0x03C8   (0x0008)  
	class UVerticalBox*                                ConversationButtonContainer;                                // 0x03D0   (0x0008)  
	class UHorizontalBox*                              InteractionButtonContainer;                                 // 0x03D8   (0x0008)  
	class UButtonBase*                                 ContinueButton;                                             // 0x03E0   (0x0008)  
	class UButtonBase*                                 ConversationDefaultButton;                                  // 0x03E8   (0x0008)  
	class UClass*                                      OptionPresenterClass;                                       // 0x03F0   (0x0008)  
	class UUserSettingInt32*                           ConversationTextSetting;                                    // 0x03F8   (0x0008)  
	class UUserSettingInt32*                           ShowBarkSubtitleSetting;                                    // 0x0400   (0x0008)  
	class UUserSettingInt32*                           ShowCinematicSubtitleSetting;                               // 0x0408   (0x0008)  
	class UUserSettingInt32*                           FontSizeSetting;                                            // 0x0410   (0x0008)  
	class USettingsMenuData*                           SettingsData;                                               // 0x0418   (0x0008)  
	class UClass*                                      SubtitleSettingsClassRef;                                   // 0x0420   (0x0008)  
	class UClass*                                      FontSizeSettingsClassRef;                                   // 0x0428   (0x0008)  
	class UClass*                                      SliderClass;                                                // 0x0430   (0x0008)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0438   (0x0010)  MISSED
	FInputLabelDescription                             ContinueLabelDesc;                                          // 0x0448   (0x0038)  


	/// Functions
	// Function /Script/Indiana.DifficultySelectWidget.ValueChanged
	// void ValueChanged(class UUserSetting* UserSetting);                                                                      // [0x18027e0] Final|Native|Public  
	// Function /Script/Indiana.DifficultySelectWidget.TrasitionToSubtitleComplete
	// void TrasitionToSubtitleComplete();                                                                                      // [0x1802790] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DifficultySelectWidget.TransitionToDifficultyComplete
	// void TransitionToDifficultyComplete();                                                                                   // [0x1802770] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DifficultySelectWidget.StartTransitionToSubtitleFromDifficulty
	// void StartTransitionToSubtitleFromDifficulty();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DifficultySelectWidget.StartTransitionToDifficultyFromSubtitle
	// void StartTransitionToDifficultyFromSubtitle();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.DirectionalAnimDisableStatusEffect
/// Size: 0x01B0 (432 bytes) (0x0001A0 - 0x0001B0) align 8 MaxSize: 0x01B0
class UDirectionalAnimDisableStatusEffect : public UAnimDisableStatusEffect
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x01A0   (0x0010)  MISSED
};

/// Class /Script/Indiana.Dirt
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UDirt : public UPrimaryDataAsset
{ 
public:
	class UTexture*                                    DirtTexture;                                                // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.DisableBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000120 - 0x000128) align 8 MaxSize: 0x0128
class UDisableBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	TWeakObjectPtr<class UDisableStatusEffect*>        DisableStatusEffect;                                        // 0x0120   (0x0008)  
};

/// Class /Script/Indiana.DisableRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UDisableRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.DisguiseData
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UDisguiseData : public UDataAsset
{ 
public:
	class UClass*                                      Key;                                                        // 0x0038   (0x0008)  
	class UClass*                                      FactionData;                                                // 0x0040   (0x0008)  
	class UClass*                                      ArmorAppearance;                                            // 0x0048   (0x0008)  
	class UClass*                                      HelmetAppearance;                                           // 0x0050   (0x0008)  
};

/// Struct /Script/Indiana.LogicalExpressionGroup
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 MaxSize: 0x0070
struct FLogicalExpressionGroup
{ 
	ELogicalOperator                                   Operator;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FLogicalExpression                                 Expression;                                                 // 0x0008   (0x0068)  
};

/// Struct /Script/Indiana.LogicalGroupedExpression
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 MaxSize: 0x0078
struct FLogicalGroupedExpression
{ 
	FLogicalExpression                                 BaseExpression;                                             // 0x0000   (0x0068)  
	TArray<FLogicalExpressionGroup>                    AdditionalExpressions;                                      // 0x0068   (0x0010)  
};

/// Class /Script/Indiana.QuestItem
/// Size: 0x01D0 (464 bytes) (0x000118 - 0x0001D0) align 8 MaxSize: 0x01D0
class UQuestItem : public UItem
{ 
public:
	bool                                               bCanAddToInventory;                                         // 0x0118   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0119   (0x0003)  MISSED
	FGameplayTag                                       QuestItemType;                                              // 0x011C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	TWeakObjectPtr<class UObject*>                     ItemMesh;                                                   // 0x0128   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0130   (0x0020)  MISSED
	FLogicalGroupedExpression                          LootableCondition;                                          // 0x0150   (0x0078)  
	bool                                               bStackable;                                                 // 0x01C8   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x01C9   (0x0007)  MISSED
};

/// Class /Script/Indiana.DisguiseItem
/// Size: 0x01D0 (464 bytes) (0x0001D0 - 0x0001D0) align 8 MaxSize: 0x01D0
class UDisguiseItem : public UQuestItem
{ 
public:
};

/// Class /Script/Indiana.DisguiseMeterWidget
/// Size: 0x0430 (1072 bytes) (0x000300 - 0x000430) align 8 MaxSize: 0x0430
class UDisguiseMeterWidget : public UIndianaUserWidget
{ 
public:
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0300   (0x0008)  
	class UImage*                                      DisguiseMeterImage;                                         // 0x0308   (0x0008)  
	class UTexture2D*                                  DisguiseDifficultyUnused;                                   // 0x0310   (0x0008)  
	class UTexture2D*                                  DisguiseDifficultyUsed;                                     // 0x0318   (0x0008)  
	class UTexture2D*                                  NormalFrame;                                                // 0x0320   (0x0008)  
	class UTexture2D*                                  RedFrame;                                                   // 0x0328   (0x0008)  
	class UImage*                                      FactionDisguiseImage;                                       // 0x0330   (0x0008)  
	class UHorizontalBox*                              DisguiseTipHorizontalBox;                                   // 0x0338   (0x0008)  
	class UHorizontalBox*                              DisguiseTipFadeHorizontalBox;                               // 0x0340   (0x0008)  
	class UTextBlockBase*                              DisguiseStatusTextBlock;                                    // 0x0348   (0x0008)  
	class UBorder*                                     FrameBorder;                                                // 0x0350   (0x0008)  
	class UImage*                                      ProjectorFrame;                                             // 0x0358   (0x0008)  
	class UImage*                                      LightImage;                                                 // 0x0360   (0x0008)  
	class UBorder*                                     GlowBorder;                                                 // 0x0368   (0x0008)  
	class UHorizontalBox*                              DisguiseChecksHorizontalBox;                                // 0x0370   (0x0008)  
	TWeakObjectPtr<class UTexture2D*>                  DefaultImage;                                               // 0x0378   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0380   (0x0020)  MISSED
	TWeakObjectPtr<class UPlayerEnvironmentInteractionComponent*> EnvironmentInteractionComponent;                 // 0x03A0   (0x0008)  
	float                                              MeterInnerAnimTime;                                         // 0x03A8   (0x0004)  
	int32_t                                            MeterInnerAnimNumFrames;                                    // 0x03AC   (0x0004)  
	unsigned char                                      UnknownData01_7[0x80];                                      // 0x03B0   (0x0080)  MISSED


	/// Functions
	// Function /Script/Indiana.DisguiseMeterWidget.UpdateDisguiseMeterInnerAnim
	// void UpdateDisguiseMeterInnerAnim(int32_t CurrentFrame);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.UpdateDisguiseMeterFill
	// void UpdateDisguiseMeterFill(float NewValue);                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.ShowDisguiseMeterTip
	// void ShowDisguiseMeterTip(float StartTime);                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.OnRestrictedAreaExited
	// void OnRestrictedAreaExited(class ARestrictedArea* RestrictedArea);                                                      // [0x18025d0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18022b0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnEnterRestrictedAreaWithoutDisguise
	// void OnEnterRestrictedAreaWithoutDisguise(class UDisguiseData* Disguise, bool bMissingShroud);                           // [0x18020f0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseUnequipped
	// void OnDisguiseUnequipped();                                                                                             // [0x18020d0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseRefilled
	// void OnDisguiseRefilled();                                                                                               // [0x18020b0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseMeterVisibilityChanged
	// void OnDisguiseMeterVisibilityChanged(bool bVisible);                                                                    // [0x1802020] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseMeterChanged
	// void OnDisguiseMeterChanged(float NewValue);                                                                             // [0x1801fa0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseImageLoaded
	// void OnDisguiseImageLoaded();                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseFailure
	// void OnDisguiseFailure();                                                                                                // [0x1801f80] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseEquipped
	// void OnDisguiseEquipped(class UDisguiseData* Disguise);                                                                  // [0x1801ef0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseEnd
	// void OnDisguiseEnd();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseBegin
	// void OnDisguiseBegin();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.HideDisguiseMeterTip
	// void HideDisguiseMeterTip(float StartTime);                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.DisguiseStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UDisguiseStatusEffect : public UStatusEffect
{ 
public:
	class UClass*                                      FactionData;                                                // 0x0188   (0x0008)  
};

/// Class /Script/Indiana.DisplayInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UDisplayInterface : public UInterface
{ 
public:
};

/// Class /Script/Indiana.DLCManager
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align 8 MaxSize: 0x0050
class UDLCManager : public UObject
{ 
public:
	SDK_UNDEFINED(16,458) /* FMulticastInlineDelegate */ __um(OnDLCCheckComplete);                                 // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0040   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.DLCManager.OnGlobalVarChanged
	// void OnGlobalVarChanged(FString VariableName, int32_t NewValue);                                                         // [0x18021c0] Final|Native|Protected 
	// Function /Script/Indiana.DLCManager.IsINX2Installed
	// bool IsINX2Installed();                                                                                                  // [0x1801ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.DLCManager.IsINX1Installed
	// bool IsINX1Installed();                                                                                                  // [0x1801e90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.DodgeBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000120 - 0x000128) align 8 MaxSize: 0x0128
class UDodgeBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0120   (0x0008)  MISSED
};

/// Class /Script/Indiana.DodgeRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class UDodgeRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
	EDodgeDirection                                    DodgeDirection;                                             // 0x0068   (0x0001)  
	bool                                               bPerformRecovery;                                           // 0x0069   (0x0001)  
	bool                                               bRequireClearDodgePath;                                     // 0x006A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x006B   (0x0005)  MISSED
};

/// Class /Script/Indiana.Door
/// Size: 0x0420 (1056 bytes) (0x0002B8 - 0x000420) align 8 MaxSize: 0x0420
class ADoor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x38];                                      // 0x02B8   (0x0038)  MISSED
	SDK_UNDEFINED(16,459) /* FMulticastInlineDelegate */ __um(OnOCLOpenStart);                                     // 0x02F0   (0x0010)  
	SDK_UNDEFINED(16,460) /* FMulticastInlineDelegate */ __um(OnOCLOpenEnd);                                       // 0x0300   (0x0010)  
	SDK_UNDEFINED(16,461) /* FMulticastInlineDelegate */ __um(OnOCLCloseStart);                                    // 0x0310   (0x0010)  
	SDK_UNDEFINED(16,462) /* FMulticastInlineDelegate */ __um(OnOCLCloseEnd);                                      // 0x0320   (0x0010)  
	SDK_UNDEFINED(16,463) /* FMulticastInlineDelegate */ __um(OnOCLOpenAttemptedLocked);                           // 0x0330   (0x0010)  
	SDK_UNDEFINED(16,464) /* FMulticastInlineDelegate */ __um(OnOCLOpenAttemptedBarred);                           // 0x0340   (0x0010)  
	SDK_UNDEFINED(16,465) /* FMulticastInlineDelegate */ __um(OnOCLLocked);                                        // 0x0350   (0x0010)  
	SDK_UNDEFINED(16,466) /* FMulticastInlineDelegate */ __um(OnOCLUnlocked);                                      // 0x0360   (0x0010)  
	SDK_UNDEFINED(16,467) /* FMulticastInlineDelegate */ __um(OnOCLBarred);                                        // 0x0370   (0x0010)  
	SDK_UNDEFINED(16,468) /* FMulticastInlineDelegate */ __um(OnOCLUnbarred);                                      // 0x0380   (0x0010)  
	SDK_UNDEFINED(16,469) /* FMulticastInlineDelegate */ __um(OnOCLSealed);                                        // 0x0390   (0x0010)  
	SDK_UNDEFINED(16,470) /* FMulticastInlineDelegate */ __um(OnOCLUnsealed);                                      // 0x03A0   (0x0010)  
	SDK_UNDEFINED(16,471) /* FMulticastInlineDelegate */ __um(OnOCLLockpickStart);                                 // 0x03B0   (0x0010)  
	SDK_UNDEFINED(16,472) /* FMulticastInlineDelegate */ __um(OnOCLLockpickSuccess);                               // 0x03C0   (0x0010)  
	SDK_UNDEFINED(16,473) /* FMulticastInlineDelegate */ __um(OnOCLLockpickInterrupted);                           // 0x03D0   (0x0010)  
	SDK_UNDEFINED(16,474) /* FMulticastInlineDelegate */ __um(OnOCLLockpickLoopStop);                              // 0x03E0   (0x0010)  
	class USceneComponent*                             SceneComponent;                                             // 0x03F0   (0x0008)  
	class UOCLComponent*                               OCLComponent;                                               // 0x03F8   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0400   (0x0008)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x0408   (0x0008)  
	class UIndianaNavModifierComponent*                NavModComponent;                                            // 0x0410   (0x0008)  
	class UTravelTriggerComponent*                     TravelTriggerComponent;                                     // 0x0418   (0x0008)  


	/// Functions
	// Function /Script/Indiana.Door.TriggersTravel
	// bool TriggersTravel();                                                                                                   // [0x18027b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Door.OnOCLStateChange
	// void OnOCLStateChange(EOCLState PreviousState, EOCLState CurrentState);                                                  // [0x18023e0] Final|Native|Protected 
};

/// Class /Script/Indiana.DragContainerWidget
/// Size: 0x02B8 (696 bytes) (0x000278 - 0x0002B8) align 8 MaxSize: 0x02B8
class UDragContainerWidget : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0278   (0x0030)  MISSED
	class UClass*                                      OperationClass;                                             // 0x02A8   (0x0008)  
	class UNamedSlot*                                  NamedSlot;                                                  // 0x02B0   (0x0008)  


	/// Functions
	// Function /Script/Indiana.DragContainerWidget.OnOperationDrop
	// void OnOperationDrop(class UDragDropOperation* Operation);                                                               // [0x1802540] Final|Native|Public  
	// Function /Script/Indiana.DragContainerWidget.OnOperationDragCancelled
	// void OnOperationDragCancelled(class UDragDropOperation* Operation);                                                      // [0x18024b0] Final|Native|Public  
	// Function /Script/Indiana.DragContainerWidget.OnDragStarted
	// void OnDragStarted(class UIndianaDragDropOperation* Operation);                                                          // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DragContainerWidget.OnDragGroupStarted
	// void OnDragGroupStarted(class UIndianaDragDropOperation* Operation);                                                     // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DragContainerWidget.OnDragGroupDrop
	// void OnDragGroupDrop(class UIndianaDragDropOperation* Operation);                                                        // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DragContainerWidget.OnDragGroupCancelled
	// void OnDragGroupCancelled(class UIndianaDragDropOperation* Operation);                                                   // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DragContainerWidget.OnDragConfirmDrop
	// void OnDragConfirmDrop(class UIndianaDragDropOperation* Operation);                                                      // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.DraggableInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UDraggableInterface : public UInterface
{ 
public:
};

/// Class /Script/Indiana.DragVisualsWidget
/// Size: 0x0278 (632 bytes) (0x000278 - 0x000278) align 8 MaxSize: 0x0278
class UDragVisualsWidget : public UUserWidget
{ 
public:
};

/// Class /Script/Indiana.ItemCellVisualsWidget
/// Size: 0x0280 (640 bytes) (0x000278 - 0x000280) align 8 MaxSize: 0x0280
class UItemCellVisualsWidget : public UDragVisualsWidget
{ 
public:
	class UImage*                                      Image;                                                      // 0x0278   (0x0008)  
};

/// Class /Script/Indiana.DynamicTOD
/// Size: 0x0EE8 (3816 bytes) (0x0002B8 - 0x000EE8) align 8 MaxSize: 0x0EE8
class ADynamicTOD : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x1A0];                                     // 0x02B8   (0x01A0)  MISSED
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0458   (0x0008)  
	bool                                               Use24HourCurveEvaluation;                                   // 0x0460   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0461   (0x0007)  MISSED
	FRuntimeCurveLinearColor                           SunLightColor;                                              // 0x0468   (0x0208)  
	FRuntimeFloatCurve                                 SunLightIntensity;                                          // 0x0670   (0x0088)  
	FRuntimeCurveLinearColor                           MoonLightColor;                                             // 0x06F8   (0x0208)  
	FRuntimeFloatCurve                                 MoonLightIntensity;                                         // 0x0900   (0x0088)  
	FRuntimeFloatCurve                                 LightIntensity;                                             // 0x0988   (0x0088)  
	FRuntimeFloatCurve                                 SkyLightIntensity;                                          // 0x0A10   (0x0088)  
	FRuntimeFloatCurve                                 StarBrightness;                                             // 0x0A98   (0x0088)  
	FRuntimeFloatCurve                                 SunSpriteScale;                                             // 0x0B20   (0x0088)  
	FRuntimeCurveLinearColor                           LightColor;                                                 // 0x0BA8   (0x0208)  
	bool                                               bUseSunLightColorCurve;                                     // 0x0DB0   (0x0001)  
	bool                                               bUseSunLightIntensityCurve;                                 // 0x0DB1   (0x0001)  
	bool                                               bUseMoonLightColorCurve;                                    // 0x0DB2   (0x0001)  
	bool                                               bUseMoonLightIntensityCurve;                                // 0x0DB3   (0x0001)  
	EWeatherType                                       WeatherType;                                                // 0x0DB4   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0DB5   (0x0003)  MISSED
	FRotator                                           SunRotationOffset;                                          // 0x0DB8   (0x000C)  
	float                                              SunTurnOffThreshold;                                        // 0x0DC4   (0x0004)  
	FRotator                                           MoonRotationOffset;                                         // 0x0DC8   (0x000C)  
	float                                              MoonTurnOffThreshold;                                       // 0x0DD4   (0x0004)  
	FName                                              NoWeatherStateName;                                         // 0x0DD8   (0x0008)  
	TWeakObjectPtr<class UMaterialParameterCollection*> GlobalMaterialParameterCollection;                         // 0x0DE0   (0x0008)  
	FName                                              GlobalMaterialWholeSceneLightVectorParameterName;           // 0x0DE8   (0x0008)  
	FName                                              GlobalMaterialSunColorParameterName;                        // 0x0DF0   (0x0008)  
	FName                                              GlobalMaterialStarsIntensityParameterName;                  // 0x0DF8   (0x0008)  
	FName                                              GlobalMaterialNormalizedTimeParameterName;                  // 0x0E00   (0x0008)  
	TWeakObjectPtr<class UMaterialParameterCollection*> MoonsMaterialParameterCollection;                          // 0x0E08   (0x0008)  
	FName                                              UseDebugTimePropertyName;                                   // 0x0E10   (0x0008)  
	FName                                              DebugTimePropertyName;                                      // 0x0E18   (0x0008)  
	FName                                              AutoUpdateSkyCapturePropertyName;                           // 0x0E20   (0x0008)  
	FName                                              EnableLoggingPropertyName;                                  // 0x0E28   (0x0008)  
	FName                                              AutoUpdateDebugTimePropertyName;                            // 0x0E30   (0x0008)  
	FName                                              DebugWeatherPropertyName;                                   // 0x0E38   (0x0008)  
	FName                                              SunDynamicShadowDistancePropertyName;                       // 0x0E40   (0x0008)  
	FName                                              MoonDynamicShadowDistancePropertyName;                      // 0x0E48   (0x0008)  
	FName                                              RainAndLightMaskPropertyName;                               // 0x0E50   (0x0008)  
	FName                                              SunElevationPropertyName;                                   // 0x0E58   (0x0008)  
	FName                                              MoonElevationPropertyName;                                  // 0x0E60   (0x0008)  
	FName                                              MaterialSpecularNearFarPropertyName;                        // 0x0E68   (0x0008)  
	FName                                              WetMaterialSpecularNearFarPropertyName;                     // 0x0E70   (0x0008)  
	FName                                              DrySkyProbeMipBrightnessPropertyName;                       // 0x0E78   (0x0008)  
	FName                                              WetSkyProbeMipBrightnessPropertyName;                       // 0x0E80   (0x0008)  
	FName                                              MoonLightIntensityPropertyName;                             // 0x0E88   (0x0008)  
	FName                                              MoonLightColorPropertyName;                                 // 0x0E90   (0x0008)  
	FName                                              RandomWeatherStartPropertyName;                             // 0x0E98   (0x0008)  
	FName                                              WeatherStartChancePropertyName;                             // 0x0EA0   (0x0008)  
	FName                                              WeatherStartEventPropertyName;                              // 0x0EA8   (0x0008)  
	FName                                              WeatherEndEventPropertyName;                                // 0x0EB0   (0x0008)  
	FName                                              WeatherStateGroupPropertyName;                              // 0x0EB8   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0EC0   (0x0008)  MISSED
	FName                                              WetnessPropertyName;                                        // 0x0EC8   (0x0008)  
	FName                                              StepShadowTimeBetweenUpdatesPropertyName;                   // 0x0ED0   (0x0008)  
	FName                                              StepShadowUpdateLengthPropertyName;                         // 0x0ED8   (0x0008)  
	FName                                              SpawnedWeatherPSPropertyName;                               // 0x0EE0   (0x0008)  


	/// Functions
	// Function /Script/Indiana.DynamicTOD.WeatherTimelineUpdateReverse
	// void WeatherTimelineUpdateReverse(float CurrentWeatherAmount, float CurrentMaterialWetness);                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.WeatherTimelineUpdateForward
	// void WeatherTimelineUpdateForward(float CurrentWeatherAmount, float CurrentMaterialWetness);                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.StartSaveWeather
	// void StartSaveWeather();                                                                                                 // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.SaveCurrentWeather
	// void SaveCurrentWeather(class UWeatherStateContainer* InWeatherState);                                                   // [0x18058c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DynamicTOD.ResetSavedWeather
	// void ResetSavedWeather();                                                                                                // [0x18058a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DynamicTOD.GetWeatherWwiseStateName
	// FName GetWeatherWwiseStateName();                                                                                        // [0x1804c00] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.GetWeatherParticleSystem
	// class UParticleSystem* GetWeatherParticleSystem();                                                                       // [0x1804bd0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.GetPreviousWeatherState
	// class UWeatherStateContainer* GetPreviousWeatherState();                                                                 // [0x1804b80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DynamicTOD.ForceUpdate
	// void ForceUpdate();                                                                                                      // [0x1804b40] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.Elevator
/// Size: 0x03E0 (992 bytes) (0x0002B8 - 0x0003E0) align 8 MaxSize: 0x03E0
class AElevator : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x40];                                      // 0x02B8   (0x0040)  MISSED
	SDK_UNDEFINED(16,475) /* FMulticastInlineDelegate */ __um(OnElevatorMoveStart);                                // 0x02F8   (0x0010)  
	SDK_UNDEFINED(16,476) /* FMulticastInlineDelegate */ __um(OnElevatorMoveEnd);                                  // 0x0308   (0x0010)  
	float                                              InitialSplineTime;                                          // 0x0318   (0x0004)  
	float                                              DistanceMovedPerSecond;                                     // 0x031C   (0x0004)  
	float                                              ApproximateTransitTime;                                     // 0x0320   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0324   (0x0004)  MISSED
	class USceneComponent*                             SceneComponent;                                             // 0x0328   (0x0008)  
	class USceneComponent*                             CarriageComponent;                                          // 0x0330   (0x0008)  
	class UStaticMeshComponent*                        FrameMeshComponent;                                         // 0x0338   (0x0008)  
	class USplineComponent*                            SplineComponent;                                            // 0x0340   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0348   (0x0008)  
	class UAkComponent*                                AkComponent;                                                // 0x0350   (0x0008)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0358   (0x0010)  MISSED
	TArray<class ADoor*>                               ExternalDoors;                                              // 0x0368   (0x0010)  
	class ADoor*                                       OriginExternalDoor;                                         // 0x0378   (0x0008)  
	class ADoor*                                       DestinationExternalDoor;                                    // 0x0380   (0x0008)  
	class UChildActorComponent*                        GhostNavMesh_StartFloor;                                    // 0x0388   (0x0008)  
	class UChildActorComponent*                        GhostNavMesh_EndFloor;                                      // 0x0390   (0x0008)  
	TArray<class AGhostNavMesh*>                       FloorGhostNavMeshes;                                        // 0x0398   (0x0010)  
	class USceneComponent*                             WaitLocationLeft;                                           // 0x03A8   (0x0008)  
	class USceneComponent*                             WaitLocationMiddle;                                         // 0x03B0   (0x0008)  
	class USceneComponent*                             WaitLocationRight;                                          // 0x03B8   (0x0008)  
	TArray<class USceneComponent*>                     WaitLocations;                                              // 0x03C0   (0x0010)  
	class UTravelTriggerComponent*                     TravelTriggerComponent;                                     // 0x03D0   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x03D8   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.Elevator.SetCurrentFloor
	// void SetCurrentFloor(int32_t FloorIndex);                                                                                // [0x1805950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Elevator.OnStartMoveExternalDoors
	// void OnStartMoveExternalDoors(int32_t DestinationFloor, bool bFromStationary);                                           // [0x1805790] Final|Native|Protected 
	// Function /Script/Indiana.Elevator.OnEndMoveExternalDoors
	// void OnEndMoveExternalDoors(int32_t DestinationFloor);                                                                   // [0x1804fd0] Final|Native|Protected 
	// Function /Script/Indiana.Elevator.IsStationary
	// bool IsStationary();                                                                                                     // [0x1804cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Elevator.IsMoving
	// bool IsMoving();                                                                                                         // [0x1804ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Elevator.GetTargetFloor
	// int32_t GetTargetFloor();                                                                                                // [0x1804bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Elevator.GetCurrentFloor
	// int32_t GetCurrentFloor();                                                                                               // [0x1804b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ElevatorAudioComponent
/// Size: 0x01A0 (416 bytes) (0x000150 - 0x0001A0) align 8 MaxSize: 0x01A0
class UElevatorAudioComponent : public UInteractableAudioComponent
{ 
public:
	TMap<EElevatorEventType, class UAkPlaySoundEventEffect*> AudioEvents;                                          // 0x0150   (0x0050)  


	/// Functions
	// Function /Script/Indiana.ElevatorAudioComponent.Stop
	// void Stop(EElevatorEventType Type);                                                                                      // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ElevatorAudioComponent.Play
	// void Play(EElevatorEventType Type);                                                                                      // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IdleDisableStatusEffect
/// Size: 0x01A0 (416 bytes) (0x000198 - 0x0001A0) align 8 MaxSize: 0x01A0
class UIdleDisableStatusEffect : public UDisableStatusEffect
{ 
public:
	EDisablePriority                                   DisablePriority;                                            // 0x0198   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0199   (0x0007)  MISSED
};

/// Class /Script/Indiana.ElevatorDisableStatusEffect
/// Size: 0x01A8 (424 bytes) (0x0001A0 - 0x0001A8) align 8 MaxSize: 0x01A8
class UElevatorDisableStatusEffect : public UIdleDisableStatusEffect
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x01A0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.ElevatorDisableStatusEffect.OnElevatorMoveEnd
	// void OnElevatorMoveEnd(int32_t DestinationFloor);                                                                        // [0x1804f40] Final|Native|Protected 
};

/// Struct /Script/Indiana.EmotionEntry
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 MaxSize: 0x00A8
struct FEmotionEntry
{ 
	TMap<FName, FLoopRandomSequence>                   TalkingSequences;                                           // 0x0000   (0x0050)  
	TArray<FRandomPlayerSequenceEntryNamed>            Idle;                                                       // 0x0050   (0x0010)  
	TArray<FRandomPlayerSequenceEntryNamed>            DialogIdle;                                                 // 0x0060   (0x0010)  
	TArray<FLoopRandomSequence>                        IdleStates;                                                 // 0x0070   (0x0010)  
	class UAnimSequence*                               WalkForwardSequence;                                        // 0x0080   (0x0008)  
	class UAnimSequence*                               BeginEmotionSequence;                                       // 0x0088   (0x0008)  
	class UAnimSequence*                               EmotionAdditiveLayerStart;                                  // 0x0090   (0x0008)  
	class UAnimSequence*                               EmotionAdditiveLayer;                                       // 0x0098   (0x0008)  
	float                                              AdditiveLayerStrengthOffset;                                // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Indiana.EmotionData
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UEmotionData : public UDataAsset
{ 
public:
	TMap<EEmotion, FEmotionEntry>                      Emotions;                                                   // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.EnableEmitterModVisual
/// Size: 0x0080 (128 bytes) (0x000068 - 0x000080) align 8 MaxSize: 0x0080
class UEnableEmitterModVisual : public UModVisual
{ 
public:
	TArray<FName>                                      EmitterNames;                                               // 0x0068   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0078   (0x0008)  MISSED
};

/// Struct /Script/Indiana.PotentialEncounterList
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FPotentialEncounterList
{ 
	class UEncounterList*                              EncounterList;                                              // 0x0000   (0x0008)  
	int32_t                                            Priority;                                                   // 0x0008   (0x0004)  
	bool                                               bPersistEncounter;                                          // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Indiana.EncounterClearConditions
/// Size: 0x00F8 (248 bytes) (0x000000 - 0x0000F8) align 8 MaxSize: 0x00F8
struct FEncounterClearConditions
{ 
	FLogicalGroupedExpression                          ForceClearConditions;                                       // 0x0000   (0x0078)  
	FLogicalGroupedExpression                          ClearConditions;                                            // 0x0078   (0x0078)  
	float                                              KillPercentToClear;                                         // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00F4   (0x0004)  MISSED
};

/// Struct /Script/Indiana.GameTimeDataEntry
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FGameTimeDataEntry
{ 
	int32_t                                            Days;                                                       // 0x0000   (0x0004)  
	int32_t                                            Hours;                                                      // 0x0004   (0x0004)  
	int32_t                                            Minutes;                                                    // 0x0008   (0x0004)  
};

/// Struct /Script/Indiana.EncounterActivationConditions
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 MaxSize: 0x0098
struct FEncounterActivationConditions
{ 
	FLogicalGroupedExpression                          ValidConditions;                                            // 0x0000   (0x0078)  
	bool                                               bRestrictTimePhases;                                        // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0079   (0x0007)  MISSED
	TArray<EPhaseOfDay>                                ValidTimePhases;                                            // 0x0080   (0x0010)  
	float                                              ActivationChance;                                           // 0x0090   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/Indiana.Encounter
/// Size: 0x0608 (1544 bytes) (0x0002B8 - 0x000608) align 8 MaxSize: 0x0608
class AEncounter : public AActor
{ 
public:
	SDK_UNDEFINED(16,477) /* FMulticastInlineDelegate */ __um(OnEncounterComplete);                                // 0x02B8   (0x0010)  
	SDK_UNDEFINED(16,478) /* FMulticastInlineDelegate */ __um(OnEncounterActivated);                               // 0x02C8   (0x0010)  
	SDK_UNDEFINED(16,479) /* FMulticastInlineDelegate */ __um(OnEncounterDeactivated);                             // 0x02D8   (0x0010)  
	SDK_UNDEFINED(16,480) /* FMulticastInlineDelegate */ __um(OnEncounterActorDamaged);                            // 0x02E8   (0x0010)  
	SDK_UNDEFINED(16,481) /* FMulticastInlineDelegate */ __um(OnEncounterActorKilled);                             // 0x02F8   (0x0010)  
	SDK_UNDEFINED(16,482) /* FMulticastInlineDelegate */ __um(OnEncounterActorAlertChanged);                       // 0x0308   (0x0010)  
	SDK_UNDEFINED(16,483) /* FMulticastInlineDelegate */ __um(OnEncounterActorCombatChanged);                      // 0x0318   (0x0010)  
	SDK_UNDEFINED(16,484) /* FMulticastInlineDelegate */ __um(OnEncounterActorDespawned);                          // 0x0328   (0x0010)  
	bool                                               bPropagateEditorChangesToChildNodes;                        // 0x0338   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0339   (0x0007)  MISSED
	TArray<class UEncounterList*>                      EncounterLists;                                             // 0x0340   (0x0010)  
	TArray<FPotentialEncounterList>                    PotentialEncounterLists;                                    // 0x0350   (0x0010)  
	bool                                               bPersist;                                                   // 0x0360   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0361   (0x0007)  MISSED
	FEncounterClearConditions                          ClearConditions;                                            // 0x0368   (0x00F8)  
	bool                                               bResetIfComplete;                                           // 0x0460   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0461   (0x0003)  MISSED
	FGameTimeDataEntry                                 CooldownTime;                                               // 0x0464   (0x000C)  
	bool                                               bEncounterEnabled;                                          // 0x0470   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0471   (0x0007)  MISSED
	FEncounterActivationConditions                     EnabledConditions;                                          // 0x0478   (0x0098)  
	float                                              ActivationRadius;                                           // 0x0510   (0x0004)  
	TWeakObjectPtr<class AActor*>                      ActivationActor;                                            // 0x0514   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x051C   (0x0004)  MISSED
	SDK_UNDEFINED(16,485) /* TArray<TWeakObjectPtr<AActor*>> */ __um(ActivationActors);                            // 0x0520   (0x0010)  
	float                                              DeactivationTime;                                           // 0x0530   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0534   (0x0004)  MISSED
	SDK_UNDEFINED(16,486) /* TArray<TWeakObjectPtr<ASpawnNodeBase*>> */ __um(ChildNodes);                          // 0x0538   (0x0010)  
	class UClass*                                      TeamOverride;                                               // 0x0548   (0x0008)  
	bool                                               bShareSameLevel;                                            // 0x0550   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0551   (0x0003)  MISSED
	int32_t                                            LevelOffset;                                                // 0x0554   (0x0004)  
	EEncounterAggroType                                AggroType;                                                  // 0x0558   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0559   (0x0007)  MISSED
	class UObsidianIDComponent*                        ObsidianID;                                                 // 0x0560   (0x0008)  
	unsigned char                                      UnknownData08_6[0x90];                                      // 0x0568   (0x0090)  MISSED
	bool                                               bOverrideForceTetherRadius;                                 // 0x05F8   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x05F9   (0x0003)  MISSED
	float                                              OverrideForceTetherRadius;                                  // 0x05FC   (0x0004)  
	EPseudoGodMode                                     PseudoGodModeOverride;                                      // 0x0600   (0x0001)  
	unsigned char                                      UnknownData10_7[0x7];                                       // 0x0601   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.Encounter.SetEncounterEnabled
	// void SetEncounterEnabled(bool bEnabled);                                                                                 // [0x18059e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.ResetActivationFailed
	// void ResetActivationFailed();                                                                                            // [0x1805880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.RefreshEncounter
	// void RefreshEncounter();                                                                                                 // [0x1805860] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.OnNodeBeginSpawning
	// void OnNodeBeginSpawning(class ASpawnNodeBase* Node);                                                                    // [0x1805700] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorSpawned
	// void OnNodeActorSpawned(class ASpawnNodeBase* Node, bool bDamageable, bool bFirstSpawn);                                 // [0x18055f0] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorKilled
	// void OnNodeActorKilled(class ASpawnNodeBase* Node, bool bFirstKill);                                                     // [0x1805520] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorDespawned
	// void OnNodeActorDespawned(class ASpawnNodeBase* Node);                                                                   // [0x1805490] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorDamaged
	// void OnNodeActorDamaged(class ASpawnNodeBase* Node, FCauseDamageInfo& CauseDamageInfo);                                  // [0x18053a0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Encounter.OnNodeActorCombatState
	// void OnNodeActorCombatState(class ASpawnNodeBase* Node, bool bInCombat, bool bRestoring);                                // [0x1805290] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorAwareOfPlayer
	// void OnNodeActorAwareOfPlayer(class ASpawnNodeBase* Node, bool bRestoring);                                              // [0x18051c0] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorAlertState
	// void OnNodeActorAlertState(class ASpawnNodeBase* Node, class AActor* TargetActor, EAlertState State, bool bRestoring);   // [0x1805060] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnActivationEndOverlap
	// void OnActivationEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);                                    // [0x1804e70] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnActivationBeginOverlap
	// void OnActivationBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);                                  // [0x1804da0] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.IterateThroughSpawnedActors
	// void IterateThroughSpawnedActors(FDelegateProperty& GenericFunctionCall);                                                // [0x1804cf0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.Encounter.IsEncounterActive
	// bool IsEncounterActive();                                                                                                // [0x1804c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Encounter.HasEncounterCompleted
	// bool HasEncounterCompleted();                                                                                            // [0x1804c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Encounter.ForceDeactivateEncounter
	// void ForceDeactivateEncounter();                                                                                         // [0x1804b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.DeactivateEncounter
	// void DeactivateEncounter();                                                                                              // [0x1804b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.ActivateEncounter
	// void ActivateEncounter();                                                                                                // [0x1804ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.EncounterComponent
/// Size: 0x0270 (624 bytes) (0x000268 - 0x000270) align 16 MaxSize: 0x0270
class UEncounterComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0268   (0x0008)  MISSED
};

/// Class /Script/Indiana.EncounterEnemyDescription
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UEncounterEnemyDescription : public UObject
{ 
public:
	uint32_t                                           Count;                                                      // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Indiana.EncounterEnemyScaled
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UEncounterEnemyScaled : public UEncounterEnemyDescription
{ 
public:
	class UScaledActorTable*                           ScaledActorTable;                                           // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.EncounterEnemyFixed
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align 8 MaxSize: 0x0060
class UEncounterEnemyFixed : public UEncounterEnemyDescription
{ 
public:
	TSoftObjectPtr<class UClass*>                      ActorClass;                                                 // 0x0038   (0x0028)  
};

/// Class /Script/Indiana.EncounterCompositionBase
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align 8 MaxSize: 0x00B0
class UEncounterCompositionBase : public UObject
{ 
public:
	FLogicalGroupedExpression                          ValidConditions;                                            // 0x0030   (0x0078)  
	int32_t                                            Weight;                                                     // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Indiana.EncounterCompositionStandard
/// Size: 0x00C0 (192 bytes) (0x0000B0 - 0x0000C0) align 8 MaxSize: 0x00C0
class UEncounterCompositionStandard : public UEncounterCompositionBase
{ 
public:
	TArray<class UEncounterEnemyDescription*>          EncounterEnemies;                                           // 0x00B0   (0x0010)  
};

/// Class /Script/Indiana.EncounterCompositionSubList
/// Size: 0x00B8 (184 bytes) (0x0000B0 - 0x0000B8) align 8 MaxSize: 0x00B8
class UEncounterCompositionSubList : public UEncounterCompositionBase
{ 
public:
	class UEncounterList*                              SubEncounterList;                                           // 0x00B0   (0x0008)  
};

/// Class /Script/Indiana.EncounterList
/// Size: 0x01E8 (488 bytes) (0x000038 - 0x0001E8) align 8 MaxSize: 0x01E8
class UEncounterList : public UDataAsset
{ 
public:
	int32_t                                            Priority;                                                   // 0x0038   (0x0004)  
	bool                                               bPersist;                                                   // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	FEncounterActivationConditions                     ValidConditions;                                            // 0x0040   (0x0098)  
	FEncounterClearConditions                          ClearConditions;                                            // 0x00D8   (0x00F8)  
	TArray<class UEncounterCompositionBase*>           EncounterCompositions;                                      // 0x01D0   (0x0010)  
	uint32_t                                           TotalWeight;                                                // 0x01E0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x01E4   (0x0004)  MISSED
};

/// Class /Script/Indiana.EnemyDifficultyWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class UEnemyDifficultyWidget : public UIndianaUserWidget
{ 
public:
	class UImage*                                      DifficultSymbol;                                            // 0x0300   (0x0008)  
	class UTextBlockBase*                              LevelTextBlock;                                             // 0x0308   (0x0008)  
	int32_t                                            ExtremeEnemyLevelDifferenceMin;                             // 0x0310   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0314   (0x000C)  MISSED
};

/// Class /Script/Indiana.EnemyScannerComponent
/// Size: 0x0220 (544 bytes) (0x0000E0 - 0x000220) align 8 MaxSize: 0x0220
class UEnemyScannerComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	SDK_UNDEFINED(16,487) /* FMulticastInlineDelegate */ __um(EnemyScannerActivatedDelegate);                      // 0x00E8   (0x0010)  
	SDK_UNDEFINED(16,488) /* FMulticastInlineDelegate */ __um(EnemyScannerDeactivatedDelegate);                    // 0x00F8   (0x0010)  
	SDK_UNDEFINED(16,489) /* FMulticastInlineDelegate */ __um(EnemyScannerActiveTargetChangedDelegate);            // 0x0108   (0x0010)  
	float                                              ScanTime;                                                   // 0x0118   (0x0004)  
	float                                              ScanNotTargetingTime;                                       // 0x011C   (0x0004)  
	float                                              MaxRange;                                                   // 0x0120   (0x0004)  
	int32_t                                            MaxScannedTargets;                                          // 0x0124   (0x0004)  
	unsigned char                                      UnknownData01_7[0xF8];                                      // 0x0128   (0x00F8)  MISSED


	/// Functions
	// Function /Script/Indiana.EnemyScannerComponent.TimeDilationStart
	// void TimeDilationStart();                                                                                                // [0x180d040] Final|Native|Protected 
	// Function /Script/Indiana.EnemyScannerComponent.TimeDilationEnd
	// void TimeDilationEnd(float Duration);                                                                                    // [0x180cfc0] Final|Native|Protected 
};

/// Class /Script/Indiana.EnemyScannerWidget
/// Size: 0x0358 (856 bytes) (0x000300 - 0x000358) align 8 MaxSize: 0x0358
class UEnemyScannerWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              NameValueTextBlock;                                         // 0x0300   (0x0008)  
	class UTextBlockBase*                              FactionValueTextBlock;                                      // 0x0308   (0x0008)  
	class UTextBlockBase*                              LevelValueTextBlock;                                        // 0x0310   (0x0008)  
	class UTextBlockBase*                              HealthValueTextBlock;                                       // 0x0318   (0x0008)  
	class UTextBlockBase*                              ArmorValueTextBlock;                                        // 0x0320   (0x0008)  
	class UTextBlockBase*                              StrongAgainstValueTextBlock;                                // 0x0328   (0x0008)  
	class UTextBlockBase*                              WeakAgainstValueTextBlock;                                  // 0x0330   (0x0008)  
	class UHorizontalBox*                              StrongAgainstBox;                                           // 0x0338   (0x0008)  
	class UHorizontalBox*                              WeakAgainstBox;                                             // 0x0340   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0348   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.EnemyScannerWidget.ScanEnded
	// void ScanEnded();                                                                                                        // [0x180cd70] Final|Native|Protected 
	// Function /Script/Indiana.EnemyScannerWidget.ScanCompleted
	// void ScanCompleted();                                                                                                    // [0x180cd50] Final|Native|Protected 
};

/// Class /Script/Indiana.EnvironmentalSpaceVolume
/// Size: 0x0318 (792 bytes) (0x000310 - 0x000318) align 8 MaxSize: 0x0318
class AEnvironmentalSpaceVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0310   (0x0008)  MISSED
};

/// Class /Script/Indiana.EnvironmentInteractionComponent
/// Size: 0x0190 (400 bytes) (0x0000E0 - 0x000190) align 8 MaxSize: 0x0190
class UEnvironmentInteractionComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0xB0];                                      // 0x00E0   (0x00B0)  MISSED
};

/// Class /Script/Indiana.EnvQueryGenerator_Cover
/// Size: 0x00D8 (216 bytes) (0x000058 - 0x0000D8) align 8 MaxSize: 0x00D8
class UEnvQueryGenerator_Cover : public UEnvQueryGenerator
{ 
public:
	FAIDataProviderFloatValue                          SearchRadius;                                               // 0x0058   (0x0038)  
	FAIDataProviderIntValue                            CoverTypesProvider;                                         // 0x0090   (0x0038)  
	class UClass*                                      SearchCenter;                                               // 0x00C8   (0x0008)  
	bool                                               bUseOctree;                                                 // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Class /Script/Indiana.EnvQueryGenerator_FeetLocation
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UEnvQueryGenerator_FeetLocation : public UEnvQueryGenerator
{ 
public:
	class UClass*                                      QueryContext;                                               // 0x0058   (0x0008)  
};

/// Class /Script/Indiana.EnvQueryTest_CanSeeCharacter
/// Size: 0x0208 (520 bytes) (0x000200 - 0x000208) align 8 MaxSize: 0x0208
class UEnvQueryTest_CanSeeCharacter : public UEnvQueryTest
{ 
public:
	class UClass*                                      EnemyContext;                                               // 0x0200   (0x0008)  
};

/// Class /Script/Indiana.EnvQueryTest_CharacterHealth
/// Size: 0x0200 (512 bytes) (0x000200 - 0x000200) align 8 MaxSize: 0x0200
class UEnvQueryTest_CharacterHealth : public UEnvQueryTest
{ 
public:
};

/// Class /Script/Indiana.EnvQueryTest_Cover
/// Size: 0x0208 (520 bytes) (0x000200 - 0x000208) align 8 MaxSize: 0x0208
class UEnvQueryTest_Cover : public UEnvQueryTest
{ 
public:
	class UClass*                                      EnemyContext;                                               // 0x0200   (0x0008)  
};

/// Class /Script/Indiana.EnvQueryTest_DynamicSearchTest
/// Size: 0x0200 (512 bytes) (0x000200 - 0x000200) align 8 MaxSize: 0x0200
class UEnvQueryTest_DynamicSearchTest : public UEnvQueryTest
{ 
public:
};

/// Class /Script/Indiana.EnvQueryTest_DynamicFleeTest
/// Size: 0x0200 (512 bytes) (0x000200 - 0x000200) align 8 MaxSize: 0x0200
class UEnvQueryTest_DynamicFleeTest : public UEnvQueryTest
{ 
public:
};

/// Class /Script/Indiana.EnvQueryTest_FollowerPos
/// Size: 0x0280 (640 bytes) (0x000200 - 0x000280) align 8 MaxSize: 0x0280
class UEnvQueryTest_FollowerPos : public UEnvQueryTest
{ 
public:
	class UClass*                                      OriginContext;                                              // 0x0200   (0x0008)  
	class UClass*                                      ForwardContext;                                             // 0x0208   (0x0008)  
	FAIDataProviderFloatValue                          IdealAngleProvider;                                         // 0x0210   (0x0038)  
	FAIDataProviderFloatValue                          MinAngleProvider;                                           // 0x0248   (0x0038)  
};

/// Class /Script/Indiana.EnvQueryTest_HasIndianaTag
/// Size: 0x0228 (552 bytes) (0x000200 - 0x000228) align 8 MaxSize: 0x0228
class UEnvQueryTest_HasIndianaTag : public UEnvQueryTest
{ 
public:
	bool                                               bExcludeSelf;                                               // 0x0200   (0x0001)  
	bool                                               bExcludeSimiliarType;                                       // 0x0201   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0202   (0x0006)  MISSED
	FGameplayTagContainer                              TagsToMatch;                                                // 0x0208   (0x0020)  
};

/// Class /Script/Indiana.EnvQueryTest_IsActorOfClass
/// Size: 0x0208 (520 bytes) (0x000200 - 0x000208) align 8 MaxSize: 0x0208
class UEnvQueryTest_IsActorOfClass : public UEnvQueryTest
{ 
public:
	class UClass*                                      ActorClass;                                                 // 0x0200   (0x0008)  
};

/// Class /Script/Indiana.EnvQueryTest_NavmeshRaycast
/// Size: 0x0208 (520 bytes) (0x000200 - 0x000208) align 8 MaxSize: 0x0208
class UEnvQueryTest_NavmeshRaycast : public UEnvQueryTest
{ 
public:
	class UClass*                                      DestinationContext;                                         // 0x0200   (0x0008)  
};

/// Class /Script/Indiana.EnvQueryTest_OccupiedRaycast
/// Size: 0x0220 (544 bytes) (0x000200 - 0x000220) align 8 MaxSize: 0x0220
class UEnvQueryTest_OccupiedRaycast : public UEnvQueryTest
{ 
public:
	class UClass*                                      DestinationContext;                                         // 0x0200   (0x0008)  
	EOccupationChannel                                 OccupationChannel;                                          // 0x0208   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0209   (0x0007)  MISSED
	TArray<ETeamAttitudeFlag>                          AttitudeFlags;                                              // 0x0210   (0x0010)  
};

/// Class /Script/Indiana.EnvQueryTest_OccupiedEnvironmentNodes
/// Size: 0x0238 (568 bytes) (0x000200 - 0x000238) align 8 MaxSize: 0x0238
class UEnvQueryTest_OccupiedEnvironmentNodes : public UEnvQueryTest
{ 
public:
	FAIDataProviderBoolValue                           IgnoreNodesOccupiedByQueryOwner;                            // 0x0200   (0x0038)  
};

/// Class /Script/Indiana.EnvQueryTest_PreferredCover
/// Size: 0x0278 (632 bytes) (0x000208 - 0x000278) align 8 MaxSize: 0x0278
class UEnvQueryTest_PreferredCover : public UEnvQueryTest_Cover
{ 
public:
	FAIDataProviderFloatValue                          MinPreferredRangeProvider;                                  // 0x0208   (0x0038)  
	FAIDataProviderFloatValue                          MaxPreferredRangeProvider;                                  // 0x0240   (0x0038)  
};

/// Class /Script/Indiana.EnvQueryTest_Ranged
/// Size: 0x0208 (520 bytes) (0x000200 - 0x000208) align 8 MaxSize: 0x0208
class UEnvQueryTest_Ranged : public UEnvQueryTest
{ 
public:
	class UClass*                                      TargetContext;                                              // 0x0200   (0x0008)  
};

/// Class /Script/Indiana.EnvQueryTest_PreferredRanged
/// Size: 0x02E8 (744 bytes) (0x000208 - 0x0002E8) align 8 MaxSize: 0x02E8
class UEnvQueryTest_PreferredRanged : public UEnvQueryTest_Ranged
{ 
public:
	FAIDataProviderFloatValue                          MinPreferredRangeProvider;                                  // 0x0208   (0x0038)  
	FAIDataProviderFloatValue                          MaxPreferredRangeProvider;                                  // 0x0240   (0x0038)  
	FAIDataProviderFloatValue                          RepositionTypeProvider;                                     // 0x0278   (0x0038)  
	FAIDataProviderFloatValue                          MinDirectionBiasProvider;                                   // 0x02B0   (0x0038)  
};

/// Class /Script/Indiana.EnvQueryTest_Projectile
/// Size: 0x0208 (520 bytes) (0x000200 - 0x000208) align 8 MaxSize: 0x0208
class UEnvQueryTest_Projectile : public UEnvQueryTest
{ 
public:
	class UClass*                                      DestinationContext;                                         // 0x0200   (0x0008)  
};

/// Class /Script/Indiana.EnvQueryTest_TeamRelationship
/// Size: 0x0208 (520 bytes) (0x000200 - 0x000208) align 8 MaxSize: 0x0208
class UEnvQueryTest_TeamRelationship : public UEnvQueryTest
{ 
public:
	bool                                               bExcludeSelf;                                               // 0x0200   (0x0001)  
	bool                                               bExcludeSimiliarType;                                       // 0x0201   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0202   (0x0006)  MISSED
};

/// Class /Script/Indiana.EnvQueryTest_ValidCover
/// Size: 0x0208 (520 bytes) (0x000208 - 0x000208) align 8 MaxSize: 0x0208
class UEnvQueryTest_ValidCover : public UEnvQueryTest_Cover
{ 
public:
};

/// Class /Script/Indiana.EnvQueryTest_ValidCoverFire
/// Size: 0x0240 (576 bytes) (0x000208 - 0x000240) align 8 MaxSize: 0x0240
class UEnvQueryTest_ValidCoverFire : public UEnvQueryTest_Cover
{ 
public:
	FAIDataProviderBoolValue                           ShouldRunTest;                                              // 0x0208   (0x0038)  
};

/// Class /Script/Indiana.EnvQueryTest_ValidJump
/// Size: 0x0200 (512 bytes) (0x000200 - 0x000200) align 8 MaxSize: 0x0200
class UEnvQueryTest_ValidJump : public UEnvQueryTest
{ 
public:
};

/// Class /Script/Indiana.EnvQueryTest_ValidRangedFire
/// Size: 0x0208 (520 bytes) (0x000208 - 0x000208) align 8 MaxSize: 0x0208
class UEnvQueryTest_ValidRangedFire : public UEnvQueryTest_Ranged
{ 
public:
};

/// Class /Script/Indiana.EpicGameStoreDLCManager
/// Size: 0x0060 (96 bytes) (0x000050 - 0x000060) align 8 MaxSize: 0x0060
class UEpicGameStoreDLCManager : public UDLCManager
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0050   (0x0010)  MISSED
};

/// Class /Script/Indiana.EQSContext_IndianaBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_IndianaBase : public UEnvQueryContext
{ 
public:
};

/// Class /Script/Indiana.EQSContext_QuerierFeetLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_QuerierFeetLocation : public UEnvQueryContext
{ 
public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_PrimaryTarget : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTargetLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_PrimaryTargetLocation : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTargetFeetLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_PrimaryTargetFeetLocation : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTargetStimulusLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_PrimaryTargetStimulusLocation : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_FollowTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_FollowTarget : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_WanderAchor
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_WanderAchor : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_FleeStatusEffectTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_FleeStatusEffectTarget : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_CompanionFollowOrigin
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_CompanionFollowOrigin : public UEnvQueryContext
{ 
public:
};

/// Class /Script/Indiana.EQSContext_CompanionFollowOriginProjected
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_CompanionFollowOriginProjected : public UEnvQueryContext
{ 
public:
};

/// Class /Script/Indiana.EQSContext_CompanionFollowForward
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_CompanionFollowForward : public UEnvQueryContext
{ 
public:
};

/// Class /Script/Indiana.EQSContext_CompanionCommandLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_CompanionCommandLocation : public UEnvQueryContext
{ 
public:
};

/// Class /Script/Indiana.EQSContext_CompanionCommandForward
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_CompanionCommandForward : public UEnvQueryContext
{ 
public:
};

/// Class /Script/Indiana.EQSContext_CompanionCommandTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_CompanionCommandTarget : public UEnvQueryContext
{ 
public:
};

/// Class /Script/Indiana.EQSContext_Companions
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_Companions : public UEnvQueryContext
{ 
public:
};

/// Class /Script/Indiana.EQSContext_CalledShotSpellTargetFeetLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_CalledShotSpellTargetFeetLocation : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_CalledShotSpellTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_CalledShotSpellTarget : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_CalledShotEndFurnitureLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_CalledShotEndFurnitureLocation : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_SphereCheatLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_SphereCheatLocation : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_Player
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_Player : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTargetStimulusSourceActorLocation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_PrimaryTargetStimulusSourceActorLocation : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_TetherOrigin
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_TetherOrigin : public UEQSContext_IndianaBase
{ 
public:
};

/// Class /Script/Indiana.EQSContext_GeneralEQSActor
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UEQSContext_GeneralEQSActor : public UEQSContext_IndianaBase
{ 
public:
};

/// Struct /Script/Indiana.AISelector_EQSParameter
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FAISelector_EQSParameter
{ 
	class UClass*                                      EQSParameter;                                               // 0x0000   (0x0008)  
};

/// Struct /Script/Indiana.AIDynamicParam_IndianaBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FAIDynamicParam_IndianaBase
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	EAIParamType                                       ParamType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              Value;                                                      // 0x000C   (0x0004)  
	FAISelector_EQSParameter                           ValueSelector;                                              // 0x0010   (0x0008)  
};

/// Class /Script/Indiana.EQSRequest_IndianaBase
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UEQSRequest_IndianaBase : public UDataAsset
{ 
public:
	class UEnvQuery*                                   QueryTemplate;                                              // 0x0038   (0x0008)  
	TArray<FAIDynamicParam_IndianaBase>                QueryConfig;                                                // 0x0040   (0x0010)  
	TEnumAsByte<EEnvQueryRunMode>                      RunMode;                                                    // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/Indiana.WeaponSlot
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FWeaponSlot
{ 
	TWeakObjectPtr<class UWeapon*>                     Weapon;                                                     // 0x0000   (0x0008)  
};

/// Struct /Script/Indiana.MedKitConsumableSlot
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FMedKitConsumableSlot
{ 
	class UClass*                                      Consumable;                                                 // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Class /Script/Indiana.EquipmentComponent
/// Size: 0x0490 (1168 bytes) (0x0000E0 - 0x000490) align 8 MaxSize: 0x0490
class UEquipmentComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x40];                                      // 0x00E0   (0x0040)  MISSED
	SDK_UNDEFINED(16,490) /* FMulticastInlineDelegate */ __um(WeaponStartEquipDelegate);                           // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,491) /* FMulticastInlineDelegate */ __um(WeaponEndEquipDelegate);                             // 0x0130   (0x0010)  
	SDK_UNDEFINED(16,492) /* FMulticastInlineDelegate */ __um(WeaponStartUnequipDelegate);                         // 0x0140   (0x0010)  
	SDK_UNDEFINED(16,493) /* FMulticastInlineDelegate */ __um(WeaponEndUnequipDelegate);                           // 0x0150   (0x0010)  
	SDK_UNDEFINED(16,494) /* FMulticastInlineDelegate */ __um(WeaponStartReloadDelegate);                          // 0x0160   (0x0010)  
	SDK_UNDEFINED(16,495) /* FMulticastInlineDelegate */ __um(WeaponEndReloadDelegate);                            // 0x0170   (0x0010)  
	SDK_UNDEFINED(16,496) /* FMulticastInlineDelegate */ __um(WeaponInterruptReloadDelegate);                      // 0x0180   (0x0010)  
	SDK_UNDEFINED(16,497) /* FMulticastInlineDelegate */ __um(WeaponStartHolsterDelegate);                         // 0x0190   (0x0010)  
	SDK_UNDEFINED(16,498) /* FMulticastInlineDelegate */ __um(WeaponEndHolsterDelegate);                           // 0x01A0   (0x0010)  
	SDK_UNDEFINED(16,499) /* FMulticastInlineDelegate */ __um(WeaponStartUnholsterDelegate);                       // 0x01B0   (0x0010)  
	SDK_UNDEFINED(16,500) /* FMulticastInlineDelegate */ __um(WeaponEndUnholsterDelegate);                         // 0x01C0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x90];                                      // 0x01D0   (0x0090)  MISSED
	FName                                              WeaponAttachSocket;                                         // 0x0260   (0x0008)  
	FWeaponItemDefinition                              DefaultEquippedWeaponItem;                                  // 0x0268   (0x0058)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x02C0   (0x0008)  MISSED
	class UWeapon*                                     PendingWeaponToEquip;                                       // 0x02C8   (0x0008)  
	class UWeapon*                                     EquippedWeapon;                                             // 0x02D0   (0x0008)  
	FWeaponSlot                                        WeaponSlots[4];                                             // 0x02D8   (0x0020)  
	unsigned char                                      UnknownData03_6[0x28];                                      // 0x02F8   (0x0028)  MISSED
	FArmorSetItemDefinition                            DefaultArmorSetItem;                                        // 0x0320   (0x0050)  
	FHelmetItemDefinition                              DefaultHelmetItem;                                          // 0x0370   (0x0020)  
	class UDisguiseData*                               PermanentDisguise;                                          // 0x0390   (0x0008)  
	class UArmorItem*                                  NewArmorSlots[2];                                           // 0x0398   (0x0010)  
	class UArmorItem*                                  DisguiseArmorSlots[2];                                      // 0x03A8   (0x0010)  
	bool                                               bAllowDisguiseVisuals;                                      // 0x03B8   (0x0001)  
	bool                                               bDisguiseEquipUseTransition;                                // 0x03B9   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x03BA   (0x0002)  MISSED
	float                                              DisguiseEquipRampInTime;                                    // 0x03BC   (0x0004)  
	float                                              DisguiseEquipMinHoldTime;                                   // 0x03C0   (0x0004)  
	float                                              DisguiseEquipRampOutTime;                                   // 0x03C4   (0x0004)  
	bool                                               bDisguiseUnequipUseTransition;                              // 0x03C8   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x03C9   (0x0003)  MISSED
	float                                              DisguiseUnequipRampInTime;                                  // 0x03CC   (0x0004)  
	float                                              DisguiseUnequipMinHoldTime;                                 // 0x03D0   (0x0004)  
	float                                              DisguiseUnequipRampOutTime;                                 // 0x03D4   (0x0004)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x03D8   (0x0008)  MISSED
	class UDisguiseData*                               CurrentDisguise;                                            // 0x03E0   (0x0008)  
	SDK_UNDEFINED(16,501) /* FMulticastInlineDelegate */ __um(OnMedKitUsedDelegate);                               // 0x03E8   (0x0010)  
	unsigned char                                      UnknownData07_6[0x68];                                      // 0x03F8   (0x0068)  MISSED
	TArray<FMedKitConsumableSlot>                      MedKitConsumableSlots;                                      // 0x0460   (0x0010)  
	class UClass*                                      DefaultMedKitConsumable;                                    // 0x0470   (0x0008)  
	class UClass*                                      FirstMedKitSlotConsumable;                                  // 0x0478   (0x0008)  
	TArray<class UGadget*>                             GadgetSlots;                                                // 0x0480   (0x0010)  


	/// Functions
	// Function /Script/Indiana.EquipmentComponent.WeaponAdvanceLevelDebug
	// void WeaponAdvanceLevelDebug(int32_t NumLevels, bool bIgnoreCost);                                                       // [0x180d100] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.UnholsterWeapon
	// void UnholsterWeapon(EHolsterRequestSource InSource);                                                                    // [0x180d080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.UnequipAllModsDebug
	// void UnequipAllModsDebug();                                                                                              // [0x180d060] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.SetWeaponLevel
	// void SetWeaponLevel(int32_t Level, bool bOverrideWeaponLevels);                                                          // [0x180cef0] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.SetCalledShotWeaponLevel
	// void SetCalledShotWeaponLevel(int32_t Level);                                                                            // [0x180ce60] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.SetArmorLevel
	// void SetArmorLevel(int32_t Level, bool bOverrideArmorLevels);                                                            // [0x180cd90] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.OnUnlockAbilityChanged
	// void OnUnlockAbilityChanged(EUnlockAbility Ability);                                                                     // [0x180ccd0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnUnequipDisguise
	// void OnUnequipDisguise();                                                                                                // [0x180ccb0] Final|Native|Public  
	// Function /Script/Indiana.EquipmentComponent.OnStopClimb
	// void OnStopClimb();                                                                                                      // [0x180cc90] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x180cc00] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartUnholsterWeapon
	// void OnStartUnholsterWeapon(class UWeapon* Weapon);                                                                      // [0x180cb70] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartUnequipWeapon
	// void OnStartUnequipWeapon(class UWeapon* Weapon);                                                                        // [0x180cae0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartReloadWeapon
	// void OnStartReloadWeapon(class UWeapon* Weapon);                                                                         // [0x180ca50] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartHolsterWeapon
	// void OnStartHolsterWeapon(class UWeapon* Weapon);                                                                        // [0x180c9c0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartEquipWeapon
	// void OnStartEquipWeapon(class UWeapon* Weapon);                                                                          // [0x180c930] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartClimb
	// void OnStartClimb();                                                                                                     // [0x180c910] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnMedKitUsed
	// void OnMedKitUsed(int32_t ConsumeablesUsed);                                                                             // [0x180c880] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnItemRemovedFromInventory
	// void OnItemRemovedFromInventory(FItemStack& ItemStack);                                                                  // [0x180c7e0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.EquipmentComponent.OnItemAddedToInventory
	// void OnItemAddedToInventory(FItemStack& ItemStack);                                                                      // [0x180c740] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.EquipmentComponent.OnInterruptReloadWeapon
	// void OnInterruptReloadWeapon(class UWeapon* Weapon);                                                                     // [0x180c6b0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEquipDisguise
	// void OnEquipDisguise(class UDisguiseData* Disguise);                                                                     // [0x180c620] Final|Native|Public  
	// Function /Script/Indiana.EquipmentComponent.OnEndUnholsterWeapon
	// void OnEndUnholsterWeapon(class UWeapon* Weapon);                                                                        // [0x180c590] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEndUnequipWeapon
	// void OnEndUnequipWeapon(class UWeapon* Weapon);                                                                          // [0x180c500] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEndReloadWeapon
	// void OnEndReloadWeapon(class UWeapon* Weapon);                                                                           // [0x180c470] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEndHolsterWeapon
	// void OnEndHolsterWeapon(class UWeapon* Weapon);                                                                          // [0x180c3e0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEndEquipWeapon
	// void OnEndEquipWeapon(class UWeapon* Weapon);                                                                            // [0x180c350] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.LoadAmmoDebug
	// void LoadAmmoDebug(FName AmmoName);                                                                                      // [0x180c2c0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.HolsterWeapon
	// void HolsterWeapon(EHolsterRequestSource InSource, bool bInstantHolster);                                                // [0x180c1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.GetEquippedWeapon
	// class UWeapon* GetEquippedWeapon();                                                                                      // [0x180c1d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.EquipmentComponent.EquipWeaponMicroModDebug
	// void EquipWeaponMicroModDebug(FName MicroModName);                                                                       // [0x180c140] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.EquipWeaponFromSlot
	// void EquipWeaponFromSlot(uint32_t SlotIndex, bool bInstantEquip);                                                        // [0x180c070] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.EquipWeaponDebug
	// void EquipWeaponDebug(FName WeaponName);                                                                                 // [0x180bfe0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.EquipWeapon
	// void EquipWeapon(class UWeapon* WeaponToEquip, bool bInstantEquip);                                                      // [0x180bf10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.EquipPreviousWeapon
	// void EquipPreviousWeapon();                                                                                              // [0x180bef0] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.EquipModDebug
	// void EquipModDebug(FName ModName);                                                                                       // [0x180be60] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.EquipDefaultWeapon
	// void EquipDefaultWeapon();                                                                                               // [0x180be40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.EquipArmorSetMicroModDebug
	// void EquipArmorSetMicroModDebug(FName MicroModName);                                                                     // [0x180bdb0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.EquipArmorModByClassDebug
	// void EquipArmorModByClassDebug(EArmorModSlot ArmorModSlot, class UClass* ArmorModItem);                                  // [0x180bce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.EquipArmorDebug
	// void EquipArmorDebug(FName ArmorName);                                                                                   // [0x180bc50] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.EquipArmorByClassDebug
	// void EquipArmorByClassDebug(EArmorSlot ArmorSlot, class UClass* ArmorItem);                                              // [0x180bb80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.EquipmentModsWidget
/// Size: 0x03F0 (1008 bytes) (0x000300 - 0x0003F0) align 8 MaxSize: 0x03F0
class UEquipmentModsWidget : public UIndianaUserWidget
{ 
public:
	TMap<EArmorModSlot, class UTexture2D*>             ArmorModImages;                                             // 0x0300   (0x0050)  
	TMap<EModSlot, class UTexture2D*>                  WeaponModImages;                                            // 0x0350   (0x0050)  
	class UEquipmentModWidget*                         Mod0Widget;                                                 // 0x03A0   (0x0008)  
	class UEquipmentModWidget*                         Mod1Widget;                                                 // 0x03A8   (0x0008)  
	class UEquipmentModWidget*                         Mod2Widget;                                                 // 0x03B0   (0x0008)  
	class UEquipmentModWidget*                         Mod3Widget;                                                 // 0x03B8   (0x0008)  
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x03C0   (0x0030)  MISSED
};

/// Class /Script/Indiana.EquipmentModWidget
/// Size: 0x02A8 (680 bytes) (0x000278 - 0x0002A8) align 8 MaxSize: 0x02A8
class UEquipmentModWidget : public UUserWidget
{ 
public:
	float                                              OpacityIfInstalled;                                         // 0x0278   (0x0004)  
	float                                              OpacityIfEmpty;                                             // 0x027C   (0x0004)  
	class UTexture2D*                                  UninstalledTexture;                                         // 0x0280   (0x0008)  
	class UTexture2D*                                  InstalledTexture;                                           // 0x0288   (0x0008)  
	class UImage*                                      IconImage;                                                  // 0x0290   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0298   (0x0008)  
	class UTextBlockBase*                              DescriptionTextBlock;                                       // 0x02A0   (0x0008)  
};

/// Class /Script/Indiana.EventEffectComponent
/// Size: 0x0130 (304 bytes) (0x0000E0 - 0x000130) align 8 MaxSize: 0x0130
class UEventEffectComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x00E0   (0x0050)  MISSED
};

/// Class /Script/Indiana.EventEffects
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UEventEffects : public UEventEffect
{ 
public:
	TArray<class UEventEffect*>                        Effects;                                                    // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.EventListener
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align 8 MaxSize: 0x0058
class UEventListener : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0030   (0x0028)  MISSED
};

/// Class /Script/Indiana.FactionListener
/// Size: 0x00B0 (176 bytes) (0x000058 - 0x0000B0) align 8 MaxSize: 0x00B0
class UFactionListener : public UEventListener
{ 
public:
	class UClass*                                      Faction;                                                    // 0x0058   (0x0008)  
	bool                                               bCheckAttitude;                                             // 0x0060   (0x0001)  
	TEnumAsByte<ETeamAttitude>                         Attitude;                                                   // 0x0061   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0062   (0x0006)  MISSED
	FGameplayTagContainer                              CreatureTypes;                                              // 0x0068   (0x0020)  
	FGameplayTagContainer                              CreatureRoles;                                              // 0x0088   (0x0020)  
	bool                                               bAllowInanimateObjects;                                     // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Indiana.OnKillListener
/// Size: 0x00D0 (208 bytes) (0x0000B0 - 0x0000D0) align 8 MaxSize: 0x00D0
class UOnKillListener : public UFactionListener
{ 
public:
	FGameplayTagContainer                              WeaponCategory;                                             // 0x00B0   (0x0020)  


	/// Functions
	// Function /Script/Indiana.OnKillListener.OnKill
	// void OnKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                    // [0x181b3c0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnCompanionKillListener
/// Size: 0x00C8 (200 bytes) (0x0000B0 - 0x0000C8) align 8 MaxSize: 0x00C8
class UOnCompanionKillListener : public UFactionListener
{ 
public:
	TArray<EDamageFlags>                               CheckDamageFlags;                                           // 0x00B0   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x00C0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.OnCompanionKillListener.OnKill
	// void OnKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                    // [0x181b2d0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnKillTurnToAshListener
/// Size: 0x00B8 (184 bytes) (0x0000B0 - 0x0000B8) align 8 MaxSize: 0x00B8
class UOnKillTurnToAshListener : public UFactionListener
{ 
public:
	class UClass*                                      DamageType;                                                 // 0x00B0   (0x0008)  


	/// Functions
	// Function /Script/Indiana.OnKillTurnToAshListener.OnKill
	// void OnKill(class AActor* Victim, class UClass* DmgType);                                                                // [0x181b4b0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCompanionRegistrationChanged
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnCompanionRegistrationChanged : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnCompanionRegistrationChanged.OnCompanionRegistrationChanged
	// void OnCompanionRegistrationChanged();                                                                                   // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCompanionRegistrationAdded
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnCompanionRegistrationAdded : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnCompanionRegistrationAdded.OnCompanionRegistrationAdded
	// void OnCompanionRegistrationAdded();                                                                                     // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnAttackComplete
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnAttackComplete : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnAttackComplete.OnAttackComplete
	// void OnAttackComplete(int32_t AttackID);                                                                                 // [0x181a1c0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCausedDamage
/// Size: 0x00F8 (248 bytes) (0x0000B0 - 0x0000F8) align 8 MaxSize: 0x00F8
class UOnCausedDamage : public UFactionListener
{ 
public:
	TArray<EDamageFlags>                               CheckDamageFlags;                                           // 0x00B0   (0x0010)  
	TArray<EDamageFlags>                               CheckNotDamageFlags;                                        // 0x00C0   (0x0010)  
	bool                                               bTriggerOnZeroDamage;                                       // 0x00D0   (0x0001)  
	bool                                               bPassThroughDamage;                                         // 0x00D1   (0x0001)  
	bool                                               bOneCount;                                                  // 0x00D2   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x00D3   (0x0001)  MISSED
	float                                              PassThroughDamageScalar;                                    // 0x00D4   (0x0004)  
	bool                                               bUseDesiredDamageAmount;                                    // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00D9   (0x0007)  MISSED
	class UClass*                                      DamageType;                                                 // 0x00E0   (0x0008)  
	ESkill                                             Skill;                                                      // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData02_7[0xF];                                       // 0x00E9   (0x000F)  MISSED


	/// Functions
	// Function /Script/Indiana.OnCausedDamage.OnCauseDamage
	// void OnCauseDamage(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x181a610] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnReceiveDamage
/// Size: 0x00E0 (224 bytes) (0x0000B0 - 0x0000E0) align 8 MaxSize: 0x00E0
class UOnReceiveDamage : public UFactionListener
{ 
public:
	FGameplayTagContainer                              WeaponTypes;                                                // 0x00B0   (0x0020)  
	class UClass*                                      DamageType;                                                 // 0x00D0   (0x0008)  
	ETTDState                                          TTDState;                                                   // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00D9   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnReceiveDamage.OnDamageEvent
	// void OnDamageEvent(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x181a8c0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnReceiveFallingDamage
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnReceiveFallingDamage : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnReceiveFallingDamage.OnFallingDamage
	// void OnFallingDamage(float Damage);                                                                                      // [0x181ab80] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMeleeHit
/// Size: 0x00C0 (192 bytes) (0x0000B0 - 0x0000C0) align 8 MaxSize: 0x00C0
class UOnMeleeHit : public UFactionListener
{ 
public:
	EMeleeAttackType                                   MeleeType;                                                  // 0x00B0   (0x0001)  
	EMeleeAction                                       MeleeAction;                                                // 0x00B1   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x00B2   (0x0002)  MISSED
	int32_t                                            MinNumHit;                                                  // 0x00B4   (0x0004)  
	bool                                               bPassThroughDamage;                                         // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00B9   (0x0003)  MISSED
	float                                              PassThroughDamageScalar;                                    // 0x00BC   (0x0004)  


	/// Functions
	// Function /Script/Indiana.OnMeleeHit.OnMeleeHit
	// void OnMeleeHit(TArray<AActor*>& HitActors, class UWeapon* Weapon, float Damage);                                        // [0x181b720] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnMeleeActionStart
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnMeleeActionStart : public UEventListener
{ 
public:
	EMeleeAction                                       MeleeAction;                                                // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnMeleeActionStart.OnMeleeActionStart
	// void OnMeleeActionStart(EMeleeAction ActionStarted);                                                                     // [0x181a570] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMeleeActionEnd
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnMeleeActionEnd : public UEventListener
{ 
public:
	EMeleeAction                                       MeleeAction;                                                // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnMeleeActionEnd.OnMeleeActionEnd
	// void OnMeleeActionEnd(EMeleeAction ActionEnded);                                                                         // [0x181a570] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSpellCast
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnSpellCast : public UEventListener
{ 
public:
	class UClass*                                      Spell;                                                      // 0x0058   (0x0008)  


	/// Functions
	// Function /Script/Indiana.OnSpellCast.OnSpellCast
	// void OnSpellCast(class UClass* Spell);                                                                                   // [0x181c330] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSpellRemoved
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnSpellRemoved : public UEventListener
{ 
public:
	class UClass*                                      Spell;                                                      // 0x0058   (0x0008)  


	/// Functions
	// Function /Script/Indiana.OnSpellRemoved.OnSpellRemoved
	// void OnSpellRemoved(class UClass* RemovedSpell);                                                                         // [0x181c330] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBlockStart
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnBlockStart : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnBlockStart.OnBlockStart
	// void OnBlockStart();                                                                                                     // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBlockEnd
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnBlockEnd : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnBlockEnd.OnBlockEnd
	// void OnBlockEnd();                                                                                                       // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPerfectBlock
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPerfectBlock : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPerfectBlock.OnPerfectBlockEvent
	// void OnPerfectBlockEvent(class AIndianaCharacter* Attacker, float Damage);                                               // [0x181bb60] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBlockedHit
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnBlockedHit : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnBlockedHit.OnBlockedHitEvent
	// void OnBlockedHitEvent(bool bIsMeleeHit);                                                                                // [0x181a340] Final|Native|Protected 
};

/// Class /Script/Indiana.OnDetected
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnDetected : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnDetected.OnDetectedEvent
	// void OnDetectedEvent(class AActor* Detector);                                                                            // [0x181a810] Final|Native|Protected 
};

/// Class /Script/Indiana.OnIndividualDetected
/// Size: 0x00C0 (192 bytes) (0x0000B0 - 0x0000C0) align 8 MaxSize: 0x00C0
class UOnIndividualDetected : public UFactionListener
{ 
public:
	int32_t                                            NumDetectors;                                               // 0x00B0   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData00_7[0xB];                                       // 0x00B5   (0x000B)  MISSED


	/// Functions
	// Function /Script/Indiana.OnIndividualDetected.OnIndividualUnDetectedEvent
	// void OnIndividualUnDetectedEvent(class AIndianaAiCharacter* Detector);                                                   // [0x181b0f0] Final|Native|Protected 
	// Function /Script/Indiana.OnIndividualDetected.OnIndividualDetectedEvent
	// void OnIndividualDetectedEvent(class AIndianaAiCharacter* Detector);                                                     // [0x181b060] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerMoveStart
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPlayerMoveStart : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPlayerMoveStart.OnPlayerMoveStart
	// void OnPlayerMoveStart();                                                                                                // [0x181a8a0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerMoveEnd
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPlayerMoveEnd : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPlayerMoveEnd.OnPlayerMoveEnd
	// void OnPlayerMoveEnd();                                                                                                  // [0x181a8a0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnDodgeEvent
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnDodgeEvent : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnDodgeEvent.OnDodge
	// void OnDodge(EDodgeDirection Direction);                                                                                 // [0x181a960] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStatusEffectAddedEvent
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UOnStatusEffectAddedEvent : public UEventListener
{ 
public:
	class UClass*                                      StatusEffect;                                               // 0x0058   (0x0008)  
	int32_t                                            StackCount;                                                 // 0x0060   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0064   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.OnStatusEffectAddedEvent.OnAddStatusEffect
	// void OnAddStatusEffect(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectAdded);             // [0x1819f80] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStatusEffectRemovedEvent
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnStatusEffectRemovedEvent : public UEventListener
{ 
public:
	class UClass*                                      StatusEffect;                                               // 0x0058   (0x0008)  


	/// Functions
	// Function /Script/Indiana.OnStatusEffectRemovedEvent.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectRemoved);       // [0x181c5f0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnNumHostileStatusEffects
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UOnNumHostileStatusEffects : public UEventListener
{ 
public:
	ComparisonOperator                                 Operator;                                                   // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            NumHostileStatusEffects;                                    // 0x005C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0060   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.OnNumHostileStatusEffects.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectRemoved);       // [0x181c520] Final|Native|Protected 
	// Function /Script/Indiana.OnNumHostileStatusEffects.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectAdded);           // [0x181c520] Final|Native|Protected 
};

/// Class /Script/Indiana.HasStatusEffectsEvent
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UHasStatusEffectsEvent : public UEventListener
{ 
public:
	TArray<class UClass*>                              StatusEffects;                                              // 0x0058   (0x0010)  


	/// Functions
	// Function /Script/Indiana.HasStatusEffectsEvent.OnAddStatusEffect
	// void OnAddStatusEffect(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectAdded);             // [0x1819eb0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSkillUsedEvent
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnSkillUsedEvent : public UEventListener
{ 
public:
	ESkill                                             Skill;                                                      // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnSkillUsedEvent.OnSkillUsed
	// void OnSkillUsed(ESkill SkillUsed, class AActor* Target);                                                                // [0x181c190] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSkillEndedEvent
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnSkillEndedEvent : public UEventListener
{ 
public:
	ESkill                                             Skill;                                                      // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnSkillEndedEvent.OnSkillEnded
	// void OnSkillEnded(ESkill SkillUsed, class AActor* Target);                                                               // [0x181c190] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSkillCheckSuccess
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnSkillCheckSuccess : public UEventListener
{ 
public:
	ESkill                                             Skill;                                                      // 0x0058   (0x0001)  
	EXPGainReason                                      XPReason;                                                   // 0x0059   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x005A   (0x0006)  MISSED


	/// Functions
	// Function /Script/Indiana.OnSkillCheckSuccess.OnSkillCheckSuccess
	// void OnSkillCheckSuccess(EXPGainReason Reason, int32_t XPEarned, ESkill SkillUsed);                                      // [0x181c080] Final|Native|Protected 
};

/// Class /Script/Indiana.OnItemConsumed
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnItemConsumed : public UEventListener
{ 
public:
	FGameplayTag                                       ItemType;                                                   // 0x0058   (0x0008)  


	/// Functions
	// Function /Script/Indiana.OnItemConsumed.OnItemConsumed
	// void OnItemConsumed(FItemStack& ItemStack);                                                                              // [0x181b230] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnSpendMoney
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnSpendMoney : public UEventListener
{ 
public:
	bool                                               bOnVendorInteraction;                                       // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnSpendMoney.OnMoneySpent
	// void OnMoneySpent(int32_t Money, bool bVendorInteraction);                                                               // [0x181b860] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPickPocket
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPickPocket : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPickPocket.OnPickPocket
	// void OnPickPocket(class AActor* Target);                                                                                 // [0x181bc30] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPickPocketStart
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPickPocketStart : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPickPocketStart.OnPickPocket
	// void OnPickPocket(class AActor* Target);                                                                                 // [0x181bc30] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPickPocketEnd
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPickPocketEnd : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPickPocketEnd.OnPickPocket
	// void OnPickPocket(class AActor* Target);                                                                                 // [0x181bc30] Final|Native|Protected 
};

/// Class /Script/Indiana.ReputationListener
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UReputationListener : public UEventListener
{ 
public:
	class UClass*                                      Faction;                                                    // 0x0058   (0x0008)  
	EReputationType                                    ReputationType;                                             // 0x0060   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0061   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.ReputationListener.OnReputationChange
	// void OnReputationChange(class UFactionData* FactionData, EReputationType InReputationType, int32_t Amount, class UReputationData* ReputationBefore, class UReputationData* ReputationAfter); // [0x181bec0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPartyChange
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UOnPartyChange : public UEventListener
{ 
public:
	int32_t                                            NumCompanions;                                              // 0x0058   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x005C   (0x0001)  
	unsigned char                                      UnknownData00_7[0xB];                                       // 0x005D   (0x000B)  MISSED


	/// Functions
	// Function /Script/Indiana.OnPartyChange.OnPartyChanged
	// void OnPartyChanged(class AIndianaAiCharacter* Companion, bool bAdded);                                                  // [0x181ba90] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPerfectDodge
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPerfectDodge : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPerfectDodge.OnPerfectDodge
	// void OnPerfectDodge(class AActor* Attacker);                                                                             // [0x181a810] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBehaviorStateChange
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnBehaviorStateChange : public UEventListener
{ 
public:
	EBehaviorState                                     BehaviorState;                                              // 0x0058   (0x0001)  
	EBehaviorStateEventType                            EventType;                                                  // 0x0059   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x005A   (0x0006)  MISSED


	/// Functions
	// Function /Script/Indiana.OnBehaviorStateChange.OnBehaviorStateEvent
	// void OnBehaviorStateEvent(EBehaviorState InBehaviorState, EBehaviorStateEventType InEventType);                          // [0x181a250] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCalledShotCameraChange
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnCalledShotCameraChange : public UEventListener
{ 
public:
	ECalledShotCameraStep                              CameraStepChange;                                           // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnCalledShotCameraChange.OnCameraStepEvent
	// void OnCameraStepEvent(ECalledShotCameraStep CameraStep);                                                                // [0x181a570] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCompanionCommandIssued
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnCompanionCommandIssued : public UEventListener
{ 
public:
	ECompanionCommand                                  Command;                                                    // 0x0058   (0x0001)  
	bool                                               bOnEnter;                                                   // 0x0059   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x005A   (0x0006)  MISSED
};

/// Class /Script/Indiana.OnCompanionCommandIssuedEnemy
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnCompanionCommandIssuedEnemy : public UEventListener
{ 
public:
	ECompanionCommand                                  Command;                                                    // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Indiana.OnHealthPercentage
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnHealthPercentage : public UEventListener
{ 
public:
	float                                              HealthPercentage;                                           // 0x0058   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x005C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x005D   (0x0003)  MISSED


	/// Functions
	// Function /Script/Indiana.OnHealthPercentage.OnHealthChanged
	// void OnHealthChanged(float HealthChange, class AActor* Instigator);                                                      // [0x181af90] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCompanionKilled
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnCompanionKilled : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnCompanionKilled.OnCompanionKilled
	// void OnCompanionKilled(class AActor* Companion);                                                                         // [0x181a810] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCinematicModeChange
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnCinematicModeChange : public UEventListener
{ 
public:
	bool                                               bOnEnter;                                                   // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnCinematicModeChange.OnCinematicModeChange
	// void OnCinematicModeChange(bool bCinematicMode);                                                                         // [0x181a6b0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMedKitUsed
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnMedKitUsed : public UEventListener
{ 
public:
	ComparisonOperator                                 Operator;                                                   // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            ConsumablesRequired;                                        // 0x005C   (0x0004)  


	/// Functions
	// Function /Script/Indiana.OnMedKitUsed.OnMedKitUsed
	// void OnMedKitUsed(int32_t ConsumablesUsed);                                                                              // [0x181b690] Final|Native|Protected 
};

/// Class /Script/Indiana.OnRestrictedAreaEntered
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnRestrictedAreaEntered : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnRestrictedAreaEntered.OnRestrictedAreaEntered
	// void OnRestrictedAreaEntered(class ARestrictedArea* RestrictedArea);                                                     // [0x181bcc0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnRestrictedAreaExited
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnRestrictedAreaExited : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnRestrictedAreaExited.OnRestrictedAreaExited
	// void OnRestrictedAreaExited(class ARestrictedArea* RestrictedArea);                                                      // [0x181bcc0] Final|Native|Protected 
};

/// Class /Script/Indiana.OrListener
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UOrListener : public UEventListener
{ 
public:
	TArray<class UEventListener*>                      ChildListener;                                              // 0x0058   (0x0010)  
};

/// Class /Script/Indiana.OnAcrophobiaEnabled
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnAcrophobiaEnabled : public UEventListener
{ 
public:
	bool                                               bEnabled;                                                   // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnAcrophobiaEnabled.OnAcrophobiaChanged
	// void OnAcrophobiaChanged(bool bNowEnabled);                                                                              // [0x1819e20] Final|Native|Protected 
};

/// Class /Script/Indiana.OnTactialTimeDialationStart
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnTactialTimeDialationStart : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnTactialTimeDialationStart.OnTacticalTimeDilationStart
	// void OnTacticalTimeDilationStart();                                                                                      // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnTactialTimeDialationEnd
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnTactialTimeDialationEnd : public UEventListener
{ 
public:
	bool                                               bOneAtEnd;                                                  // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnTactialTimeDialationEnd.OnTacticalTimeDilationEnd
	// void OnTacticalTimeDilationEnd(float Duration);                                                                          // [0x181c740] Final|Native|Protected 
};

/// Class /Script/Indiana.OnResurrect
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnResurrect : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnResurrect.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x181b930] Final|Native|Protected 
};

/// Class /Script/Indiana.OnRest
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnRest : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnRest.OnRest
	// void OnRest();                                                                                                           // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnInteractableSelectionChanged
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnInteractableSelectionChanged : public UEventListener
{ 
public:
	EInteractionType                                   Interaction;                                                // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnInteractableSelectionChanged.OnInteractableSelectionChanged
	// void OnInteractableSelectionChanged(FInteractionDescription& Description);                                               // [0x181b180] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnStatUpdated
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnStatUpdated : public UEventListener
{ 
public:
	class URpgStat*                                    ListenStat;                                                 // 0x0058   (0x0008)  


	/// Functions
	// Function /Script/Indiana.OnStatUpdated.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x181c3c0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSkillUpdated
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnSkillUpdated : public UEventListener
{ 
public:
	ESkill                                             ListenSkill;                                                // 0x0058   (0x0001)  
	bool                                               bCompare;                                                   // 0x0059   (0x0001)  
	ComparisonOperator                                 Operator;                                                   // 0x005A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x005B   (0x0001)  MISSED
	int32_t                                            SkillValue;                                                 // 0x005C   (0x0004)  


	/// Functions
	// Function /Script/Indiana.OnSkillUpdated.OnSkillUpdated
	// void OnSkillUpdated(ESkill Skill, int32_t NewValue);                                                                     // [0x181c260] Final|Native|Protected 
};

/// Class /Script/Indiana.OnOccupiedElevatorMove
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnOccupiedElevatorMove : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnOccupiedElevatorMove.OnOccupiedElevatorMove
	// void OnOccupiedElevatorMove(class AElevator* Elevator);                                                                  // [0x181ba00] Final|Native|Protected 
};

/// Class /Script/Indiana.OnAnimationSpellTrigger
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UOnAnimationSpellTrigger : public UEventListener
{ 
public:
	bool                                               bTriggerOnNotifyBegin;                                      // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	FGameplayTag                                       AnimationTriggerTag;                                        // 0x005C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.OnAnimationSpellTrigger.OnAnimationTriggered
	// void OnAnimationTriggered(FGameplayTag& TriggerType, bool Enabled);                                                      // [0x181a0e0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnJump
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnJump : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnJump.OnJump
	// void OnJump();                                                                                                           // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnLanded
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnLanded : public UEventListener
{ 
public:
	float                                              MinFallDistance;                                            // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.OnLanded.OnLanded
	// void OnLanded(float FallDistance);                                                                                       // [0x181b580] Final|Native|Protected 
};

/// Class /Script/Indiana.OnTTDMeterPercentage
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnTTDMeterPercentage : public UEventListener
{ 
public:
	float                                              TTDMeterPercentage;                                         // 0x0058   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x005C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x005D   (0x0003)  MISSED


	/// Functions
	// Function /Script/Indiana.OnTTDMeterPercentage.OnTTDMeterChanged
	// void OnTTDMeterChanged(float Value);                                                                                     // [0x181c6c0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSprintStart
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnSprintStart : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnSprintStart.OnSprintStarted
	// void OnSprintStarted();                                                                                                  // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSprintEnd
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnSprintEnd : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnSprintEnd.OnSprintEnded
	// void OnSprintEnded();                                                                                                    // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerFirstAttacked
/// Size: 0x00B0 (176 bytes) (0x0000B0 - 0x0000B0) align 8 MaxSize: 0x00B0
class UOnPlayerFirstAttacked : public UFactionListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPlayerFirstAttacked.OnFirstAttacked
	// void OnFirstAttacked(class AActor* Attacker);                                                                            // [0x181ad20] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerFirstAttack
/// Size: 0x00B0 (176 bytes) (0x0000B0 - 0x0000B0) align 8 MaxSize: 0x00B0
class UOnPlayerFirstAttack : public UFactionListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPlayerFirstAttack.OnFirstAttack
	// void OnFirstAttack(class AActor* Target);                                                                                // [0x181ad20] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStateOfBeingChanged
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnStateOfBeingChanged : public UEventListener
{ 
public:
	EStateOfBeing                                      StateOfBeing;                                               // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnStateOfBeingChanged.OnStateOfBeingChanged
	// void OnStateOfBeingChanged(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                // [0x181c450] Final|Native|Protected 
};

/// Class /Script/Indiana.OnObjectBumped
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnObjectBumped : public UEventListener
{ 
public:
	bool                                               bDetectCharacters;                                          // 0x0058   (0x0001)  
	bool                                               bDetectDynamicActors;                                       // 0x0059   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x005A   (0x0002)  MISSED
	float                                              DotCheck;                                                   // 0x005C   (0x0004)  


	/// Functions
	// Function /Script/Indiana.OnObjectBumped.OnBumped
	// void OnBumped(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);                // [0x181a3d0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/Indiana.OnCombatStateChange
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnCombatStateChange : public UEventListener
{ 
public:
	bool                                               bCombat;                                                    // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnCombatStateChange.OnCombatStateChange
	// void OnCombatStateChange(bool bInCombat, bool bRestoring);                                                               // [0x181a740] Final|Native|Protected 
};

/// Class /Script/Indiana.OnGetUp
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnGetUp : public UEventListener
{ 
public:
	bool                                               bBegan;                                                     // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnGetUp.OnGetUp
	// void OnGetUp(bool bInBegan);                                                                                             // [0x181a6b0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerConversationChange
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnPlayerConversationChange : public UEventListener
{ 
public:
	bool                                               bEntered;                                                   // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnPlayerConversationChange.OnPlayerConversationChange
	// void OnPlayerConversationChange(class UConversationInstance* Instance, bool bInEntered);                                 // [0x181bd50] Final|Native|Protected 
};

/// Class /Script/Indiana.OnAddictionTimerEntersMaxed
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnAddictionTimerEntersMaxed : public UEventListener
{ 
public:
	FGameplayTag                                       AddictionTag;                                               // 0x0058   (0x0008)  


	/// Functions
	// Function /Script/Indiana.OnAddictionTimerEntersMaxed.OnAddictionTimerEntersMaxed
	// void OnAddictionTimerEntersMaxed(FGameplayTag TimerTag);                                                                 // [0x181a050] Final|Native|Protected 
};

/// Class /Script/Indiana.OnAddictionTimerLeavesMaxed
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnAddictionTimerLeavesMaxed : public UEventListener
{ 
public:
	FGameplayTag                                       AddictionTag;                                               // 0x0058   (0x0008)  


	/// Functions
	// Function /Script/Indiana.OnAddictionTimerLeavesMaxed.OnAddictionTimerLeavesMaxed
	// void OnAddictionTimerLeavesMaxed(FGameplayTag TimerTag);                                                                 // [0x181a050] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSellItemNumBits
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnSellItemNumBits : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnSellItemNumBits.OnVectorTransaction
	// void OnVectorTransaction(int32_t BuyingBalance, int32_t SellingBalance, int32_t RepairingBalance, FItemStackSplit& ItemStackSplit); // [0x181c7c0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnFlawAccepted
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnFlawAccepted : public UEventListener
{ 
public:
	int32_t                                            NumFlaws;                                                   // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.OnFlawAccepted.OnFlawAccepted
	// void OnFlawAccepted(class UClass* Flaw, int32_t Count);                                                                  // [0x181adb0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnLevelChangedListener
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnLevelChangedListener : public UEventListener
{ 
public:
	ComparisonOperator                                 Operator;                                                   // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            EventLevel;                                                 // 0x005C   (0x0004)  


	/// Functions
	// Function /Script/Indiana.OnLevelChangedListener.OnLevelChanged
	// void OnLevelChanged(int32_t Level);                                                                                      // [0x181b600] Final|Native|Protected 
};

/// Class /Script/Indiana.OnItemTinkered
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnItemTinkered : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnItemTinkered.OnItemTinkered
	// void OnItemTinkered();                                                                                                   // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnEncumberedChange
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnEncumberedChange : public UEventListener
{ 
public:
	bool                                               bEncumbered;                                                // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OnEncumberedChange.OnEncumberedChange
	// void OnEncumberedChange(bool bInEncumbered);                                                                             // [0x181a6b0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStartCrouch
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnStartCrouch : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnStartCrouch.OnCrouch
	// void OnCrouch();                                                                                                         // [0x181a8a0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStopCrouch
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnStopCrouch : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnStopCrouch.OnStopCrouch
	// void OnStopCrouch();                                                                                                     // [0x181a8a0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnInterrogateStartEvent
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnInterrogateStartEvent : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnInterrogateStartEvent.OnStartInterrogation
	// void OnStartInterrogation();                                                                                             // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnGroinHit
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnGroinHit : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnGroinHit.OnGroinHit
	// void OnGroinHit();                                                                                                       // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPatientNKill
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPatientNKill : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPatientNKill.OnPatientNKill
	// void OnPatientNKill();                                                                                                   // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMadScientistKill
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnMadScientistKill : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnMadScientistKill.OnMadScientistKill
	// void OnMadScientistKill();                                                                                               // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBrandsMatch
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnBrandsMatch : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnBrandsMatch.OnBrandsMatch
	// void OnBrandsMatch();                                                                                                    // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSharpDressed
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnSharpDressed : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnSharpDressed.OnSharpDressed
	// void OnSharpDressed();                                                                                                   // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSpecialPETBenefits
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnSpecialPETBenefits : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnSpecialPETBenefits.OnSpecialPETBenefits
	// void OnSpecialPETBenefits();                                                                                             // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnUdderGatlingNeedler
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnUdderGatlingNeedler : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnUdderGatlingNeedler.OnUdderGatlingNeedler
	// void OnUdderGatlingNeedler();                                                                                            // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnElementalMaelstrom
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnElementalMaelstrom : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnElementalMaelstrom.OnElementalMaelstrom
	// void OnElementalMaelstrom();                                                                                             // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnInterrogateEndEvent
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnInterrogateEndEvent : public UEventListener
{ 
public:
	bool                                               bInterrogationPassed;                                       // 0x0058   (0x0001)  
	ECrimeType                                         Crime;                                                      // 0x0059   (0x0001)  
	bool                                               bDisguised;                                                 // 0x005A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x005B   (0x0001)  MISSED
	int32_t                                            DisguiseInterrogationsPassed;                               // 0x005C   (0x0004)  


	/// Functions
	// Function /Script/Indiana.OnInterrogateEndEvent.OnEndInterrogation
	// void OnEndInterrogation(EInterrogationResult InterrogationResult, class AIndianaAiCharacter* Interrogator, ECrimeType InCrime, bool bInDisguised, int32_t InDisguiseInterrogationsPassed); // [0x181a9e0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMaxPositiveFactions
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnMaxPositiveFactions : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnMaxPositiveFactions.OnMaxPositiveFactions
	// void OnMaxPositiveFactions();                                                                                            // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMaxNegativeFactions
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnMaxNegativeFactions : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnMaxNegativeFactions.OnMaxNegativeFactions
	// void OnMaxNegativeFactions();                                                                                            // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnKillingBlowListener
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnKillingBlowListener : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnKillingBlowListener.OnKillingBlow
	// void OnKillingBlow();                                                                                                    // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnQuestCompleteListener
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnQuestCompleteListener : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnQuestCompleteListener.OnQuestComplete
	// void OnQuestComplete(FGuid& QuestID);                                                                                    // [0x181be20] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/Indiana.OnModInstalledListener
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnModInstalledListener : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnModInstalledListener.OnModInstalled
	// void OnModInstalled();                                                                                                   // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnWeaponEquipped
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UOnWeaponEquipped : public UEventListener
{ 
public:
	TArray<ESkill>                                     Skills;                                                     // 0x0058   (0x0010)  


	/// Functions
	// Function /Script/Indiana.OnWeaponEquipped.OnWeaponEquipped
	// void OnWeaponEquipped(class UWeapon* Weapon);                                                                            // [0x181c930] Final|Native|Protected 
};

/// Class /Script/Indiana.OnWeaponHolstered
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UOnWeaponHolstered : public UEventListener
{ 
public:
	TArray<ESkill>                                     Skills;                                                     // 0x0058   (0x0010)  


	/// Functions
	// Function /Script/Indiana.OnWeaponHolstered.OnWeaponHolstered
	// void OnWeaponHolstered(class UWeapon* Weapon);                                                                           // [0x181c930] Final|Native|Protected 
};

/// Class /Script/Indiana.OnWeaponUnholstered
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align 8 MaxSize: 0x0068
class UOnWeaponUnholstered : public UEventListener
{ 
public:
	TArray<ESkill>                                     Skills;                                                     // 0x0058   (0x0010)  


	/// Functions
	// Function /Script/Indiana.OnWeaponUnholstered.OnWeaponUnholstered
	// void OnWeaponUnholstered(class UWeapon* Weapon);                                                                         // [0x181c930] Final|Native|Protected 
};

/// Class /Script/Indiana.OnWithinRoboRange
/// Size: 0x00C0 (192 bytes) (0x0000B0 - 0x0000C0) align 8 MaxSize: 0x00C0
class UOnWithinRoboRange : public UFactionListener
{ 
public:
	int32_t                                            NumDetectors;                                               // 0x00B0   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData00_7[0xB];                                       // 0x00B5   (0x000B)  MISSED


	/// Functions
	// Function /Script/Indiana.OnWithinRoboRange.OnRoboWithinRangeStateChanged
	// void OnRoboWithinRangeStateChanged();                                                                                    // [0x181c060] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerBeginPlay
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPlayerBeginPlay : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPlayerBeginPlay.OnPlayerBeginPlay
	// void OnPlayerBeginPlay();                                                                                                // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnFastTravelInitiated
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnFastTravelInitiated : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnFastTravelInitiated.OnFastTravelInitiated
	// void OnFastTravelInitiated(class UTravelDestinationData* TravelData, float TimePassed, bool bTravelFromMapLedger);       // [0x181ac00] Final|Native|Protected 
};

/// Class /Script/Indiana.OnRespec
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnRespec : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnRespec.OnRespec
	// void OnRespec();                                                                                                         // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCarryWeightChange
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align 8 MaxSize: 0x0060
class UOnCarryWeightChange : public UEventListener
{ 
public:
	ComparisonOperator                                 Operator;                                                   // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              CarryWeightValue;                                           // 0x005C   (0x0004)  


	/// Functions
	// Function /Script/Indiana.OnCarryWeightChange.OnCarryWeightChange
	// void OnCarryWeightChange();                                                                                              // [0x181a5f0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnGlobalVarChanged
/// Size: 0x0078 (120 bytes) (0x000058 - 0x000078) align 8 MaxSize: 0x0078
class UOnGlobalVarChanged : public UEventListener
{ 
public:
	FString                                            GlobalVariable;                                             // 0x0058   (0x0010)  
	int32_t                                            Value;                                                      // 0x0068   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x006C   (0x0001)  
	unsigned char                                      UnknownData00_7[0xB];                                       // 0x006D   (0x000B)  MISSED


	/// Functions
	// Function /Script/Indiana.OnGlobalVarChanged.OnGlobalVarChanged
	// void OnGlobalVarChanged(FString VariableName, int32_t NewValue);                                                         // [0x181ae80] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPickupAudioLog
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align 8 MaxSize: 0x0058
class UOnPickupAudioLog : public UEventListener
{ 
public:


	/// Functions
	// Function /Script/Indiana.OnPickupAudioLog.OnPickupAudioLog
	// void OnPickupAudioLog(class UAudioLogDataAsset* AudioLogDataAsset);                                                      // [0x181bcc0] Final|Native|Protected 
};

/// Class /Script/Indiana.EvidenceActor
/// Size: 0x0550 (1360 bytes) (0x0002B8 - 0x000550) align 8 MaxSize: 0x0550
class AEvidenceActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02B8   (0x0008)  MISSED
	class USceneComponent*                             SceneComponent;                                             // 0x02C0   (0x0008)  
	class USceneComponent*                             ProximitySource;                                            // 0x02C8   (0x0008)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x02D0   (0x0008)  
	class UParticleSystemComponent*                    ParticleComponent;                                          // 0x02D8   (0x0008)  
	FLocString                                         DisplayName;                                                // 0x02E0   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x02E8   (0x0008)  
	FGameplayTag                                       GameplayTag;                                                // 0x02F0   (0x0008)  
	class UClass*                                      RequiredItem;                                               // 0x02F8   (0x0008)  
	class UAkAudioEvent*                               OverrideProximityAudio;                                     // 0x0300   (0x0008)  
	float                                              OverrideDistanceInThreshold;                                // 0x0308   (0x0004)  
	float                                              OverrideDistanceOutThreshold;                               // 0x030C   (0x0004)  
	TArray<class UScriptEvent*>                        ScriptEvents;                                               // 0x0310   (0x0010)  
	bool                                               bCanBeScanned;                                              // 0x0320   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0321   (0x0007)  MISSED
	FConversationDescription                           ConversationDescription;                                    // 0x0328   (0x01F8)  
	unsigned char                                      UnknownData02_6[0x28];                                      // 0x0520   (0x0028)  MISSED
	class UEvidenceComponent*                          EvidenceComponent;                                          // 0x0548   (0x0008)  


	/// Functions
	// Function /Script/Indiana.EvidenceActor.RefreshHasItemEquipped
	// void RefreshHasItemEquipped(class UWeapon* Weapon);                                                                      // [0x18200e0] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.RefreshHasItem
	// void RefreshHasItem();                                                                                                   // [0x18200c0] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.PlayerExitedProximity
	// void PlayerExitedProximity();                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.EvidenceActor.PlayerEnteredProximity
	// void PlayerEnteredProximity();                                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.EvidenceActor.OnVisibilityStateChanged
	// void OnVisibilityStateChanged();                                                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.EvidenceActor.OnConversationStarted
	// void OnConversationStarted(class UConversationInstance* Instance);                                                       // [0x181ff20] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.OnConversationEnded
	// void OnConversationEnded(class UConversationInstance* Instance);                                                         // [0x181fe90] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.OnCombatStateChanged
	// void OnCombatStateChanged(bool bCombatIn, bool bRestoring);                                                              // [0x181fdc0] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.OnActivated
	// void OnActivated(bool bActivated);                                                                                       // [0x181fd30] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.EvidenceActor.IsVisible
	// bool IsVisible();                                                                                                        // [0x181fd10] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.EvidenceActor.IsInDAConversation
	// bool IsInDAConversation();                                                                                               // [0x181fa10] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.EvidenceActor.HasBeenScanned
	// bool HasBeenScanned();                                                                                                   // [0x181f9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.EvidenceComponent
/// Size: 0x00E0 (224 bytes) (0x0000E0 - 0x0000E0) align 8 MaxSize: 0x00E0
class UEvidenceComponent : public UActorComponent
{ 
public:
};

/// Class /Script/Indiana.InteractionEvent
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInteractionEvent : public UObject
{ 
public:
};

/// Class /Script/Indiana.ExaminableEvent
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align 8 MaxSize: 0x0068
class UExaminableEvent : public UInteractionEvent
{ 
public:
	FLocString                                         Name;                                                       // 0x0030   (0x0008)  
	FLocString                                         Description;                                                // 0x0038   (0x0008)  
	FLocString                                         OverrideLabel;                                              // 0x0040   (0x0008)  
	class UCodexDataAsset*                             Codex;                                                      // 0x0048   (0x0008)  
	FName                                              RemoteEventOnExaminationEnd;                                // 0x0050   (0x0008)  
	TArray<class UScriptEvent*>                        ScriptEvents;                                               // 0x0058   (0x0010)  
};

/// Class /Script/Indiana.ExaminableWidget
/// Size: 0x0350 (848 bytes) (0x000308 - 0x000350) align 8 MaxSize: 0x0350
class UExaminableWidget : public UIndianaInterfaceUserWidget
{ 
public:
	float                                              GamepadZoomMultiplier;                                      // 0x0308   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x030C   (0x0004)  MISSED
	class UTextBlockBase*                              TitleTextBlock;                                             // 0x0310   (0x0008)  
	class UTextBlockBase*                              BodyTextblock;                                              // 0x0318   (0x0008)  
	class UButtonBase*                                 BackButton;                                                 // 0x0320   (0x0008)  
	class UButtonBase*                                 InvisibleButton;                                            // 0x0328   (0x0008)  
	class UInputLabelWidget*                           BackInputLabel;                                             // 0x0330   (0x0008)  
	class UScrollBox*                                  ScrollBox;                                                  // 0x0338   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0340   (0x0010)  MISSED
};

/// Class /Script/Indiana.ExpandableAreaBase
/// Size: 0x03F0 (1008 bytes) (0x000120 - 0x0003F0) align 8 MaxSize: 0x03F0
class UExpandableAreaBase : public UWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0120   (0x0008)  MISSED
	class USlateWidgetStyleAsset*                      HeaderWidgetStyle;                                          // 0x0128   (0x0008)  
	FExpandableAreaStyle                               Style;                                                      // 0x0130   (0x0120)  
	FSlateBrush                                        BorderBrush;                                                // 0x0250   (0x0088)  
	FSlateColor                                        BorderColor;                                                // 0x02D8   (0x0028)  
	FMargin                                            HitTestMargin;                                              // 0x0300   (0x0010)  
	bool                                               bCenterSweepHitTest;                                        // 0x0310   (0x0001)  
	bool                                               bIsExpanded;                                                // 0x0311   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0312   (0x0002)  MISSED
	float                                              MaxHeight;                                                  // 0x0314   (0x0004)  
	FMargin                                            HeaderPadding;                                              // 0x0318   (0x0010)  
	FMargin                                            AreaPadding;                                                // 0x0328   (0x0010)  
	SDK_UNDEFINED(16,502) /* FMulticastInlineDelegate */ __um(OnExpansionChanged);                                 // 0x0338   (0x0010)  
	SDK_UNDEFINED(16,503) /* FMulticastInlineDelegate */ __um(OnHeaderHoveredMCD);                                 // 0x0348   (0x0010)  
	SDK_UNDEFINED(16,504) /* FMulticastInlineDelegate */ __um(OnHeaderUnhoveredMCD);                               // 0x0358   (0x0010)  
	SDK_UNDEFINED(16,505) /* FMulticastInlineDelegate */ __um(OnHeaderFocusReceivedMCD);                           // 0x0368   (0x0010)  
	SDK_UNDEFINED(16,506) /* FMulticastInlineDelegate */ __um(OnHeaderFocusLostMCD);                               // 0x0378   (0x0010)  
	class UWidget*                                     HeaderContent;                                              // 0x0388   (0x0008)  
	class UWidget*                                     BodyContent;                                                // 0x0390   (0x0008)  
	unsigned char                                      UnknownData02_7[0x58];                                      // 0x0398   (0x0058)  MISSED


	/// Functions
	// Function /Script/Indiana.ExpandableAreaBase.SetIsExpanded_Animated
	// void SetIsExpanded_Animated(bool IsExpanded);                                                                            // [0x18202a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ExpandableAreaBase.SetIsExpanded
	// void SetIsExpanded(bool IsExpanded);                                                                                     // [0x1820210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ExpandableAreaBase.GetIsExpanded
	// bool GetIsExpanded();                                                                                                    // [0x181f900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.EyeColor
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UEyeColor : public UPrimaryDataAsset
{ 
public:
	FLinearColor                                       PrimaryEyeColor;                                            // 0x0038   (0x0010)  
	FLinearColor                                       SecondaryEyeColor;                                          // 0x0048   (0x0010)  
};

/// Class /Script/Indiana.FaceFxRigsGameDataReference
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UFaceFxRigsGameDataReference : public UGameDataReference
{ 
public:
};

/// Class /Script/Indiana.FactionData
/// Size: 0x0200 (512 bytes) (0x000030 - 0x000200) align 8 MaxSize: 0x0200
class UFactionData : public UObject
{ 
public:
	FLocString                                         Name;                                                       // 0x0030   (0x0008)  
	FLocString                                         Description;                                                // 0x0038   (0x0008)  
	TWeakObjectPtr<class UTexture2D*>                  SmallImage;                                                 // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0048   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  TTDTooltipImage;                                            // 0x0068   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0070   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  LargeImage;                                                 // 0x0090   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0098   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  ReputationImage;                                            // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x00C0   (0x0020)  MISSED
	EFactionVisibility                                 Visibility;                                                 // 0x00E0   (0x0001)  
	EFactionHardEnum                                   FactionEnum;                                                // 0x00E1   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x00E2   (0x0002)  MISSED
	int32_t                                            Scale;                                                      // 0x00E4   (0x0004)  
	int32_t                                            InitialPositive;                                            // 0x00E8   (0x0004)  
	int32_t                                            InitialNegative;                                            // 0x00EC   (0x0004)  
	SDK_UNDEFINED(80,507) /* TSet<EReputationActionType> */ __um(ReputationActionsToIgnore);                       // 0x00F0   (0x0050)  
	SDK_UNDEFINED(80,508) /* TMap<class UReputationData*, TEnumAsByte<ETeamAttitude>> */ __um(PlayerRelationshipMap); // 0x0140   (0x0050)  
	unsigned char                                      UnknownData05_7[0x70];                                      // 0x0190   (0x0070)  MISSED
};

/// Class /Script/Indiana.FactionManager
/// Size: 0x00A8 (168 bytes) (0x000030 - 0x0000A8) align 8 MaxSize: 0x00A8
class UFactionManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x28];                                      // 0x0030   (0x0028)  MISSED
	TMap<class UClass*, class UFactionData*>           FactionMap;                                                 // 0x0058   (0x0050)  


	/// Functions
	// Function /Script/Indiana.FactionManager.SetRandomReputations_Debug
	// void SetRandomReputations_Debug();                                                                                       // [0xbb4890] Final|Exec|Native|Private 
	// Function /Script/Indiana.FactionManager.SetPositiveReputation_Debug
	// void SetPositiveReputation_Debug(FString FactionName, int32_t Amount);                                                   // [0x181f590] Final|Exec|Native|Private 
	// Function /Script/Indiana.FactionManager.SetNegativeReputation_Debug
	// void SetNegativeReputation_Debug(FString FactionName, int32_t Amount);                                                   // [0x181f590] Final|Exec|Native|Private 
	// Function /Script/Indiana.FactionManager.SetFactionEncountered_BP
	// void SetFactionEncountered_BP(class UClass* FactionData);                                                                // [0x1820190] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.IsReputationRankType_BP
	// bool IsReputationRankType_BP(class UClass* FactionData, EReputationRankType InRankType, ComparisonOperator Operator);    // [0x181fa60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.IsReputationRank_BP
	// bool IsReputationRank_BP(class UClass* FactionData, EReputationRankType InRankType, int32_t InRank, ComparisonOperator Operator); // [0x181fb60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.GetReputation_BP
	// class UReputationData* GetReputation_BP(class UClass* FactionData);                                                      // [0x181f930] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.ClearFactionRecentHostilityToPlayer_BP
	// void ClearFactionRecentHostilityToPlayer_BP(class UClass* FactionData);                                                  // [0x181f840] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.AddReputation_BP
	// void AddReputation_BP(class UClass* FactionData, EReputationType ReputationType, EReputationIncrementType IncrementType, int32_t CustomAmount, EReputationActionType ReputationAction); // [0x181f680] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.AddPositiveReputation_Debug
	// void AddPositiveReputation_Debug(FString FactionName, int32_t Amount);                                                   // [0x181f590] Final|Exec|Native|Private 
	// Function /Script/Indiana.FactionManager.AddNegativeReputation_Debug
	// void AddNegativeReputation_Debug(FString FactionName, int32_t Amount);                                                   // [0x181f590] Final|Exec|Native|Private 
};

/// Class /Script/Indiana.ToolTipContentWidget
/// Size: 0x0300 (768 bytes) (0x000300 - 0x000300) align 8 MaxSize: 0x0300
class UToolTipContentWidget : public UIndianaUserWidget
{ 
public:
};

/// Class /Script/Indiana.FastTravelTooltipWidget
/// Size: 0x0310 (784 bytes) (0x000300 - 0x000310) align 8 MaxSize: 0x0310
class UFastTravelTooltipWidget : public UToolTipContentWidget
{ 
public:
	class UTextBlockBase*                              FastTravelTextBlock;                                        // 0x0300   (0x0008)  
	class UTextBlockBase*                              RestrictionTextBlock;                                       // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.FilePathLoader
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UFilePathLoader : public UObject
{ 
public:
};

/// Struct /Script/Indiana.IndianaDamageEvent
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FIndianaDamageEvent
{ 
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0000   (0x0020)  MISSED
	class UImpactDataSet*                              ImpactDataSet;                                              // 0x0020   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0028   (0x0028)  MISSED
};

/// Struct /Script/Indiana.ShotInfo
/// Size: 0x0108 (264 bytes) (0x000000 - 0x000108) align 8 MaxSize: 0x0108
struct FShotInfo
{ 
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0000   (0x0040)  MISSED
	FDamageDescription                                 DamageDescription;                                          // 0x0040   (0x0078)  
	FIndianaDamageEvent                                DamageEvent;                                                // 0x00B8   (0x0050)  
};

/// Class /Script/Indiana.FireMode
/// Size: 0x09F8 (2552 bytes) (0x0005B8 - 0x0009F8) align 8 MaxSize: 0x09F8
class UFireMode : public URangedMode
{ 
public:
	bool                                               bOverrideSemiAutoRTPC;                                      // 0x05B8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x05B9   (0x0003)  MISSED
	float                                              SemiAutoRTPCOverrideVal;                                    // 0x05BC   (0x0004)  
	EFireMode                                          FireMode;                                                   // 0x05C0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x05C1   (0x0007)  MISSED
	TSoftObjectPtr<class UClass*>                      ProjectileClass;                                            // 0x05C8   (0x0028)  
	class UClass*                                      OverrideProjectileClass;                                    // 0x05F0   (0x0008)  
	bool                                               bUseMuzzleRotationForProjectileVisuals;                     // 0x05F8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x05F9   (0x0007)  MISSED
	TWeakObjectPtr<class UInstantHitData*>             InstantHitData;                                             // 0x0600   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x0608   (0x0020)  MISSED
	class UInstantHitData*                             OverrideInstantHitData;                                     // 0x0628   (0x0008)  
	float                                              ShotTime;                                                   // 0x0630   (0x0004)  
	char                                               AmmoPerShot;                                                // 0x0634   (0x0001)  
	char                                               ShotsPerShot;                                               // 0x0635   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0636   (0x0002)  MISSED
	float                                              FiringAngle;                                                // 0x0638   (0x0004)  
	char                                               ShotsPerBurst;                                              // 0x063C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x063D   (0x0003)  MISSED
	float                                              BurstDuration;                                              // 0x0640   (0x0004)  
	char                                               AmmoMaxCharge;                                              // 0x0644   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0645   (0x0003)  MISSED
	float                                              ChargeDelay;                                                // 0x0648   (0x0004)  
	float                                              ChargeDuration;                                             // 0x064C   (0x0004)  
	FRuntimeFloatCurve                                 ChargeDamageCurve;                                          // 0x0650   (0x0088)  
	float                                              SpinUpDuration;                                             // 0x06D8   (0x0004)  
	bool                                               SpinWhileAiming;                                            // 0x06DC   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x06DD   (0x0003)  MISSED
	FRuntimeFloatCurve                                 SpinScalarCurve;                                            // 0x06E0   (0x0088)  
	FRuntimeFloatCurve                                 RecoilScalarCurve;                                          // 0x0768   (0x0088)  
	FName                                              SemiAutoRTPCName;                                           // 0x07F0   (0x0008)  
	FName                                              FullAutoRTPCName;                                           // 0x07F8   (0x0008)  
	float                                              RapidFireShotTimeThreshold;                                 // 0x0800   (0x0004)  
	float                                              ProjectileChargeDelay;                                      // 0x0804   (0x0004)  
	float                                              ProjectileChargeDuration;                                   // 0x0808   (0x0004)  
	float                                              ProjectileChargeShotDelay;                                  // 0x080C   (0x0004)  
	FRuntimeFloatCurve                                 ProjectileCountScalarCurve;                                 // 0x0810   (0x0088)  
	FName                                              ProjectileChargeRTPCName;                                   // 0x0898   (0x0008)  
	TArray<class UAkAudioEvent*>                       ProjectileLoadAudioEvents;                                  // 0x08A0   (0x0010)  
	unsigned char                                      UnknownData08_6[0x20];                                      // 0x08B0   (0x0020)  MISSED
	FShotInfo                                          CurrentShot;                                                // 0x08D0   (0x0108)  
	unsigned char                                      UnknownData09_7[0x20];                                      // 0x09D8   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.FireMode.UsesCharge
	// bool UsesCharge();                                                                                                       // [0x1820330] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.ResetCharge
	// void ResetCharge();                                                                                                      // [0x1820170] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.FireMode.OnTimeDilationUpdated
	// void OnTimeDilationUpdated(float Value);                                                                                 // [0x1820040] Final|Native|Protected 
	// Function /Script/Indiana.FireMode.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x181ffb0] Final|Native|Protected 
	// Function /Script/Indiana.FireMode.IsSpinUp
	// bool IsSpinUp();                                                                                                         // [0x181fce0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.IsSemiAutomatic
	// bool IsSemiAutomatic();                                                                                                  // [0x181fcb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.IsProjectileCharge
	// bool IsProjectileCharge();                                                                                               // [0x181fa30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.IsBurst
	// bool IsBurst();                                                                                                          // [0x181f9e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.GetChargeProgress
	// float GetChargeProgress();                                                                                               // [0x181f8c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.CanCharge
	// bool CanCharge();                                                                                                        // [0x181f810] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.DamageTypeRequirementFire
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FDamageTypeRequirementFire
{ 
	int32_t                                            MinSkill;                                                   // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UClass*                                      DamageType;                                                 // 0x0008   (0x0008)  
	class UInstantHitData*                             InstantHitData;                                             // 0x0010   (0x0008)  
	int32_t                                            RangedAttackMod;                                            // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Indiana.FireMultiDamageTypeMode
/// Size: 0x0A38 (2616 bytes) (0x0009F8 - 0x000A38) align 8 MaxSize: 0x0A38
class UFireMultiDamageTypeMode : public UFireMode
{ 
public:
	ESkill                                             Skill;                                                      // 0x09F8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x09F9   (0x0007)  MISSED
	TArray<FDamageTypeRequirementFire>                 DamageTypes;                                                // 0x0A00   (0x0010)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0A10   (0x0028)  MISSED
};

/// Struct /Script/Indiana.SpawnPropertyModifiers
/// Size: 0x00D0 (208 bytes) (0x000000 - 0x0000D0) align 8 MaxSize: 0x00D0
struct FSpawnPropertyModifiers
{ 
	class UClass*                                      TeamOverride;                                               // 0x0000   (0x0008)  
	class UConversationData*                           ConversationDataOverride;                                   // 0x0008   (0x0008)  
	TArray<class ULootTableData*>                      AdditionalLoot;                                             // 0x0010   (0x0010)  
	bool                                               bOverrideOutOfCombatBehavior;                               // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	FBehaviorPackage                                   OutOfCombatBehavior;                                        // 0x0028   (0x0098)  
	bool                                               bIgnoreOverrideInterestPackage;                             // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00C1   (0x0007)  MISSED
	class AActor*                                      Spline;                                                     // 0x00C8   (0x0008)  
};

/// Class /Script/Indiana.SpawnNodeBase
/// Size: 0x0538 (1336 bytes) (0x0002B8 - 0x000538) align 8 MaxSize: 0x0538
class ASpawnNodeBase : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02B8   (0x0008)  MISSED
	SDK_UNDEFINED(16,509) /* FMulticastInlineDelegate */ __um(NodeBeginSpawn);                                     // 0x02C0   (0x0010)  
	SDK_UNDEFINED(16,510) /* FMulticastInlineDelegate */ __um(NodeActorSpawned);                                   // 0x02D0   (0x0010)  
	SDK_UNDEFINED(16,511) /* FMulticastInlineDelegate */ __um(NodeActorKilled);                                    // 0x02E0   (0x0010)  
	SDK_UNDEFINED(16,512) /* FMulticastInlineDelegate */ __um(NodeActorDamaged);                                   // 0x02F0   (0x0010)  
	SDK_UNDEFINED(16,513) /* FMulticastInlineDelegate */ __um(NodeActorAlertState);                                // 0x0300   (0x0010)  
	SDK_UNDEFINED(16,514) /* FMulticastInlineDelegate */ __um(NodeActorCombatState);                               // 0x0310   (0x0010)  
	SDK_UNDEFINED(16,515) /* FMulticastInlineDelegate */ __um(NodeActorAwareOfPlayer);                             // 0x0320   (0x0010)  
	SDK_UNDEFINED(16,516) /* FMulticastInlineDelegate */ __um(NodeActorDespawned);                                 // 0x0330   (0x0010)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0340   (0x0018)  MISSED
	FBehaviorPackage                                   AIBehavior;                                                 // 0x0358   (0x0098)  
	bool                                               bPortedBehavior;                                            // 0x03F0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x03F1   (0x0007)  MISSED
	FSpawnPropertyModifiers                            SpawnModifiers;                                             // 0x03F8   (0x00D0)  
	TWeakObjectPtr<class AEncounter*>                  OwningEncounter;                                            // 0x04C8   (0x0008)  
	TWeakObjectPtr<class AActor*>                      SpawnedInstance;                                            // 0x04D0   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x04D8   (0x0020)  MISSED
	class UObsidianIDComponent*                        ObsidianID;                                                 // 0x04F8   (0x0008)  
	class UClass*                                      ProvidedTeamData;                                           // 0x0500   (0x0008)  
	unsigned char                                      UnknownData04_7[0x30];                                      // 0x0508   (0x0030)  MISSED


	/// Functions
	// Function /Script/Indiana.SpawnNodeBase.OnActorTookDamage
	// void OnActorTookDamage(FCauseDamageInfo& CauseDamageInfo);                                                               // [0x18bfda0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.SpawnNodeBase.OnActorNewStateOfBeing
	// void OnActorNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                               // [0x18bfcd0] Final|Native|Protected 
	// Function /Script/Indiana.SpawnNodeBase.OnActorDespawned
	// void OnActorDespawned();                                                                                                 // [0x18bfcb0] Final|Native|Protected 
	// Function /Script/Indiana.SpawnNodeBase.OnActorCombatStateChanged
	// void OnActorCombatStateChanged(bool bInCombat, bool bRestoring);                                                         // [0x18bfbe0] Final|Native|Protected 
	// Function /Script/Indiana.SpawnNodeBase.OnActorAwareOfPlayer
	// void OnActorAwareOfPlayer(bool bRestoring);                                                                              // [0x18bfb50] Final|Native|Protected 
	// Function /Script/Indiana.SpawnNodeBase.OnActorAlertStateChanged
	// void OnActorAlertStateChanged(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x18bf9f0] Final|Native|Protected 
};

/// Class /Script/Indiana.FixedSpawnNode
/// Size: 0x0560 (1376 bytes) (0x000538 - 0x000560) align 8 MaxSize: 0x0560
class AFixedSpawnNode : public ASpawnNodeBase
{ 
public:
	TSoftObjectPtr<class UClass*>                      NodeActor;                                                  // 0x0538   (0x0028)  
};

/// Class /Script/Indiana.FlavorTextWidget
/// Size: 0x0310 (784 bytes) (0x000300 - 0x000310) align 8 MaxSize: 0x0310
class UFlavorTextWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              FlavorText;                                                 // 0x0300   (0x0008)  
	FLocString                                         TextReference;                                              // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.Flaw
/// Size: 0x0088 (136 bytes) (0x000030 - 0x000088) align 8 MaxSize: 0x0088
class UFlaw : public UObject
{ 
public:
	FLocString                                         Name;                                                       // 0x0030   (0x0008)  
	FLocString                                         Description;                                                // 0x0038   (0x0008)  
	class UBrandDataAsset*                             BrandType;                                                  // 0x0040   (0x0008)  
	EFlawType                                          FlawType;                                                   // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	int32_t                                            FlawTriggerCount;                                           // 0x004C   (0x0004)  
	float                                              OfferChance;                                                // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	class UClass*                                      Spell;                                                      // 0x0058   (0x0008)  
	class UEventListener*                              EventListener;                                              // 0x0060   (0x0008)  
	TArray<EDLCFlags>                                  DLCFlags;                                                   // 0x0068   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0078   (0x0010)  MISSED
};

/// Class /Script/Indiana.FlawSummaryEntryWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UFlawSummaryEntryWidget : public UIndianaUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0300   (0x0008)  
	class UTextBlockBase*                              FlawNameText;                                               // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0310   (0x0008)  MISSED
};

/// Class /Script/Indiana.FlawTree
/// Size: 0x0078 (120 bytes) (0x000038 - 0x000078) align 8 MaxSize: 0x0078
class UFlawTree : public UDataAsset
{ 
public:
	TArray<class UClass*>                              Flaws;                                                      // 0x0038   (0x0010)  
	TWeakObjectPtr<class UFlawTree*>                   DLCFlawTree;                                                // 0x0048   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0050   (0x0028)  MISSED
};

/// Class /Script/Indiana.FleeBehaviorStateInfo
/// Size: 0x0180 (384 bytes) (0x000178 - 0x000180) align 8 MaxSize: 0x0180
class UFleeBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	TWeakObjectPtr<class UDisableStatusEffect*>        DisableStatusEffect;                                        // 0x0178   (0x0008)  
};

/// Class /Script/Indiana.FleeRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UFleeRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.FleeNode
/// Size: 0x0358 (856 bytes) (0x000358 - 0x000358) align 8 MaxSize: 0x0358
class AFleeNode : public AEnviromentNode
{ 
public:
};

/// Class /Script/Indiana.FlipbookWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UFlipbookWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UMaterialInstanceDynamic*                    DynamicMaterial;                                            // 0x0310   (0x0008)  
	class UUIFlipBookData*                             FlipbookData;                                               // 0x0318   (0x0008)  
	class UMaterialInterface*                          MaterialInterface;                                          // 0x0320   (0x0008)  
	class UImage*                                      DisplayImage;                                               // 0x0328   (0x0008)  


	/// Functions
	// Function /Script/Indiana.FlipbookWidget.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x1826960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FlipbookWidget.EndPlay
	// void EndPlay();                                                                                                          // [0x18268a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.FlipbookWidget.BeginPlay
	// void BeginPlay(bool bInShouldLoop, int32_t PlayFromFrame);                                                               // [0x18267d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.FloorIndicatorWidget
/// Size: 0x03C0 (960 bytes) (0x000300 - 0x0003C0) align 8 MaxSize: 0x03C0
class UFloorIndicatorWidget : public UIndianaUserWidget
{ 
public:
	class UFloorLevelWidget*                           Floor1;                                                     // 0x0300   (0x0008)  
	class UFloorLevelWidget*                           Floor2;                                                     // 0x0308   (0x0008)  
	class UFloorLevelWidget*                           Floor3;                                                     // 0x0310   (0x0008)  
	class UFloorLevelWidget*                           Floor4;                                                     // 0x0318   (0x0008)  
	class UFloorLevelWidget*                           Floor5;                                                     // 0x0320   (0x0008)  
	class UFloorLevelWidget*                           Floor6;                                                     // 0x0328   (0x0008)  
	class UFloorLevelWidget*                           Floor7;                                                     // 0x0330   (0x0008)  
	class UButtonBase*                                 NextFloorButton;                                            // 0x0338   (0x0008)  
	class UButtonBase*                                 PrevFloorButton;                                            // 0x0340   (0x0008)  
	class UVerticalBox*                                ContentContainer;                                           // 0x0348   (0x0008)  
	class UTextBlockBase*                              FloorNameTextBlock;                                         // 0x0350   (0x0008)  
	class UTextBlockBase*                              FloorLevelTextBlock;                                        // 0x0358   (0x0008)  
	FLinearColor                                       CurrentFloorColor;                                          // 0x0360   (0x0010)  
	FLinearColor                                       OtherFloorColor;                                            // 0x0370   (0x0010)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0380   (0x0040)  MISSED
};

/// Class /Script/Indiana.FloorLevelWidget
/// Size: 0x0288 (648 bytes) (0x000278 - 0x000288) align 8 MaxSize: 0x0288
class UFloorLevelWidget : public UUserWidget
{ 
public:
	class UImage*                                      FloorImage;                                                 // 0x0278   (0x0008)  
	class UImage*                                      CurrentFloorImage;                                          // 0x0280   (0x0008)  
};

/// Class /Script/Indiana.FollowBehaviorStateInfo
/// Size: 0x0150 (336 bytes) (0x000120 - 0x000150) align 8 MaxSize: 0x0150
class UFollowBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0120   (0x0030)  MISSED
};

/// Class /Script/Indiana.FollowRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UFollowRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.FootstepAudio
/// Size: 0x0148 (328 bytes) (0x000030 - 0x000148) align 8 MaxSize: 0x0148
class UFootstepAudio : public UObject
{ 
public:
	class UAkAudioEvent*                               FootstepEvent;                                              // 0x0030   (0x0008)  
	TMap<FName, float>                                 CustomRTPCValues;                                           // 0x0038   (0x0050)  
	TMap<EFootID, FName>                               CustomFootAttachLocations;                                  // 0x0088   (0x0050)  
	TMap<ECharacterMovementAudioEvents, class UAkPlaySoundEventEffect*> MovementEvents;                            // 0x00D8   (0x0050)  
	FEventEffectState                                  EventEffectState;                                           // 0x0128   (0x0020)  
};

/// Class /Script/Indiana.FootstepData
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UFootstepData : public UDataAsset
{ 
public:
	class UFootstepStimulusData*                       StimulusData;                                               // 0x0038   (0x0008)  
	class UFootstepVisualData*                         VisualData;                                                 // 0x0040   (0x0008)  
	class UClass*                                      AudioData;                                                  // 0x0048   (0x0008)  
};

/// Class /Script/Indiana.FootstepEnvironmentInteraction
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class UFootstepEnvironmentInteraction : public UDataAsset
{ 
public:
};

/// Struct /Script/Indiana.FootstepStimulus
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FFootstepStimulus
{ 
	float                                              AIRadius;                                                   // 0x0000   (0x0004)  
	float                                              AIAwarenessGenerated;                                       // 0x0004   (0x0004)  
};

/// Struct /Script/Indiana.FootstepSurfaceMatch
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FFootstepSurfaceMatch
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	SDK_UNDEFINED(16,517) /* TArray<TEnumAsByte<EPhysicalSurface>> */ __um(SurfaceTypes);                          // 0x0008   (0x0010)  
};

/// Struct /Script/Indiana.FootstepMatch
/// Size: 0x0038 (56 bytes) (0x000018 - 0x000038) align 8 MaxSize: 0x0038
struct FFootstepMatch : FFootstepSurfaceMatch
{ 
	TArray<EFootstepType>                              StepTypes;                                                  // 0x0018   (0x0010)  
	TArray<EFootID>                                    Feet;                                                       // 0x0028   (0x0010)  
};

/// Struct /Script/Indiana.FootstepStimulusOverride
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
struct FFootstepStimulusOverride : FFootstepMatch
{ 
	FFootstepStimulus                                  Stimulus;                                                   // 0x0038   (0x0008)  
};

/// Struct /Script/Indiana.SpecialEventStimulusOverride
/// Size: 0x0020 (32 bytes) (0x000018 - 0x000020) align 8 MaxSize: 0x0020
struct FSpecialEventStimulusOverride : FFootstepSurfaceMatch
{ 
	FFootstepStimulus                                  Stimulus;                                                   // 0x0018   (0x0008)  
};

/// Struct /Script/Indiana.SpecialMovementStimulusProperties
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FSpecialMovementStimulusProperties
{ 
	FFootstepStimulus                                  DefaultEventStimulus;                                       // 0x0000   (0x0008)  
	TArray<FSpecialEventStimulusOverride>              EventStimulusOverrides;                                     // 0x0008   (0x0010)  
};

/// Class /Script/Indiana.FootstepStimulusData
/// Size: 0x00A0 (160 bytes) (0x000038 - 0x0000A0) align 8 MaxSize: 0x00A0
class UFootstepStimulusData : public UDataAsset
{ 
public:
	FFootstepStimulus                                  DefaultFootstepStimulus;                                    // 0x0038   (0x0008)  
	TArray<FFootstepStimulusOverride>                  FootstepStimulusOverrides;                                  // 0x0040   (0x0010)  
	TMap<ESpecialMovementEvent, FSpecialMovementStimulusProperties> SpecialEventStimulus;                          // 0x0050   (0x0050)  
};

/// Struct /Script/Indiana.FootstepVisuals
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FFootstepVisuals
{ 
	class UParticleSystem*                             PSTemplate;                                                 // 0x0000   (0x0008)  
	EParticleSpawnType                                 ParticleSystemSpawnType;                                    // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	FName                                              PSSocket;                                                   // 0x000C   (0x0008)  
	FVector                                            LocationOffset;                                             // 0x0014   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x0020   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.FootstepVisualsOverride
/// Size: 0x0068 (104 bytes) (0x000038 - 0x000068) align 8 MaxSize: 0x0068
struct FFootstepVisualsOverride : FFootstepMatch
{ 
	FFootstepVisuals                                   Visuals;                                                    // 0x0038   (0x0030)  
};

/// Struct /Script/Indiana.SpecialEventVisualsOverride
/// Size: 0x0048 (72 bytes) (0x000018 - 0x000048) align 8 MaxSize: 0x0048
struct FSpecialEventVisualsOverride : FFootstepSurfaceMatch
{ 
	FFootstepVisuals                                   Visuals;                                                    // 0x0018   (0x0030)  
};

/// Struct /Script/Indiana.SpecialMovementVisualProperties
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FSpecialMovementVisualProperties
{ 
	FFootstepVisuals                                   DefaultEventVisual;                                         // 0x0000   (0x0030)  
	TArray<FSpecialEventVisualsOverride>               EventVisualsOverrides;                                      // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.FootstepVisualData
/// Size: 0x00C8 (200 bytes) (0x000038 - 0x0000C8) align 8 MaxSize: 0x00C8
class UFootstepVisualData : public UDataAsset
{ 
public:
	FFootstepVisuals                                   DefaultFootstepVisuals;                                     // 0x0038   (0x0030)  
	TArray<FFootstepVisualsOverride>                   FootstepVisualOverrides;                                    // 0x0068   (0x0010)  
	TMap<ESpecialMovementEvent, FSpecialMovementVisualProperties> SpecialEventVisuals;                             // 0x0078   (0x0050)  
};

/// Class /Script/Indiana.ForcedAnimationComponent
/// Size: 0x0110 (272 bytes) (0x0000E0 - 0x000110) align 8 MaxSize: 0x0110
class UForcedAnimationComponent : public UActorComponent
{ 
public:
	TArray<FString>                                    InspectOnFirstEquipWeaponNames;                             // 0x00E0   (0x0010)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x00F0   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.ForcedAnimationComponent.PlayEquippedWeaponInspectionAnimation
	// void PlayEquippedWeaponInspectionAnimation();                                                                            // [0x1826a90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ForcedAnimationComponent.OnWeaponEquipped
	// void OnWeaponEquipped(class UWeapon* Weapon);                                                                            // [0x1826a00] Final|Native|Protected 
};

/// Class /Script/Indiana.ForceFeedbackEventEffect
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UForceFeedbackEventEffect : public UEventEffect
{ 
public:
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                        // 0x0030   (0x0008)  
	bool                                               bLooping;                                                   // 0x0038   (0x0001)  
	bool                                               bCancelable;                                                // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x003A   (0x0006)  MISSED
};

/// Class /Script/Indiana.FPVAnimInstance
/// Size: 0x0600 (1536 bytes) (0x000558 - 0x000600) align 16 MaxSize: 0x0600
class UFPVAnimInstance : public UCharacterAnimInstance
{ 
public:
	float                                              NormalizedLookBlendTime;                                    // 0x0558   (0x0004)  
	float                                              CurrentAimBlendTime;                                        // 0x055C   (0x0004)  
	float                                              MinPlayRateWalk;                                            // 0x0560   (0x0004)  
	float                                              MaxPlayRateWalk;                                            // 0x0564   (0x0004)  
	float                                              SprintAnimationSpeed;                                       // 0x0568   (0x0004)  
	float                                              MinPlayRateSprint;                                          // 0x056C   (0x0004)  
	float                                              MaxPlayRateSprint;                                          // 0x0570   (0x0004)  
	FVector                                            CurrentAimOffsetZ;                                          // 0x0574   (0x000C)  
	FVector                                            CurrentAimOffsetX;                                          // 0x0580   (0x000C)  
	FVector                                            CurrentAimOffset;                                           // 0x058C   (0x000C)  
	bool                                               bIsFineAiming;                                              // 0x0598   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0599   (0x0001)  MISSED
	bool                                               bIsDodging;                                                 // 0x059A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x059B   (0x0001)  MISSED
	float                                              PlayerCameraPitch;                                          // 0x059C   (0x0004)  
	float                                              PlayerCameraRoll;                                           // 0x05A0   (0x0004)  
	FRotator                                           WeaponSway;                                                 // 0x05A4   (0x000C)  
	float                                              NormalizedTurnSpeed;                                        // 0x05B0   (0x0004)  
	float                                              NormalizedLookUpSpeed;                                      // 0x05B4   (0x0004)  
	float                                              WalkPlayRateScale;                                          // 0x05B8   (0x0004)  
	float                                              SprintPlayRateScale;                                        // 0x05BC   (0x0004)  
	class UAnimMontage*                                CrouchMontage;                                              // 0x05C0   (0x0008)  
	class UAnimMontage*                                CurrentDodgeMontage;                                        // 0x05C8   (0x0008)  
	bool                                               bUseLowGravAnimation;                                       // 0x05D0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x05D1   (0x0003)  MISSED
	float                                              LowGravLocomotionAnimPlayRateScale;                         // 0x05D4   (0x0004)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x05D8   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.FPVAnimInstance.OnHeadbobbingChanged
	// void OnHeadbobbingChanged(bool bShouldHeadbob);                                                                          // [0xb9e060] Final|Native|Protected 
	// Function /Script/Indiana.FPVAnimInstance.IsAimTransitioning
	// bool IsAimTransitioning();                                                                                               // [0x1826900] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FPVAnimInstance.GetHeadbobWeight
	// float GetHeadbobWeight();                                                                                                // [0x18268c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.FPVCameraComponent
/// Size: 0x0880 (2176 bytes) (0x000860 - 0x000880) align 16 MaxSize: 0x0880
class UFPVCameraComponent : public UCameraComponent
{ 
public:
	float                                              CrouchedCameraHeightOffset;                                 // 0x0860   (0x0004)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x0864   (0x001C)  MISSED


	/// Functions
	// Function /Script/Indiana.FPVCameraComponent.OnFieldOfViewSettingChanged
	// void OnFieldOfViewSettingChanged(float NewFOV);                                                                          // [0x1826980] Final|Native|Protected 
};

/// Class /Script/Indiana.FPVSkeletalMeshComponent
/// Size: 0x0FD0 (4048 bytes) (0x000FC8 - 0x000FD0) align 16 MaxSize: 0x0FD0
class UFPVSkeletalMeshComponent : public USkeletalMeshComponent
{ 
public:
	bool                                               bFixedFOVForFPVEnabled;                                     // 0x0FC8   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0FC9   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.FPVSkeletalMeshComponent.SetFixedFOVforFPVEnabled
	// void SetFixedFOVforFPVEnabled(bool InbFixedFOVEnabled);                                                                  // [0x1826ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.FPVSkeletalMeshComponent.IsFixedFOVEnabled
	// bool IsFixedFOVEnabled();                                                                                                // [0x1826930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.FreezeDisableStatusEffect
/// Size: 0x0198 (408 bytes) (0x000198 - 0x000198) align 8 MaxSize: 0x0198
class UFreezeDisableStatusEffect : public UDisableStatusEffect
{ 
public:
};

/// Class /Script/Indiana.FurnitureAction
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UFurnitureAction : public UAIAction
{ 
public:
	class AFurnitureActor*                             FurnitureActor;                                             // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0040   (0x0018)  MISSED
};

/// Class /Script/Indiana.FurnitureSkeletonPreviewMeshMap
/// Size: 0x00C8 (200 bytes) (0x000038 - 0x0000C8) align 8 MaxSize: 0x00C8
class UFurnitureSkeletonPreviewMeshMap : public UDataAsset
{ 
public:
	SDK_UNDEFINED(80,518) /* TMap<TWeakObjectPtr<USkeleton*>, TWeakObjectPtr<USkeletalMesh*>> */ __um(SkeletonMeshMap); // 0x0038   (0x0050)  
	TWeakObjectPtr<class USkeletalMesh*>               HumanSkeletonMesh;                                          // 0x0088   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0090   (0x0020)  MISSED
	class UMaterialInterface*                          PreviewMaterial;                                            // 0x00B0   (0x0008)  
	class UMaterialInterface*                          InvalidPreviewMaterial;                                     // 0x00B8   (0x0008)  
	class UMaterialInterface*                          InvalidConversationPreviewMaterial;                         // 0x00C0   (0x0008)  
};

/// Class /Script/Indiana.FurnitureBehaviorStateInfo
/// Size: 0x01A8 (424 bytes) (0x000120 - 0x0001A8) align 8 MaxSize: 0x01A8
class UFurnitureBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x88];                                      // 0x0120   (0x0088)  MISSED
};

/// Class /Script/Indiana.FurnitureRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UFurnitureRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Struct /Script/Indiana.urniturePositionalAnimationData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FurniturePositionalAnimationData
{ 
	class UAnimMontage*                                Start;                                                      // 0x0000   (0x0008)  
	class UAnimMontage*                                Exit;                                                       // 0x0008   (0x0008)  
	class UAnimMontage*                                CombatExit;                                                 // 0x0010   (0x0008)  
	class UAnimMontage*                                Loop;                                                       // 0x0018   (0x0008)  
	bool                                               bIsClimbing;                                                // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/Indiana.FurnitureAnimationData
/// Size: 0x01A0 (416 bytes) (0x000038 - 0x0001A0) align 16 MaxSize: 0x01A0
class UFurnitureAnimationData : public UDataAsset
{ 
public:
	TArray<FurniturePositionalAnimationData>           PositionalData;                                             // 0x0038   (0x0010)  
	FEmotionEntry                                      DefaultAnimationData;                                       // 0x0048   (0x00A8)  
	class UEmotionData*                                ConversationEmotionData;                                    // 0x00F0   (0x0008)  
	SDK_UNDEFINED(80,519) /* TMap<TSoftObjectPtr<UClass*>, class UFurnitureAnimationData*> */ __um(WeaponBasedFurnitureData); // 0x00F8   (0x0050)  
	class UFurnitureAnimationData*                     FemaleFurnitureData;                                        // 0x0148   (0x0008)  
	class UAimOffsetBlendSpace*                        HeadAimBlendSpace;                                          // 0x0150   (0x0008)  
	bool                                               bExitInCoversation;                                         // 0x0158   (0x0001)  
	bool                                               bObeyConversationComfortAngle;                              // 0x0159   (0x0001)  
	bool                                               bEnableNavWalking;                                          // 0x015A   (0x0001)  
	bool                                               bPreventIK;                                                 // 0x015B   (0x0001)  
	bool                                               bIsSleepingFurniture;                                       // 0x015C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x015D   (0x0003)  MISSED
	float                                              EntryPointAreaSweepSize;                                    // 0x0160   (0x0004)  
	float                                              EntryPointAreaSweepHeight;                                  // 0x0164   (0x0004)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0168   (0x0008)  MISSED
	FTransform                                         RootOffset;                                                 // 0x0170   (0x0030)  
};

/// Struct /Script/Indiana.TransformOverride
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 MaxSize: 0x0040
struct FTransformOverride
{ 
	int32_t                                            Slot;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0004   (0x000C)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
};

/// Class /Script/Indiana.FurnitureComponent
/// Size: 0x0470 (1136 bytes) (0x000268 - 0x000470) align 16 MaxSize: 0x0470
class UFurnitureComponent : public USceneComponent
{ 
public:
	FGameplayTag                                       InterestType;                                               // 0x0268   (0x0008)  
	SDK_UNDEFINED(16,520) /* TArray<TWeakObjectPtr<UFurnitureAnimationData*>> */ __um(AnimationData);              // 0x0270   (0x0010)  
	class AActor*                                      LookAtOverride;                                             // 0x0280   (0x0008)  
	bool                                               PreventPrematureEnd;                                        // 0x0288   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0289   (0x0007)  MISSED
	TArray<int32_t>                                    IgnoreEntryPointSlots;                                      // 0x0290   (0x0010)  
	TArray<int32_t>                                    AutoAssignedIgnoreEntryPointSlots;                          // 0x02A0   (0x0010)  
	SDK_UNDEFINED(80,521) /* TSet<TWeakObjectPtr<AActor*>> */ __um(ActorsToIgnore);                                // 0x02B0   (0x0050)  
	SDK_UNDEFINED(80,522) /* TSet<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(ComponentsToIgnore);               // 0x0300   (0x0050)  
	float                                              MinDuration;                                                // 0x0350   (0x0004)  
	float                                              MaxDuration;                                                // 0x0354   (0x0004)  
	float                                              MinCoolDown;                                                // 0x0358   (0x0004)  
	float                                              MaxCoolDown;                                                // 0x035C   (0x0004)  
	bool                                               bPreventAllInterrupts;                                      // 0x0360   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0361   (0x0007)  MISSED
	TArray<FTransformOverride>                         TransformOverrides;                                         // 0x0368   (0x0010)  
	SDK_UNDEFINED(80,523) /* TMap<TWeakObjectPtr<USkeleton*>, TWeakObjectPtr<UFurnitureAnimationData*>> */ __um(PrecomputedSkeletonMap); // 0x0378   (0x0050)  
	unsigned char                                      UnknownData02_6[0x18];                                      // 0x03C8   (0x0018)  MISSED
	SDK_UNDEFINED(80,524) /* TMap<TWeakObjectPtr<UFurnitureAnimationData*>, bool> */ __um(ValidFurnitureCache);    // 0x03E0   (0x0050)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0430   (0x0010)  MISSED
	class UAISettings_Furniture*                       AISettings;                                                 // 0x0440   (0x0008)  
	class UAISettings_Furniture*                       AISettingsInfiniteDuration;                                 // 0x0448   (0x0008)  
	bool                                               bAllowOffNavMesh;                                           // 0x0450   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0451   (0x0007)  MISSED
	class AActor*                                      TurretTrack;                                                // 0x0458   (0x0008)  
	int32_t                                            TurretTrackValidationDivisions;                             // 0x0460   (0x0004)  
	float                                              AllowedAngleDeviationFromTrack;                             // 0x0464   (0x0004)  
	float                                              AllowedDistanceDeviationFromTrack;                          // 0x0468   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x046C   (0x0004)  MISSED
};

/// Class /Script/Indiana.Gadget
/// Size: 0x0150 (336 bytes) (0x000118 - 0x000150) align 8 MaxSize: 0x0150
class UGadget : public UItem
{ 
public:
	TWeakObjectPtr<class UObject*>                     ItemMesh;                                                   // 0x0118   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0120   (0x0020)  MISSED
	class UClass*                                      Spell;                                                      // 0x0140   (0x0008)  
	FGameplayTag                                       GadgetTag;                                                  // 0x0148   (0x0008)  
};

/// Class /Script/Indiana.GameCalendar
/// Size: 0x00E0 (224 bytes) (0x000030 - 0x0000E0) align 8 MaxSize: 0x00E0
class UGameCalendar : public UObject
{ 
public:
	SDK_UNDEFINED(16,525) /* FMulticastInlineDelegate */ __um(OnPhaseOfDayChanged);                                // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0xA0];                                      // 0x0040   (0x00A0)  MISSED


	/// Functions
	// Function /Script/Indiana.GameCalendar.RequestUnpauseTime
	// void RequestUnpauseTime(FName& RequestContext);                                                                          // [0x182dd20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.RequestPauseTime
	// void RequestPauseTime(FName& RequestContext);                                                                            // [0x182dc90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.LockCalendar
	// void LockCalendar(bool Block);                                                                                           // [0x182d7c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.K2_SetupDelayedCallback
	// void K2_SetupDelayedCallback(class UObject* WorldContextObject, FDelegateProperty& EventToDelay, float SecondsToDelay);  // [0x182d690] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_RegisterNamedTimestamp
	// void K2_RegisterNamedTimestamp(FString TimestampName);                                                                   // [0x182d5e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_IsTimeSlice
	// bool K2_IsTimeSlice(int32_t StartHour, int32_t EndHour);                                                                 // [0x182d4e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.GameCalendar.K2_IsPhaseOfDay
	// bool K2_IsPhaseOfDay(EPhaseOfDay Phase);                                                                                 // [0x182d440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.GameCalendar.K2_HaveMinutesElapsedSinceNamedTimestamp
	// bool K2_HaveMinutesElapsedSinceNamedTimestamp(FString TimestampName, int32_t Minutes);                                   // [0x182d330] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_HaveHoursElapsedSinceNamedTimestamp
	// bool K2_HaveHoursElapsedSinceNamedTimestamp(FString TimestampName, int32_t Hours);                                       // [0x182d220] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_HaveDaysElapsedSinceNamedTimestamp
	// bool K2_HaveDaysElapsedSinceNamedTimestamp(FString TimestampName, int32_t Days);                                         // [0x182d110] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_GetRawHour
	// float K2_GetRawHour();                                                                                                   // [0x182d0e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.GameCalendar.K2_GetNormalizedTime
	// float K2_GetNormalizedTime();                                                                                            // [0x182d0b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.GameCalendar.K2_ClearNamedTimestamp
	// void K2_ClearNamedTimestamp(FString TimestampName);                                                                      // [0x182d000] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceToHour
	// void K2_AdvanceToHour(int32_t TargetHour);                                                                               // [0x182cf50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceTime
	// void K2_AdvanceTime(float Days, float Hours, float Minutes, float Seconds);                                              // [0x182cd90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceSeconds
	// void K2_AdvanceSeconds(float Seconds);                                                                                   // [0x182ccf0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceMinutes
	// void K2_AdvanceMinutes(float Minutes);                                                                                   // [0x182cc50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceHours
	// void K2_AdvanceHours(float Hours);                                                                                       // [0x182cbb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceDays
	// void K2_AdvanceDays(float Days);                                                                                         // [0x182cb10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.ForceWeatherStart
	// void ForceWeatherStart();                                                                                                // [0x182caf0] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.ForceWeatherEnd
	// void ForceWeatherEnd();                                                                                                  // [0x182cad0] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceToHour
	// void AdvanceToHour(float TargetHour);                                                                                    // [0x182c960] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceTime
	// void AdvanceTime(float Days, float Hours, float Minutes, float Seconds);                                                 // [0x182c800] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceSeconds
	// void AdvanceSeconds(float Seconds);                                                                                      // [0x182c780] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceMinutes
	// void AdvanceMinutes(float Minutes);                                                                                      // [0x182c700] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceHours
	// void AdvanceHours(float Hours);                                                                                          // [0x182c680] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceDays
	// void AdvanceDays(float Days);                                                                                            // [0x182c600] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.KeyHoldActionBase
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align 8 MaxSize: 0x0068
class UKeyHoldActionBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0030   (0x0038)  MISSED
};

/// Class /Script/Indiana.StandardKeyHoldAction
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align 8 MaxSize: 0x0078
class UStandardKeyHoldAction : public UKeyHoldActionBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0068   (0x0010)  MISSED
};

/// Class /Script/Indiana.IndexedReleaseKeyHoldAction
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align 8 MaxSize: 0x0078
class UIndexedReleaseKeyHoldAction : public UKeyHoldActionBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0068   (0x0010)  MISSED
};

/// Class /Script/Indiana.DoubleClickKeyHoldAction
/// Size: 0x0090 (144 bytes) (0x000068 - 0x000090) align 8 MaxSize: 0x0090
class UDoubleClickKeyHoldAction : public UKeyHoldActionBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0068   (0x0028)  MISSED
};

/// Class /Script/Indiana.IndianaInputComponent
/// Size: 0x01A0 (416 bytes) (0x000170 - 0x0001A0) align 8 MaxSize: 0x01A0
class UIndianaInputComponent : public UInputComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0170   (0x0030)  MISSED
};

/// Class /Script/Indiana.GameInputComponent
/// Size: 0x0228 (552 bytes) (0x0001A0 - 0x000228) align 8 MaxSize: 0x0228
class UGameInputComponent : public UIndianaInputComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x70];                                      // 0x01A0   (0x0070)  MISSED
	TArray<class UKeyHoldActionBase*>                  KeyHoldActions;                                             // 0x0210   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0220   (0x0008)  MISSED
};

/// Class /Script/Indiana.GammaSelectionWidget
/// Size: 0x0370 (880 bytes) (0x000308 - 0x000370) align 8 MaxSize: 0x0370
class UGammaSelectionWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0308   (0x0020)  MISSED
	class UWaitTimeSliderWidget*                       GammaSlider;                                                // 0x0328   (0x0008)  
	class UTextBlockBase*                              GammaValueTextBlock;                                        // 0x0330   (0x0008)  
	class UButtonBase*                                 AcceptButton;                                               // 0x0338   (0x0008)  
	class UButtonBase*                                 DefaultButton;                                              // 0x0340   (0x0008)  
	class UTextBlockBase*                              DescriptionTextBlock;                                       // 0x0348   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0350   (0x0008)  
	class UHorizontalBox*                              InputLabelsHorizontalBox;                                   // 0x0358   (0x0008)  
	class UClass*                                      GammaSettingClassRef;                                       // 0x0360   (0x0008)  
	class UUserSettingFloat*                           GammaSetting;                                               // 0x0368   (0x0008)  


	/// Functions
	// Function /Script/Indiana.GammaSelectionWidget.OnRestoreDefaults
	// void OnRestoreDefaults();                                                                                                // [0x182db10] Final|Native|Protected 
	// Function /Script/Indiana.GammaSelectionWidget.OnLocStringChanged
	// void OnLocStringChanged();                                                                                               // [0x182da70] Final|Native|Protected 
	// Function /Script/Indiana.GammaSelectionWidget.OnGammaChanged
	// void OnGammaChanged(FSliderEvent& Event);                                                                                // [0x182d8d0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.GammaSelectionWidget.OnGammaAccepted
	// void OnGammaAccepted();                                                                                                  // [0x182d8b0] Final|Native|Protected 
	// Function /Script/Indiana.GammaSelectionWidget.ApplyDefaults
	// void ApplyDefaults();                                                                                                    // [0x182c9e0] Final|Native|Protected 
};

/// Class /Script/Indiana.GDKDLCManager
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UGDKDLCManager : public UDLCManager
{ 
public:
};

/// Class /Script/Indiana.GeneralButtonWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UGeneralButtonWidget : public UIndianaUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0300   (0x0008)  
	class UTextBlockBase*                              TextBlock;                                                  // 0x0308   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0310   (0x0008)  
};

/// Class /Script/Indiana.GenericCollapsableListContainer
/// Size: 0x0310 (784 bytes) (0x000300 - 0x000310) align 8 MaxSize: 0x0310
class UGenericCollapsableListContainer : public UIndianaUserWidget
{ 
public:
	class UVerticalBox*                                ListVerticalBox;                                            // 0x0300   (0x0008)  
	class UClass*                                      ListWidgetClass;                                            // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.GenericListEntryWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UGenericListEntryWidget : public UIndianaUserWidget
{ 
public:
	FLocString                                         NameLocString;                                              // 0x0300   (0x0008)  
	FLocString                                         DescriptionLocString;                                       // 0x0308   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0310   (0x0008)  
	class UImage*                                      ValueIcon;                                                  // 0x0318   (0x0008)  
	class UTextBlockBase*                              ValueTextBlock;                                             // 0x0320   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0328   (0x0008)  
};

/// Class /Script/Indiana.GenericLogicDataAsset
/// Size: 0x00C0 (192 bytes) (0x000038 - 0x0000C0) align 8 MaxSize: 0x00C0
class UGenericLogicDataAsset : public ULogicalExpressionBaseDataAsset
{ 
public:
	FString                                            Comment;                                                    // 0x0038   (0x0010)  
	FLogicalGroupedExpression                          Conditions;                                                 // 0x0048   (0x0078)  
};

/// Class /Script/Indiana.GenericNotificationEntryWidget
/// Size: 0x0440 (1088 bytes) (0x000300 - 0x000440) align 8 MaxSize: 0x0440
class UGenericNotificationEntryWidget : public UIndianaUserWidget
{ 
public:
	class UBorder*                                     AnimationContainer;                                         // 0x0300   (0x0008)  
	class UImage*                                      TargetImage;                                                // 0x0308   (0x0008)  
	class UImage*                                      TargetImage0;                                               // 0x0310   (0x0008)  
	class UInputLabelWidget*                           InputInstruction;                                           // 0x0318   (0x0008)  
	class UInputLabelWidget*                           InputInstruction1;                                          // 0x0320   (0x0008)  
	class UInputLabelWidget*                           InputInstruction2;                                          // 0x0328   (0x0008)  
	class UInputLabelWidget*                           InputInstruction3;                                          // 0x0330   (0x0008)  
	class UInputLabelWidget*                           InputInstruction4;                                          // 0x0338   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0340   (0x0020)  MISSED
	class UTextBlockBase*                              EntryTextBlock;                                             // 0x0360   (0x0008)  
	unsigned char                                      UnknownData01_7[0xD8];                                      // 0x0368   (0x00D8)  MISSED


	/// Functions
	// Function /Script/Indiana.GenericNotificationEntryWidget.PrepareNextMessage
	// void PrepareNextMessage();                                                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationEntryWidget.PrepareNewMessage
	// void PrepareNewMessage();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationEntryWidget.OnStickLayoutChanged
	// void OnStickLayoutChanged(int32_t NewValue);                                                                             // [0x182dc00] Final|Native|Protected 
	// Function /Script/Indiana.GenericNotificationEntryWidget.OnFadeOutComplete
	// void OnFadeOutComplete();                                                                                                // [0x182d870] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.GenericNotificationEntryWidget.OnFadeInComplete
	// void OnFadeInComplete();                                                                                                 // [0x182d850] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.GenericNotificationWidget
/// Size: 0x0460 (1120 bytes) (0x000300 - 0x000460) align 8 MaxSize: 0x0460
class UGenericNotificationWidget : public UIndianaUserWidget
{ 
public:
	class UBorder*                                     MainBorder;                                                 // 0x0300   (0x0008)  
	class UGenericNotificationEntryWidget*             EntryWidget;                                                // 0x0308   (0x0008)  
	class USizeBox*                                    ContentSizeBox;                                             // 0x0310   (0x0008)  
	float                                              ContentResizeInterpExponent;                                // 0x0318   (0x0004)  
	float                                              AnimationDuration;                                          // 0x031C   (0x0004)  
	float                                              ContentVerticalPadding;                                     // 0x0320   (0x0004)  
	int32_t                                            GenericLogBackingMaterialSize;                              // 0x0324   (0x0004)  
	int32_t                                            MaterialPaddingModifier;                                    // 0x0328   (0x0004)  
	unsigned char                                      UnknownData00_6[0x64];                                      // 0x032C   (0x0064)  MISSED
	ENotificationState                                 CurrentState;                                               // 0x0390   (0x0001)  
	unsigned char                                      UnknownData01_7[0xCF];                                      // 0x0391   (0x00CF)  MISSED


	/// Functions
	// Function /Script/Indiana.GenericNotificationWidget.TriggerFadeOut
	// void TriggerFadeOut();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationWidget.TriggerFadeIn
	// void TriggerFadeIn();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationWidget.SetBackingMaterialHeight
	// void SetBackingMaterialHeight(float NewHeight);                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationWidget.OnSaveGameComplete
	// void OnSaveGameComplete(ESaveGameResult SaveResult, ESaveGameType SaveGameType);                                         // [0x182db30] Final|Native|Protected 
	// Function /Script/Indiana.GenericNotificationWidget.OnNotificationDurationChanged
	// void OnNotificationDurationChanged(float NotificationTime);                                                              // [0x182da90] Final|Native|Protected 
	// Function /Script/Indiana.GenericNotificationWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x182d9e0] Final|Native|Protected 
	// Function /Script/Indiana.GenericNotificationWidget.OnFadeOutComplete
	// void OnFadeOutComplete();                                                                                                // [0x182d890] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.GhostNavMesh
/// Size: 0x02D0 (720 bytes) (0x0002B8 - 0x0002D0) align 8 MaxSize: 0x02D0
class AGhostNavMesh : public AActor
{ 
public:
	class USceneComponent*                             SceneComponent;                                             // 0x02B8   (0x0008)  
	class UGhostNavMeshComponent*                      GhostNavMeshComponent;                                      // 0x02C0   (0x0008)  
	class UBoxComponent*                               NavModifierVolume;                                          // 0x02C8   (0x0008)  
};

/// Class /Script/Indiana.GhostNavMeshComponent
/// Size: 0x0590 (1424 bytes) (0x000590 - 0x000590) align 16 MaxSize: 0x0590
class UGhostNavMeshComponent : public UStaticMeshComponent
{ 
public:
};

/// Struct /Script/Indiana.AchievementArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FAchievementArray
{ 
	TArray<class UAchievementDataAsset*>               Achievements;                                               // 0x0000   (0x0010)  
};

/// Class /Script/Indiana.GlobalAchievementData
/// Size: 0x0118 (280 bytes) (0x000038 - 0x000118) align 8 MaxSize: 0x0118
class UGlobalAchievementData : public UDataAsset
{ 
public:
	TArray<class UAchievementDataAsset*>               Achievements;                                               // 0x0038   (0x0010)  
	TMap<EGameDifficulty, FAchievementArray>           DifficultyAchievements;                                     // 0x0048   (0x0050)  
	class UClass*                                      PatientNStatusEffect;                                       // 0x0098   (0x0008)  
	TArray<class UClass*>                              MadScientistStatusEffects;                                  // 0x00A0   (0x0010)  
	int32_t                                            NumMadScientSENeeded;                                       // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	class UBrandDataAsset*                             Brand;                                                      // 0x00B8   (0x0008)  
	TArray<class UClass*>                              SharpDressedItems;                                          // 0x00C0   (0x0010)  
	int32_t                                            NumDamageTypesOnDeath;                                      // 0x00D0   (0x0004)  
	float                                              FactionThreshold;                                           // 0x00D4   (0x0004)  
	int32_t                                            NumMaxedFactions;                                           // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	TArray<class UHeroStat*>                           HeroStats;                                                  // 0x00E0   (0x0010)  
	class UPresenceData*                               DefaultPresenceData;                                        // 0x00F0   (0x0008)  
	TArray<FString>                                    SpecialPETBenefitsWeapons;                                  // 0x00F8   (0x0010)  
	TArray<FString>                                    UdderGatlingNeedlerWeapons;                                 // 0x0108   (0x0010)  
};

/// Struct /Script/Indiana.AIEventTypeMapElement
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FAIEventTypeMapElement
{ 
	FGameplayTag                                       Event;                                                      // 0x0000   (0x0008)  
	EAIEventType                                       EventType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Indiana.WeaponAISettingsMapElement
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FWeaponAISettingsMapElement
{ 
	FGameplayTag                                       WeaponType;                                                 // 0x0000   (0x0008)  
	class UAISettings_Weapon*                          WeaponSettings;                                             // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.LostTargetTimes
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FLostTargetTimes
{ 
	float                                              RangedInitiallyUnseenTime;                                  // 0x0000   (0x0004)  
	float                                              RangedInitiallySeenTime;                                    // 0x0004   (0x0004)  
	float                                              CoverInitiallyUnseenTime;                                   // 0x0008   (0x0004)  
	float                                              CoverInitiallySeenTime;                                     // 0x000C   (0x0004)  
};

/// Struct /Script/Indiana.DisablePriorityMapElement
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FDisablePriorityMapElement
{ 
	FGameplayTag                                       DisableType;                                                // 0x0000   (0x0008)  
	EDisablePriority                                   Priority;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Indiana.CompanionFollowSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 MaxSize: 0x0001
struct FCompanionFollowSettings
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Indiana.CompanionCommmandMoveToSettings
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 MaxSize: 0x0004
struct FCompanionCommmandMoveToSettings
{ 
	float                                              WalkDistanceThreshold;                                      // 0x0000   (0x0004)  
};

/// Struct /Script/Indiana.CompanionCommmandSettings
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FCompanionCommmandSettings
{ 
	float                                              Duration;                                                   // 0x0000   (0x0004)  
	float                                              LostTargetTime;                                             // 0x0004   (0x0004)  
};

/// Struct /Script/Indiana.NavigationBlockDetectionSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FNavigationBlockDetectionSettings
{ 
	float                                              BlockDetectionDistance;                                     // 0x0000   (0x0004)  
	float                                              BlockDetectionInterval;                                     // 0x0004   (0x0004)  
	int32_t                                            BlockDetectionSampleCount;                                  // 0x0008   (0x0004)  
	float                                              BlockDestinationCheckDistance;                              // 0x000C   (0x0004)  
	float                                              BlockDestinationSampleInterval;                             // 0x0010   (0x0004)  
};

/// Struct /Script/Indiana.NavigationBlockedSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 MaxSize: 0x0018
struct FNavigationBlockedSettings
{ 
	float                                              BlockDistance;                                              // 0x0000   (0x0004)  
	float                                              BlockHeadingCosineAngle;                                    // 0x0004   (0x0004)  
	float                                              BlockDeltaCosineAngle;                                      // 0x0008   (0x0004)  
	float                                              MinBlockTime;                                               // 0x000C   (0x0004)  
	float                                              MaxBlockTime;                                               // 0x0010   (0x0004)  
	float                                              NoBlockerTime;                                              // 0x0014   (0x0004)  
};

/// Struct /Script/Indiana.NavigationBumpSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FNavigationBumpSettings
{ 
	float                                              MaxBumpSpeed;                                               // 0x0000   (0x0004)  
	float                                              PostOverlapBumpTime;                                        // 0x0004   (0x0004)  
	float                                              BumperBlockedTime;                                          // 0x0008   (0x0004)  
};

/// Struct /Script/Indiana.NavigationJumpSettings
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FNavigationJumpSettings
{ 
	float                                              MaxJumpDistance;                                            // 0x0000   (0x0004)  
	float                                              MaxJumpHeight;                                              // 0x0004   (0x0004)  
};

/// Struct /Script/Indiana.GameTimespan
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FGameTimespan
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Indiana.SpellSet
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FSpellSet
{ 
	SDK_UNDEFINED(80,526) /* TSet<UClass*> */          __um(SpellTypes);                                           // 0x0000   (0x0050)  
};

/// Struct /Script/Indiana.MinMaxChatterTime
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FMinMaxChatterTime
{ 
	float                                              Min;                                                        // 0x0000   (0x0004)  
	float                                              Max;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Indiana.ChatterEventRestrictedCharacterGroups
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FChatterEventRestrictedCharacterGroups
{ 
	SDK_UNDEFINED(80,527) /* TSet<ECharacterGrouping> */ __um(Values);                                             // 0x0000   (0x0050)  
};

/// Struct /Script/Indiana.InvestigationSettings
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 MaxSize: 0x003C
struct FInvestigationSettings
{ 
	float                                              MinInitialWaitTime;                                         // 0x0000   (0x0004)  
	float                                              MaxInitialWaitTime;                                         // 0x0004   (0x0004)  
	float                                              EndWaitTime;                                                // 0x0008   (0x0004)  
	float                                              WatchTeammateTime;                                          // 0x000C   (0x0004)  
	float                                              MinArrivalRadius;                                           // 0x0010   (0x0004)  
	float                                              MaxArrivalRadius;                                           // 0x0014   (0x0004)  
	float                                              StimulusUpdateWaitTime;                                     // 0x0018   (0x0004)  
	float                                              StimulusUpdateMinDuration;                                  // 0x001C   (0x0004)  
	float                                              ExitChatterTriggerTime;                                     // 0x0020   (0x0004)  
	float                                              TeammateDistance;                                           // 0x0024   (0x0004)  
	FAISettingsWander                                  DeadBodyWanderSearchSettings;                               // 0x0028   (0x0014)  
};

/// Struct /Script/Indiana.PseudoGodModeSettings
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 MaxSize: 0x0004
struct FPseudoGodModeSettings
{ 
	float                                              MinimumHealthPercentage;                                    // 0x0000   (0x0004)  
};

/// Class /Script/Indiana.GlobalAIData
/// Size: 0x0AC8 (2760 bytes) (0x000038 - 0x000AC8) align 8 MaxSize: 0x0AC8
class UGlobalAIData : public UDataAsset
{ 
public:
	class UBlackboardData*                             DefaultBlackboard;                                          // 0x0038   (0x0008)  
	TMap<EBehaviorState, class UBehaviorTree*>         BehaviorTreeMap;                                            // 0x0040   (0x0050)  
	class UDecisionTreeDesignerDataBundle*             DefaultDecisionTreeData;                                    // 0x0090   (0x0008)  
	class UDecisionTreeDesignerDataBundle*             DefaultCompanionDecisionTreeData;                           // 0x0098   (0x0008)  
	class UDecisionTreeDesignerDataBundle*             DefaultPacifistDecisionTreeData;                            // 0x00A0   (0x0008)  
	TArray<FAIEventTypeMapElement>                     AIEventTypes;                                               // 0x00A8   (0x0010)  
	TMap<FName, EAIEventType>                          AIEventTypeMap;                                             // 0x00B8   (0x0050)  
	class UAISettings_Weapon*                          BackupWeaponAISettings;                                     // 0x0108   (0x0008)  
	TArray<FWeaponAISettingsMapElement>                DefaultWeaponAISettings;                                    // 0x0110   (0x0010)  
	float                                              CoverWalkingDistanceThreshold;                              // 0x0120   (0x0004)  
	float                                              AdapativeRootmotionNPCScalar;                               // 0x0124   (0x0004)  
	float                                              CalledShotAdaptiveRootMotionStopDistance;                   // 0x0128   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x012C   (0x0004)  MISSED
	TArray<EMeleeAction>                               LungeActions;                                               // 0x0130   (0x0010)  
	TMap<FGameplayTag, class UAISettings_Weapon*>      DefaultWeaponAISettingsMap;                                 // 0x0140   (0x0050)  
	float                                              ElongatedCharacterLostTimePadding;                          // 0x0190   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0194   (0x0004)  MISSED
	TMap<ELostTargetWaitTime, FLostTargetTimes>        LostTargetTimesMap;                                         // 0x0198   (0x0050)  
	TMap<ESuppressingFireDuration, float>              SuppressingFireTimesMap;                                    // 0x01E8   (0x0050)  
	float                                              SuppressionObstacleMinDistance;                             // 0x0238   (0x0004)  
	float                                              SuppressionObstacleTargetDistance;                          // 0x023C   (0x0004)  
	float                                              SuppressionObstacleMinRatio;                                // 0x0240   (0x0004)  
	FAISettings_RangedPositioning                      PositioningProbabilities;                                   // 0x0244   (0x0030)  
	float                                              WeaponSwitchCooldown;                                       // 0x0274   (0x0004)  
	float                                              MeleeKiteTime;                                              // 0x0278   (0x0004)  
	float                                              UnreachableTargetTime;                                      // 0x027C   (0x0004)  
	float                                              UnreachableTargetOptimizationTime;                          // 0x0280   (0x0004)  
	float                                              TooCloseForRangeDistanceSearch;                             // 0x0284   (0x0004)  
	float                                              TooCloseForRangeDistanceChange;                             // 0x0288   (0x0004)  
	int32_t                                            NumMeleeSlottedRings;                                       // 0x028C   (0x0004)  
	int32_t                                            NumPointsPerMeleeSlottedRing;                               // 0x0290   (0x0004)  
	int32_t                                            MaxMeleeSlots;                                              // 0x0294   (0x0004)  
	float                                              MeleeSlotMovementDistanceThreshold;                         // 0x0298   (0x0004)  
	float                                              MeleeSlotBubbleSize;                                        // 0x029C   (0x0004)  
	float                                              MeleeSlotStationaryDuration;                                // 0x02A0   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02A4   (0x0004)  MISSED
	class UEQSRequest_IndianaBase*                     FindMeleeSlotRequest;                                       // 0x02A8   (0x0008)  
	class UEQSRequest_IndianaBase*                     FindMeleeWaitRequest;                                       // 0x02B0   (0x0008)  
	TArray<FDisablePriorityMapElement>                 DisablePriorities;                                          // 0x02B8   (0x0010)  
	FGameplayTag                                       CowerDisableType;                                           // 0x02C8   (0x0008)  
	class UClass*                                      ShockSpell_CompanionCalledShotAOE;                          // 0x02D0   (0x0008)  
	class UClass*                                      ShockSpell_CompanionCalledShotTarget;                       // 0x02D8   (0x0008)  
	class UClass*                                      ShockSpell_KillCamAOE;                                      // 0x02E0   (0x0008)  
	TMap<FGameplayTag, EDisablePriority>               DisablePriorityMap;                                         // 0x02E8   (0x0050)  
	float                                              CompanionResurrectDelay;                                    // 0x0338   (0x0004)  
	float                                              CompanionDeathPartyRemovalDelay;                            // 0x033C   (0x0004)  
	float                                              CompanionCombatDelay;                                       // 0x0340   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0344   (0x0004)  MISSED
	class UAISettings_Behavior*                        CompanionDefaultBehavior;                                   // 0x0348   (0x0008)  
	float                                              CanOpenDoorsStealthDelay;                                   // 0x0350   (0x0004)  
	float                                              EnterStealthMinDelay;                                       // 0x0354   (0x0004)  
	float                                              EnterStealthMaxDelay;                                       // 0x0358   (0x0004)  
	float                                              ExitStealthMinDelay;                                        // 0x035C   (0x0004)  
	float                                              ExitStealthMaxDelay;                                        // 0x0360   (0x0004)  
	FCompanionFollowSettings                           CompanionFollowSettings;                                    // 0x0364   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0365   (0x0003)  MISSED
	FCompanionCommmandMoveToSettings                   CompanionCommandMoveToSettings;                             // 0x0368   (0x0004)  
	FCompanionCommmandSettings                         CompanionCommandSuppressSettings;                           // 0x036C   (0x0008)  
	FCompanionCommmandSettings                         CompanionCommandFlankSettings;                              // 0x0374   (0x0008)  
	FCompanionCommmandSettings                         CompanionCommandHunkerDownSettings;                         // 0x037C   (0x0008)  
	float                                              MinWalkSpeed;                                               // 0x0384   (0x0004)  
	float                                              MaxWalkSpeed;                                               // 0x0388   (0x0004)  
	float                                              MinRunSpeed;                                                // 0x038C   (0x0004)  
	float                                              MaxRunSpeed;                                                // 0x0390   (0x0004)  
	float                                              CatchUpTimeForCurrentMaxSpeed;                              // 0x0394   (0x0004)  
	float                                              MaxRunSpeedTransitionDistance;                              // 0x0398   (0x0004)  
	float                                              MaxWalkSpeedTransitionDistance;                             // 0x039C   (0x0004)  
	float                                              SpeedAtMaxDistance;                                         // 0x03A0   (0x0004)  
	float                                              MaxDistance;                                                // 0x03A4   (0x0004)  
	float                                              MinMovingShuffleDistance;                                   // 0x03A8   (0x0004)  
	float                                              StuckTime;                                                  // 0x03AC   (0x0004)  
	float                                              MinAcceptanceRadius;                                        // 0x03B0   (0x0004)  
	float                                              MinAcceptanceHalfHeight;                                    // 0x03B4   (0x0004)  
	class UClass*                                      HearingNavigationFilterClass;                               // 0x03B8   (0x0008)  
	class UClass*                                      PlayerCompanionNavigationFilterClass;                       // 0x03C0   (0x0008)  
	class UClass*                                      PlayerCompanionEQSNavigationFilterClass;                    // 0x03C8   (0x0008)  
	FNavigationBlockDetectionSettings                  BlockDetectionSettings;                                     // 0x03D0   (0x0014)  
	FNavigationBlockedSettings                         BlockedSettings;                                            // 0x03E4   (0x0018)  
	FNavigationBumpSettings                            BumpSettings;                                               // 0x03FC   (0x000C)  
	FNavigationJumpSettings                            JumpSettings;                                               // 0x0408   (0x0008)  
	FGameTimespan                                      PlayerFirstMeleeHitTimeThreshold;                           // 0x0410   (0x0008)  
	float                                              DefensiveActionAttackHalfAngle;                             // 0x0418   (0x0004)  
	float                                              DodgeClearPathDistanceScalar;                               // 0x041C   (0x0004)  
	float                                              MinDelayDodge;                                              // 0x0420   (0x0004)  
	float                                              MaxDelayDodge;                                              // 0x0424   (0x0004)  
	float                                              MinDelayMeleeBlock;                                         // 0x0428   (0x0004)  
	float                                              MaxDelayMeleeBlock;                                         // 0x042C   (0x0004)  
	float                                              NPCAccuracySpeed;                                           // 0x0430   (0x0004)  
	float                                              TargetAcquisitionIntervalGoalTime;                          // 0x0434   (0x0004)  
	float                                              AcquisitionCalcuationDistanceTreshold;                      // 0x0438   (0x0004)  
	float                                              TargetSwitchThreatCooldown;                                 // 0x043C   (0x0004)  
	float                                              TargetSwitchThreatScalar;                                   // 0x0440   (0x0004)  
	float                                              PlayerThreatDecayTime;                                      // 0x0444   (0x0004)  
	float                                              ThreatDecayTime;                                            // 0x0448   (0x0004)  
	float                                              CurrentTargetMinThreatHealthScalar;                         // 0x044C   (0x0004)  
	float                                              PlayerThreatScalar;                                         // 0x0450   (0x0004)  
	float                                              DamageThreatScalar;                                         // 0x0454   (0x0004)  
	float                                              CloseQuarterDamageThreatScalar;                             // 0x0458   (0x0004)  
	float                                              CloseQuarterThreatRange;                                    // 0x045C   (0x0004)  
	float                                              PlayerThreatBubbleRange;                                    // 0x0460   (0x0004)  
	float                                              PlayerThreatBubbleMinThreatHealthScalar;                    // 0x0464   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0468   (0x0004)  MISSED
	FGameplayTag                                       DefaultBehaviorType;                                        // 0x046C   (0x0008)  
	float                                              InteriorTetherRadius;                                       // 0x0474   (0x0004)  
	float                                              ExteriorTetherRadius;                                       // 0x0478   (0x0004)  
	float                                              InteriorDynamicTetherRadius;                                // 0x047C   (0x0004)  
	float                                              ExteriorDynamicTetherRadius;                                // 0x0480   (0x0004)  
	float                                              InteriorForceTetherRadius;                                  // 0x0484   (0x0004)  
	float                                              ExteriorForceTetherRadius;                                  // 0x0488   (0x0004)  
	float                                              EncounterTetherRadius;                                      // 0x048C   (0x0004)  
	float                                              EncounterDynamicTetherRadius;                               // 0x0490   (0x0004)  
	float                                              MeleeTetherExtensionRadius;                                 // 0x0494   (0x0004)  
	float                                              RetreatTargetMovementThreshold;                             // 0x0498   (0x0004)  
	float                                              CombatStartFireDelay;                                       // 0x049C   (0x0004)  
	float                                              DelayedShoutChatterTime;                                    // 0x04A0   (0x0004)  
	float                                              DelayedShoutTime;                                           // 0x04A4   (0x0004)  
	float                                              InteriorShoutRadius;                                        // 0x04A8   (0x0004)  
	float                                              ExteriorShoutRadius;                                        // 0x04AC   (0x0004)  
	float                                              InteriorProxyShoutRadius;                                   // 0x04B0   (0x0004)  
	float                                              ExteriorProxyShoutRadius;                                   // 0x04B4   (0x0004)  
	float                                              InteriorIntermittentShoutRadius;                            // 0x04B8   (0x0004)  
	float                                              ExteriorIntermittentShoutRadius;                            // 0x04BC   (0x0004)  
	float                                              IntermittentShoutMinTimeBetween;                            // 0x04C0   (0x0004)  
	float                                              IntermittentShoutMaxTimeBetween;                            // 0x04C4   (0x0004)  
	float                                              InteriorOneShotDeathShoutRadius;                            // 0x04C8   (0x0004)  
	float                                              ExteriorOneShotDeathShoutRadius;                            // 0x04CC   (0x0004)  
	float                                              ProjectileWizzRadius;                                       // 0x04D0   (0x0004)  
	float                                              ProjectileWizzTimer;                                        // 0x04D4   (0x0004)  
	float                                              ProjectileWizzCooldown;                                     // 0x04D8   (0x0004)  
	float                                              EnterRestrictedAreaCombatRadius;                            // 0x04DC   (0x0004)  
	float                                              CrimeHostilityRadius;                                       // 0x04E0   (0x0004)  
	float                                              InterrogationConversationRange;                             // 0x04E4   (0x0004)  
	float                                              InterrogationFleeMovingDistanceThreshold;                   // 0x04E8   (0x0004)  
	float                                              InterrogationFleeTimeThreshold;                             // 0x04EC   (0x0004)  
	float                                              InterrogationFleeStationaryTimeThreshold;                   // 0x04F0   (0x0004)  
	float                                              InterrogationFleeSprintTimeBuffer;                          // 0x04F4   (0x0004)  
	float                                              TrespassInterrogationPlayerRelationshipClearTime;           // 0x04F8   (0x0004)  
	float                                              HostilePlayerRelationshipClearTime;                         // 0x04FC   (0x0004)  
	float                                              TrespassInterrogationCooldown;                              // 0x0500   (0x0004)  
	float                                              CrimeMemoryClearTime;                                       // 0x0504   (0x0004)  
	float                                              PostCrimeTheftDetectionTime;                                // 0x0508   (0x0004)  
	float                                              FriendlyFireDamagePercentHostilityThreshold;                // 0x050C   (0x0004)  
	int32_t                                            FriendlyFireAttackCountHostilityThreshold;                  // 0x0510   (0x0004)  
	float                                              CrimeSoundInterval;                                         // 0x0514   (0x0004)  
	float                                              DirectDamageCombatFadeTime;                                 // 0x0518   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x051C   (0x0004)  MISSED
	FRuntimeFloatCurve                                 BlindSpreadCurve;                                           // 0x0520   (0x0088)  
	FSpellSet                                          PassiveSpellSet;                                            // 0x05A8   (0x0050)  
	FSpellSet                                          CompanionPassiveSpellSet;                                   // 0x05F8   (0x0050)  
	float                                              PostCombatUnequipDelayTimeMin;                              // 0x0648   (0x0004)  
	float                                              PostCombatUnequipDelayTimeMax;                              // 0x064C   (0x0004)  
	class UAISettings_Idle*                            DefaultIdleSettings;                                        // 0x0650   (0x0008)  
	class UAISettings_Wander*                          DefaultWanderSettings;                                      // 0x0658   (0x0008)  
	class UAISettings_FollowPlayer*                    DefaultFollowPlayerSettings;                                // 0x0660   (0x0008)  
	class UWaitAction*                                 PatrolWaitForOrientAction;                                  // 0x0668   (0x0008)  
	float                                              IdleTalkRange;                                              // 0x0670   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0674   (0x0004)  MISSED
	TMap<EMoraleContribution, float>                   MoraleContributionMap;                                      // 0x0678   (0x0050)  
	TMap<EThirdPersonSocket, FName>                    ThirdPersonSockets;                                         // 0x06C8   (0x0050)  
	float                                              ThreatenedCowerTime;                                        // 0x0718   (0x0004)  
	float                                              MaxFleeDistance;                                            // 0x071C   (0x0004)  
	float                                              CowerProximityExtraTime;                                    // 0x0720   (0x0004)  
	float                                              CowerMinTime;                                               // 0x0724   (0x0004)  
	float                                              ChatterLowHealthPercentage;                                 // 0x0728   (0x0004)  
	float                                              ChatterStealthCloseDistance;                                // 0x072C   (0x0004)  
	float                                              MaxSquadMemberDistance;                                     // 0x0730   (0x0004)  
	float                                              SquadChatterProbability;                                    // 0x0734   (0x0004)  
	float                                              ChatterAllyDeathDistance;                                   // 0x0738   (0x0004)  
	float                                              ChatterAllyDeathPostCombatTime;                             // 0x073C   (0x0004)  
	float                                              ChatterFallingTriggerTime;                                  // 0x0740   (0x0004)  
	float                                              ChatterFallLandedDistance;                                  // 0x0744   (0x0004)  
	float                                              ChatterThreatenedTriggerTime;                               // 0x0748   (0x0004)  
	float                                              ChatterPerfectDisguiseTriggerTime;                          // 0x074C   (0x0004)  
	float                                              ChatterPerfectDisguiseTriggerRadius;                        // 0x0750   (0x0004)  
	int32_t                                            ChatterEasyCombatLevelDifference;                           // 0x0754   (0x0004)  
	int32_t                                            ChatterHardCombatLevelDifference;                           // 0x0758   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x075C   (0x0004)  MISSED
	FGameplayTagContainer                              SquadChatterCreatureTypes;                                  // 0x0760   (0x0020)  
	TMap<ECompanionCommand, EChatterEventType>         CompanionCommandToChatter;                                  // 0x0780   (0x0050)  
	TMap<EChatterEventType, FMinMaxChatterTime>        ChatterDelayTimes;                                          // 0x07D0   (0x0050)  
	float                                              ChatterGrazeHitArmorDamageReductionPercentTreshold;         // 0x0820   (0x0004)  
	float                                              ChatterGrazeHitArmorDamageScalarThreshold;                  // 0x0824   (0x0004)  
	float                                              ChatterGrazeHitHealthReductionPercentMaximum;               // 0x0828   (0x0004)  
	float                                              ChatterGrazeHitRangedMultiShotDamageMultiplier;             // 0x082C   (0x0004)  
	float                                              ChatterPersonalSpacePostConversationDelay;                  // 0x0830   (0x0004)  
	float                                              ChatterCompanionAttackWarningSideHalfAngle;                 // 0x0834   (0x0004)  
	float                                              ChatterCompanionAttackWarningDelay;                         // 0x0838   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x083C   (0x0004)  MISSED
	TMap<ECreatureXPType, int32_t>                     ChatterCompanionAttackWarningCreatureXPLevelDiffs;          // 0x0840   (0x0050)  
	TMap<EDeathType, FGameplayTagContainer>            ChatterCreatureDeathTypeRestrictions;                       // 0x0890   (0x0050)  
	TMap<EChatterEventType, FChatterEventRestrictedCharacterGroups> ChatterEventCharacterGroupingRestrictions;     // 0x08E0   (0x0050)  
	SDK_UNDEFINED(80,528) /* TSet<EMeleeAction> */     __um(ChatterMeleeActions);                                  // 0x0930   (0x0050)  
	SDK_UNDEFINED(80,529) /* TSet<EChatterEventType> */ __um(ChatterEventsAllowedAfterPlayerDeath);                // 0x0980   (0x0050)  
	float                                              ChatterPlayerDeathActiveChatterFadeTime;                    // 0x09D0   (0x0004)  
	float                                              ChatterPlayerDeathCompanionChance;                          // 0x09D4   (0x0004)  
	FGameplayTagContainer                              ChatterPlayerDeathCreatureTypes;                            // 0x09D8   (0x0020)  
	float                                              ChatterPlayerDeathReactionDelayMin;                         // 0x09F8   (0x0004)  
	float                                              ChatterPlayerDeathReactionDelayMax;                         // 0x09FC   (0x0004)  
	FInvestigationSettings                             InvestigationSettings;                                      // 0x0A00   (0x003C)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0A3C   (0x0004)  MISSED
	TMap<EPseudoGodMode, FPseudoGodModeSettings>       PseudoGodModeMinHealthPercentageMap;                        // 0x0A40   (0x0050)  
	FAISettingsWander                                  WanderSearchSettings;                                       // 0x0A90   (0x0014)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x0AA4   (0x0004)  MISSED
	class UClass*                                      BulletClass;                                                // 0x0AA8   (0x0008)  
	TArray<class UDisguiseData*>                       Disguises;                                                  // 0x0AB0   (0x0010)  
	FLocString                                         EmployeeBenefitsRezStatusEffectName;                        // 0x0AC0   (0x0008)  
};

/// Struct /Script/Indiana.DamageTypeScalar
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FDamageTypeScalar
{ 
	TArray<class UClass*>                              DamageTypes;                                                // 0x0000   (0x0010)  
	float                                              Scalar;                                                     // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Indiana.ArmorVsDamageTypes
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FArmorVsDamageTypes
{ 
	FGameplayTag                                       ArmorType;                                                  // 0x0000   (0x0008)  
	TArray<FDamageTypeScalar>                          DamageTypeScalars;                                          // 0x0008   (0x0010)  
};

/// Class /Script/Indiana.GlobalArmorData
/// Size: 0x01C8 (456 bytes) (0x000038 - 0x0001C8) align 8 MaxSize: 0x01C8
class UGlobalArmorData : public UDataAsset
{ 
public:
	float                                              ArmorHitDegredation;                                        // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<FArmorVsDamageTypes>                        ArmorVsDamageTypes;                                         // 0x0040   (0x0010)  
	FRuntimeFloatCurve                                 NPCArmorLevelDTModifierCurve;                               // 0x0050   (0x0088)  
	FRuntimeFloatCurve                                 PlayerArmorLevelDTModifierCurve;                            // 0x00D8   (0x0088)  
	FGameplayTag                                       BodyPartTag;                                                // 0x0160   (0x0008)  
	TMap<EIndianaDamageType, class UClass*>            DamageTypes;                                                // 0x0168   (0x0050)  
	TArray<class URpgStat*>                            ArmorBonusSkills;                                           // 0x01B8   (0x0010)  
};

/// Struct /Script/Indiana.InteractAudioEvent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FInteractAudioEvent
{ 
	class UAkAudioEvent*                               OpenSound;                                                  // 0x0000   (0x0008)  
	class UAkAudioEvent*                               CloseSound;                                                 // 0x0008   (0x0008)  
};

/// Class /Script/Indiana.GlobalAudioData
/// Size: 0x0308 (776 bytes) (0x000038 - 0x000308) align 8 MaxSize: 0x0308
class UGlobalAudioData : public UDataAsset
{ 
public:
	class UAkAudioEvent*                               DefaultFootstepEvent;                                       // 0x0038   (0x0008)  
	FName                                              DefaultFootstepSocket;                                      // 0x0040   (0x0008)  
	class UAkAudioEvent*                               DefaultPickupSound;                                         // 0x0048   (0x0008)  
	class UAkAudioEvent*                               PauseEvent;                                                 // 0x0050   (0x0008)  
	class UAkAudioEvent*                               UnpauseEvent;                                               // 0x0058   (0x0008)  
	TMap<ENotifyChatterEventType, EChatterEventType>   ChatterAnimNotifyToEventMapping;                            // 0x0060   (0x0050)  
	float                                              ChatterDistanceThreshold;                                   // 0x00B0   (0x0004)  
	float                                              ChatterDefaultMaxWaitTime;                                  // 0x00B4   (0x0004)  
	int32_t                                            ChatterPerTickQueuedEventProcessLimit;                      // 0x00B8   (0x0004)  
	FName                                              MusicStateGroupName;                                        // 0x00BC   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	class UAkAudioEvent*                               MusicPlaybackEvent;                                         // 0x00C8   (0x0008)  
	class UAkAudioEvent*                               PauseMusicEvent;                                            // 0x00D0   (0x0008)  
	class UAkAudioEvent*                               ResumeMusicEvent;                                           // 0x00D8   (0x0008)  
	class UMusicTrackData*                             GameOverMusic;                                              // 0x00E0   (0x0008)  
	class UMusicTrackData*                             SkipMusic;                                                  // 0x00E8   (0x0008)  
	TMap<FString, class UMapLoadingMusicSettings*>     LoadingMusicForMaps;                                        // 0x00F0   (0x0050)  
	float                                              MusicSkipForceTransitionTime;                               // 0x0140   (0x0004)  
	FGameplayTag                                       DefaultVoicePostProcessTag;                                 // 0x0144   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x014C   (0x0004)  MISSED
	TMap<EHeadStyle, FGameplayTag>                     HeadStyleToVoicePostProcessTagMapping;                      // 0x0150   (0x0050)  
	TMap<FGameplayTag, FName>                          VoicePostProcessTagToRTPCNameMapping;                       // 0x01A0   (0x0050)  
	TMap<ETalkNodeVOAttenuationType, float>            TalkNodeVOAttenuationTypeScalingFactors;                    // 0x01F0   (0x0050)  
	TMap<FString, ETalkNodeVOAttenuationType>          PresetNameToAttenuationTypeMapping;                         // 0x0240   (0x0050)  
	TMap<FGameplayTag, FInteractAudioEvent>            InteractAudioEvents;                                        // 0x0290   (0x0050)  
	class UAkAudioEvent*                               DefaultOpenSound;                                           // 0x02E0   (0x0008)  
	class UAkAudioEvent*                               DefaultCloseSound;                                          // 0x02E8   (0x0008)  
	FName                                              AudioLogStateGroupName;                                     // 0x02F0   (0x0008)  
	FName                                              AudioLogStateActiveName;                                    // 0x02F8   (0x0008)  
	FName                                              AudioLogStateInactiveName;                                  // 0x0300   (0x0008)  
};

/// Struct /Script/Indiana.ReputationActionConsequence
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 MaxSize: 0x0018
struct FReputationActionConsequence
{ 
	EReputationType                                    ReputationType;                                             // 0x0000   (0x0001)  
	EReputationIncrementType                           IncrementType;                                              // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	int32_t                                            CustomAmount;                                               // 0x0004   (0x0004)  
	EReputationIncrementType                           TalkIncrementType;                                          // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            TalkCustomAmount;                                           // 0x000C   (0x0004)  
	EReputationIncrementType                           BribeIncrementType;                                         // 0x0010   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            BribeCustomAmount;                                          // 0x0014   (0x0004)  
};

/// Struct /Script/Indiana.ReputationElement
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FReputationElement
{ 
	int32_t                                            PositiveIndex;                                              // 0x0000   (0x0004)  
	int32_t                                            NegativeIndex;                                              // 0x0004   (0x0004)  
	class UReputationData*                             ReputationData;                                             // 0x0008   (0x0008)  
};

/// Class /Script/Indiana.GlobalFactionData
/// Size: 0x0308 (776 bytes) (0x000038 - 0x000308) align 8 MaxSize: 0x0308
class UGlobalFactionData : public UDataAsset
{ 
public:
	SDK_UNDEFINED(80,530) /* TSet<UClass*> */          __um(AllFactions);                                          // 0x0038   (0x0050)  
	float                                              ReputationIncrementLow;                                     // 0x0088   (0x0004)  
	float                                              ReputationIncrementMedium;                                  // 0x008C   (0x0004)  
	float                                              ReputationIncrementHigh;                                    // 0x0090   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	SDK_UNDEFINED(80,531) /* TMap<class UReputationData*, TEnumAsByte<ETeamAttitude>> */ __um(EmotionRelationshipMapping); // 0x0098   (0x0050)  
	TWeakObjectPtr<class UGlobalFactionData*>          DLCGlobalFactionData;                                       // 0x00E8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x00F0   (0x0020)  MISSED
	TMap<EReputationActionType, FReputationActionConsequence> ReputationActionConsequences;                        // 0x0110   (0x0050)  
	float                                              PositiveThresholds[4];                                      // 0x0160   (0x0010)  
	float                                              NegativeThresholds[4];                                      // 0x0170   (0x0010)  
	FReputationElement                                 Reputations[16];                                            // 0x0180   (0x0100)  
	unsigned char                                      UnknownData02_7[0x88];                                      // 0x0280   (0x0088)  MISSED
};

/// Class /Script/Indiana.GlobalFactionDataCollection
/// Size: 0x0100 (256 bytes) (0x000038 - 0x000100) align 8 MaxSize: 0x0100
class UGlobalFactionDataCollection : public UDataAsset
{ 
public:
	TArray<class UGlobalFactionData*>                  Sources;                                                    // 0x0038   (0x0010)  
	unsigned char                                      UnknownData00_6[0xB0];                                      // 0x0048   (0x00B0)  MISSED
	class UGlobalFactionData*                          FirstGlobalFactionData;                                     // 0x00F8   (0x0008)  
};

/// Class /Script/Indiana.GlobalItemData
/// Size: 0x0100 (256 bytes) (0x000038 - 0x000100) align 8 MaxSize: 0x0100
class UGlobalItemData : public UDataAsset
{ 
public:
	int32_t                                            PlayerItemLevelDelta;                                       // 0x0038   (0x0004)  
	int32_t                                            MaxItemLevelGreaterThanPlayer;                              // 0x003C   (0x0004)  
	class UClass*                                      WeaponPart;                                                 // 0x0040   (0x0008)  
	class UClass*                                      ArmorPart;                                                  // 0x0048   (0x0008)  
	float                                              PristineRepairChance;                                       // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	TArray<int32_t>                                    LevelAdvancementCost;                                       // 0x0058   (0x0010)  
	int32_t                                            ScienceAdvancementCostCap;                                  // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	FRuntimeFloatCurve                                 LevelAdvanceScalarCurve;                                    // 0x0070   (0x0088)  
	class UClass*                                      DisguisePrerequisiteItem;                                   // 0x00F8   (0x0008)  
};

/// Struct /Script/Indiana.NameTypeBinding
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FNameTypeBinding
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	EInputBindingType                                  BindingType;                                                // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Indiana.LinkedBinding
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FLinkedBinding
{ 
	FName                                              LinkedBindingName;                                          // 0x0000   (0x0008)  
	TArray<FNameTypeBinding>                           Bindings;                                                   // 0x0008   (0x0010)  
};

/// Struct /Script/Indiana.GamepadBindings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FGamepadBindings
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	FKey                                               OldKey;                                                     // 0x0008   (0x0018)  
	FKey                                               NewKey;                                                     // 0x0020   (0x0018)  
	float                                              NewScale;                                                   // 0x0038   (0x0004)  
	EInputBindingType                                  NewBindingType;                                             // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Struct /Script/Indiana.GamepadBindingsList
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FGamepadBindingsList
{ 
	TArray<FGamepadBindings>                           Bindings;                                                   // 0x0000   (0x0010)  
};

/// Class /Script/Indiana.GlobalKeybindsData
/// Size: 0x00E8 (232 bytes) (0x000038 - 0x0000E8) align 8 MaxSize: 0x00E8
class UGlobalKeybindsData : public UDataAsset
{ 
public:
	TArray<FLinkedBinding>                             LinkedBindings;                                             // 0x0038   (0x0010)  
	TMap<EGamepadLayoutType, FGamepadBindingsList>     GamepadBindings;                                            // 0x0048   (0x0050)  
	TMap<EStickLayoutType, FGamepadBindingsList>       LayoutBindings;                                             // 0x0098   (0x0050)  
};

/// Struct /Script/Indiana.MeleeInput
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 MaxSize: 0x0002
struct FMeleeInput
{ 
	EMeleeAction                                       PreviousAction;                                             // 0x0000   (0x0001)  
	EButtonPress                                       ButtonPress;                                                // 0x0001   (0x0001)  
};

/// Struct /Script/Indiana.MeleeAction
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 8 MaxSize: 0x00A0
struct FMeleeAction
{ 
	EMeleeAction                                       Action;                                                     // 0x0000   (0x0001)  
	EWeaponEvent                                       WeaponEvent;                                                // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<FMeleeInput>                                Input;                                                      // 0x0008   (0x0010)  
	class UForceFeedbackEffect*                        ForceFeedbackEffectOneHand;                                 // 0x0018   (0x0008)  
	class UForceFeedbackEffect*                        ForceFeedbackEffectOneHandBlocked;                          // 0x0020   (0x0008)  
	class UForceFeedbackEffect*                        ForceFeedbackEffectTwoHands;                                // 0x0028   (0x0008)  
	class UForceFeedbackEffect*                        ForceFeedbackEffectTwoHandsBlocked;                         // 0x0030   (0x0008)  
	bool                                               bClearInput;                                                // 0x0038   (0x0001)  
	bool                                               bAllowInputAtStart;                                         // 0x0039   (0x0001)  
	bool                                               bCanStartQueuedActionAtStart;                               // 0x003A   (0x0001)  
	bool                                               bStartWhenQueued;                                           // 0x003B   (0x0001)  
	bool                                               bRecoilIfBlocked;                                           // 0x003C   (0x0001)  
	bool                                               bPlayerForceFeedbackAtStart;                                // 0x003D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x003E   (0x0002)  MISSED
	float                                              DamageMultiplier;                                           // 0x0040   (0x0004)  
	float                                              CalledShotCharge;                                           // 0x0044   (0x0004)  
	EMeleeAttackType                                   AttackType;                                                 // 0x0048   (0x0001)  
	EMeleeAction                                       InterruptAction;                                            // 0x0049   (0x0001)  
	EMeleeAction                                       AutoQueuedAction;                                           // 0x004A   (0x0001)  
	unsigned char                                      UnknownData02_6[0x5];                                       // 0x004B   (0x0005)  MISSED
	SDK_UNDEFINED(80,532) /* TSet<EMeleeAction> */     __um(ChainActions);                                         // 0x0050   (0x0050)  
};

/// Class /Script/Indiana.GlobalMeleeData
/// Size: 0x00B0 (176 bytes) (0x000038 - 0x0000B0) align 8 MaxSize: 0x00B0
class UGlobalMeleeData : public UDataAsset
{ 
public:
	float                                              HoldDuration;                                               // 0x0038   (0x0004)  
	float                                              MeleeBlockRadians;                                          // 0x003C   (0x0004)  
	float                                              RangedBlockRadians;                                         // 0x0040   (0x0004)  
	float                                              PerfectBlockDuration;                                       // 0x0044   (0x0004)  
	float                                              MinAnimationSpeed;                                          // 0x0048   (0x0004)  
	float                                              MaxAnimationSpeed;                                          // 0x004C   (0x0004)  
	float                                              AttackInterruptCooldown;                                    // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	class UPhysicalMaterial*                           BlockMaterials;                                             // 0x0058   (0x0008)  
	TMap<EMeleeAction, FMeleeAction>                   MeleeActions;                                               // 0x0060   (0x0050)  
};

/// Struct /Script/Indiana.DefaultTeamRelationships
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align 8 MaxSize: 0x00F0
struct FDefaultTeamRelationships
{ 
	SDK_UNDEFINED(80,533) /* TSet<UClass*> */          __um(HostileTeams);                                         // 0x0000   (0x0050)  
	SDK_UNDEFINED(80,534) /* TSet<UClass*> */          __um(NeutralTeams);                                         // 0x0050   (0x0050)  
	SDK_UNDEFINED(80,535) /* TSet<UClass*> */          __um(FriendlyTeams);                                        // 0x00A0   (0x0050)  
};

/// Class /Script/Indiana.GlobalTeamData
/// Size: 0x01D8 (472 bytes) (0x000038 - 0x0001D8) align 8 MaxSize: 0x01D8
class UGlobalTeamData : public UDataAsset
{ 
public:
	class UClass*                                      PlayerTeam;                                                 // 0x0038   (0x0008)  
	SDK_UNDEFINED(80,536) /* TSet<UClass*> */          __um(AllTeams);                                             // 0x0040   (0x0050)  
	FDefaultTeamRelationships                          DefaultTeamRelationships;                                   // 0x0090   (0x00F0)  
	TWeakObjectPtr<class UGlobalTeamData*>             INX1TeamData;                                               // 0x0180   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0188   (0x0020)  MISSED
	TWeakObjectPtr<class UGlobalTeamData*>             INX2TeamData;                                               // 0x01A8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x01B0   (0x0028)  MISSED
};

/// Class /Script/Indiana.GlobalTeamDataCollection
/// Size: 0x0190 (400 bytes) (0x000038 - 0x000190) align 8 MaxSize: 0x0190
class UGlobalTeamDataCollection : public UDataAsset
{ 
public:
	TArray<class UGlobalTeamData*>                     Sources;                                                    // 0x0038   (0x0010)  
	unsigned char                                      UnknownData00_7[0x148];                                     // 0x0048   (0x0148)  MISSED
};

/// Struct /Script/Indiana.ActionLabelDescription
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FActionLabelDescription
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	bool                                               bDisplayKeyboard;                                           // 0x0008   (0x0001)  
	bool                                               bDisplayGamepad;                                            // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Indiana.SpecializedAmmoClasses
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FSpecializedAmmoClasses
{ 
	TArray<class UClass*>                              Classes;                                                    // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.HUDFadeSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FHUDFadeSettings
{ 
	float                                              HUDActiveTime;                                              // 0x0000   (0x0004)  
	float                                              HUDFadeInTime;                                              // 0x0004   (0x0004)  
	float                                              HUDFadeInExponent;                                          // 0x0008   (0x0004)  
	float                                              HUDFadeOutTime;                                             // 0x000C   (0x0004)  
	float                                              HUDFadeOutExponent;                                         // 0x0010   (0x0004)  
};

/// Class /Script/Indiana.GlobalUIData
/// Size: 0x0178 (376 bytes) (0x000038 - 0x000178) align 8 MaxSize: 0x0178
class UGlobalUIData : public UDataAsset
{ 
public:
	class UIndianaUIColorsData*                        GlobalUIColorsData;                                         // 0x0038   (0x0008)  
	class UIndianaLoadingScreenImageData*              LoadingScreenImageData;                                     // 0x0040   (0x0008)  
	class UIndianaTextAnimationData*                   TextAnimationData;                                          // 0x0048   (0x0008)  
	class UTutorialDataAsset*                          TutorialAssetData;                                          // 0x0050   (0x0008)  
	class UComputerTerminalHeaderData*                 ComputerTerminalHeaderData;                                 // 0x0058   (0x0008)  
	class UQuestDataAsset*                             QuestData;                                                  // 0x0060   (0x0008)  
	class UIndianaUIAudioData*                         IndianaUIAudioData;                                         // 0x0068   (0x0008)  
	class UClass*                                      RenderThreadLoadingScreenWidgetClass;                       // 0x0070   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0078   (0x0008)  MISSED
	TMap<FName, FActionLabelDescription>               ActionLabelDescriptions;                                    // 0x0080   (0x0050)  
	class UIndianaUIControllerIconsData*               PCMouseData;                                                // 0x00D0   (0x0008)  
	class UIndianaUIControllerIconsData*               XboxControllerData;                                         // 0x00D8   (0x0008)  
	class UIndianaUIControllerIconsData*               PlaystationControllerData;                                  // 0x00E0   (0x0008)  
	TMap<FGameplayTag, FSpecializedAmmoClasses>        SpecializedAmmoClasses;                                     // 0x00E8   (0x0050)  
	class UCompassEntryData*                           CompassData;                                                // 0x0138   (0x0008)  
	FString                                            ForbiddenTextEntryCharacters;                               // 0x0140   (0x0010)  
	class UIndianaDefaultButtonAudioData*              AudioActionData;                                            // 0x0150   (0x0008)  
	class UClass*                                      DefaultDummyClass;                                          // 0x0158   (0x0008)  
	FHUDFadeSettings                                   HUDFadeSettings;                                            // 0x0160   (0x0014)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0174   (0x0004)  MISSED
};

/// Class /Script/Indiana.GlobalWeaponData
/// Size: 0x01B8 (440 bytes) (0x000038 - 0x0001B8) align 8 MaxSize: 0x01B8
class UGlobalWeaponData : public UDataAsset
{ 
public:
	float                                              FineAimTime;                                                // 0x0038   (0x0004)  
	float                                              MaxCritChanceRangedWeapons;                                 // 0x003C   (0x0004)  
	float                                              MaxCritChanceMeleeWeapons;                                  // 0x0040   (0x0004)  
	float                                              MaxGrazeChanceRangedWeapons;                                // 0x0044   (0x0004)  
	float                                              MaxGrazeChanceMeleeWeapons;                                 // 0x0048   (0x0004)  
	float                                              GrazeDamageMultiplier;                                      // 0x004C   (0x0004)  
	float                                              StaminaOnKill;                                              // 0x0050   (0x0004)  
	float                                              TimeDilationMeterOnKill;                                    // 0x0054   (0x0004)  
	float                                              CompanionCommandMeterOnKill;                                // 0x0058   (0x0004)  
	float                                              CalledShotToStaminaConversionRatio;                         // 0x005C   (0x0004)  
	float                                              CalledShotMinSuccessRatio;                                  // 0x0060   (0x0004)  
	FName                                              ShootSocket;                                                // 0x0064   (0x0008)  
	FName                                              ProjectorBaseSocket;                                        // 0x006C   (0x0008)  
	FName                                              StateWidgetSocket;                                          // 0x0074   (0x0008)  
	FName                                              ProjectorEndBone;                                           // 0x007C   (0x0008)  
	FName                                              ProjectorEndSocket;                                         // 0x0084   (0x0008)  
	float                                              MeleeWeaponAttackDegradation;                               // 0x008C   (0x0004)  
	float                                              RangedWeaponQuickMeleeDegredation;                          // 0x0090   (0x0004)  
	float                                              BlockMeleeWeaponDegredation;                                // 0x0094   (0x0004)  
	float                                              BlockRangedWeaponDegredation;                               // 0x0098   (0x0004)  
	float                                              GrazePercentThreshold;                                      // 0x009C   (0x0004)  
	float                                              NRayIgnoreDTPercent;                                        // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	FRuntimeFloatCurve                                 NPCWeaponLevelDamageModifierCurve;                          // 0x00A8   (0x0088)  
	FRuntimeFloatCurve                                 PlayerWeaponLevelDamageModifierCurve;                       // 0x0130   (0x0088)  
};

/// Class /Script/Indiana.GravityStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UGravityStatusEffect : public UStatusEffect
{ 
public:
	float                                              NewGravity;                                                 // 0x0188   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x018C   (0x0004)  MISSED
};

/// Class /Script/Indiana.GravManger
/// Size: 0x02B8 (696 bytes) (0x0002B8 - 0x0002B8) align 8 MaxSize: 0x02B8
class AGravManger : public AActor
{ 
public:


	/// Functions
	// Function /Script/Indiana.GravManger.SetLowGravAmbientAudioEnabled
	// void SetLowGravAmbientAudioEnabled(bool Enabled);                                                                        // [0x1836430] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ButtonGroup
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align 8 MaxSize: 0x0068
class UButtonGroup : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0030   (0x0038)  MISSED


	/// Functions
	// Function /Script/Indiana.ButtonGroup.OnButtonUnFocused
	// void OnButtonUnFocused(class UButtonBase* Button);                                                                       // [0x1836020] Final|Native|Private 
	// Function /Script/Indiana.ButtonGroup.OnButtonFocused
	// void OnButtonFocused(class UButtonBase* Button);                                                                         // [0x1835f90] Final|Native|Private 
	// Function /Script/Indiana.ButtonGroup.CyclePreviousButton
	// void CyclePreviousButton();                                                                                              // [0x1835700] Final|Native|Private 
	// Function /Script/Indiana.ButtonGroup.CycleNextButton
	// void CycleNextButton();                                                                                                  // [0x18356e0] Final|Native|Private 
};

/// Class /Script/Indiana.TransitionGroup
/// Size: 0x00A0 (160 bytes) (0x000030 - 0x0000A0) align 8 MaxSize: 0x00A0
class UTransitionGroup : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x70];                                      // 0x0030   (0x0070)  MISSED
};

/// Class /Script/Indiana.ToggleTransitionGroup
/// Size: 0x00A0 (160 bytes) (0x0000A0 - 0x0000A0) align 8 MaxSize: 0x00A0
class UToggleTransitionGroup : public UTransitionGroup
{ 
public:
};

/// Class /Script/Indiana.ScrollingWidgetGroup
/// Size: 0x00A8 (168 bytes) (0x0000A0 - 0x0000A8) align 8 MaxSize: 0x00A8
class UScrollingWidgetGroup : public UTransitionGroup
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00A0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.ScrollingWidgetGroup.OnScrollingComplete
	// void OnScrollingComplete();                                                                                              // [0x1836180] Final|Native|Protected 
};

/// Struct /Script/Indiana.HairAppearance
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align 8 MaxSize: 0x0090
struct FHairAppearance : FAppearanceMatch
{ 
	TWeakObjectPtr<class USkeletalMesh*>               StandardMesh;                                               // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0048   (0x0020)  MISSED
	TWeakObjectPtr<class USkeletalMesh*>               CappedMesh;                                                 // 0x0068   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0070   (0x0020)  MISSED
};

/// Class /Script/Indiana.HairAppearances
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UHairAppearances : public UPrimaryDataAsset
{ 
public:
	TArray<FHairAppearance>                            HairAppearances;                                            // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.HairColor
/// Size: 0x0078 (120 bytes) (0x000038 - 0x000078) align 8 MaxSize: 0x0078
class UHairColor : public UPrimaryDataAsset
{ 
public:
	FLinearColor                                       HairRootColor;                                              // 0x0038   (0x0010)  
	FLinearColor                                       HairTipColor;                                               // 0x0048   (0x0010)  
	FLinearColor                                       HairCapColor;                                               // 0x0058   (0x0010)  
	FLinearColor                                       EyeBrowColor;                                               // 0x0068   (0x0010)  
};

/// Class /Script/Indiana.HairCustomizationWidget
/// Size: 0x0398 (920 bytes) (0x000398 - 0x000398) align 8 MaxSize: 0x0398
class UHairCustomizationWidget : public UCCCharacterCustomizationBaseWdgt
{ 
public:
};

/// Class /Script/Indiana.Hazard
/// Size: 0x0380 (896 bytes) (0x0002B8 - 0x000380) align 8 MaxSize: 0x0380
class AHazard : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x02B8   (0x0010)  MISSED
	SDK_UNDEFINED(16,537) /* FMulticastInlineDelegate */ __um(OnHazardEnabling);                                   // 0x02C8   (0x0010)  
	SDK_UNDEFINED(16,538) /* FMulticastInlineDelegate */ __um(OnHazardEnabled);                                    // 0x02D8   (0x0010)  
	SDK_UNDEFINED(16,539) /* FMulticastInlineDelegate */ __um(OnHazardDisabling);                                  // 0x02E8   (0x0010)  
	SDK_UNDEFINED(16,540) /* FMulticastInlineDelegate */ __um(OnHazardDisabled);                                   // 0x02F8   (0x0010)  
	bool                                               bEnabled;                                                   // 0x0308   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0309   (0x0007)  MISSED
	class UClass*                                      HazardEffect;                                               // 0x0310   (0x0008)  
	class UClass*                                      HazardTeam;                                                 // 0x0318   (0x0008)  
	bool                                               bIgnoreCompanions;                                          // 0x0320   (0x0001)  
	bool                                               bUseDestructionFailsafe;                                    // 0x0321   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0322   (0x0002)  MISSED
	float                                              EnableRampUpTime;                                           // 0x0324   (0x0004)  
	float                                              DisableRampDownTime;                                        // 0x0328   (0x0004)  
	float                                              EffectExpirationDuration;                                   // 0x032C   (0x0004)  
	class USceneComponent*                             SceneComponent;                                             // 0x0330   (0x0008)  
	class UStaticMeshComponent*                        CollisionStaticMeshComponent;                               // 0x0338   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0340   (0x0008)  
	bool                                               bCheckLoS;                                                  // 0x0348   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0349   (0x0007)  MISSED
	TArray<class AHazardSource*>                       ConnectedSources;                                           // 0x0350   (0x0010)  
	SDK_UNDEFINED(16,541) /* TArray<TWeakObjectPtr<AActor*>> */ __um(AffectedActors);                              // 0x0360   (0x0010)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0370   (0x0008)  MISSED
	class UIndianaNavModifierComponent*                NavModifierComponent;                                       // 0x0378   (0x0008)  


	/// Functions
	// Function /Script/Indiana.Hazard.OnActorExited
	// void OnActorExited(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1835d60] Final|Native|Public  
	// Function /Script/Indiana.Hazard.OnActorEntered
	// void OnActorEntered(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1835b40] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.Hazard.ForceSetEnabled
	// void ForceSetEnabled(bool bNewEnabled);                                                                                  // [0x1835840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Hazard.CustomUpdate
	// void CustomUpdate();                                                                                                     // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.Hazard.AttemptEnableHazard
	// void AttemptEnableHazard(bool bEnable);                                                                                  // [0x1835650] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.HazardAudioComponent
/// Size: 0x01A0 (416 bytes) (0x000150 - 0x0001A0) align 8 MaxSize: 0x01A0
class UHazardAudioComponent : public UInteractableAudioComponent
{ 
public:
	TMap<EHazardEventType, class UAkPlaySoundEventEffect*> AudioEvents;                                            // 0x0150   (0x0050)  


	/// Functions
	// Function /Script/Indiana.HazardAudioComponent.Stop
	// void Stop(EHazardEventType Type);                                                                                        // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HazardAudioComponent.Play
	// void Play(EHazardEventType Type);                                                                                        // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.HazardSource
/// Size: 0x0480 (1152 bytes) (0x000478 - 0x000480) align 8 MaxSize: 0x0480
class AHazardSource : public ADestructible
{ 
public:
	class AHazard*                                     ParentHazard;                                               // 0x0478   (0x0008)  
};

/// Struct /Script/Indiana.TrackingSetting
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FTrackingSetting
{ 
	float                                              Speed;                                                      // 0x0000   (0x0004)  
	float                                              ComfortAngle;                                               // 0x0004   (0x0004)  
	float                                              TargetDistanceThreshold;                                    // 0x0008   (0x0004)  
};

/// Class /Script/Indiana.HeadAndBodyTrackingComponent
/// Size: 0x05D8 (1496 bytes) (0x0000E0 - 0x0005D8) align 8 MaxSize: 0x05D8
class UHeadAndBodyTrackingComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x00E0   (0x0010)  MISSED
	float                                              HeadSpeed;                                                  // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	float                                              WeaponAimSpeed;                                             // 0x00F8   (0x0004)  
	float                                              WeaponAimRotationComfortAngle;                              // 0x00FC   (0x0004)  
	float                                              HeadRotationComfortAngle;                                   // 0x0100   (0x0004)  
	float                                              ConversationHeadRotationComfortAngle;                       // 0x0104   (0x0004)  
	FTrackingSetting                                   HeadSettings;                                               // 0x0108   (0x000C)  
	FTrackingSetting                                   ConversationHeadSettings;                                   // 0x0114   (0x000C)  
	FTrackingSetting                                   BarkConversationHeadSettings;                               // 0x0120   (0x000C)  
	FTrackingSetting                                   ElevatorHeadSettings;                                       // 0x012C   (0x000C)  
	float                                              BodyRotationComfortAngle;                                   // 0x0138   (0x0004)  
	float                                              ConversationActiveBodyRotationComfortAngle;                 // 0x013C   (0x0004)  
	unsigned char                                      UnknownData02_7[0x498];                                     // 0x0140   (0x0498)  MISSED


	/// Functions
	// Function /Script/Indiana.HeadAndBodyTrackingComponent.OnOccupiedElevatorChange
	// void OnOccupiedElevatorChange(class AElevator* Elevator, bool bOccupied);                                                // [0x18360b0] Final|Native|Protected 
};

/// Struct /Script/Indiana.NewHeadAppearance
/// Size: 0x00C0 (192 bytes) (0x000040 - 0x0000C0) align 8 MaxSize: 0x00C0
struct FNewHeadAppearance : FAppearanceMatch
{ 
	TWeakObjectPtr<class USkeletalMesh*>               HeadMesh;                                                   // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0048   (0x0020)  MISSED
	SDK_UNDEFINED(80,542) /* TMap<FName, TWeakObjectPtr<UMaterialInterface*>> */ __um(MaterialOverrides);          // 0x0068   (0x0050)  
	FName                                              HairMorphTarget;                                            // 0x00B8   (0x0008)  
};

/// Class /Script/Indiana.HeadAppearances
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UHeadAppearances : public UPrimaryDataAsset
{ 
public:
	TArray<FNewHeadAppearance>                         HeadAppearances;                                            // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.HealGunBehaviorStateInfo
/// Size: 0x0188 (392 bytes) (0x000178 - 0x000188) align 8 MaxSize: 0x0188
class UHealGunBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0178   (0x0010)  MISSED
};

/// Class /Script/Indiana.HealGunRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UHealGunRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.HealStatusEffect
/// Size: 0x01B0 (432 bytes) (0x000188 - 0x0001B0) align 8 MaxSize: 0x01B0
class UHealStatusEffect : public UStatusEffect
{ 
public:
	float                                              HealValue;                                                  // 0x0188   (0x0004)  
	float                                              HealValuePercent;                                           // 0x018C   (0x0004)  
	EHealValueType                                     HealValueType;                                              // 0x0190   (0x0001)  
	bool                                               bCanHealDead;                                               // 0x0191   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0192   (0x0006)  MISSED
	class URpgStat*                                    HealMultiplierStat;                                         // 0x0198   (0x0008)  
	class URpgStat*                                    SecondaryMultiplierStat;                                    // 0x01A0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x01A8   (0x0008)  MISSED
};

/// Class /Script/Indiana.HealthComponent
/// Size: 0x01C0 (448 bytes) (0x0000E0 - 0x0001C0) align 8 MaxSize: 0x01C0
class UHealthComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	SDK_UNDEFINED(16,543) /* FMulticastInlineDelegate */ __um(OnNewStateOfBeing);                                  // 0x00E8   (0x0010)  
	SDK_UNDEFINED(16,544) /* FMulticastInlineDelegate */ __um(OnRestoredStateOfBeing);                             // 0x00F8   (0x0010)  
	SDK_UNDEFINED(16,545) /* FMulticastInlineDelegate */ __um(OnPreStateOfBeingChange);                            // 0x0108   (0x0010)  
	SDK_UNDEFINED(16,546) /* FMulticastInlineDelegate */ __um(OnPostStateOfBeingChange);                           // 0x0118   (0x0010)  
	SDK_UNDEFINED(16,547) /* FMulticastInlineDelegate */ __um(OnHealthChanged);                                    // 0x0128   (0x0010)  
	SDK_UNDEFINED(16,548) /* FMulticastInlineDelegate */ __um(OnDeath);                                            // 0x0138   (0x0010)  
	SDK_UNDEFINED(16,549) /* FMulticastInlineDelegate */ __um(OnKillingBlowDelegate);                              // 0x0148   (0x0010)  
	float                                              MaxHealth;                                                  // 0x0158   (0x0004)  
	float                                              RegenRate;                                                  // 0x015C   (0x0004)  
	float                                              PercentMaxHealthOnResurrect;                                // 0x0160   (0x0004)  
	bool                                               bGodMode;                                                   // 0x0164   (0x0001)  
	bool                                               bPseudoGodMode;                                             // 0x0165   (0x0001)  
	bool                                               bImmuneToFallDamage;                                        // 0x0166   (0x0001)  
	unsigned char                                      UnknownData01_7[0x59];                                      // 0x0167   (0x0059)  MISSED


	/// Functions
	// Function /Script/Indiana.HealthComponent.Suicide
	// void Suicide();                                                                                                          // [0x1836550] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.SetPseudoGod
	// void SetPseudoGod(bool bEnabled);                                                                                        // [0x18364c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HealthComponent.SetHealthPercentNPC
	// void SetHealthPercentNPC(float Percent);                                                                                 // [0x18363b0] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.SetHealthPercent
	// void SetHealthPercent(float Percent, class AActor* Instigator);                                                          // [0x18362e0] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.SetGod
	// void SetGod(bool bEnabled);                                                                                              // [0x1836250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HealthComponent.PseudoGod
	// void PseudoGod();                                                                                                        // [0x1836230] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18361a0] Native|Protected     
	// Function /Script/Indiana.HealthComponent.OnAttributeUpdated
	// void OnAttributeUpdated(EAttribute Attribute, int32_t NewValue);                                                         // [0x1835ec0] Native|Protected     
	// Function /Script/Indiana.HealthComponent.LevelChanged
	// void LevelChanged(int32_t Level);                                                                                        // [0x1835ab0] Native|Protected     
	// Function /Script/Indiana.HealthComponent.KillNPC
	// void KillNPC(class AIndianaAiCharacter* Character);                                                                      // [0x1835a30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.HealthComponent.HealthFill
	// void HealthFill();                                                                                                       // [0x1835a10] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.GodCompanions
	// void GodCompanions();                                                                                                    // [0x18359f0] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.God
	// void God();                                                                                                              // [0x18359d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.GetStateOfBeing
	// EStateOfBeing GetStateOfBeing();                                                                                         // [0x18359b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.GetRegenRatePoints
	// float GetRegenRatePoints();                                                                                              // [0x1835980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.GetRegenRate
	// float GetRegenRate();                                                                                                    // [0x1835940] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.GetNormalizedHealth
	// float GetNormalizedHealth();                                                                                             // [0x1835910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HealthComponent.GetMaxHealth
	// float GetMaxHealth();                                                                                                    // [0x18358f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.GetHealth
	// float GetHealth();                                                                                                       // [0x18358d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.DeathComplete
	// void DeathComplete(class AActor* DeadActor);                                                                             // [0x1835720] Native|Protected     
};

/// Class /Script/Indiana.HealthKitTooltipWidget
/// Size: 0x03B0 (944 bytes) (0x000300 - 0x0003B0) align 8 MaxSize: 0x03B0
class UHealthKitTooltipWidget : public UToolTipContentWidget
{ 
public:
	class UTexture2D*                                  UnlitTexture;                                               // 0x0300   (0x0008)  
	class UTexture2D*                                  LitTexture;                                                 // 0x0308   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0310   (0x0008)  
	class UTextBlockBase*                              UsageTextBlock;                                             // 0x0318   (0x0008)  
	class UTextBlockBase*                              DescriptionTextBlock;                                       // 0x0320   (0x0008)  
	class UTextBlockBase*                              LoreTextBlock;                                              // 0x0328   (0x0008)  
	class UHorizontalBox*                              Slot0Box;                                                   // 0x0330   (0x0008)  
	class UTextBlockBase*                              Slot0TextBlock;                                             // 0x0338   (0x0008)  
	class UImage*                                      Slot0Image;                                                 // 0x0340   (0x0008)  
	class UHorizontalBox*                              Slot1Box;                                                   // 0x0348   (0x0008)  
	class UTextBlockBase*                              Slot1TextBlock;                                             // 0x0350   (0x0008)  
	class UImage*                                      Slot1Image;                                                 // 0x0358   (0x0008)  
	class UHorizontalBox*                              Slot2Box;                                                   // 0x0360   (0x0008)  
	class UTextBlockBase*                              Slot2TextBlock;                                             // 0x0368   (0x0008)  
	class UImage*                                      Slot2Image;                                                 // 0x0370   (0x0008)  
	class UHorizontalBox*                              Slot3Box;                                                   // 0x0378   (0x0008)  
	class UTextBlockBase*                              Slot3TextBlock;                                             // 0x0380   (0x0008)  
	class UImage*                                      Slot3Image;                                                 // 0x0388   (0x0008)  
	class USizeBox*                                    ImageSizeBox;                                               // 0x0390   (0x0008)  
	class UBorder*                                     FrameBorder;                                                // 0x0398   (0x0008)  
	class UScaleBox*                                   MainScaleBox;                                               // 0x03A0   (0x0008)  
	int32_t                                            ImageClippingHeight;                                        // 0x03A8   (0x0004)  
	float                                              MaximumScaleModifier;                                       // 0x03AC   (0x0004)  


	/// Functions
	// Function /Script/Indiana.HealthKitTooltipWidget.FontSizeChanged
	// void FontSizeChanged(int32_t NewModifier);                                                                               // [0x18357b0] Final|Native|Protected 
};

/// Class /Script/Indiana.HearingNavLink
/// Size: 0x02D0 (720 bytes) (0x0002D0 - 0x0002D0) align 8 MaxSize: 0x02D0
class AHearingNavLink : public APlaceableNavLink
{ 
public:
};

/// Struct /Script/Indiana.AreaHeightTile
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 MaxSize: 0x0058
struct FAreaHeightTile
{ 
	FBox2D                                             WorldArea;                                                  // 0x0000   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TWeakObjectPtr<class UHeightmapData*>              HeightmapData;                                              // 0x0018   (0x0008)  
	unsigned char                                      UnknownData01_7[0x38];                                      // 0x0020   (0x0038)  MISSED
};

/// Class /Script/Indiana.HeightmapManager
/// Size: 0x0340 (832 bytes) (0x000310 - 0x000340) align 8 MaxSize: 0x0340
class AHeightmapManager : public AVolume
{ 
public:
	FBox2D                                             WorldBounds;                                                // 0x0310   (0x0014)  
	int32_t                                            StreamInDistanceSquared;                                    // 0x0324   (0x0004)  
	int32_t                                            StreamOutDistanceSquared;                                   // 0x0328   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x032C   (0x0004)  MISSED
	TArray<FAreaHeightTile>                            AreaHeightTiles;                                            // 0x0330   (0x0010)  
};

/// Class /Script/Indiana.Helmet
/// Size: 0x02B0 (688 bytes) (0x0001F8 - 0x0002B0) align 8 MaxSize: 0x02B0
class UHelmet : public UArmorItem
{ 
public:
	EHeadStyle                                         HeadStyle;                                                  // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x01F9   (0x0007)  MISSED
	class UModAppearances*                             HelmetVisuals;                                              // 0x0200   (0x0008)  
	FArmorVisualProperties                             VisualProperties;                                           // 0x0208   (0x0058)  
	FArmorData                                         Armor;                                                      // 0x0260   (0x0048)  
	FGameplayTag                                       VoicePostProcessOverride;                                   // 0x02A8   (0x0008)  
};

/// Class /Script/Indiana.HeroStat
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UHeroStat : public UDataAsset
{ 
public:
	class UEventListener*                              EventListener;                                              // 0x0038   (0x0008)  
	int32_t                                            HeroStatID;                                                 // 0x0040   (0x0004)  
	FName                                              HeroStatName;                                               // 0x0044   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Indiana.HideMeshEventEffect
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UHideMeshEventEffect : public UEventEffect
{ 
public:
	EMeshTarget                                        TargetMesh;                                                 // 0x0030   (0x0001)  
	bool                                               bHideChildComponents;                                       // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Class /Script/Indiana.HighlightComponent
/// Size: 0x0138 (312 bytes) (0x0000E0 - 0x000138) align 8 MaxSize: 0x0138
class UHighlightComponent : public UActorComponent
{ 
public:
	class UMaterial*                                   HighlightPostProcessMaterial;                               // 0x00E0   (0x0008)  
	class UMaterialInstanceDynamic*                    PostProcessDynamicMaterial;                                 // 0x00E8   (0x0008)  
	unsigned char                                      UnknownData00_7[0x48];                                      // 0x00F0   (0x0048)  MISSED
};

/// Struct /Script/Indiana.HeightValuesTexture
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 8 MaxSize: 0x00A0
struct FHeightValuesTexture
{ 
	class UTexture2D*                                  Texture;                                                    // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x98];                                      // 0x0008   (0x0098)  MISSED
};

/// Class /Script/Indiana.HitEffectIndicatorComponent
/// Size: 0x0970 (2416 bytes) (0x0000E0 - 0x000970) align 16 MaxSize: 0x0970
class UHitEffectIndicatorComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x820];                                     // 0x00E0   (0x0820)  MISSED
	TArray<FHeightValuesTexture>                       HeightValuesTexture;                                        // 0x0900   (0x0010)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0910   (0x0018)  MISSED
	class UMaterial*                                   PostProcessMaterial;                                        // 0x0928   (0x0008)  
	class UMaterialInstanceDynamic*                    PostProcessDynamicMaterial;                                 // 0x0930   (0x0008)  
	float                                              GrowthRate;                                                 // 0x0938   (0x0004)  
	float                                              DropRate;                                                   // 0x093C   (0x0004)  
	float                                              Flatness;                                                   // 0x0940   (0x0004)  
	float                                              MinDamageToReact;                                           // 0x0944   (0x0004)  
	float                                              MaxDamageToReact;                                           // 0x0948   (0x0004)  
	float                                              MinDamageHeight;                                            // 0x094C   (0x0004)  
	float                                              MaxDamageHeight;                                            // 0x0950   (0x0004)  
	float                                              TextureWidth;                                               // 0x0954   (0x0004)  
	FLinearColor                                       HitColor;                                                   // 0x0958   (0x0010)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0968   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.HitEffectIndicatorComponent.OnTakeDamage
	// void OnTakeDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser); // [0x183a0e0] Final|Native|Public  
	// Function /Script/Indiana.HitEffectIndicatorComponent.OnHit
	// void OnHit(float NormalizedAmount, float IncidentAngleRelativeToCameraDegrees);                                          // [0x1839f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HitEffectIndicatorComponent.HitEffectIndicatorEnableDebugKeys
	// void HitEffectIndicatorEnableDebugKeys();                                                                                // [0x1839cf0] Final|Exec|Native|Public 
};

/// Struct /Script/Indiana.HitLocationChance
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FHitLocationChance
{ 
	FGameplayTagContainer                              BodyParts;                                                  // 0x0000   (0x0020)  
	bool                                               bWeakSpot;                                                  // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/Indiana.HitLocationData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UHitLocationData : public UDataAsset
{ 
public:
	TArray<FHitLocationChance>                         HitLocations;                                               // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.HitReactionStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UHitReactionStatusEffect : public UStatusEffect
{ 
public:
	EHitReactType                                      HitReaction;                                                // 0x0188   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0189   (0x0007)  MISSED
};

/// Class /Script/Indiana.HopeBotBehaviorStateInfo
/// Size: 0x0178 (376 bytes) (0x000178 - 0x000178) align 8 MaxSize: 0x0178
class UHopeBotBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.HopeBotRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UHopeBotRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.HoverbotAnimInstance
/// Size: 0x0990 (2448 bytes) (0x000950 - 0x000990) align 16 MaxSize: 0x0990
class UHoverbotAnimInstance : public UTPVAnimInstance
{ 
public:
	TArray<class UAnimSequence*>                       LocomotionTurnInPlace;                                      // 0x0950   (0x0010)  
	TArray<class UAnimSequence*>                       CombatTurnInPlace;                                          // 0x0960   (0x0010)  
	float                                              SlowingSpeed;                                               // 0x0970   (0x0004)  
	float                                              StoredVelocityNormalX;                                      // 0x0974   (0x0004)  
	float                                              StoredVelocityNormalY;                                      // 0x0978   (0x0004)  
	bool                                               bSpeedIsSlowingDown;                                        // 0x097C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x097D   (0x0003)  MISSED
	FVector                                            HeightSmooth;                                               // 0x0980   (0x000C)  
	float                                              IKStrength;                                                 // 0x098C   (0x0004)  
};

/// Class /Script/Indiana.HUDWidget
/// Size: 0x03F0 (1008 bytes) (0x000308 - 0x0003F0) align 8 MaxSize: 0x03F0
class UHUDWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class UCanvasPanel*                                SafeSpaceCanvasPanel;                                       // 0x0308   (0x0008)  
	class UReticleWidget*                              Reticle;                                                    // 0x0310   (0x0008)  
	class UItemDegradationAlertWidget*                 ItemDegradation;                                            // 0x0318   (0x0008)  
	class UCharacterOverviewWidget*                    CharacterOverview;                                          // 0x0320   (0x0008)  
	class UCompanionOverviewWidget*                    CompanionOverview;                                          // 0x0328   (0x0008)  
	class UCompanionOverviewWidget*                    CompanionOverview0;                                         // 0x0330   (0x0008)  
	class UTTDEnemyScanner*                            EnemyScanner;                                               // 0x0338   (0x0008)  
	class UAudioLogWidget*                             AudioLogWidget;                                             // 0x0340   (0x0008)  
	class UAbilityOverviewWidget*                      AbilityOverview;                                            // 0x0348   (0x0008)  
	class UAbilityOverviewWidget*                      AbilityOverviewGamepad;                                     // 0x0350   (0x0008)  
	class UQuestLogWidget*                             QuestLog;                                                   // 0x0358   (0x0008)  
	class UGenericNotificationWidget*                  GenericLog;                                                 // 0x0360   (0x0008)  
	class UCompassWidget*                              Compass;                                                    // 0x0368   (0x0008)  
	class UWeaponSelectWidget*                         WeaponSelect;                                               // 0x0370   (0x0008)  
	class UInputGuideWidget*                           InteractionGuide;                                           // 0x0378   (0x0008)  
	class UAmmoReadoutWidget*                          AmmoReadout;                                                // 0x0380   (0x0008)  
	class UDisguiseMeterWidget*                        DisguiseWidget;                                             // 0x0388   (0x0008)  
	class ULevelUpNotificationWidget*                  LevelUpNotification;                                        // 0x0390   (0x0008)  
	class UMapTransitionNotification*                  MapTransitionNotification;                                  // 0x0398   (0x0008)  
	class UItemContainerWidget*                        ItemContainerWidget;                                        // 0x03A0   (0x0008)  
	float                                              FlawDisplayDelay;                                           // 0x03A8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x03AC   (0x0004)  MISSED
	class UClass*                                      Flaw;                                                       // 0x03B0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x38];                                      // 0x03B8   (0x0038)  MISSED


	/// Functions
	// Function /Script/Indiana.HUDWidget.QueueLevelUpNotification
	// void QueueLevelUpNotification(int32_t NewLevel);                                                                         // [0x183a3b0] Final|Native|Protected 
	// Function /Script/Indiana.HUDWidget.GetCharacterOverview
	// class UCharacterOverviewWidget* GetCharacterOverview();                                                                  // [0x1839c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.HunkerDownBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000128 - 0x000128) align 8 MaxSize: 0x0128
class UHunkerDownBehaviorStateInfo : public UCompanionCommandTimedBehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.HunkerDownBehaviorRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UHunkerDownBehaviorRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.IdleBehaviorStateInfo
/// Size: 0x0138 (312 bytes) (0x000120 - 0x000138) align 8 MaxSize: 0x0138
class UIdleBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0120   (0x0018)  MISSED
};

/// Class /Script/Indiana.IdleRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UIdleRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.IdleCameraComponent
/// Size: 0x0350 (848 bytes) (0x0002F0 - 0x000350) align 16 MaxSize: 0x0350
class UIdleCameraComponent : public USpringArmComponent
{ 
public:
	bool                                               bEnableIfIdle;                                              // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x02F1   (0x0003)  MISSED
	float                                              SecondsToWait;                                              // 0x02F4   (0x0004)  
	bool                                               bRotateIndependentOfCharacter;                              // 0x02F8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x02F9   (0x0003)  MISSED
	float                                              IdleRotationSpeed;                                          // 0x02FC   (0x0004)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0300   (0x0008)  MISSED
	class UIndianaInputComponent*                      IdleInputDetectionComponent;                                // 0x0308   (0x0008)  
	unsigned char                                      UnknownData03_7[0x40];                                      // 0x0310   (0x0040)  MISSED
};

/// Class /Script/Indiana.ImageSectionWidget
/// Size: 0x02A8 (680 bytes) (0x000288 - 0x0002A8) align 8 MaxSize: 0x02A8
class UImageSectionWidget : public URadialSectionWidget
{ 
public:
	class UPanelWidget*                                Panel;                                                      // 0x0288   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0298   (0x0010)  MISSED
};

/// Class /Script/Indiana.ImmobilizeStatusEffect
/// Size: 0x0188 (392 bytes) (0x000188 - 0x000188) align 8 MaxSize: 0x0188
class UImmobilizeStatusEffect : public UStatusEffect
{ 
public:
};

/// Class /Script/Indiana.ImmuneStatusEffect
/// Size: 0x01B8 (440 bytes) (0x000188 - 0x0001B8) align 8 MaxSize: 0x01B8
class UImmuneStatusEffect : public UStatusEffect
{ 
public:
	FGameplayTagContainer                              DisableTypes;                                               // 0x0188   (0x0020)  
	class UClass*                                      OriginActorType;                                            // 0x01A8   (0x0008)  
	bool                                               bClearExistingEffects;                                      // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x01B1   (0x0007)  MISSED
};

/// Struct /Script/Indiana.ImpactAudioDamageTypeOverlays
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FImpactAudioDamageTypeOverlays
{ 
	SDK_UNDEFINED(80,550) /* TMap<TSoftObjectPtr<UClass*>, class UAkAudioEvent*> */ __um(DamageTypeOverlays);      // 0x0000   (0x0050)  
};

/// Class /Script/Indiana.ImpactAudioData
/// Size: 0x0230 (560 bytes) (0x000038 - 0x000230) align 8 MaxSize: 0x0230
class UImpactAudioData : public UDataAsset
{ 
public:
	SDK_UNDEFINED(80,551) /* TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*> */ __um(ImpactAudioMap);    // 0x0038   (0x0050)  
	class UAkAudioEvent*                               DefaultCriticalOverlay;                                     // 0x0088   (0x0008)  
	class UAkAudioEvent*                               DefaultGrazeOverlay;                                        // 0x0090   (0x0008)  
	class UAkAudioEvent*                               DefaultWeakSpotOverlay;                                     // 0x0098   (0x0008)  
	SDK_UNDEFINED(80,552) /* TMap<TSoftObjectPtr<UClass*>, class UAkAudioEvent*> */ __um(DefaultDamageTypeOverlays); // 0x00A0   (0x0050)  
	SDK_UNDEFINED(80,553) /* TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*> */ __um(CriticalOverlayOverrides); // 0x00F0   (0x0050)  
	SDK_UNDEFINED(80,554) /* TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*> */ __um(GrazeOverlayOverrides); // 0x0140   (0x0050)  
	SDK_UNDEFINED(80,555) /* TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*> */ __um(WeakSpotOverlayOverrides); // 0x0190   (0x0050)  
	SDK_UNDEFINED(80,556) /* TMap<TEnumAsByte<EPhysicalSurface>, FImpactAudioDamageTypeOverlays> */ __um(DamageTypeOverlayOverrides); // 0x01E0   (0x0050)  
};

/// Struct /Script/Indiana.ImpactAIDataOverride
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 MaxSize: 0x0004
struct FImpactAIDataOverride
{ 
	float                                              AISoundRadius;                                              // 0x0000   (0x0004)  
};

/// Class /Script/Indiana.ImpactDataSet
/// Size: 0x00A0 (160 bytes) (0x000038 - 0x0000A0) align 8 MaxSize: 0x00A0
class UImpactDataSet : public UDataAsset
{ 
public:
	class UImpactFxData*                               FxData;                                                     // 0x0038   (0x0008)  
	class UImpactAudioData*                            AudioData;                                                  // 0x0040   (0x0008)  
	float                                              AISoundRadius;                                              // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	SDK_UNDEFINED(80,557) /* TMap<TEnumAsByte<EPhysicalSurface>, FImpactAIDataOverride> */ __um(ImpactAIDataOverrides); // 0x0050   (0x0050)  
};

/// Struct /Script/Indiana.ImpactParticle
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 MaxSize: 0x0060
struct FImpactParticle
{ 
	class UParticleSystem*                             Fx;                                                         // 0x0000   (0x0008)  
	float                                              FxScale;                                                    // 0x0008   (0x0004)  
	bool                                               bUseRotation;                                               // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	TMap<FName, float>                                 ChargeEmitterEnableThresholds;                              // 0x0010   (0x0050)  
};

/// Struct /Script/Indiana.ImpactFxEntry
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 MaxSize: 0x0048
struct FImpactFxEntry
{ 
	TArray<FImpactParticle>                            ImpactParticles;                                            // 0x0000   (0x0010)  
	class UMaterialInterface*                          Decal;                                                      // 0x0010   (0x0008)  
	float                                              DecalSizeMin;                                               // 0x0018   (0x0004)  
	float                                              DecalSizeMax;                                               // 0x001C   (0x0004)  
	float                                              DecalSizeMinClamp;                                          // 0x0020   (0x0004)  
	float                                              DecalSizeMaxClamp;                                          // 0x0024   (0x0004)  
	float                                              DecalDurationMin;                                           // 0x0028   (0x0004)  
	float                                              DecalDurationMax;                                           // 0x002C   (0x0004)  
	float                                              DecalFadeTimeMin;                                           // 0x0030   (0x0004)  
	float                                              DecalFadeTimeMax;                                           // 0x0034   (0x0004)  
	float                                              FadeScreenSize;                                             // 0x0038   (0x0004)  
	float                                              DecalDepth;                                                 // 0x003C   (0x0004)  
	float                                              NormalOffset;                                               // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Indiana.ImpactFxData
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UImpactFxData : public UDataAsset
{ 
public:
	SDK_UNDEFINED(80,558) /* TMap<TEnumAsByte<EPhysicalSurface>, FImpactFxEntry> */ __um(ImpactFxMap);             // 0x0038   (0x0050)  
};

/// Struct /Script/Indiana.AimTargets
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FAimTargets
{ 
	FName                                              SocketName;                                                 // 0x0000   (0x0008)  
	FName                                              ComponentTag;                                               // 0x0008   (0x0008)  
	int32_t                                            Priority;                                                   // 0x0010   (0x0004)  
};

/// Struct /Script/Indiana.PropComponents
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FPropComponents
{ 
	class UMeshComponent*                              PropMesh;                                                   // 0x0000   (0x0008)  
	class UParticleSystemComponent*                    PropParticleSystem;                                         // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Class /Script/Indiana.IndianaCharacter
/// Size: 0x0C20 (3104 bytes) (0x000560 - 0x000C20) align 16 MaxSize: 0x0C18
class AIndianaCharacter : public ACharacter
{ 
public:
	unsigned char                                      UnknownData00_8[0x88];                                      // 0x0560   (0x0088)  MISSED
	SDK_UNDEFINED(16,559) /* FMulticastInlineDelegate */ __um(OnCauseDamage);                                      // 0x05E8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x160];                                     // 0x05F8   (0x0160)  MISSED
	SDK_UNDEFINED(16,560) /* FMulticastInlineDelegate */ __um(AnimNotifyParamsEvent);                              // 0x0758   (0x0010)  
	unsigned char                                      UnknownData02_6[0x28];                                      // 0x0768   (0x0028)  MISSED
	SDK_UNDEFINED(16,561) /* FMulticastInlineDelegate */ __um(OnCombatStateChange);                                // 0x0790   (0x0010)  
	unsigned char                                      UnknownData03_6[0x30];                                      // 0x07A0   (0x0030)  MISSED
	SDK_UNDEFINED(16,562) /* FMulticastInlineDelegate */ __um(OnCharacterDeath);                                   // 0x07D0   (0x0010)  
	SDK_UNDEFINED(16,563) /* FMulticastInlineDelegate */ __um(OnItemAdded);                                        // 0x07E0   (0x0010)  
	SDK_UNDEFINED(16,564) /* FMulticastInlineDelegate */ __um(OnItemRemoved);                                      // 0x07F0   (0x0010)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x0800   (0x0010)  MISSED
	class UClass*                                      OverrideDummyClass;                                         // 0x0810   (0x0008)  
	TArray<class UClass*>                              ImmutableBlueprintComponents;                               // 0x0818   (0x0010)  
	float                                              PostArmorDamageMultiplier;                                  // 0x0828   (0x0004)  
	float                                              PostArmorDamageMultiplierReceived;                          // 0x082C   (0x0004)  
	float                                              CombatEffectApplyMultiplier;                                // 0x0830   (0x0004)  
	bool                                               bAlwaysAllowHighlight;                                      // 0x0834   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0835   (0x0003)  MISSED
	FLogicalGroupedExpression                          AutoStasisConditions;                                       // 0x0838   (0x0078)  
	class USceneComponent*                             GroundOffsetComponent;                                      // 0x08B0   (0x0008)  
	class USpreadManagerComponent*                     SpreadManagerComponent;                                     // 0x08B8   (0x0008)  
	class UDamageableComponent*                        DamageableComponent;                                        // 0x08C0   (0x0008)  
	class UArmorComponent*                             ArmorComponent;                                             // 0x08C8   (0x0008)  
	class UStatusEffectManagerComponent*               StatusEffectManagerComponent;                               // 0x08D0   (0x0008)  
	class UTeamComponent*                              TeamComponent;                                              // 0x08D8   (0x0008)  
	class UCharacterInventoryComponent*                InventoryComponent;                                         // 0x08E0   (0x0008)  
	class UBlockComponent*                             BlockComponent;                                             // 0x08E8   (0x0008)  
	class UReactionComponent*                          ReactionComponent;                                          // 0x08F0   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x08F8   (0x0008)  
	class UEnvironmentInteractionComponent*            EnvironmentComponent;                                       // 0x0900   (0x0008)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x0908   (0x0008)  
	class UClass*                                      AudioComponentClass;                                        // 0x0910   (0x0008)  
	class UTelemetryComponent*                         TelemetryComponent;                                         // 0x0918   (0x0008)  
	class USpellManagerComponent*                      SpellManagerComponent;                                      // 0x0920   (0x0008)  
	TArray<FAimTargets>                                AimTargets;                                                 // 0x0928   (0x0010)  
	TMap<FString, FGameplayTag>                        ComponentNameToBodyPartTag;                                 // 0x0938   (0x0050)  
	class USkeletalMeshComponent*                      TPVMesh;                                                    // 0x0988   (0x0008)  
	class UIndianaCharMovementComponent*               IndianaCharacterMovementComponent;                          // 0x0990   (0x0008)  
	class UHealthComponent*                            HealthComponent;                                            // 0x0998   (0x0008)  
	class UDeathComponent*                             DeathComponent;                                             // 0x09A0   (0x0008)  
	class UEquipmentComponent*                         EquipmentComponent;                                         // 0x09A8   (0x0008)  
	class URpgStatComponent*                           RpgStatComponent;                                           // 0x09B0   (0x0008)  
	class UCharacterInfoComponent*                     CharacterInfoComponent;                                     // 0x09B8   (0x0008)  
	class UMeleeSlotManagerComponent*                  SlotManagerComponent;                                       // 0x09C0   (0x0008)  
	class UConversationRegisterComponent*              ConversationRegisterComponent;                              // 0x09C8   (0x0008)  
	class ULocomotionLogicComponent*                   LocomotionLogicComponent;                                   // 0x09D0   (0x0008)  
	class UTargetableComponent*                        TargetableComponent;                                        // 0x09D8   (0x0008)  
	class UFaceFXComponent*                            FaceFXComponent;                                            // 0x09E0   (0x0008)  
	class UAppearanceComponent*                        AppearanceComponent;                                        // 0x09E8   (0x0008)  
	class UIndianaAudioComponent*                      IndianaAudioComponent;                                      // 0x09F0   (0x0008)  
	class UPetableComponent*                           PetableComponent;                                           // 0x09F8   (0x0008)  
	unsigned char                                      UnknownData06_6[0xA0];                                      // 0x0A00   (0x00A0)  MISSED
	class UDifficultyRpgStatModifiers*                 DifficultyRpgStatModifiers;                                 // 0x0AA0   (0x0008)  
	unsigned char                                      UnknownData07_6[0x18];                                      // 0x0AA8   (0x0018)  MISSED
	float                                              OutOfCombatCylinderRadiusScalar;                            // 0x0AC0   (0x0004)  
	unsigned char                                      UnknownData08_6[0xD4];                                      // 0x0AC4   (0x00D4)  MISSED
	class UTalkingIdleOverrideData*                    TalkingIdleOverrides;                                       // 0x0B98   (0x0008)  
	TArray<FPropComponents>                            IdleMeshProps;                                              // 0x0BA0   (0x0010)  
	TArray<FPropComponents>                            NonCombatMeshProps;                                         // 0x0BB0   (0x0010)  
	TArray<FPropComponents>                            ForeverProps;                                               // 0x0BC0   (0x0010)  
	float                                              CharacterScaleModifier;                                     // 0x0BD0   (0x0004)  
	unsigned char                                      UnknownData09_6[0x14];                                      // 0x0BD4   (0x0014)  MISSED
	SDK_UNDEFINED(16,565) /* FMulticastInlineDelegate */ __um(OnCompanionOutline);                                 // 0x0BE8   (0x0010)  
	FGameplayTag                                       CreatureType;                                               // 0x0BF8   (0x0008)  
	FGameplayTag                                       CreatureRole;                                               // 0x0C00   (0x0008)  
	unsigned char                                      UnknownData10_7[0x10];                                      // 0x0C08   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaCharacter.UpdateOutlines
	// void UpdateOutlines();                                                                                                   // [0x18423e0] Final|Native|Public  
	// Function /Script/Indiana.IndianaCharacter.PlayWeaponEvent
	// void PlayWeaponEvent(FString WeaponEvent);                                                                               // [0x1842330] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaCharacter.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x18422b0] Native|Protected     
	// Function /Script/Indiana.IndianaCharacter.OnPreStateOfBeingChange
	// void OnPreStateOfBeingChange(EStateOfBeing StateOfBeing);                                                                // [0x1842230] Native|Protected     
	// Function /Script/Indiana.IndianaCharacter.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x1842160] Native|Protected     
	// Function /Script/Indiana.IndianaCharacter.OnLevelChanged
	// void OnLevelChanged(int32_t Level);                                                                                      // [0x18420d0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaCharacter.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty NewDifficulty);                                                                 // [0x1842030] Final|Native|Protected 
	// Function /Script/Indiana.IndianaCharacter.OnAttack
	// void OnAttack(float DurationScalar);                                                                                     // [0x1841df0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaCharacter.ItemRemoved
	// void ItemRemoved(FItemStack& Item);                                                                                      // [0x1841c80] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaCharacter.ItemAdded
	// void ItemAdded(FItemStack& Item);                                                                                        // [0x1841be0] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaCharacter.IsWeaponEquipped
	// bool IsWeaponEquipped(class UClass* WeaponClass);                                                                        // [0x1841b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.IsArmorEquipped
	// bool IsArmorEquipped(class UClass* ArmorClass);                                                                          // [0x1841aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.HasItem
	// bool HasItem(class UClass* Item);                                                                                        // [0x1841a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.GetStatusEffectManager
	// class UStatusEffectManagerComponent* GetStatusEffectManager();                                                           // [0x18419c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.GetItemQuantity
	// int32_t GetItemQuantity(class UClass* Item);                                                                             // [0x1841920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.GetEquipmentComponent
	// class UEquipmentComponent* GetEquipmentComponent();                                                                      // [0x1841900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.GetCurrentWeapon
	// class UWeapon* GetCurrentWeapon();                                                                                       // [0x18418d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.ExecuteDeath
	// void ExecuteDeath(bool bFromReload);                                                                                     // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.IndianaCharacter.Died
	// void Died(FCauseDamageInfo& CDI);                                                                                        // [0x1841830] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaCharacter.DamageCaused
	// void DamageCaused(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x1841790] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.IndianaCharacter.CastSpellDebugTarget
	// void CastSpellDebugTarget(FString SpellName);                                                                            // [0x18416e0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaCharacter.CastSpellDebug
	// void CastSpellDebug(FString SpellName);                                                                                  // [0x1841630] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.IndianaAiCharacter
/// Size: 0x0E60 (3680 bytes) (0x000C18 - 0x000E60) align 16 MaxSize: 0x0E60
class AIndianaAiCharacter : public AIndianaCharacter
{ 
public:
	SDK_UNDEFINED(16,566) /* FMulticastInlineDelegate */ __um(OnDespawned);                                        // 0x0C18   (0x0010)  
	unsigned char                                      UnknownData00_6[0x28];                                      // 0x0C28   (0x0028)  MISSED
	SDK_UNDEFINED(16,567) /* FMulticastInlineDelegate */ __um(OnCompanionDismissed);                               // 0x0C50   (0x0010)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0C60   (0x0008)  MISSED
	class UAIMovementComponent*                        AIMovementComponent;                                        // 0x0C68   (0x0008)  
	class UCompanionComponent*                         CompanionComponent;                                         // 0x0C70   (0x0008)  
	class UAISettingsComponent*                        AISettingsComponent;                                        // 0x0C78   (0x0008)  
	class UAIInteractionComponent*                     InteractionComponent;                                       // 0x0C80   (0x0008)  
	class UAiTargetingComponent*                       TargetingComponent;                                         // 0x0C88   (0x0008)  
	class UHeadAndBodyTrackingComponent*               HeadAndBodyTrackingComponent;                               // 0x0C90   (0x0008)  
	class UPersonalSpaceComponent*                     PersonalSpaceComponent;                                     // 0x0C98   (0x0008)  
	class UCharacterShoutComponent*                    ShoutComponent;                                             // 0x0CA0   (0x0008)  
	class UAIDefensiveActionsComponent*                DefensiveActionsComponent;                                  // 0x0CA8   (0x0008)  
	class UTPVAnimInstance*                            AnimInstance;                                               // 0x0CB0   (0x0008)  
	class UTPVPersonalityCollection*                   Personality;                                                // 0x0CB8   (0x0008)  
	bool                                               bHasWeaponInNonCombat;                                      // 0x0CC0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0CC1   (0x0003)  MISSED
	FName                                              EyeSocketName;                                              // 0x0CC4   (0x0008)  
	FName                                              AimOriginSocketName;                                        // 0x0CCC   (0x0008)  
	float                                              AimOriginVerticalOffset;                                    // 0x0CD4   (0x0004)  
	float                                              CarryingCapacity;                                           // 0x0CD8   (0x0004)  
	bool                                               bIsolated;                                                  // 0x0CDC   (0x0001)  
	bool                                               bShouldIgnorePlayerDamage;                                  // 0x0CDD   (0x0001)  
	bool                                               bIgnorePickpocketing;                                       // 0x0CDE   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2E];                                      // 0x0CDF   (0x002E)  MISSED
	bool                                               UseSplinePath;                                              // 0x0D0D   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3E];                                      // 0x0D0E   (0x003E)  MISSED
	FName                                              TrackedSocketOnRagdoll;                                     // 0x0D4C   (0x0008)  
	float                                              CharacterTeleportDistanceThreshold;                         // 0x0D54   (0x0004)  
	float                                              RagdollSettleTime;                                          // 0x0D58   (0x0004)  
	float                                              RagdollTurnOffMotorsTime;                                   // 0x0D5C   (0x0004)  
	float                                              RagdollFreezeTime;                                          // 0x0D60   (0x0004)  
	float                                              RagdollMaxSpeed;                                            // 0x0D64   (0x0004)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0D68   (0x0008)  MISSED
	float                                              DistanceToAlwaysEvaluateAnimations;                         // 0x0D70   (0x0004)  
	unsigned char                                      UnknownData06_6[0x14];                                      // 0x0D74   (0x0014)  MISSED
	class UFaceFXActor*                                FaceFXAssetNative;                                          // 0x0D88   (0x0008)  
	class USkeletalMesh*                               FaceFXAuthoredSkeletonNative;                               // 0x0D90   (0x0008)  
	class UPoseAsset*                                  DefaultMaleEyePoseAsset;                                    // 0x0D98   (0x0008)  
	class UPoseAsset*                                  DefaultFemaleEyePoseAsset;                                  // 0x0DA0   (0x0008)  
	class UFaceFXActor*                                DefaultMaleFaceFXActor;                                     // 0x0DA8   (0x0008)  
	class UFaceFXActor*                                DefaultFemaleFaceFXActor;                                   // 0x0DB0   (0x0008)  
	class USkeletalMesh*                               DefaultMaleFaceFXReferenceSkeleton;                         // 0x0DB8   (0x0008)  
	class USkeletalMesh*                               DefaultFemaleFaceFXReferenceSkeleton;                       // 0x0DC0   (0x0008)  
	bool                                               bCapsuleCollisionEnabled;                                   // 0x0DC8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x27];                                      // 0x0DC9   (0x0027)  MISSED
	class UEmotionData*                                EmotionData;                                                // 0x0DF0   (0x0008)  
	bool                                               bHasDefaultEmotion;                                         // 0x0DF8   (0x0001)  
	EEmotion                                           DefaultEmotion;                                             // 0x0DF9   (0x0001)  
	bool                                               bUseFactionReactionEmotions;                                // 0x0DFA   (0x0001)  
	EEmotion                                           GoodReaction;                                               // 0x0DFB   (0x0001)  
	EEmotion                                           NeutralReaction;                                            // 0x0DFC   (0x0001)  
	EEmotion                                           BadReaction;                                                // 0x0DFD   (0x0001)  
	unsigned char                                      UnknownData08_6[0x4A];                                      // 0x0DFE   (0x004A)  MISSED
	bool                                               bAllowStatusTag;                                            // 0x0E48   (0x0001)  
	unsigned char                                      UnknownData09_7[0x17];                                      // 0x0E49   (0x0017)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaAiCharacter.SetRagdoll
	// void SetRagdoll(bool bInIsRagdoll, bool bInstantFreeze);                                                                 // [0x183a4d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiCharacter.SetIsInLowGrav
	// void SetIsInLowGrav(bool bNewIsInLowGrav);                                                                               // [0x183a440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiCharacter.OnWeaponEndUnequip
	// void OnWeaponEndUnequip(class UWeapon* Weapon);                                                                          // [0x183a320] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiCharacter.OnWeaponEndEquip
	// void OnWeaponEndEquip(class UWeapon* Weapon);                                                                            // [0x183a290] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiCharacter.OnMontageEndDelegate
	// void OnMontageEndDelegate(class UAnimMontage* Montage, bool bInterrupted);                                               // [0x183a010] Final|Native|Public  
	// Function /Script/Indiana.IndianaAiCharacter.OnDamageEvent
	// void OnDamageEvent(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x1839ea0] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaAiCharacter.OnAlertStateChange
	// void OnAlertStateChange(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x1839d40] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiCharacter.OnActorHiddenChange
	// void OnActorHiddenChange(bool bIsHidden);                                                                                // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.IndianaAiCharacter.IsInCombat
	// bool IsInCombat();                                                                                                       // [0x1839d10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaAiCharacter.GetOwningController
	// class AIndianaAiController* GetOwningController();                                                                       // [0x1839cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaAiController
/// Size: 0x04A8 (1192 bytes) (0x0003C0 - 0x0004A8) align 8 MaxSize: 0x04A8
class AIndianaAiController : public AAIController
{ 
public:
	class UIndianaBehaviorTreeComponent*               BehaviorTreeComponent;                                      // 0x03C0   (0x0008)  
	class UDecisionTreeComponent*                      DecisionTreeComponent;                                      // 0x03C8   (0x0008)  
	class UBehaviorStackComponent*                     BehaviorStackComponent;                                     // 0x03D0   (0x0008)  
	class UTargetInfoComponent*                        TargetInfoComponent;                                        // 0x03D8   (0x0008)  
	class UInterestComponent*                          InterestComponent;                                          // 0x03E0   (0x0008)  
	class UAIDetectionComponent*                       AIDetectionComponent;                                       // 0x03E8   (0x0008)  
	class UIndianaAIPerceptionComponent*               IndianaPerceptionComponent;                                 // 0x03F0   (0x0008)  
	class UIndianaPathFollowingComponent*              IndianaPathFollowingComponent;                              // 0x03F8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0400   (0x0010)  MISSED
	class UClass*                                      DefaultNavigationBehaviorFilterClass;                       // 0x0410   (0x0008)  
	class UClass*                                      DefaultNavigationEQSFilterClass;                            // 0x0418   (0x0008)  
	unsigned char                                      UnknownData01_6[0x70];                                      // 0x0420   (0x0070)  MISSED
	class UAIDecisionUpdate*                           CustomUpdateObject;                                         // 0x0490   (0x0008)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0498   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaAiController.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x183f760] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.IndianaAiController.OnSwitchedTarget
	// void OnSwitchedTarget(class AActor* OldTarget, class AActor* NewTarget, bool bRestoring);                                // [0x183f650] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiController.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x183f380] Native|Protected     
	// Function /Script/Indiana.IndianaAiController.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x183f120] Native|Protected     
	// Function /Script/Indiana.IndianaAiController.OnMeleeActionEnd
	// void OnMeleeActionEnd(EMeleeAction ActionEnded);                                                                         // [0x183f010] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiController.OnCombatStateChange
	// void OnCombatStateChange(bool bInCombat, bool bRestoring);                                                               // [0x183e910] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiController.OnBehaviorStateChange
	// void OnBehaviorStateChange(class UBehaviorStateInfo* OldBehaviorStateInfo, class UBehaviorStateInfo* NewBehaviorStateInfo); // [0x183e600] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiController.GetSightAwarenessIncreaseRate
	// float GetSightAwarenessIncreaseRate(bool bIsStealthed, int32_t OwnerPerceptionSkill, int32_t TargetSneakSkill, EAlertState InAlertState, float Distance, float SightRadius, bool bAllowTargeting); // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaAiController.GetSightAwarenessDecreaseRate
	// float GetSightAwarenessDecreaseRate(bool bIsStealthed, int32_t OwnerPerceptionSkill, int32_t TargetSneakSkill, EAlertState InAlertState, bool bLost, bool bDeadBodyKiller); // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaAiController.GetFootstepAwarenessIncrease
	// float GetFootstepAwarenessIncrease(bool bIsStealthed, int32_t OwnerPerceptionSkill, int32_t TargetSneakSkill, EAlertState InAlertState, float BaseFootstepAwareness, float Distance, float SoundRadius); // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaAiController.GetCurrentTargetDistance
	// float GetCurrentTargetDistance();                                                                                        // [0x183e530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaAiController.AIScriptWander
	// void AIScriptWander(class AIndianaAiCharacter* InCharacter);                                                             // [0x183e440] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptPatrolInterruptible
	// void AIScriptPatrolInterruptible(class AIndianaAiCharacter* InCharacter, class APatrolNode* InPatrolNode);               // [0x183e380] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptPatrol
	// void AIScriptPatrol(class AIndianaAiCharacter* InCharacter, class APatrolNode* InPatrolNode);                            // [0x183e2c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptIdle
	// void AIScriptIdle(class AIndianaAiCharacter* InCharacter);                                                               // [0x183e240] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptFollowPlayer
	// void AIScriptFollowPlayer(class AIndianaAiCharacter* InCharacter);                                                       // [0x183e1c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptEncounterAttackEncounter
	// void AIScriptEncounterAttackEncounter(class AEncounter* InEncounter, class AEncounter* InTargetEncounter);               // [0x183e100] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptEncounterAttack
	// void AIScriptEncounterAttack(class AIndianaAiCharacter* InCharacter, class AEncounter* InTargetEncounter);               // [0x183e040] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptClearScripts
	// void AIScriptClearScripts(class AIndianaAiCharacter* InCharacter);                                                       // [0x183dfc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptCharactersAttackCharacters
	// void AIScriptCharactersAttackCharacters(TArray<AIndianaAiCharacter*> InCharacters, TArray<AIndianaAiCharacter*> InTargetCharacters); // [0x183de50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptAttackEncounter
	// void AIScriptAttackEncounter(class AEncounter* InEncounter, class AIndianaCharacter* InTargetCharacter);                 // [0x183dd90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptAttack
	// void AIScriptAttack(class AIndianaAiCharacter* InCharacter, class AIndianaCharacter* InTargetCharacter);                 // [0x183dcd0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaAIPerceptionComponent
/// Size: 0x0220 (544 bytes) (0x0001C0 - 0x000220) align 8 MaxSize: 0x0220
class UIndianaAIPerceptionComponent : public UAIPerceptionComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x01C0   (0x0020)  MISSED
	class UAISenseConfig_Sight*                        OutOfCombatInteriorSightConfig;                             // 0x01E0   (0x0008)  
	class UAISenseConfig_Sight*                        OutOfCombatExteriorSightConfig;                             // 0x01E8   (0x0008)  
	class UAISenseConfig_Sight*                        InCombatSightConfig;                                        // 0x01F0   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x01F8   (0x0010)  MISSED
	float                                              InCombatHearingRangeScalar;                                 // 0x0208   (0x0004)  
	float                                              OutOfCombatInteriorHearingRangeScalar;                      // 0x020C   (0x0004)  
	float                                              OutOfCombatExteriorHearingRangeScalar;                      // 0x0210   (0x0004)  
	unsigned char                                      UnknownData02_7[0xC];                                       // 0x0214   (0x000C)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x183f5a0] Final|Native|Private 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnPerceptionRangeScalarUpdated
	// void OnPerceptionRangeScalarUpdated(FGameplayTagContainer& CreatureType);                                                // [0x183f2c0] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnGodVisionChanged
	// void OnGodVisionChanged(bool bGodVision);                                                                                // [0x183ee00] Final|Native|Private 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bIsInCombat, bool bRestoring);                                                            // [0x183e9e0] Final|Native|Private 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnCharacterDeath
	// void OnCharacterDeath(class AActor* Instigator, FCauseDamageInfo& CauseDamageInfo);                                      // [0x183e6f0] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnBehaviorTreeInitialized
	// void OnBehaviorTreeInitialized();                                                                                        // [0x183e6d0] Final|Native|Private 
};

/// Class /Script/Indiana.IndianaAIPerceptionSystem
/// Size: 0x01B0 (432 bytes) (0x000138 - 0x0001B0) align 8 MaxSize: 0x01B0
class UIndianaAIPerceptionSystem : public UAIPerceptionSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x0138   (0x0078)  MISSED
};

/// Class /Script/Indiana.IndianaAISense_Hearing
/// Size: 0x00F0 (240 bytes) (0x0000F0 - 0x0000F0) align 8 MaxSize: 0x00F0
class UIndianaAISense_Hearing : public UAISense_Hearing
{ 
public:
};

/// Class /Script/Indiana.IndianaAISense_Sight
/// Size: 0x0180 (384 bytes) (0x000180 - 0x000180) align 8 MaxSize: 0x0180
class UIndianaAISense_Sight : public UAISense_Sight
{ 
public:
};

/// Class /Script/Indiana.IndianaAISystem
/// Size: 0x0138 (312 bytes) (0x000138 - 0x000138) align 8 MaxSize: 0x0138
class UIndianaAISystem : public UAISystem
{ 
public:
};

/// Struct /Script/Indiana.AudioState
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FAudioState
{ 
	FName                                              StateName;                                                  // 0x0000   (0x0008)  
	FName                                              StateValue;                                                 // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0010   (0x0004)  MISSED
};

/// Class /Script/Indiana.IndianaAkAmbientVolume
/// Size: 0x03D8 (984 bytes) (0x000358 - 0x0003D8) align 8 MaxSize: 0x03D8
class AIndianaAkAmbientVolume : public ATriggerVolume
{ 
public:
	TArray<class UAkAudioEvent*>                       AmbientEvents;                                              // 0x0358   (0x0010)  
	bool                                               bUsePriority;                                               // 0x0368   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0369   (0x0003)  MISSED
	uint32_t                                           Priority;                                                   // 0x036C   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0370   (0x0004)  
	float                                              FadeInTime;                                                 // 0x0374   (0x0004)  
	TArray<FAudioState>                                AudioStates;                                                // 0x0378   (0x0010)  
	unsigned char                                      UnknownData01_7[0x50];                                      // 0x0388   (0x0050)  MISSED
};

/// Class /Script/Indiana.IndianaAkAmbientSpatialVolume
/// Size: 0x03F0 (1008 bytes) (0x0003D8 - 0x0003F0) align 8 MaxSize: 0x03F0
class AIndianaAkAmbientSpatialVolume : public AIndianaAkAmbientVolume
{ 
public:
	class UAkSurfaceReflectorSetComponent*             SurfaceReflectorSet;                                        // 0x03D8   (0x0008)  
	class UAkLateReverbComponent*                      LateReverb;                                                 // 0x03E0   (0x0008)  
	class UAkRoomComponent*                            Room;                                                       // 0x03E8   (0x0008)  
};

/// Class /Script/Indiana.IndianaAnimNotify_FootPlace
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align 8 MaxSize: 0x0058
class UIndianaAnimNotify_FootPlace : public UAnimNotify
{ 
public:
	FName                                              IKChainName;                                                // 0x0040   (0x0008)  
	float                                              LerpInTime;                                                 // 0x0048   (0x0004)  
	float                                              SolidTime;                                                  // 0x004C   (0x0004)  
	float                                              LerpOutTime;                                                // 0x0050   (0x0004)  
	bool                                               TriggerFootPlace;                                           // 0x0054   (0x0001)  
	EFootID                                            FootID;                                                     // 0x0055   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Struct /Script/Indiana.AttributeStatModifierDescription
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align 8 MaxSize: 0x0030
struct FAttributeStatModifierDescription : FStatModifierDescriptionBase
{ 
	float                                              AttributeStatValues[7];                                     // 0x0010   (0x001C)  
	int32_t                                            ShowInUIAtValue;                                            // 0x002C   (0x0004)  
};

/// Class /Script/Indiana.IndianaAttribute
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UIndianaAttribute : public UObject
{ 
public:
	TArray<FAttributeStatModifierDescription>          AttributeRpgStatMods;                                       // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.StrengthAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UStrengthAttribute : public UIndianaAttribute
{ 
public:
};

/// Class /Script/Indiana.DexterityAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UDexterityAttribute : public UIndianaAttribute
{ 
public:
};

/// Class /Script/Indiana.EnduranceAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UEnduranceAttribute : public UIndianaAttribute
{ 
public:
};

/// Class /Script/Indiana.IntelligenceAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UIntelligenceAttribute : public UIndianaAttribute
{ 
public:
};

/// Class /Script/Indiana.PerceptionAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UPerceptionAttribute : public UIndianaAttribute
{ 
public:
};

/// Class /Script/Indiana.WillpowerAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UWillpowerAttribute : public UIndianaAttribute
{ 
public:
};

/// Class /Script/Indiana.CharmAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UCharmAttribute : public UIndianaAttribute
{ 
public:
};

/// Class /Script/Indiana.WitsAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UWitsAttribute : public UIndianaAttribute
{ 
public:
};

/// Class /Script/Indiana.TemperamentAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UTemperamentAttribute : public UIndianaAttribute
{ 
public:
};

/// Class /Script/Indiana.IndianaAttributes
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align 8 MaxSize: 0x0078
class UIndianaAttributes : public UObject
{ 
public:
	class UClass*                                      AttributeImplementations[9];                                // 0x0030   (0x0048)  
};

/// Class /Script/Indiana.IndianaDefaultButtonAudioData
/// Size: 0x0080 (128 bytes) (0x000038 - 0x000080) align 8 MaxSize: 0x0080
class UIndianaDefaultButtonAudioData : public UDataAsset
{ 
public:
	class UAkAudioEvent*                               ButtonPressedSound;                                         // 0x0038   (0x0008)  
	class UAkAudioEvent*                               ButtonHoveredSound;                                         // 0x0040   (0x0008)  
	class UAkAudioEvent*                               ButtonFocusedSound;                                         // 0x0048   (0x0008)  
	class UAkAudioEvent*                               ButtonSelectedPressedSound;                                 // 0x0050   (0x0008)  
	class UAkAudioEvent*                               ButtonSelectedHoveredSound;                                 // 0x0058   (0x0008)  
	class UAkAudioEvent*                               ButtonSelectedFocusedSound;                                 // 0x0060   (0x0008)  
	class UAkAudioEvent*                               SliderHoveredSound;                                         // 0x0068   (0x0008)  
	class UAkAudioEvent*                               SliderFocusedSound;                                         // 0x0070   (0x0008)  
	class UAkAudioEvent*                               SliderStepSound;                                            // 0x0078   (0x0008)  
};

/// Struct /Script/Indiana.LandAudioEvent
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FLandAudioEvent
{ 
	bool                                               bHasMinDistance;                                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              MinDistance;                                                // 0x0004   (0x0004)  
	bool                                               bHasMaxDistance;                                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              MaxDistance;                                                // 0x000C   (0x0004)  
	class UAkPlaySoundEventEffect*                     Event;                                                      // 0x0010   (0x0008)  
};

/// Class /Script/Indiana.IndianaAudioComponent
/// Size: 0x0280 (640 bytes) (0x0000E0 - 0x000280) align 8 MaxSize: 0x0280
class UIndianaAudioComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	FName                                              CreatureType;                                               // 0x00E8   (0x0008)  
	TMap<ECharacterAudioEvent, class UAkPlaySoundEventEffect*> CharacterAudioEvents;                               // 0x00F0   (0x0050)  
	TMap<ECharacterMovementAudioEvents, class UAkPlaySoundEventEffect*> CharacterMovementAudioEvents;              // 0x0140   (0x0050)  
	TArray<FLandAudioEvent>                            LandEvents;                                                 // 0x0190   (0x0010)  
	class UAkAudioEvent*                               FootstepEventOverride;                                      // 0x01A0   (0x0008)  
	class UFootstepAudio*                              CurrentFootstepAudio;                                       // 0x01A8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x38];                                      // 0x01B0   (0x0038)  MISSED
	FEventEffectState                                  EventEffectState;                                           // 0x01E8   (0x0020)  
	class UAnimationAudioSet*                          AnimationAudioSet;                                          // 0x0208   (0x0008)  
	unsigned char                                      UnknownData02_6[0x58];                                      // 0x0210   (0x0058)  MISSED
	FGameplayTag                                       CurrentHeadStylePostProcess;                                // 0x0268   (0x0008)  
	bool                                               bCanUseExplicitPostProcess;                                 // 0x0270   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0271   (0x0003)  MISSED
	FGameplayTag                                       CurrentExplicitPostProcess;                                 // 0x0274   (0x0008)  
	unsigned char                                      UnknownData04_7[0x4];                                       // 0x027C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaAudioComponent.OnStopClimb
	// void OnStopClimb();                                                                                                      // [0x183f630] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAudioComponent.OnStartClimb
	// void OnStartClimb();                                                                                                     // [0x183f580] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAudioComponent.OnSpecialMovementEvent
	// void OnSpecialMovementEvent(ESpecialMovementEvent SpecialEvent, FVector& Position, FVector& Normal, TEnumAsByte<EPhysicalSurface> PhysMaterial); // [0x183f400] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaAudioComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x183f1f0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAudioComponent.OnNewFootstepData
	// void OnNewFootstepData(class UFootstepData* NewData);                                                                    // [0x183f090] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAudioComponent.OnLanded
	// void OnLanded(float FallDistance, FVector& Position, FVector& Normal, TEnumAsByte<EPhysicalSurface> PhysMaterial);       // [0x183ee90] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaAudioComponent.OnFootstep
	// void OnFootstep(EFootID FootID, EFootstepType FootstepType, FVector& Position, FVector& Normal, TEnumAsByte<EPhysicalSurface> PhysMaterial); // [0x183ec30] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaAudioComponent.OnDodge
	// void OnDodge(EDodgeDirection Direction, FVector& Position, FVector& Normal, TEnumAsByte<EPhysicalSurface> PhysMaterial); // [0x183eab0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaAudioComponent.OnCharacterMovementUpdated
	// void OnCharacterMovementUpdated(float DeltaSeconds, FVector OldLocation, FVector OldVelocity);                           // [0x183e7e0] Final|Native|Protected|HasDefaults 
};

/// Class /Script/Indiana.IndianaAutoPlayer
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UIndianaAutoPlayer : public UObject
{ 
public:


	/// Functions
	// Function /Script/Indiana.IndianaAutoPlayer.StopAutoPlayer
	// void StopAutoPlayer();                                                                                                   // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaAutoPlayer.StartAutoPlayer
	// void StartAutoPlayer();                                                                                                  // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaAutoPlayer.OnAsyncSaveComplete
	// void OnAsyncSaveComplete(ESaveGameResult Result, ESaveGameType SaveType);                                                // [0x1841d20] Final|Native|Protected 
};

/// Struct /Script/Indiana.AutoConsoleCommandProperties
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FAutoConsoleCommandProperties
{ 
	bool                                               bEnable;                                                    // 0x0000   (0x0001)  
	bool                                               bTriggerRegularly;                                          // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              ExecuteWaitTime;                                            // 0x0004   (0x0004)  
	bool                                               bTriggerAfterTravel;                                        // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	FString                                            Command;                                                    // 0x0010   (0x0010)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0020   (0x0008)  MISSED
};

/// Struct /Script/Indiana.AutoRandomInputProperties
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FAutoRandomInputProperties
{ 
	bool                                               bEnable;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FKey                                               Key;                                                        // 0x0008   (0x0018)  
	bool                                               bAxis;                                                      // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	float                                              MinAxisDeltaSpeed;                                          // 0x0024   (0x0004)  
	float                                              MaxAxisDeltaSpeed;                                          // 0x0028   (0x0004)  
	bool                                               bHold;                                                      // 0x002C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x002D   (0x0003)  MISSED
	float                                              MinHoldTime;                                                // 0x0030   (0x0004)  
	float                                              MaxHoldTime;                                                // 0x0034   (0x0004)  
	float                                              MinTriggerTime;                                             // 0x0038   (0x0004)  
	float                                              MaxTriggerTime;                                             // 0x003C   (0x0004)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0040   (0x0010)  MISSED
};

/// Class /Script/Indiana.IndianaAutoPlayerTestSettings
/// Size: 0x01E8 (488 bytes) (0x000040 - 0x0001E8) align 8 MaxSize: 0x01E8
class UIndianaAutoPlayerTestSettings : public UDeveloperSettings
{ 
public:
	bool                                               bUseFixedRandomSeed;                                        // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	int32_t                                            FixedRandomSeed;                                            // 0x0044   (0x0004)  
	bool                                               bUsedFixedPlaythroughID;                                    // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FGuid                                              FixedPlaythroughGuid;                                       // 0x004C   (0x0010)  
	float                                              DeltaTimeCap;                                               // 0x005C   (0x0004)  
	bool                                               bDisableTimeCapIfLowFramerate;                              // 0x0060   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            DisableTimeCapFrameCount;                                   // 0x0064   (0x0004)  
	bool                                               bDisablePlayerIdleCamera;                                   // 0x0068   (0x0001)  
	bool                                               bAutoOpenNearbyDoors;                                       // 0x0069   (0x0001)  
	bool                                               bEnableTutorials;                                           // 0x006A   (0x0001)  
	unsigned char                                      UnknownData03_6[0x5];                                       // 0x006B   (0x0005)  MISSED
	SDK_UNDEFINED(16,568) /* TArray<TWeakObjectPtr<UWorld*>> */ __um(TestLevels);                                  // 0x0070   (0x0010)  
	bool                                               bEnableTraveling;                                           // 0x0080   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	float                                              MinTravelTime;                                              // 0x0084   (0x0004)  
	float                                              MaxTravelTime;                                              // 0x0088   (0x0004)  
	bool                                               bAllowTravelingToCurrentMap;                                // 0x008C   (0x0001)  
	bool                                               bCanReturnToMainMenu;                                       // 0x008D   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x008E   (0x0002)  MISSED
	float                                              ChanceToReturnToMenu;                                       // 0x0090   (0x0004)  
	float                                              MainMenuSoakTime;                                           // 0x0094   (0x0004)  
	bool                                               bTakeTransitions;                                           // 0x0098   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0099   (0x0003)  MISSED
	float                                              ChanceToTakeTransition;                                     // 0x009C   (0x0004)  
	bool                                               bAllowTransitionsEvenIfNotInList;                           // 0x00A0   (0x0001)  
	bool                                               bEnableQuickSaveLoad;                                       // 0x00A1   (0x0001)  
	bool                                               bOnlyLoadQuickSavesMadeOnCurrentMap;                        // 0x00A2   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1];                                       // 0x00A3   (0x0001)  MISSED
	float                                              MinQuickSaveWaitTime;                                       // 0x00A4   (0x0004)  
	float                                              MaxQuickSaveWaitTime;                                       // 0x00A8   (0x0004)  
	float                                              MinQuickLoadWaitTime;                                       // 0x00AC   (0x0004)  
	float                                              MaxQuickLoadWaitTime;                                       // 0x00B0   (0x0004)  
	bool                                               bGhost;                                                     // 0x00B4   (0x0001)  
	bool                                               bEnableRandomPathing;                                       // 0x00B5   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x00B6   (0x0002)  MISSED
	float                                              PathingNewLocationRadius;                                   // 0x00B8   (0x0004)  
	float                                              PathingNewLocationHeightVariance;                           // 0x00BC   (0x0004)  
	bool                                               bFaceAlongPath;                                             // 0x00C0   (0x0001)  
	bool                                               bTeleportIfStuckPathing;                                    // 0x00C1   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x00C2   (0x0002)  MISSED
	float                                              PathingStuckTeleportRadius;                                 // 0x00C4   (0x0004)  
	float                                              PathingVisitedTileSize;                                     // 0x00C8   (0x0004)  
	float                                              PathingGoalProjectionExtents;                               // 0x00CC   (0x0004)  
	float                                              PathingVisitingRadius;                                      // 0x00D0   (0x0004)  
	bool                                               bAllowControlRotationSnapping;                              // 0x00D4   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x00D5   (0x0003)  MISSED
	float                                              MinSnapRotationWaitTime;                                    // 0x00D8   (0x0004)  
	float                                              MaxSnapRotationWaitTime;                                    // 0x00DC   (0x0004)  
	FVector                                            SnapRotationAxis;                                           // 0x00E0   (0x000C)  
	float                                              MinSnapRotationAmount;                                      // 0x00EC   (0x0004)  
	float                                              MaxSnapRotationAmount;                                      // 0x00F0   (0x0004)  
	bool                                               bEnableTeleporting;                                         // 0x00F4   (0x0001)  
	bool                                               bTeleportPlaceOnGround;                                     // 0x00F5   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x00F6   (0x0002)  MISSED
	float                                              TeleportHeight;                                             // 0x00F8   (0x0004)  
	bool                                               bAllowTeleportingUnderground;                               // 0x00FC   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x00FD   (0x0003)  MISSED
	float                                              TeleportNewLocationDistance;                                // 0x0100   (0x0004)  
	float                                              MinTeleportWaitTime;                                        // 0x0104   (0x0004)  
	float                                              MaxTeleportWaitTime;                                        // 0x0108   (0x0004)  
	bool                                               bGodMode;                                                   // 0x010C   (0x0001)  
	bool                                               bPseudoGod;                                                 // 0x010D   (0x0001)  
	bool                                               bResurrect;                                                 // 0x010E   (0x0001)  
	bool                                               bInfiniteAmmo;                                              // 0x010F   (0x0001)  
	bool                                               bOneShotKills;                                              // 0x0110   (0x0001)  
	bool                                               bAttackAI;                                                  // 0x0111   (0x0001)  
	unsigned char                                      UnknownData13_6[0x2];                                       // 0x0112   (0x0002)  MISSED
	float                                              MaximumAttackDistance;                                      // 0x0114   (0x0004)  
	bool                                               bOnlyAttackEnemies;                                         // 0x0118   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0119   (0x0003)  MISSED
	float                                              MinAttackWaitTime;                                          // 0x011C   (0x0004)  
	float                                              MaxAttackWaitTime;                                          // 0x0120   (0x0004)  
	bool                                               bEnableWeaponSwapping;                                      // 0x0124   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0125   (0x0003)  MISSED
	float                                              MinWeaponSwapWaitTime;                                      // 0x0128   (0x0004)  
	float                                              MaxWeaponSwapWaitTime;                                      // 0x012C   (0x0004)  
	bool                                               bEnableArmorSwapping;                                       // 0x0130   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x0131   (0x0003)  MISSED
	float                                              MinArmorSwapWaitTime;                                       // 0x0134   (0x0004)  
	float                                              MaxArmorSwapWaitTime;                                       // 0x0138   (0x0004)  
	bool                                               bEnableScreenshots;                                         // 0x013C   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x013D   (0x0003)  MISSED
	float                                              ScreenshotRate;                                             // 0x0140   (0x0004)  
	int32_t                                            NumberOfScreenshotsToKeep;                                  // 0x0144   (0x0004)  
	FDirectoryPath                                     ScreenshotDirectoryOverride;                                // 0x0148   (0x0010)  
	bool                                               bEnableMemoryInfoLogging;                                   // 0x0158   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0159   (0x0003)  MISSED
	float                                              MemoryInfoLogRate;                                          // 0x015C   (0x0004)  
	bool                                               bLogMemoryInfoOnMapLoad;                                    // 0x0160   (0x0001)  
	bool                                               bConsoleCommandsEnabled;                                    // 0x0161   (0x0001)  
	unsigned char                                      UnknownData19_6[0x6];                                       // 0x0162   (0x0006)  MISSED
	TArray<FAutoConsoleCommandProperties>              ConsoleCommandProperties;                                   // 0x0168   (0x0010)  
	bool                                               bInfoTrackingEnabled;                                       // 0x0178   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x0179   (0x0003)  MISSED
	float                                              InfoTrackingRate;                                           // 0x017C   (0x0004)  
	bool                                               bAddReportTimeColumn;                                       // 0x0180   (0x0001)  
	bool                                               bAddEngineRuntimeColumn;                                    // 0x0181   (0x0001)  
	bool                                               bAddTestRuntimeColumn;                                      // 0x0182   (0x0001)  
	bool                                               bAddCurrentMapColumn;                                       // 0x0183   (0x0001)  
	bool                                               bAddReportTimeAndMapColumn;                                 // 0x0184   (0x0001)  
	bool                                               bAddEngineRuntimeAndMapColumn;                              // 0x0185   (0x0001)  
	bool                                               bAddRuntimeAndMapColumn;                                    // 0x0186   (0x0001)  
	bool                                               bAddPlayerLocationColumn;                                   // 0x0187   (0x0001)  
	bool                                               bTrackRenderTargetPoolUsage;                                // 0x0188   (0x0001)  
	bool                                               bTrackAudioMemoryUsage;                                     // 0x0189   (0x0001)  
	bool                                               bTrackMemoryUsageInformation;                               // 0x018A   (0x0001)  
	bool                                               bTrackMemoryStatInformation;                                // 0x018B   (0x0001)  
	bool                                               bTrackTextureStreamingInformation;                          // 0x018C   (0x0001)  
	bool                                               bTryToFilterStatErrors;                                     // 0x018D   (0x0001)  
	unsigned char                                      UnknownData21_6[0x2];                                       // 0x018E   (0x0002)  MISSED
	TArray<FString>                                    StatsToTrack;                                               // 0x0190   (0x0010)  
	bool                                               bGenerateMemoryReports;                                     // 0x01A0   (0x0001)  
	unsigned char                                      UnknownData22_6[0x7];                                       // 0x01A1   (0x0007)  MISSED
	TArray<FString>                                    MemoryReportCommands;                                       // 0x01A8   (0x0010)  
	float                                              MemoryPeakIncreaseReportThreshold;                          // 0x01B8   (0x0004)  
	float                                              MemoryUtilizationReportThreshold;                           // 0x01BC   (0x0004)  
	float                                              ExtraMemoryUtilizationReportAmount;                         // 0x01C0   (0x0004)  
	float                                              TexturePoolUtilizationReportThreadhold;                     // 0x01C4   (0x0004)  
	float                                              ExtraTexturePoolUtilizationReportAmount;                    // 0x01C8   (0x0004)  
	float                                              UtilizationReportThresholdResetTime;                        // 0x01CC   (0x0004)  
	float                                              TexturePoolOverBudgetReportRate;                            // 0x01D0   (0x0004)  
	bool                                               bInputEnabled;                                              // 0x01D4   (0x0001)  
	unsigned char                                      UnknownData23_6[0x3];                                       // 0x01D5   (0x0003)  MISSED
	TArray<FAutoRandomInputProperties>                 RandomInputKeyProperties;                                   // 0x01D8   (0x0010)  
};

/// Class /Script/Indiana.IndianaAvoidanceManager
/// Size: 0x0150 (336 bytes) (0x0000E8 - 0x000150) align 8 MaxSize: 0x0150
class UIndianaAvoidanceManager : public UAvoidanceManager
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E8   (0x0008)  MISSED
	int32_t                                            AvoidanceSweepMaxSampleCount;                               // 0x00F0   (0x0004)  
	float                                              AvoidanceSweepDeltaAngle;                                   // 0x00F4   (0x0004)  
	float                                              AvoidanceSweepMinDeltaAngleFromDesiredVelocity;             // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x54];                                      // 0x00FC   (0x0054)  MISSED
};

/// Class /Script/Indiana.IndianaBehaviorTreeComponent
/// Size: 0x0318 (792 bytes) (0x0002C8 - 0x000318) align 8 MaxSize: 0x0318
class UIndianaBehaviorTreeComponent : public UBehaviorTreeComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x02C8   (0x0020)  MISSED
	class UClass*                                      GlobalParamsType;                                           // 0x02E8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x02F0   (0x0018)  MISSED
	class UBehaviorTreeGlobalParams*                   GlobalParams;                                               // 0x0308   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0310   (0x0008)  MISSED
};

/// Class /Script/Indiana.IndianaBossBar
/// Size: 0x0380 (896 bytes) (0x000300 - 0x000380) align 8 MaxSize: 0x0380
class UIndianaBossBar : public UIndianaUserWidget
{ 
public:
	float                                              FadeInTime;                                                 // 0x0300   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0304   (0x0004)  
	float                                              DamageDealtDelayTime;                                       // 0x0308   (0x0004)  
	float                                              DamageDealtFadeTime;                                        // 0x030C   (0x0004)  
	float                                              DamageDealtMinOffset;                                       // 0x0310   (0x0004)  
	float                                              DamageDealtMaxOffset;                                       // 0x0314   (0x0004)  
	int32_t                                            HealthBarWidth;                                             // 0x0318   (0x0004)  
	float                                              HealthBarTipOffset;                                         // 0x031C   (0x0004)  
	FName                                              HealthBarFillName;                                          // 0x0320   (0x0008)  
	class UStatusEffectTagWidget*                      StatusEffectTag;                                            // 0x0328   (0x0008)  
	class UVerticalBox*                                MainVerticalBox;                                            // 0x0330   (0x0008)  
	class UImage*                                      DamageBar;                                                  // 0x0338   (0x0008)  
	class UImage*                                      HealthBar;                                                  // 0x0340   (0x0008)  
	class UImage*                                      Tip;                                                        // 0x0348   (0x0008)  
	class UTextBlockBase*                              BossNameTextBlock;                                          // 0x0350   (0x0008)  
	class UMaterialInstanceDynamic*                    DamageBarMaterial;                                          // 0x0358   (0x0008)  
	class UMaterialInstanceDynamic*                    HealthBarMaterial;                                          // 0x0360   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0368   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaBossBar.OnEndBossFight
	// void OnEndBossFight();                                                                                                   // [0x18420b0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaBossBar.OnBossHealthChanged
	// void OnBossHealthChanged(float NormalizedHealth);                                                                        // [0x1841fb0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaBossBar.OnBeginBossFight
	// void OnBeginBossFight(class AIndianaCharacter* OwnerCharacter, FString BossName, float StartingNormalizedHealth);        // [0x1841e70] Final|Native|Protected 
	// Function /Script/Indiana.IndianaBossBar.GetShowAnimation
	// class UWidgetAnimation* GetShowAnimation();                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaBossBar.GetHideAnimation
	// class UWidgetAnimation* GetHideAnimation();                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.IndianaCharacterDummy
/// Size: 0x0610 (1552 bytes) (0x000560 - 0x000610) align 16 MaxSize: 0x0610
class AIndianaCharacterDummy : public ACharacter
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0560   (0x0008)  MISSED
	bool                                               bAllowUnderKillPlane;                                       // 0x0568   (0x0001)  
	bool                                               bMakeTickableWhenPaused;                                    // 0x0569   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x056A   (0x0006)  MISSED
	TArray<FRandomPlayerSequenceEntryNamed>            DefaultFidgets;                                             // 0x0570   (0x0010)  
	TMap<EUISelectionState, class UAnimSequence*>      UIDummyAnimData;                                            // 0x0580   (0x0050)  
	class USceneComponent*                             GroundOffsetComponent;                                      // 0x05D0   (0x0008)  
	class UEquipmentComponent*                         EquipmentComponent;                                         // 0x05D8   (0x0008)  
	class UAppearanceComponent*                        AppearanceComponent;                                        // 0x05E0   (0x0008)  
	class UWeapon*                                     PendingWeapon;                                              // 0x05E8   (0x0008)  
	EUISelectionState                                  UISelectionState;                                           // 0x05F0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x05F1   (0x0002)  MISSED
	bool                                               bShowWeapon;                                                // 0x05F3   (0x0001)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x05F4   (0x0004)  MISSED
	TArray<FPropComponents>                            Props;                                                      // 0x05F8   (0x0010)  
	unsigned char                                      UnknownData04_7[0x8];                                       // 0x0608   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaCharacterDummy.SetUISelectionState
	// void SetUISelectionState(EUISelectionState InSelectionState);                                                            // [0x1846c80] Native|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.IndianaCharacterDummy.OnWeaponEndEquip
	// void OnWeaponEndEquip(class UWeapon* Weapon);                                                                            // [0x1846b60] Final|Native|Protected 
	// Function /Script/Indiana.IndianaCharacterDummy.CopyFromCharacter
	// void CopyFromCharacter(class AIndianaCharacter* Character);                                                              // [0x1845f80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaCheatManager
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align 8 MaxSize: 0x0090
class UIndianaCheatManager : public UCheatManager
{ 
public:


	/// Functions
	// Function /Script/Indiana.IndianaCheatManager.SetLevelNPC
	// void SetLevelNPC(int32_t NewLevel);                                                                                      // [0x1846bf0] Exec|Native|Public   
	// Function /Script/Indiana.IndianaCheatManager.LootTableDebug
	// void LootTableDebug(FString LootTable, int32_t NumTimes);                                                                // [0x18468d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaCheatManager.GivePlayerAllItems
	// void GivePlayerAllItems();                                                                                               // [0x1846890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaCheatManager.DropAllItemsDebug
	// void DropAllItemsDebug(bool bSplitStacks);                                                                               // [0x18460d0] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.IndianaDamageType
/// Size: 0x00B0 (176 bytes) (0x000048 - 0x0000B0) align 8 MaxSize: 0x00B0
class UIndianaDamageType : public UDamageType
{ 
public:
	EIndianaDamageType                                 Type;                                                       // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0049   (0x0007)  MISSED
	class UTexture2D*                                  Texture;                                                    // 0x0050   (0x0008)  
	FLocString                                         Name;                                                       // 0x0058   (0x0008)  
	FLocString                                         Description;                                                // 0x0060   (0x0008)  
	int32_t                                            DeathPriority;                                              // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	class URpgStat*                                    ReceiveDamageStat;                                          // 0x0070   (0x0008)  
	class UClass*                                      DeathSpellStatusEffect;                                     // 0x0078   (0x0008)  
	class UClass*                                      DeathSpell;                                                 // 0x0080   (0x0008)  
	class UClass*                                      OnHitSpell;                                                 // 0x0088   (0x0008)  
	float                                              OnHitSpellChance;                                           // 0x0090   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	class URpgStat*                                    SpellChanceStat;                                            // 0x0098   (0x0008)  
	TArray<EDLCFlags>                                  DLCFlags;                                                   // 0x00A0   (0x0010)  


	/// Functions
	// Function /Script/Indiana.IndianaDamageType.TriggerMuzzleFx
	// void TriggerMuzzleFx(class USceneComponent* AttachComponent, bool IsFirstPerson);                                        // [0x1c5deb0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaDamageType.SetupSecondaryImpactFx
	// void SetupSecondaryImpactFx(class UParticleSystemComponent* ParentEffect, bool bGraze, bool bCritical, bool bWeakSpot, bool bRadial, float Radius); // [0x1c5deb0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaDamageType.SetupImpactFx
	// void SetupImpactFx(class UParticleSystemComponent* ParentEffect, bool bGraze, bool bCritical, bool bWeakSpot, bool bRadial, float Radius); // [0x1c5deb0] Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Indiana.IndianaDebugCameraController
/// Size: 0x0730 (1840 bytes) (0x000728 - 0x000730) align 8 MaxSize: 0x0730
class AIndianaDebugCameraController : public ADebugCameraController
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0728   (0x0008)  MISSED
};

/// Class /Script/Indiana.IndianaDragDropOperation
/// Size: 0x00B8 (184 bytes) (0x000090 - 0x0000B8) align 8 MaxSize: 0x00B8
class UIndianaDragDropOperation : public UDragDropOperation
{ 
public:
	class UClass*                                      DefaultDragVisualClass;                                     // 0x0090   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0098   (0x0020)  MISSED
};

/// Class /Script/Indiana.IndianaFlybyAkComponent
/// Size: 0x0490 (1168 bytes) (0x000488 - 0x000490) align 16 MaxSize: 0x0490
class UIndianaFlybyAkComponent : public UAkComponent
{ 
public:
	float                                              WorldZOffset;                                               // 0x0488   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x048C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaFlybyAkComponent.UpdateEmitterLocation
	// void UpdateEmitterLocation();                                                                                            // [0x1846d00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaFlybyAkComponent.InitializeEmitter
	// void InitializeEmitter();                                                                                                // [0x18468b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaFlybyAkComponent.DeactivateEmitter
	// void DeactivateEmitter();                                                                                                // [0x1846010] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.AISoundDetectionSettings
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FAISoundDetectionSettings
{ 
	EAlertState                                        DetectedAlertState;                                         // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              DetectedAwarenessChange;                                    // 0x0004   (0x0004)  
	bool                                               bContinuousAwareness;                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	class URpgStat*                                    AwarenessChangeStat;                                        // 0x0010   (0x0008)  
	bool                                               bMatchFriendAwareness;                                      // 0x0018   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              PathDistanceCheckScalar;                                    // 0x001C   (0x0004)  
	EStimulusType                                      StimulusType;                                               // 0x0020   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/Indiana.IndianaFormulas
/// Size: 0x0158 (344 bytes) (0x000030 - 0x000158) align 8 MaxSize: 0x0158
class UIndianaFormulas : public UObject
{ 
public:
	char                                               OCLMinDifficulty;                                           // 0x0030   (0x0001)  
	char                                               OCLMaxDifficulty;                                           // 0x0031   (0x0001)  
	char                                               LockpickMaxDelta;                                           // 0x0032   (0x0001)  
	char                                               HackMinDifficulty;                                          // 0x0033   (0x0001)  
	char                                               HackMaxDifficulty;                                          // 0x0034   (0x0001)  
	char                                               HackMaxDelta;                                               // 0x0035   (0x0001)  
	char                                               TrapMinDifficulty;                                          // 0x0036   (0x0001)  
	char                                               TrapMaxDifficulty;                                          // 0x0037   (0x0001)  
	char                                               TrapMaxDelta;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              InteriorSneakDetectionRange;                                // 0x003C   (0x0004)  
	float                                              ExteriorSneakDetectionRange;                                // 0x0040   (0x0004)  
	float                                              ConversationResumeDelay;                                    // 0x0044   (0x0004)  
	float                                              ConversationResumeDelayRandom;                              // 0x0048   (0x0004)  
	float                                              SoftCoverDetectionDistance;                                 // 0x004C   (0x0004)  
	float                                              MindControlInitialPerceptionDistance;                       // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	TMap<ESoundDetectionType, FAISoundDetectionSettings> SoundDetectionSettingsMap;                                // 0x0058   (0x0050)  
	int32_t                                            MinimumMerchantSkillForDiscount;                            // 0x00A8   (0x0004)  
	float                                              MerchantDiscountDivisor;                                    // 0x00AC   (0x0004)  
	int32_t                                            MinimumHackSkillToUnlockRestrictedStock;                    // 0x00B0   (0x0004)  
	float                                              PawningValueReductionModifier;                              // 0x00B4   (0x0004)  
	float                                              RestockFrequencyDays;                                       // 0x00B8   (0x0004)  
	float                                              BuybackExpirationDays;                                      // 0x00BC   (0x0004)  
	float                                              PristineValueModifier;                                      // 0x00C0   (0x0004)  
	float                                              PristineHealthModifier;                                     // 0x00C4   (0x0004)  
	float                                              ItemEffectivenessThresholdDamage;                           // 0x00C8   (0x0004)  
	float                                              ItemEffectivenessThresholdSevereDamage;                     // 0x00CC   (0x0004)  
	float                                              ItemEffectivenessThresholdDestroyed;                        // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
	TMap<EGameDifficulty, float>                       MinEffectivenessByDifficulty;                               // 0x00D8   (0x0050)  
	int32_t                                            MinUnlockedGadgetSlots;                                     // 0x0128   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x012C   (0x0004)  MISSED
	class UCurveFloat*                                 DisguiseDetectorDrainRateCurve;                             // 0x0130   (0x0008)  
	float                                              BeaconFocusAimSimilarityOn;                                 // 0x0138   (0x0004)  
	float                                              BeaconFocusAimSimilarityOff;                                // 0x013C   (0x0004)  
	float                                              StandardKeyHoldTime;                                        // 0x0140   (0x0004)  
	float                                              StandardDoubleClickTime;                                    // 0x0144   (0x0004)  
	int32_t                                            InterrogationSkillCheckXPLimitCount;                        // 0x0148   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x014C   (0x0004)  MISSED
	double                                             InterrogationSkillCheckXPLimitTime;                         // 0x0150   (0x0008)  


	/// Functions
	// Function /Script/Indiana.IndianaFormulas.WorkbenchRepairPartCost
	// int32_t WorkbenchRepairPartCost(float Durability, int32_t ItemLevel, int32_t EngineerSkill);                             // [0x1846e00] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.VendorRepairCurrencyCost
	// int32_t VendorRepairCurrencyCost(float Durability, int32_t ItemLevel);                                                   // [0x1846d20] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapToughness
	// char TrapToughness(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                            // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDisarmNoise
	// float TrapDisarmNoise(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                         // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDifficultyRange
	// float TrapDifficultyRange();                                                                                             // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDifficultyNumRanges
	// char TrapDifficultyNumRanges();                                                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDifficultyFullRange
	// char TrapDifficultyFullRange();                                                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDamagePercent
	// float TrapDamagePercent(ETrapDifficulty TrapDifficulty);                                                                 // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapArmNoise
	// float TrapArmNoise(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                            // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ShouldDrawFireSwitchCompanionTargets
	// bool ShouldDrawFireSwitchCompanionTargets(float OldHealth, float OldDTBody, float OldDTHead, float NewHealth, float NewDTBody, float NewDTHead); // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.PlayerSneakEnemyDetectionRage
	// float PlayerSneakEnemyDetectionRage(bool bInterior, int32_t PlayerSneakSkill);                                           // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.PickPocketTime
	// float PickPocketTime(int32_t LockpickSkill, int32_t TargetPerception);                                                   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickToughness
	// char LockpickToughness(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill);                                       // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickTime
	// float LockpickTime(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill, int32_t BasePlayerLockpickSkill);          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickNumResources
	// char LockpickNumResources(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill, int32_t BasePlayerLockpickSkill);   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickNoise
	// float LockpickNoise(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill);                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickDifficultyRange
	// float LockpickDifficultyRange();                                                                                         // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickDifficultyNumRanges
	// char LockpickDifficultyNumRanges();                                                                                      // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickDifficultyFullRange
	// char LockpickDifficultyFullRange();                                                                                      // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackToughness
	// char HackToughness(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackTime
	// char HackTime(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                        // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackRobotTime
	// char HackRobotTime(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackNumResources
	// char HackNumResources(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackNoise
	// float HackNoise(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                      // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackDifficultyRange
	// float HackDifficultyRange();                                                                                             // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackDifficultyNumRanges
	// char HackDifficultyNumRanges();                                                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackDifficultyFullRange
	// char HackDifficultyFullRange();                                                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.GetRespecCost
	// int32_t GetRespecCost(int32_t NumRespecs);                                                                               // [0x18467f0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.GetModifiedItemEffectiveness
	// float GetModifiedItemEffectiveness(class UDegradableItem* Item);                                                         // [0x1846750] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.GetInterrogationBribeAmount
	// int32_t GetInterrogationBribeAmount(ECrimeType CrimeType, bool bRestrictedArea, bool bDisguised, int32_t DisguiseInterrogationsPassed, int32_t PlayerLevel, int32_t MerchantSkill, int32_t StolenItemsValue); // [0x1846520] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.GetDisguiseDrainRate
	// float GetDisguiseDrainRate(int32_t StealthSkill, bool bMoving, bool bSprinting, bool bCrouching);                        // [0x18463a0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.GetBribeAmount
	// int32_t GetBribeAmount(EBribeDifficulty BribeDifficulty, int32_t Level, int32_t MerchantSkill);                          // [0x1846280] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.FieldRepairPartCost
	// int32_t FieldRepairPartCost(float Durability, int32_t ItemLevel, int32_t EngineerSkill);                                 // [0x1846160] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.DoesHackSkillUnlockRestrictedStock
	// bool DoesHackSkillUnlockRestrictedStock(int32_t HackSkill);                                                              // [0x1846030] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.DisarmTime
	// char DisarmTime(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                               // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ConversationSkillNearMissThreshold
	// int32_t ConversationSkillNearMissThreshold();                                                                            // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ConversationNearMissMaxOptions
	// int32_t ConversationNearMissMaxOptions();                                                                                // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ConversationAttributeNearMissThreshold
	// int32_t ConversationAttributeNearMissThreshold();                                                                        // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeSkillValueToRange
	// ECharacterSkillRange ComputeSkillValueToRange(int32_t SkillValue);                                                       // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeSkillPointsForSecondaryAttribute
	// int32_t ComputeSkillPointsForSecondaryAttribute(char AttributeRank);                                                     // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeSkillPointsForPrimaryAttribute
	// int32_t ComputeSkillPointsForPrimaryAttribute(char AttributeRank);                                                       // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeFallingDamagePercent
	// float ComputeFallingDamagePercent(float DistanceFallen);                                                                 // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeExactTrapDifficulty
	// char ComputeExactTrapDifficulty(ETrapDifficulty TrapDifficulty);                                                         // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeExactLockpickDifficulty
	// char ComputeExactLockpickDifficulty(EOCLDifficulty LockpickDifficulty);                                                  // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeExactHackDifficulty
	// char ComputeExactHackDifficulty(EOCLDifficulty HackDifficulty);                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CanLockpick
	// bool CanLockpick(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill);                                             // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CanHack
	// bool CanHack(char ExactComputerDifficulty, int32_t PlayerHackSkill);                                                     // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CanDisarm
	// bool CanDisarm(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                                // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CanArm
	// bool CanArm(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                                   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateTier3Count
	// int32_t CalculateTier3Count(int32_t ScienceSkill);                                                                       // [0x1845ee0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateTier2Count
	// int32_t CalculateTier2Count(int32_t ScienceSkill);                                                                       // [0x1845e40] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateTier1Count
	// int32_t CalculateTier1Count(int32_t ScienceSkill);                                                                       // [0x1845da0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculatePartsRecoveredOnBreakdown
	// int32_t CalculatePartsRecoveredOnBreakdown(float Durability, int32_t ItemLevel, bool bFieldBreakdown);                   // [0x1845c80] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateMoraleAdjustment
	// float CalculateMoraleAdjustment(float AddedMoral, int32_t CharmAttribute, int32_t TemperamentAttribute);                 // [0x1845b60] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateMerchantSkillDiscount
	// float CalculateMerchantSkillDiscount(int32_t MerchantSkill);                                                             // [0x1845ac0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateItemEffectiveness
	// float CalculateItemEffectiveness(class UDegradableItem* Item);                                                           // [0x1845a20] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateItemBasePrice
	// float CalculateItemBasePrice(int32_t BasePrice, bool bPristine, float Condition);                                        // [0x1845900] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateIntialMorale
	// float CalculateIntialMorale(int32_t TemperamentAttribute);                                                               // [0x1845860] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateGadgetSlots
	// int32_t CalculateGadgetSlots(int32_t ScienceSkill);                                                                      // [0x18457c0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.BaseRepairPartCost
	// float BaseRepairPartCost(float Durability, int32_t ItemLevel);                                                           // [0x18456e0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.ArmTime
	// char ArmTime(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                                  // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Struct /Script/Indiana.WeatherState
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 MaxSize: 0x002C
struct FWeatherState
{ 
	bool                                               HasBeenInitialized;                                         // 0x0000   (0x0001)  
	bool                                               CloudFormingEnded;                                          // 0x0001   (0x0001)  
	bool                                               RainStartedEnded;                                           // 0x0002   (0x0001)  
	bool                                               WeatherStarted;                                             // 0x0003   (0x0001)  
	bool                                               WeatherEndEnded;                                            // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              TimelineCloudFormationP;                                    // 0x0008   (0x0004)  
	float                                              TimelineRainStart;                                          // 0x000C   (0x0004)  
	float                                              TimelineRainEnd;                                            // 0x0010   (0x0004)  
	float                                              TimelineDyingTimeline;                                      // 0x0014   (0x0004)  
	float                                              RandomWindGenerator;                                        // 0x0018   (0x0004)  
	float                                              TimelineSandstormStart;                                     // 0x001C   (0x0004)  
	float                                              TimelineSandStormDuration;                                  // 0x0020   (0x0004)  
	float                                              TimelineSandStormEnding;                                    // 0x0024   (0x0004)  
	float                                              SandStormDensity;                                           // 0x0028   (0x0004)  
};

/// Class /Script/Indiana.WeatherStateContainer
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align 8 MaxSize: 0x0060
class UWeatherStateContainer : public UObject
{ 
public:
	FWeatherState                                      WeatherState;                                               // 0x0030   (0x002C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Indiana.IndianaGameInstance
/// Size: 0x0D70 (3440 bytes) (0x0001B0 - 0x000D70) align 16 MaxSize: 0x0D70
class UIndianaGameInstance : public UGameInstance
{ 
public:
	class UClass*                                      PickupBasicBlueprint;                                       // 0x01B0   (0x0008)  
	SDK_UNDEFINED(16,569) /* FMulticastInlineDelegate */ __um(OnLevelEntered);                                     // 0x01B8   (0x0010)  
	TArray<class UFont*>                               Fonts;                                                      // 0x01C8   (0x0010)  
	SDK_UNDEFINED(16,570) /* TArray<TWeakObjectPtr<UObject*>> */ __um(AlwaysLoadedAssets);                         // 0x01D8   (0x0010)  
	SDK_UNDEFINED(16,571) /* TArray<TSoftObjectPtr<UClass*>> */ __um(AlwaysLoadedClasses);                         // 0x01E8   (0x0010)  
	SDK_UNDEFINED(80,572) /* TSet<UObject*> */         __um(PersistedAssets);                                      // 0x01F8   (0x0050)  
	unsigned char                                      UnknownData00_6[0x60];                                      // 0x0248   (0x0060)  MISSED
	class UQuestManager*                               QuestManager;                                               // 0x02A8   (0x0008)  
	class UTelemetryManager*                           TelemetryManager;                                           // 0x02B0   (0x0008)  
	class UScriptManager*                              ScriptManager;                                              // 0x02B8   (0x0008)  
	class UChatterManager*                             ChatterManager;                                             // 0x02C0   (0x0008)  
	class UTeamManager*                                GlobalTeamManager;                                          // 0x02C8   (0x0008)  
	class UFactionManager*                             GlobalFactionManager;                                       // 0x02D0   (0x0008)  
	class UTalkManager*                                TalkManager;                                                // 0x02D8   (0x0008)  
	class UDifficultyManager*                          DifficultyManager;                                          // 0x02E0   (0x0008)  
	class UBeaconManager*                              BeaconManager;                                              // 0x02E8   (0x0008)  
	class UTutorialManager*                            TutorialManager;                                            // 0x02F0   (0x0008)  
	class UClass*                                      TutorialManagerClass;                                       // 0x02F8   (0x0008)  
	class UAchievementsManager*                        AchievementsManager;                                        // 0x0300   (0x0008)  
	class UAudioLogManager*                            AudioLogManager;                                            // 0x0308   (0x0008)  
	class UClass*                                      AudioLogManagerClass;                                       // 0x0310   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0318   (0x0008)  MISSED
	class UTravelDestinationData*                      TravelDestinationData;                                      // 0x0320   (0x0008)  
	class USaveGameManager*                            SaveGameManager;                                            // 0x0328   (0x0008)  
	class UGameCalendar*                               GameCalendar;                                               // 0x0330   (0x0008)  
	class UCompanionManager*                           CompanionManager;                                           // 0x0338   (0x0008)  
	class UClass*                                      OverridePlayerClass;                                        // 0x0340   (0x0008)  
	class UIndianaLoadingScreenManager*                LoadingScreenManager;                                       // 0x0348   (0x0008)  
	class UMusicManager*                               MusicManager;                                               // 0x0350   (0x0008)  
	class UDLCManager*                                 DLCManager;                                                 // 0x0358   (0x0008)  
	class UParticlePool*                               ParticlePool;                                               // 0x0360   (0x0008)  
	class UBossFightManager*                           BossFightManager;                                           // 0x0368   (0x0008)  
	class UActivityManager*                            ActivityManager;                                            // 0x0370   (0x0008)  
	unsigned char                                      UnknownData02_6[0xC0];                                      // 0x0378   (0x00C0)  MISSED
	TMap<FString, int32_t>                             TexturePoolAdjustments;                                     // 0x0438   (0x0050)  
	TMap<FString, float>                               MinScreenRadiusForLightsOverrides;                          // 0x0488   (0x0050)  
	TMap<FString, float>                               MinScreenRadiusForCSMDepthOverrides;                        // 0x04D8   (0x0050)  
	TMap<FString, float>                               MinScreenRadiusForDepthPrepassOverrides;                    // 0x0528   (0x0050)  
	TMap<FString, float>                               LightMaxDrawDistanceScaleOverrides;                         // 0x0578   (0x0050)  
	TMap<FString, float>                               CSMShadowDistanceFadeoutMultiplierOverrides;                // 0x05C8   (0x0050)  
	TMap<FString, float>                               ShadowRadiusThresholdOverrides;                             // 0x0618   (0x0050)  
	TMap<FString, float>                               RayTracingMaxShadowDistanceOverrides;                       // 0x0668   (0x0050)  
	TMap<FString, float>                               FarShadowDistanceOverrides;                                 // 0x06B8   (0x0050)  
	TMap<FString, float>                               ShadowDistanceScaleOverrides;                               // 0x0708   (0x0050)  
	TMap<FString, float>                               FoliageDensityScaleTier0;                                   // 0x0758   (0x0050)  
	TMap<FString, float>                               FoliageDensityScaleTier1;                                   // 0x07A8   (0x0050)  
	TMap<FString, float>                               FoliageDensityScaleTier2;                                   // 0x07F8   (0x0050)  
	TMap<FString, float>                               FoliageMinimumScreenSizeOverrides;                          // 0x0848   (0x0050)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0898   (0x0008)  MISSED
	TMap<FString, int32_t>                             FarShadowOverrides;                                         // 0x08A0   (0x0050)  
	class UIndianaAutoPlayer*                          AutoPlayer;                                                 // 0x08F0   (0x0008)  
	class UDevelopmentFunctionality*                   DevelopmentFunctionality;                                   // 0x08F8   (0x0008)  
	unsigned char                                      UnknownData04_6[0x460];                                     // 0x0900   (0x0460)  MISSED
	class UWeatherStateContainer*                      PreviousWeather;                                            // 0x0D60   (0x0008)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0D68   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaGameInstance.SetOverridePlayerClass
	// void SetOverridePlayerClass(class UClass* Override);                                                                     // [0x184b020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.ResetEULA
	// void ResetEULA();                                                                                                        // [0xbb4890] Final|Exec|Native|Private 
	// Function /Script/Indiana.IndianaGameInstance.QueueEndGameLoadingScreen
	// void QueueEndGameLoadingScreen(EEndGameImageType EndGameType);                                                           // [0x184aae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.QueueCredits
	// void QueueCredits(bool bShouldQueue);                                                                                    // [0x184aa50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.LowMemoryLoad
	// void LowMemoryLoad(FString Map);                                                                                         // [0x184a950] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaGameInstance.IsXFHDLCInstalled
	// bool IsXFHDLCInstalled();                                                                                                // [0x184a920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.IsINX2Installed
	// bool IsINX2Installed();                                                                                                  // [0x184a5b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameInstance.IsINX2DLCInstalled
	// bool IsINX2DLCInstalled();                                                                                               // [0x184a580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.IsINX1Installed
	// bool IsINX1Installed();                                                                                                  // [0x184a550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameInstance.HasVisitedMainMenu
	// bool HasVisitedMainMenu();                                                                                               // [0x1849ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameInstance.AreCreditsQueued
	// bool AreCreditsQueued();                                                                                                 // [0x1848830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameInstance.AreCreditsPlaying
	// bool AreCreditsPlaying();                                                                                                // [0x1848800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaGameMode
/// Size: 0x03D8 (984 bytes) (0x0003A8 - 0x0003D8) align 8 MaxSize: 0x03D8
class AIndianaGameMode : public AGameMode
{ 
public:
	unsigned char                                      UnknownData00_8[0x28];                                      // 0x03A8   (0x0028)  MISSED
	class UClass*                                      CustomPlayerClass;                                          // 0x03D0   (0x0008)  
};

/// Class /Script/Indiana.IndianaGameplayStatics
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UIndianaGameplayStatics : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Indiana.IndianaGameplayStatics.UndilateTime
	// float UndilateTime(class UObject* ContextObject, float DilatedTime);                                                     // [0x184b6b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.TeleportPlayerToStart
	// void TeleportPlayerToStart(class AIndianaPlayerStart* PlayerStart);                                                      // [0x184b630] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SuicideActor
	// bool SuicideActor(class AActor* Actor);                                                                                  // [0x184b5a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SpawnPooledEmitterAttached
	// class UParticleSystemComponent* SpawnPooledEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType); // [0x184b360] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SpawnPooledEmitterAtLocation
	// class UParticleSystemComponent* SpawnPooledEmitterAtLocation(class UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale); // [0x184b1e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetParticleSystemEmittersEnabled
	// void SetParticleSystemEmittersEnabled(class UParticleSystemComponent* ParticleSystem, TArray<FName>& EnabledEmitters, bool bEnabled); // [0x184b0b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetMoveIgnoreComponentCollision
	// void SetMoveIgnoreComponentCollision(class AActor* Actor, class UPrimitiveComponent* ComponentToIgnore, bool bIgnore);   // [0x184af20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetMoveIgnoreActorCollision
	// void SetMoveIgnoreActorCollision(class AActor* ActorA, class AActor* ActorB, bool bIgnore);                              // [0x184ae20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetIndianaActorPseudoGod
	// void SetIndianaActorPseudoGod(class AActor* Actor, bool bPseudoGodMode);                                                 // [0x184ad60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetIndianaActorInteractable
	// void SetIndianaActorInteractable(class AActor* Actor, bool bInteractable);                                               // [0x184aca0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetIndianaActorGod
	// void SetIndianaActorGod(class AActor* Actor, bool bGodMode);                                                             // [0x184abe0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetFPVCameraFOV
	// void SetFPVCameraFOV(bool bOverrideCustomFOV);                                                                           // [0x184ab60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsRunningAutomationTest
	// bool IsRunningAutomationTest(EBoolResult& Result);                                                                       // [0x184a890] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsQuestActive
	// bool IsQuestActive(FGuid QuestID, EBoolResult& Result);                                                                  // [0x184a7a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsItemStackOfClass
	// bool IsItemStackOfClass(FItemStack& ItemStack, class UClass* ItemType);                                                  // [0x184a6b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsItemOfClass
	// bool IsItemOfClass(class UItem* Item, class UClass* ItemType);                                                           // [0x184a5e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsGlobalVariableValue
	// bool IsGlobalVariableValue(FGlobalVariable& Variable, ComparisonOperator Operator, int32_t Value, EBoolResult& Result);  // [0x184a3d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsGlobalVariableValid
	// bool IsGlobalVariableValid(FGlobalVariable& Variable, EBoolResult& Result);                                              // [0x184a2c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsGlobalValue
	// bool IsGlobalValue(FString VariableName, ComparisonOperator Operator, int32_t Value, EBoolResult& Result);               // [0x184a100] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsCharacterInAnyBarkConversation
	// bool IsCharacterInAnyBarkConversation(class AIndianaCharacter* Character);                                               // [0x184a070] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.InitiateTravel
	// void InitiateTravel(class AIndianaPlayerCharacter* PlayerCharacter, class UTravelDestinationData* TravelDest, bool bTravelFromMapLedger, bool bTriggerAutosave); // [0x1849f10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.InheritMeshProperties
	// void InheritMeshProperties(class UMeshComponent* ParentMesh, class UMeshComponent* ChildMesh);                           // [0x1849e50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IndianaCancelAsyncLoadAsset
	// void IndianaCancelAsyncLoadAsset(int32_t Handle);                                                                        // [0x1849dd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IndianaAsyncLoadAsset
	// void IndianaAsyncLoadAsset(TWeakObjectPtr<UObject*> Asset, int32_t Priority, FDelegateProperty& Callback, int32_t& HandleOut); // [0x1849bc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponSpinProgress
	// float GetWeaponSpinProgress(class UWeapon* Weapon);                                                                      // [0x1849a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponSpinningUp
	// bool GetWeaponSpinningUp(class UWeapon* Weapon);                                                                         // [0x1849b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponProjectileCharge
	// float GetWeaponProjectileCharge(class UWeapon* Weapon);                                                                  // [0x18499f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponIsSwinging
	// bool GetWeaponIsSwinging(class UWeapon* Weapon);                                                                         // [0x1849960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponForceSpin
	// bool GetWeaponForceSpin(class UWeapon* Weapon);                                                                          // [0x18498d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponCurrentCharge
	// float GetWeaponCurrentCharge(class UWeapon* Weapon);                                                                     // [0x1849840] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponCurrentAmmoGaugeAlpha
	// float GetWeaponCurrentAmmoGaugeAlpha(class UWeapon* Weapon);                                                             // [0x18497b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetSkeletalMeshComponent
	// class USkeletalMeshComponent* GetSkeletalMeshComponent(class AActor* TargetActor, EMeshTarget MeshType);                 // [0x18496e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetMeshComponent
	// class UMeshComponent* GetMeshComponent(class AActor* TargetActor, EMeshTarget MeshType);                                 // [0x1849610] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetGameCalendar
	// class UGameCalendar* GetGameCalendar();                                                                                  // [0x18495e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetEventEffectPhysicalSurface
	// TEnumAsByte<EPhysicalSurface> GetEventEffectPhysicalSurface(FEventEffectParams& Params);                                 // [0x18494e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetEventEffectParam
	// float GetEventEffectParam(FEventEffectParams& Params, EEventEffectFloatParams Param);                                    // [0x1849390] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetEventEffectEnabledEmitters
	// TArray<FName> GetEventEffectEnabledEmitters(FEventEffectParams& Params);                                                 // [0x1849260] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetBlendSpaceLength
	// float GetBlendSpaceLength(class UBlendSpaceBase* BlendSpace);                                                            // [0x18491d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetAllAppearanceRelatedMeshes
	// void GetAllAppearanceRelatedMeshes(class AActor* Actor, TArray<UMeshComponent*>& Meshes, bool bIncludeWeapon);           // [0x18490a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetActorBySpeakerName
	// class AActor* GetActorBySpeakerName(ECheckBranches& Branches, FGuid SpeakerReference);                                   // [0x1848fa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.FindFirstChildComponentByTag
	// class USceneComponent* FindFirstChildComponentByTag(ECheckBranches& Branches, class USceneComponent* ParentComponent, FName Tag); // [0x1848e80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.FindChildComponentsByTag
	// bool FindChildComponentsByTag(class USceneComponent* ParentComponent, FName Tag, TArray<USceneComponent*>& ChildComponents); // [0x1848d50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.EnableParticleSystemEmitters
	// void EnableParticleSystemEmitters(class UParticleSystemComponent* ParticleSystem, TArray<FName>& EnabledEmitters);       // [0x1848c70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.DilateTime
	// float DilateTime(class UObject* ContextObject, float UndilatedTime);                                                     // [0x1848ba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.CreateEndGameDialogWidget
	// class UDialogBoxWidget* CreateEndGameDialogWidget(FLocString& BodyLocString);                                            // [0x1848b00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.CreateDialogWidget
	// class UDialogBoxWidget* CreateDialogWidget(FLocString& BodyLocString, bool bCancellable);                                // [0x1848a20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.ConstructComponentByClass
	// class UActorComponent* ConstructComponentByClass(ECheckBranches& Branches, class UObject* InOuter, class UClass* InClass); // [0x1848900] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.ClearPlayerCombat
	// void ClearPlayerCombat();                                                                                                // [0x18488e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.CanCharacterUnlockRestrictedStock
	// bool CanCharacterUnlockRestrictedStock(class AIndianaCharacter* Character);                                              // [0x1848850] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.ApplyGenericDamage
	// void ApplyGenericDamage(class AActor* DamageCauser, class AActor* DamagedActor, float BaseDamage, class UClass* DamageType, bool bUseCustomDamageDescription, FDamageDescription CustomDamageDescription); // [0x18484d0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.ApplyCACVisibilityToActorCollision
	// void ApplyCACVisibilityToActorCollision(class UChildActorComponent* CAC);                                                // [0x1848450] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaGameUserSettings
/// Size: 0x0A68 (2664 bytes) (0x000128 - 0x000A68) align 8 MaxSize: 0x0A68
class UIndianaGameUserSettings : public UGameUserSettings
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0128   (0x0010)  MISSED
	float                                              MasterSoundVolume;                                          // 0x0138   (0x0004)  
	unsigned char                                      UnknownData01_6[0x14];                                      // 0x013C   (0x0014)  MISSED
	float                                              EffectsSoundVolume;                                         // 0x0150   (0x0004)  
	unsigned char                                      UnknownData02_6[0x14];                                      // 0x0154   (0x0014)  MISSED
	float                                              MusicSoundVolume;                                           // 0x0168   (0x0004)  
	unsigned char                                      UnknownData03_6[0x14];                                      // 0x016C   (0x0014)  MISSED
	float                                              UISoundVolume;                                              // 0x0180   (0x0004)  
	unsigned char                                      UnknownData04_6[0x14];                                      // 0x0184   (0x0014)  MISSED
	float                                              VoiceSoundVolume;                                           // 0x0198   (0x0004)  
	unsigned char                                      UnknownData05_6[0x14];                                      // 0x019C   (0x0014)  MISSED
	bool                                               bXAxisInverted;                                             // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData06_6[0x17];                                      // 0x01B1   (0x0017)  MISSED
	bool                                               bControllerXAxisInverted;                                   // 0x01C8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x17];                                      // 0x01C9   (0x0017)  MISSED
	bool                                               bYAxisInverted;                                             // 0x01E0   (0x0001)  
	unsigned char                                      UnknownData08_6[0x17];                                      // 0x01E1   (0x0017)  MISSED
	bool                                               bControllerYAxisInverted;                                   // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData09_6[0x17];                                      // 0x01F9   (0x0017)  MISSED
	bool                                               bControllerAutoSprintEnabled;                               // 0x0210   (0x0001)  
	unsigned char                                      UnknownData10_6[0x17];                                      // 0x0211   (0x0017)  MISSED
	float                                              MouseSensitivityValue;                                      // 0x0228   (0x0004)  
	unsigned char                                      UnknownData11_6[0x14];                                      // 0x022C   (0x0014)  MISSED
	float                                              MouseADSSensitivityValue;                                   // 0x0240   (0x0004)  
	unsigned char                                      UnknownData12_6[0x14];                                      // 0x0244   (0x0014)  MISSED
	float                                              RadialSensitivity;                                          // 0x0258   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x025C   (0x0004)  MISSED
	float                                              ControllerSensitivity;                                      // 0x0260   (0x0004)  
	unsigned char                                      UnknownData14_6[0x14];                                      // 0x0264   (0x0014)  MISSED
	float                                              ControllerADSSensitivity;                                   // 0x0278   (0x0004)  
	unsigned char                                      UnknownData15_6[0x14];                                      // 0x027C   (0x0014)  MISSED
	bool                                               bControllerRumbleEnabled;                                   // 0x0290   (0x0001)  
	unsigned char                                      UnknownData16_6[0x17];                                      // 0x0291   (0x0017)  MISSED
	float                                              ControllerLeftInnerDeadZone;                                // 0x02A8   (0x0004)  
	float                                              ControllerLeftOuterDeadZone;                                // 0x02AC   (0x0004)  
	float                                              ControllerRightInnerDeadZone;                               // 0x02B0   (0x0004)  
	float                                              ControllerRightOuterDeadZone;                               // 0x02B4   (0x0004)  
	unsigned char                                      UnknownData17_6[0x90];                                      // 0x02B8   (0x0090)  MISSED
	int32_t                                            GamepadLayout;                                              // 0x0348   (0x0004)  
	int32_t                                            StickLayout;                                                // 0x034C   (0x0004)  
	TArray<FInputActionKeyMapping>                     AddedActionKeyBinds;                                        // 0x0350   (0x0010)  
	TArray<FInputActionKeyMapping>                     RemovedActionKeyBinds;                                      // 0x0360   (0x0010)  
	TArray<FInputAxisKeyMapping>                       AddedAxisKeyBinds;                                          // 0x0370   (0x0010)  
	TArray<FInputAxisKeyMapping>                       RemovedAxisKeyBinds;                                        // 0x0380   (0x0010)  
	unsigned char                                      UnknownData18_6[0x1B8];                                     // 0x0390   (0x01B8)  MISSED
	bool                                               bPseudoGodMode;                                             // 0x0548   (0x0001)  
	unsigned char                                      UnknownData19_6[0x17];                                      // 0x0549   (0x0017)  MISSED
	bool                                               bGodMode;                                                   // 0x0560   (0x0001)  
	unsigned char                                      UnknownData20_6[0x17];                                      // 0x0561   (0x0017)  MISSED
	bool                                               bInfiniteAmmo;                                              // 0x0578   (0x0001)  
	unsigned char                                      UnknownData21_6[0x33];                                      // 0x0579   (0x0033)  MISSED
	bool                                               bLastConfirmedVSync;                                        // 0x05AC   (0x0001)  
	unsigned char                                      UnknownData22_6[0x13];                                      // 0x05AD   (0x0013)  MISSED
	bool                                               bControllerEnableImpulseTriggers;                           // 0x05C0   (0x0001)  
	unsigned char                                      UnknownData23_6[0x17];                                      // 0x05C1   (0x0017)  MISSED
	float                                              ImpulseTriggerIntensity;                                    // 0x05D8   (0x0004)  
	unsigned char                                      UnknownData24_6[0x14];                                      // 0x05DC   (0x0014)  MISSED
	int32_t                                            SSGIQuality;                                                // 0x05F0   (0x0004)  
	bool                                               bFSR2Enabled;                                               // 0x05F4   (0x0001)  
	bool                                               bLastConfirmedFSR2Enabled;                                  // 0x05F5   (0x0001)  
	EFSR2Mode                                          FSR2Mode;                                                   // 0x05F6   (0x0001)  
	EFSR2Mode                                          LastConfirmedFSR2Mode;                                      // 0x05F7   (0x0001)  
	float                                              MotionBlurScale;                                            // 0x05F8   (0x0004)  
	float                                              LastConfirmedMotionBlurScale;                               // 0x05FC   (0x0004)  
	unsigned char                                      UnknownData25_6[0x70];                                      // 0x0600   (0x0070)  MISSED
	float                                              GammaLevel;                                                 // 0x0670   (0x0004)  
	float                                              LastConfirmedGammaLevel;                                    // 0x0674   (0x0004)  
	unsigned char                                      UnknownData26_6[0x10];                                      // 0x0678   (0x0010)  MISSED
	EFPSLimit                                          FPSLimit;                                                   // 0x0688   (0x0001)  
	EFPSLimit                                          LastConfirmedFPSLimit;                                      // 0x0689   (0x0001)  
	unsigned char                                      UnknownData27_6[0x16];                                      // 0x068A   (0x0016)  MISSED
	float                                              Resolution3D;                                               // 0x06A0   (0x0004)  
	unsigned char                                      UnknownData28_6[0x14];                                      // 0x06A4   (0x0014)  MISSED
	float                                              CustomFieldOfView;                                          // 0x06B8   (0x0004)  
	float                                              LastConfirmedCustomFieldOfView;                             // 0x06BC   (0x0004)  
	unsigned char                                      UnknownData29_6[0x10];                                      // 0x06C0   (0x0010)  MISSED
	bool                                               bChromaticAberration;                                       // 0x06D0   (0x0001)  
	bool                                               bLastChromaticAberration;                                   // 0x06D1   (0x0001)  
	unsigned char                                      UnknownData30_6[0x16];                                      // 0x06D2   (0x0016)  MISSED
	EConversationSubtitleMode                          ConversationSubtitleMode;                                   // 0x06E8   (0x0001)  
	bool                                               bBarkSubtitlesVisible;                                      // 0x06E9   (0x0001)  
	unsigned char                                      UnknownData31_6[0x16];                                      // 0x06EA   (0x0016)  MISSED
	bool                                               bCinematicSubtitlesVisible;                                 // 0x0700   (0x0001)  
	unsigned char                                      UnknownData32_6[0x17];                                      // 0x0701   (0x0017)  MISSED
	bool                                               bConversationResponseVisibleDuringVO;                       // 0x0718   (0x0001)  
	bool                                               bTutorialsEnabled;                                          // 0x0719   (0x0001)  
	EPerformanceMode                                   PerformanceMode;                                            // 0x071A   (0x0001)  
	unsigned char                                      UnknownData33_6[0x15];                                      // 0x071B   (0x0015)  MISSED
	ELanguageMode                                      LanguageMode;                                               // 0x0730   (0x0001)  
	bool                                               bOverrideNativeLanguage;                                    // 0x0731   (0x0001)  
	unsigned char                                      UnknownData34_6[0x1];                                       // 0x0732   (0x0001)  MISSED
	bool                                               bQuestLogVisibleAllTimes;                                   // 0x0733   (0x0001)  
	bool                                               bShowFloatingDamageText;                                    // 0x0734   (0x0001)  
	EWeaponTooltipStatMode                             WeaponTooltipStatMode;                                      // 0x0735   (0x0001)  
	unsigned char                                      UnknownData35_6[0x12];                                      // 0x0736   (0x0012)  MISSED
	bool                                               bHUDVisible;                                                // 0x0748   (0x0001)  
	unsigned char                                      UnknownData36_6[0x17];                                      // 0x0749   (0x0017)  MISSED
	EHUDMode                                           HUDMode;                                                    // 0x0760   (0x0001)  
	unsigned char                                      UnknownData37_6[0x17];                                      // 0x0761   (0x0017)  MISSED
	EFPSIndicatorMode                                  FPSIndicatorMode;                                           // 0x0778   (0x0001)  
	ECompassVisibilityMode                             CompassVisibilityMode;                                      // 0x0779   (0x0001)  
	unsigned char                                      UnknownData38_6[0x16];                                      // 0x077A   (0x0016)  MISSED
	bool                                               bShowWaypointMarkers;                                       // 0x0790   (0x0001)  
	unsigned char                                      UnknownData39_6[0x17];                                      // 0x0791   (0x0017)  MISSED
	bool                                               bShowInteractionOutlines;                                   // 0x07A8   (0x0001)  
	unsigned char                                      UnknownData40_6[0x17];                                      // 0x07A9   (0x0017)  MISSED
	bool                                               bShowInteractionControls;                                   // 0x07C0   (0x0001)  
	EEnemyHealthBarMode                                EnemyHealthBarMode;                                         // 0x07C1   (0x0001)  
	unsigned char                                      UnknownData41_6[0x16];                                      // 0x07C2   (0x0016)  MISSED
	EAimingReticleMode                                 AimingReticleMode;                                          // 0x07D8   (0x0001)  
	EReticleMode                                       ReticleMode;                                                // 0x07D9   (0x0001)  
	unsigned char                                      UnknownData42_6[0x16];                                      // 0x07DA   (0x0016)  MISSED
	bool                                               bShowReticleFeedback;                                       // 0x07F0   (0x0001)  
	bool                                               bOffsetReticle;                                             // 0x07F1   (0x0001)  
	unsigned char                                      UnknownData43_6[0x16];                                      // 0x07F2   (0x0016)  MISSED
	float                                              NotificationDuration;                                       // 0x0808   (0x0004)  
	unsigned char                                      UnknownData44_6[0x14];                                      // 0x080C   (0x0014)  MISSED
	EQuestUpdateMode                                   QuestUpdateMode;                                            // 0x0820   (0x0001)  
	unsigned char                                      UnknownData45_6[0x17];                                      // 0x0821   (0x0017)  MISSED
	EEnemyAwarenessMeterMode                           EnemyAwarenessMeterMode;                                    // 0x0838   (0x0001)  
	bool                                               bShowEnemyAwarenessMeters;                                  // 0x0839   (0x0001)  
	unsigned char                                      UnknownData46_6[0x16];                                      // 0x083A   (0x0016)  MISSED
	EPlayerStatusBarMode                               PlayerStatusBarMode;                                        // 0x0850   (0x0001)  
	unsigned char                                      UnknownData47_6[0x17];                                      // 0x0851   (0x0017)  MISSED
	bool                                               bShowPlayerStatusEffects;                                   // 0x0868   (0x0001)  
	EPlayerStatusEffectTextMode                        PlayerStatusEffectTextMode;                                 // 0x0869   (0x0001)  
	ECompanionAbilityUIMode                            CompanionAbilityUIMode;                                     // 0x086A   (0x0001)  
	unsigned char                                      UnknownData48_6[0x15];                                      // 0x086B   (0x0015)  MISSED
	ECompanionAbilityBindingMode                       CompanionAbilityBindingMode;                                // 0x0880   (0x0001)  
	unsigned char                                      UnknownData49_6[0x17];                                      // 0x0881   (0x0017)  MISSED
	EHeldWeaponDisplayMode                             HeldWeaponDisplayMode;                                      // 0x0898   (0x0001)  
	unsigned char                                      UnknownData50_6[0x17];                                      // 0x0899   (0x0017)  MISSED
	EHeldWeaponDisplayText                             HeldWeaponDisplayTextMode;                                  // 0x08B0   (0x0001)  
	unsigned char                                      UnknownData51_6[0x17];                                      // 0x08B1   (0x0017)  MISSED
	EAreaNameMode                                      AreaNameMode;                                               // 0x08C8   (0x0001)  
	unsigned char                                      UnknownData52_6[0x17];                                      // 0x08C9   (0x0017)  MISSED
	EDirectionalDamageIndicatorMode                    DirectionalDamageIndicatorMode;                             // 0x08E0   (0x0001)  
	ESurvivalMode                                      SurvivalMeterMode;                                          // 0x08E1   (0x0001)  
	bool                                               bShowSurvivalMeters;                                        // 0x08E2   (0x0001)  
	unsigned char                                      UnknownData53_6[0x15];                                      // 0x08E3   (0x0015)  MISSED
	EMedicalInhalerMode                                MedicalInhalerUIMode;                                       // 0x08F8   (0x0001)  
	unsigned char                                      UnknownData54_6[0x17];                                      // 0x08F9   (0x0017)  MISSED
	EAbilityControlMode                                AbilityControlUIMode;                                       // 0x0910   (0x0001)  
	unsigned char                                      UnknownData55_6[0x17];                                      // 0x0911   (0x0017)  MISSED
	ETTDDisplayMode                                    TTDDisplayMode;                                             // 0x0928   (0x0001)  
	unsigned char                                      UnknownData56_6[0x17];                                      // 0x0929   (0x0017)  MISSED
	EDodgeDisplayMode                                  DodgeDisplayMode;                                           // 0x0940   (0x0001)  
	unsigned char                                      UnknownData57_6[0x17];                                      // 0x0941   (0x0017)  MISSED
	ECompanionStatusMode                               CompanionStatusUIMode;                                      // 0x0958   (0x0001)  
	unsigned char                                      UnknownData58_6[0x17];                                      // 0x0959   (0x0017)  MISSED
	ECompanionAbilityPassiveCDMode                     CompanionAbilityPassiveCDMode;                              // 0x0970   (0x0001)  
	ECompanionAbilityPassiveNotificationMode           CompanionAbilityPassiveNotificationMode;                    // 0x0971   (0x0001)  
	bool                                               bShowLevelUpNotification;                                   // 0x0972   (0x0001)  
	unsigned char                                      UnknownData59_6[0x15];                                      // 0x0973   (0x0015)  MISSED
	bool                                               bShowLevelUpReminders;                                      // 0x0988   (0x0001)  
	unsigned char                                      UnknownData60_6[0x17];                                      // 0x0989   (0x0017)  MISSED
	bool                                               bShowCombatIndicator;                                       // 0x09A0   (0x0001)  
	bool                                               bShowTTDScanner;                                            // 0x09A1   (0x0001)  
	unsigned char                                      UnknownData61_6[0x16];                                      // 0x09A2   (0x0016)  MISSED
	ETTDReticleMeterMode                               TTDReticleMeterMode;                                        // 0x09B8   (0x0001)  
	unsigned char                                      UnknownData62_6[0x17];                                      // 0x09B9   (0x0017)  MISSED
	bool                                               bShowTTDStatusEffectPreview;                                // 0x09D0   (0x0001)  
	bool                                               bShowDisguiseMeter;                                         // 0x09D1   (0x0001)  
	unsigned char                                      UnknownData63_6[0x16];                                      // 0x09D2   (0x0016)  MISSED
	bool                                               bShowEquipmentRepairWarning;                                // 0x09E8   (0x0001)  
	unsigned char                                      UnknownData64_6[0x17];                                      // 0x09E9   (0x0017)  MISSED
	bool                                               bSimplifiedEquipmentRepairWarning;                          // 0x0A00   (0x0001)  
	EWeaponSelectMode                                  WeaponSelectMode;                                           // 0x0A01   (0x0001)  
	EWeaponSelectAxisMode                              WeaponSelectAxisMode;                                       // 0x0A02   (0x0001)  
	ESimplifiedLockpickHackingMode                     SimplifiedLockpickHackingMode;                              // 0x0A03   (0x0001)  
	bool                                               bShowLootTooltips;                                          // 0x0A04   (0x0001)  
	bool                                               bShowLootControls;                                          // 0x0A05   (0x0001)  
	EDialogSkillMode                                   DialogSkillMode;                                            // 0x0A06   (0x0001)  
	bool                                               bShowTutorialNotifications;                                 // 0x0A07   (0x0001)  
	float                                              TooltipDelay;                                               // 0x0A08   (0x0004)  
	bool                                               bUseEnlargedFontSize;                                       // 0x0A0C   (0x0001)  
	unsigned char                                      UnknownData65_6[0x7];                                       // 0x0A0D   (0x0007)  MISSED
	int32_t                                            OverrideFontModifier;                                       // 0x0A14   (0x0004)  
	unsigned char                                      UnknownData66_6[0x10];                                      // 0x0A18   (0x0010)  MISSED
	bool                                               bShowPlayerHelmet;                                          // 0x0A28   (0x0001)  
	bool                                               bShowCompanionHelmets;                                      // 0x0A29   (0x0001)  
	bool                                               bCinematicKillCam;                                          // 0x0A2A   (0x0001)  
	unsigned char                                      UnknownData67_6[0x15];                                      // 0x0A2B   (0x0015)  MISSED
	bool                                               bHeadbobbing;                                               // 0x0A40   (0x0001)  
	unsigned char                                      UnknownData68_6[0x17];                                      // 0x0A41   (0x0017)  MISSED
	bool                                               bConversationContinueOnVOEnd;                               // 0x0A58   (0x0001)  
	bool                                               bViewBaseItemStats;                                         // 0x0A59   (0x0001)  
	ECompanionOutlineMode                              CompanionOutlineMode;                                       // 0x0A5A   (0x0001)  
	unsigned char                                      UnknownData69_6[0x1];                                       // 0x0A5B   (0x0001)  MISSED
	bool                                               bIsFreshUserSettings;                                       // 0x0A5C   (0x0001)  
	bool                                               bOneTimeSaveCompressionCompleted;                           // 0x0A5D   (0x0001)  
	bool                                               bOneTimeSaveINX1;                                           // 0x0A5E   (0x0001)  
	bool                                               bOneTimeSaveINX2;                                           // 0x0A5F   (0x0001)  
	uint32_t                                           SignedVersionOfEULA;                                        // 0x0A60   (0x0004)  
	unsigned char                                      UnknownData70_7[0x4];                                       // 0x0A64   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaGameUserSettings.SetYAxisInverted
	// void SetYAxisInverted(bool Value);                                                                                       // [0x1854aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetXAxisInverted
	// void SetXAxisInverted(bool Value);                                                                                       // [0x1854a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetWeaponTooltipStatMode
	// void SetWeaponTooltipStatMode(EWeaponTooltipStatMode Mode);                                                              // [0x1854990] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetWeaponSelectMode
	// void SetWeaponSelectMode(EWeaponSelectMode ModeIn);                                                                      // [0x1854910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetWeaponSelectAxisMode
	// void SetWeaponSelectAxisMode(EWeaponSelectAxisMode ModeIn);                                                              // [0x1854890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetVSyncWrapper
	// void SetVSyncWrapper(bool bEnabled);                                                                                     // [0x18546f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetVoiceSoundVolume
	// void SetVoiceSoundVolume(float Value);                                                                                   // [0x1854810] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetViewBaseStats
	// void SetViewBaseStats(bool Value);                                                                                       // [0x1854780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetUISoundVolume
	// void SetUISoundVolume(float Value);                                                                                      // [0x1854670] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetTutorialsEnabled
	// void SetTutorialsEnabled(bool bEnabled);                                                                                 // [0x18545e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetTTDDisplayMode
	// void SetTTDDisplayMode(ETTDDisplayMode ModeIn);                                                                          // [0x18544e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetTooltipDelay
	// void SetTooltipDelay(float Delay);                                                                                       // [0x1854560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetSurvivalMeterMode
	// void SetSurvivalMeterMode(bool bVisibleIn);                                                                              // [0x1854450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetSSGIQuality
	// void SetSSGIQuality(int32_t Value);                                                                                      // [0x1853690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetSSGIMode
	// void SetSSGIMode(ESSGIMode Value);                                                                                       // [0x1853610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowWaypointMarkers
	// void SetShowWaypointMarkers(bool bShow);                                                                                 // [0x18543c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowTutorialNotifications
	// void SetShowTutorialNotifications(bool bShow);                                                                           // [0x1854330] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowTTDStatusEffectPreview
	// void SetShowTTDStatusEffectPreview(bool bShow);                                                                          // [0x18542a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowTTDScanner
	// void SetShowTTDScanner(bool bShow);                                                                                      // [0x1854210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowTTDReticleMeter
	// void SetShowTTDReticleMeter(ETTDReticleMeterMode ModeIn);                                                                // [0x1854190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowReticleFeedback
	// void SetShowReticleFeedback(bool bShow);                                                                                 // [0x1854100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowPlayerStatusEffects
	// void SetShowPlayerStatusEffects(bool bShow);                                                                             // [0x1854070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowPlayerHelmet
	// void SetShowPlayerHelmet(bool bShow);                                                                                    // [0x1853fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowLootTooltips
	// void SetShowLootTooltips(bool bShow);                                                                                    // [0x1853f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowLootControls
	// void SetShowLootControls(bool bShow);                                                                                    // [0x1853ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowLevelUpReminders
	// void SetShowLevelUpReminders(bool bShow);                                                                                // [0x1853e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowLevelUpNotification
	// void SetShowLevelUpNotification(bool bShow);                                                                             // [0x1853da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowInteractionOutlines
	// void SetShowInteractionOutlines(bool bShow);                                                                             // [0x1853d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowInteractionControls
	// void SetShowInteractionControls(bool bShow);                                                                             // [0x1853c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowFloatingDamageText
	// void SetShowFloatingDamageText(bool bShow);                                                                              // [0x1853bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowEquipmentRepairWarning
	// void SetShowEquipmentRepairWarning(bool bShow);                                                                          // [0x1853b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowEnemyHealthBars
	// void SetShowEnemyHealthBars(EEnemyHealthBarMode ModeIn);                                                                 // [0x1853ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowEnemyAwarenessMeters
	// void SetShowEnemyAwarenessMeters(bool bVisible);                                                                         // [0x1853a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowDisguiseMeter
	// void SetShowDisguiseMeter(bool bShow);                                                                                   // [0x18539c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowDirectionalDamageIndicators
	// void SetShowDirectionalDamageIndicators(EDirectionalDamageIndicatorMode ModeIn);                                         // [0x1853940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowCompass
	// void SetShowCompass(ECompassVisibilityMode ModeIn);                                                                      // [0x18538c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowCompanionPassiveCD
	// void SetShowCompanionPassiveCD(ECompanionAbilityPassiveCDMode ModeIn);                                                   // [0x1853840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowCompanionHelmets
	// void SetShowCompanionHelmets(bool bShow);                                                                                // [0x18537b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowCombatIndicator
	// void SetShowCombatIndicator(bool bShow);                                                                                 // [0x1853720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetRadialSensitivity
	// void SetRadialSensitivity(float Value);                                                                                  // [0x1853590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetQuestUpdateMode
	// void SetQuestUpdateMode(EQuestUpdateMode bShow);                                                                         // [0x1853510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetPseudoGodMode
	// void SetPseudoGodMode(bool Value);                                                                                       // [0x1853480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetPlayerStatusEffectTextMode
	// void SetPlayerStatusEffectTextMode(EPlayerStatusEffectTextMode ModeIn);                                                  // [0x1853400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetPlayerStatusBarMode
	// void SetPlayerStatusBarMode(EPlayerStatusBarMode ModeIn);                                                                // [0x1853380] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetPerformanceMode
	// void SetPerformanceMode(EPerformanceMode PerformanceModeIn);                                                             // [0x1853300] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetOffsetReticle
	// void SetOffsetReticle(bool bUseOffset);                                                                                  // [0x1853270] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetNotificationDuration
	// void SetNotificationDuration(float DurationIn);                                                                          // [0x18531f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMusicSoundVolume
	// void SetMusicSoundVolume(float Value);                                                                                   // [0x1853170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMouseSensitivity
	// void SetMouseSensitivity(float Value);                                                                                   // [0x18530f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMouseADSSensitivity
	// void SetMouseADSSensitivity(float Value);                                                                                // [0x1853070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMotionBlurScale
	// void SetMotionBlurScale(float NewMotionBlurScale);                                                                       // [0x1852ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMedicalInhalerUIMode
	// void SetMedicalInhalerUIMode(EMedicalInhalerMode InhalerModeIn);                                                         // [0x1852f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMasterSoundVolume
	// void SetMasterSoundVolume(float Value);                                                                                  // [0x1852ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetLanguageMode
	// void SetLanguageMode(ELanguageMode LanguageModeIn, bool bPending);                                                       // [0x1852e20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetIsSimplifiedLockpickHackingMode
	// void SetIsSimplifiedLockpickHackingMode(ESimplifiedLockpickHackingMode ModeIn);                                          // [0x1852da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetIsSimplifiedEquipmentRepairWarning
	// void SetIsSimplifiedEquipmentRepairWarning(bool bShow);                                                                  // [0x1852d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetIsFreshUserSettings
	// void SetIsFreshUserSettings(bool Value);                                                                                 // [0x1852c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetInfiniteAmmo
	// void SetInfiniteAmmo(bool Value);                                                                                        // [0x1852bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetImpulseTriggerIntensity
	// void SetImpulseTriggerIntensity(float Value);                                                                            // [0x1852b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHUDVisibility
	// void SetHUDVisibility(bool bVisibilityIn);                                                                               // [0x1852950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHUDMode
	// void SetHUDMode(EHUDMode ModeIn);                                                                                        // [0x18528d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHeldWeaponDisplayTextMode
	// void SetHeldWeaponDisplayTextMode(EHeldWeaponDisplayText ModeIn);                                                        // [0x1852af0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHeldWeaponDisplayMode
	// void SetHeldWeaponDisplayMode(EHeldWeaponDisplayMode ModeIn);                                                            // [0x1852a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHeadbobbing
	// void SetHeadbobbing(bool bEnabledIn);                                                                                    // [0x18529e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetGraphicsQuality
	// void SetGraphicsQuality(int32_t Value);                                                                                  // [0x1852840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetGodMode
	// void SetGodMode(bool Value);                                                                                             // [0x18527b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetGammaLevel
	// void SetGammaLevel(float GammaLevelIn);                                                                                  // [0x1852730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFullscreenModeThenBroadcast
	// void SetFullscreenModeThenBroadcast(TEnumAsByte<EWindowMode> Value);                                                     // [0x18526b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFSR2Mode
	// void SetFSR2Mode(EFSR2Mode Value);                                                                                       // [0x18525a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFSR2Enabled
	// void SetFSR2Enabled(bool Value);                                                                                         // [0x1852510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFPSLimit
	// void SetFPSLimit(EFPSLimit FPSLimitIn);                                                                                  // [0x1852490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFPSIndicatorMode
	// void SetFPSIndicatorMode(EFPSIndicatorMode ModeIn);                                                                      // [0x1852410] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFOV
	// void SetFOV(float FOVIn);                                                                                                // [0x1852390] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFontSizeModifier
	// void SetFontSizeModifier(int32_t ModifierIn);                                                                            // [0x1852620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetEffectsSoundVolume
	// void SetEffectsSoundVolume(float Value);                                                                                 // [0x1852310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetDodgeDisplayMode
	// void SetDodgeDisplayMode(EDodgeDisplayMode ModeIn);                                                                      // [0x1852290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetDialogSkillMode
	// void SetDialogSkillMode(EDialogSkillMode ModeIn);                                                                        // [0x1852210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetConversationSubtitleMode
	// void SetConversationSubtitleMode(EConversationSubtitleMode Mode);                                                        // [0x1852190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetConversationResponseVisibleDuringVO
	// void SetConversationResponseVisibleDuringVO(bool bVisible);                                                              // [0x1852100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetConversationContinueOnVOEnd
	// void SetConversationContinueOnVOEnd(bool Value);                                                                         // [0x1852070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerYAxisInverted
	// void SetControllerYAxisInverted(bool Value);                                                                             // [0x1851fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerXAxisInverted
	// void SetControllerXAxisInverted(bool Value);                                                                             // [0x1851f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerSensitivity
	// void SetControllerSensitivity(float Value);                                                                              // [0x1851ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerRumbleEnabled
	// void SetControllerRumbleEnabled(bool Value);                                                                             // [0x1851e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerRightOuterDeadZone
	// void SetControllerRightOuterDeadZone(float Value);                                                                       // [0x1851dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerRightInnerDeadZone
	// void SetControllerRightInnerDeadZone(float Value);                                                                       // [0x1851d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerLeftOuterDeadZone
	// void SetControllerLeftOuterDeadZone(float Value);                                                                        // [0x1851cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerLeftInnerDeadZone
	// void SetControllerLeftInnerDeadZone(float Value);                                                                        // [0x1851c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerEnableImpulseTriggers
	// void SetControllerEnableImpulseTriggers(bool bEnable);                                                                   // [0x1851bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerAutoSprintEnabled
	// void SetControllerAutoSprintEnabled(bool Value);                                                                         // [0x1851b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerADSSensitivity
	// void SetControllerADSSensitivity(float Value);                                                                           // [0x1851aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionStatusUIMode
	// void SetCompanionStatusUIMode(ECompanionStatusMode ModeIn);                                                              // [0x1851a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionPassiveCDNotificationMode
	// void SetCompanionPassiveCDNotificationMode(ECompanionAbilityPassiveNotificationMode ModeIn);                             // [0x18519a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionOutlineMode
	// void SetCompanionOutlineMode(ECompanionOutlineMode Mode);                                                                // [0x1851920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionAbilityUIMode
	// void SetCompanionAbilityUIMode(ECompanionAbilityUIMode ModeIn);                                                          // [0x18518a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionAbilityBindingMode
	// void SetCompanionAbilityBindingMode(ECompanionAbilityBindingMode ModeIn);                                                // [0x1851820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetColorblindModeEnabled
	// void SetColorblindModeEnabled(bool bEnabled);                                                                            // [0x18517b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCinematicSubtitlesVisible
	// void SetCinematicSubtitlesVisible(bool bVisible);                                                                        // [0x1851720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCinematicKillCam
	// void SetCinematicKillCam(bool bEnabledIn);                                                                               // [0x1851690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetChromaticAberration
	// void SetChromaticAberration(bool bUseChromaticAberration);                                                               // [0x1851600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetBarkSubtitleMode
	// void SetBarkSubtitleMode(bool bVisible);                                                                                 // [0x1851570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAxisKeyBinds
	// void SetAxisKeyBinds(TArray<FInputAxisKeyMapping> OldValues, TArray<FInputAxisKeyMapping> NewValues);                    // [0x18512d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAutoCollapseItemViewers
	// void SetAutoCollapseItemViewers(bool bEnabled);                                                                          // [0x1851240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAreaNameMode
	// void SetAreaNameMode(EAreaNameMode AreaModeIn);                                                                          // [0x18511c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAntiAliasingMethod
	// void SetAntiAliasingMethod(int32_t Method);                                                                              // [0x1851130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAimingReticleMode
	// void SetAimingReticleMode(EReticleMode ModeIn);                                                                          // [0x18510b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetActionKeyBinds
	// void SetActionKeyBinds(TArray<FInputActionKeyMapping> OldValues, TArray<FInputActionKeyMapping> NewValues);              // [0x1850ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAbilityControlUIMode
	// void SetAbilityControlUIMode(EAbilityControlMode ModeIn);                                                                // [0x1850e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.Set3DResolution
	// void Set3DResolution(float ResolutionIn);                                                                                // [0x1850dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.ResetAllKeyBinds
	// void ResetAllKeyBinds();                                                                                                 // [0x1850da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.OnDetectGraphics
	// void OnDetectGraphics();                                                                                                 // [0x1850d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.IsLegalSigned
	// bool IsLegalSigned();                                                                                                    // [0x1850d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.IsConversationResponseVisibleDuringVO
	// bool IsConversationResponseVisibleDuringVO();                                                                            // [0x1850d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetYAxisInverted
	// bool GetYAxisInverted();                                                                                                 // [0x1850cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetXAxisInverted
	// bool GetXAxisInverted();                                                                                                 // [0x1850cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetWeaponTooltipStatMode
	// EWeaponTooltipStatMode GetWeaponTooltipStatMode();                                                                       // [0x1850ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetWeaponSelectMode
	// EWeaponSelectMode GetWeaponSelectMode();                                                                                 // [0x1850c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetWeaponSelectAxisMode
	// EWeaponSelectAxisMode GetWeaponSelectAxisMode();                                                                         // [0x1850c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetVSyncWrapper
	// bool GetVSyncWrapper();                                                                                                  // [0x1850bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetVoiceSoundVolume
	// float GetVoiceSoundVolume();                                                                                             // [0x1850c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetViewBaseStats
	// bool GetViewBaseStats();                                                                                                 // [0x1850be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetUISoundVolume
	// float GetUISoundVolume();                                                                                                // [0x1850b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetTutorialsEnabled
	// bool GetTutorialsEnabled();                                                                                              // [0x1850b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetTTDDisplayMode
	// ETTDDisplayMode GetTTDDisplayMode();                                                                                     // [0x1850550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetTooltipDelay
	// float GetTooltipDelay();                                                                                                 // [0x1850b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetSurvivalMeterMode
	// bool GetSurvivalMeterMode();                                                                                             // [0x1850af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetSSGIQuality
	// int32_t GetSSGIQuality();                                                                                                // [0x1850640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowWaypointMarkers
	// bool GetShowWaypointMarkers();                                                                                           // [0x1850ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowTutorialNotifications
	// bool GetShowTutorialNotifications();                                                                                     // [0x1850a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowTTDStatusEffectPreview
	// bool GetShowTTDStatusEffectPreview();                                                                                    // [0x1850a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowTTDScanner
	// bool GetShowTTDScanner();                                                                                                // [0x1850a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowTTDReticleMeter
	// ETTDReticleMeterMode GetShowTTDReticleMeter();                                                                           // [0x1850a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowReticleFeedback
	// bool GetShowReticleFeedback();                                                                                           // [0x18509d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowPlayerStatusEffects
	// bool GetShowPlayerStatusEffects();                                                                                       // [0x18509a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowPlayerHelmet
	// bool GetShowPlayerHelmet();                                                                                              // [0x1850970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowLootTooltips
	// bool GetShowLootTooltips();                                                                                              // [0x1850940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowLootControls
	// bool GetShowLootControls();                                                                                              // [0x1850910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowLevelUpReminders
	// bool GetShowLevelUpReminders();                                                                                          // [0x18508e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowLevelUpNotification
	// bool GetShowLevelUpNotification();                                                                                       // [0x18508b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowInteractionOutlines
	// bool GetShowInteractionOutlines();                                                                                       // [0x1850880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowInteractionControls
	// bool GetShowInteractionControls();                                                                                       // [0x1850850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowFloatingDamageText
	// bool GetShowFloatingDamageText();                                                                                        // [0x1850820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowEquipmentRepairWarning
	// bool GetShowEquipmentRepairWarning();                                                                                    // [0x18507f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowEnemyHealthBars
	// EEnemyHealthBarMode GetShowEnemyHealthBars();                                                                            // [0x18507c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowEnemyAwarenessMeters
	// bool GetShowEnemyAwarenessMeters();                                                                                      // [0x1850790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowDisguiseMeter
	// bool GetShowDisguiseMeter();                                                                                             // [0x1850760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowDirectionalDamageIndicators
	// EDirectionalDamageIndicatorMode GetShowDirectionalDamageIndicators();                                                    // [0x1850730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowCompass
	// ECompassVisibilityMode GetShowCompass();                                                                                 // [0x1850700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowCompanionPassiveCD
	// ECompanionAbilityPassiveCDMode GetShowCompanionPassiveCD();                                                              // [0x18506d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowCompanionHelmets
	// bool GetShowCompanionHelmets();                                                                                          // [0x18506a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowCombatIndicator
	// bool GetShowCombatIndicator();                                                                                           // [0x1850670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetRadialSensitivity
	// float GetRadialSensitivity();                                                                                            // [0x1850610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetQuestUpdateMode
	// EQuestUpdateMode GetQuestUpdateMode();                                                                                   // [0x18505e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetPseudoGodMode
	// bool GetPseudoGodMode();                                                                                                 // [0x18505b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetPlayerStatusEffectTextMode
	// EPlayerStatusEffectTextMode GetPlayerStatusEffectTextMode();                                                             // [0x1850580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetPlayerStatusBarMode
	// EPlayerStatusBarMode GetPlayerStatusBarMode();                                                                           // [0x1850550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetPerformanceMode
	// EPerformanceMode GetPerformanceMode();                                                                                   // [0x1850520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetOffsetReticle
	// bool GetOffsetReticle();                                                                                                 // [0x18504f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetNotificationDuration
	// float GetNotificationDuration();                                                                                         // [0x18504c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMusicSoundVolume
	// float GetMusicSoundVolume();                                                                                             // [0x1850490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMouseSensitivity
	// float GetMouseSensitivity();                                                                                             // [0x1850460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMouseADSSensitivity
	// float GetMouseADSSensitivity();                                                                                          // [0x1850430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMotionBlurScale
	// float GetMotionBlurScale();                                                                                              // [0xb9d640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMedicalInhalerUIMode
	// EMedicalInhalerMode GetMedicalInhalerUIMode();                                                                           // [0x1850400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMasterSoundVolume
	// float GetMasterSoundVolume();                                                                                            // [0x18503d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetLanguageMode
	// ELanguageMode GetLanguageMode();                                                                                         // [0x18503a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetIsSimplifiedLockpickHackingMode
	// ESimplifiedLockpickHackingMode GetIsSimplifiedLockpickHackingMode();                                                     // [0x1850370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetIsSimplifiedEquipmentRepairWarning
	// bool GetIsSimplifiedEquipmentRepairWarning();                                                                            // [0x1850340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetIsFreshUserSettings
	// bool GetIsFreshUserSettings();                                                                                           // [0x1850310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetInfiniteAmmo
	// bool GetInfiniteAmmo();                                                                                                  // [0x18502e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetImpulseTriggerIntensity
	// float GetImpulseTriggerIntensity();                                                                                      // [0x18502b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHUDVisibility
	// bool GetHUDVisibility();                                                                                                 // [0x18501f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHUDMode
	// EHUDMode GetHUDMode();                                                                                                   // [0x18501c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHeldWeaponDisplayTextMode
	// EHeldWeaponDisplayText GetHeldWeaponDisplayTextMode();                                                                   // [0x1850280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHeldWeaponDisplayMode
	// EHeldWeaponDisplayMode GetHeldWeaponDisplayMode();                                                                       // [0x1850250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHeadbobbing
	// bool GetHeadbobbing();                                                                                                   // [0x1850220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetGraphicsQuality
	// int32_t GetGraphicsQuality();                                                                                            // [0x1850190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetGodMode
	// bool GetGodMode();                                                                                                       // [0x1850160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetGammaLevel
	// float GetGammaLevel();                                                                                                   // [0x1850130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFSR2Mode
	// EFSR2Mode GetFSR2Mode();                                                                                                 // [0x18500d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFSR2Enabled
	// bool GetFSR2Enabled();                                                                                                   // [0xb9d610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFPSLimit
	// EFPSLimit GetFPSLimit();                                                                                                 // [0x18500a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFPSIndicatorMode
	// EFPSIndicatorMode GetFPSIndicatorMode();                                                                                 // [0x1850070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFOV
	// float GetFOV();                                                                                                          // [0x1850040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFontSizeModifier
	// int32_t GetFontSizeModifier();                                                                                           // [0x1850100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetEffectsSoundVolume
	// float GetEffectsSoundVolume();                                                                                           // [0x1850010] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetDodgeDisplayMode
	// EDodgeDisplayMode GetDodgeDisplayMode();                                                                                 // [0x184ffe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetDialogSkillMode
	// EDialogSkillMode GetDialogSkillMode();                                                                                   // [0x184ffb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetDefaultSSGIQualityForLevel
	// int32_t GetDefaultSSGIQualityForLevel(int32_t InQualityLevel);                                                           // [0x184ff20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetConversationSubtitleMode
	// EConversationSubtitleMode GetConversationSubtitleMode();                                                                 // [0x184fef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetConversationContinueOnVOEnd
	// bool GetConversationContinueOnVOEnd();                                                                                   // [0x184fed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerYAxisInverted
	// bool GetControllerYAxisInverted();                                                                                       // [0x184fea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerXAxisInverted
	// bool GetControllerXAxisInverted();                                                                                       // [0x184fe70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerSensitivity
	// float GetControllerSensitivity();                                                                                        // [0x184fe40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerRumbleEnabled
	// bool GetControllerRumbleEnabled();                                                                                       // [0x184fe10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerRightOuterDeadZone
	// float GetControllerRightOuterDeadZone();                                                                                 // [0x184fdf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerRightInnerDeadZone
	// float GetControllerRightInnerDeadZone();                                                                                 // [0x184fdd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerLeftOuterDeadZone
	// float GetControllerLeftOuterDeadZone();                                                                                  // [0x184fdb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerLeftInnerDeadZone
	// float GetControllerLeftInnerDeadZone();                                                                                  // [0x184fd90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerEnableImpulseTriggers
	// bool GetControllerEnableImpulseTriggers();                                                                               // [0x184fd60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerAutoSprintEnabled
	// bool GetControllerAutoSprintEnabled();                                                                                   // [0x184fd30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerADSSensitivity
	// float GetControllerADSSensitivity();                                                                                     // [0x184fd00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionStatusUIMode
	// ECompanionStatusMode GetCompanionStatusUIMode();                                                                         // [0x184fcd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionPassiveCDNotificationMode
	// ECompanionAbilityPassiveNotificationMode GetCompanionPassiveCDNotificationMode();                                        // [0x184fca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionOutlineMode
	// ECompanionOutlineMode GetCompanionOutlineMode();                                                                         // [0x184fc80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionAbilityUIMode
	// ECompanionAbilityUIMode GetCompanionAbilityUIMode();                                                                     // [0x184fc50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionAbilityBindingMode
	// ECompanionAbilityBindingMode GetCompanionAbilityBindingMode();                                                           // [0x184fc20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetColorblindModeEnabled
	// bool GetColorblindModeEnabled();                                                                                         // [0x184fc00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCinematicSubtitlesVisible
	// bool GetCinematicSubtitlesVisible();                                                                                     // [0x184fbd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCinematicKillCam
	// bool GetCinematicKillCam();                                                                                              // [0x184fba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetChromaticAberration
	// bool GetChromaticAberration();                                                                                           // [0x184fb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetBarkSubtitlesVisible
	// bool GetBarkSubtitlesVisible();                                                                                          // [0x184fb40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAxisKeyBinds
	// TArray<FInputAxisKeyMapping> GetAxisKeyBinds(FName AxisName, float Scale);                                               // [0x184f970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAutoCollapseItemViewers
	// bool GetAutoCollapseItemViewers();                                                                                       // [0x184f950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAreaNameMode
	// EAreaNameMode GetAreaNameMode();                                                                                         // [0x184f920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAntiAliasingMethod
	// int32_t GetAntiAliasingMethod();                                                                                         // [0x184f8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAimingReticleMode
	// EReticleMode GetAimingReticleMode();                                                                                     // [0x184f8c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetActionKeyBinds
	// TArray<FInputActionKeyMapping> GetActionKeyBinds(FName ActionName);                                                      // [0x184f720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAbilityControlUIMode
	// EAbilityControlMode GetAbilityControlUIMode();                                                                           // [0x184f6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.Get3DResolution
	// float Get3DResolution();                                                                                                 // [0x184f6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaGameViewportClient
/// Size: 0x0398 (920 bytes) (0x000380 - 0x000398) align 8 MaxSize: 0x0398
class UIndianaGameViewportClient : public UGameViewportClient
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0380   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaGameViewportClient.SetSoundOverride
	// void SetSoundOverride();                                                                                                 // [0x185b870] Final|Native|Public  
};

/// Class /Script/Indiana.IndianaGlobals
/// Size: 0x0278 (632 bytes) (0x000030 - 0x000278) align 8 MaxSize: 0x0278
class UIndianaGlobals : public UObject
{ 
public:
	class UGlobalWeaponData*                           GlobalWeaponData;                                           // 0x0030   (0x0008)  
	class UGlobalMeleeData*                            GlobalMeleeData;                                            // 0x0038   (0x0008)  
	class UGlobalArmorData*                            GlobalArmorData;                                            // 0x0040   (0x0008)  
	class UGlobalTeamData*                             GlobalTeamData;                                             // 0x0048   (0x0008)  
	class UGlobalFactionData*                          GlobalFactionData;                                          // 0x0050   (0x0008)  
	class UGlobalAIData*                               GlobalAIData;                                               // 0x0058   (0x0008)  
	class UGlobalUIData*                               GlobalUIData;                                               // 0x0060   (0x0008)  
	class UGlobalItemData*                             GlobalItemData;                                             // 0x0068   (0x0008)  
	class UCharacterCreationData*                      GlobalCharacterCreationData;                                // 0x0070   (0x0008)  
	class URedirectorMap*                              GlobalRedirectorMap;                                        // 0x0078   (0x0008)  
	class UIndianaStatGlobals*                         GlobalIndianaStatData;                                      // 0x0080   (0x0008)  
	class UGlobalAchievementData*                      GlobalAchievementData;                                      // 0x0088   (0x0008)  
	class UGlobalKeybindsData*                         GlobalKeybindData;                                          // 0x0090   (0x0008)  
	class UIndianaFormulas*                            IndianaFormulas;                                            // 0x0098   (0x0008)  
	class UClass*                                      IndianaFormulasClass;                                       // 0x00A0   (0x0008)  
	class UPointOfNoReturnRollbackData*                PointOfNoReturnRollback;                                    // 0x00A8   (0x0008)  
	class UClass*                                      PointOfNoReturnRollbackClass;                               // 0x00B0   (0x0008)  
	class UClass*                                      IndianaSkillsClass;                                         // 0x00B8   (0x0008)  
	class UClass*                                      IndianaAttributesClass;                                     // 0x00C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0xE8];                                      // 0x00C8   (0x00E8)  MISSED
	class UCharacterDeathData*                         CharacterDeathData;                                         // 0x01B0   (0x0008)  
	class UGlobalAudioData*                            GlobalAudioData;                                            // 0x01B8   (0x0008)  
	class UClass*                                      DefaultCurrencyItem;                                        // 0x01C0   (0x0008)  
	class UShipTravelData*                             ShipTravelData;                                             // 0x01C8   (0x0008)  
	int32_t                                            MaxCharacterLevel;                                          // 0x01D0   (0x0004)  
	int32_t                                            MaxCharacterLevelINX1;                                      // 0x01D4   (0x0004)  
	int32_t                                            MaxCharacterLevelINX2;                                      // 0x01D8   (0x0004)  
	int32_t                                            MinLevelVariance;                                           // 0x01DC   (0x0004)  
	int32_t                                            MaxLevelVariance;                                           // 0x01E0   (0x0004)  
	int32_t                                            MaxItemLevel;                                               // 0x01E4   (0x0004)  
	float                                              HungerPerSecond;                                            // 0x01E8   (0x0004)  
	float                                              ThirstPerSecond;                                            // 0x01EC   (0x0004)  
	float                                              ExhaustionPerSecond;                                        // 0x01F0   (0x0004)  
	float                                              RestGainedPerSecondSleeping;                                // 0x01F4   (0x0004)  
	float                                              MeleeDamageEffectivenessForBrokenWeapon;                    // 0x01F8   (0x0004)  
	float                                              DamageThresholdEffectivenessForBrokenArmor;                 // 0x01FC   (0x0004)  
	float                                              ShipTravelTimeSystemMapWidth;                               // 0x0200   (0x0004)  
	float                                              ShipTravelTimeMin;                                          // 0x0204   (0x0004)  
	float                                              ConversationFaceFXFinishMaxWaitTime;                        // 0x0208   (0x0004)  
	float                                              AutosaveLoadAnySaveDelaySeconds;                            // 0x020C   (0x0004)  
	float                                              EvidenceProximityIn;                                        // 0x0210   (0x0004)  
	float                                              EvidenceProximityOut;                                       // 0x0214   (0x0004)  
	class UAkAudioEvent*                               EvidenceProximityEvent;                                     // 0x0218   (0x0008)  
	float                                              EvidenceMinimumDurationPassed;                              // 0x0220   (0x0004)  
	unsigned char                                      UnknownData01_6[0x1C];                                      // 0x0224   (0x001C)  MISSED
	class UConversationManager*                        ConversationManager;                                        // 0x0240   (0x0008)  
	unsigned char                                      UnknownData02_7[0x30];                                      // 0x0248   (0x0030)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaGlobals.GetTutorialManager
	// class UTutorialManager* GetTutorialManager();                                                                            // [0x1859c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/Indiana.TagToAudio
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FTagToAudio
{ 
	FGameplayTag                                       PrimaryItemSkill;                                           // 0x0000   (0x0008)  
	class UAkAudioEvent*                               AudioEvent;                                                 // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.TagToAudioList
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FTagToAudioList
{ 
	TArray<FTagToAudio>                                AudioForItems;                                              // 0x0000   (0x0010)  
};

/// Class /Script/Indiana.IndianaItemAudioData
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UIndianaItemAudioData : public UDataAsset
{ 
public:
	TMap<EItemInteraction, FTagToAudioList>            WeaponAndArmorAudio;                                        // 0x0038   (0x0050)  
};

/// Struct /Script/Indiana.WeightedImageData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FWeightedImageData
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  Image;                                                      // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0010   (0x0020)  MISSED
	bool                                               bCanShowTips;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              Weight;                                                     // 0x0034   (0x0004)  
	float                                              WeightDecay;                                                // 0x0038   (0x0004)  
	FGuid                                              ID;                                                         // 0x003C   (0x0010)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.LoadingImageContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FLoadingImageContainer
{ 
	TArray<FWeightedImageData>                         LoadingImages;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.ConditionalizedLoadingImageContainer
/// Size: 0x00C8 (200 bytes) (0x000000 - 0x0000C8) align 8 MaxSize: 0x00C8
struct FConditionalizedLoadingImageContainer
{ 
	FString                                            DebugName;                                                  // 0x0000   (0x0010)  
	FWeightedImageData                                 Image;                                                      // 0x0010   (0x0050)  
	FLogicalExpression                                 Conditional;                                                // 0x0060   (0x0068)  
};

/// Struct /Script/Indiana.LoadingScreenRegionMaps
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FLoadingScreenRegionMaps
{ 
	SDK_UNDEFINED(16,573) /* TArray<TWeakObjectPtr<UWorld*>> */ __um(Maps);                                        // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.ConditionalizedLoadingTips
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 MaxSize: 0x0070
struct FConditionalizedLoadingTips
{ 
	FLocString                                         Tip;                                                        // 0x0000   (0x0008)  
	FLogicalExpression                                 Conditional;                                                // 0x0008   (0x0068)  
};

/// Class /Script/Indiana.IndianaLoadingScreenImageData
/// Size: 0x01C0 (448 bytes) (0x000038 - 0x0001C0) align 8 MaxSize: 0x01C0
class UIndianaLoadingScreenImageData : public UDataAsset
{ 
public:
	TMap<EEndGameImageType, FLoadingImageContainer>    EndGameLoadingImages;                                       // 0x0038   (0x0050)  
	SDK_UNDEFINED(80,574) /* TMap<TWeakObjectPtr<UWorld*>, FLoadingImageContainer> */ __um(MapSpecificLoadingImages); // 0x0088   (0x0050)  
	TMap<ELoadingScreenRegion, FLoadingImageContainer> RegionSpecificLoadingImages;                                // 0x00D8   (0x0050)  
	TArray<FConditionalizedLoadingImageContainer>      StorySpecificLoadingImages;                                 // 0x0128   (0x0010)  
	TArray<FWeightedImageData>                         GenericLoadingScreenImages;                                 // 0x0138   (0x0010)  
	TMap<ELoadingScreenRegion, FLoadingScreenRegionMaps> RegionMapping;                                            // 0x0148   (0x0050)  
	TArray<FLocString>                                 LoadingTips;                                                // 0x0198   (0x0010)  
	TArray<FConditionalizedLoadingTips>                ConditionalizedTips;                                        // 0x01A8   (0x0010)  
	class UFont*                                       LoadingScreenFont;                                          // 0x01B8   (0x0008)  
};

/// Class /Script/Indiana.IndianaLoadingScreenManager
/// Size: 0x0098 (152 bytes) (0x000030 - 0x000098) align 8 MaxSize: 0x0098
class UIndianaLoadingScreenManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0030   (0x0020)  MISSED
	TArray<class UTexture2D*>                          LoadingScreenImages;                                        // 0x0050   (0x0010)  
	TArray<FString>                                    LoadingScreenTips;                                          // 0x0060   (0x0010)  
	class URenderThreadLoadingScreenWidget*            LoadingScreenWidgetRef;                                     // 0x0070   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0078   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaLoadingScreenManager.DebugShowLoadingScreen
	// void DebugShowLoadingScreen(FName& MapName);                                                                             // [0x1859740] Final|Exec|Native|Public|HasOutParms 
};

/// Class /Script/Indiana.IndianaMathStatics
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UIndianaMathStatics : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/Indiana.IndianaNavigationSystem
/// Size: 0x1730 (5936 bytes) (0x001638 - 0x001730) align 8 MaxSize: 0x1730
class UIndianaNavigationSystem : public UNavigationSystemV1
{ 
public:
	unsigned char                                      UnknownData00_1[0xF8];                                      // 0x1638   (0x00F8)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaNavigationSystem.UnregisterArea
	// void UnregisterArea(class AActor* Source, EOccupationChannel Channel);                                                   // [0x185bff0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaNavigationSystem.TraceOccupation
	// bool TraceOccupation(class AActor* Source, EOccupationChannel Channel, FVector& Start, FVector& End);                    // [0x185bdc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaNavigationSystem.RegisterArea
	// void RegisterArea(class AActor* Source, EOccupationChannel Channel, FVector& Location, FVector& Extents, FRotator& Transform); // [0x185b2a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Indiana.RotatedBox
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 16 MaxSize: 0x0050
struct FRotatedBox
{ 
	FBox                                               Box;                                                        // 0x0000   (0x001C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FTransform                                         Transform;                                                  // 0x0020   (0x0030)  
};

/// Class /Script/Indiana.IndianaNavModifierComponent
/// Size: 0x0178 (376 bytes) (0x000110 - 0x000178) align 8 MaxSize: 0x0178
class UIndianaNavModifierComponent : public UNavRelevantComponent
{ 
public:
	class UClass*                                      AreaClass;                                                  // 0x0110   (0x0008)  
	bool                                               bPhysicsCollisionOnly;                                      // 0x0118   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0119   (0x0007)  MISSED
	class UPrimitiveComponent*                         CollisionComponent;                                         // 0x0120   (0x0008)  
	bool                                               bIncludeAgentHeight;                                        // 0x0128   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0129   (0x0003)  MISSED
	float                                              Extents;                                                    // 0x012C   (0x0004)  
	TArray<FRotatedBox>                                CustomCollision;                                            // 0x0130   (0x0010)  
	unsigned char                                      UnknownData02_7[0x38];                                      // 0x0140   (0x0038)  MISSED
};

/// Class /Script/Indiana.IndianaPathFollowingComponent
/// Size: 0x0350 (848 bytes) (0x0002A8 - 0x000350) align 8 MaxSize: 0x0350
class UIndianaPathFollowingComponent : public UPathFollowingComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0xA8];                                      // 0x02A8   (0x00A8)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaPathFollowingComponent.OnCapsuleSizeChange
	// void OnCapsuleSizeChange();                                                                                              // [0x185a6c0] Final|Native|Private 
	// Function /Script/Indiana.IndianaPathFollowingComponent.EndStationaryRotate
	// void EndStationaryRotate();                                                                                              // [0x1859a50] Final|Native|Private 
};

/// Class /Script/Indiana.IndianaPlayerAudioComponent
/// Size: 0x03A8 (936 bytes) (0x000280 - 0x0003A8) align 8 MaxSize: 0x03A8
class UIndianaPlayerAudioComponent : public UIndianaAudioComponent
{ 
public:
	TMap<EPlayerAudioEvent, class UAkPlaySoundEventEffect*> PlayerAudioEvents;                                     // 0x0280   (0x0050)  
	float                                              PlayerDetectionStateDangerToUndetectedEarlyTransitionTime;  // 0x02D0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x02D4   (0x0004)  MISSED
	TMap<EPlayerAudioDetectionState, float>            RequiredRequestTimes;                                       // 0x02D8   (0x0050)  
	float                                              WallaCheckTime;                                             // 0x0328   (0x0004)  
	float                                              WallaFarDistance;                                           // 0x032C   (0x0004)  
	float                                              WallaMediumDistance;                                        // 0x0330   (0x0004)  
	float                                              WallaNearDistance;                                          // 0x0334   (0x0004)  
	unsigned char                                      UnknownData01_7[0x70];                                      // 0x0338   (0x0070)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaPlayerAudioComponent.TacticalTimeDilationStart
	// void TacticalTimeDilationStart();                                                                                        // [0x185bcf0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.TacticalTimeDilationEnd
	// void TacticalTimeDilationEnd(float Duration);                                                                            // [0x185bc70] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnStealthChange
	// void OnStealthChange(bool bStealthed);                                                                                   // [0x185b130] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnKillCameraStart
	// void OnKillCameraStart(class AActor* CameraTarget);                                                                      // [0x185adf0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnKillCameraEnd
	// void OnKillCameraEnd();                                                                                                  // [0x185add0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseUnequipped
	// void OnDisguiseUnequipped();                                                                                             // [0x185aad0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseRefilled
	// void OnDisguiseRefilled();                                                                                               // [0x185aab0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseMeterChanged
	// void OnDisguiseMeterChanged(float Meter);                                                                                // [0x185aa30] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseEquipped
	// void OnDisguiseEquipped(class UDisguiseData* Disguise);                                                                  // [0x185a9a0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseDrainStart
	// void OnDisguiseDrainStart();                                                                                             // [0x185a980] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseDrainEnd
	// void OnDisguiseDrainEnd();                                                                                               // [0x185a960] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDetectionChange
	// void OnDetectionChange(EDetectionType DetectionType);                                                                    // [0x185a8e0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnCompanionCommandCooldownEnd
	// void OnCompanionCommandCooldownEnd(ECompanionCommand Command);                                                           // [0x185a7b0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bInCombat, bool bRestoring);                                                              // [0x185a6e0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnCalledShotCameraStep
	// void OnCalledShotCameraStep(class AActor* Attacker, ECalledShotCameraStep OldCameraStep, ECalledShotCameraStep NewCameraStep, bool bCloseRange); // [0x185a560] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.GamePauseChanged
	// void GamePauseChanged(bool bPaused);                                                                                     // [0x1859b90] Final|Native|Protected 
};

/// Class /Script/Indiana.IndianaPlayerCharacter
/// Size: 0x17C0 (6080 bytes) (0x000C18 - 0x0017C0) align 16 MaxSize: 0x17C0
class AIndianaPlayerCharacter : public AIndianaCharacter
{ 
public:
	SDK_UNDEFINED(16,575) /* FMulticastInlineDelegate */ __um(OnStartGameSession);                                 // 0x0C18   (0x0010)  
	SDK_UNDEFINED(16,576) /* FMulticastInlineDelegate */ __um(OnEndGameSession);                                   // 0x0C28   (0x0010)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0C38   (0x0020)  MISSED
	SDK_UNDEFINED(16,577) /* FMulticastInlineDelegate */ __um(OnCinematicModeChange);                              // 0x0C58   (0x0010)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0C68   (0x0020)  MISSED
	class USkeletalMeshComponent*                      FPVMesh;                                                    // 0x0C88   (0x0008)  
	class UFPVCameraComponent*                         FPVCamera;                                                  // 0x0C90   (0x0008)  
	class UPlayerInfoComponent*                        PlayerInfoComponent;                                        // 0x0C98   (0x0008)  
	class UPlayerTargetingComponent*                   TargetingComponent;                                         // 0x0CA0   (0x0008)  
	class UStaminaComponent*                           StaminaComponent;                                           // 0x0CA8   (0x0008)  
	class URecoilManagerComponent*                     RecoilManager;                                              // 0x0CB0   (0x0008)  
	class UAimAssistComponent*                         AimAssistComponent;                                         // 0x0CB8   (0x0008)  
	class UStealthComponent*                           StealthComponent;                                           // 0x0CC0   (0x0008)  
	FName                                              FPVCameraSocket;                                            // 0x0CC8   (0x0008)  
	class UGameInputComponent*                         GameInputComponent;                                         // 0x0CD0   (0x0008)  
	class UIndianaPlayerAudioComponent*                PlayerAudioComponent;                                       // 0x0CD8   (0x0008)  
	class UIndianaInputComponent*                      InteractionInputComponent;                                  // 0x0CE0   (0x0008)  
	class UHitEffectIndicatorComponent*                HitEffectIndicatorComponent;                                // 0x0CE8   (0x0008)  
	class UPostProcessComponent*                       PostProcessEffectsComponent;                                // 0x0CF0   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0CF8   (0x0008)  MISSED
	FPostProcessSettings                               Default_PP_Settings;                                        // 0x0D00   (0x0570)  
	class UPlayerInteractionComponent*                 InteractionComponent;                                       // 0x1270   (0x0008)  
	class UPlayerEnvironmentInteractionComponent*      PlayerEnvironmentComponent;                                 // 0x1278   (0x0008)  
	class UConversationCamera*                         ConversationCameraComponent;                                // 0x1280   (0x0008)  
	class UCompanionManagerComponent*                  CompanionManagerComponent;                                  // 0x1288   (0x0008)  
	class UCompanionPositionComponent*                 CompanionPositionComponent;                                 // 0x1290   (0x0008)  
	class UCompanionCommandComponent*                  CompanionCommandComponent;                                  // 0x1298   (0x0008)  
	class UInventoryComponent*                         PlayerInventory;                                            // 0x12A0   (0x0008)  
	class UTimeDilationComponent*                      TimeDilationComponent;                                      // 0x12A8   (0x0008)  
	class UTacticalTimeDilationComponent*              TacticalTimeDilationComponent;                              // 0x12B0   (0x0008)  
	class UClass*                                      TimeDilationClass;                                          // 0x12B8   (0x0008)  
	class UClass*                                      ConversationLightingClass;                                  // 0x12C0   (0x0008)  
	float                                              MotionBlurAmount;                                           // 0x12C8   (0x0004)  
	float                                              PerfectDodgeTime;                                           // 0x12CC   (0x0004)  
	float                                              FastTravelDetectionRange;                                   // 0x12D0   (0x0004)  
	float                                              MeleeHitStopDuration;                                       // 0x12D4   (0x0004)  
	float                                              HolsterTimeSinceInteract;                                   // 0x12D8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x12DC   (0x0004)  MISSED
	SDK_UNDEFINED(80,578) /* TSet<TSoftObjectPtr<UClass*>> */ __um(UniqueExaminablesLooted);                       // 0x12E0   (0x0050)  
	SDK_UNDEFINED(80,579) /* TSet<FLocString> */       __um(UniqueExaminablesNameLocStrings);                      // 0x1330   (0x0050)  
	SDK_UNDEFINED(80,580) /* TSet<FLocString> */       __um(UniqueExaminablesDescriptionLocStrings);               // 0x1380   (0x0050)  
	unsigned char                                      UnknownData04_6[0xC8];                                      // 0x13D0   (0x00C8)  MISSED
	SDK_UNDEFINED(16,581) /* FMulticastInlineDelegate */ __um(PreLevelTransition);                                 // 0x1498   (0x0010)  
	TArray<FGuid>                                      LoadingImagesSeen;                                          // 0x14A8   (0x0010)  
	SDK_UNDEFINED(16,582) /* FMulticastInlineDelegate */ __um(OnShipLocationChanged);                              // 0x14B8   (0x0010)  
	unsigned char                                      UnknownData05_6[0xA0];                                      // 0x14C8   (0x00A0)  MISSED
	class UShipDestinationData*                        CurrentShipLocation;                                        // 0x1568   (0x0008)  
	unsigned char                                      UnknownData06_6[0x78];                                      // 0x1570   (0x0078)  MISSED
	class UPlayerPresetData*                           PresetData;                                                 // 0x15E8   (0x0008)  
	class URpgStat*                                    PickPocketStat;                                             // 0x15F0   (0x0008)  
	class URpgStat*                                    HackStat;                                                   // 0x15F8   (0x0008)  
	class UClass*                                      HackStatusEffect;                                           // 0x1600   (0x0008)  
	class UClass*                                      DoubleHackStatusEffect;                                     // 0x1608   (0x0008)  
	unsigned char                                      UnknownData07_6[0x48];                                      // 0x1610   (0x0048)  MISSED
	float                                              WaitCameraFadeDuration;                                     // 0x1658   (0x0004)  
	unsigned char                                      UnknownData08_6[0xC];                                       // 0x165C   (0x000C)  MISSED
	float                                              BasePristineChance;                                         // 0x1668   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x166C   (0x0004)  MISSED
	class URpgStat*                                    PristineLootChanceStat;                                     // 0x1670   (0x0008)  
	unsigned char                                      UnknownData10_6[0x70];                                      // 0x1678   (0x0070)  MISSED
	TArray<ESpecialObsidianID>                         CompanionsToTrackSKills;                                    // 0x16E8   (0x0010)  
	unsigned char                                      UnknownData11_6[0x78];                                      // 0x16F8   (0x0078)  MISSED
	float                                              TimeBetweenGroinHits;                                       // 0x1770   (0x0004)  
	unsigned char                                      UnknownData12_6[0x24];                                      // 0x1774   (0x0024)  MISSED
	SDK_UNDEFINED(16,583) /* FMulticastInlineDelegate */ __um(OnEvidenceScannerActivated);                         // 0x1798   (0x0010)  
	SDK_UNDEFINED(16,584) /* FMulticastInlineDelegate */ __um(OnPONRRollbackDelegate);                             // 0x17A8   (0x0010)  
	unsigned char                                      UnknownData13_7[0x8];                                       // 0x17B8   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaPlayerCharacter.WeaponUnholstered
	// void WeaponUnholstered(class UWeapon* InWeapon);                                                                         // [0x185c160] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.WeaponHolstered
	// void WeaponHolstered(class UWeapon* InWeapon);                                                                           // [0x185c0d0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.WasPONRRollbackRecentlyPerformed
	// bool WasPONRRollbackRecentlyPerformed();                                                                                 // [0x185c0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.TravelToDestination
	// void TravelToDestination(class UTravelDestinationData* Destination, bool bTriggerAutosave);                              // [0x185bf20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.ToggleUnlockTravelPoints
	// void ToggleUnlockTravelPoints();                                                                                         // [0x185bda0] Final|Exec|Native|Static|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.TinkerAdvanceWeapon
	// void TinkerAdvanceWeapon(bool bIgnoreCost);                                                                              // [0x185bd10] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.SuppressInput
	// void SuppressInput(bool bSuppress);                                                                                      // [0x185bbe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetVisitedTravelDestination
	// void SetVisitedTravelDestination(class UTravelDestinationData* TravelDest);                                              // [0x185bb50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetVisitedRegion
	// void SetVisitedRegion(class UTravelRegionData* Region);                                                                  // [0x185bac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetTutorialsEnabled
	// void SetTutorialsEnabled(bool bEnabled);                                                                                 // [0x185ba30] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetTravelDestinationLocked
	// void SetTravelDestinationLocked(class UTravelDestinationData* TravelDest, bool bLocked);                                 // [0x185b960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetTravelDestinationHidden
	// void SetTravelDestinationHidden(class UTravelDestinationData* TravelDest, bool bSetHidden);                              // [0x185b890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetMovementEnabled
	// void SetMovementEnabled(bool bNewIsMovementEnabled);                                                                     // [0x185b7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetIsInLowGravity
	// void SetIsInLowGravity(bool bNewIsInLowGravity);                                                                         // [0x185b750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetCurrentShipLocation
	// void SetCurrentShipLocation(class UShipDestinationData* ShipDest);                                                       // [0x185b610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetAwareOfTravelDestination
	// void SetAwareOfTravelDestination(class UTravelDestinationData* TravelDest);                                              // [0x185b580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetAwareOfRegion
	// void SetAwareOfRegion(class UTravelRegionData* Region);                                                                  // [0x185b4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetAllLevels
	// void SetAllLevels(int32_t Level);                                                                                        // [0x185b460] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnRollback
	// void PointOfNoReturnRollback();                                                                                          // [0x185b280] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnFixQuests
	// void PointOfNoReturnFixQuests();                                                                                         // [0x185b260] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnFixItems
	// void PointOfNoReturnFixItems();                                                                                          // [0x185b240] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnFixGlobalVars
	// void PointOfNoReturnFixGlobalVars();                                                                                     // [0x185b220] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnFixConversations
	// void PointOfNoReturnFixConversations();                                                                                  // [0x185b200] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnUndetected
	// void OnUndetected();                                                                                                     // [0x185b1e0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnStopCrouch
	// void OnStopCrouch();                                                                                                     // [0x185b1c0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnSoftCoverExited
	// void OnSoftCoverExited();                                                                                                // [0x185b110] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnSoftCoverEntered
	// void OnSoftCoverEntered();                                                                                               // [0x185b0f0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerStealthExitedBP
	// void OnPlayerStealthExitedBP();                                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerStealthEnteredBP
	// void OnPlayerStealthEnteredBP();                                                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerSoftCoverExitedBP
	// void OnPlayerSoftCoverExitedBP();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerSoftCoverEnteredBP
	// void OnPlayerSoftCoverEnteredBP();                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerInventoryItemConsumed
	// void OnPlayerInventoryItemConsumed(FItemStack& ItemStack);                                                               // [0x185b050] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerInventoryItemAdded
	// void OnPlayerInventoryItemAdded(FItemStack& ItemStack);                                                                  // [0x185afb0] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPauseStateChanged
	// void OnPauseStateChanged(bool bIsPaused);                                                                                // [0x185af20] Final|Native|Private 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPartyCombatDamageTaken
	// void OnPartyCombatDamageTaken(FCauseDamageInfo& DamageInfo);                                                             // [0x185ae80] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnJumpLanded
	// void OnJumpLanded(float FallDistance);                                                                                   // [0x185ad50] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnHit
	// void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x185ab70] Final|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnDodged
	// void OnDodged(EDodgeDirection EDodgeDirection);                                                                          // [0x185aaf0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnDetected
	// void OnDetected(class AActor* Detector);                                                                                 // [0x185a850] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnCrouchComplete
	// void OnCrouchComplete();                                                                                                 // [0x185a830] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OffsetReticleChanged
	// void OffsetReticleChanged(bool bUseOffsetReticle);                                                                       // [0x185a4d0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.MentionPointOfInterest
	// void MentionPointOfInterest(class UPointOfInterestData* POIData);                                                        // [0x185a440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.MakePointOfInterestDiscoverable
	// void MakePointOfInterestDiscoverable(class UPointOfInterestData* POIData, bool bStillHidden);                            // [0x185a370] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsTravelDestinationLocked
	// bool IsTravelDestinationLocked(class UTravelDestinationData* TravelDest);                                                // [0x185a2d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsTravelDestinationHidden
	// bool IsTravelDestinationHidden(class UTravelDestinationData* TravelDest);                                                // [0x185a230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsShipCurrentlyAt
	// bool IsShipCurrentlyAt(class UTravelDestinationData* ShipDest);                                                          // [0x185a190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsAwareOfTravelDestination
	// bool IsAwareOfTravelDestination(class UTravelDestinationData* TravelDest);                                               // [0x185a0f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsAwareOfRegion
	// bool IsAwareOfRegion(class UTravelRegionData* Region);                                                                   // [0x185a050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsAwareOfPointOfInterest
	// bool IsAwareOfPointOfInterest(class UPointOfInterestData* POIData);                                                      // [0x1859fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.InitiateTravelToShipLocation
	// void InitiateTravelToShipLocation();                                                                                     // [0x1859f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HidePointOfInterest
	// void HidePointOfInterest(class UPointOfInterestData* POIData);                                                           // [0x1859f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HeadbobbingChanged
	// void HeadbobbingChanged(bool bHeadbobbing);                                                                              // [0x8d75c0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.HasVisitedTravelDestination
	// bool HasVisitedTravelDestination(class UTravelDestinationData* TravelDest);                                              // [0x1859e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HasVisitedRegion
	// bool HasVisitedRegion(class UTravelRegionData* Region);                                                                  // [0x1859dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HasOnlyHeardAboutPointOfInterest
	// bool HasOnlyHeardAboutPointOfInterest(class UPointOfInterestData* POIData);                                              // [0x1859d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HasDiscoveredPointOfInterest
	// bool HasDiscoveredPointOfInterest(class UPointOfInterestData* POIData);                                                  // [0x1859c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.GetIndianaPC
	// class AIndianaPlayerCharacter* GetIndianaPC();                                                                           // [0x1859c20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaPlayerCharacter.EvidenceScannerActivated
	// void EvidenceScannerActivated(bool bActivated);                                                                          // [0x1859b00] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.EquippedWeaponChanged
	// void EquippedWeaponChanged(class UWeapon* NewlyEquippedWeapon);                                                          // [0x1859a70] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.DiscoverPointOfInterest
	// void DiscoverPointOfInterest(class UPointOfInterestData* POIData, bool bCanAwardXP);                                     // [0x1859980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_TravelToDestination
	// void DebugTravel_TravelToDestination(FName& TravelDestination);                                                          // [0x18598f0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetVisitedRegion
	// void DebugTravel_SetVisitedRegion(FName& Region, bool bNewVisited);                                                      // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetVisitedDestination
	// void DebugTravel_SetVisitedDestination(FName& TravelDestination, bool bNewVisited);                                      // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetShipLocation
	// void DebugTravel_SetShipLocation(FName& ShipLocation);                                                                   // [0x18598f0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetDestinationLocked
	// void DebugTravel_SetDestinationLocked(FName& TravelDestination, bool bNewLocked);                                        // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetDestinationHidden
	// void DebugTravel_SetDestinationHidden(FName& TravelDestination, bool bNewHidden);                                        // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetAwareRegion
	// void DebugTravel_SetAwareRegion(FName& Region, bool bNewAware);                                                          // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetAwareDestination
	// void DebugTravel_SetAwareDestination(FName& TravelDestination, bool bNewAware);                                          // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugSoftCoverExited
	// void DebugSoftCoverExited();                                                                                             // [0x18597f0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugSoftCoverEntered
	// void DebugSoftCoverEntered();                                                                                            // [0x18597d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.CanDiscoverPointOfInterest
	// bool CanDiscoverPointOfInterest(class UPointOfInterestData* POIData);                                                    // [0x18596a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.CanAccessTravelDestination
	// bool CanAccessTravelDestination(class UTravelDestinationData* TravelDest);                                               // [0x1859600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.AdjustWeaponHealth
	// void AdjustWeaponHealth(float Amount);                                                                                   // [0x1859580] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.IndianaPlayerController
/// Size: 0x0680 (1664 bytes) (0x000628 - 0x000680) align 8 MaxSize: 0x0680
class AIndianaPlayerController : public APlayerController
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x0628   (0x0058)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaPlayerController.UnpinGlobalVariable
	// void UnpinGlobalVariable(FString GlobalVariable);                                                                        // [0x18637f0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.ToggleQuestLog
	// void ToggleQuestLog();                                                                                                   // [0x18637b0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.TogglePauseMenu
	// void TogglePauseMenu();                                                                                                  // [0x1863790] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.ToggleMap
	// void ToggleMap();                                                                                                        // [0x1863770] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleLedger
	// void ToggleLedger();                                                                                                     // [0x1863750] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleInventory
	// void ToggleInventory();                                                                                                  // [0x1863730] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleCompanionsSecondScreen
	// void ToggleCompanionsSecondScreen();                                                                                     // [0x1863710] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleCompanions
	// void ToggleCompanions();                                                                                                 // [0x18636f0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleCharacterSummary
	// void ToggleCharacterSummary();                                                                                           // [0x18636d0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.SetYAxisInverted
	// void SetYAxisInverted(bool bIsInverted);                                                                                 // [0x18635a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetXAxisInverted
	// void SetXAxisInverted(bool bIsInverted);                                                                                 // [0x1863510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetMouseSensitivity
	// void SetMouseSensitivity(float Value);                                                                                   // [0x18633c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetMouseADSSensitivity
	// void SetMouseADSSensitivity(float Value);                                                                                // [0x1863340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetImpulseTriggerIntensity
	// void SetImpulseTriggerIntensity(float Value);                                                                            // [0x18632c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetGlobalVariable
	// void SetGlobalVariable(FString GlobalVariable, int32_t Value);                                                           // [0x181f590] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.SetControllerYAxisInverted
	// void SetControllerYAxisInverted(bool bIsInverted);                                                                       // [0x18631a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetControllerXAxisInverted
	// void SetControllerXAxisInverted(bool bIsInverted);                                                                       // [0x1863110] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetControllerEnableImpulseTriggers
	// void SetControllerEnableImpulseTriggers(bool bIsEnabled);                                                                // [0x1863080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetAutoSprintEnabled
	// void SetAutoSprintEnabled(bool bIsEnabled);                                                                              // [0x1862ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.PlayChatterOnTarget
	// void PlayChatterOnTarget(EChatterEventType ChatterEvent);                                                                // [0x1862d50] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.PinGlobalVariable
	// void PinGlobalVariable(FString GlobalVariable);                                                                          // [0x1862eb0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.OpenQuestLog
	// void OpenQuestLog();                                                                                                     // [0x1862e70] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenMap
	// void OpenMap();                                                                                                          // [0x1862e50] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenLedger
	// void OpenLedger();                                                                                                       // [0x1862e30] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenInventory
	// void OpenInventory();                                                                                                    // [0x1862e10] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenCompanions
	// void OpenCompanions();                                                                                                   // [0x1862df0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenCharacterSummary
	// void OpenCharacterSummary();                                                                                             // [0x1862dd0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x1862d50] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnKeyBindsReset
	// void OnKeyBindsReset();                                                                                                  // [0x18628f0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnAxisMappingRemoved
	// void OnAxisMappingRemoved(FInputAxisKeyMapping Value);                                                                   // [0x1862750] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnAxisMappingAdded
	// void OnAxisMappingAdded(FInputAxisKeyMapping Value);                                                                     // [0x18625b0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnActionMappingRemoved
	// void OnActionMappingRemoved(FInputActionKeyMapping Value);                                                               // [0x1862430] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnActionMappingAdded
	// void OnActionMappingAdded(FInputActionKeyMapping Value);                                                                 // [0x18622b0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.IsYAxisInverted
	// bool IsYAxisInverted();                                                                                                  // [0x1862280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.IsXAxisInverted
	// bool IsXAxisInverted();                                                                                                  // [0x1862250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.InputKey
	// bool InputKey(FKey Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);                       // [0x1862090] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.InputAxis
	// bool InputAxis(FKey Key, float Delta, float DeltaTime, int32_t NumSamples, bool bGamepad);                               // [0x1861e90] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.GetMouseSensitivity
	// float GetMouseSensitivity();                                                                                             // [0x1861d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.GetMouseADSSensitivity
	// float GetMouseADSSensitivity();                                                                                          // [0x1861d10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.GetInteractHoldTime
	// float GetInteractHoldTime();                                                                                             // [0x1861ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.GetIndianaPlayerController
	// class AIndianaPlayerController* GetIndianaPlayerController();                                                            // [0x1861cc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaPlayerController.DebugSpawnCompanion
	// void DebugSpawnCompanion(FName CompanionName);                                                                           // [0x1861880] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerController.DebugSpawnAICharacter
	// class AIndianaAiCharacter* DebugSpawnAICharacter(FName AICharacterAssetName);                                            // [0x18617e0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.DebugRevertDutchAngle
	// void DebugRevertDutchAngle(float Axis);                                                                                  // [0x18616d0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.DebugDynamicallyReplaceCompanion
	// void DebugDynamicallyReplaceCompanion(FName OldCompanionName, FName NewCompanionName);                                   // [0x1861600] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerController.DebugDutchAngleAdjustment
	// void DebugDutchAngleAdjustment(float Axis);                                                                              // [0x1861580] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.CloseLedger
	// void CloseLedger();                                                                                                      // [0x1860fa0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.AsyncSpawnCompanion
	// class AIndianaAiCharacter* AsyncSpawnCompanion(ESpecialObsidianID CompanionID);                                          // [0x1860ef0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerController.AddStickYawInput
	// void AddStickYawInput(float Val);                                                                                        // [0x1860e60] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.AddStickRollInput
	// void AddStickRollInput(float Val);                                                                                       // [0x1860dd0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.AddStickPitchInput
	// void AddStickPitchInput(float Val);                                                                                      // [0x1860d40] Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaPlayerInput
/// Size: 0x03D0 (976 bytes) (0x0003B8 - 0x0003D0) align 8 MaxSize: 0x03D0
class UIndianaPlayerInput : public UPlayerInput
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x03B8   (0x0018)  MISSED
};

/// Class /Script/Indiana.IndianaPlayerStart
/// Size: 0x0318 (792 bytes) (0x0002E8 - 0x000318) align 8 MaxSize: 0x0318
class AIndianaPlayerStart : public APlayerStart
{ 
public:
	class UTravelDestinationData*                      TravelDestinationData;                                      // 0x02E8   (0x0008)  
	class UCapsuleComponent*                           LeftCompanion;                                              // 0x02F0   (0x0008)  
	class UCapsuleComponent*                           RightCompanion;                                             // 0x02F8   (0x0008)  
	class UCapsuleComponent*                           FollowerCompanion;                                          // 0x0300   (0x0008)  
	class UStaticMeshComponent*                        AwareBounds;                                                // 0x0308   (0x0008)  
	class UStaticMeshComponent*                        VisitedBounds;                                              // 0x0310   (0x0008)  


	/// Functions
	// Function /Script/Indiana.IndianaPlayerStart.OnPlayerPawnOverlappedVisited
	// void OnPlayerPawnOverlappedVisited(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1862b30] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerStart.OnPlayerPawnOverlappedAwareness
	// void OnPlayerPawnOverlappedAwareness(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1862910] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerStart.GetDebugString
	// FString GetDebugString();                                                                                                // [0x1861c10] Final|Native|Public|Const 
	// Function /Script/Indiana.IndianaPlayerStart.GetCompanionSpawnLocation
	// bool GetCompanionSpawnLocation(FString CompanionCapsuleName, FVector& Location, FRotator& Rotation, bool bFeetLocation); // [0x1861a60] Final|Native|Public|HasOutParms|HasDefaults|Const 
};

/// Class /Script/Indiana.IndianaProjMovementComponent
/// Size: 0x0230 (560 bytes) (0x000218 - 0x000230) align 16 MaxSize: 0x0230
class UIndianaProjMovementComponent : public UProjectileMovementComponent
{ 
public:
	bool                                               bIsPerfectHoming : 1;                                       // 0x0218:0 (0x0001)  
	bool                                               bBounceOffActors : 1;                                       // 0x0218:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0219   (0x0003)  MISSED
	float                                              HomingDotThreshold;                                         // 0x021C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0220   (0x0010)  MISSED
};

/// Struct /Script/Indiana.SkillUnlockEffect
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FSkillUnlockEffect
{ 
	ESkill                                             EquippedWeaponSkill;                                        // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            MinSkill;                                                   // 0x0004   (0x0004)  
	class UClass*                                      Spell;                                                      // 0x0008   (0x0008)  
	FLocString                                         UnlockTierString;                                           // 0x0010   (0x0008)  
};

/// Class /Script/Indiana.IndianaSkill
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align 8 MaxSize: 0x0078
class UIndianaSkill : public UObject
{ 
public:
	EAttribute                                         PrimaryAttribute;                                           // 0x0030   (0x0001)  
	EAttribute                                         SecondaryAttribute;                                         // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0032   (0x0006)  MISSED
	TArray<FRangedStatModifierDescription>             SkillStatMods;                                              // 0x0038   (0x0010)  
	TArray<FRangedStatModifierDescription>             CompanionSkillStatMods;                                     // 0x0048   (0x0010)  
	TArray<FSkillUnlockEffect>                         UnlockEffects;                                              // 0x0058   (0x0010)  
	FLocString                                         SkillCategory;                                              // 0x0068   (0x0008)  
	FLocString                                         DescriptionFormat;                                          // 0x0070   (0x0008)  
};

/// Class /Script/Indiana.HandGunsSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UHandGunsSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.LongGunsSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class ULongGunsSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.HeavyWeaponsSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UHeavyWeaponsSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.SneakSkill
/// Size: 0x0080 (128 bytes) (0x000078 - 0x000080) align 8 MaxSize: 0x0080
class USneakSkill : public UIndianaSkill
{ 
public:
	class URpgStat*                                    UnlockStat;                                                 // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.LockpickSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class ULockpickSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.EngineeringSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UEngineeringSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.HackSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UHackSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.MedicalSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UMedicalSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.LightMeleeSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class ULightMeleeSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.HeavyMeleeSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UHeavyMeleeSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.ScienceSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UScienceSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.PersuadeSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UPersuadeSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.LieSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class ULieSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.IntimidateSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UIntimidateSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.DodgeSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UDodgeSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.BlockSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UBlockSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.InspirationSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UInspirationSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.DeterminationSkill
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align 8 MaxSize: 0x0078
class UDeterminationSkill : public UIndianaSkill
{ 
public:
};

/// Class /Script/Indiana.IndianaSkills
/// Size: 0x00C0 (192 bytes) (0x000030 - 0x0000C0) align 8 MaxSize: 0x00C0
class UIndianaSkills : public UObject
{ 
public:
	class UClass*                                      SkillImplementations[18];                                   // 0x0030   (0x0090)  
};

/// Struct /Script/Indiana.SkillsArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FSkillsArray
{ 
	TArray<ESkill>                                     Skills;                                                     // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.AttributesArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FAttributesArray
{ 
	TArray<EAttribute>                                 Attributes;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.SkillCheck
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 MaxSize: 0x0018
struct FSkillCheck
{ 
	int32_t                                            MinSkill[5];                                                // 0x0000   (0x0014)  
	float                                              Variance;                                                   // 0x0014   (0x0004)  
};

/// Class /Script/Indiana.IndianaStatGlobals
/// Size: 0x0120 (288 bytes) (0x000038 - 0x000120) align 8 MaxSize: 0x0120
class UIndianaStatGlobals : public UDataAsset
{ 
public:
	TMap<ESkillCategory, FSkillsArray>                 SkillCategoryMap;                                           // 0x0038   (0x0050)  
	TMap<EAttributeGroup, FAttributesArray>            AttributeGroupMap;                                          // 0x0088   (0x0050)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x00D8   (0x0030)  MISSED
	TArray<FSkillCheck>                                SkillChecksByLevel;                                         // 0x0108   (0x0010)  
	float                                              PreDLCSkillCheckMax;                                        // 0x0118   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x011C   (0x0004)  MISSED
};

/// Class /Script/Indiana.IndianaStats
/// Size: 0x0118 (280 bytes) (0x000030 - 0x000118) align 8 MaxSize: 0x0118
class UIndianaStats : public UObject
{ 
public:
	TArray<class URpgStat*>                            NativeStats;                                                // 0x0030   (0x0010)  
	class URpgStat*                                    AttributeStats[9];                                          // 0x0040   (0x0048)  
	class URpgStat*                                    SkillStats[18];                                             // 0x0088   (0x0090)  
};

/// Class /Script/Indiana.IndianaTargetPoint
/// Size: 0x02C0 (704 bytes) (0x0002B8 - 0x0002C0) align 8 MaxSize: 0x02C0
class AIndianaTargetPoint : public ATargetPoint
{ 
public:
	class UObsidianIDComponent*                        IDComponent;                                                // 0x02B8   (0x0008)  
};

/// Struct /Script/Indiana.TextAnimationData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FTextAnimationData
{ 
	int32_t                                            CharactersPerSecond;                                        // 0x0000   (0x0004)  
	bool                                               bInstant;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Indiana.IndianaTextAnimationData
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UIndianaTextAnimationData : public UDataAsset
{ 
public:
	TMap<EIndianaTextAnimationType, FTextAnimationData> IndianaTextAnimationData;                                  // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.IndianaUI
/// Size: 0x0690 (1680 bytes) (0x0003A8 - 0x000690) align 8 MaxSize: 0x0690
class AIndianaUI : public AHUD
{ 
public:
	unsigned char                                      UnknownData00_8[0x78];                                      // 0x03A8   (0x0078)  MISSED
	class UClass*                                      HUDClass;                                                   // 0x0420   (0x0008)  
	class UClass*                                      LedgerWidgetClass;                                          // 0x0428   (0x0008)  
	class UClass*                                      InventoryWidgetClass;                                       // 0x0430   (0x0008)  
	class UClass*                                      PauseMenuWidgetClass;                                       // 0x0438   (0x0008)  
	class UClass*                                      DeathMenuWidgetClass;                                       // 0x0440   (0x0008)  
	class UClass*                                      SettingsMenuWidgetClass;                                    // 0x0448   (0x0008)  
	class UClass*                                      ConversationWidgetClass;                                    // 0x0450   (0x0008)  
	class UClass*                                      ConversationSubtitleWidgetClass;                            // 0x0458   (0x0008)  
	class UClass*                                      SlideshowWidgetClass;                                       // 0x0460   (0x0008)  
	class UClass*                                      ComputerTerminalWidgetClass;                                // 0x0468   (0x0008)  
	class UClass*                                      ItemContainerClass;                                         // 0x0470   (0x0008)  
	class UClass*                                      LevelUpNotificationClass;                                   // 0x0478   (0x0008)  
	class UClass*                                      DebugOverlayWidgetClass;                                    // 0x0480   (0x0008)  
	class UClass*                                      ContextMenuClass;                                           // 0x0488   (0x0008)  
	class UClass*                                      ItemInspectorClass;                                         // 0x0490   (0x0008)  
	class UClass*                                      WorkbenchClass;                                             // 0x0498   (0x0008)  
	class UClass*                                      VendorClass;                                                // 0x04A0   (0x0008)  
	class UClass*                                      ItemTransferClass;                                          // 0x04A8   (0x0008)  
	class UClass*                                      ToolTipContainerClass;                                      // 0x04B0   (0x0008)  
	class UClass*                                      GenericDialogBoxClass;                                      // 0x04B8   (0x0008)  
	class UClass*                                      DialogWarningBoxClass;                                      // 0x04C0   (0x0008)  
	class UClass*                                      GenericDialogBoxRespecClass;                                // 0x04C8   (0x0008)  
	class UClass*                                      GenericMoviePlayerClass;                                    // 0x04D0   (0x0008)  
	class UClass*                                      CinematicPlayerClass;                                       // 0x04D8   (0x0008)  
	class UClass*                                      ExaminableClass;                                            // 0x04E0   (0x0008)  
	class UClass*                                      GenericItemToolTipClass;                                    // 0x04E8   (0x0008)  
	class UClass*                                      HealthKitToolTipClass;                                      // 0x04F0   (0x0008)  
	class UClass*                                      WaitTimeWidget;                                             // 0x04F8   (0x0008)  
	class UClass*                                      TutorialPopupWidgetClass;                                   // 0x0500   (0x0008)  
	unsigned char                                      UnknownData01_6[0x48];                                      // 0x0508   (0x0048)  MISSED
	class UClass*                                      SubtitleInterfaceClass;                                     // 0x0550   (0x0008)  
	class UClass*                                      SaveLoadClass;                                              // 0x0558   (0x0008)  
	class UTexture2D*                                  Missing32;                                                  // 0x0560   (0x0008)  
	class UTexture2D*                                  Missing64;                                                  // 0x0568   (0x0008)  
	class UTexture2D*                                  Missing128;                                                 // 0x0570   (0x0008)  
	class UTexture2D*                                  Missing256;                                                 // 0x0578   (0x0008)  
	unsigned char                                      UnknownData02_6[0x30];                                      // 0x0580   (0x0030)  MISSED
	class UToolTipContainerWidget*                     ToolTipContainerWidget;                                     // 0x05B0   (0x0008)  
	unsigned char                                      UnknownData03_6[0x58];                                      // 0x05B8   (0x0058)  MISSED
	TArray<class UClass*>                              DamageTypes;                                                // 0x0610   (0x0010)  
	class UArmorComponent*                             ArmorComponent;                                             // 0x0620   (0x0008)  
	class UIndianaItemAudioData*                       UIItemAudioData;                                            // 0x0628   (0x0008)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0630   (0x0008)  MISSED
	SDK_UNDEFINED(16,585) /* TArray<TWeakObjectPtr<UTexture2D*>> */ __um(DebugOverlays);                           // 0x0638   (0x0010)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0648   (0x0008)  MISSED
	class UDebugOverlayWidget*                         DebugOverlayWidget;                                         // 0x0650   (0x0008)  
	class UWorldSpaceDamageTextGenerator*              DamageTextManager;                                          // 0x0658   (0x0008)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0660   (0x0008)  MISSED
	class UClass*                                      DamageTextManagerClass;                                     // 0x0668   (0x0008)  
	class UStatusTagGenerator*                         StatusTagManager;                                           // 0x0670   (0x0008)  
	class UClass*                                      StatusTagManagerClass;                                      // 0x0678   (0x0008)  
	unsigned char                                      UnknownData07_7[0x10];                                      // 0x0680   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaUI.ToggleSafeSpace
	// void ToggleSafeSpace();                                                                                                  // [0x18637d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.ToggleResurrect
	// void ToggleResurrect();                                                                                                  // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.ToggleDamageTextVisibility
	// void ToggleDamageTextVisibility();                                                                                       // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.StartWorkbench
	// void StartWorkbench();                                                                                                   // [0x18636b0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.ShowItemOnDisplay
	// void ShowItemOnDisplay(class UClass* ItemIn);                                                                            // [0x1863630] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.SetSoundMixVolume
	// void SetSoundMixVolume(class USoundMix* SoundMix, float Volume);                                                         // [0x1863440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.SetHudVisible
	// void SetHudVisible(bool bNewVisible);                                                                                    // [0x1863230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.RemoveSubtitleManagerInstance
	// void RemoveSubtitleManagerInstance(class USubtitleManagerWidget* ManagerWidget);                                         // [0x1862f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.OverlayCycle
	// void OverlayCycle();                                                                                                     // [0x1862e90] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.GetUserWidget
	// class UIndianaInterfaceUserWidget* GetUserWidget(ECheckBranches& Branches, class UClass* WidgetClass);                   // [0x1861da0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUI.GetSlideshowWidget
	// class USlideshowWidget* GetSlideshowWidget();                                                                            // [0x1861d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUI.GetHUD
	// class UHUDWidget* GetHUD();                                                                                              // [0x1861c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUI.ForceHUDHidden
	// void ForceHUDHidden(bool bForceHidden);                                                                                  // [0x18619d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.FontSizeModifierChanged
	// void FontSizeModifierChanged(int32_t ModifierIn);                                                                        // [0x1861940] Final|Native|Public  
	// Function /Script/Indiana.IndianaUI.DebugToggleDLC
	// void DebugToggleDLC();                                                                                                   // [0x1861910] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.DebugStringTables
	// void DebugStringTables();                                                                                                // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.DebugStringIDsAndTables
	// void DebugStringIDsAndTables();                                                                                          // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.DebugStringIDs
	// void DebugStringIDs();                                                                                                   // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.DebugSetFontScaling
	// void DebugSetFontScaling(int32_t ModifierIn);                                                                            // [0x1861750] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.CreateSubtitleManagerInstanceForMSSP
	// class USubtitleManagerWidget* CreateSubtitleManagerInstanceForMSSP(class UMovieSceneSequencePlayer* MovieSceneSequencePlayer); // [0x18614e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.CreateSubtitleManagerInstance
	// class USubtitleManagerWidget* CreateSubtitleManagerInstance(class UMediaPlayer* MediaPlayer);                            // [0x1861440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.CreateGenericMoviePlayer
	// class UMoviePlayerWidget* CreateGenericMoviePlayer();                                                                    // [0x1861410] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.CreateExaminable
	// void CreateExaminable(FLocString& NameString, FLocString& DescriptionString, FLocString& ActionString, FName& RemoteEventOnExaminationEnd); // [0x1861260] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.CreateCinematicPlayer
	// class UCinematicPlayerWidget* CreateCinematicPlayer();                                                                   // [0x1861230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.ConstructUserWidget
	// class UIndianaInterfaceUserWidget* ConstructUserWidget(ECheckBranches& Branches, class UClass* WidgetClass);             // [0x1861140] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.ColorblindMode
	// void ColorblindMode(EColorVisionDeficiency Deficiency, int32_t Severity, bool bCorrection, bool bCorrectionPreview);     // [0x1860fe0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.CloseWorkbench
	// void CloseWorkbench();                                                                                                   // [0x1860fc0] Final|Native|Public  
	// Function /Script/Indiana.IndianaUI.CloseGenericMoviePlayer
	// void CloseGenericMoviePlayer();                                                                                          // [0x1860f80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaUIAudioData
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UIndianaUIAudioData : public UDataAsset
{ 
public:
	TMap<EIndianaAudioEvent, class UAkAudioEvent*>     AudioEvents;                                                // 0x0038   (0x0050)  
};

/// Struct /Script/Indiana.OpacityWrapper
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 MaxSize: 0x0004
struct FOpacityWrapper
{ 
	float                                              OpacityValue;                                               // 0x0000   (0x0004)  
};

/// Class /Script/Indiana.IndianaUIColorsData
/// Size: 0x00D8 (216 bytes) (0x000038 - 0x0000D8) align 8 MaxSize: 0x00D8
class UIndianaUIColorsData : public UDataAsset
{ 
public:
	TMap<EIndianaUIColorType, FLinearColor>            IndianaUIColors;                                            // 0x0038   (0x0050)  
	TMap<EIndianaUIOpacityType, FOpacityWrapper>       IndianaUIOpacitySettings;                                   // 0x0088   (0x0050)  
};

/// Class /Script/Indiana.IndianaUIControllerIconsData
/// Size: 0x0128 (296 bytes) (0x000038 - 0x000128) align 8 MaxSize: 0x0128
class UIndianaUIControllerIconsData : public UDataAsset
{ 
public:
	SDK_UNDEFINED(80,586) /* TMap<FString, TWeakObjectPtr<UTexture2D*>> */ __um(ButtonsMap);                       // 0x0038   (0x0050)  
	SDK_UNDEFINED(80,587) /* TMap<FName, TWeakObjectPtr<UTexture2D*>> */ __um(ButtonTextures);                     // 0x0088   (0x0050)  
	TMap<FName, class UTexture2D*>                     Icons;                                                      // 0x00D8   (0x0050)  
};

/// Class /Script/Indiana.IndianaUIFunctionLibrary
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UIndianaUIFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Indiana.IndianaUIFunctionLibrary.GetOpacityForComponentByType
	// float GetOpacityForComponentByType(EIndianaUIOpacityType Type);                                                          // [0x18660f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUIFunctionLibrary.GetIndianaUI
	// class AIndianaUI* GetIndianaUI(ECheckBranches& Branches, class APlayerController* Controller);                           // [0x1865fe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaUIFunctionLibrary.GetColorByType
	// FLinearColor GetColorByType(EIndianaUIColorType Type);                                                                   // [0x1865f20] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaWorldSettings
/// Size: 0x05B8 (1464 bytes) (0x0004A0 - 0x0005B8) align 8 MaxSize: 0x05B8
class AIndianaWorldSettings : public AWorldSettings
{ 
public:
	class UMapInformation*                             MapInformation;                                             // 0x04A0   (0x0008)  
	TMap<FName, FLogicalGroupedExpression>             ShouldLoadLevelLogicConditions;                             // 0x04A8   (0x0050)  
	class UPresenceData*                               PresenceData;                                               // 0x04F8   (0x0008)  
	class UMapGameplayMusicSettings*                   GameplayMusicSettings;                                      // 0x0500   (0x0008)  
	TWeakObjectPtr<class UAssetList*>                  LevelAssets;                                                // 0x0508   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0510   (0x0020)  MISSED
	bool                                               bSpawnCompanionsOnTransition;                               // 0x0530   (0x0001)  
	bool                                               bIsInterior;                                                // 0x0531   (0x0001)  
	bool                                               bInteriorFastTravelEnabled;                                 // 0x0532   (0x0001)  
	bool                                               bIsTown;                                                    // 0x0533   (0x0001)  
	bool                                               bIsPlayerHomeBase;                                          // 0x0534   (0x0001)  
	bool                                               bIsPenthouse;                                               // 0x0535   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0536   (0x0002)  MISSED
	TMap<ESpecialObsidianID, FGlobalVariable>          LockedCompanionHomeBaseStasisOverrideVariables;             // 0x0538   (0x0050)  
	int32_t                                            MinEffectiveLevel;                                          // 0x0588   (0x0004)  
	int32_t                                            MaxEffectiveLevel;                                          // 0x058C   (0x0004)  
	bool                                               bApplyLevelModifier;                                        // 0x0590   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0591   (0x0003)  MISSED
	int32_t                                            FlatLevelModifier;                                          // 0x0594   (0x0004)  
	bool                                               bSimulateTimeOfDayPatrol;                                   // 0x0598   (0x0001)  
	bool                                               bWallaEnabled;                                              // 0x0599   (0x0001)  
	bool                                               bCharacterCreation;                                         // 0x059A   (0x0001)  
	unsigned char                                      UnknownData03_6[0x5];                                       // 0x059B   (0x0005)  MISSED
	class UClass*                                      ConversationLightingClassOverride;                          // 0x05A0   (0x0008)  
	class UPreloadAssetList*                           PreloadAssets;                                              // 0x05A8   (0x0008)  
	EIndianaChunkIndex                                 ChunkIndex;                                                 // 0x05B0   (0x0004)  
	unsigned char                                      UnknownData04_7[0x4];                                       // 0x05B4   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.IndianaWorldSettings.K2_IsCurrentMap
	// bool K2_IsCurrentMap(class UMapInformation* MapInfo);                                                                    // [0x1866370] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InputGuideWidget
/// Size: 0x0478 (1144 bytes) (0x000300 - 0x000478) align 8 MaxSize: 0x0478
class UInputGuideWidget : public UIndianaUserWidget
{ 
public:
	class UInputLabelHoldWidget*                       HoldWidget;                                                 // 0x0300   (0x0008)  
	class UTextBlockBase*                              InputGuide;                                                 // 0x0308   (0x0008)  
	class UTextBlockBase*                              InputGuideOptional;                                         // 0x0310   (0x0008)  
	class UHorizontalBox*                              TextContainer;                                              // 0x0318   (0x0008)  
	class UHorizontalBox*                              OptionalTextContainer;                                      // 0x0320   (0x0008)  
	class UImage*                                      RadialFill;                                                 // 0x0328   (0x0008)  
	class UBorder*                                     TextAreaBorder;                                             // 0x0330   (0x0008)  
	class UBorder*                                     OptionalTextAreaBorder;                                     // 0x0338   (0x0008)  
	class UImage*                                      ModuleImage;                                                // 0x0340   (0x0008)  
	class UImage*                                      SkillImage;                                                 // 0x0348   (0x0008)  
	class UHorizontalBox*                              SkillTextHorizontalBox;                                     // 0x0350   (0x0008)  
	class UTextBlockBase*                              InteractionPlayerSkill;                                     // 0x0358   (0x0008)  
	class UTextBlockBase*                              InteractionSkillRequired;                                   // 0x0360   (0x0008)  
	class UHorizontalBox*                              InteractionTextHorizontalBox;                               // 0x0368   (0x0008)  
	class UImage*                                      ItemImage;                                                  // 0x0370   (0x0008)  
	class UOverlay*                                    ArrowsOverlay;                                              // 0x0378   (0x0008)  
	class UTextBlockBase*                              InteractionPlayerResources;                                 // 0x0380   (0x0008)  
	class UTextBlockBase*                              InteractionResourcesRequired;                               // 0x0388   (0x0008)  
	class USizeBox*                                    HackImpossible;                                             // 0x0390   (0x0008)  
	class UImage*                                      RotatingRedCircle;                                          // 0x0398   (0x0008)  
	class UOverlay*                                    LittleRedCircleOverlay;                                     // 0x03A0   (0x0008)  
	class UImage*                                      KeycardImage;                                               // 0x03A8   (0x0008)  
	class UImage*                                      HackImpossibleImage;                                        // 0x03B0   (0x0008)  
	class UVerticalBox*                                InteractResourceDisplay;                                    // 0x03B8   (0x0008)  
	class UOverlay*                                    RadialOverlay;                                              // 0x03C0   (0x0008)  
	class USizeBox*                                    TextPromptSizebox;                                          // 0x03C8   (0x0008)  
	class UTexture2D*                                  LockedComputer;                                             // 0x03D0   (0x0008)  
	class UTexture2D*                                  UnlockedComputer;                                           // 0x03D8   (0x0008)  
	class UTexture2D*                                  LockedContainer;                                            // 0x03E0   (0x0008)  
	class UTexture2D*                                  UnlockedContainer;                                          // 0x03E8   (0x0008)  
	class UTexture2D*                                  LockedDoor;                                                 // 0x03F0   (0x0008)  
	class UTexture2D*                                  UnlockedDoor;                                               // 0x03F8   (0x0008)  
	class UTexture2D*                                  LockedPickpocket;                                           // 0x0400   (0x0008)  
	class UTexture2D*                                  UnlockedPickpocket;                                         // 0x0408   (0x0008)  
	class UTexture2D*                                  LockedRobot;                                                // 0x0410   (0x0008)  
	class UTexture2D*                                  UnlockedRobot;                                              // 0x0418   (0x0008)  
	class UTexture2D*                                  LockedTrap;                                                 // 0x0420   (0x0008)  
	class UTexture2D*                                  UnlockedTrap;                                               // 0x0428   (0x0008)  
	class UTexture2D*                                  LockedKeycard;                                              // 0x0430   (0x0008)  
	class UTexture2D*                                  UnlockedKeycard;                                            // 0x0438   (0x0008)  
	class UTexture2D*                                  SkillHackTexture;                                           // 0x0440   (0x0008)  
	class UTexture2D*                                  SkillLockpickTexture;                                       // 0x0448   (0x0008)  
	class UTexture2D*                                  SkillPickpocketTexture;                                     // 0x0450   (0x0008)  
	class UTexture2D*                                  ItemLockpickTexture;                                        // 0x0458   (0x0008)  
	class UTexture2D*                                  ItemHackTexture;                                            // 0x0460   (0x0008)  
	EIndianaUIColorType                                FontColorType;                                              // 0x0468   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x0469   (0x000F)  MISSED


	/// Functions
	// Function /Script/Indiana.InputGuideWidget.OnInteractionProgressChange
	// void OnInteractionProgressChange(float CurrentProgressRatio);                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.InputGuideWidget.InteractChanged
	// void InteractChanged(bool bVisible);                                                                                     // [0x1c5deb0] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.InputGuideWidget.GetContentWidth
	// int32_t GetContentWidth();                                                                                               // [0x1865fb0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.InputLabelGroupWidget
/// Size: 0x0370 (880 bytes) (0x000300 - 0x000370) align 8 MaxSize: 0x0370
class UInputLabelGroupWidget : public UIndianaUserWidget
{ 
public:
	class UClass*                                      InputLabelClass;                                            // 0x0300   (0x0008)  
	class UHorizontalBox*                              EntryContainer;                                             // 0x0308   (0x0008)  
	class UHorizontalBox*                              SecondRowEntryContainer;                                    // 0x0310   (0x0008)  
	class UHorizontalBox*                              FrameHorizontalBox;                                         // 0x0318   (0x0008)  
	TArray<FInputLabelDescription>                     LabelDescriptions;                                          // 0x0320   (0x0010)  
	int32_t                                            MaxFirstRowEntries;                                         // 0x0330   (0x0004)  
	bool                                               bCollapseOnHide;                                            // 0x0334   (0x0001)  
	bool                                               bShowFramingImages;                                         // 0x0335   (0x0001)  
	bool                                               bCollapseFramingImages;                                     // 0x0336   (0x0001)  
	bool                                               bCollapseFramingImagesWhenHidden;                           // 0x0337   (0x0001)  
	bool                                               bShowOnlyUniqueIcons;                                       // 0x0338   (0x0001)  
	bool                                               bKeepVisibleWhenUnableToExecute;                            // 0x0339   (0x0001)  
	unsigned char                                      UnknownData00_7[0x36];                                      // 0x033A   (0x0036)  MISSED
};

/// Class /Script/Indiana.InputLabelHoldWidget
/// Size: 0x03B8 (952 bytes) (0x000300 - 0x0003B8) align 8 MaxSize: 0x03B8
class UInputLabelHoldWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              HoldTextBlock;                                              // 0x0300   (0x0008)  
	class UTextBlockBase*                              KeyInputHoldlessTextBlock;                                  // 0x0308   (0x0008)  
	class UOverlay*                                    KeyboardMasterOverlay;                                      // 0x0310   (0x0008)  
	class UImage*                                      GamepadIcon;                                                // 0x0318   (0x0008)  
	class UBorder*                                     KeyRadialReveal;                                            // 0x0320   (0x0008)  
	class UOverlay*                                    GamepadMasterOverlay;                                       // 0x0328   (0x0008)  
	class USizeBox*                                    KeyInputSizeBox;                                            // 0x0330   (0x0008)  
	class UOverlay*                                    GamepadOverlay;                                             // 0x0338   (0x0008)  
	class UImage*                                      GamepadRadialReveal;                                        // 0x0340   (0x0008)  
	class UOverlay*                                    ButtonOverlay;                                              // 0x0348   (0x0008)  
	unsigned char                                      UnknownData00_7[0x68];                                      // 0x0350   (0x0068)  MISSED


	/// Functions
	// Function /Script/Indiana.InputLabelHoldWidget.UpdateFill
	// void UpdateFill();                                                                                                       // [0x1866990] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.InputLabelHoldWidget.SetWidth
	// void SetWidth(float Width);                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.InputLabelHoldWidget.SetRadialFill
	// void SetRadialFill(float FillRatio, float Opacity);                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.InputLabelWidget
/// Size: 0x0370 (880 bytes) (0x000300 - 0x000370) align 8 MaxSize: 0x0370
class UInputLabelWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	FLocString                                         TextReference;                                              // 0x0318   (0x0008)  
	bool                                               bIsNavigationPrompt;                                        // 0x0320   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0321   (0x0007)  MISSED
	FString                                            IconName;                                                   // 0x0328   (0x0010)  
	FName                                              Icon;                                                       // 0x0338   (0x0008)  
	FString                                            ActionName;                                                 // 0x0340   (0x0010)  
	FName                                              Action;                                                     // 0x0350   (0x0008)  
	bool                                               bDisplayKeyboardMouse;                                      // 0x0358   (0x0001)  
	bool                                               bDisplayGamepad;                                            // 0x0359   (0x0001)  
	bool                                               bDisplayActionText;                                         // 0x035A   (0x0001)  
	unsigned char                                      UnknownData02_6[0x5];                                       // 0x035B   (0x0005)  MISSED
	class UInputLabelHoldWidget*                       HoldWidget;                                                 // 0x0360   (0x0008)  
	class UTextBlockBase*                              ActionTextBlock;                                            // 0x0368   (0x0008)  
};

/// Class /Script/Indiana.InputWidget
/// Size: 0x0378 (888 bytes) (0x000300 - 0x000378) align 8 MaxSize: 0x0378
class UInputWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	FName                                              Action;                                                     // 0x0318   (0x0008)  
	bool                                               bIsNavigationPrompt;                                        // 0x0320   (0x0001)  
	bool                                               bDisplayKeyboardMouse;                                      // 0x0321   (0x0001)  
	bool                                               bDisplayGamepad;                                            // 0x0322   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x0323   (0x0005)  MISSED
	class UOverlay*                                    KeyboardMasterOverlay;                                      // 0x0328   (0x0008)  
	class UImage*                                      GamepadIcon;                                                // 0x0330   (0x0008)  
	class UOverlay*                                    GamepadMasterOverlay;                                       // 0x0338   (0x0008)  
	class UTextBlockBase*                              KeyInputHoldlessTextBlock;                                  // 0x0340   (0x0008)  
	class USizeBox*                                    KeyInputSizeBox;                                            // 0x0348   (0x0008)  
	class UOverlay*                                    ButtonOverlay;                                              // 0x0350   (0x0008)  
	unsigned char                                      UnknownData02_7[0x20];                                      // 0x0358   (0x0020)  MISSED
};

/// Class /Script/Indiana.InstantHitData
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UInstantHitData : public UDataAsset
{ 
public:
	class UImpactDataSet*                              ImpactDataSet;                                              // 0x0038   (0x0008)  
	class UParticleSystem*                             TrailFx;                                                    // 0x0040   (0x0008)  
	FName                                              TrailFxEndParam;                                            // 0x0048   (0x0008)  
};

/// Struct /Script/Indiana.InteractPayload
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FInteractPayload
{ 
	int32_t                                            Int32;                                                      // 0x0000   (0x0004)  
	float                                              Float;                                                      // 0x0004   (0x0004)  
	FString                                            String;                                                     // 0x0008   (0x0010)  
};

/// Struct /Script/Indiana.InteractActorDescription
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FInteractActorDescription
{ 
	class AActor*                                      Actor;                                                      // 0x0000   (0x0008)  
	FInteractPayload                                   Payload;                                                    // 0x0008   (0x0018)  
};

/// Class /Script/Indiana.InteractableComponent
/// Size: 0x0330 (816 bytes) (0x000268 - 0x000330) align 16 MaxSize: 0x0330
class UInteractableComponent : public USceneComponent
{ 
public:
	int32_t                                            FacingAngle;                                                // 0x0268   (0x0004)  
	float                                              ConversationInteractRangeOverride;                          // 0x026C   (0x0004)  
	FInteractPayload                                   Payload;                                                    // 0x0270   (0x0018)  
	SDK_UNDEFINED(16,588) /* FMulticastInlineDelegate */ __um(OnInteractComplete);                                 // 0x0288   (0x0010)  
	bool                                               bBlockPropagation;                                          // 0x0298   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0299   (0x0007)  MISSED
	TArray<FInteractActorDescription>                  InteractTargets;                                            // 0x02A0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x02B0   (0x0018)  MISSED
	TArray<class UInteractionEvent*>                   Events;                                                     // 0x02C8   (0x0010)  
	unsigned char                                      UnknownData02_6[0x30];                                      // 0x02D8   (0x0030)  MISSED
	bool                                               bDefaultCanHighlightDirect;                                 // 0x0308   (0x0001)  
	bool                                               bDefaultCanHighlightProximity;                              // 0x0309   (0x0001)  
	unsigned char                                      UnknownData03_7[0x26];                                      // 0x030A   (0x0026)  MISSED


	/// Functions
	// Function /Script/Indiana.InteractableComponent.GetInteractableComponent
	// class UInteractableComponent* GetInteractableComponent(class UChildActorComponent* ChildActorComponent);                 // [0x186a3c0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InteractableMapEntry
/// Size: 0x0308 (776 bytes) (0x000300 - 0x000308) align 8 MaxSize: 0x0308
class UInteractableMapEntry : public UBaseMapEntryWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0300   (0x0008)  
};

/// Class /Script/Indiana.ScriptingEvent
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UScriptingEvent : public UInteractionEvent
{ 
public:
	TArray<class UScriptEvent*>                        ScriptEvents;                                               // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.InteractionInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInteractionInterface : public UInterface
{ 
public:


	/// Functions
	// Function /Script/Indiana.InteractionInterface.GetInteractLocString
	// FLocString GetInteractLocString();                                                                                       // [0x1c5deb0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.InteractionInterface.GetInteraction
	// EInteractionType GetInteraction(FInteractionDescription& Description, FInteractPayload& Payload, float InteractDistance); // [0x186a450] Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.InteractionInterface.CanInteract
	// bool CanInteract(class AIndianaCharacter* Initiator, FInteractPayload& Payload);                                         // [0x186a1b0] Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/Indiana.InteractorInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UInteractorInterface : public UInterface
{ 
public:
};

/// Class /Script/Indiana.InterestComponent
/// Size: 0x0198 (408 bytes) (0x0000E0 - 0x000198) align 8 MaxSize: 0x0198
class UInterestComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0xB0];                                      // 0x00E0   (0x00B0)  MISSED
	float                                              MinTimeSinceMove;                                           // 0x0190   (0x0004)  
	float                                              MinTimeSinceIdle;                                           // 0x0194   (0x0004)  
};

/// Struct /Script/Indiana.InterestTypeData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FInterestTypeData
{ 
	FGameplayTag                                       InterestType;                                               // 0x0000   (0x0008)  
	float                                              Weight;                                                     // 0x0008   (0x0004)  
	float                                              Cooldown;                                                   // 0x000C   (0x0004)  
};

/// Class /Script/Indiana.InterestDataPackage
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UInterestDataPackage : public UDataAsset
{ 
public:
	float                                              DefaultBehaviorWeight;                                      // 0x0038   (0x0004)  
	float                                              DefaultBehaviorCooldown;                                    // 0x003C   (0x0004)  
	float                                              DefaultBehaviorDuration;                                    // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<FInterestTypeData>                          InterestTypeData;                                           // 0x0048   (0x0010)  
};

/// Class /Script/Indiana.InventoryAmmoData
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UInventoryAmmoData : public UDataAsset
{ 
public:
	class UClass*                                      HandgunAmmoClass;                                           // 0x0038   (0x0008)  
	class UClass*                                      RifleAmmoClass;                                             // 0x0040   (0x0008)  
	class UClass*                                      EnergyCellAmmoClass;                                        // 0x0048   (0x0008)  
};

/// Class /Script/Indiana.InventoryPageWidget
/// Size: 0x0430 (1072 bytes) (0x000300 - 0x000430) align 8 MaxSize: 0x0430
class UInventoryPageWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x100];                                     // 0x0300   (0x0100)  MISSED
	FLocString                                         Name;                                                       // 0x0400   (0x0008)  
	class UTextBlockBase*                              HeaderTextblock;                                            // 0x0408   (0x0008)  
	class UTextBlockBase*                              ComparisonTextBlock;                                        // 0x0410   (0x0008)  
	unsigned char                                      UnknownData01_6[0x16];                                      // 0x0418   (0x0016)  MISSED
	bool                                               bDisplayRepairAllEquippedButton;                            // 0x042E   (0x0001)  
	unsigned char                                      UnknownData02_7[0x1];                                       // 0x042F   (0x0001)  MISSED


	/// Functions
	// Function /Script/Indiana.InventoryPageWidget.OnItemCompare
	// void OnItemCompare(bool bCompared);                                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.InventoryArmorPageWidget
/// Size: 0x0488 (1160 bytes) (0x000430 - 0x000488) align 8 MaxSize: 0x0488
class UInventoryArmorPageWidget : public UInventoryPageWidget
{ 
public:
	bool                                               bDisplayEquippedItems;                                      // 0x0430   (0x0001)  
	bool                                               bKeepEquippedItemsSpace;                                    // 0x0431   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0432   (0x0006)  MISSED
	class UDragContainerWidget*                        DragContainer0;                                             // 0x0438   (0x0008)  
	class UDragContainerWidget*                        DragContainer1;                                             // 0x0440   (0x0008)  
	class UItemViewerButtonWidget*                     Button0;                                                    // 0x0448   (0x0008)  
	class UItemViewerButtonWidget*                     Button1;                                                    // 0x0450   (0x0008)  
	class UBorder*                                     EquipmentBorder;                                            // 0x0458   (0x0008)  
	class UOverlay*                                    EquipmentOverlay;                                           // 0x0460   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0468   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.InventoryArmorPageWidget.SetEquippedArmorSlot
	// void SetEquippedArmorSlot(EArmorSlot ArmorSlotIn);                                                                       // [0x186acf0] Final|Native|Protected 
};

/// Class /Script/Indiana.InventoryConsumablesPageWidget
/// Size: 0x0570 (1392 bytes) (0x000430 - 0x000570) align 8 MaxSize: 0x0570
class UInventoryConsumablesPageWidget : public UInventoryPageWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0430   (0x0010)  MISSED
	class UItemViewerHealthKitButtonWidget*            DrugButtonMain;                                             // 0x0440   (0x0008)  
	class UTextBlockBase*                              ChargeTextBlock;                                            // 0x0448   (0x0008)  
	class UDragContainerWidget*                        DrugDragContainer0;                                         // 0x0450   (0x0008)  
	class UDragContainerWidget*                        DrugDragContainer1;                                         // 0x0458   (0x0008)  
	class UDragContainerWidget*                        DrugDragContainer2;                                         // 0x0460   (0x0008)  
	class UDragContainerWidget*                        DrugDragContainer3;                                         // 0x0468   (0x0008)  
	class UItemViewerButtonWidget*                     DrugButton0;                                                // 0x0470   (0x0008)  
	class UItemViewerButtonWidget*                     DrugButton1;                                                // 0x0478   (0x0008)  
	class UItemViewerButtonWidget*                     DrugButton2;                                                // 0x0480   (0x0008)  
	class UItemViewerButtonWidget*                     DrugButton3;                                                // 0x0488   (0x0008)  
	class UImage*                                      UnavailableImage0;                                          // 0x0490   (0x0008)  
	class UImage*                                      UnavailableImage1;                                          // 0x0498   (0x0008)  
	class UImage*                                      UnavailableImage2;                                          // 0x04A0   (0x0008)  
	class UImage*                                      UnavailableImage3;                                          // 0x04A8   (0x0008)  
	class UTextBlockBase*                              DrugCharge0;                                                // 0x04B0   (0x0008)  
	class UTextBlockBase*                              DrugCharge1;                                                // 0x04B8   (0x0008)  
	class UTextBlockBase*                              DrugCharge2;                                                // 0x04C0   (0x0008)  
	class UTextBlockBase*                              DrugCharge3;                                                // 0x04C8   (0x0008)  
	class UTextBlockBase*                              SlotText0;                                                  // 0x04D0   (0x0008)  
	class UTextBlockBase*                              SlotText1;                                                  // 0x04D8   (0x0008)  
	class UTextBlockBase*                              SlotText2;                                                  // 0x04E0   (0x0008)  
	class UTextBlockBase*                              SlotText3;                                                  // 0x04E8   (0x0008)  
	class UTextBlockBase*                              MedicalSkillText1;                                          // 0x04F0   (0x0008)  
	class UTextBlockBase*                              MedicalSkillText2;                                          // 0x04F8   (0x0008)  
	class UTextBlockBase*                              MedicalSkillText3;                                          // 0x0500   (0x0008)  
	class UTextBlockBase*                              MedicalText1;                                               // 0x0508   (0x0008)  
	class UTextBlockBase*                              MedicalText2;                                               // 0x0510   (0x0008)  
	class UTextBlockBase*                              MedicalText3;                                               // 0x0518   (0x0008)  
	class UMedKitDrugSlotWidget*                       MedKitAdrenoSlot;                                           // 0x0520   (0x0008)  
	class UMedKitDrugSlotWidget*                       MedKitDrugSlot1;                                            // 0x0528   (0x0008)  
	class UMedKitDrugSlotWidget*                       MedKitDrugSlot2;                                            // 0x0530   (0x0008)  
	class UMedKitDrugSlotWidget*                       MedKitDrugSlot3;                                            // 0x0538   (0x0008)  
	class UClass*                                      WidgetClass;                                                // 0x0540   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0548   (0x0028)  MISSED
};

/// Class /Script/Indiana.InventoryGadgetsPageWidget
/// Size: 0x04F0 (1264 bytes) (0x000430 - 0x0004F0) align 8 MaxSize: 0x04F0
class UInventoryGadgetsPageWidget : public UInventoryPageWidget
{ 
public:
	class UDragContainerWidget*                        DragContainer0;                                             // 0x0430   (0x0008)  
	class UDragContainerWidget*                        DragContainer1;                                             // 0x0438   (0x0008)  
	class UDragContainerWidget*                        DragContainer2;                                             // 0x0440   (0x0008)  
	class UDragContainerWidget*                        DragContainer3;                                             // 0x0448   (0x0008)  
	class UDragContainerWidget*                        DragContainer4;                                             // 0x0450   (0x0008)  
	class UItemViewerButtonWidget*                     GadgetButton0;                                              // 0x0458   (0x0008)  
	class UItemViewerButtonWidget*                     GadgetButton1;                                              // 0x0460   (0x0008)  
	class UItemViewerButtonWidget*                     GadgetButton2;                                              // 0x0468   (0x0008)  
	class UItemViewerButtonWidget*                     GadgetButton3;                                              // 0x0470   (0x0008)  
	class UItemViewerButtonWidget*                     GadgetButton4;                                              // 0x0478   (0x0008)  
	class UImage*                                      UnavailableImage0;                                          // 0x0480   (0x0008)  
	class UImage*                                      UnavailableImage1;                                          // 0x0488   (0x0008)  
	class UImage*                                      UnavailableImage2;                                          // 0x0490   (0x0008)  
	class UImage*                                      UnavailableImage3;                                          // 0x0498   (0x0008)  
	class UImage*                                      UnavailableImage4;                                          // 0x04A0   (0x0008)  
	class UTextBlockBase*                              SlotNumber0;                                                // 0x04A8   (0x0008)  
	class UTextBlockBase*                              SlotNumber1;                                                // 0x04B0   (0x0008)  
	class UTextBlockBase*                              SlotNumber2;                                                // 0x04B8   (0x0008)  
	class UTextBlockBase*                              SlotNumber3;                                                // 0x04C0   (0x0008)  
	class UTextBlockBase*                              SlotNumber4;                                                // 0x04C8   (0x0008)  
	class UClass*                                      WidgetClass;                                                // 0x04D0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x04D8   (0x0018)  MISSED
};

/// Class /Script/Indiana.InventoryItemSlotWidget
/// Size: 0x0308 (776 bytes) (0x000300 - 0x000308) align 8 MaxSize: 0x0308
class UInventoryItemSlotWidget : public UIndianaUserWidget
{ 
public:
	class UItemViewerButtonWidget*                     Button;                                                     // 0x0300   (0x0008)  
};

/// Class /Script/Indiana.ItemViewerItemWidget
/// Size: 0x0288 (648 bytes) (0x000278 - 0x000288) align 8 MaxSize: 0x0288
class UItemViewerItemWidget : public UUserWidget
{ 
public:
	FItemStack                                         ItemStack;                                                  // 0x0278   (0x0010)  


	/// Functions
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonUnhovered
	// void OnButtonUnhovered();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonPressed
	// void OnButtonPressed();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonHovered
	// void OnButtonHovered();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonFocusLost
	// void OnButtonFocusLost();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonFocused
	// void OnButtonFocused();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonClicked
	// void OnButtonClicked();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.InventoryItemWidget
/// Size: 0x0370 (880 bytes) (0x000288 - 0x000370) align 8 MaxSize: 0x0370
class UInventoryItemWidget : public UItemViewerItemWidget
{ 
public:
	class UOverlay*                                    PendingStackOverlay;                                        // 0x0288   (0x0008)  
	class UTextBlockBase*                              PendingCountTextBlock;                                      // 0x0290   (0x0008)  
	class UTextBlockBase*                              CountTextBlock;                                             // 0x0298   (0x0008)  
	class UProgressBar*                                RepairProgressBar;                                          // 0x02A0   (0x0008)  
	class UProgressBar*                                PristineProgressBar;                                        // 0x02A8   (0x0008)  
	class UImage*                                      LargeRepairImage;                                           // 0x02B0   (0x0008)  
	class UImage*                                      QuickComparisonImage;                                       // 0x02B8   (0x0008)  
	class UHorizontalBox*                              ValueHorizontalBox;                                         // 0x02C0   (0x0008)  
	class UTextBlockBase*                              ValueTextBlock;                                             // 0x02C8   (0x0008)  
	class UImage*                                      IconImage;                                                  // 0x02D0   (0x0008)  
	class UImage*                                      RestrictedImage;                                            // 0x02D8   (0x0008)  
	class UVerticalBox*                                ModContainer;                                               // 0x02E0   (0x0008)  
	class UImage*                                      Mod0;                                                       // 0x02E8   (0x0008)  
	class UImage*                                      Mod1;                                                       // 0x02F0   (0x0008)  
	class UImage*                                      Mod2;                                                       // 0x02F8   (0x0008)  
	class UImage*                                      Mod3;                                                       // 0x0300   (0x0008)  
	class UImage*                                      ElementImage;                                               // 0x0308   (0x0008)  
	class UImage*                                      TheftImage;                                                 // 0x0310   (0x0008)  
	class UImage*                                      PristineConditionImage;                                     // 0x0318   (0x0008)  
	class UImage*                                      CompareImage;                                               // 0x0320   (0x0008)  
	class UImage*                                      EquippedImage;                                              // 0x0328   (0x0008)  
	class UImage*                                      JunkImage;                                                  // 0x0330   (0x0008)  
	class UImage*                                      SellImage;                                                  // 0x0338   (0x0008)  
	class UImage*                                      NewItemImage;                                               // 0x0340   (0x0008)  
	class UImage*                                      UniqueImage;                                                // 0x0348   (0x0008)  
	class UImage*                                      ScienceImage;                                               // 0x0350   (0x0008)  
	class UImage*                                      ImprovisedImage;                                            // 0x0358   (0x0008)  
	FColor                                             CompanionTint;                                              // 0x0360   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0364   (0x000C)  MISSED


	/// Functions
	// Function /Script/Indiana.InventoryItemWidget.GetDamageType
	// class UClass* GetDamageType();                                                                                           // [0x186da50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.InventoryJunkPageWidget
/// Size: 0x0430 (1072 bytes) (0x000430 - 0x000430) align 8 MaxSize: 0x0430
class UInventoryJunkPageWidget : public UInventoryPageWidget
{ 
public:
};

/// Class /Script/Indiana.InventoryMaterialsPageWidget
/// Size: 0x0430 (1072 bytes) (0x000430 - 0x000430) align 8 MaxSize: 0x0430
class UInventoryMaterialsPageWidget : public UInventoryPageWidget
{ 
public:
};

/// Class /Script/Indiana.InventoryModificationsPageWidget
/// Size: 0x0430 (1072 bytes) (0x000430 - 0x000430) align 8 MaxSize: 0x0430
class UInventoryModificationsPageWidget : public UInventoryPageWidget
{ 
public:
};

/// Class /Script/Indiana.InventoryWeaponAmmoGroupWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UInventoryWeaponAmmoGroupWidget : public UIndianaUserWidget
{ 
public:
	FLocString                                         AmmoName0;                                                  // 0x0300   (0x0008)  
	class UInventoryWeaponAmmoWidget*                  Ammo0;                                                      // 0x0308   (0x0008)  
	class UClass*                                      RelatedAmmoClass;                                           // 0x0310   (0x0008)  


	/// Functions
	// Function /Script/Indiana.InventoryWeaponAmmoGroupWidget.OnHighlightChange
	// void OnHighlightChange(bool bHighlight);                                                                                 // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.InventoryWeaponAmmoWidget
/// Size: 0x0318 (792 bytes) (0x000278 - 0x000318) align 8 MaxSize: 0x0318
class UInventoryWeaponAmmoWidget : public UUserWidget
{ 
public:
	FSlateBrush                                        Brush;                                                      // 0x0278   (0x0088)  
	class UButtonBase*                                 Button;                                                     // 0x0300   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0308   (0x0008)  
	class UTextBlockBase*                              CountTextBlock;                                             // 0x0310   (0x0008)  


	/// Functions
	// Function /Script/Indiana.InventoryWeaponAmmoWidget.SetIcon
	// void SetIcon(class UTexture2D* Icon);                                                                                    // [0x186e670] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InventoryWeaponsPageWidget
/// Size: 0x0550 (1360 bytes) (0x000430 - 0x000550) align 8 MaxSize: 0x0550
class UInventoryWeaponsPageWidget : public UInventoryPageWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x48];                                      // 0x0430   (0x0048)  MISSED
	bool                                               bDisplayAmmo;                                               // 0x0478   (0x0001)  
	bool                                               bDisplayEquippedItems;                                      // 0x0479   (0x0001)  
	bool                                               bKeepEquippedAndAmmoSpace;                                  // 0x047A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x047B   (0x0005)  MISSED
	class UItemViewerButtonWidget*                     WeaponButton0;                                              // 0x0480   (0x0008)  
	class UItemViewerButtonWidget*                     WeaponButton1;                                              // 0x0488   (0x0008)  
	class UItemViewerButtonWidget*                     WeaponButton2;                                              // 0x0490   (0x0008)  
	class UItemViewerButtonWidget*                     WeaponButton3;                                              // 0x0498   (0x0008)  
	class UDragContainerWidget*                        DragContainer0;                                             // 0x04A0   (0x0008)  
	class UDragContainerWidget*                        DragContainer1;                                             // 0x04A8   (0x0008)  
	class UDragContainerWidget*                        DragContainer2;                                             // 0x04B0   (0x0008)  
	class UDragContainerWidget*                        DragContainer3;                                             // 0x04B8   (0x0008)  
	class UCanvasPanel*                                AmmoPanel;                                                  // 0x04C0   (0x0008)  
	class UBorder*                                     EquipmentBorder;                                            // 0x04C8   (0x0008)  
	class UOverlay*                                    EquipmentOverlay;                                           // 0x04D0   (0x0008)  
	class UInventoryWeaponAmmoGroupWidget*             AmmoGroup0;                                                 // 0x04D8   (0x0008)  
	class UInventoryWeaponAmmoGroupWidget*             AmmoGroup1;                                                 // 0x04E0   (0x0008)  
	class UInventoryWeaponAmmoGroupWidget*             AmmoGroup2;                                                 // 0x04E8   (0x0008)  
	unsigned char                                      UnknownData02_7[0x60];                                      // 0x04F0   (0x0060)  MISSED
};

/// Class /Script/Indiana.InventoryWidget
/// Size: 0x04B8 (1208 bytes) (0x0003A0 - 0x0004B8) align 8 MaxSize: 0x04B8
class UInventoryWidget : public UBaseInventoryItemManagement
{ 
public:
	class UClass*                                      WeaponRadialSectionClass;                                   // 0x03A0   (0x0008)  
	class UClass*                                      DrugContextSectionClass;                                    // 0x03A8   (0x0008)  
	class UClass*                                      GadgetContextSectionClass;                                  // 0x03B0   (0x0008)  
	class UClass*                                      MedKitSectionClass;                                         // 0x03B8   (0x0008)  
	class UTexture2D*                                  UnequipIcon;                                                // 0x03C0   (0x0008)  
	class UTexture2D*                                  EquipIcon;                                                  // 0x03C8   (0x0008)  
	class UTexture2D*                                  UnloadIcon;                                                 // 0x03D0   (0x0008)  
	class UTexture2D*                                  SwapIcon;                                                   // 0x03D8   (0x0008)  
	class UTexture2D*                                  DropIcon;                                                   // 0x03E0   (0x0008)  
	class UTexture2D*                                  RepairIcon;                                                 // 0x03E8   (0x0008)  
	class UTexture2D*                                  BreakdownIcon;                                              // 0x03F0   (0x0008)  
	class UTexture2D*                                  CompareIcon;                                                // 0x03F8   (0x0008)  
	class UTexture2D*                                  StopCompareIcon;                                            // 0x0400   (0x0008)  
	class UTexture2D*                                  UseIcon;                                                    // 0x0408   (0x0008)  
	class UTexture2D*                                  JunkIcon;                                                   // 0x0410   (0x0008)  
	class UTexture2D*                                  NotJunkIcon;                                                // 0x0418   (0x0008)  
	class UTexture2D*                                  InspectIcon;                                                // 0x0420   (0x0008)  
	class URetainerBox*                                ItemRetainerBox;                                            // 0x0428   (0x0008)  
	class UInventoryWeaponsPageWidget*                 Weapons;                                                    // 0x0430   (0x0008)  
	class UInventoryArmorPageWidget*                   Armor;                                                      // 0x0438   (0x0008)  
	class UInventoryConsumablesPageWidget*             Consumables;                                                // 0x0440   (0x0008)  
	class UInventoryModificationsPageWidget*           Modifications;                                              // 0x0448   (0x0008)  
	class UInventoryGadgetsPageWidget*                 Gadgets;                                                    // 0x0450   (0x0008)  
	class UInventoryMaterialsPageWidget*               General;                                                    // 0x0458   (0x0008)  
	class UInventoryPageWidget*                        Quests;                                                     // 0x0460   (0x0008)  
	class UInventoryJunkPageWidget*                    Junk;                                                       // 0x0468   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0470   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0478   (0x0008)  
	class UClass*                                      StackSplittingClass;                                        // 0x0480   (0x0008)  
	class UScrollingWidgetGroup*                       LedgerScrollingWidgetGroup;                                 // 0x0488   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0490   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.InventoryWidget.OnWeaponStartEquip
	// void OnWeaponStartEquip(class UWeapon* Weapon);                                                                          // [0x186e5e0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnScrollingPageChangeStart
	// void OnScrollingPageChangeStart(class UIndianaUserWidget* UserWidget, int32_t Index);                                    // [0x186e510] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnScrollingPageChangeComplete
	// void OnScrollingPageChangeComplete(class UIndianaUserWidget* UserWidget, int32_t Index);                                 // [0x186e440] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnItemRemoved
	// void OnItemRemoved(FItemStack& ItemStack);                                                                               // [0x186e3a0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryWidget.OnItemJunkStatusChanged
	// void OnItemJunkStatusChanged(FItemStack& ItemStack);                                                                     // [0x186e300] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryWidget.OnItemCountChanged
	// void OnItemCountChanged(FItemStack& ItemStack);                                                                          // [0x186e260] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryWidget.OnItemAdded
	// void OnItemAdded(FItemStack& ItemStack);                                                                                 // [0x186e1c0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_SwapWeaponSlot
	// void OnDragDrop_SwapWeaponSlot(class UIndianaDragDropOperation* Operation);                                              // [0x186e130] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_SwapGadgetSlot
	// void OnDragDrop_SwapGadgetSlot(class UIndianaDragDropOperation* Operation);                                              // [0x186e0a0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_SwapDrugSlot
	// void OnDragDrop_SwapDrugSlot(class UIndianaDragDropOperation* Operation);                                                // [0x186e010] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_SetWeaponSlot
	// void OnDragDrop_SetWeaponSlot(class UIndianaDragDropOperation* Operation);                                               // [0x186df80] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ItemViewerWeaponSwap
	// void OnDragDrop_ItemViewerWeaponSwap(class UIndianaDragDropOperation* Operation);                                        // [0x186def0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ItemViewerInternalSwap
	// void OnDragDrop_ItemViewerInternalSwap(class UIndianaDragDropOperation* Operation);                                      // [0x186de60] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ItemViewerArmorSwap
	// void OnDragDrop_ItemViewerArmorSwap(class UIndianaDragDropOperation* Operation);                                         // [0x186ddd0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_DropItem
	// void OnDragDrop_DropItem(class UIndianaDragDropOperation* Operation);                                                    // [0x186dd40] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ClearGadgetSlot
	// void OnDragDrop_ClearGadgetSlot(class UIndianaDragDropOperation* Operation);                                             // [0x186dcb0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ClearDrugSlot
	// void OnDragDrop_ClearDrugSlot(class UIndianaDragDropOperation* Operation);                                               // [0x186dc20] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_AssignGadgetSlot
	// void OnDragDrop_AssignGadgetSlot(class UIndianaDragDropOperation* Operation);                                            // [0x186db90] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_AssignDrugSlot
	// void OnDragDrop_AssignDrugSlot(class UIndianaDragDropOperation* Operation);                                              // [0x186db00] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.AfterSettingCurrentPage
	// void AfterSettingCurrentPage(class UIndianaUserWidget* UserWidget, int32_t Index, bool bAnimate, bool bCanChangePage, bool bActivate); // [0x186d810] Final|Native|Protected 
};

/// Class /Script/Indiana.InvestigateBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000120 - 0x000128) align 8 MaxSize: 0x0128
class UInvestigateBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0120   (0x0008)  MISSED
};

/// Class /Script/Indiana.InvestigateRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UInvestigateRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.ItemActionButtonContainersWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UItemActionButtonContainersWidget : public UIndianaUserWidget
{ 
public:
	class UHorizontalBox*                              ContainerHorizontalBox;                                     // 0x0300   (0x0008)  
	class UVerticalBox*                                RepairAllEquippedContainer;                                 // 0x0308   (0x0008)  
	class UVerticalBox*                                SellJunkContainer;                                          // 0x0310   (0x0008)  
	class UButtonBase*                                 RepairAllEquippedButton;                                    // 0x0318   (0x0008)  
	class UButtonBase*                                 SellJunkButton;                                             // 0x0320   (0x0008)  
	bool                                               bRepairAllVisible;                                          // 0x0328   (0x0001)  
	bool                                               bSellJunkVisible;                                           // 0x0329   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x032A   (0x0006)  MISSED
};

/// Class /Script/Indiana.ItemActionDragContainersWidget
/// Size: 0x0350 (848 bytes) (0x000300 - 0x000350) align 8 MaxSize: 0x0350
class UItemActionDragContainersWidget : public UIndianaUserWidget
{ 
public:
	class UHorizontalBox*                              ContainerHorizontalBox;                                     // 0x0300   (0x0008)  
	class UVerticalBox*                                RepairContainer;                                            // 0x0308   (0x0008)  
	class UVerticalBox*                                BreakdownContainer;                                         // 0x0310   (0x0008)  
	class UVerticalBox*                                JunkContainer;                                              // 0x0318   (0x0008)  
	class UVerticalBox*                                DropContainer;                                              // 0x0320   (0x0008)  
	class UDragContainerWidget*                        RepairDragContainer;                                        // 0x0328   (0x0008)  
	class UDragContainerWidget*                        BreakdownDragContainer;                                     // 0x0330   (0x0008)  
	class UDragContainerWidget*                        JunkDragContainer;                                          // 0x0338   (0x0008)  
	class UDragContainerWidget*                        DropDragContainer;                                          // 0x0340   (0x0008)  
	bool                                               bRepairVisible;                                             // 0x0348   (0x0001)  
	bool                                               bBreakdownVisible;                                          // 0x0349   (0x0001)  
	bool                                               bJunkVisible;                                               // 0x034A   (0x0001)  
	bool                                               bDropVisible;                                               // 0x034B   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x034C   (0x0004)  MISSED
};

/// Class /Script/Indiana.ItemConditionWidget
/// Size: 0x0308 (776 bytes) (0x000300 - 0x000308) align 8 MaxSize: 0x0308
class UItemConditionWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              TextBlock;                                                  // 0x0300   (0x0008)  
};

/// Class /Script/Indiana.ItemContainerEntryWidget
/// Size: 0x0368 (872 bytes) (0x000300 - 0x000368) align 8 MaxSize: 0x0368
class UItemContainerEntryWidget : public UIndianaUserWidget
{ 
public:
	FVector2D                                          MaximumNameSize;                                            // 0x0300   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0308   (0x0008)  
	class UImage*                                      Icon;                                                       // 0x0310   (0x0008)  
	class UImage*                                      TheftImage;                                                 // 0x0318   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0320   (0x0008)  
	class UOverlay*                                    QuantityOverlay;                                            // 0x0328   (0x0008)  
	class UTextBlockBase*                              QuantityTextBlock;                                          // 0x0330   (0x0008)  
	class UImage*                                      UniqueImage;                                                // 0x0338   (0x0008)  
	class UImage*                                      ScienceImage;                                               // 0x0340   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0348   (0x0020)  MISSED
};

/// Class /Script/Indiana.ItemContainerListWidget
/// Size: 0x03E8 (1000 bytes) (0x000300 - 0x0003E8) align 8 MaxSize: 0x03E8
class UItemContainerListWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0xB8];                                      // 0x0300   (0x00B8)  MISSED
	class USliderBase*                                 Slider;                                                     // 0x03B8   (0x0008)  
	class UVerticalBox*                                SliderContainer;                                            // 0x03C0   (0x0008)  
	class UItemContainerEntryWidget*                   Entry0;                                                     // 0x03C8   (0x0008)  
	class UItemContainerEntryWidget*                   Entry1;                                                     // 0x03D0   (0x0008)  
	class UItemContainerEntryWidget*                   Entry2;                                                     // 0x03D8   (0x0008)  
	class UItemContainerEntryWidget*                   Entry3;                                                     // 0x03E0   (0x0008)  
};

/// Class /Script/Indiana.ItemContainerWidget
/// Size: 0x0368 (872 bytes) (0x000308 - 0x000368) align 8 MaxSize: 0x0368
class UItemContainerWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class UAkAudioEvent*                               ItemRemovedSound;                                           // 0x0308   (0x0008)  
	class UItemContainerListWidget*                    List;                                                       // 0x0310   (0x0008)  
	class UTextBlockBase*                              HeaderTextblock;                                            // 0x0318   (0x0008)  
	class UInputLabelGroupWidget*                      LabelGroup;                                                 // 0x0320   (0x0008)  
	class UItemToolTipWidget*                          ToolTip;                                                    // 0x0328   (0x0008)  
	class UImage*                                      TheftImage;                                                 // 0x0330   (0x0008)  
	class UVerticalBox*                                VerticalContainer;                                          // 0x0338   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0340   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemContainerWidget.ShowContainer
	// void ShowContainer();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemContainerWidget.OnItemRemoved
	// void OnItemRemoved(FItemStack& ItemStack);                                                                               // [0x1872460] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemContainerWidget.OnItemCountChanged
	// void OnItemCountChanged(FItemStack& ItemStack);                                                                          // [0x18723c0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemContainerWidget.OnItemAdded
	// void OnItemAdded(FItemStack& ItemStack);                                                                                 // [0x1872320] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemContainerWidget.HideContainer
	// void HideContainer();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.ItemDegradationAlertWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UItemDegradationAlertWidget : public UIndianaUserWidget
{ 
public:
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0300   (0x0008)  
	class UItemDegradationEntryWidget*                 WeaponEntry;                                                // 0x0308   (0x0008)  
	class UItemDegradationEntryWidget*                 HeadEntry;                                                  // 0x0310   (0x0008)  
	class UItemDegradationEntryWidget*                 BodyEntry;                                                  // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0320   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemDegradationAlertWidget.WeaponDamageStatusChanged
	// void WeaponDamageStatusChanged(EItemDegradationState DegradationState);                                                  // [0x1872630] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.OnUnequippedArmor
	// void OnUnequippedArmor(EArmorSlot ArmorSlotIn);                                                                          // [0x1872520] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x1872210] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.OnEquipmentRepairVisibilityChanged
	// void OnEquipmentRepairVisibilityChanged(bool bVisible);                                                                  // [0x1872180] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.HeadArmorDamageStatusChanged
	// void HeadArmorDamageStatusChanged(EItemDegradationState DegradationState);                                               // [0x1872050] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.BodyArmorDamageStatusChanged
	// void BodyArmorDamageStatusChanged(EItemDegradationState DegradationState);                                               // [0x1871eb0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemDegradationEntryWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class UItemDegradationEntryWidget : public UIndianaUserWidget
{ 
public:
	class UImage*                                      CurrentStateImage;                                          // 0x0300   (0x0008)  
	class UTexture2D*                                  DamagedImage;                                               // 0x0308   (0x0008)  
	class UTexture2D*                                  DestroyedImage;                                             // 0x0310   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0318   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemDegradationEntryWidget.PlaySevereDamageAnim
	// void PlaySevereDamageAnim();                                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemDegradationEntryWidget.PlayIntroDamagedAnim
	// void PlayIntroDamagedAnim();                                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemDegradationEntryWidget.KillAllAnims
	// void KillAllAnims();                                                                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.ItemDrugSectionWidget
/// Size: 0x02B8 (696 bytes) (0x000288 - 0x0002B8) align 8 MaxSize: 0x02B8
class UItemDrugSectionWidget : public URadialSectionWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0288   (0x0008)  MISSED
	class UPanelWidget*                                Panel;                                                      // 0x0290   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0298   (0x0008)  
	class UImage*                                      UnavailableImage;                                           // 0x02A0   (0x0008)  
	class UTextBlockBase*                              DrugCharges;                                                // 0x02A8   (0x0008)  
	class UTextBlockBase*                              SlotIndexTextBlock;                                         // 0x02B0   (0x0008)  
};

/// Class /Script/Indiana.ItemGadgetSectionWidget
/// Size: 0x02B0 (688 bytes) (0x000288 - 0x0002B0) align 8 MaxSize: 0x02B0
class UItemGadgetSectionWidget : public URadialSectionWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0288   (0x0008)  MISSED
	class UPanelWidget*                                Panel;                                                      // 0x0290   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0298   (0x0008)  
	class UImage*                                      UnavailableImage;                                           // 0x02A0   (0x0008)  
	class UTextBlockBase*                              SlotIndexTextBlock;                                         // 0x02A8   (0x0008)  
};

/// Class /Script/Indiana.ItemInspectorStatWidget
/// Size: 0x0288 (648 bytes) (0x000278 - 0x000288) align 8 MaxSize: 0x0288
class UItemInspectorStatWidget : public UUserWidget
{ 
public:
	class UTextBlockBase*                              StatTextBlock;                                              // 0x0278   (0x0008)  
	class UTextBlockBase*                              StatValueTextBlock;                                         // 0x0280   (0x0008)  
};

/// Class /Script/Indiana.ItemInspectorWidget
/// Size: 0x0388 (904 bytes) (0x000308 - 0x000388) align 8 MaxSize: 0x0388
class UItemInspectorWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0308   (0x0018)  MISSED
	float                                              GamepadScrollMultiplier;                                    // 0x0320   (0x0004)  
	float                                              GamepadDeadZone;                                            // 0x0324   (0x0004)  
	float                                              MouseScrollMultiplier;                                      // 0x0328   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x032C   (0x0004)  MISSED
	class UActorRenderWidget*                          ActorRender;                                                // 0x0330   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0338   (0x0008)  
	class UScrollBox*                                  DescriptionScrollBox;                                       // 0x0340   (0x0008)  
	class UTextBlockBase*                              DescriptionTextBlock;                                       // 0x0348   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0350   (0x0008)  
	class UItemStatsWidget*                            ItemStats;                                                  // 0x0358   (0x0008)  
	class UEquipmentModsWidget*                        EquipmentMods;                                              // 0x0360   (0x0008)  
	class UButtonBase*                                 HiddenButton;                                               // 0x0368   (0x0008)  
	class UButtonBase*                                 BackButton;                                                 // 0x0370   (0x0008)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0378   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemInspectorWidget.ZoomToggled
	// void ZoomToggled(bool bFullZoom);                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemInspectorWidget.OnZoomToggled
	// void OnZoomToggled(bool bFullZoom);                                                                                      // [0x18725a0] Final|Native|Protected 
	// Function /Script/Indiana.ItemInspectorWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18722a0] Final|Native|Protected 
	// Function /Script/Indiana.ItemInspectorWidget.MouseScroll
	// void MouseScroll(float MouseInput);                                                                                      // [0x18720d0] Final|Native|Protected 
	// Function /Script/Indiana.ItemInspectorWidget.GamepadScroll
	// void GamepadScroll(float GamepadInput);                                                                                  // [0x1871fc0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemMedKitSectionWidget
/// Size: 0x0298 (664 bytes) (0x000288 - 0x000298) align 8 MaxSize: 0x0298
class UItemMedKitSectionWidget : public URadialSectionWidget
{ 
public:
	class UPanelWidget*                                Panel;                                                      // 0x0288   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0290   (0x0008)  
};

/// Class /Script/Indiana.ItemModdingWidget
/// Size: 0x06B8 (1720 bytes) (0x0003A0 - 0x0006B8) align 8 MaxSize: 0x06B8
class UItemModdingWidget : public UBaseInventoryItemManagement
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x03A0   (0x0030)  MISSED
	FItemViewerInitializer                             RangedModsInitializer;                                      // 0x03D0   (0x00A0)  
	FItemViewerInitializer                             MeleeModsInitializer;                                       // 0x0470   (0x00A0)  
	FItemViewerInitializer                             ArmorModsInitializer;                                       // 0x0510   (0x00A0)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x05B0   (0x0008)  MISSED
	class UVerticalBox*                                ViewerVerticalBox;                                          // 0x05B8   (0x0008)  
	class UVerticalBox*                                EquipmentTitleVerticalBox;                                  // 0x05C0   (0x0008)  
	class UTextBlockBase*                              EquipmentNameTextBlock;                                     // 0x05C8   (0x0008)  
	class UTextBlockBase*                              PageNameTextBlock;                                          // 0x05D0   (0x0008)  
	class UTextBlockBase*                              CurrentModTitle;                                            // 0x05D8   (0x0008)  
	class UTextBlockBase*                              NewModTitle;                                                // 0x05E0   (0x0008)  
	class UTextBlockBase*                              CurrentModItemName;                                         // 0x05E8   (0x0008)  
	class UTextBlockBase*                              NewModItemName;                                             // 0x05F0   (0x0008)  
	class UItemStatsWidget*                            CurrentModItemStats;                                        // 0x05F8   (0x0008)  
	class UItemStatsWidget*                            NewModItemStats;                                            // 0x0600   (0x0008)  
	class UEquipmentModsWidget*                        EquipmentMods;                                              // 0x0608   (0x0008)  
	class UActorRenderWidget*                          ActorRender;                                                // 0x0610   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0618   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0620   (0x0008)  
	class USpacer*                                     CurrentModSpacer;                                           // 0x0628   (0x0008)  
	class USpacer*                                     NewModSpacer;                                               // 0x0630   (0x0008)  
	class UHorizontalBox*                              CurrentModItemNameBox;                                      // 0x0638   (0x0008)  
	class UHorizontalBox*                              NewModItemNameBox;                                          // 0x0640   (0x0008)  
	class UOverlay*                                    ActionInputOverlay;                                         // 0x0648   (0x0008)  
	class UTextBlockBase*                              DuplicateModMessage;                                        // 0x0650   (0x0008)  
	class UPlayerStatsWidget*                          PlayerStats;                                                // 0x0658   (0x0008)  
	unsigned char                                      UnknownData02_7[0x58];                                      // 0x0660   (0x0058)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemModdingWidget.OnInstallMod
	// void OnInstallMod();                                                                                                     // [0x1872300] Final|Native|Protected 
	// Function /Script/Indiana.ItemModdingWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18722c0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemOwnershipVolume
/// Size: 0x0350 (848 bytes) (0x000310 - 0x000350) align 8 MaxSize: 0x0350
class AItemOwnershipVolume : public AVolume
{ 
public:
	int32_t                                            VolumePriority;                                             // 0x0310   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0314   (0x0004)  MISSED
	class UClass*                                      OwningFaction;                                              // 0x0318   (0x0008)  
	TWeakObjectPtr<class AActor*>                      OwningActor;                                                // 0x0320   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0328   (0x0020)  MISSED
	bool                                               bPlayerOwned;                                               // 0x0348   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0349   (0x0007)  MISSED
};

/// Class /Script/Indiana.ItemRepairWidget
/// Size: 0x03A8 (936 bytes) (0x000308 - 0x0003A8) align 8 MaxSize: 0x03A8
class UItemRepairWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0308   (0x0018)  MISSED
	FLocString                                         ArmorPartRequiredLocString;                                 // 0x0320   (0x0008)  
	FLocString                                         WeaponPartRequiredLocString;                                // 0x0328   (0x0008)  
	class UActorRenderWidget*                          ActorRender;                                                // 0x0330   (0x0008)  
	class USizeBox*                                    RepairDetailsSizeBox;                                       // 0x0338   (0x0008)  
	class UTextBlockBase*                              PartRequiredTextBlock;                                      // 0x0340   (0x0008)  
	class UTextBlockBase*                              PartCountTextBlock;                                         // 0x0348   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0350   (0x0008)  
	class UTextBlockBase*                              DescriptionTextBlock;                                       // 0x0358   (0x0008)  
	class UItemConditionWidget*                        ConditionButton;                                            // 0x0360   (0x0008)  
	class UButtonBase*                                 RepairButton;                                               // 0x0368   (0x0008)  
	class UButtonBase*                                 BackButton;                                                 // 0x0370   (0x0008)  
	class UButtonBase*                                 HiddenButton;                                               // 0x0378   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0380   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0388   (0x0008)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0390   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemRepairWidget.OnRepair
	// void OnRepair();                                                                                                         // [0x1872500] Final|Native|Protected 
	// Function /Script/Indiana.ItemRepairWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18722e0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemStatEntryWidget
/// Size: 0x0348 (840 bytes) (0x000300 - 0x000348) align 8 MaxSize: 0x0348
class UItemStatEntryWidget : public UIndianaUserWidget
{ 
public:
	class UTexture2D*                                  UpgradeTexture;                                             // 0x0300   (0x0008)  
	class UTexture2D*                                  UpgradeDecreaseTexture;                                     // 0x0308   (0x0008)  
	class UTexture2D*                                  DowngradeTexture;                                           // 0x0310   (0x0008)  
	class UTexture2D*                                  DowngradeDecreaseTexture;                                   // 0x0318   (0x0008)  
	class UImage*                                      IconImage;                                                  // 0x0320   (0x0008)  
	class UImage*                                      WeightImage;                                                // 0x0328   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0330   (0x0008)  
	class UTextBlockBase*                              ValueTextBlock;                                             // 0x0338   (0x0008)  
	class UTextBlockBase*                              DeltaTextBlock;                                             // 0x0340   (0x0008)  
};

/// Class /Script/Indiana.ItemStatsCategoryWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UItemStatsCategoryWidget : public UIndianaUserWidget
{ 
public:
	FLocString                                         DisplayText;                                                // 0x0300   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0308   (0x0008)  
	class UVerticalBox*                                StatsVerticalBox;                                           // 0x0310   (0x0008)  
};

/// Class /Script/Indiana.ItemStatsWidget
/// Size: 0x0418 (1048 bytes) (0x000300 - 0x000418) align 8 MaxSize: 0x0418
class UItemStatsWidget : public UIndianaUserWidget
{ 
public:
	bool                                               bDisplayDelta;                                              // 0x0300   (0x0001)  
	bool                                               bDisplayComparison;                                         // 0x0301   (0x0001)  
	bool                                               bOnlyShowComparisons;                                       // 0x0302   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x0303   (0x0005)  MISSED
	class UItemStatsCategoryWidget*                    StatsCategory;                                              // 0x0308   (0x0008)  
	class UItemStatsCategoryWidget*                    ArmorThresholdCategory;                                     // 0x0310   (0x0008)  
	class UClass*                                      ArmorStatWidgetClass;                                       // 0x0318   (0x0008)  
	class UClass*                                      StatWidgetClass;                                            // 0x0320   (0x0008)  
	unsigned char                                      UnknownData01_7[0xF0];                                      // 0x0328   (0x00F0)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemStatsWidget.OnAlternateChanged
	// void OnAlternateChanged();                                                                                               // [0x1872160] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemToolTipWidget
/// Size: 0x04F8 (1272 bytes) (0x000300 - 0x0004F8) align 8 MaxSize: 0x04F8
class UItemToolTipWidget : public UToolTipContentWidget
{ 
public:
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0300   (0x0008)  
	class UImage*                                      BrandImage;                                                 // 0x0308   (0x0008)  
	class UTextBlockBase*                              ComparisonItemTextBlock;                                    // 0x0310   (0x0008)  
	class UTextBlockBase*                              BrandTextBlock;                                             // 0x0318   (0x0008)  
	class UTextBlockBase*                              DescriptionTextBlock;                                       // 0x0320   (0x0008)  
	class UTextBlockBase*                              LoreTextBlock;                                              // 0x0328   (0x0008)  
	class UTextBlockBase*                              WeightTextBlock;                                            // 0x0330   (0x0008)  
	class UVerticalBox*                                ConditionBox;                                               // 0x0338   (0x0008)  
	class UTextBlockBase*                              ConditionTextBlock;                                         // 0x0340   (0x0008)  
	class UImage*                                      PristineImage;                                              // 0x0348   (0x0008)  
	class UTextBlockBase*                              ValueTextBlock;                                             // 0x0350   (0x0008)  
	class UItemStatsWidget*                            ItemStats;                                                  // 0x0358   (0x0008)  
	class UTextBlockBase*                              ModificationText;                                           // 0x0360   (0x0008)  
	class UEquipmentModWidget*                         Mod0Widget;                                                 // 0x0368   (0x0008)  
	class UEquipmentModWidget*                         Mod1Widget;                                                 // 0x0370   (0x0008)  
	class UEquipmentModWidget*                         Mod2Widget;                                                 // 0x0378   (0x0008)  
	class UEquipmentModWidget*                         Mod3Widget;                                                 // 0x0380   (0x0008)  
	class UTextBlockBase*                              ItemLevelTextBlock;                                         // 0x0388   (0x0008)  
	class UTextBlockBase*                              StatusEffectsTextBlock;                                     // 0x0390   (0x0008)  
	class UTextBlockBase*                              ItemPowerTextBlock;                                         // 0x0398   (0x0008)  
	class UTextBlockBase*                              ItemPowerDescriptor;                                        // 0x03A0   (0x0008)  
	class UTextBlockBase*                              CurrencyValueTextBlock;                                     // 0x03A8   (0x0008)  
	class UTextBlockBase*                              WeightValueTextBlock;                                       // 0x03B0   (0x0008)  
	class UVerticalBox*                                CurrencyValueBox;                                           // 0x03B8   (0x0008)  
	class UVerticalBox*                                WeightValueBox;                                             // 0x03C0   (0x0008)  
	class UTextBlockBase*                              ConditionValueTextBlock;                                    // 0x03C8   (0x0008)  
	class UScaleBox*                                   MainScaleBox;                                               // 0x03D0   (0x0008)  
	class USizeBox*                                    ImageSizeBox;                                               // 0x03D8   (0x0008)  
	class UBorder*                                     FrameBorder;                                                // 0x03E0   (0x0008)  
	class UVerticalBox*                                ItemPowerVerticalBox;                                       // 0x03E8   (0x0008)  
	class UImage*                                      DamageTypeImage;                                            // 0x03F0   (0x0008)  
	class UScaleBox*                                   CompareInspectContainer;                                    // 0x03F8   (0x0008)  
	class UInputLabelWidget*                           CompareLabel;                                               // 0x0400   (0x0008)  
	class UInputLabelWidget*                           InspectLabel;                                               // 0x0408   (0x0008)  
	int32_t                                            ImageClippingHeight;                                        // 0x0410   (0x0004)  
	unsigned char                                      UnknownData00_6[0x14];                                      // 0x0414   (0x0014)  MISSED
	TMap<EIndianaDamageType, EIndianaUIColorType>      DamageTypeColors;                                           // 0x0428   (0x0050)  
	TMap<EIndianaDamageType, class UTexture2D*>        DamageTypeIcon;                                             // 0x0478   (0x0050)  
	bool                                               bIsUnique;                                                  // 0x04C8   (0x0001)  
	bool                                               bIsScience;                                                 // 0x04C9   (0x0001)  
	bool                                               bUseInstancedModifiers;                                     // 0x04CA   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x04CB   (0x0001)  MISSED
	float                                              DefaultMaximumFullScreenModifier;                           // 0x04CC   (0x0004)  
	float                                              DefaultMaximumWidescreenModifier;                           // 0x04D0   (0x0004)  
	float                                              DefaultMaximumFullScreenComparisonModifier;                 // 0x04D4   (0x0004)  
	float                                              DefaultMaximumWidescreenComparisonModifier;                 // 0x04D8   (0x0004)  
	float                                              InstancedMaximumFullScreenModifier;                         // 0x04DC   (0x0004)  
	float                                              InstancedMaximumWidescreenModifier;                         // 0x04E0   (0x0004)  
	float                                              InstancedMaximumFullScreenComparisonModifier;               // 0x04E4   (0x0004)  
	float                                              InstancedMaximumWidescreenComparisonModifier;               // 0x04E8   (0x0004)  
	unsigned char                                      UnknownData02_7[0xC];                                       // 0x04EC   (0x000C)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemToolTipWidget.SetBackgroundBrush
	// void SetBackgroundBrush();                                                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemToolTipWidget.FontSizeChanged
	// void FontSizeChanged(int32_t NewModifier);                                                                               // [0x1871f30] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemTransferWidget
/// Size: 0x03D0 (976 bytes) (0x000308 - 0x0003D0) align 8 MaxSize: 0x03D0
class UItemTransferWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class UClass*                                      StackSplittingClass;                                        // 0x0308   (0x0008)  
	class UItemViewerButtonWidget*                     HoveredItem;                                                // 0x0310   (0x0008)  
	class UPlayerStatsWidget*                          PlayerStats;                                                // 0x0318   (0x0008)  
	class UButtonBaseContainerWidget*                  InventoryHeader;                                            // 0x0320   (0x0008)  
	class UInputLabelWidget*                           InventoryLabel;                                             // 0x0328   (0x0008)  
	class UButtonBaseContainerWidget*                  PlayerHeader;                                               // 0x0330   (0x0008)  
	class UInputLabelWidget*                           PlayerLabel;                                                // 0x0338   (0x0008)  
	class UItemViewerNavigationWidget*                 PlayerNavigation;                                           // 0x0340   (0x0008)  
	class UItemViewerWidget*                           PlayerViewer;                                               // 0x0348   (0x0008)  
	class UItemViewerNavigationWidget*                 InventoryNavigation;                                        // 0x0350   (0x0008)  
	class UItemViewerWidget*                           InventoryViewer;                                            // 0x0358   (0x0008)  
	class UInputLabelGroupWidget*                      LabelGroup;                                                 // 0x0360   (0x0008)  
	class UButtonBase*                                 BackButton;                                                 // 0x0368   (0x0008)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0370   (0x0060)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemTransferWidget.OnPlayerItemRemoved
	// void OnPlayerItemRemoved(FItemStack& Item);                                                                              // [0x1875e50] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnPlayerItemAdded
	// void OnPlayerItemAdded(FItemStack& Item);                                                                                // [0x1875db0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnPlayerCountChanged
	// void OnPlayerCountChanged(FItemStack& ItemStack);                                                                        // [0x1875d10] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnItemCountChanged
	// void OnItemCountChanged(FItemStack& ItemStack);                                                                          // [0x1875c50] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnInventoryItemRemoved
	// void OnInventoryItemRemoved(FItemStack& Item);                                                                           // [0x1875bb0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnInventoryItemAdded
	// void OnInventoryItemAdded(FItemStack& Item);                                                                             // [0x1875b10] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.ItemViewerButtonWidget
/// Size: 0x0BA0 (2976 bytes) (0x000B98 - 0x000BA0) align 8 MaxSize: 0x0BA0
class UItemViewerButtonWidget : public UButtonBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0B98   (0x0008)  MISSED
};

/// Class /Script/Indiana.ItemViewerCellWidget
/// Size: 0x0280 (640 bytes) (0x000278 - 0x000280) align 8 MaxSize: 0x0280
class UItemViewerCellWidget : public UUserWidget
{ 
public:
	class UItemViewerButtonWidget*                     Button;                                                     // 0x0278   (0x0008)  
};

/// Class /Script/Indiana.ItemViewerHealthKitButtonWidget
/// Size: 0x0B98 (2968 bytes) (0x000B98 - 0x000B98) align 8 MaxSize: 0x0B98
class UItemViewerHealthKitButtonWidget : public UButtonBase
{ 
public:
};

/// Class /Script/Indiana.ItemViewerNavigationWidget
/// Size: 0x0390 (912 bytes) (0x000300 - 0x000390) align 8 MaxSize: 0x0390
class UItemViewerNavigationWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	TArray<class UPaginatedButtonWidget*>              PaginatedButtons;                                           // 0x0318   (0x0010)  
	TArray<class UTexture2D*>                          Images;                                                     // 0x0328   (0x0010)  
	TArray<FLocString>                                 Labels;                                                     // 0x0338   (0x0010)  
	class UClass*                                      ButtonClass;                                                // 0x0348   (0x0008)  
	class UButtonGroup*                                CategoryButtonGroup;                                        // 0x0350   (0x0008)  
	class UInputLabelWidget*                           LeftInputLabel;                                             // 0x0358   (0x0008)  
	class UInputLabelWidget*                           RightInputLabel;                                            // 0x0360   (0x0008)  
	class UInputWidget*                                LeftInputWidget;                                            // 0x0368   (0x0008)  
	class UInputWidget*                                RightInputWidget;                                           // 0x0370   (0x0008)  
	class UHorizontalBox*                              ButtonContainer;                                            // 0x0378   (0x0008)  
	bool                                               bAllowLooping;                                              // 0x0380   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x0381   (0x000F)  MISSED
};

/// Class /Script/Indiana.ItemViewerPageWidget
/// Size: 0x0370 (880 bytes) (0x000300 - 0x000370) align 8 MaxSize: 0x0370
class UItemViewerPageWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x4];                                       // 0x0300   (0x0004)  MISSED
	int32_t                                            Rows;                                                       // 0x0304   (0x0004)  
	FMargin                                            ButtonPadding;                                              // 0x0308   (0x0010)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0318   (0x0008)  MISSED
	class UDragContainerWidget*                        PageDragContainer;                                          // 0x0320   (0x0008)  
	class USizeBox*                                    SizeBox;                                                    // 0x0328   (0x0008)  
	class UUniformGridPanel*                           UniformGrid;                                                // 0x0330   (0x0008)  
	class UClass*                                      DragContainerClass;                                         // 0x0338   (0x0008)  
	class UClass*                                      ButtonClass;                                                // 0x0340   (0x0008)  
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x0348   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemViewerPageWidget.PlayCollapseAnimation
	// void PlayCollapseAnimation();                                                                                            // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.ItemViewerPannerWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UItemViewerPannerWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0300   (0x0020)  MISSED
	class UButtonBase*                                 LeftButton;                                                 // 0x0320   (0x0008)  
	class UButtonBase*                                 RightButton;                                                // 0x0328   (0x0008)  
};

/// Class /Script/Indiana.ItemViewerScrollSelector
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UItemViewerScrollSelector : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	class UVerticalBox*                                PageButtonVerticalBox;                                      // 0x0318   (0x0008)  
	class UVerticalBox*                                ParentVerticalBox;                                          // 0x0320   (0x0008)  
	class UClass*                                      PageSelectorClass;                                          // 0x0328   (0x0008)  
};

/// Class /Script/Indiana.ItemViewerScrollSelectorEntry
/// Size: 0x0310 (784 bytes) (0x000300 - 0x000310) align 8 MaxSize: 0x0310
class UItemViewerScrollSelectorEntry : public UIndianaUserWidget
{ 
public:
	class UButtonBase*                                 PageSelector;                                               // 0x0300   (0x0008)  
	class UImage*                                      SelectedImage;                                              // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.ItemViewerWidget
/// Size: 0x0650 (1616 bytes) (0x000300 - 0x000650) align 8 MaxSize: 0x0650
class UItemViewerWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x141];                                     // 0x0300   (0x0141)  MISSED
	bool                                               bAutoCollapse;                                              // 0x0441   (0x0001)  
	bool                                               bDisplayValue;                                              // 0x0442   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x0443   (0x0005)  MISSED
	class UClass*                                      PageClass;                                                  // 0x0448   (0x0008)  
	int32_t                                            Columns;                                                    // 0x0450   (0x0004)  
	int32_t                                            CategoryPadding;                                            // 0x0454   (0x0004)  
	int32_t                                            PagePadding;                                                // 0x0458   (0x0004)  
	FVector2D                                          CellSize;                                                   // 0x045C   (0x0008)  
	bool                                               bShouldDisplaySortingOptions;                               // 0x0464   (0x0001)  
	bool                                               bClearDelegatesOnInitialization;                            // 0x0465   (0x0001)  
	bool                                               bShowAllCategory;                                           // 0x0466   (0x0001)  
	bool                                               bAutoPad;                                                   // 0x0467   (0x0001)  
	FPageDimensions                                    AllPageDimensions;                                          // 0x0468   (0x0030)  
	TArray<FPageDimensions>                            PageDimensions;                                             // 0x0498   (0x0010)  
	bool                                               bShowJunkCategory;                                          // 0x04A8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x04A9   (0x0007)  MISSED
	FPageDimensions                                    JunkPageDimensions;                                         // 0x04B0   (0x0030)  
	class UClass*                                      ItemGenericClass;                                           // 0x04E0   (0x0008)  
	class USizeBox*                                    RootSizeBox;                                                // 0x04E8   (0x0008)  
	class UTextBlockBase*                              PageTextBlock;                                              // 0x04F0   (0x0008)  
	class UScrollBox*                                  ScrollBox;                                                  // 0x04F8   (0x0008)  
	class UHorizontalBox*                              PagesHorizontalBox;                                         // 0x0500   (0x0008)  
	class UItemViewerScrollSelector*                   ScrollSelector;                                             // 0x0508   (0x0008)  
	class UInputLabelWidget*                           SortLabel;                                                  // 0x0510   (0x0008)  
	class UInputLabelWidget*                           ChangeSortLabel;                                            // 0x0518   (0x0008)  
	class UImage*                                      SortDirectionImage;                                         // 0x0520   (0x0008)  
	class UHorizontalBox*                              SortingContainer;                                           // 0x0528   (0x0008)  
	FInputLabelDescription                             BaseInputLabelDesc;                                         // 0x0530   (0x0038)  
	float                                              ScrollTime;                                                 // 0x0568   (0x0004)  
	EScrollEaseType                                    ScrollType;                                                 // 0x056C   (0x0001)  
	unsigned char                                      UnknownData03_7[0xE3];                                      // 0x056D   (0x00E3)  MISSED


	/// Functions
	// Function /Script/Indiana.ItemViewerWidget.OnScrollingComplete
	// void OnScrollingComplete();                                                                                              // [0x1875ef0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemVisualizer
/// Size: 0x0390 (912 bytes) (0x0002B8 - 0x000390) align 8 MaxSize: 0x0390
class AItemVisualizer : public AActor
{ 
public:
	FItemStack                                         ItemStk;                                                    // 0x02B8   (0x0010)  
	class USceneComponent*                             SceneComponent;                                             // 0x02C8   (0x0008)  
	TWeakObjectPtr<class UObject*>                     ItemMainAsset;                                              // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x02D8   (0x0020)  MISSED
	TArray<class UModVisual*>                          ItemModVisuals;                                             // 0x02F8   (0x0010)  
	SDK_UNDEFINED(80,589) /* TMap<FName, TWeakObjectPtr<UMaterialInterface*>> */ __um(MainAssetMaterialOverrides); // 0x0308   (0x0050)  
	TArray<FSoftObjectPath>                            ItemRequiredAssets;                                         // 0x0358   (0x0010)  
	class USceneComponent*                             VisualRootComponent;                                        // 0x0368   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0370   (0x0020)  MISSED
};

/// Class /Script/Indiana.ItemWeaponSectionWidget
/// Size: 0x02B0 (688 bytes) (0x000288 - 0x0002B0) align 8 MaxSize: 0x02B0
class UItemWeaponSectionWidget : public URadialSectionWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0288   (0x0008)  MISSED
	class UPanelWidget*                                Panel;                                                      // 0x0290   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0298   (0x0008)  
	class UOverlay*                                    OverlayContainer;                                           // 0x02A0   (0x0008)  
	class UTextBlockBase*                              SlotIndexTextBlock;                                         // 0x02A8   (0x0008)  
};

/// Class /Script/Indiana.JournalDescriptionPanel
/// Size: 0x0338 (824 bytes) (0x000320 - 0x000338) align 8 MaxSize: 0x0338
class UJournalDescriptionPanel : public ULedgerDescriptionPanel
{ 
public:
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0320   (0x0008)  
	class UVerticalBox*                                SymbolVerticalBox;                                          // 0x0328   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0330   (0x0008)  MISSED
};

/// Class /Script/Indiana.LedgerJournalWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class ULedgerJournalWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0300   (0x0008)  MISSED
	class UNavigationGroupWidget*                      NavigationBar;                                              // 0x0308   (0x0008)  
	class UScrollBox*                                  PageScrollBox;                                              // 0x0310   (0x0008)  
	class UScrollingWidgetGroup*                       ScrollingWidgetGroup;                                       // 0x0318   (0x0008)  
	class UQuestJournalWidget*                         QuestJournal;                                               // 0x0320   (0x0008)  
	class UCodexJournal*                               CodexJournal;                                               // 0x0328   (0x0008)  
};

/// Class /Script/Indiana.JumpBehaviorStateInfo
/// Size: 0x0188 (392 bytes) (0x000178 - 0x000188) align 8 MaxSize: 0x0188
class UJumpBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0178   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.JumpBehaviorStateInfo.OnOutroAnimationComplete
	// void OnOutroAnimationComplete();                                                                                         // [0x1875cf0] Final|Native|Protected 
	// Function /Script/Indiana.JumpBehaviorStateInfo.OnIntroAnimationComplete
	// void OnIntroAnimationComplete();                                                                                         // [0x1875af0] Final|Native|Protected 
};

/// Class /Script/Indiana.JumpRequestData
/// Size: 0x0088 (136 bytes) (0x000080 - 0x000088) align 8 MaxSize: 0x0088
class UJumpRequestData : public UDecisionTreeEQSRequestData
{ 
public:
	bool                                               bRotateToFaceJumpDirection;                                 // 0x0080   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Indiana.JumpNavLink
/// Size: 0x02E8 (744 bytes) (0x0002E8 - 0x0002E8) align 8 MaxSize: 0x02E8
class AJumpNavLink : public AReservableNavLink
{ 
public:
};

/// Class /Script/Indiana.KeybindDialogBoxWidget
/// Size: 0x0390 (912 bytes) (0x000308 - 0x000390) align 8 MaxSize: 0x0390
class UKeybindDialogBoxWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0308   (0x0020)  MISSED
	class UVerticalBox*                                ContentVerticalBox;                                         // 0x0328   (0x0008)  
	class USizeBox*                                    BackingBotSizeBox;                                          // 0x0330   (0x0008)  
	class UTextBlockBase*                              ControlToRebindTextBlock;                                   // 0x0338   (0x0008)  
	class UTextBlockBase*                              HowToTextBlock;                                             // 0x0340   (0x0008)  
	class UTextBlockBase*                              KeyInputTextBlock;                                          // 0x0348   (0x0008)  
	class UImage*                                      InputIcon;                                                  // 0x0350   (0x0008)  
	float                                              ContentVerticalPadding;                                     // 0x0358   (0x0004)  
	int32_t                                            BackingMaterialSize;                                        // 0x035C   (0x0004)  
	int32_t                                            BackingTopSize;                                             // 0x0360   (0x0004)  
	unsigned char                                      UnknownData01_7[0x2C];                                      // 0x0364   (0x002C)  MISSED


	/// Functions
	// Function /Script/Indiana.KeybindDialogBoxWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.KeybindDialogBoxWidget.OnInputPress
	// void OnInputPress();                                                                                                     // [0x1875ad0] Final|Native|Protected 
	// Function /Script/Indiana.KeybindDialogBoxWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x1875ab0] Final|Native|Protected 
};

/// Class /Script/Indiana.KeyBindsMenuWidget
/// Size: 0x0B58 (2904 bytes) (0x000308 - 0x000B58) align 8 MaxSize: 0x0B58
class UKeyBindsMenuWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0308   (0x0010)  MISSED
	class UScrollBox*                                  MenuScrollBox;                                              // 0x0318   (0x0008)  
	class UWidgetSwitcher*                             MenuSwitcher;                                               // 0x0320   (0x0008)  
	class UWidgetSwitcher*                             PlatformSwitcher;                                           // 0x0328   (0x0008)  
	class UVerticalBox*                                KeyBindVerticalBox;                                         // 0x0330   (0x0008)  
	class UVerticalBox*                                Category1VerticalBox;                                       // 0x0338   (0x0008)  
	class UHorizontalBox*                              PCButtonsHorizontalBox;                                     // 0x0340   (0x0008)  
	class UHorizontalBox*                              InputLabelsHorizontalBox;                                   // 0x0348   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0350   (0x0008)  
	class USettingsMenuSlotWidget*                     GamePadMenuSlot;                                            // 0x0358   (0x0008)  
	class USettingsMenuSlotWidget*                     SticklayoutMenuSlot;                                        // 0x0360   (0x0008)  
	class USettingsMenuOptionPresenterWdgt*            GamePadLayoutOptions;                                       // 0x0368   (0x0008)  
	class USettingsMenuOptionPresenterWdgt*            StickLayoutOptions;                                         // 0x0370   (0x0008)  
	class UButtonBase*                                 DefaultButton;                                              // 0x0378   (0x0008)  
	class UButtonBase*                                 BackButton;                                                 // 0x0380   (0x0008)  
	class UWidget*                                     Background;                                                 // 0x0388   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0390   (0x0008)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  XSXGamepadTexture;                                          // 0x0398   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x03A0   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  XBOGamepadTexture;                                          // 0x03C0   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x03C8   (0x0020)  MISSED
	class UImage*                                      XB_GamepadImage;                                            // 0x03E8   (0x0008)  
	class UTextBlockBase*                              XB_LeftSpecial;                                             // 0x03F0   (0x0008)  
	class UTextBlockBase*                              XB_LeftSpecialHold;                                         // 0x03F8   (0x0008)  
	class UTextBlockBase*                              XB_LTrigger;                                                // 0x0400   (0x0008)  
	class UTextBlockBase*                              XB_LTriggerHold;                                            // 0x0408   (0x0008)  
	class UTextBlockBase*                              XB_LBumper;                                                 // 0x0410   (0x0008)  
	class UTextBlockBase*                              XB_LBumperHold;                                             // 0x0418   (0x0008)  
	class UTextBlockBase*                              XB_LStick;                                                  // 0x0420   (0x0008)  
	class UTextBlockBase*                              XB_LStickButton;                                            // 0x0428   (0x0008)  
	class UTextBlockBase*                              XB_DUp;                                                     // 0x0430   (0x0008)  
	class UTextBlockBase*                              XB_DLeft;                                                   // 0x0438   (0x0008)  
	class UTextBlockBase*                              XB_DDown;                                                   // 0x0440   (0x0008)  
	class UTextBlockBase*                              XB_DDownHold;                                               // 0x0448   (0x0008)  
	class UTextBlockBase*                              XB_DRight;                                                  // 0x0450   (0x0008)  
	class UTextBlockBase*                              XB_RightSpecial;                                            // 0x0458   (0x0008)  
	class UTextBlockBase*                              XB_RightSpecialHold;                                        // 0x0460   (0x0008)  
	class UTextBlockBase*                              XB_RightTrigger;                                            // 0x0468   (0x0008)  
	class UTextBlockBase*                              XB_RightTriggerHold;                                        // 0x0470   (0x0008)  
	class UTextBlockBase*                              XB_RBumper;                                                 // 0x0478   (0x0008)  
	class UTextBlockBase*                              XB_RBumperHold;                                             // 0x0480   (0x0008)  
	class UTextBlockBase*                              XB_Y;                                                       // 0x0488   (0x0008)  
	class UTextBlockBase*                              XB_YHold;                                                   // 0x0490   (0x0008)  
	class UTextBlockBase*                              XB_B;                                                       // 0x0498   (0x0008)  
	class UTextBlockBase*                              XB_BHold;                                                   // 0x04A0   (0x0008)  
	class UTextBlockBase*                              XB_A;                                                       // 0x04A8   (0x0008)  
	class UTextBlockBase*                              XB_AHold;                                                   // 0x04B0   (0x0008)  
	class UTextBlockBase*                              XB_X;                                                       // 0x04B8   (0x0008)  
	class UTextBlockBase*                              XB_XHold;                                                   // 0x04C0   (0x0008)  
	class UTextBlockBase*                              XB_RStick;                                                  // 0x04C8   (0x0008)  
	class UTextBlockBase*                              XB_RStickButton;                                            // 0x04D0   (0x0008)  
	unsigned char                                      UnknownData04_6[0xE8];                                      // 0x04D8   (0x00E8)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  PS5GamepadTexture;                                          // 0x05C0   (0x0008)  
	unsigned char                                      UnknownData05_6[0x20];                                      // 0x05C8   (0x0020)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  PS4GamepadTexture;                                          // 0x05E8   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x05F0   (0x0020)  MISSED
	class UImage*                                      PS_GamepadImage;                                            // 0x0610   (0x0008)  
	class UTextBlockBase*                              PS_SpecialLeft;                                             // 0x0618   (0x0008)  
	class UTextBlockBase*                              PS_SpecialLeftHold;                                         // 0x0620   (0x0008)  
	class UTextBlockBase*                              PS_L2;                                                      // 0x0628   (0x0008)  
	class UTextBlockBase*                              PS_L2Hold;                                                  // 0x0630   (0x0008)  
	class UTextBlockBase*                              PS_L1;                                                      // 0x0638   (0x0008)  
	class UTextBlockBase*                              PS_L1Hold;                                                  // 0x0640   (0x0008)  
	class UTextBlockBase*                              PS_DUp;                                                     // 0x0648   (0x0008)  
	class UTextBlockBase*                              PS_DLeft;                                                   // 0x0650   (0x0008)  
	class UTextBlockBase*                              PS_DDown;                                                   // 0x0658   (0x0008)  
	class UTextBlockBase*                              PS_DDownHold;                                               // 0x0660   (0x0008)  
	class UTextBlockBase*                              PS_DRight;                                                  // 0x0668   (0x0008)  
	class UTextBlockBase*                              PS_LStick;                                                  // 0x0670   (0x0008)  
	class UTextBlockBase*                              PS_L3;                                                      // 0x0678   (0x0008)  
	class UTextBlockBase*                              PS_SpecialRight;                                            // 0x0680   (0x0008)  
	class UTextBlockBase*                              PS_SpecialRightHold;                                        // 0x0688   (0x0008)  
	class UTextBlockBase*                              PS_R2;                                                      // 0x0690   (0x0008)  
	class UTextBlockBase*                              PS_R2Hold;                                                  // 0x0698   (0x0008)  
	class UTextBlockBase*                              PS_R1;                                                      // 0x06A0   (0x0008)  
	class UTextBlockBase*                              PS_R1Hold;                                                  // 0x06A8   (0x0008)  
	class UTextBlockBase*                              PS_Triangle;                                                // 0x06B0   (0x0008)  
	class UTextBlockBase*                              PS_TriangleHold;                                            // 0x06B8   (0x0008)  
	class UTextBlockBase*                              PS_Circle;                                                  // 0x06C0   (0x0008)  
	class UTextBlockBase*                              PS_CircleHold;                                              // 0x06C8   (0x0008)  
	class UTextBlockBase*                              PS_X;                                                       // 0x06D0   (0x0008)  
	class UTextBlockBase*                              PS_XHold;                                                   // 0x06D8   (0x0008)  
	class UTextBlockBase*                              PS_Square;                                                  // 0x06E0   (0x0008)  
	class UTextBlockBase*                              PS_SquareHold;                                              // 0x06E8   (0x0008)  
	class UTextBlockBase*                              PS_RStick;                                                  // 0x06F0   (0x0008)  
	class UTextBlockBase*                              PS_R3;                                                      // 0x06F8   (0x0008)  
	unsigned char                                      UnknownData07_6[0xE8];                                      // 0x0700   (0x00E8)  MISSED
	TWeakObjectPtr<class UTexture2D*>                  GPGamepadTexture;                                           // 0x07E8   (0x0008)  
	unsigned char                                      UnknownData08_6[0x20];                                      // 0x07F0   (0x0020)  MISSED
	class UImage*                                      GP_GamepadImage;                                            // 0x0810   (0x0008)  
	class UTextBlockBase*                              GP_SpecialLeft;                                             // 0x0818   (0x0008)  
	class UTextBlockBase*                              GP_SpecialLeftHold;                                         // 0x0820   (0x0008)  
	class UTextBlockBase*                              GP_L2;                                                      // 0x0828   (0x0008)  
	class UTextBlockBase*                              GP_L2Hold;                                                  // 0x0830   (0x0008)  
	class UTextBlockBase*                              GP_L1;                                                      // 0x0838   (0x0008)  
	class UTextBlockBase*                              GP_L1Hold;                                                  // 0x0840   (0x0008)  
	class UTextBlockBase*                              GP_DUp;                                                     // 0x0848   (0x0008)  
	class UTextBlockBase*                              GP_DLeft;                                                   // 0x0850   (0x0008)  
	class UTextBlockBase*                              GP_DDown;                                                   // 0x0858   (0x0008)  
	class UTextBlockBase*                              GP_DDownHold;                                               // 0x0860   (0x0008)  
	class UTextBlockBase*                              GP_DRight;                                                  // 0x0868   (0x0008)  
	class UTextBlockBase*                              GP_LStick;                                                  // 0x0870   (0x0008)  
	class UTextBlockBase*                              GP_L3;                                                      // 0x0878   (0x0008)  
	class UTextBlockBase*                              GP_SpecialRight;                                            // 0x0880   (0x0008)  
	class UTextBlockBase*                              GP_SpecialRightHold;                                        // 0x0888   (0x0008)  
	class UTextBlockBase*                              GP_R2;                                                      // 0x0890   (0x0008)  
	class UTextBlockBase*                              GP_R2Hold;                                                  // 0x0898   (0x0008)  
	class UTextBlockBase*                              GP_R1;                                                      // 0x08A0   (0x0008)  
	class UTextBlockBase*                              GP_R1Hold;                                                  // 0x08A8   (0x0008)  
	class UTextBlockBase*                              GP_Triangle;                                                // 0x08B0   (0x0008)  
	class UTextBlockBase*                              GP_TriangleHold;                                            // 0x08B8   (0x0008)  
	class UTextBlockBase*                              GP_Circle;                                                  // 0x08C0   (0x0008)  
	class UTextBlockBase*                              GP_CircleHold;                                              // 0x08C8   (0x0008)  
	class UTextBlockBase*                              GP_X;                                                       // 0x08D0   (0x0008)  
	class UTextBlockBase*                              GP_XHold;                                                   // 0x08D8   (0x0008)  
	class UTextBlockBase*                              GP_Square;                                                  // 0x08E0   (0x0008)  
	class UTextBlockBase*                              GP_SquareHold;                                              // 0x08E8   (0x0008)  
	class UTextBlockBase*                              GP_RStick;                                                  // 0x08F0   (0x0008)  
	class UTextBlockBase*                              GP_R3;                                                      // 0x08F8   (0x0008)  
	unsigned char                                      UnknownData09_6[0xE8];                                      // 0x0900   (0x00E8)  MISSED
	class UClass*                                      KeyRebindClass;                                             // 0x09E8   (0x0008)  
	class UClass*                                      SubcategoryClass;                                           // 0x09F0   (0x0008)  
	class USettingsMenuWidget*                         SettingsMenu;                                               // 0x09F8   (0x0008)  
	class UIndianaGameUserSettings*                    IndianaSettings;                                            // 0x0A00   (0x0008)  
	bool                                               bInitialized;                                               // 0x0A08   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0A09   (0x0003)  MISSED
	int32_t                                            SelectedLayout;                                             // 0x0A0C   (0x0004)  
	int32_t                                            SelectedStick;                                              // 0x0A10   (0x0004)  
	unsigned char                                      UnknownData11_6[0x13C];                                     // 0x0A14   (0x013C)  MISSED
	class UTexture2D*                                  CurrentGamepadTexture;                                      // 0x0B50   (0x0008)  


	/// Functions
	// Function /Script/Indiana.KeyBindsMenuWidget.OnBackButtonClicked
	// void OnBackButtonClicked();                                                                                              // [0x1875a90] Final|Native|Protected 
	// Function /Script/Indiana.KeyBindsMenuWidget.CreateRestoreDefaultsDialogBox
	// void CreateRestoreDefaultsDialogBox();                                                                                   // [0x1875a70] Final|Native|Protected 
};

/// Class /Script/Indiana.KillCameraComponent
/// Size: 0x0160 (352 bytes) (0x000120 - 0x000160) align 8 MaxSize: 0x0160
class UKillCameraComponent : public UCombatCameraComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0120   (0x0018)  MISSED
	float                                              MinDistanceForCamera;                                       // 0x0138   (0x0004)  
	float                                              ChanceOnLastKill;                                           // 0x013C   (0x0004)  
	float                                              ChanceOnStealthKill;                                        // 0x0140   (0x0004)  
	float                                              ChanceOnCritOrWeakSpotKill;                                 // 0x0144   (0x0004)  
	float                                              Cooldown;                                                   // 0x0148   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x014C   (0x0004)  MISSED
	TArray<class UCineCombatCameraParams*>             KillCameras;                                                // 0x0150   (0x0010)  


	/// Functions
	// Function /Script/Indiana.KillCameraComponent.OnKill
	// void OnKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                    // [0x1879e10] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.KillStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UKillStatusEffect : public UStatusEffect
{ 
public:
	class UClass*                                      DamageType;                                                 // 0x0188   (0x0008)  
};

/// Class /Script/Indiana.Ladder
/// Size: 0x0318 (792 bytes) (0x0002D0 - 0x000318) align 8 MaxSize: 0x0318
class ALadder : public AIndianaNavLink
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02D0   (0x0008)  MISSED
	float                                              MaxInteractionAngle;                                        // 0x02D8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02DC   (0x0004)  MISSED
	class USceneComponent*                             SceneComponent;                                             // 0x02E0   (0x0008)  
	class USplineComponent*                            SplineComponent;                                            // 0x02E8   (0x0008)  
	class UAkComponent*                                AkComponent;                                                // 0x02F0   (0x0008)  
	class UFurnitureComponent*                         TopFurnitureComponent;                                      // 0x02F8   (0x0008)  
	class UFurnitureComponent*                         BottomFurnitureComponent;                                   // 0x0300   (0x0008)  
	SDK_UNDEFINED(16,590) /* TArray<TWeakObjectPtr<AIndianaCharacter*>> */ __um(Climbers);                         // 0x0308   (0x0010)  
};

/// Class /Script/Indiana.LedgerCharacterStatsWidget
/// Size: 0x0328 (808 bytes) (0x000300 - 0x000328) align 8 MaxSize: 0x0328
class ULedgerCharacterStatsWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0300   (0x0008)  MISSED
	class UScrollingWidgetGroup*                       ScrollingWidgetGroup;                                       // 0x0308   (0x0008)  
	class UScrollBox*                                  PageScrollBox;                                              // 0x0310   (0x0008)  
	class UStatsSummaryPageWidget*                     SummaryPage;                                                // 0x0318   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0320   (0x0008)  MISSED
};

/// Class /Script/Indiana.LedgerCharacterWidget
/// Size: 0x0348 (840 bytes) (0x000300 - 0x000348) align 8 MaxSize: 0x0348
class ULedgerCharacterWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0300   (0x0008)  MISSED
	class UNavigationGroupWidget*                      NavigationBar;                                              // 0x0308   (0x0008)  
	class UScrollBox*                                  PageScrollBox;                                              // 0x0310   (0x0008)  
	class UScrollingWidgetGroup*                       ScrollingWidgetGroup;                                       // 0x0318   (0x0008)  
	class UStatsSummaryPageWidget*                     CharacterSummary;                                           // 0x0320   (0x0008)  
	class UStatsSkillsPageWidget*                      CharacterSkills;                                            // 0x0328   (0x0008)  
	class UStatsPerksPageWidget*                       CharacterPerks;                                             // 0x0330   (0x0008)  
	class UCharacterDetailsWidget*                     CharacterDetails;                                           // 0x0338   (0x0008)  
	class UReputationSummaryWidget*                    ReputationPage;                                             // 0x0340   (0x0008)  
};

/// Class /Script/Indiana.LedgerMapQuestSelectionWidget
/// Size: 0x0370 (880 bytes) (0x000308 - 0x000370) align 8 MaxSize: 0x0370
class ULedgerMapQuestSelectionWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0308   (0x0018)  MISSED
	class UClass*                                      EntryClass;                                                 // 0x0320   (0x0008)  
	class UClass*                                      LastEntryClass;                                             // 0x0328   (0x0008)  
	int32_t                                            MaxQuestsThatCanBeShown;                                    // 0x0330   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0334   (0x0004)  MISSED
	class UVerticalBox*                                EntryList;                                                  // 0x0338   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0340   (0x0008)  
	class UButtonBase*                                 CancelButton;                                               // 0x0348   (0x0008)  
	FMargin                                            EntryPadding;                                               // 0x0350   (0x0010)  
	class USizeBox*                                    BackgroundSizeBox;                                          // 0x0360   (0x0008)  
	class USizeBox*                                    ContentSizeBox;                                             // 0x0368   (0x0008)  
};

/// Class /Script/Indiana.MapBaseWidget
/// Size: 0x04B8 (1208 bytes) (0x000300 - 0x0004B8) align 8 MaxSize: 0x04B8
class UMapBaseWidget : public UIndianaUserWidget
{ 
public:
	class UTexture2D*                                  CurrentImageTexture;                                        // 0x0300   (0x0008)  
	class UMultiQuestMapTracker*                       MultiQuestMapTracker;                                       // 0x0308   (0x0008)  
	class UUserWidget*                                 GamepadSelector;                                            // 0x0310   (0x0008)  
	class UScaleBox*                                   ImageScaleBox;                                              // 0x0318   (0x0008)  
	class UCanvasPanel*                                OuterCanvas;                                                // 0x0320   (0x0008)  
	class UCanvasPanel*                                ContentCanvas;                                              // 0x0328   (0x0008)  
	class UCanvasPanel*                                ImageCanvas;                                                // 0x0330   (0x0008)  
	class UImage*                                      MapImage;                                                   // 0x0338   (0x0008)  
	class UBorder*                                     LoadingImageBlocker;                                        // 0x0340   (0x0008)  
	class UCircularThrobber*                           LoadingThrobber;                                            // 0x0348   (0x0008)  
	class USizeBox*                                    MapSizeBox;                                                 // 0x0350   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0358   (0x0008)  
	float                                              StartingZoomLevel;                                          // 0x0360   (0x0004)  
	float                                              MaxZoomLevel;                                               // 0x0364   (0x0004)  
	float                                              MinZoomLevel;                                               // 0x0368   (0x0004)  
	float                                              GamepadZoomSpeed;                                           // 0x036C   (0x0004)  
	float                                              MouseZoomSpeed;                                             // 0x0370   (0x0004)  
	FVector2D                                          MousePanSensitivity;                                        // 0x0374   (0x0008)  
	float                                              GamepadZoomSensitivity;                                     // 0x037C   (0x0004)  
	float                                              GamepadSelectorInsetPercent;                                // 0x0380   (0x0004)  
	float                                              GamepadSelectorExtendPercent;                               // 0x0384   (0x0004)  
	float                                              GamepadSelectorMagnetismDelay;                              // 0x0388   (0x0004)  
	float                                              GamepadMagnetizeExponent;                                   // 0x038C   (0x0004)  
	float                                              GamepadMagnetizeTime;                                       // 0x0390   (0x0004)  
	float                                              GamepadPanMinMovementMultiplier;                            // 0x0394   (0x0004)  
	float                                              GamepadPanSensitivity;                                      // 0x0398   (0x0004)  
	FVector2D                                          GamepadPanDeadzone;                                         // 0x039C   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x03A4   (0x0004)  MISSED
	FInputLabelDescription                             PanDescription;                                             // 0x03A8   (0x0038)  
	FInputLabelDescription                             ZoomDescription;                                            // 0x03E0   (0x0038)  
	TWeakObjectPtr<class UTexture2D*>                  MapTexture;                                                 // 0x0418   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0420   (0x0020)  MISSED
	FVector2D                                          MapMinBounds;                                               // 0x0440   (0x0008)  
	FVector2D                                          MapMaxBounds;                                               // 0x0448   (0x0008)  
	unsigned char                                      UnknownData02_7[0x68];                                      // 0x0450   (0x0068)  MISSED
};

/// Class /Script/Indiana.LedgerMapWidget
/// Size: 0x06C0 (1728 bytes) (0x0004B8 - 0x0006C0) align 8 MaxSize: 0x06C0
class ULedgerMapWidget : public UMapBaseWidget
{ 
public:
	float                                              InactiveQuestOpacity;                                       // 0x04B8   (0x0004)  
	float                                              BeaconMouseDistanceThreshold;                               // 0x04BC   (0x0004)  
	class UClass*                                      SelectionWidgetClass;                                       // 0x04C0   (0x0008)  
	class UClass*                                      QuestSelectionWidgetClass;                                  // 0x04C8   (0x0008)  
	class UNavigationGroupWidget*                      NavigationBar;                                              // 0x04D0   (0x0008)  
	class UTextBlockBase*                              RegionNameTextblock;                                        // 0x04D8   (0x0008)  
	class UTextBlockBase*                              LocalMapNameTextBlock;                                      // 0x04E0   (0x0008)  
	class UTextBlockBase*                              MissingMapDataTextBlock;                                    // 0x04E8   (0x0008)  
	class UBorder*                                     MapBorder;                                                  // 0x04F0   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x04F8   (0x0008)  
	class UFloorIndicatorWidget*                       FloorLevelIndicator;                                        // 0x0500   (0x0008)  
	class UClass*                                      FastTravelEntryClass;                                       // 0x0508   (0x0008)  
	class UClass*                                      PlayerEntryClass;                                           // 0x0510   (0x0008)  
	class UClass*                                      BeaconEntryClass;                                           // 0x0518   (0x0008)  
	bool                                               bUseBeaconButtons;                                          // 0x0520   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0521   (0x0007)  MISSED
	class UClass*                                      BeaconButtonEntryClass;                                     // 0x0528   (0x0008)  
	class UClass*                                      FastTravelTooltipClass;                                     // 0x0530   (0x0008)  
	class UClass*                                      BeaconTooltipClass;                                         // 0x0538   (0x0008)  
	class UClass*                                      AreaBeaconEntryClass;                                       // 0x0540   (0x0008)  
	class UClass*                                      TextEntryClass;                                             // 0x0548   (0x0008)  
	class UClass*                                      POIClass;                                                   // 0x0550   (0x0008)  
	FInputLabelDescription                             ChangeFloorDescription;                                     // 0x0558   (0x0038)  
	FLocString                                         LocalMapString;                                             // 0x0590   (0x0008)  
	FLocString                                         RegionMapString;                                            // 0x0598   (0x0008)  
	class UPointOfInterestTextureData*                 POITextureData;                                             // 0x05A0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x118];                                     // 0x05A8   (0x0118)  MISSED


	/// Functions
	// Function /Script/Indiana.LedgerMapWidget.OnCompanionSelectionClosed
	// void OnCompanionSelectionClosed();                                                                                       // [0x1879c40] Final|Native|Protected 
	// Function /Script/Indiana.LedgerMapWidget.OnBorderMouseDown
	// FEventReply OnBorderMouseDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                          // [0x1879a60] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.LedgerMapWidget.InitiateFastTravelFromCompanionSelect
	// void InitiateFastTravelFromCompanionSelect();                                                                            // [0x1879a10] Final|Native|Protected 
	// Function /Script/Indiana.LedgerMapWidget.ActiveQuestChanged
	// void ActiveQuestChanged();                                                                                               // [0x18797c0] Final|Native|Protected 
};

/// Class /Script/Indiana.LedgerWidget
/// Size: 0x0418 (1048 bytes) (0x000308 - 0x000418) align 8 MaxSize: 0x0418
class ULedgerWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x38];                                      // 0x0308   (0x0038)  MISSED
	class UNavigationGroupWidget*                      NavigationBar;                                              // 0x0340   (0x0008)  
	class UScrollBox*                                  PageScrollBox;                                              // 0x0348   (0x0008)  
	class UScrollingWidgetGroup*                       ScrollingWidgetGroup;                                       // 0x0350   (0x0008)  
	class UPlayerStatsWidget*                          PlayerStats;                                                // 0x0358   (0x0008)  
	class ULedgerCharacterWidget*                      Character;                                                  // 0x0360   (0x0008)  
	class ULedgerJournalWidget*                        Journal;                                                    // 0x0368   (0x0008)  
	class ULedgerMapWidget*                            LedgerMap;                                                  // 0x0370   (0x0008)  
	class UInventoryWidget*                            Inventory;                                                  // 0x0378   (0x0008)  
	class UCompanionsWidget*                           CompanionWidget1;                                           // 0x0380   (0x0008)  
	class UCompanionsWidget*                           CompanionWidget2;                                           // 0x0388   (0x0008)  
	class UItemViewerWidget*                           CompanionItemViewer;                                        // 0x0390   (0x0008)  
	class UImage*                                      CharacterStageFront;                                        // 0x0398   (0x0008)  
	class UImage*                                      CharacterStageRear;                                         // 0x03A0   (0x0008)  
	class UAudioLogWidget*                             AudioLogWidget;                                             // 0x03A8   (0x0008)  
	class UActorRenderWidget*                          CharacterRender;                                            // 0x03B0   (0x0008)  
	class UClass*                                      CompanionWidgetClass;                                       // 0x03B8   (0x0008)  
	TArray<ESpecialObsidianID>                         CompanionIDsAndSortOrder;                                   // 0x03C0   (0x0010)  
	unsigned char                                      UnknownData01_7[0x48];                                      // 0x03D0   (0x0048)  MISSED


	/// Functions
	// Function /Script/Indiana.LedgerWidget.UpdateCompanionTabs
	// void UpdateCompanionTabs();                                                                                              // [0x187a330] Final|Native|Protected 
	// Function /Script/Indiana.LedgerWidget.OnSetCurrentPage
	// void OnSetCurrentPage(ELedgerPages Page, bool bAnimate);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LedgerWidget.OnItemAdded
	// void OnItemAdded(FItemStack& ItemStack);                                                                                 // [0x1879d70] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.LedgerWidget.FadeInSharedItemViewer
	// void FadeInSharedItemViewer();                                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LedgerWidget.AfterSettingAnyPage
	// void AfterSettingAnyPage(class UIndianaUserWidget* UserWidget, int32_t Index, bool bAnimate, bool bCanChangePage, bool bActivate); // [0x18797e0] Final|Native|Protected 
};

/// Class /Script/Indiana.LegalWidget
/// Size: 0x03E8 (1000 bytes) (0x0003B8 - 0x0003E8) align 8 MaxSize: 0x03E8
class ULegalWidget : public UDialogBoxWidget
{ 
public:
	class UScrollBox*                                  LegalScrollBox;                                             // 0x03B8   (0x0008)  
	class UTextBlockBase*                              EULATextBlock;                                              // 0x03C0   (0x0008)  
	class UTextBlockBase*                              TOSTextBlock;                                               // 0x03C8   (0x0008)  
	ESlateVisibility                                   ActiveVisibility;                                           // 0x03D0   (0x0001)  
	ESlateVisibility                                   InactiveVisibility;                                         // 0x03D1   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x03D2   (0x0002)  MISSED
	float                                              ActiveConfirmButtonOpasity;                                 // 0x03D4   (0x0004)  
	float                                              InactiveConfirmButtonOpasity;                               // 0x03D8   (0x0004)  
	float                                              ScrollBarTriggerSize;                                       // 0x03DC   (0x0004)  
	float                                              GamepadZoomMultiplier;                                      // 0x03E0   (0x0004)  
	float                                              MouseWheelMultiplier;                                       // 0x03E4   (0x0004)  


	/// Functions
	// Function /Script/Indiana.LegalWidget.UpdateConfirmButtonState
	// void UpdateConfirmButtonState(float DeltaTime);                                                                          // [0x187a350] Final|Native|Private 
	// Function /Script/Indiana.LegalWidget.ShowLegal
	// void ShowLegal();                                                                                                        // [0x187a310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.SetEnabledConfirmButton
	// void SetEnabledConfirmButton(bool bEnable);                                                                              // [0x187a280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.ResetScrollOffset
	// void ResetScrollOffset();                                                                                                // [0x187a260] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.IsLegalSigned
	// bool IsLegalSigned();                                                                                                    // [0x1879a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.LegalWidget.InitializeMechanicOfConfirmButton
	// void InitializeMechanicOfConfirmButton();                                                                                // [0x18799f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.ExecuteConfirm
	// void ExecuteConfirm();                                                                                                   // [0x18799d0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.ExecuteCancel
	// void ExecuteCancel();                                                                                                    // [0x18799b0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.ExecuteAbort
	// void ExecuteAbort();                                                                                                     // [0x1879990] Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.LevelOptionsWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class ULevelOptionsWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UVerticalBox*                                EntryVerticalBox;                                           // 0x0310   (0x0008)  
	class UGridPanel*                                  EntryLevelGrid;                                             // 0x0318   (0x0008)  
	class UTextBlockBase*                              DisplayTextBlock;                                           // 0x0320   (0x0008)  
	bool                                               bDeliverableMapsOnly;                                       // 0x0328   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0329   (0x0003)  MISSED
	FLocString                                         TextRef;                                                    // 0x032C   (0x0008)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x0334   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.LevelOptionsWidget.OnControllerBack
	// void OnControllerBack();                                                                                                 // [0x1879c60] Final|Native|Protected 
};

/// Class /Script/Indiana.LevelUpButtonWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class ULevelUpButtonWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	FLocString                                         TextLocString;                                              // 0x0318   (0x0008)  
	class UTextBlockBase*                              TextBlock;                                                  // 0x0320   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0328   (0x0008)  
	class UPanelWidget*                                EffectContainer;                                            // 0x0330   (0x0008)  
};

/// Class /Script/Indiana.LevelUpNotificationWidget
/// Size: 0x03E0 (992 bytes) (0x000308 - 0x0003E0) align 8 MaxSize: 0x03E0
class ULevelUpNotificationWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class UCanvasPanel*                                MainCanvasPanel;                                            // 0x0308   (0x0008)  
	class UBorder*                                     FadeInContainer;                                            // 0x0310   (0x0008)  
	class UImage*                                      Glow;                                                       // 0x0318   (0x0008)  
	class UImage*                                      LevelFlowLeft;                                              // 0x0320   (0x0008)  
	class UImage*                                      LevelFlowRight;                                             // 0x0328   (0x0008)  
	class UImage*                                      DarkBacking;                                                // 0x0330   (0x0008)  
	class UImage*                                      LevelUpBacking;                                             // 0x0338   (0x0008)  
	class UTextBlockBase*                              CongratsTextBlock;                                          // 0x0340   (0x0008)  
	class UOverlay*                                    InputLabelOverlay;                                          // 0x0348   (0x0008)  
	class UInputLabelGroupWidget*                      LevelUpInputLabelGroupSkills;                               // 0x0350   (0x0008)  
	class UInputLabelGroupWidget*                      LevelUpInputLabelGroupSkillsAndPerks;                       // 0x0358   (0x0008)  
	class UInputLabelGroupWidget*                      ReminderInputLabel;                                         // 0x0360   (0x0008)  
	class UTextBlockBase*                              NewLevelTextBlock;                                          // 0x0368   (0x0008)  
	class UOverlay*                                    LevelUpReminderOverlay;                                     // 0x0370   (0x0008)  
	float                                              DefaultDisplayTime;                                         // 0x0378   (0x0004)  
	float                                              GlowballEaseExp;                                            // 0x037C   (0x0004)  
	float                                              GlowballEaseSpeed;                                          // 0x0380   (0x0004)  
	float                                              FadeGlowballAtEase;                                         // 0x0384   (0x0004)  
	FVector2D                                          GlowballTargetPositionViewportMultiplier;                   // 0x0388   (0x0008)  
	EIndianaUIColorType                                InputLabelColorOverride;                                    // 0x0390   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4F];                                      // 0x0391   (0x004F)  MISSED


	/// Functions
	// Function /Script/Indiana.LevelUpNotificationWidget.PlayerCombatStateChanged
	// void PlayerCombatStateChanged(bool bIsInCombat, bool bRestoring);                                                        // [0x187a190] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnTextAndSunFadeOutComplete
	// void OnTextAndSunFadeOutComplete();                                                                                      // [0x187a170] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnSkillUpdated
	// void OnSkillUpdated(ESkill Skill, int32_t Value);                                                                        // [0x187a0a0] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnProgressToSkillsPage
	// void OnProgressToSkillsPage();                                                                                           // [0x187a080] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnProgressToPerksPage
	// void OnProgressToPerksPage();                                                                                            // [0x187a060] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnPrimaryTextAndSunFadeInComplete
	// void OnPrimaryTextAndSunFadeInComplete();                                                                                // [0x187a040] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnPerkAdded
	// void OnPerkAdded();                                                                                                      // [0x187a020] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnLevelUpReminderVisibilityChanged
	// void OnLevelUpReminderVisibilityChanged(bool bVisible);                                                                  // [0x1879f90] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnLevelUpNotificationVisibilityChanged
	// void OnLevelUpNotificationVisibilityChanged(bool bVisible);                                                              // [0x1879f00] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnLevelUpComplete
	// void OnLevelUpComplete();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x1879ce0] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnGlowShrinkComplete
	// void OnGlowShrinkComplete();                                                                                             // [0x1879ca0] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnGlowGrowComplete
	// void OnGlowGrowComplete();                                                                                               // [0x1879c80] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnGlowballComplete
	// void OnGlowballComplete();                                                                                               // [0x1879cc0] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetTextAndSunFadeOutAnimation
	// class UWidgetAnimation* GetTextAndSunFadeOutAnimation();                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetSunSpinAnimation
	// class UWidgetAnimation* GetSunSpinAnimation();                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetSecondaryTextFadeInAnimation
	// class UWidgetAnimation* GetSecondaryTextFadeInAnimation();                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetPrimaryTextGrowAnimation
	// class UWidgetAnimation* GetPrimaryTextGrowAnimation();                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetPrimaryTextAndSunFadeInAnimation
	// class UWidgetAnimation* GetPrimaryTextAndSunFadeInAnimation();                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetLevelUpReminderAnimation
	// class UWidgetAnimation* GetLevelUpReminderAnimation();                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetGlowShrinkAnimation
	// class UWidgetAnimation* GetGlowShrinkAnimation();                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetGlowGrowAnimation
	// class UWidgetAnimation* GetGlowGrowAnimation();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetGlowFadeAnimation
	// class UWidgetAnimation* GetGlowFadeAnimation();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetGlowballAnimation
	// class UWidgetAnimation* GetGlowballAnimation();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.LocomotionAnimationSet
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class ULocomotionAnimationSet : public UDataAsset
{ 
public:
};

/// Struct /Script/Indiana.DeathMontageGroup
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FDeathMontageGroup
{ 
	TArray<class UAnimMontage*>                        List;                                                       // 0x0000   (0x0010)  
	bool                                               bListIsRadialAnimation;                                     // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Class /Script/Indiana.DeathMontageSet
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UDeathMontageSet : public UDataAsset
{ 
public:
	TMap<class UClass*, FDeathMontageGroup>            DeathMontages;                                              // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.TPVPersonalityCollection
/// Size: 0x0090 (144 bytes) (0x000038 - 0x000090) align 8 MaxSize: 0x0090
class UTPVPersonalityCollection : public UDataAsset
{ 
public:
	class UTPVPersonalitySet*                          DefaultPersonality;                                         // 0x0038   (0x0008)  
	SDK_UNDEFINED(80,591) /* TMap<TSoftObjectPtr<UClass*>, class UTPVPersonalitySet*> */ __um(WeaponBasedPersonalities); // 0x0040   (0x0050)  
};

/// Class /Script/Indiana.TalkingIdleOverrideData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UTalkingIdleOverrideData : public UDataAsset
{ 
public:
	TArray<FTalkingIdleEntry>                          TalkingIdleOptions;                                         // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.TPVPersonalitySet
/// Size: 0x0230 (560 bytes) (0x000038 - 0x000230) align 8 MaxSize: 0x0230
class UTPVPersonalitySet : public ULocomotionAnimationSet
{ 
public:
	TArray<class UAnimSequence*>                       LocomotionWalkStart;                                        // 0x0038   (0x0010)  
	TArray<class UAnimSequence*>                       LocomotionTurnInPlace;                                      // 0x0048   (0x0010)  
	TArray<class UAnimMontage*>                        GetUpFromFaceDownPose;                                      // 0x0058   (0x0010)  
	TArray<class UAnimMontage*>                        GetUpFromFaceUpPose;                                        // 0x0068   (0x0010)  
	class UAimOffsetBlendSpace*                        NonCombatAimBlendSpace;                                     // 0x0078   (0x0008)  
	class UAnimSequence*                               WalkForward;                                                // 0x0080   (0x0008)  
	class UAnimSequence*                               WalkBackward;                                               // 0x0088   (0x0008)  
	class UAnimSequence*                               RunForward;                                                 // 0x0090   (0x0008)  
	class UAnimSequence*                               RunBackward;                                                // 0x0098   (0x0008)  
	class UAnimSequence*                               LowGravRunForward;                                          // 0x00A0   (0x0008)  
	class UAnimSequence*                               LowGravRunBackward;                                         // 0x00A8   (0x0008)  
	class UAnimSequence*                               HandPose;                                                   // 0x00B0   (0x0008)  
	class UAnimSequence*                               WalkArmPose;                                                // 0x00B8   (0x0008)  
	class UAnimSequence*                               RunArmPose;                                                 // 0x00C0   (0x0008)  
	class UAnimSequence*                               JumpIntro;                                                  // 0x00C8   (0x0008)  
	class UAnimSequence*                               JumpLoop;                                                   // 0x00D0   (0x0008)  
	class UAnimSequence*                               JumpLand;                                                   // 0x00D8   (0x0008)  
	class UAnimSequence*                               LowGravJumpIntro;                                           // 0x00E0   (0x0008)  
	class UAnimSequence*                               LowGravJumpLoop;                                            // 0x00E8   (0x0008)  
	class UAnimSequence*                               LowGravJumpLand;                                            // 0x00F0   (0x0008)  
	class UAnimSequence*                               CrouchIdleStart;                                            // 0x00F8   (0x0008)  
	class UAnimSequence*                               CrouchIdle;                                                 // 0x0100   (0x0008)  
	class UAnimSequence*                               CrouchIdleEnd;                                              // 0x0108   (0x0008)  
	class UAnimSequence*                               CrouchWalkStart;                                            // 0x0110   (0x0008)  
	class UAnimSequence*                               CrouchWalk;                                                 // 0x0118   (0x0008)  
	class UAnimSequence*                               CrouchWalkEnd;                                              // 0x0120   (0x0008)  
	class UAnimSequence*                               PersonalityIdleAdditive;                                    // 0x0128   (0x0008)  
	TArray<FRandomPlayerSequenceEntryNamed>            BaseIdles;                                                  // 0x0130   (0x0010)  
	TArray<FLoopRandomSequence>                        StartLoopEndIdles;                                          // 0x0140   (0x0010)  
	TMap<FName, FLoopRandomSequence>                   TalkingSequences;                                           // 0x0150   (0x0050)  
	TMap<FName, FLoopRandomSequence>                   BarkTalkingSequences;                                       // 0x01A0   (0x0050)  
	TArray<FRandomPlayerSequenceEntryNamed>            DialogIdles;                                                // 0x01F0   (0x0010)  
	TArray<FLoopRandomSequence>                        DialogStartLoopEndIdles;                                    // 0x0200   (0x0010)  
	class UAnimSequence*                               HeadAdditiveLayer;                                          // 0x0210   (0x0008)  
	bool                                               bLeftHandIKDefault;                                         // 0x0218   (0x0001)  
	bool                                               bAllowNonCombatStance;                                      // 0x0219   (0x0001)  
	bool                                               bUseAltIKTargets;                                           // 0x021A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x021B   (0x0001)  MISSED
	float                                              AnimationWalkSpeed;                                         // 0x021C   (0x0004)  
	float                                              AnimationRunSpeed;                                          // 0x0220   (0x0004)  
	float                                              AnimationRunSpeedThreshold;                                 // 0x0224   (0x0004)  
	class UDeathMontageSet*                            DeathMontages;                                              // 0x0228   (0x0008)  
};

/// Struct /Script/Indiana.LocomotionData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FLocomotionData
{ 
	class UAnimSequence*                               AnimSequence;                                               // 0x0000   (0x0008)  
	class UAnimSequence*                               AnimSequenceAlt;                                            // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0010   (0x0040)  MISSED
};

/// Class /Script/Indiana.LocomotionLogicComponent
/// Size: 0x0230 (560 bytes) (0x0000E0 - 0x000230) align 16 MaxSize: 0x0230
class ULocomotionLogicComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	class UTPVAnimInstance*                            AnimInstance;                                               // 0x00E8   (0x0008)  
	class UAIMovementComponent*                        MovementComponent;                                          // 0x00F0   (0x0008)  
	TArray<FLocomotionData>                            NonCombatLocomotion;                                        // 0x00F8   (0x0010)  
	TArray<FLocomotionData>                            CombatLocomotion;                                           // 0x0108   (0x0010)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0118   (0x0020)  MISSED
	bool                                               bActiveInCombat;                                            // 0x0138   (0x0001)  
	bool                                               bUseNonCombatInCombat;                                      // 0x0139   (0x0001)  
	bool                                               bDebugThisInstance;                                         // 0x013A   (0x0001)  
	bool                                               bDisableThisInstance;                                       // 0x013B   (0x0001)  
	bool                                               bUseTurnSlots;                                              // 0x013C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x013D   (0x0003)  MISSED
	float                                              TurnInPlaceSlideAngle;                                      // 0x0140   (0x0004)  
	float                                              SlideInPlaceDuration;                                       // 0x0144   (0x0004)  
	float                                              SlideInPlaceDurationCombat;                                 // 0x0148   (0x0004)  
	float                                              RotationCorrectionPercentage;                               // 0x014C   (0x0004)  
	float                                              AnglePriority;                                              // 0x0150   (0x0004)  
	float                                              SpeedPriority;                                              // 0x0154   (0x0004)  
	float                                              NoAngleTrackPenalty;                                        // 0x0158   (0x0004)  
	float                                              CombatTurningPlayRate;                                      // 0x015C   (0x0004)  
	float                                              NonCombatTurningPlayRate;                                   // 0x0160   (0x0004)  
	unsigned char                                      UnknownData03_7[0xCC];                                      // 0x0164   (0x00CC)  MISSED
};

/// Class /Script/Indiana.LogList
/// Size: 0x0388 (904 bytes) (0x000358 - 0x000388) align 8 MaxSize: 0x0388
class ULogList : public UGenericCollapsableList
{ 
public:
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0358   (0x0030)  MISSED


	/// Functions
	// Function /Script/Indiana.LogList.AddNewFoundLog
	// void AddNewFoundLog(FLocString ExaminableName, FLocString ExaminableDescription);                                        // [0x187e140] Final|Native|Protected 
};

/// Class /Script/Indiana.LootRowBase
/// Size: 0x00C0 (192 bytes) (0x000030 - 0x0000C0) align 8 MaxSize: 0x00C0
class ULootRowBase : public UObject
{ 
public:
	int32_t                                            MinLevel;                                                   // 0x0030   (0x0004)  
	int32_t                                            MaxLevel;                                                   // 0x0034   (0x0004)  
	int32_t                                            Count;                                                      // 0x0038   (0x0004)  
	int32_t                                            Chance;                                                     // 0x003C   (0x0004)  
	bool                                               bInvertConditional;                                         // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0041   (0x0007)  MISSED
	FLogicalGroupedExpression                          Conditional;                                                // 0x0048   (0x0078)  
};

/// Class /Script/Indiana.LootRowItem
/// Size: 0x02B0 (688 bytes) (0x0000C0 - 0x0002B0) align 8 MaxSize: 0x02B0
class ULootRowItem : public ULootRowBase
{ 
public:
	FItemDefinitionVariant                             Item;                                                       // 0x00C0   (0x01F0)  
};

/// Class /Script/Indiana.LootRowTable
/// Size: 0x00C8 (200 bytes) (0x0000C0 - 0x0000C8) align 8 MaxSize: 0x00C8
class ULootRowTable : public ULootRowBase
{ 
public:
	class ULootTableData*                              LootTable;                                                  // 0x00C0   (0x0008)  
};

/// Class /Script/Indiana.LootTableData
/// Size: 0x0078 (120 bytes) (0x000038 - 0x000078) align 8 MaxSize: 0x0078
class ULootTableData : public UDataAsset
{ 
public:
	int32_t                                            ChanceNone;                                                 // 0x0038   (0x0004)  
	bool                                               bUseAll;                                                    // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	int32_t                                            MaxCount;                                                   // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<class ULootRowBase*>                        LootRows;                                                   // 0x0048   (0x0010)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0058   (0x0008)  MISSED
	FString                                            OverlayFilePath;                                            // 0x0060   (0x0010)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0070   (0x0008)  MISSED
};

/// Class /Script/Indiana.LowGravJumpNavLink
/// Size: 0x02F0 (752 bytes) (0x0002E8 - 0x0002F0) align 8 MaxSize: 0x02F0
class ALowGravJumpNavLink : public AJumpNavLink
{ 
public:
	TEnumAsByte<ENavLinkDirection>                     LinkDirection;                                              // 0x02E8   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02E9   (0x0007)  MISSED
};

/// Class /Script/Indiana.MainActionKeyBindDisplay
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class UMainActionKeyBindDisplay : public UIndianaUserWidget
{ 
public:
	class UInputLabelWidget*                           InputLabel;                                                 // 0x0300   (0x0008)  
	FInputLabelDescription                             LabelDescription;                                           // 0x0308   (0x0038)  
};

/// Class /Script/Indiana.MainMenuDLCManagerWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UMainMenuDLCManagerWidget : public UIndianaUserWidget
{ 
public:
	bool                                               bEnableINX01Widget;                                         // 0x0300   (0x0001)  
	bool                                               bEnableINX02Widget;                                         // 0x0301   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0302   (0x0006)  MISSED
	class UMainMenuDLCWidget*                          INX01Widget;                                                // 0x0308   (0x0008)  
	class UMainMenuDLCWidget*                          INX02Widget;                                                // 0x0310   (0x0008)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0318   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.MainMenuDLCManagerWidget.RefreshEntitlements
	// void RefreshEntitlements();                                                                                              // [0x187e920] Final|Native|Public  
};

/// Struct /Script/Indiana.PlatformSetProductID
/// Size: 0x00C0 (192 bytes) (0x000000 - 0x0000C0) align 8 MaxSize: 0x00C0
struct FPlatformSetProductID
{ 
	FString                                            ForcedUniversalID;                                          // 0x0000   (0x0010)  
	FString                                            PCWindowsStoreID;                                           // 0x0010   (0x0010)  
	FString                                            PCGamepassID;                                               // 0x0020   (0x0010)  
	FString                                            PCEpicID;                                                   // 0x0030   (0x0010)  
	FString                                            PCSteamID;                                                  // 0x0040   (0x0010)  
	FString                                            PCFallbackLink;                                             // 0x0050   (0x0010)  
	FString                                            XboxID;                                                     // 0x0060   (0x0010)  
	FString                                            PS4AmericaTitleID;                                          // 0x0070   (0x0010)  
	FString                                            PS4ID_SIEA;                                                 // 0x0080   (0x0010)  
	FString                                            PS4EuropeTitleID;                                           // 0x0090   (0x0010)  
	FString                                            PS4ID_SIEE;                                                 // 0x00A0   (0x0010)  
	FString                                            SwitchID;                                                   // 0x00B0   (0x0010)  
};

/// Class /Script/Indiana.MainMenuDLCWidget
/// Size: 0x0450 (1104 bytes) (0x000300 - 0x000450) align 8 MaxSize: 0x0450
class UMainMenuDLCWidget : public UIndianaUserWidget
{ 
public:
	EDownLoadableContent                               DLCPackage;                                                 // 0x0300   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0301   (0x0007)  MISSED
	FPlatformSetProductID                              ProductIDs;                                                 // 0x0308   (0x00C0)  
	EDebugPCPlatformID                                 OpenLinkBehavior;                                           // 0x03C8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x03C9   (0x0003)  MISSED
	FLocString                                         HeaderString;                                               // 0x03CC   (0x0008)  
	FLocString                                         AvailabilityString;                                         // 0x03D4   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x03DC   (0x0004)  MISSED
	class UTexture2D*                                  NormalTexture;                                              // 0x03E0   (0x0008)  
	class UTexture2D*                                  FocusedTexture;                                             // 0x03E8   (0x0008)  
	TWeakObjectPtr<class UTexture2D*>                  DLCInfoBrandTexture;                                        // 0x03F0   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x03F8   (0x0020)  MISSED
	class UButtonBase*                                 Button;                                                     // 0x0418   (0x0008)  
	class UInputWidget*                                InputWidget;                                                // 0x0420   (0x0008)  
	class UTextBlockBase*                              HeaderTextblock;                                            // 0x0428   (0x0008)  
	class UTextBlockBase*                              AvailabilityTextBlock;                                      // 0x0430   (0x0008)  
	class UImage*                                      DLCImage;                                                   // 0x0438   (0x0008)  
	class UImage*                                      Checkmark;                                                  // 0x0440   (0x0008)  
	unsigned char                                      UnknownData04_7[0x8];                                       // 0x0448   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.MainMenuDLCWidget.OnButtonUnhoveredUnfocused
	// void OnButtonUnhoveredUnfocused();                                                                                       // [0x187e330] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuDLCWidget.OnButtonHoveredFocused
	// void OnButtonHoveredFocused();                                                                                           // [0x187e310] Final|Native|Protected 
};

/// Struct /Script/Indiana.MainMenuLevelDescription
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FMainMenuLevelDescription
{ 
	FSoftObjectPath                                    Level;                                                      // 0x0000   (0x0018)  
	FLocString                                         TextReference;                                              // 0x0018   (0x0008)  
	bool                                               bIsDeliverableInCurrentMilestone;                           // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	class UTravelDestinationData*                      TravelDestinationData;                                      // 0x0028   (0x0008)  
};

/// Class /Script/Indiana.MainMenuLevelsData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UMainMenuLevelsData : public UDataAsset
{ 
public:
	TArray<FMainMenuLevelDescription>                  LevelDescriptions;                                          // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.MainMenuWidget
/// Size: 0x03F8 (1016 bytes) (0x000308 - 0x0003F8) align 8 MaxSize: 0x03F8
class UMainMenuWidget : public UIndianaInterfaceUserWidget
{ 
public:
	SDK_UNDEFINED(16,592) /* FMulticastInlineDelegate */ __um(OnCreditsStartRequestedDelegate);                    // 0x0308   (0x0010)  
	SDK_UNDEFINED(16,593) /* FMulticastInlineDelegate */ __um(OnCreditsStopRequestedDelegate);                     // 0x0318   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0328   (0x0010)  MISSED
	class UMainMenuLevelsData*                         MainMenuLevelsData;                                         // 0x0338   (0x0008)  
	class UMainOptionsWidget*                          MainOptions;                                                // 0x0340   (0x0008)  
	class ULevelOptionsWidget*                         ExtraOptions;                                               // 0x0348   (0x0008)  
	class ULevelOptionsWidget*                         DeliverablesOptions;                                        // 0x0350   (0x0008)  
	class UOverlay*                                    ContentOverlay;                                             // 0x0358   (0x0008)  
	class UOverlay*                                    PressKeyPromptOverlay;                                      // 0x0360   (0x0008)  
	class UOverlay*                                    AutosaveSplashOverlay;                                      // 0x0368   (0x0008)  
	class UOverlay*                                    LogoContainer;                                              // 0x0370   (0x0008)  
	class UButtonBase*                                 InvisibleButton;                                            // 0x0378   (0x0008)  
	class UTextBlockBase*                              VersionTextBlock;                                           // 0x0380   (0x0008)  
	class UTextBlockBase*                              UserNameTextBlock;                                          // 0x0388   (0x0008)  
	class UTextBlockBase*                              PressKeyPrompt;                                             // 0x0390   (0x0008)  
	class UTextBlockBase*                              AutosaveSplashText;                                         // 0x0398   (0x0008)  
	class UHorizontalBox*                              XboxTextblockContainer;                                     // 0x03A0   (0x0008)  
	class UClass*                                      ButtonClass;                                                // 0x03A8   (0x0008)  
	class UClass*                                      SettingsMenuClass;                                          // 0x03B0   (0x0008)  
	class UCreditsWidget*                              CreditsWidget;                                              // 0x03B8   (0x0008)  
	class ULegalWidget*                                LegalWidget;                                                // 0x03C0   (0x0008)  
	FGlobalVariable                                    CreditsMusicGlobalVariable;                                 // 0x03C8   (0x0010)  
	int32_t                                            OnCreditsStartGlobalVariableValue;                          // 0x03D8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x03DC   (0x0004)  MISSED
	class UGammaSelectionWidget*                       GammaSelection;                                             // 0x03E0   (0x0008)  
	class UMainMenuDLCManagerWidget*                   MenuDLCManager;                                             // 0x03E8   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x03F0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.MainMenuWidget.TryInitializeDLC
	// void TryInitializeDLC();                                                                                                 // [0x187e940] Final|Native|Private 
	// Function /Script/Indiana.MainMenuWidget.StartAutosaveSplash
	// void StartAutosaveSplash();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OpenMainScreen
	// void OpenMainScreen();                                                                                                   // [0x187e900] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OpenExtrasScreen
	// void OpenExtrasScreen();                                                                                                 // [0x187e8e0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OpenDeliverablesScreen
	// void OpenDeliverablesScreen();                                                                                           // [0x187e8c0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OpenCredits
	// void OpenCredits();                                                                                                      // [0x187e8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnStartShowMainOptions
	// void OnStartShowMainOptions();                                                                                           // [0x1c5deb0] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnStartShowGammaSelection
	// void OnStartShowGammaSelection();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnStartHideGammaSelection
	// void OnStartHideGammaSelection();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnStartHideAnyTextPrompt
	// void OnStartHideAnyTextPrompt();                                                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnShowMainOptionsComplete
	// void OnShowMainOptionsComplete();                                                                                        // [0x187e880] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnShowMainOptions
	// void OnShowMainOptions();                                                                                                // [0x187e860] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnShowLogo
	// void OnShowLogo();                                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnShowInterface
	// void OnShowInterface(bool bShouldChangeLogo);                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnShowAnyTextPrompt
	// void OnShowAnyTextPrompt();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnOfflineDLCCheckComplete
	// void OnOfflineDLCCheckComplete();                                                                                        // [0x187e6d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnLoadUserGameSettingsComplete
	// void OnLoadUserGameSettingsComplete();                                                                                   // [0x187e2d0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnHideMainOptionsStart
	// void OnHideMainOptionsStart();                                                                                           // [0x187e530] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnHideMainOptionsComplete
	// void OnHideMainOptionsComplete();                                                                                        // [0x187e510] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnHideLogo
	// void OnHideLogo();                                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnHideInterface
	// void OnHideInterface();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnGammaSelectionOpened
	// void OnGammaSelectionOpened();                                                                                           // [0x187e4f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnGammaSelectionClosed
	// void OnGammaSelectionClosed();                                                                                           // [0x187e4d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnExternalMenuOpened
	// void OnExternalMenuOpened();                                                                                             // [0x187e4b0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnExternalMenuClosed
	// void OnExternalMenuClosed(bool bForced);                                                                                 // [0x187e420] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnDLCCheckComplete
	// void OnDLCCheckComplete();                                                                                               // [0x187e400] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnCreditsInterfaceOpened
	// void OnCreditsInterfaceOpened();                                                                                         // [0x187e3e0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnCreditsInterfaceClosed
	// void OnCreditsInterfaceClosed(bool bForced);                                                                             // [0x187e350] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnAutosaveSplashComplete
	// void OnAutosaveSplashComplete();                                                                                         // [0x187e2f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnAnyTextPromptHideComplete
	// void OnAnyTextPromptHideComplete();                                                                                      // [0x187e2d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnActiveUserChanged
	// void OnActiveUserChanged(EActiveUserChangeType ChangeType);                                                              // [0x1862d50] Final|Native|Protected 
};

/// Class /Script/Indiana.MainOptionsWidget
/// Size: 0x03E0 (992 bytes) (0x000300 - 0x0003E0) align 8 MaxSize: 0x03E0
class UMainOptionsWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x50];                                      // 0x0300   (0x0050)  MISSED
	class UVerticalBox*                                MainOptions;                                                // 0x0350   (0x0008)  
	class UButtonBase*                                 ContinueButton;                                             // 0x0358   (0x0008)  
	class UButtonBase*                                 NewGameButton;                                              // 0x0360   (0x0008)  
	class UButtonBase*                                 DeliverablesButton;                                         // 0x0368   (0x0008)  
	class UButtonBase*                                 ExtrasButton;                                               // 0x0370   (0x0008)  
	class UButtonBase*                                 CreditsButton;                                              // 0x0378   (0x0008)  
	class UButtonBase*                                 QuitButton;                                                 // 0x0380   (0x0008)  
	class UButtonBase*                                 SettingsButton;                                             // 0x0388   (0x0008)  
	class UButtonBase*                                 LoadSaveButton;                                             // 0x0390   (0x0008)  
	class UButtonBase*                                 ChangeProfileButton;                                        // 0x0398   (0x0008)  
	class UClass*                                      SettingsMenuClass;                                          // 0x03A0   (0x0008)  
	class UClass*                                      DifficultySelectClass;                                      // 0x03A8   (0x0008)  
	class UClass*                                      MainMenuClass;                                              // 0x03B0   (0x0008)  
	FSoftObjectPath                                    CharacterCustomizationLevel;                                // 0x03B8   (0x0018)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x03D0   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.MainOptionsWidget.OnSettingsMenuClosed
	// void OnSettingsMenuClosed();                                                                                             // [0x187e840] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.OnQueryLatestSaveFinished
	// void OnQueryLatestSaveFinished(FString LatestSaveName, bool bHasSaves);                                                  // [0x187e6f0] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.OnLoadSaveMenuClosed
	// void OnLoadSaveMenuClosed(bool bForced);                                                                                 // [0x187e640] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x187e550] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.OnActiveUserChanged
	// void OnActiveUserChanged(EActiveUserChangeType ChangeType);                                                              // [0x187e250] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.InquireDLC2
	// void InquireDLC2();                                                                                                      // [0x187e230] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.InquireDLC1
	// void InquireDLC1();                                                                                                      // [0x187e210] Final|Native|Protected 
};

/// Class /Script/Indiana.Makeup
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UMakeup : public UPrimaryDataAsset
{ 
public:
	class UTexture*                                    MakeupMask;                                                 // 0x0038   (0x0008)  
	FLinearColor                                       CheekColor;                                                 // 0x0040   (0x0010)  
	float                                              CheekRoughness;                                             // 0x0050   (0x0004)  
	float                                              CheekMetallic;                                              // 0x0054   (0x0004)  
	FLinearColor                                       EyeColor;                                                   // 0x0058   (0x0010)  
	float                                              EyeRoughness;                                               // 0x0068   (0x0004)  
	float                                              EyeMetallic;                                                // 0x006C   (0x0004)  
	FLinearColor                                       LipColor;                                                   // 0x0070   (0x0010)  
	float                                              LipRoughness;                                               // 0x0080   (0x0004)  
	float                                              LipMetallic;                                                // 0x0084   (0x0004)  
};

/// Struct /Script/Indiana.ManagerDebuggerPlayerData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FManagerDebuggerPlayerData
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UInputComponent*                             InputComponent;                                             // 0x0008   (0x0008)  
};

/// Class /Script/Indiana.ManagerDebugger
/// Size: 0x00C8 (200 bytes) (0x000030 - 0x0000C8) align 8 MaxSize: 0x00C8
class UManagerDebugger : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0030   (0x0018)  MISSED
	TArray<FManagerDebuggerPlayerData>                 PlayerData;                                                 // 0x0048   (0x0010)  
	unsigned char                                      UnknownData01_7[0x70];                                      // 0x0058   (0x0070)  MISSED
};

/// Class /Script/Indiana.Manifest
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align 8 MaxSize: 0x0080
class UManifest : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0030   (0x0050)  MISSED
};

/// Class /Script/Indiana.MapAreaBeaconWidget
/// Size: 0x0288 (648 bytes) (0x000278 - 0x000288) align 8 MaxSize: 0x0288
class UMapAreaBeaconWidget : public UUserWidget
{ 
public:
	class UImage*                                      AreaImage;                                                  // 0x0278   (0x0008)  
	class UImage*                                      BeaconImage;                                                // 0x0280   (0x0008)  
};

/// Class /Script/Indiana.MapBeaconData
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UMapBeaconData : public UDataAsset
{ 
public:
	TMap<FGuid, FBeaconData>                           MapBeaconData;                                              // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.MapBeaconEntryTooltipWidget
/// Size: 0x0300 (768 bytes) (0x000300 - 0x000300) align 8 MaxSize: 0x0300
class UMapBeaconEntryTooltipWidget : public UToolTipContentWidget
{ 
public:
};

/// Class /Script/Indiana.MapBeaconEntryWidget
/// Size: 0x0358 (856 bytes) (0x000308 - 0x000358) align 8 MaxSize: 0x0358
class UMapBeaconEntryWidget : public UInteractableMapEntry
{ 
public:
	class UImage*                                      ActiveIconImage;                                            // 0x0308   (0x0008)  
	class UImage*                                      InactiveIconImage;                                          // 0x0310   (0x0008)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0318   (0x0040)  MISSED
};

/// Struct /Script/Indiana.MapCompassUIVisuals
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FMapCompassUIVisuals
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	FLocString                                         Description;                                                // 0x0008   (0x0008)  
	class UTexture2D*                                  Texture;                                                    // 0x0010   (0x0008)  
};

/// Class /Script/Indiana.MapCompassUIVisualData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UMapCompassUIVisualData : public UDataAsset
{ 
public:
	TArray<FMapCompassUIVisuals>                       MapCompassNamesAndTextures;                                 // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.MapFastTravelEntryWidget
/// Size: 0x0330 (816 bytes) (0x000308 - 0x000330) align 8 MaxSize: 0x0330
class UMapFastTravelEntryWidget : public UInteractableMapEntry
{ 
public:
	class UImage*                                      IconImage;                                                  // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0310   (0x0020)  MISSED
};

/// Class /Script/Indiana.MapFloorTrackedActor
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UMapFloorTrackedActor : public UInterface
{ 
public:
};

/// Class /Script/Indiana.MapFloorVolume
/// Size: 0x0318 (792 bytes) (0x000310 - 0x000318) align 8 MaxSize: 0x0318
class AMapFloorVolume : public AVolume
{ 
public:
	FName                                              FloorName;                                                  // 0x0310   (0x0008)  
};

/// Struct /Script/Indiana.ConditionalMusicTrack
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 MaxSize: 0x0080
struct FConditionalMusicTrack
{ 
	FLogicalGroupedExpression                          Condition;                                                  // 0x0000   (0x0078)  
	class UMusicTrackData*                             MusicTrack;                                                 // 0x0078   (0x0008)  
};

/// Class /Script/Indiana.MapGameplayMusicSettings
/// Size: 0x0070 (112 bytes) (0x000038 - 0x000070) align 8 MaxSize: 0x0070
class UMapGameplayMusicSettings : public UDataAsset
{ 
public:
	class UMusicTrackData*                             DefaultTrack;                                               // 0x0038   (0x0008)  
	class UMusicTrackData*                             DangerTrack;                                                // 0x0040   (0x0008)  
	class UMusicTrackData*                             CombatTrack;                                                // 0x0048   (0x0008)  
	class UMusicTrackData*                             PostCombatTrack;                                            // 0x0050   (0x0008)  
	float                                              PostCombatTrackDuration;                                    // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	TArray<FConditionalMusicTrack>                     ConditionalOverrides;                                       // 0x0060   (0x0010)  
};

/// Struct /Script/Indiana.MapFloorData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 MaxSize: 0x0048
struct FMapFloorData
{ 
	FLocString                                         FloorName;                                                  // 0x0000   (0x0008)  
	TWeakObjectPtr<class UTexture2D*>                  MapImage;                                                   // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0010   (0x0020)  MISSED
	FVector2D                                          MapMinBounds;                                               // 0x0030   (0x0008)  
	FVector2D                                          MapMaxBounds;                                               // 0x0038   (0x0008)  
	uint32_t                                           FloorLevel;                                                 // 0x0040   (0x0004)  
	float                                              GamepadMovementScalar;                                      // 0x0044   (0x0004)  
};

/// Class /Script/Indiana.MapInformation
/// Size: 0x0100 (256 bytes) (0x000038 - 0x000100) align 8 MaxSize: 0x0100
class UMapInformation : public UDataAsset
{ 
public:
	TWeakObjectPtr<class UWorld*>                      ParentMap;                                                  // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0040   (0x0020)  MISSED
	class UPresenceData*                               PresenceData;                                               // 0x0060   (0x0008)  
	class UTravelRegionData*                           RegionData;                                                 // 0x0068   (0x0008)  
	class UTravelMapLayoutData*                        TravelLayoutData;                                           // 0x0070   (0x0008)  
	class UMapBeaconData*                              MapDefaultBeacons;                                          // 0x0078   (0x0008)  
	class UMapTextData*                                MapTextData;                                                // 0x0080   (0x0008)  
	class UMapPointOfInterestData*                     MapPointsOfInterest;                                        // 0x0088   (0x0008)  
	bool                                               bIsShipMap;                                                 // 0x0090   (0x0001)  
	bool                                               bIsRegionMap;                                               // 0x0091   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0092   (0x0006)  MISSED
	class UMapInformation*                             ParentRegionMapInformation;                                 // 0x0098   (0x0008)  
	float                                              NorthOrientationOffset;                                     // 0x00A0   (0x0004)  
	FName                                              DefaultFloor;                                               // 0x00A4   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	TMap<FName, FMapFloorData>                         Floors;                                                     // 0x00B0   (0x0050)  
};

/// Class /Script/Indiana.MapLoadingMusicSettings
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UMapLoadingMusicSettings : public UDataAsset
{ 
public:
	class UMusicTrackData*                             DefaultTrack;                                               // 0x0038   (0x0008)  
	TArray<FConditionalMusicTrack>                     ConditionalOverrides;                                       // 0x0040   (0x0010)  
};

/// Struct /Script/Indiana.PointOfInterestLocation
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FPointOfInterestLocation
{ 
	FVector                                            WorldLocation;                                              // 0x0000   (0x000C)  
	FName                                              FloorName;                                                  // 0x000C   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class UPointOfInterestData*                        POIData;                                                    // 0x0018   (0x0008)  
};

/// Class /Script/Indiana.MapPointOfInterestData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UMapPointOfInterestData : public UDataAsset
{ 
public:
	TArray<FPointOfInterestLocation>                   PointsOfInterest;                                           // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.MapPointOfInterestWidget
/// Size: 0x0320 (800 bytes) (0x000308 - 0x000320) align 8 MaxSize: 0x0320
class UMapPointOfInterestWidget : public UInteractableMapEntry
{ 
public:
	class UImage*                                      IconImage;                                                  // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0310   (0x0010)  MISSED
};

/// Class /Script/Indiana.MapQuestSelectionEntryWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UMapQuestSelectionEntryWidget : public UIndianaUserWidget
{ 
public:
	class UButtonBase*                                 EntryButton;                                                // 0x0300   (0x0008)  
	class UScalableImage*                              ActiveQuestIcon;                                            // 0x0308   (0x0008)  
	class UScalableImage*                              InactiveQuestIcon;                                          // 0x0310   (0x0008)  
	class UTextBlockBase*                              EntryTextBlock;                                             // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0320   (0x0010)  MISSED
};

/// Class /Script/Indiana.MapRendererFilterData
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align 8 MaxSize: 0x0050
class UMapRendererFilterData : public UAssetUserData
{ 
public:
	FGameplayTagContainer                              FilterCategories;                                           // 0x0030   (0x0020)  
};

/// Class /Script/Indiana.MapRenderer
/// Size: 0x0398 (920 bytes) (0x0002B8 - 0x000398) align 8 MaxSize: 0x0398
class AMapRenderer : public AActor
{ 
public:
	FString                                            RenderName;                                                 // 0x02B8   (0x0010)  
	FName                                              FloorName;                                                  // 0x02C8   (0x0008)  
	float                                              RenderUnitsScale;                                           // 0x02D0   (0x0004)  
	FVector2D                                          OutputResolution;                                           // 0x02D4   (0x0008)  
	float                                              CameraDistance;                                             // 0x02DC   (0x0004)  
	float                                              CaptureTimeOfDay;                                           // 0x02E0   (0x0004)  
	bool                                               bDisableFog;                                                // 0x02E4   (0x0001)  
	bool                                               bDisableTonemapper;                                         // 0x02E5   (0x0001)  
	bool                                               bDisableSceneFringe;                                        // 0x02E6   (0x0001)  
	bool                                               bDisableParticles;                                          // 0x02E7   (0x0001)  
	bool                                               bDisableGrass;                                              // 0x02E8   (0x0001)  
	bool                                               bDisableExposure;                                           // 0x02E9   (0x0001)  
	bool                                               bFixedExposure;                                             // 0x02EA   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x02EB   (0x0001)  MISSED
	float                                              FixedExposureBrightness;                                    // 0x02EC   (0x0004)  
	SDK_UNDEFINED(16,594) /* TArray<TWeakObjectPtr<AActor*>> */ __um(ExternalIncludeBoxes);                        // 0x02F0   (0x0010)  
	SDK_UNDEFINED(16,595) /* TArray<TWeakObjectPtr<AActor*>> */ __um(ExternalExcludeBoxes);                        // 0x0300   (0x0010)  
	SDK_UNDEFINED(16,596) /* TArray<TWeakObjectPtr<AActor*>> */ __um(ExplicitHideActors);                          // 0x0310   (0x0010)  
	SDK_UNDEFINED(16,597) /* TArray<TSoftObjectPtr<UClass*>> */ __um(ExplicitHiddenActorClasses);                  // 0x0320   (0x0010)  
	FGameplayTagContainer                              FilteredAssets;                                             // 0x0330   (0x0020)  
	TArray<FString>                                    FilteredActorNames;                                         // 0x0350   (0x0010)  
	class UBoxComponent*                               CapturePlane;                                               // 0x0360   (0x0008)  
	class UCameraComponent*                            CaptureCamera;                                              // 0x0368   (0x0008)  
	class USceneComponent*                             IncludeBoxes;                                               // 0x0370   (0x0008)  
	class USceneComponent*                             ExcludeBoxes;                                               // 0x0378   (0x0008)  
	bool                                               bPerspectiveCamera;                                         // 0x0380   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0381   (0x0003)  MISSED
	float                                              PerspectiveCameraFoV;                                       // 0x0384   (0x0004)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0388   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.MapRenderer.TakeRender
	// void TakeRender();                                                                                                       // [0x18829f0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.MapTextEntryData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 4 MaxSize: 0x0020
struct FMapTextEntryData
{ 
	FLocString                                         DisplayText;                                                // 0x0000   (0x0008)  
	float                                              TextRotation;                                               // 0x0008   (0x0004)  
	FName                                              FloorName;                                                  // 0x000C   (0x0008)  
	FVector                                            Position;                                                   // 0x0014   (0x000C)  
};

/// Class /Script/Indiana.MapTextData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UMapTextData : public UDataAsset
{ 
public:
	TArray<FMapTextEntryData>                          MapTextEntries;                                             // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.MapTextEntry
/// Size: 0x0308 (776 bytes) (0x0002E8 - 0x000308) align 8 MaxSize: 0x0308
class AMapTextEntry : public ABasicMapFloorTrackedActor
{ 
public:
	FMapTextEntryData                                  TextEntryData;                                              // 0x02E8   (0x0020)  
};

/// Class /Script/Indiana.MapTextEntryWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class UMapTextEntryWidget : public UBaseMapEntryWidget
{ 
public:
	class UTextBlockBase*                              MinZoomText;                                                // 0x0300   (0x0008)  
	class UTextBlockBase*                              StartingZoomText;                                           // 0x0308   (0x0008)  
	class UTextBlockBase*                              MaxZoomText;                                                // 0x0310   (0x0008)  
	float                                              MinZoomThreshold;                                           // 0x0318   (0x0004)  
	float                                              StartingZoomThreshold;                                      // 0x031C   (0x0004)  
};

/// Class /Script/Indiana.MapTransitionNotification
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UMapTransitionNotification : public UIndianaUserWidget
{ 
public:
	class UOverlay*                                    MainOverlay;                                                // 0x0300   (0x0008)  
	class UTextBlockBase*                              AreaNameTextBlock;                                          // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0310   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.MapTransitionNotification.StartAnimation
	// void StartAnimation();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MapTransitionNotification.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18828d0] Final|Native|Protected 
	// Function /Script/Indiana.MapTransitionNotification.OnAreaNameModeChanged
	// void OnAreaNameModeChanged(int32_t ModeIn);                                                                              // [0x1882840] Final|Native|Protected 
};

/// Struct /Script/Indiana.MaterialParamMod
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 MaxSize: 0x0060
struct FMaterialParamMod
{ 
	FName                                              MaterialSlotName;                                           // 0x0000   (0x0008)  
	FName                                              ParamName;                                                  // 0x0008   (0x0008)  
	EMaterialParamType                                 Type;                                                       // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              ScalarParam;                                                // 0x0014   (0x0004)  
	FLinearColor                                       VectorParam;                                                // 0x0018   (0x0010)  
	TWeakObjectPtr<class UTexture*>                    TextureParam;                                               // 0x0028   (0x0008)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x0030   (0x0030)  MISSED
};

/// Class /Script/Indiana.MaterialParamModVisual
/// Size: 0x00D0 (208 bytes) (0x000068 - 0x0000D0) align 8 MaxSize: 0x00D0
class UMaterialParamModVisual : public UModVisual
{ 
public:
	TArray<FMaterialParamMod>                          ParamMods;                                                  // 0x0068   (0x0010)  
	bool                                               bApplyToBase;                                               // 0x0078   (0x0001)  
	bool                                               bApplyToChildren;                                           // 0x0079   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x007A   (0x0002)  MISSED
	FName                                              MaterialSlotName;                                           // 0x007C   (0x0008)  
	FName                                              ParamName;                                                  // 0x0084   (0x0008)  
	EMaterialParamType                                 Type;                                                       // 0x008C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	float                                              ScalarParam;                                                // 0x0090   (0x0004)  
	FLinearColor                                       VectorParam;                                                // 0x0094   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	TWeakObjectPtr<class UTexture*>                    TextureParam;                                               // 0x00A8   (0x0008)  
	unsigned char                                      UnknownData03_7[0x20];                                      // 0x00B0   (0x0020)  MISSED
};

/// Class /Script/Indiana.MedKitAbilityWidget
/// Size: 0x03E0 (992 bytes) (0x000370 - 0x0003E0) align 8 MaxSize: 0x03E0
class UMedKitAbilityWidget : public UAbilityOverviewChildWidget
{ 
public:
	float                                              MedkitHoldRatioThreshold;                                   // 0x0370   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0374   (0x0004)  MISSED
	class UMedKitDrugSlotWidget*                       DrugSlotOne;                                                // 0x0378   (0x0008)  
	class UMedKitDrugSlotWidget*                       DrugSlotTwo;                                                // 0x0380   (0x0008)  
	class UMedKitDrugSlotWidget*                       DrugSlotThree;                                              // 0x0388   (0x0008)  
	class UMedKitDrugSlotWidget*                       DrugSlotFour;                                               // 0x0390   (0x0008)  
	class UHorizontalBox*                              DrugSlotContainer;                                          // 0x0398   (0x0008)  
	unsigned char                                      UnknownData01_7[0x40];                                      // 0x03A0   (0x0040)  MISSED


	/// Functions
	// Function /Script/Indiana.MedKitAbilityWidget.UpdateDrugSlots
	// void UpdateDrugSlots(int32_t ConsumablesUsed);                                                                           // [0x1882a10] Final|Native|Protected 
};

/// Class /Script/Indiana.MedKitComponent
/// Size: 0x0168 (360 bytes) (0x0000E0 - 0x000168) align 8 MaxSize: 0x0168
class UMedKitComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x38];                                      // 0x00E0   (0x0038)  MISSED
	FLocString                                         DisplayName;                                                // 0x0118   (0x0008)  
	class UTexture2D*                                  AbilityIcon;                                                // 0x0120   (0x0008)  
	class UAkAudioEvent*                               TriggerSound;                                               // 0x0128   (0x0008)  
	class UAnimMontage*                                AbilityMontage;                                             // 0x0130   (0x0008)  
	float                                              PercentToHealCompanions;                                    // 0x0138   (0x0004)  
	unsigned char                                      UnknownData01_7[0x2C];                                      // 0x013C   (0x002C)  MISSED


	/// Functions
	// Function /Script/Indiana.MedKitComponent.StartMedkit
	// void StartMedkit(class UWeapon* Weapon);                                                                                 // [0x1882960] Final|Native|Protected 
	// Function /Script/Indiana.MedKitComponent.OnAnimNotifyEvent
	// void OnAnimNotifyEvent(EAnimNotify AnimNotifyEvent);                                                                     // [0x18827c0] Final|Native|Protected 
	// Function /Script/Indiana.MedKitComponent.OnAbilityMontageEnded
	// void OnAbilityMontageEnded(class UAnimMontage* Montage, bool bInterrupted);                                              // [0x18826f0] Final|Native|Protected 
};

/// Class /Script/Indiana.MedKitDrugSlotWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UMedKitDrugSlotWidget : public UIndianaUserWidget
{ 
public:
	class UImage*                                      DrugSlotImage;                                              // 0x0300   (0x0008)  
	class UTexture2D*                                  SlotIsFilled;                                               // 0x0308   (0x0008)  
	class UTexture2D*                                  SlotIsEmpty;                                                // 0x0310   (0x0008)  
};

/// Struct /Script/Indiana.MeleeAnimEvent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FMeleeAnimEvent
{ 
	class UAnimMontage*                                Anim;                                                       // 0x0000   (0x0008)  
	float                                              Duration;                                                   // 0x0008   (0x0004)  
	bool                                               bLoop;                                                      // 0x000C   (0x0001)  
	bool                                               bSkipIfHaveQueuedAction;                                    // 0x000D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000E   (0x0002)  MISSED
};

/// Class /Script/Indiana.MeleeAnimEventEffect
/// Size: 0x0110 (272 bytes) (0x000030 - 0x000110) align 16 MaxSize: 0x0110
class UMeleeAnimEventEffect : public UEventEffect
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0030   (0x0008)  MISSED
	TMap<EMeleeAction, FMeleeAnimEvent>                PreAnims;                                                   // 0x0038   (0x0050)  
	TArray<FMeleeAnimEvent>                            Anims;                                                      // 0x0088   (0x0010)  
	FRotator                                           FxRotation;                                                 // 0x0098   (0x000C)  
	EMeshTarget                                        TargetMesh;                                                 // 0x00A4   (0x0001)  
	EMeleeAction                                       MeleeAction;                                                // 0x00A5   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x00A6   (0x0002)  MISSED
	float                                              CustomInterruptBlendOutTime;                                // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData02_7[0x64];                                      // 0x00AC   (0x0064)  MISSED
};

/// Class /Script/Indiana.MeleeBlockBehaviorStateInfo
/// Size: 0x0120 (288 bytes) (0x000120 - 0x000120) align 8 MaxSize: 0x0120
class UMeleeBlockBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.MeleeBlockRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UMeleeBlockRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.MeleeActionCollisionInfo
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align 16 MaxSize: 0x0080
class UMeleeActionCollisionInfo : public UObject
{ 
public:
	FName                                              CollisionSocket;                                            // 0x0030   (0x0008)  
	class UShapeComponent*                             CollisionShape;                                             // 0x0038   (0x0008)  
	FTransformedShape                                  CollisionShapeInfo;                                         // 0x0040   (0x0040)  
};

/// Struct /Script/Indiana.ShapeInterface
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 MaxSize: 0x0008
struct FShapeInterface
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Indiana.BoxShapeData
/// Size: 0x0018 (24 bytes) (0x000008 - 0x000018) align 8 MaxSize: 0x0018
struct FBoxShapeData : FShapeInterface
{ 
	FVector                                            BoxExtent;                                                  // 0x0008   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Indiana.SphereShapeData
/// Size: 0x0010 (16 bytes) (0x000008 - 0x000010) align 8 MaxSize: 0x0010
struct FSphereShapeData : FShapeInterface
{ 
	float                                              SphereRadius;                                               // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.CapsuleShapeData
/// Size: 0x0010 (16 bytes) (0x000008 - 0x000010) align 8 MaxSize: 0x0010
struct FCapsuleShapeData : FShapeInterface
{ 
	float                                              CapsuleHalfHeight;                                          // 0x0008   (0x0004)  
	float                                              CapsuleRadius;                                              // 0x000C   (0x0004)  
};

/// Struct /Script/Indiana.ShapeVariant
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FShapeVariant
{ 
	EShapeType                                         ShapeType;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FBoxShapeData                                      BoxData;                                                    // 0x0008   (0x0018)  
	FSphereShapeData                                   SphereData;                                                 // 0x0020   (0x0010)  
	FCapsuleShapeData                                  CapsuleData;                                                // 0x0030   (0x0010)  
};

/// Struct /Script/Indiana.TransformedShapeVariant
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 16 MaxSize: 0x0070
struct FTransformedShapeVariant
{ 
	FTransform                                         ShapeTransform;                                             // 0x0000   (0x0030)  
	FShapeVariant                                      Shape;                                                      // 0x0030   (0x0040)  
};

/// Struct /Script/Indiana.MeleeCollisionInfo
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 16 MaxSize: 0x0080
struct FMeleeCollisionInfo
{ 
	bool                                               bWeaponMesh;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              CollisionSocket;                                            // 0x0004   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FTransformedShapeVariant                           CollisionShapeInfo;                                         // 0x0010   (0x0070)  
};

/// Class /Script/Indiana.MeleeMode
/// Size: 0x04D0 (1232 bytes) (0x000130 - 0x0004D0) align 16 MaxSize: 0x04C8
class UMeleeMode : public UWeaponMode
{ 
public:
	float                                              AnimationSpeed;                                             // 0x0130   (0x0004)  
	float                                              ApproximateSwingTime;                                       // 0x0134   (0x0004)  
	class UMeleeActionCollisionInfo*                   DefaultCollision;                                           // 0x0138   (0x0008)  
	TMap<EMeleeAction, class UMeleeActionCollisionInfo*> CollisionOverrides;                                       // 0x0140   (0x0050)  
	FMeleeCollisionInfo                                DefaultMeleeCollision;                                      // 0x0190   (0x0080)  
	FMeleeCollisionInfo                                FartherReachMeleeCollision;                                 // 0x0210   (0x0080)  
	TMap<EMeleeAction, FMeleeCollisionInfo>            MeleeCollisionOverrides;                                    // 0x0290   (0x0050)  
	TMap<FGameplayTag, FMeleeCollisionInfo>            MeleeCollisionGameplaytagOverrides;                         // 0x02E0   (0x0050)  
	class UImpactDataSet*                              ImpactDataSet;                                              // 0x0330   (0x0008)  
	EHitReactType                                      DefaultHitReactionType;                                     // 0x0338   (0x0001)  
	EHitReactType                                      SweepHitReactionType;                                       // 0x0339   (0x0001)  
	EHitReactType                                      PowerHitReactionType;                                       // 0x033A   (0x0001)  
	EHitReactType                                      SpecialAttackHitReactionType;                               // 0x033B   (0x0001)  
	FDamageMultipliers                                 DamageMultipliers;                                          // 0x033C   (0x0010)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x034C   (0x0004)  MISSED
	class UMeleeSequencer*                             MeleeSequencer;                                             // 0x0350   (0x0008)  
	TMap<EMeleeAction, float>                          MeleeActionDurations;                                       // 0x0358   (0x0050)  
	float                                              MaxImpactDistance;                                          // 0x03A8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x03AC   (0x0004)  MISSED
	TMap<EMeleeAction, float>                          NPCMeleeActionDamageMultipliers;                            // 0x03B0   (0x0050)  
	int32_t                                            MaxChainSwings;                                             // 0x0400   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0404   (0x0004)  MISSED
	class UClass*                                      CritSpell;                                                  // 0x0408   (0x0008)  
	class URpgStat*                                    PowerAttackWindUpStat;                                      // 0x0410   (0x0008)  
	bool                                               bAllowSurfaceImpacts;                                       // 0x0418   (0x0001)  
	unsigned char                                      UnknownData03_7[0xAF];                                      // 0x0419   (0x00AF)  MISSED


	/// Functions
	// Function /Script/Indiana.MeleeMode.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x1887db0] Final|Native|Protected 
};

/// Struct /Script/Indiana.DamageTypeRequirement
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FDamageTypeRequirement
{ 
	int32_t                                            MinSkill;                                                   // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UClass*                                      DamageType;                                                 // 0x0008   (0x0008)  
};

/// Class /Script/Indiana.MeleeMultiDamageTypeMode
/// Size: 0x0500 (1280 bytes) (0x0004C8 - 0x000500) align 16 MaxSize: 0x0500
class UMeleeMultiDamageTypeMode : public UMeleeMode
{ 
public:
	ESkill                                             Skill;                                                      // 0x04C8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x04C9   (0x0007)  MISSED
	TArray<FDamageTypeRequirement>                     DamageTypes;                                                // 0x04D0   (0x0010)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x04E0   (0x0020)  MISSED
};

/// Class /Script/Indiana.MeleeSequencer
/// Size: 0x0090 (144 bytes) (0x000030 - 0x000090) align 8 MaxSize: 0x0090
class UMeleeSequencer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x60];                                      // 0x0030   (0x0060)  MISSED


	/// Functions
	// Function /Script/Indiana.MeleeSequencer.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x1887e40] Final|Native|Protected 
	// Function /Script/Indiana.MeleeSequencer.OnAbilityUnlocked
	// void OnAbilityUnlocked(EUnlockAbility Ability);                                                                          // [0x1887a90] Final|Native|Protected 
};

/// Class /Script/Indiana.MeleeSlotBehaviorStateInfo
/// Size: 0x0148 (328 bytes) (0x000120 - 0x000148) align 8 MaxSize: 0x0148
class UMeleeSlotBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0120   (0x0028)  MISSED
};

/// Class /Script/Indiana.MeleeSlotBaseRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UMeleeSlotBaseRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.MeleeSlotRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class UMeleeSlotRequestData : public UMeleeSlotBaseRequestData
{ 
public:
	EMeleeAction                                       MeleeAction;                                                // 0x0068   (0x0001)  
	bool                                               bAllowOvershoot;                                            // 0x0069   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x006A   (0x0002)  MISSED
	float                                              OvershootCheckTime;                                         // 0x006C   (0x0004)  
};

/// Class /Script/Indiana.MeleeSlotPatternRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class UMeleeSlotPatternRequestData : public UMeleeSlotBaseRequestData
{ 
public:
	int32_t                                            AttackPatternIndex;                                         // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Indiana.MeleeSlotManagerComponent
/// Size: 0x0150 (336 bytes) (0x0000E0 - 0x000150) align 8 MaxSize: 0x0150
class UMeleeSlotManagerComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x70];                                      // 0x00E0   (0x0070)  MISSED


	/// Functions
	// Function /Script/Indiana.MeleeSlotManagerComponent.OnAttackerNumMeleeSlotsRequiredChanged
	// void OnAttackerNumMeleeSlotsRequiredChanged(class AIndianaAiController* AttackerController);                             // [0x1887b10] Final|Native|Public  
};

/// Class /Script/Indiana.MeleeStatusEffect
/// Size: 0x0188 (392 bytes) (0x000188 - 0x000188) align 8 MaxSize: 0x0188
class UMeleeStatusEffect : public UStatusEffect
{ 
public:
};

/// Class /Script/Indiana.WeaponVisuals
/// Size: 0x0200 (512 bytes) (0x000030 - 0x000200) align 8 MaxSize: 0x0200
class UWeaponVisuals : public UObject
{ 
public:
	TMap<EWeaponEvent, class UEventEffect*>            WeaponEvents;                                               // 0x0030   (0x0050)  
	TMap<EWeaponState, class UEventEffect*>            WeaponStates;                                               // 0x0080   (0x0050)  
	TMap<FName, class UEventEffect*>                   WeaponCustomEvents;                                         // 0x00D0   (0x0050)  
	TMap<FName, class UEventEffect*>                   WeaponCustomStates;                                         // 0x0120   (0x0050)  
	TWeakObjectPtr<class AActor*>                      Target;                                                     // 0x0170   (0x0008)  
	TWeakObjectPtr<class UWeapon*>                     Weapon;                                                     // 0x0178   (0x0008)  
	class USkeletalMeshComponent*                      WeaponMesh;                                                 // 0x0180   (0x0008)  
	class USkeletalMeshComponent*                      CharacterMesh;                                              // 0x0188   (0x0008)  
	class UWeaponVisuals*                              NextVisual;                                                 // 0x0190   (0x0008)  
	unsigned char                                      UnknownData00_6[0x40];                                      // 0x0198   (0x0040)  MISSED
	FEventEffectState                                  EventEffectState;                                           // 0x01D8   (0x0020)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x01F8   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.WeaponVisuals.UninitializeBP
	// void UninitializeBP();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.TriggerEventBP
	// void TriggerEventBP(EWeaponEvent WeaponEvent, FEventEffectParams& Params);                                               // [0x1c5deb0] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.TriggerDamageTypeMuzzleFx
	// void TriggerDamageTypeMuzzleFx();                                                                                        // [0x18e9a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.TriggerCustomEventBP
	// void TriggerCustomEventBP(FName EventName, FEventEffectParams& Params);                                                  // [0x1c5deb0] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.TriggerCustomEvent
	// void TriggerCustomEvent(FName EventName);                                                                                // [0x18e99b0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.TickBP
	// void TickBP(float DeltaTime);                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.StopCustomEventBP
	// void StopCustomEventBP(FName EventName);                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.StopCustomEvent
	// void StopCustomEvent(FName EventName);                                                                                   // [0x18e9920] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.LeaveStateBP
	// void LeaveStateBP(EWeaponState WeaponState);                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.LeaveCustomStateBP
	// void LeaveCustomStateBP(FName EventName);                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.LeaveCustomState
	// void LeaveCustomState(FName StateName);                                                                                  // [0x18e9870] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.InterruptEventBP
	// void InterruptEventBP(EWeaponEvent WeaponEvent);                                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.InitializeBP
	// void InitializeBP(class AActor* NewTarget, class UWeapon* NewWeapon);                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.EnterStateBP
	// void EnterStateBP(EWeaponState WeaponState, FEventEffectParams& Params);                                                 // [0x1c5deb0] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.EnterCustomStateBP
	// void EnterCustomStateBP(FName EventName, FEventEffectParams& Params);                                                    // [0x1c5deb0] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.EnterCustomState
	// void EnterCustomState(FName StateName);                                                                                  // [0x18e9510] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.CreateLerpTimer
	// void CreateLerpTimer(FLerpTimer& TimerProperties);                                                                       // [0x18e9460] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.ClearLerpTimers
	// void ClearLerpTimers();                                                                                                  // [0x18e9440] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.PrimaryWeaponVisuals
/// Size: 0x0248 (584 bytes) (0x000200 - 0x000248) align 8 MaxSize: 0x0248
class UPrimaryWeaponVisuals : public UWeaponVisuals
{ 
public:
	class UReticleVisualsDataAsset*                    ReticleVisuals;                                             // 0x0200   (0x0008)  
	FName                                              OverrideAttachSocket;                                       // 0x0208   (0x0008)  
	FVector                                            WeaponFineAimOffset;                                        // 0x0210   (0x000C)  
	FVector                                            WeaponNormalAimOffset;                                      // 0x021C   (0x000C)  
	FVector                                            WeaponFineAimCenterOffset;                                  // 0x0228   (0x000C)  
	FVector                                            WeaponNormalAimCenterOffset;                                // 0x0234   (0x000C)  
	TWeakObjectPtr<class UCharacterAnimInstance*>      CharacterAnimInstance;                                      // 0x0240   (0x0008)  
};

/// Class /Script/Indiana.MeleeVisuals
/// Size: 0x0258 (600 bytes) (0x000248 - 0x000258) align 8 MaxSize: 0x0258
class UMeleeVisuals : public UPrimaryWeaponVisuals
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0248   (0x0010)  MISSED
};

/// Class /Script/Indiana.MeshModVisual
/// Size: 0x00C0 (192 bytes) (0x000068 - 0x0000C0) align 8 MaxSize: 0x00C0
class UMeshModVisual : public UModVisual
{ 
public:
	SDK_UNDEFINED(80,598) /* TMap<FName, TWeakObjectPtr<UMaterialInterface*>> */ __um(MaterialOverrides);          // 0x0068   (0x0050)  
	class UMeshComponent*                              AddedComponent;                                             // 0x00B8   (0x0008)  
};

/// Class /Script/Indiana.MetaTeamData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UMetaTeamData : public UBaseTeamData
{ 
public:
};

/// Class /Script/Indiana.MFTSelectionEntryWidget
/// Size: 0x0310 (784 bytes) (0x000300 - 0x000310) align 8 MaxSize: 0x0310
class UMFTSelectionEntryWidget : public UIndianaUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0300   (0x0008)  
	class UTextBlockBase*                              FastTravelTextBlock;                                        // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.MFTSelectionWidget
/// Size: 0x0340 (832 bytes) (0x000308 - 0x000340) align 8 MaxSize: 0x0340
class UMFTSelectionWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0308   (0x0018)  MISSED
	class UTextBlockBase*                              HeaderTextblock;                                            // 0x0320   (0x0008)  
	class UVerticalBox*                                EntryList;                                                  // 0x0328   (0x0008)  
	class UMFTSelectionEntryWidget*                    CancelEntry;                                                // 0x0330   (0x0008)  
	class UClass*                                      EntryClass;                                                 // 0x0338   (0x0008)  
};

/// Class /Script/Indiana.MicroMod
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UMicroMod : public UObject
{ 
public:
	TArray<FStatModifierDescription>                   RpgStatMods;                                                // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.MicroModTable
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UMicroModTable : public UDataAsset
{ 
public:
	TMap<class UClass*, uint32_t>                      MicoModToWeightMap;                                         // 0x0038   (0x0050)  
};

/// Struct /Script/Indiana.ModAppearance
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align 8 MaxSize: 0x0048
struct FModAppearance : FAppearanceMatch
{ 
	class UModVisual*                                  ModVisual;                                                  // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.ModAppearances
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UModAppearances : public UObject
{ 
public:
	TArray<FModAppearance>                             ModAppearances;                                             // 0x0030   (0x0010)  
};

/// Struct /Script/Indiana.AppliedMod
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FAppliedMod
{ 
	TWeakObjectPtr<class UModVisual*>                  Mod;                                                        // 0x0000   (0x0008)  
	bool                                               bPermanentlyApplied;                                        // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Class /Script/Indiana.AppliedModVisualData
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UAppliedModVisualData : public UAssetUserData
{ 
public:
	TArray<FAppliedMod>                                AppliedModData;                                             // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.ModVisuals
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align 8 MaxSize: 0x0078
class UModVisuals : public UModVisual
{ 
public:
	TArray<class UModVisual*>                          Visuals;                                                    // 0x0068   (0x0010)  
};

/// Class /Script/Indiana.MoveToBehaviorStateInfo
/// Size: 0x0180 (384 bytes) (0x000178 - 0x000180) align 8 MaxSize: 0x0180
class UMoveToBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0178   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.MoveToBehaviorStateInfo.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x1887ed0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.MoveToRequestData
/// Size: 0x0090 (144 bytes) (0x000080 - 0x000090) align 8 MaxSize: 0x0090
class UMoveToRequestData : public UDecisionTreeEQSRequestData
{ 
public:
	bool                                               bWaitAfterArrival;                                          // 0x0080   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	float                                              MinWaitTime;                                                // 0x0084   (0x0004)  
	float                                              MaxWaitTime;                                                // 0x0088   (0x0004)  
	bool                                               bFaceTargetWhileWaiting;                                    // 0x008C   (0x0001)  
	bool                                               bCompleteOnDamageTaken;                                     // 0x008D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x008E   (0x0002)  MISSED
};

/// Class /Script/Indiana.MoviePlayerWidget
/// Size: 0x0370 (880 bytes) (0x000308 - 0x000370) align 8 MaxSize: 0x0370
class UMoviePlayerWidget : public UIndianaInterfaceUserWidget
{ 
public:
	SDK_UNDEFINED(16,599) /* FMulticastInlineDelegate */ __um(OnMovieEnd);                                         // 0x0308   (0x0010)  
	class UImage*                                      MovieDisplay;                                               // 0x0318   (0x0008)  
	class UBackgroundBlur*                             SkipContainer;                                              // 0x0320   (0x0008)  
	class UOverlay*                                    MovieOverlay;                                               // 0x0328   (0x0008)  
	class UMediaTexture*                               MediaTexture;                                               // 0x0330   (0x0008)  
	class USubtitleManagerWidget*                      SubtitleManager;                                            // 0x0338   (0x0008)  
	class UInputLabelWidget*                           HoldInputLabel;                                             // 0x0340   (0x0008)  
	class UButtonBase*                                 InvisibleButton;                                            // 0x0348   (0x0008)  
	class UMediaSoundComponent*                        MediaSoundComponent;                                        // 0x0350   (0x0008)  
	float                                              MaxTimeBetweenInputs;                                       // 0x0358   (0x0004)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x035C   (0x0014)  MISSED


	/// Functions
	// Function /Script/Indiana.MoviePlayerWidget.StopMovie
	// void StopMovie(bool bWasSkipped);                                                                                        // [0x18880a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.MoviePlayerWidget.PlayMovie
	// void PlayMovie(class UFileMediaSource* Movie);                                                                           // [0x1887f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.MoviePlayerWidget.PauseMovie
	// void PauseMovie();                                                                                                       // [0x1887f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.MoviePlayerWidget.OnMovieFinished
	// void OnMovieFinished();                                                                                                  // [0x1887c50] Final|Native|Protected 
	// Function /Script/Indiana.MoviePlayerWidget.OnAttemptCancel
	// void OnAttemptCancel();                                                                                                  // [0x1887ba0] Final|Native|Public  
	// Function /Script/Indiana.MoviePlayerWidget.InitiateFadeOut
	// void InitiateFadeOut();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MoviePlayerWidget.InitiateFadeIn
	// void InitiateFadeIn();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.MovieSubtitleData
/// Size: 0x00D8 (216 bytes) (0x000038 - 0x0000D8) align 8 MaxSize: 0x00D8
class UMovieSubtitleData : public UDataAsset
{ 
public:
	SDK_UNDEFINED(80,600) /* TMap<TWeakObjectPtr<UFileMediaSource*>, class USubtitleData*> */ __um(SubtitleData);  // 0x0038   (0x0050)  
	TMap<FString, class USubtitleData*>                SubtitleDataByName;                                         // 0x0088   (0x0050)  
};

/// Class /Script/Indiana.MultiQuestMapTracker
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class UMultiQuestMapTracker : public UIndianaUserWidget
{ 
public:
	class UClass*                                      QuestEntryClass;                                            // 0x0300   (0x0008)  
	class UBorder*                                     MainBorder;                                                 // 0x0308   (0x0008)  
	class UVerticalBox*                                ActiveQuestVBox;                                            // 0x0310   (0x0008)  
	class UTextBlockBase*                              ActiveQuestEntry;                                           // 0x0318   (0x0008)  
	class UVerticalBox*                                InactiveQuestVBox;                                          // 0x0320   (0x0008)  
	class UVerticalBox*                                InactiveQuestEntryVBox;                                     // 0x0328   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0330   (0x0010)  MISSED
};

/// Class /Script/Indiana.StatusEffectChildData
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UStatusEffectChildData : public UObject
{ 
public:
	class UStatusEffect*                               StatusEffect;                                               // 0x0030   (0x0008)  
};

/// Class /Script/Indiana.MultiStatusEffect
/// Size: 0x01B8 (440 bytes) (0x000188 - 0x0001B8) align 8 MaxSize: 0x01B8
class UMultiStatusEffect : public UStatusEffect
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0188   (0x0010)  MISSED
	TArray<class UStatusEffectChildData*>              ChildEffectsData;                                           // 0x0198   (0x0010)  
	TArray<class UStatusEffect*>                       ChildStatusEffects;                                         // 0x01A8   (0x0010)  


	/// Functions
	// Function /Script/Indiana.MultiStatusEffect.OnChildCleared
	// void OnChildCleared(class UStatusEffect* ChildEffect);                                                                   // [0x1887bc0] Final|Native|Private 
};

/// Class /Script/Indiana.MusicTrackData
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UMusicTrackData : public UDataAsset
{ 
public:
	FName                                              WwiseStateName;                                             // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.MusicManager
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align 8 MaxSize: 0x0068
class UMusicManager : public UObject
{ 
public:
	class UMusicTrackData*                             ScriptedOverrideTrack;                                      // 0x0030   (0x0008)  
	class UMusicTrackData*                             CurrentTrack;                                               // 0x0038   (0x0008)  
	class UMapGameplayMusicSettings*                   CurrentMapGameplayMusicSettings;                            // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0048   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.MusicManager.SetMusicOverride_BP
	// void SetMusicOverride_BP(class UMusicTrackData* OverrideTrack);                                                          // [0x1888020] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.MusicManager.OnPreMapLoad
	// void OnPreMapLoad(FString MapName);                                                                                      // [0x1887d00] Final|Native|Protected 
	// Function /Script/Indiana.MusicManager.OnPostMapLoad
	// void OnPostMapLoad(class UWorld* World);                                                                                 // [0x1887c70] Final|Native|Protected 
};

/// Class /Script/Indiana.NavArea_Crouch
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Crouch : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavArea_Door
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Door : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavArea_Elevator
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Elevator : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavArea_Hazard
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Hazard : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavArea_Hearing
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Hearing : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavArea_Jump
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Jump : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavArea_Ladder
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Ladder : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavArea_Mine
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Mine : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavArea_Trap
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Trap : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavArea_Walk
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavArea_Walk : public UNavArea
{ 
public:
};

/// Class /Script/Indiana.NavFilter_AIControllerBehavior
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavFilter_AIControllerBehavior : public UNavigationQueryFilter
{ 
public:
};

/// Class /Script/Indiana.NavFilter_AIControllerDefaultEQS
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNavFilter_AIControllerDefaultEQS : public UNavigationQueryFilter
{ 
public:
};

/// Class /Script/Indiana.NavigationGroupWidget
/// Size: 0x0380 (896 bytes) (0x000300 - 0x000380) align 8 MaxSize: 0x0380
class UNavigationGroupWidget : public UIndianaUserWidget
{ 
public:
	class UHorizontalBox*                              EntryContainer;                                             // 0x0300   (0x0008)  
	class UInputWidget*                                PreviousInputWidget;                                        // 0x0308   (0x0008)  
	class UInputWidget*                                NextInputWidget;                                            // 0x0310   (0x0008)  
	class USizeBox*                                    ContainerSizeBox;                                           // 0x0318   (0x0008)  
	class UScrollBox*                                  ContainerScrollBox;                                         // 0x0320   (0x0008)  
	class UButtonBase*                                 LeftArrowButton;                                            // 0x0328   (0x0008)  
	class UButtonBase*                                 RightArrowButton;                                           // 0x0330   (0x0008)  
	class UButtonGroup*                                ButtonGroup;                                                // 0x0338   (0x0008)  
	class UClass*                                      EntryClass;                                                 // 0x0340   (0x0008)  
	TArray<FLocString>                                 Entries;                                                    // 0x0348   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0358   (0x0010)  MISSED
	FName                                              PreviousActionName;                                         // 0x0368   (0x0008)  
	FName                                              NextActionName;                                             // 0x0370   (0x0008)  
	bool                                               bAllowLooping;                                              // 0x0378   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0379   (0x0007)  MISSED
};

/// Class /Script/Indiana.NewSaveWidget
/// Size: 0x0288 (648 bytes) (0x000278 - 0x000288) align 8 MaxSize: 0x0288
class UNewSaveWidget : public UUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0278   (0x0008)  
	class UTextBlockBase*                              NewSaveText;                                                // 0x0280   (0x0008)  
};

/// Class /Script/Indiana.NiagaraOptimizationComponent
/// Size: 0x0108 (264 bytes) (0x0000E0 - 0x000108) align 8 MaxSize: 0x0108
class UNiagaraOptimizationComponent : public UActorComponent
{ 
public:
	TArray<class UNiagaraComponent*>                   OptimizedComponents;                                        // 0x00E0   (0x0010)  
	float                                              RenderCheckDelay;                                           // 0x00F0   (0x0004)  
	FName                                              OptimizationTag;                                            // 0x00F4   (0x0008)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x00FC   (0x000C)  MISSED
};

/// Class /Script/Indiana.NotificationHelpers
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UNotificationHelpers : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/Indiana.NPCNavigationQueryFilter_EQS
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UNPCNavigationQueryFilter_EQS : public UNavigationQueryFilter
{ 
public:
};

/// Class /Script/Indiana.NPCNavigationQueryFilter_Pathing
/// Size: 0x0058 (88 bytes) (0x000050 - 0x000058) align 8 MaxSize: 0x0058
class UNPCNavigationQueryFilter_Pathing : public UNavigationQueryFilter
{ 
public:
	bool                                               bBehaviorFilter;                                            // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Class /Script/Indiana.ObjectiveListWidget
/// Size: 0x0328 (808 bytes) (0x000300 - 0x000328) align 8 MaxSize: 0x0328
class UObjectiveListWidget : public UIndianaUserWidget
{ 
public:
	class UScrollBox*                                  ObjectiveList;                                              // 0x0300   (0x0008)  
	class UClass*                                      ObjectiveListEntry;                                         // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0310   (0x0018)  MISSED
};

/// Class /Script/Indiana.ObjectiveWaypointGameDataReference
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UObjectiveWaypointGameDataReference : public UGameDataReference
{ 
public:


	/// Functions
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetOverridesPreviousWaypoint
	// bool GetOverridesPreviousWaypoint();                                                                                     // [0x188b2f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetGameObject
	// FGuid GetGameObject();                                                                                                   // [0x188b2b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetDisplayOverrideWithGender
	// FString GetDisplayOverrideWithGender(EGender CharacterGender);                                                           // [0x188b1f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetDisplayOverrideID
	// int32_t GetDisplayOverrideID();                                                                                          // [0x188b1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetDisplayOverride
	// FString GetDisplayOverride();                                                                                            // [0x188b180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ObsidianIDComponent
/// Size: 0x00F8 (248 bytes) (0x0000E0 - 0x0000F8) align 8 MaxSize: 0x00F8
class UObsidianIDComponent : public UActorComponent
{ 
public:
	ESpecialObsidianID                                 SpecialID;                                                  // 0x00E0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00E1   (0x0003)  MISSED
	FGuid                                              ID;                                                         // 0x00E4   (0x0010)  
	bool                                               bInstancesShareSavedState;                                  // 0x00F4   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x00F5   (0x0003)  MISSED
};

/// Class /Script/Indiana.OCLAudioComponent
/// Size: 0x01A0 (416 bytes) (0x000150 - 0x0001A0) align 8 MaxSize: 0x01A0
class UOCLAudioComponent : public UInteractableAudioComponent
{ 
public:
	TMap<EOCLEventType, class UAkPlaySoundEventEffect*> AudioEvents;                                               // 0x0150   (0x0050)  


	/// Functions
	// Function /Script/Indiana.OCLAudioComponent.Stop
	// void Stop(EOCLEventType Type);                                                                                           // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLAudioComponent.Play
	// void Play(EOCLEventType Type);                                                                                           // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.OCLComponent
/// Size: 0x02C0 (704 bytes) (0x0000E0 - 0x0002C0) align 8 MaxSize: 0x02C0
class UOCLComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x00E0   (0x0010)  MISSED
	EOCLState                                          InitialState;                                               // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00F1   (0x0007)  MISSED
	class UClass*                                      KeyItem;                                                    // 0x00F8   (0x0008)  
	bool                                               RemoveKeyAfterUse;                                          // 0x0100   (0x0001)  
	bool                                               bCanLockpick;                                               // 0x0101   (0x0001)  
	bool                                               bForceLockpickLevel;                                        // 0x0102   (0x0001)  
	EOCLDifficulty                                     LockpickDifficulty;                                         // 0x0103   (0x0001)  
	int32_t                                            ForcedLockpickLevel;                                        // 0x0104   (0x0004)  
	class UClass*                                      LockpickItem;                                               // 0x0108   (0x0008)  
	float                                              AutoCloseDelay;                                             // 0x0110   (0x0004)  
	float                                              AutoCloseDelayNPC;                                          // 0x0114   (0x0004)  
	float                                              AutoCloseRadius;                                            // 0x0118   (0x0004)  
	bool                                               bIgnoreForCrime;                                            // 0x011C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x011D   (0x0003)  MISSED
	SDK_UNDEFINED(16,601) /* FMulticastInlineDelegate */ __um(OnOCLStateChange);                                   // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,602) /* FMulticastInlineDelegate */ __um(OnOCLOpenStart);                                     // 0x0130   (0x0010)  
	SDK_UNDEFINED(16,603) /* FMulticastInlineDelegate */ __um(OnOCLOpenEnd);                                       // 0x0140   (0x0010)  
	SDK_UNDEFINED(16,604) /* FMulticastInlineDelegate */ __um(OnOCLCloseStart);                                    // 0x0150   (0x0010)  
	SDK_UNDEFINED(16,605) /* FMulticastInlineDelegate */ __um(OnOCLCloseEnd);                                      // 0x0160   (0x0010)  
	SDK_UNDEFINED(16,606) /* FMulticastInlineDelegate */ __um(OnOCLAnimateOpen);                                   // 0x0170   (0x0010)  
	SDK_UNDEFINED(16,607) /* FMulticastInlineDelegate */ __um(OnOCLAnimateClose);                                  // 0x0180   (0x0010)  
	SDK_UNDEFINED(16,608) /* FMulticastInlineDelegate */ __um(OnOCLOpenAttemptedLocked);                           // 0x0190   (0x0010)  
	SDK_UNDEFINED(16,609) /* FMulticastInlineDelegate */ __um(OnOCLOpenAttemptedBarred);                           // 0x01A0   (0x0010)  
	SDK_UNDEFINED(16,610) /* FMulticastInlineDelegate */ __um(OnOCLLocked);                                        // 0x01B0   (0x0010)  
	SDK_UNDEFINED(16,611) /* FMulticastInlineDelegate */ __um(OnOCLUnlocked);                                      // 0x01C0   (0x0010)  
	SDK_UNDEFINED(16,612) /* FMulticastInlineDelegate */ __um(OnOCLBarred);                                        // 0x01D0   (0x0010)  
	SDK_UNDEFINED(16,613) /* FMulticastInlineDelegate */ __um(OnOCLUnbarred);                                      // 0x01E0   (0x0010)  
	SDK_UNDEFINED(16,614) /* FMulticastInlineDelegate */ __um(OnOCLSealed);                                        // 0x01F0   (0x0010)  
	SDK_UNDEFINED(16,615) /* FMulticastInlineDelegate */ __um(OnOCLUnsealed);                                      // 0x0200   (0x0010)  
	SDK_UNDEFINED(16,616) /* FMulticastInlineDelegate */ __um(OnOCLOpenInterrupted);                               // 0x0210   (0x0010)  
	SDK_UNDEFINED(16,617) /* FMulticastInlineDelegate */ __um(OnOCLCloseInterrupted);                              // 0x0220   (0x0010)  
	SDK_UNDEFINED(16,618) /* FMulticastInlineDelegate */ __um(OnOCLLockpickStart);                                 // 0x0230   (0x0010)  
	SDK_UNDEFINED(16,619) /* FMulticastInlineDelegate */ __um(OnOCLLockpickSuccess);                               // 0x0240   (0x0010)  
	SDK_UNDEFINED(16,620) /* FMulticastInlineDelegate */ __um(OnOCLLockpickInterrupted);                           // 0x0250   (0x0010)  
	SDK_UNDEFINED(16,621) /* FMulticastInlineDelegate */ __um(OnOCLLockpickLoopStop);                              // 0x0260   (0x0010)  
	unsigned char                                      UnknownData03_6[0x48];                                      // 0x0270   (0x0048)  MISSED
	EOCLState                                          CurrentState;                                               // 0x02B8   (0x0001)  
	unsigned char                                      UnknownData04_7[0x7];                                       // 0x02B9   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.OCLComponent.UnsealOCL
	// void UnsealOCL(bool bFireOCLUnsealedEvent);                                                                              // [0x188bab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.UnlockOCL
	// void UnlockOCL(bool bFireOCLUnlockedEvent);                                                                              // [0x188ba20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.UnbarOCL
	// void UnbarOCL(bool bFireOCLUnbarredEvent, bool bEnterLockedState);                                                       // [0x188b950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.SignalOCLAnimationComplete
	// void SignalOCLAnimationComplete();                                                                                       // [0x188b930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.SealOCL
	// void SealOCL(bool bFireOCLSealedEvent);                                                                                  // [0x188b8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.LockOCL
	// void LockOCL(bool bFireOCLLockedEvent);                                                                                  // [0x188b590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.IsSealing
	// bool IsSealing();                                                                                                        // [0x188b560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsSealed
	// bool IsSealed();                                                                                                         // [0x188b530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsOpening
	// bool IsOpening();                                                                                                        // [0x188b500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsOpen
	// bool IsOpen();                                                                                                           // [0x188b4d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsLocked
	// bool IsLocked();                                                                                                         // [0x188b460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsClosing
	// bool IsClosing();                                                                                                        // [0x188b430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsClosed
	// bool IsClosed();                                                                                                         // [0x188b3f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsBarred
	// bool IsBarred();                                                                                                         // [0x188b3c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.GetExactLockpickDifficulty
	// char GetExactLockpickDifficulty();                                                                                       // [0x188b290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.GetCurrentState
	// EOCLState GetCurrentState();                                                                                             // [0x188b160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.BarOCL
	// void BarOCL(bool bFireOCLBarredEvent);                                                                                   // [0x188af30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.AttemptUnlock
	// EOCLResult AttemptUnlock(class AActor* Initiator);                                                                       // [0x188ae90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.AttemptOpen
	// EOCLResult AttemptOpen(class AActor* Initiator, bool bForce, bool bSeal, bool bIgnoreLockStatus, bool bIgnoreStartEvent, bool bIgnoreEndEvent, bool bIgnoreSound, bool bInstantAnimation); // [0x188ac00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.AttemptClose
	// EOCLResult AttemptClose(class AActor* Initiator, bool bForce, bool Block, bool bSeal, bool bIgnoreLockStatus, bool bIgnoreStartEvent, bool bIgnoreEndEvent, bool bIgnoreSound, bool bInstantAnimation); // [0x188a920] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.OctreeHelperActor
/// Size: 0x02C0 (704 bytes) (0x0002B8 - 0x0002C0) align 8 MaxSize: 0x02C0
class AOctreeHelperActor : public AActor
{ 
public:
	class UOctreeRenderingComponent*                   RenderComp;                                                 // 0x02B8   (0x0008)  
};

/// Class /Script/Indiana.OctreeRenderingComponent
/// Size: 0x0500 (1280 bytes) (0x0004F8 - 0x000500) align 16 MaxSize: 0x0500
class UOctreeRenderingComponent : public UPrimitiveComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x04F8   (0x0008)  MISSED
};

/// Class /Script/Indiana.OnRailsBehaviorStateInfo
/// Size: 0x0188 (392 bytes) (0x000178 - 0x000188) align 8 MaxSize: 0x0188
class UOnRailsBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0178   (0x0010)  MISSED
};

/// Class /Script/Indiana.OnRailsRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UOnRailsRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.OnRailsComponent
/// Size: 0x0178 (376 bytes) (0x0000E0 - 0x000178) align 8 MaxSize: 0x0178
class UOnRailsComponent : public UActorComponent
{ 
public:
	float                                              MinDistanceForChase;                                        // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00E4   (0x0004)  MISSED
	class UAkAudioEvent*                               TurningLoop;                                                // 0x00E8   (0x0008)  
	class AActor*                                      Spline;                                                     // 0x00F0   (0x0008)  
	int32_t                                            PathfindingDivisionCount;                                   // 0x00F8   (0x0004)  
	float                                              PathingSpeed;                                               // 0x00FC   (0x0004)  
	float                                              AllowedDeltaForArrival;                                     // 0x0100   (0x0004)  
	float                                              VerticalOffset;                                             // 0x0104   (0x0004)  
	int32_t                                            VantageFindingDivisionCount;                                // 0x0108   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	class UAkAudioEvent*                               MovementStart;                                              // 0x0110   (0x0008)  
	class UAkAudioEvent*                               MovementEnd;                                                // 0x0118   (0x0008)  
	class UAkAudioEvent*                               MovementLoop;                                               // 0x0120   (0x0008)  
	unsigned char                                      UnknownData02_7[0x50];                                      // 0x0128   (0x0050)  MISSED


	/// Functions
	// Function /Script/Indiana.OnRailsComponent.OnCompHit
	// void OnCompHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x188b6c0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/Indiana.OnRailsComponent.OnCharacterDeath
	// void OnCharacterDeath(FCauseDamageInfo& CDI);                                                                            // [0x188b620] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.OnRailsComponent.IsMovingForward
	// bool IsMovingForward();                                                                                                  // [0x188b4b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OnRailsComponent.IsMoving
	// bool IsMoving();                                                                                                         // [0x188b490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OnRailsComponent.HasVantageForActor
	// bool HasVantageForActor(class AActor* Actor);                                                                            // [0x188b320] Final|Native|Public  
	// Function /Script/Indiana.OnRailsComponent.FurthestLocationOnSpline
	// FVector FurthestLocationOnSpline();                                                                                      // [0x188b120] Final|Native|Public|HasDefaults 
	// Function /Script/Indiana.OnRailsComponent.FindVantageForLocation
	// FVector FindVantageForLocation(FVector Location);                                                                        // [0x188b070] Final|Native|Public|HasDefaults 
	// Function /Script/Indiana.OnRailsComponent.FindVantageForActor
	// FVector FindVantageForActor(class AActor* Actor);                                                                        // [0x188afc0] Final|Native|Public|HasDefaults 
};

/// Class /Script/Indiana.OptionPresenterWidget
/// Size: 0x0380 (896 bytes) (0x000300 - 0x000380) align 8 MaxSize: 0x0380
class UOptionPresenterWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x28];                                      // 0x0300   (0x0028)  MISSED
	bool                                               bAllowKBMWrapping;                                          // 0x0328   (0x0001)  
	bool                                               bAllowGamepadWrapping;                                      // 0x0329   (0x0001)  
	bool                                               bShouldShowButtons;                                         // 0x032A   (0x0001)  
	bool                                               bShowButtonsGamepad;                                        // 0x032B   (0x0001)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x032C   (0x0004)  MISSED
	class UUserSetting*                                Setting;                                                    // 0x0330   (0x0008)  
	class UButtonBase*                                 PreviousButton;                                             // 0x0338   (0x0008)  
	class UButtonBase*                                 NextButton;                                                 // 0x0340   (0x0008)  
	class UImage*                                      LeftArrowImage;                                             // 0x0348   (0x0008)  
	class UImage*                                      RightArrowImage;                                            // 0x0350   (0x0008)  
	class UTextBlockBase*                              OptionTextBlock;                                            // 0x0358   (0x0008)  
	unsigned char                                      UnknownData02_7[0x20];                                      // 0x0360   (0x0020)  MISSED
};

/// Class /Script/Indiana.OptionSliderWidget
/// Size: 0x0368 (872 bytes) (0x000300 - 0x000368) align 8 MaxSize: 0x0368
class UOptionSliderWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UTextBlockBase*                              OptionTitleTextBlock;                                       // 0x0310   (0x0008)  
	class UTextBlockBase*                              NumEntriesDisplayTextBlock;                                 // 0x0318   (0x0008)  
	class USliderBase*                                 OptionSlider;                                               // 0x0320   (0x0008)  
	class UImage*                                      MiddlePointImage;                                           // 0x0328   (0x0008)  
	class UButtonBase*                                 GamepadButton;                                              // 0x0330   (0x0008)  
	class UButtonBase*                                 PreviousStep;                                               // 0x0338   (0x0008)  
	class UButtonBase*                                 NextStep;                                                   // 0x0340   (0x0008)  
	bool                                               bShowButtonsGamepad;                                        // 0x0348   (0x0001)  
	bool                                               bShowSliderValues;                                          // 0x0349   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1E];                                      // 0x034A   (0x001E)  MISSED


	/// Functions
	// Function /Script/Indiana.OptionSliderWidget.OnSliderValueChanged
	// void OnSliderValueChanged(FSliderEvent& Event);                                                                          // [0x188fae0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OverlayedSystemMapData
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align 8 MaxSize: 0x0060
class UOverlayedSystemMapData : public UDataAsset
{ 
public:
	class USystemMapData*                              Source;                                                     // 0x0038   (0x0008)  
	class USystemMapData*                              Overlay;                                                    // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0048   (0x0018)  MISSED
};

/// Class /Script/Indiana.PaginatedButtonWidget
/// Size: 0x0288 (648 bytes) (0x000278 - 0x000288) align 8 MaxSize: 0x0288
class UPaginatedButtonWidget : public UUserWidget
{ 
public:
	class UImage*                                      SelectedIcon;                                               // 0x0278   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0280   (0x0008)  
};

/// Class /Script/Indiana.PooledParticleSystemComponent
/// Size: 0x0770 (1904 bytes) (0x000760 - 0x000770) align 16 MaxSize: 0x0770
class UPooledParticleSystemComponent : public UParticleSystemComponent
{ 
public:
	class UParticlePool*                               OwningPool;                                                 // 0x0760   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0768   (0x0008)  MISSED
};

/// Struct /Script/Indiana.ParticleSystemPool
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FParticleSystemPool
{ 
	TArray<class UPooledParticleSystemComponent*>      ActiveComponents;                                           // 0x0000   (0x0010)  
	TArray<class UPooledParticleSystemComponent*>      FreeComponents;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/Indiana.PendingParticleSpawnInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FPendingParticleSpawnInfo
{ 
	class UParticleSystem*                             Template;                                                   // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Class /Script/Indiana.ParticlePool
/// Size: 0x00A8 (168 bytes) (0x000030 - 0x0000A8) align 8 MaxSize: 0x00A8
class UParticlePool : public UObject
{ 
public:
	TMap<class UParticleSystem*, FParticleSystemPool>  Pools;                                                      // 0x0030   (0x0050)  
	TArray<FPendingParticleSpawnInfo>                  PendingPrespawns;                                           // 0x0080   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0090   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.ParticlePool.ParticleFreed
	// void ParticleFreed(class UParticleSystemComponent* Particle);                                                            // [0x188fc90] Final|Native|Protected 
};

/// Class /Script/Indiana.PatrolBehaviorStateInfo
/// Size: 0x0148 (328 bytes) (0x000120 - 0x000148) align 8 MaxSize: 0x0148
class UPatrolBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0120   (0x0028)  MISSED
};

/// Class /Script/Indiana.PatrolRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UPatrolRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Struct /Script/Indiana.ActionSet
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FActionSet
{ 
	class UAIAction*                                   Action;                                                     // 0x0000   (0x0008)  
	class AActor*                                      LookAtOverride;                                             // 0x0008   (0x0008)  
	bool                                               LookWhileWalking;                                           // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Class /Script/Indiana.PatrolNode
/// Size: 0x0318 (792 bytes) (0x0002B8 - 0x000318) align 8 MaxSize: 0x0318
class APatrolNode : public AActor
{ 
public:
	SDK_UNDEFINED(16,622) /* FMulticastInlineDelegate */ __um(OnArriveDelegate);                                   // 0x02B8   (0x0010)  
	class APatrolNode*                                 NextPatrolNode;                                             // 0x02C8   (0x0008)  
	bool                                               bOrientOnArrival;                                           // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02D1   (0x0007)  MISSED
	class UAIAction*                                   Action;                                                     // 0x02D8   (0x0008)  
	FActionSet                                         ActionSet;                                                  // 0x02E0   (0x0018)  
	EPatrolMovementType                                MovementType;                                               // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02FC   (0x0004)  MISSED
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0300   (0x0008)  
	bool                                               bCreatedByTool;                                             // 0x0308   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0309   (0x0007)  MISSED
	class UAISettings_Patrol*                          AISettings;                                                 // 0x0310   (0x0008)  
};

/// Class /Script/Indiana.PatrolNodeComponent
/// Size: 0x00E0 (224 bytes) (0x0000E0 - 0x0000E0) align 8 MaxSize: 0x00E0
class UPatrolNodeComponent : public UActorComponent
{ 
public:
};

/// Class /Script/Indiana.PauseMenuWidget
/// Size: 0x0370 (880 bytes) (0x000308 - 0x000370) align 8 MaxSize: 0x0370
class UPauseMenuWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0308   (0x0008)  MISSED
	class UVerticalBox*                                OptionsVerticalBox;                                         // 0x0310   (0x0008)  
	class UButtonBase*                                 ResumeButton;                                               // 0x0318   (0x0008)  
	class UButtonBase*                                 SaveGameButton;                                             // 0x0320   (0x0008)  
	class UButtonBase*                                 LoadGameButton;                                             // 0x0328   (0x0008)  
	class UButtonBase*                                 MainMenuButton;                                             // 0x0330   (0x0008)  
	class UButtonBase*                                 SettingsButton;                                             // 0x0338   (0x0008)  
	class UButtonBase*                                 IdleCamButton;                                              // 0x0340   (0x0008)  
	class UButtonBase*                                 QuitButton;                                                 // 0x0348   (0x0008)  
	class UTextBlockBase*                              VersionTextBlock;                                           // 0x0350   (0x0008)  
	class UTextBlockBase*                              IdleCamButtonText;                                          // 0x0358   (0x0008)  
	class UClass*                                      SettingsMenuClass;                                          // 0x0360   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0368   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.PauseMenuWidget.OnSettingsMenuClosed
	// void OnSettingsMenuClosed();                                                                                             // [0x188fac0] Final|Native|Protected 
	// Function /Script/Indiana.PauseMenuWidget.OnSaveLoadMenuClosed
	// void OnSaveLoadMenuClosed(bool bForced);                                                                                 // [0x188fa30] Final|Native|Protected 
	// Function /Script/Indiana.PauseMenuWidget.OnSaveGameComplete
	// void OnSaveGameComplete(ESaveGameResult SaveResult, ESaveGameType SaveType);                                             // [0x188f960] Final|Native|Protected 
	// Function /Script/Indiana.PauseMenuWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18722e0] Final|Native|Protected 
};

/// Class /Script/Indiana.PerceptionRangeScalarStatusEffect
/// Size: 0x01B0 (432 bytes) (0x000188 - 0x0001B0) align 8 MaxSize: 0x01B0
class UPerceptionRangeScalarStatusEffect : public UStatusEffect
{ 
public:
	FGameplayTagContainer                              CreatureType;                                               // 0x0188   (0x0020)  
	float                                              PerceptionRangeScalar;                                      // 0x01A8   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x01AC   (0x0004)  MISSED
};

/// Struct /Script/Indiana.PerkTextures
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FPerkTextures
{ 
	class UTexture2D*                                  Unpurchased;                                                // 0x0000   (0x0008)  
	class UTexture2D*                                  Purchased;                                                  // 0x0008   (0x0008)  
	class UTexture2D*                                  Suppressed;                                                 // 0x0010   (0x0008)  
};

/// Class /Script/Indiana.Perk
/// Size: 0x0070 (112 bytes) (0x000030 - 0x000070) align 8 MaxSize: 0x0070
class UPerk : public UObject
{ 
public:
	FLocString                                         Name;                                                       // 0x0030   (0x0008)  
	FLocString                                         Description;                                                // 0x0038   (0x0008)  
	FPerkTextures                                      Icons;                                                      // 0x0040   (0x0018)  
	TArray<class UClass*>                              Spells;                                                     // 0x0058   (0x0010)  
	bool                                               bCanBeRespeced;                                             // 0x0068   (0x0001)  
	bool                                               bDLCPerk;                                                   // 0x0069   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x006A   (0x0006)  MISSED
};

/// Class /Script/Indiana.PerkReadoutWidget
/// Size: 0x0348 (840 bytes) (0x000300 - 0x000348) align 8 MaxSize: 0x0348
class UPerkReadoutWidget : public UIndianaUserWidget
{ 
public:
	class UCanvasPanel*                                TextContainer;                                              // 0x0300   (0x0008)  
	class UTextBlockBase*                              PerkNameTextBlock;                                          // 0x0308   (0x0008)  
	class UTextBlockBase*                              PerkReqsHeaderText;                                         // 0x0310   (0x0008)  
	class UTextBlockBase*                              PerkReqsDescText;                                           // 0x0318   (0x0008)  
	class UTextBlockBase*                              PerkSynopsisHeaderText;                                     // 0x0320   (0x0008)  
	class UTextBlockBase*                              PerkSynopsisDescText;                                       // 0x0328   (0x0008)  
	class UTextBlockBase*                              PerkDescHeaderText;                                         // 0x0330   (0x0008)  
	class UTextBlockBase*                              PerkDescText;                                               // 0x0338   (0x0008)  
	class UTextBlockBase*                              PerkSpecialText;                                            // 0x0340   (0x0008)  
};

/// Class /Script/Indiana.PerksListEntry
/// Size: 0x0368 (872 bytes) (0x000300 - 0x000368) align 8 MaxSize: 0x0368
class UPerksListEntry : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	class UImage*                                      HighlightImage;                                             // 0x0318   (0x0008)  
	class UImage*                                      PendingImage;                                               // 0x0320   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0328   (0x0008)  
	class UTexture2D*                                  ButtonHighlightFocused;                                     // 0x0330   (0x0008)  
	class UTexture2D*                                  ButtonHighlightSelected;                                    // 0x0338   (0x0008)  
	class UTexture2D*                                  ButtonHighlightHovered;                                     // 0x0340   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0348   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.PerksListEntry.UpdateButtonBrush
	// void UpdateButtonBrush(bool bPendingPurchase, bool bActuallyPurchased, bool bSuppressed);                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.PerksListEntry.OnPerkClickedValid
	// void OnPerkClickedValid();                                                                                               // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.PerksListEntry.GetUnpurchasedIcon
	// class UTexture2D* GetUnpurchasedIcon();                                                                                  // [0x188f6c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PerksListEntry.GetSuppressedIcon
	// class UTexture2D* GetSuppressedIcon();                                                                                   // [0x188f690] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PerksListEntry.GetPurchasedIcon
	// class UTexture2D* GetPurchasedIcon();                                                                                    // [0x188f660] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.PerksListRowWidget
/// Size: 0x0428 (1064 bytes) (0x000300 - 0x000428) align 8 MaxSize: 0x0428
class UPerksListRowWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              PerkTierTextBlock;                                          // 0x0300   (0x0008)  
	class UPerksListEntry*                             Perk0;                                                      // 0x0308   (0x0008)  
	class UPerksListEntry*                             Perk1;                                                      // 0x0310   (0x0008)  
	class UPerksListEntry*                             Perk2;                                                      // 0x0318   (0x0008)  
	class UPerksListEntry*                             Perk3;                                                      // 0x0320   (0x0008)  
	class UPerksListEntry*                             Perk4;                                                      // 0x0328   (0x0008)  
	class UPerksListEntry*                             Perk5;                                                      // 0x0330   (0x0008)  
	class UPerksListEntry*                             Perk6;                                                      // 0x0338   (0x0008)  
	class UPerksListEntry*                             Perk7;                                                      // 0x0340   (0x0008)  
	class UPerksListEntry*                             Perk8;                                                      // 0x0348   (0x0008)  
	class UPerksListEntry*                             Perk9;                                                      // 0x0350   (0x0008)  
	class UPerksListEntry*                             Perk10;                                                     // 0x0358   (0x0008)  
	class UPerksListEntry*                             Perk11;                                                     // 0x0360   (0x0008)  
	class UPerksListEntry*                             Perk12;                                                     // 0x0368   (0x0008)  
	class UPerksListEntry*                             Perk13;                                                     // 0x0370   (0x0008)  
	class UPerksListEntry*                             Perk14;                                                     // 0x0378   (0x0008)  
	class UPerksListEntry*                             Perk15;                                                     // 0x0380   (0x0008)  
	class UImage*                                      RowOneBacking;                                              // 0x0388   (0x0008)  
	class UImage*                                      RowTwoBacking;                                              // 0x0390   (0x0008)  
	unsigned char                                      UnknownData00_7[0x90];                                      // 0x0398   (0x0090)  MISSED
};

/// Class /Script/Indiana.PerksListWidget
/// Size: 0x0360 (864 bytes) (0x000300 - 0x000360) align 8 MaxSize: 0x0360
class UPerksListWidget : public UIndianaUserWidget
{ 
public:
	class UPerksListRowWidget*                         RowOne;                                                     // 0x0300   (0x0008)  
	class UPerksListRowWidget*                         RowTwo;                                                     // 0x0308   (0x0008)  
	class UPerksListRowWidget*                         RowThree;                                                   // 0x0310   (0x0008)  
	class UPerksListRowWidget*                         RowFour;                                                    // 0x0318   (0x0008)  
	class UPerksListRowWidget*                         RowFive;                                                    // 0x0320   (0x0008)  
	FLocString                                         TextReference;                                              // 0x0328   (0x0008)  
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x0330   (0x0030)  MISSED
};

/// Class /Script/Indiana.PerksTierWidget
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class UPerksTierWidget : public UIndianaUserWidget
{ 
public:
	class UHorizontalBox*                              ImageContainer;                                             // 0x0300   (0x0008)  
	class UImage*                                      TierImage;                                                  // 0x0308   (0x0008)  
	class UImage*                                      TierImage2;                                                 // 0x0310   (0x0008)  
	class UImage*                                      TierImage3;                                                 // 0x0318   (0x0008)  
	class UImage*                                      TierImageBacking;                                           // 0x0320   (0x0008)  
	class UTextBlockBase*                              TierTextBlock;                                              // 0x0328   (0x0008)  
	TArray<class UTexture2D*>                          Silhouettes;                                                // 0x0330   (0x0010)  


	/// Functions
	// Function /Script/Indiana.PerksTierWidget.GetTextOpacity
	// float GetTextOpacity(bool bUnlocked);                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.PerksTierWidget.GetImageOpacity
	// float GetImageOpacity(bool bUnlocked);                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.PerksTierWidget.GetColorType
	// EIndianaUIColorType GetColorType(bool bUnlocked);                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/Indiana.PerkSummaryEntryWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UPerkSummaryEntryWidget : public UIndianaUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0300   (0x0008)  
	class UTextBlockBase*                              PerkNameText;                                               // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0310   (0x0008)  MISSED
};

/// Struct /Script/Indiana.PerkTier
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FPerkTier
{ 
	int32_t                                            PreviousPointsRequired;                                     // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<class UClass*>                              Perks;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Indiana.PerkTiers
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FPerkTiers
{ 
	TArray<FPerkTier>                                  PerkTiers;                                                  // 0x0000   (0x0010)  
};

/// Class /Script/Indiana.PerkTree
/// Size: 0x00C8 (200 bytes) (0x000038 - 0x0000C8) align 8 MaxSize: 0x00C8
class UPerkTree : public UDataAsset
{ 
public:
	TMap<EPerkCategory, FPerkTiers>                    PerkTrees;                                                  // 0x0038   (0x0050)  
	TArray<class UClass*>                              NonTreePerks;                                               // 0x0088   (0x0010)  
	TWeakObjectPtr<class UPerkTree*>                   DLCPerkTree;                                                // 0x0098   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x00A0   (0x0028)  MISSED
};

/// Class /Script/Indiana.PerkTreeCollection
/// Size: 0x00A8 (168 bytes) (0x000038 - 0x0000A8) align 8 MaxSize: 0x00A8
class UPerkTreeCollection : public UDataAsset
{ 
public:
	TArray<class UPerkTree*>                           Sources;                                                    // 0x0038   (0x0010)  
	TMap<EPerkCategory, FPerkTiers>                    PerkTrees;                                                  // 0x0048   (0x0050)  
	TArray<class UClass*>                              NonTreePerks;                                               // 0x0098   (0x0010)  
};

/// Class /Script/Indiana.PersistentFiringPattern
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPersistentFiringPattern : public UInterface
{ 
public:
};

/// Class /Script/Indiana.PersonalSpaceComponent
/// Size: 0x0198 (408 bytes) (0x0000E0 - 0x000198) align 8 MaxSize: 0x0198
class UPersonalSpaceComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x00E0   (0x0010)  MISSED
	SDK_UNDEFINED(16,623) /* FMulticastInlineDelegate */ __um(OnPlayerEnteredAcknowledgeZone);                     // 0x00F0   (0x0010)  
	SDK_UNDEFINED(16,624) /* FMulticastInlineDelegate */ __um(OnPlayerExitedAcknowledgeZone);                      // 0x0100   (0x0010)  
	SDK_UNDEFINED(16,625) /* FMulticastInlineDelegate */ __um(OnPlayerEnteredInteractionZone);                     // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,626) /* FMulticastInlineDelegate */ __um(OnPlayerExitedInteractionZone);                      // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,627) /* FMulticastInlineDelegate */ __um(OnPlayerEnteredViolationZone);                       // 0x0130   (0x0010)  
	SDK_UNDEFINED(16,628) /* FMulticastInlineDelegate */ __um(OnPlayerExitedViolationZone);                        // 0x0140   (0x0010)  
	float                                              AcknowledgementRadius;                                      // 0x0150   (0x0004)  
	float                                              InteractionRadius;                                          // 0x0154   (0x0004)  
	float                                              ViolationRadius;                                            // 0x0158   (0x0004)  
	float                                              RoboDetectionRadius;                                        // 0x015C   (0x0004)  
	EPersonalSpaceZone                                 ChatterPersonalSpaceZone;                                   // 0x0160   (0x0001)  
	unsigned char                                      UnknownData01_7[0x37];                                      // 0x0161   (0x0037)  MISSED


	/// Functions
	// Function /Script/Indiana.PersonalSpaceComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x188f6f0] Final|Native|Private 
};

/// Class /Script/Indiana.PersuadeBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000120 - 0x000128) align 8 MaxSize: 0x0128
class UPersuadeBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	TWeakObjectPtr<class UDisableStatusEffect*>        DisableStatusEffect;                                        // 0x0120   (0x0008)  


	/// Functions
	// Function /Script/Indiana.PersuadeBehaviorStateInfo.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x188fbf0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.PersuadeRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UPersuadeRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.PetableComponent
/// Size: 0x0110 (272 bytes) (0x0000E0 - 0x000110) align 8 MaxSize: 0x0110
class UPetableComponent : public UActorComponent
{ 
public:
	TArray<class UAnimMontage*>                        AnimationMontages;                                          // 0x00E0   (0x0010)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x00F0   (0x0020)  MISSED
};

/// Class /Script/Indiana.Pickup
/// Size: 0x0630 (1584 bytes) (0x000390 - 0x000630) align 8 MaxSize: 0x0630
class APickup : public AItemVisualizer
{ 
public:
	unsigned char                                      UnknownData00_8[0x38];                                      // 0x0390   (0x0038)  MISSED
	SDK_UNDEFINED(16,629) /* FMulticastInlineDelegate */ __um(OnPickup);                                           // 0x03C8   (0x0010)  
	float                                              MeshLoadDistance;                                           // 0x03D8   (0x0004)  
	float                                              MeshUnloadDistance;                                         // 0x03DC   (0x0004)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x03E0   (0x0010)  MISSED
	FDefaultItemStack                                  DefaultItemStack;                                           // 0x03F0   (0x01F8)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x05E8   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x05F0   (0x0008)  
	class UClass*                                      OwningFaction;                                              // 0x05F8   (0x0008)  
	TWeakObjectPtr<class AActor*>                      OwningActor;                                                // 0x0600   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0608   (0x0020)  MISSED
	bool                                               bPlayerOwned;                                               // 0x0628   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0629   (0x0007)  MISSED


	/// Functions
	// Function /Script/Indiana.Pickup.ShutdownDropPhysics
	// void ShutdownDropPhysics(bool bUpdateTransforms);                                                                        // [0x188fd40] Final|Native|Protected 
	// Function /Script/Indiana.Pickup.SetupDropPhysics
	// void SetupDropPhysics();                                                                                                 // [0x188fd20] Final|Native|Protected 
	// Function /Script/Indiana.Pickup.OnPhysicsWake
	// void OnPhysicsWake(class UPrimitiveComponent* WakingComponent, FName BoneName);                                          // [0x188f890] Final|Native|Protected 
	// Function /Script/Indiana.Pickup.OnPhysicsSleep
	// void OnPhysicsSleep(class UPrimitiveComponent* SleepingComponent, FName BoneName);                                       // [0x188f7c0] Final|Native|Protected 
	// Function /Script/Indiana.Pickup.GetItem
	// class UItem* GetItem();                                                                                                  // [0x188f640] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Indiana.AkPlaySoundEventEffect
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align 8 MaxSize: 0x0060
class UAkPlaySoundEventEffect : public UEventEffect
{ 
public:
	class UAkAudioEvent*                               Sound;                                                      // 0x0030   (0x0008)  
	float                                              FadeTime;                                                   // 0x0038   (0x0004)  
	float                                              DelayTime;                                                  // 0x003C   (0x0004)  
	class UAkAudioEvent*                               SoundLoop;                                                  // 0x0040   (0x0008)  
	float                                              LoopFadeTime;                                               // 0x0048   (0x0004)  
	float                                              LoopDelayTime;                                              // 0x004C   (0x0004)  
	class UAkAudioEvent*                               StopEvent;                                                  // 0x0050   (0x0008)  
	float                                              StopDelayTime;                                              // 0x0058   (0x0004)  
	bool                                               bStopSoundWhenTargetDestroyed;                              // 0x005C   (0x0001)  
	bool                                               bPostAtLocation;                                            // 0x005D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x005E   (0x0002)  MISSED
};

/// Class /Script/Indiana.PlayAnimationAction
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align 8 MaxSize: 0x0060
class UPlayAnimationAction : public UAIAction
{ 
public:
	class UPlayAnimEventEffect*                        Animation;                                                  // 0x0038   (0x0008)  
	bool                                               bIsLooping;                                                 // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              LoopTime;                                                   // 0x0044   (0x0004)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0048   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayAnimationAction.OnMontageBlendingOut
	// void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);                                               // [0x1893080] Final|Native|Protected 
};

/// Class /Script/Indiana.PlayAnimEventEffect
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align 8 MaxSize: 0x0048
class UPlayAnimEventEffect : public UBasePlayAnimEventEffect
{ 
public:
	class UAnimMontage*                                Anim;                                                       // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.PlayAnimStateEventEffect
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UPlayAnimStateEventEffect : public UEventEffect
{ 
public:
	EAnimMovementModifierState                         MovementModifierState;                                      // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Indiana.PlayDirectionalAnimEventEffect
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align 8 MaxSize: 0x0050
class UPlayDirectionalAnimEventEffect : public UBasePlayAnimEventEffect
{ 
public:
	TArray<class UAnimMontage*>                        Anims;                                                      // 0x0040   (0x0010)  
};

/// Class /Script/Indiana.PlayerAppearanceComponent
/// Size: 0x0488 (1160 bytes) (0x000480 - 0x000488) align 8 MaxSize: 0x0488
class UPlayerAppearanceComponent : public UAppearanceComponent
{ 
public:
	bool                                               bDefaultToThirdPerson;                                      // 0x0480   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0481   (0x0007)  MISSED
};

/// Class /Script/Indiana.PlayerDeathComponent
/// Size: 0x0300 (768 bytes) (0x0002B8 - 0x000300) align 8 MaxSize: 0x0300
class UPlayerDeathComponent : public UCharacterDeathComponent
{ 
public:
	class UAnimMontage*                                DeathAnimation;                                             // 0x02B8   (0x0008)  
	class UAnimMontage*                                CrouchingAnimation;                                         // 0x02C0   (0x0008)  
	class UAnimMontage*                                FallingDeathAnimation;                                      // 0x02C8   (0x0008)  
	FName                                              FallingDeathEndSectionName;                                 // 0x02D0   (0x0008)  
	bool                                               bFadeCameraIfCrouched;                                      // 0x02D8   (0x0001)  
	bool                                               bCrouchedFadeSound;                                         // 0x02D9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x02DA   (0x0002)  MISSED
	float                                              AnimWaitTime;                                               // 0x02DC   (0x0004)  
	float                                              FadeToBlackTime;                                            // 0x02E0   (0x0004)  
	float                                              WaitFadedTime;                                              // 0x02E4   (0x0004)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x02E8   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerDeathComponent.OnLanded
	// void OnLanded(float DistanceFallen);                                                                                     // [0x1893000] Final|Native|Private 
	// Function /Script/Indiana.PlayerDeathComponent.OnAnimNotifyEvent
	// void OnAnimNotifyEvent(EAnimNotify AnimNotifyEvent);                                                                     // [0x1862d50] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.PlayerDeathComponent.FadeToBlackComplete
	// void FadeToBlackComplete();                                                                                              // [0x1892990] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.PlayerDeathComponent.DeathAnimComplete
	// void DeathAnimComplete();                                                                                                // [0x1892930] Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.PlayerDisableStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UPlayerDisableStatusEffect : public UStatusEffect
{ 
public:
	bool                                               bDisableCompanionCommands;                                  // 0x0188   (0x0001)  
	bool                                               bDisableTimeDilation;                                       // 0x0189   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x018A   (0x0006)  MISSED
};

/// Class /Script/Indiana.PlayerEnvironmentInteractionComponent
/// Size: 0x03A0 (928 bytes) (0x000190 - 0x0003A0) align 8 MaxSize: 0x03A0
class UPlayerEnvironmentInteractionComponent : public UEnvironmentInteractionComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x1E8];                                     // 0x0190   (0x01E8)  MISSED
	float                                              DisguiseMeterMax;                                           // 0x0378   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x037C   (0x0004)  MISSED
	class UDisguiseData*                               EquippedDisguise;                                           // 0x0380   (0x0008)  
	unsigned char                                      UnknownData02_7[0x18];                                      // 0x0388   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerEnvironmentInteractionComponent.OnOccupiedNavAreaChanged
	// void OnOccupiedNavAreaChanged(class UClass* PrevOccupiedArea, class UClass* CurrentOccupiedArea);                        // [0x1893150] Final|Native|Protected 
	// Function /Script/Indiana.PlayerEnvironmentInteractionComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x1892e60] Final|Native|Protected 
};

/// Struct /Script/Indiana.AddictionTimer
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FAddictionTimer
{ 
	FGameplayTag                                       AddictionTag;                                               // 0x0000   (0x0008)  
	float                                              TimerMax;                                                   // 0x0008   (0x0004)  
	float                                              IncreasePerSecond;                                          // 0x000C   (0x0004)  
	class UClass*                                      FlawClass;                                                  // 0x0010   (0x0008)  
	SDK_UNDEFINED(16,630) /* FMulticastInlineDelegate */ __um(OnAddictionTimerEntersMaxed);                        // 0x0018   (0x0010)  
	SDK_UNDEFINED(16,631) /* FMulticastInlineDelegate */ __um(OnAddictionTimerLeavesMaxed);                        // 0x0028   (0x0010)  
	float                                              CurrentTimer;                                               // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.SurvivalTier
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FSurvivalTier
{ 
	class UClass*                                      Spell;                                                      // 0x0000   (0x0008)  
	float                                              TierMin;                                                    // 0x0008   (0x0004)  
	float                                              TierMax;                                                    // 0x000C   (0x0004)  
};

/// Struct /Script/Indiana.CurveData
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 MaxSize: 0x0090
struct FCurveData
{ 
	FName                                              ScalerName;                                                 // 0x0000   (0x0008)  
	FRuntimeFloatCurve                                 Parameter;                                                  // 0x0008   (0x0088)  
};

/// Class /Script/Indiana.PlayerHealthComponent
/// Size: 0x0388 (904 bytes) (0x0001C0 - 0x000388) align 8 MaxSize: 0x0388
class UPlayerHealthComponent : public UHealthComponent
{ 
public:
	SDK_UNDEFINED(16,632) /* FMulticastInlineDelegate */ __um(OnWarnPlayerLowHealth);                              // 0x01C0   (0x0010)  
	float                                              LethalHunger;                                               // 0x01D0   (0x0004)  
	float                                              LethalThirst;                                               // 0x01D4   (0x0004)  
	float                                              LethalExhaustion;                                           // 0x01D8   (0x0004)  
	float                                              MaxFastTravelHunger;                                        // 0x01DC   (0x0004)  
	float                                              MaxFastTravelThirst;                                        // 0x01E0   (0x0004)  
	float                                              MaxFastTravelExhaustion;                                    // 0x01E4   (0x0004)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x01E8   (0x0010)  MISSED
	FAddictionTimer                                    SmokeAddictionTimer;                                        // 0x01F8   (0x0040)  
	FAddictionTimer                                    FoodAddictionTimer;                                         // 0x0238   (0x0040)  
	FAddictionTimer                                    DrugsAddictionTimer;                                        // 0x0278   (0x0040)  
	FAddictionTimer                                    AlcoholAddictionTimer;                                      // 0x02B8   (0x0040)  
	TArray<FSurvivalTier>                              HungerTiers;                                                // 0x02F8   (0x0010)  
	TArray<FSurvivalTier>                              ThirstTiers;                                                // 0x0308   (0x0010)  
	TArray<FSurvivalTier>                              ExhaustionTiers;                                            // 0x0318   (0x0010)  
	class UAkAudioEvent*                               PlayerDiedSound;                                            // 0x0328   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0330   (0x0008)  MISSED
	class UMaterialInterface*                          Material;                                                   // 0x0338   (0x0008)  
	float                                              ScreenFxBlendTime;                                          // 0x0340   (0x0004)  
	float                                              LowHealthHeartBeatDeltaTime;                                // 0x0344   (0x0004)  
	float                                              LowHealthPercentage;                                        // 0x0348   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x034C   (0x0004)  MISSED
	TArray<FCurveData>                                 ParamData;                                                  // 0x0350   (0x0010)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x0360   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerHealthComponent.SurvivalModeUpdated
	// void SurvivalModeUpdated(bool bSurvivalMode);                                                                            // [0x1893ae0] Final|Native|Private 
	// Function /Script/Indiana.PlayerHealthComponent.PlayerWaitInitiated
	// void PlayerWaitInitiated(float SecondsPassed, ERestType RestType);                                                       // [0x18932b0] Final|Native|Public  
	// Function /Script/Indiana.PlayerHealthComponent.GetThirst
	// float GetThirst();                                                                                                       // [0x1892e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetMaxFastTravelThirst
	// float GetMaxFastTravelThirst();                                                                                          // [0x1892e20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetMaxFastTravelHunger
	// float GetMaxFastTravelHunger();                                                                                          // [0x1892e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetMaxFastTravelExhaustion
	// float GetMaxFastTravelExhaustion();                                                                                      // [0x1892de0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetLethalThirst
	// float GetLethalThirst();                                                                                                 // [0x1892dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetLethalHunger
	// float GetLethalHunger();                                                                                                 // [0x1892da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetLethalExhaustion
	// float GetLethalExhaustion();                                                                                             // [0x1892d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetHunger
	// float GetHunger();                                                                                                       // [0x1892d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetExhaustion
	// float GetExhaustion();                                                                                                   // [0x1892d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.FastTravelInitiated
	// void FastTravelInitiated(class UTravelDestinationData* TravelData, float TimePassed, bool bTravelFromMapLedger);         // [0x18929b0] Final|Native|Public  
	// Function /Script/Indiana.PlayerHealthComponent.AdjustThirst
	// void AdjustThirst(float Amount, bool bFromFastTravel, bool bTravelFromMapLedger);                                        // [0x1892810] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerHealthComponent.AdjustSurvivalStats
	// void AdjustSurvivalStats(float HungerGained, float ThirstGained, float ExhaustionGained, bool bFromFastTravel, bool bTravelFromMapLedger, bool bForced); // [0x1892620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerHealthComponent.AdjustHunger
	// void AdjustHunger(float Amount, bool bFromFastTravel, bool bTravelFromMapLedger);                                        // [0x1892500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerHealthComponent.AdjustExhaustion
	// void AdjustExhaustion(float Amount, bool bFromFastTravel, bool bTravelFromMapLedger);                                    // [0x18923e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerHealthComponent.AddThirst
	// void AddThirst(float Thirst);                                                                                            // [0x18922c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerHealthComponent.AddHunger
	// void AddHunger(float Hunger);                                                                                            // [0x1892230] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerHealthComponent.AddExhaustion
	// void AddExhaustion(float Exhaustion);                                                                                    // [0x18921a0] Final|Exec|Native|Public 
};

/// Struct /Script/Indiana.SkillValueExperienceRange
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FSkillValueExperienceRange
{ 
	int32_t                                            Min;                                                        // 0x0000   (0x0004)  
	int32_t                                            Max;                                                        // 0x0004   (0x0004)  
	int32_t                                            XP;                                                         // 0x0008   (0x0004)  
};

/// Struct /Script/Indiana.LevelDifferenceRangeScalar
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FLevelDifferenceRangeScalar
{ 
	int32_t                                            Min;                                                        // 0x0000   (0x0004)  
	int32_t                                            Max;                                                        // 0x0004   (0x0004)  
	float                                              Scalar;                                                     // 0x0008   (0x0004)  
};

/// Class /Script/Indiana.PlayerInfoComponent
/// Size: 0x09B8 (2488 bytes) (0x0003A0 - 0x0009B8) align 8 MaxSize: 0x09B8
class UPlayerInfoComponent : public UCharacterInfoComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0xB0];                                      // 0x03A0   (0x00B0)  MISSED
	TArray<int32_t>                                    PlayerXPTable;                                              // 0x0450   (0x0010)  
	TMap<EOCLDifficulty, int32_t>                      SkillCheckDifficultyXP;                                     // 0x0460   (0x0050)  
	TArray<FSkillValueExperienceRange>                 SkillCheckValueXP;                                          // 0x04B0   (0x0010)  
	TMap<ECreatureXPType, int32_t>                     CreatueXPTypeMap;                                           // 0x04C0   (0x0050)  
	TArray<FLevelDifferenceRangeScalar>                EnemyXPLevelDiffScalar;                                     // 0x0510   (0x0010)  
	TMap<EPointOfInterestXPType, int32_t>              PointOfInterestXPMap;                                       // 0x0520   (0x0050)  
	TMap<EQuestType, int32_t>                          QuestTypeXPMap;                                             // 0x0570   (0x0050)  
	float                                              QuestXPPercentFromObjectives;                               // 0x05C0   (0x0004)  
	int32_t                                            NumSkillsPointsPerLevel;                                    // 0x05C4   (0x0004)  
	int32_t                                            MaxSkillLevelForCategoryPoints;                             // 0x05C8   (0x0004)  
	int32_t                                            MaxSkillLevel;                                              // 0x05CC   (0x0004)  
	int32_t                                            NumSkillLevelsBetweenUpgrades;                              // 0x05D0   (0x0004)  
	float                                              FlawOfferCooldown;                                          // 0x05D4   (0x0004)  
	float                                              FlawOfferTimeBonus;                                         // 0x05D8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x05DC   (0x0004)  MISSED
	class UFlawTree*                                   FlawTree;                                                   // 0x05E0   (0x0008)  
	TMap<EGameDifficulty, int32_t>                     MaxFlawLimit;                                               // 0x05E8   (0x0050)  
	TArray<class UFlaw*>                               FlawPtrs;                                                   // 0x0638   (0x0010)  
	TMap<class UClass*, int32_t>                       LoadedFlawCounts;                                           // 0x0648   (0x0050)  
	SDK_UNDEFINED(80,633) /* TSet<UClass*> */          __um(FlawsChosen);                                          // 0x0698   (0x0050)  
	SDK_UNDEFINED(80,634) /* TSet<UClass*> */          __um(FlawsRejected);                                        // 0x06E8   (0x0050)  
	class UClass*                                      PendingOfferFlaw;                                           // 0x0738   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0740   (0x0008)  MISSED
	SDK_UNDEFINED(80,635) /* TSet<UAudioLogDataAsset*> */ __um(AudioLogs);                                         // 0x0748   (0x0050)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x0798   (0x0020)  MISSED
	class UClass*                                      Aptitude;                                                   // 0x07B8   (0x0008)  
	unsigned char                                      UnknownData04_7[0x1F8];                                     // 0x07C0   (0x01F8)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerInfoComponent.StopCurrentAudioLog
	// void StopCurrentAudioLog();                                                                                              // [0xbb4890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.SetGenderDebug
	// void SetGenderDebug(EGender GenderIn);                                                                                   // [0x1862d50] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.SetFlawAsOfferable
	// void SetFlawAsOfferable(class UClass* Flaw, float OfferChance, bool bIgnoreTimer);                                       // [0x18939c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.SetAptitudeDebug
	// void SetAptitudeDebug(FString AptitudeName);                                                                             // [0x18938c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.ResumeCurrentAudioLog
	// void ResumeCurrentAudioLog();                                                                                            // [0xbb4890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.RespecSkillPoints
	// void RespecSkillPoints();                                                                                                // [0x18938a0] Exec|Native|Public   
	// Function /Script/Indiana.PlayerInfoComponent.RespecPerks
	// void RespecPerks(bool bNoCost);                                                                                          // [0x1893810] Exec|Native|Public   
	// Function /Script/Indiana.PlayerInfoComponent.ResetQuest
	// void ResetQuest(FString QuestName, TArray<int32_t> ResetEventIDs);                                                       // [0x18936c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.ResetFlawOfferTimer
	// void ResetFlawOfferTimer();                                                                                              // [0x18936a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.QuestTriggerAddendum
	// void QuestTriggerAddendum(FString QuestName, int32_t AddendumNode);                                                      // [0x18935b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.QuestStart
	// void QuestStart(FString QuestName);                                                                                      // [0x1893500] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.QuestListAll
	// void QuestListAll();                                                                                                     // [0x18934e0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.QuestFail
	// void QuestFail(FString QuestName);                                                                                       // [0x1893430] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.QuestComplete
	// void QuestComplete(FString QuestName);                                                                                   // [0x1893380] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.PlayAudioLog
	// void PlayAudioLog(int32_t AudioLogIndex);                                                                                // [0x1893220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.PauseCurrentAudioLog
	// void PauseCurrentAudioLog();                                                                                             // [0xbb4890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bInCombat, bool bRestoring);                                                              // [0x1892f30] Final|Native|Private 
	// Function /Script/Indiana.PlayerInfoComponent.IsPlayingAudioLog
	// bool IsPlayingAudioLog();                                                                                                // [0xb9da20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerInfoComponent.FlawOfferRejectDebug
	// void FlawOfferRejectDebug();                                                                                             // [0x1892d20] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawOfferDebug
	// void FlawOfferDebug(FString FlawName);                                                                                   // [0x1892c70] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawOfferAcceptDebug
	// void FlawOfferAcceptDebug();                                                                                             // [0x1892c50] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawClearOfferDebug
	// void FlawClearOfferDebug();                                                                                              // [0x1892c30] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawClearDebug
	// void FlawClearDebug(FString FlawName);                                                                                   // [0x1892b80] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawAddDebug
	// void FlawAddDebug(FString FlawName);                                                                                     // [0x1892ad0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.EnableFlawOffers
	// void EnableFlawOffers();                                                                                                 // [0x1892970] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.DisableFlawOffers
	// void DisableFlawOffers();                                                                                                // [0x1892950] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.AddXPDebug
	// void AddXPDebug(int32_t XP);                                                                                             // [0x1892350] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.AddAudioLog
	// void AddAudioLog(FAudioLogDefinition& AudioLogDefinition);                                                               // [0x1892110] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.PlayerInteractionComponent
/// Size: 0x0228 (552 bytes) (0x0000F0 - 0x000228) align 8 MaxSize: 0x0228
class UPlayerInteractionComponent : public UInteractionComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x00F0   (0x0030)  MISSED
	float                                              SweptInteractionTraceRadius;                                // 0x0120   (0x0004)  
	float                                              ProximityHighlightRange;                                    // 0x0124   (0x0004)  
	float                                              DirectHighlightRange;                                       // 0x0128   (0x0004)  
	float                                              EvidenceInteractRange;                                      // 0x012C   (0x0004)  
	unsigned char                                      UnknownData01_6[0x28];                                      // 0x0130   (0x0028)  MISSED
	TArray<class UInteractableComponent*>              InteractablesInRange;                                       // 0x0158   (0x0010)  
	unsigned char                                      UnknownData02_7[0xC0];                                      // 0x0168   (0x00C0)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerInteractionComponent.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x1897370] Final|Native|Protected 
	// Function /Script/Indiana.PlayerInteractionComponent.OnHighlightModeChanged
	// void OnHighlightModeChanged(bool bVisible);                                                                              // [0x1897400] Final|Native|Protected 
	// Function /Script/Indiana.PlayerInteractionComponent.OnDiscrepencyAmplifierActivated
	// void OnDiscrepencyAmplifierActivated(bool bActivated);                                                                   // [0x18972e0] Final|Native|Protected 
};

/// Struct /Script/Indiana.LootOnBreakdown
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FLootOnBreakdown
{ 
	ESkill                                             Skill;                                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            MinSkill;                                                   // 0x0004   (0x0004)  
	class ULootTableData*                              LootTable;                                                  // 0x0008   (0x0008)  
};

/// Class /Script/Indiana.PlayerInventoryComponent
/// Size: 0x0318 (792 bytes) (0x000238 - 0x000318) align 8 MaxSize: 0x0318
class UPlayerInventoryComponent : public UCharacterInventoryComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0238   (0x0030)  MISSED
	TArray<FLootOnBreakdown>                           LootOnWeaponBreakdown;                                      // 0x0268   (0x0010)  
	TArray<FLootOnBreakdown>                           LootOnArmorBreakdown;                                       // 0x0278   (0x0010)  
	float                                              BaseCarryingCapacity;                                       // 0x0288   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x028C   (0x0004)  MISSED
	class URpgStat*                                    LootOnBreakdownChanceStat;                                  // 0x0290   (0x0008)  
	class URpgStat*                                    ModFinderFieldRepairStat;                                   // 0x0298   (0x0008)  
	class URpgStat*                                    ScavengeMaxItemLevelStat;                                   // 0x02A0   (0x0008)  
	unsigned char                                      UnknownData02_7[0x70];                                      // 0x02A8   (0x0070)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerInventoryComponent.VendorRepairItemDebug
	// void VendorRepairItemDebug(FName& ItemName);                                                                             // [0x1897b70] Final|Exec|Native|Protected|HasOutParms 
	// Function /Script/Indiana.PlayerInventoryComponent.SetWeaponHealthDebug
	// void SetWeaponHealthDebug(float Percent);                                                                                // [0x1897af0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.SetItemHealthDebug
	// void SetItemHealthDebug(FName& ItemName, float Percent);                                                                 // [0x1897a10] Final|Exec|Native|Protected|HasOutParms 
	// Function /Script/Indiana.PlayerInventoryComponent.SetHelmetHealthDebug
	// void SetHelmetHealthDebug(float Percent);                                                                                // [0x1897990] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.SetArmorHealthDebug
	// void SetArmorHealthDebug(float Percent);                                                                                 // [0x1897910] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.RepairItemDebug
	// void RepairItemDebug(FName& ItemName, bool bFieldRepair);                                                                // [0x1897830] Final|Exec|Native|Protected|HasOutParms 
	// Function /Script/Indiana.PlayerInventoryComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18976a0] Final|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.OnCompanionRegistered
	// void OnCompanionRegistered(class AIndianaAiCharacter* Character, bool bAdded);                                           // [0x1897210] Final|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.IgnoreEncumbrance
	// void IgnoreEncumbrance(bool bIgnored);                                                                                   // [0x1896fc0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.GiveTools
	// void GiveTools();                                                                                                        // [0x1896fa0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.BreakDownItemDebug
	// void BreakDownItemDebug(FName& ItemName, bool bFieldBreakdown);                                                          // [0x1896d40] Final|Exec|Native|Protected|HasOutParms 
};

/// Struct /Script/Indiana.DodgeInputRange
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FDodgeInputRange
{ 
	float                                              VerticalWeight;                                             // 0x0000   (0x0004)  
	float                                              HorizontalWeight;                                           // 0x0004   (0x0004)  
};

/// Struct /Script/Indiana.DodgeProperties
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 MaxSize: 0x001C
struct FDodgeProperties
{ 
	FVector                                            RelativeDirection;                                          // 0x0000   (0x000C)  
	float                                              DodgeVelocity;                                              // 0x000C   (0x0004)  
	float                                              DodgeVelocityZ;                                             // 0x0010   (0x0004)  
	float                                              SlideTime;                                                  // 0x0014   (0x0004)  
	float                                              SlideFriction;                                              // 0x0018   (0x0004)  
};

/// Class /Script/Indiana.PlayerMovementComponent
/// Size: 0x13F0 (5104 bytes) (0x000E00 - 0x0013F0) align 16 MaxSize: 0x13F0
class UPlayerMovementComponent : public UIndianaCharMovementComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x60];                                      // 0x0E00   (0x0060)  MISSED
	float                                              StrafeMaxSpeedScalar;                                       // 0x0E60   (0x0004)  
	float                                              BackwardsMaxSpeedScalar;                                    // 0x0E64   (0x0004)  
	float                                              LookStickBaseTurnRate;                                      // 0x0E68   (0x0004)  
	float                                              LookStickExponent;                                          // 0x0E6C   (0x0004)  
	float                                              LookStickTurnRampDelay;                                     // 0x0E70   (0x0004)  
	float                                              LookStickTurnRampTime;                                      // 0x0E74   (0x0004)  
	float                                              LookStickTurnRampMultiplier;                                // 0x0E78   (0x0004)  
	float                                              LookStickAccelerationDuration;                              // 0x0E7C   (0x0004)  
	float                                              LookStickBasePitchRate;                                     // 0x0E80   (0x0004)  
	float                                              LookStickMinTurnRateScalar;                                 // 0x0E84   (0x0004)  
	float                                              LookStickMaxTurnRateScalar;                                 // 0x0E88   (0x0004)  
	float                                              AngularDeadZoneRatio;                                       // 0x0E8C   (0x0004)  
	float                                              SprintRequiredMovementInputHalfAngle;                       // 0x0E90   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0E94   (0x0004)  MISSED
	FRuntimeFloatCurve                                 LookStickRampCurve;                                         // 0x0E98   (0x0088)  
	FRuntimeFloatCurve                                 LookStickInputYawCurve;                                     // 0x0F20   (0x0088)  
	FRuntimeFloatCurve                                 LookStickInputPitchCurve;                                   // 0x0FA8   (0x0088)  
	FRuntimeFloatCurve                                 LookStickPitchAdjustmentCurve;                              // 0x1030   (0x0088)  
	FRuntimeFloatCurve                                 LookStickAccelerationCurve;                                 // 0x10B8   (0x0088)  
	float                                              SprintFoVAdjustment;                                        // 0x1140   (0x0004)  
	float                                              SprintFoVAdjustmentTime;                                    // 0x1144   (0x0004)  
	class URpgStat*                                    DodgeVelocityStat;                                          // 0x1148   (0x0008)  
	float                                              FallJumpGraceTime;                                          // 0x1150   (0x0004)  
	float                                              InAirJumpThreshold;                                         // 0x1154   (0x0004)  
	float                                              LeapAngle;                                                  // 0x1158   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x115C   (0x0004)  MISSED
	class UMaterialParameterCollection*                PlayerMovementParams;                                       // 0x1160   (0x0008)  
	class UClass*                                      FallingDamageSpell;                                         // 0x1168   (0x0008)  
	class UForceFeedbackEffect*                        ForceFeedbackFallingDamage;                                 // 0x1170   (0x0008)  
	unsigned char                                      UnknownData03_6[0x70];                                      // 0x1178   (0x0070)  MISSED
	TMap<EDodgeDirection, FDodgeInputRange>            DodgeInputRanges;                                           // 0x11E8   (0x0050)  
	TMap<EDodgeDirection, FDodgeProperties>            DodgeProperties;                                            // 0x1238   (0x0050)  
	float                                              DodgeVelocity;                                              // 0x1288   (0x0004)  
	float                                              DodgeVelocityZ;                                             // 0x128C   (0x0004)  
	float                                              SlideTime;                                                  // 0x1290   (0x0004)  
	float                                              MinTimeBetweenDodge;                                        // 0x1294   (0x0004)  
	float                                              SlideFriction;                                              // 0x1298   (0x0004)  
	float                                              DodgeStaminaCost;                                           // 0x129C   (0x0004)  
	float                                              DodgeTimeLimit;                                             // 0x12A0   (0x0004)  
	EDodgeDirection                                    DefaultDodgeDirection;                                      // 0x12A4   (0x0001)  
	unsigned char                                      UnknownData04_6[0xB];                                       // 0x12A5   (0x000B)  MISSED
	float                                              LowGravDodgeTimeLimit;                                      // 0x12B0   (0x0004)  
	float                                              MaxCameraYawAngle;                                          // 0x12B4   (0x0004)  
	unsigned char                                      UnknownData05_6[0x50];                                      // 0x12B8   (0x0050)  MISSED
	SDK_UNDEFINED(16,636) /* TArray<TWeakObjectPtr<AIndianaAiCharacter*>> */ __um(StuckCharacters);                // 0x1308   (0x0010)  
	float                                              MinUnstuckInputMagnitude;                                   // 0x1318   (0x0004)  
	float                                              UnstuckInputTime;                                           // 0x131C   (0x0004)  
	float                                              UnstuckInputSmoothRate;                                     // 0x1320   (0x0004)  
	float                                              MaxUnstuckInputAngle;                                       // 0x1324   (0x0004)  
	float                                              UnstuckInputLocationSmoothRate;                             // 0x1328   (0x0004)  
	float                                              MaxDeltaUnstuckInputLocation;                               // 0x132C   (0x0004)  
	float                                              MaxUnstuckCollisionAngle;                                   // 0x1330   (0x0004)  
	unsigned char                                      UnknownData06_6[0x2C];                                      // 0x1334   (0x002C)  MISSED
	float                                              PhaseModeNoBumpTime;                                        // 0x1360   (0x0004)  
	unsigned char                                      UnknownData07_6[0x2C];                                      // 0x1364   (0x002C)  MISSED
	int32_t                                            NumAcrophobiaChecks;                                        // 0x1390   (0x0004)  
	float                                              AcrophobiaCheckInterval;                                    // 0x1394   (0x0004)  
	float                                              AcrophobiaDistanceFromPlayer;                               // 0x1398   (0x0004)  
	float                                              AcrophobiaDistanceGround;                                   // 0x139C   (0x0004)  
	float                                              AcrophobiaZOffset;                                          // 0x13A0   (0x0004)  
	unsigned char                                      UnknownData08_6[0x1C];                                      // 0x13A4   (0x001C)  MISSED
	float                                              DistancePerFootstepCrouched;                                // 0x13C0   (0x0004)  
	float                                              DistancePerFootstepRun;                                     // 0x13C4   (0x0004)  
	float                                              DistancePerFootstepSprint;                                  // 0x13C8   (0x0004)  
	float                                              DistancePerFootstepClimbing;                                // 0x13CC   (0x0004)  
	float                                              AimingFootstepRateMultiplier;                               // 0x13D0   (0x0004)  
	float                                              FirstFootstepMultiplier;                                    // 0x13D4   (0x0004)  
	float                                              LowGravDistancePerFootstepScalar;                           // 0x13D8   (0x0004)  
	unsigned char                                      UnknownData09_6[0x8];                                       // 0x13DC   (0x0008)  MISSED
	float                                              MoveCancelAutoSprintGracePeriodInSeconds;                   // 0x13E4   (0x0004)  
	unsigned char                                      UnknownData10_7[0x8];                                       // 0x13E8   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerMovementComponent.OnUnlockAbilityChanged
	// void OnUnlockAbilityChanged(EUnlockAbility Ability);                                                                     // [0x18977b0] Final|Native|Protected 
	// Function /Script/Indiana.PlayerMovementComponent.OnTakeFallingDamage
	// void OnTakeFallingDamage(float FallingDamage);                                                                           // [0x1897730] Final|Native|Protected 
	// Function /Script/Indiana.PlayerMovementComponent.ControllerSensitivityUpdated
	// void ControllerSensitivityUpdated(float SensitivityIn);                                                                  // [0x1896ea0] Final|Native|Private 
	// Function /Script/Indiana.PlayerMovementComponent.ControllerADSSensitivityUpdated
	// void ControllerADSSensitivityUpdated(float SensititivityIn);                                                             // [0x1896e20] Final|Native|Private 
	// Function /Script/Indiana.PlayerMovementComponent.AcrophobiaEnableDebug
	// void AcrophobiaEnableDebug(bool bEnable);                                                                                // [0x1896cb0] Final|Exec|Native|Protected 
};

/// Class /Script/Indiana.PlayerPresetData
/// Size: 0x0090 (144 bytes) (0x000038 - 0x000090) align 8 MaxSize: 0x0090
class UPlayerPresetData : public UDataAsset
{ 
public:
	int32_t                                            StartingLevel;                                              // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TMap<class UClass*, int32_t>                       PerkMap;                                                    // 0x0040   (0x0050)  
};

/// Class /Script/Indiana.PlayerShoutComponent
/// Size: 0x0108 (264 bytes) (0x000100 - 0x000108) align 8 MaxSize: 0x0108
class UPlayerShoutComponent : public UShoutComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0100   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerShoutComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x1897140] Final|Native|Private 
};

/// Class /Script/Indiana.PlayerStatsWidget
/// Size: 0x0348 (840 bytes) (0x000300 - 0x000348) align 8 MaxSize: 0x0348
class UPlayerStatsWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              CurrencyValueTextBlock;                                     // 0x0300   (0x0008)  
	class UTextBlockBase*                              WeightValueTextBlock;                                       // 0x0308   (0x0008)  
	class UTextBlockBase*                              WeaponPartsTextBlock;                                       // 0x0310   (0x0008)  
	class UTextBlockBase*                              ArmorPartsTextBlock;                                        // 0x0318   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0320   (0x0008)  
	class UTextBlockBase*                              LevelTextBlock;                                             // 0x0328   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0330   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerStatsWidget.SetXPRatio
	// void SetXPRatio(float XPRatio);                                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.PlayerStatsWidget.OnPlayerWeightChange
	// void OnPlayerWeightChange();                                                                                             // [0x1897680] Final|Native|Protected 
	// Function /Script/Indiana.PlayerStatsWidget.OnLevelChanged
	// void OnLevelChanged(int32_t NewLevel);                                                                                   // [0x18975f0] Final|Native|Protected 
	// Function /Script/Indiana.PlayerStatsWidget.OnItemPartsChanged
	// void OnItemPartsChanged(int32_t WeaponParts, int32_t ArmorParts);                                                        // [0x1897520] Final|Native|Protected 
	// Function /Script/Indiana.PlayerStatsWidget.OnItemEquipped
	// void OnItemEquipped(class UItem* ItemEquipped);                                                                          // [0x1897490] Final|Native|Protected 
};

/// Class /Script/Indiana.PlayerTargetingComponent
/// Size: 0x0250 (592 bytes) (0x0000E8 - 0x000250) align 8 MaxSize: 0x0250
class UPlayerTargetingComponent : public UTargetingComponent
{ 
public:
	SDK_UNDEFINED(16,637) /* FMulticastInlineDelegate */ __um(OnScreenSpaceTargetChanged);                         // 0x00E8   (0x0010)  
	float                                              ReticleVerticalOffset;                                      // 0x00F8   (0x0004)  
	float                                              ReticleHorizontalOffset;                                    // 0x00FC   (0x0004)  
	unsigned char                                      UnknownData00_7[0x150];                                     // 0x0100   (0x0150)  MISSED


	/// Functions
	// Function /Script/Indiana.PlayerTargetingComponent.KillTarget
	// void KillTarget();                                                                                                       // [0x1897050] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerTargetingComponent.DrawPlayerTargetingTrace
	// void DrawPlayerTargetingTrace(float PersistTime);                                                                        // [0x1896f20] Final|Exec|Native|Public|Const 
};

/// Class /Script/Indiana.PlayFxEventEffect
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align 8 MaxSize: 0x0050
class UPlayFxEventEffect : public UEventEffect
{ 
public:
	class UParticleSystem*                             Fx;                                                         // 0x0030   (0x0008)  
	float                                              Scale;                                                      // 0x0038   (0x0004)  
	bool                                               bAttachToMesh;                                              // 0x003C   (0x0001)  
	EMeshTarget                                        TargetMesh;                                                 // 0x003D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x003E   (0x0002)  MISSED
	FName                                              AttachSocketName;                                           // 0x0040   (0x0008)  
	bool                                               bStaticLocation;                                            // 0x0048   (0x0001)  
	bool                                               bHideDuringScoped;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x004A   (0x0006)  MISSED
};

/// Class /Script/Indiana.PlayLayeredFxEventEffect
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UPlayLayeredFxEventEffect : public UPlayFxEventEffect
{ 
public:
};

/// Class /Script/Indiana.PlaySoundEventEffect
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UPlaySoundEventEffect : public UEventEffect
{ 
public:
};

/// Class /Script/Indiana.PointOfInterestComponent
/// Size: 0x0270 (624 bytes) (0x000268 - 0x000270) align 16 MaxSize: 0x0270
class UPointOfInterestComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0268   (0x0008)  MISSED
};

/// Class /Script/Indiana.PointOfInterest
/// Size: 0x02F8 (760 bytes) (0x0002E8 - 0x0002F8) align 8 MaxSize: 0x02F8
class APointOfInterest : public ABasicMapFloorTrackedActor
{ 
public:
	class UPointOfInterestData*                        PointOfInterestData;                                        // 0x02E8   (0x0008)  
	class UStaticMeshComponent*                        DiscoveryBounds;                                            // 0x02F0   (0x0008)  


	/// Functions
	// Function /Script/Indiana.PointOfInterest.OnBeginOverlap
	// void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);                                            // [0x1897070] Final|Native|Protected 
};

/// Class /Script/Indiana.PointOfInterestData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UPointOfInterestData : public UDataAsset
{ 
public:
	EPointOfInterestLocationType                       LocationType;                                               // 0x0038   (0x0001)  
	EPointOfInterestXPType                             XPType;                                                     // 0x0039   (0x0001)  
	EPointOfInterestState                              InitialState;                                               // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x003B   (0x0001)  MISSED
	FLocString                                         Name;                                                       // 0x003C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Indiana.InterestStateTextures
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FInterestStateTextures
{ 
	class UTexture2D*                                  DiscoveredTexture;                                          // 0x0000   (0x0008)  
	class UTexture2D*                                  UnknownTexture;                                             // 0x0008   (0x0008)  
	class UTexture2D*                                  MentionedTexture;                                           // 0x0010   (0x0008)  
};

/// Class /Script/Indiana.PointOfInterestTextureData
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class UPointOfInterestTextureData : public UDataAsset
{ 
public:
	TMap<EPointOfInterestLocationType, FInterestStateTextures> POITextureMap;                                      // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.PointOfInterestTooltipWidget
/// Size: 0x0308 (776 bytes) (0x000300 - 0x000308) align 8 MaxSize: 0x0308
class UPointOfInterestTooltipWidget : public UToolTipContentWidget
{ 
public:
	class UTextBlockBase*                              PointOfInterestTextBlock;                                   // 0x0300   (0x0008)  
};

/// Struct /Script/Indiana.PONRQuest
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FPONRQuest
{ 
	FString                                            QuestName;                                                  // 0x0000   (0x0010)  
	TArray<int32_t>                                    QuestEventIDs;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Indiana.ConversationReference
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FConversationReference
{ 
	FGuid                                              ID;                                                         // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.ConversationPoNR
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 MaxSize: 0x0068
struct FConversationPoNR
{ 
	FName                                              Filename;                                                   // 0x0000   (0x0008)  
	FConversationReference                             Conversation;                                               // 0x0008   (0x0010)  
	TMap<FString, int32_t>                             GlobalVariables;                                            // 0x0018   (0x0050)  
};

/// Struct /Script/Indiana.NodeSet
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FNodeSet
{ 
	FConversationReference                             Conversation;                                               // 0x0000   (0x0010)  
	TArray<int32_t>                                    NodeIDs;                                                    // 0x0010   (0x0010)  
};

/// Struct /Script/Indiana.NodeVarConditionalVarReset
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FNodeVarConditionalVarReset
{ 
	FName                                              ConversationName;                                           // 0x0000   (0x0008)  
	FConversationReference                             Conversation;                                               // 0x0008   (0x0010)  
	int32_t                                            ConversationNode;                                           // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FString                                            TestGlobalVar;                                              // 0x0020   (0x0010)  
	int32_t                                            TestGlobalVarValue;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	FString                                            TargetGlobalVar;                                            // 0x0038   (0x0010)  
	int32_t                                            TargetGlobalVarValue;                                       // 0x0048   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Indiana.PointOfNoReturnRollbackData
/// Size: 0x0110 (272 bytes) (0x000030 - 0x000110) align 8 MaxSize: 0x0110
class UPointOfNoReturnRollbackData : public UObject
{ 
public:
	TMap<FString, int32_t>                             GlobalVariables;                                            // 0x0030   (0x0050)  
	TArray<FPONRQuest>                                 Quests;                                                     // 0x0080   (0x0010)  
	TArray<class UClass*>                              ItemsToRemove;                                              // 0x0090   (0x0010)  
	TArray<FConversationPoNR>                          ConversationsToClear;                                       // 0x00A0   (0x0010)  
	TArray<FNodeSet>                                   ConversationNodesToClear;                                   // 0x00B0   (0x0010)  
	TArray<FString>                                    LevelsToReset;                                              // 0x00C0   (0x0010)  
	int32_t                                            TartarusAreaNameStringID;                                   // 0x00D0   (0x0004)  
	FName                                              PlayerShipLevelName;                                        // 0x00D4   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	FString                                            EVShipDestination;                                          // 0x00E0   (0x0010)  
	TArray<FNodeVarConditionalVarReset>                NodeVarConditionalResets;                                   // 0x00F0   (0x0010)  
	FVector                                            DesiredPlayerLocation;                                      // 0x0100   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x010C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.PointOfNoReturnRollbackData.FixQuestsBP
	// void FixQuestsBP();                                                                                                      // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.PointOfNoReturnRollbackData.FixItemsBP
	// void FixItemsBP();                                                                                                       // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.PointOfNoReturnRollbackData.FixGlobalVarsBP
	// void FixGlobalVarsBP();                                                                                                  // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.PointOfNoReturnRollbackData.FixConversationsBP
	// void FixConversationsBP();                                                                                               // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.PoseableMeshModVisual
/// Size: 0x0140 (320 bytes) (0x0000C0 - 0x000140) align 8 MaxSize: 0x0140
class UPoseableMeshModVisual : public UMeshModVisual
{ 
public:
	TWeakObjectPtr<class USkeletalMesh*>               Mesh;                                                       // 0x00C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x00C8   (0x0020)  MISSED
	FName                                              AttachSocket;                                               // 0x00E8   (0x0008)  
	TMap<FName, FName>                                 BonePoseSockets;                                            // 0x00F0   (0x0050)  
};

/// Class /Script/Indiana.PosedSkeletalMeshModVisual
/// Size: 0x00E8 (232 bytes) (0x0000C0 - 0x0000E8) align 8 MaxSize: 0x00E8
class UPosedSkeletalMeshModVisual : public UMeshModVisual
{ 
public:
	TWeakObjectPtr<class USkeletalMesh*>               Mesh;                                                       // 0x00C0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x00C8   (0x0020)  MISSED
};

/// Class /Script/Indiana.PostProcessEventEffect
/// Size: 0x0098 (152 bytes) (0x000030 - 0x000098) align 8 MaxSize: 0x0098
class UPostProcessEventEffect : public UEventEffect
{ 
public:
	class UMaterial*                                   Material;                                                   // 0x0030   (0x0008)  
	TMap<FName, FRuntimeFloatCurve>                    CurveParams;                                                // 0x0038   (0x0050)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0088   (0x0010)  MISSED
};

/// Struct /Script/Indiana.PostProcessFX
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 MaxSize: 0x0078
struct FPostProcessFX
{ 
	class UMaterialInterface*                          Material;                                                   // 0x0000   (0x0008)  
	class UParticleSystem*                             Particle;                                                   // 0x0008   (0x0008)  
	bool                                               bPersistentParticle;                                        // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	TMap<FName, FRuntimeFloatCurve>                    Params;                                                     // 0x0018   (0x0050)  
	class UMaterialInstanceDynamic*                    DynamicMaterial;                                            // 0x0068   (0x0008)  
	class UParticleSystemComponent*                    ActiveParticleSystem;                                       // 0x0070   (0x0008)  
};

/// Class /Script/Indiana.PostProcessStatusEffect
/// Size: 0x0208 (520 bytes) (0x000188 - 0x000208) align 8 MaxSize: 0x0208
class UPostProcessStatusEffect : public UStatusEffect
{ 
public:
	FPostProcessFX                                     PostProcessData;                                            // 0x0188   (0x0078)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0200   (0x0008)  MISSED
};

/// Class /Script/Indiana.PreloadAssetList
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UPreloadAssetList : public UDataAsset
{ 
public:
	TArray<class UObject*>                             PreloadAssets;                                              // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.PresenceData
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UPresenceData : public UDataAsset
{ 
public:
	FString                                            PresenceTag;                                                // 0x0038   (0x0010)  
	FLocString                                         PresenceString;                                             // 0x0048   (0x0008)  
};

/// Class /Script/Indiana.PreviewCharacterAnimInstance
/// Size: 0x0580 (1408 bytes) (0x0004A0 - 0x000580) align 16 MaxSize: 0x0580
class UPreviewCharacterAnimInstance : public UIndianaAnimInstance
{ 
public:
	class AIndianaCharacterDummy*                      PreviewCharacter;                                           // 0x04A0   (0x0008)  
	class UPreviewWeaponAnimations*                    PreviewAnimations;                                          // 0x04A8   (0x0008)  
	TArray<FRandomPlayerSequenceEntryNamed>            DefaultFidgets;                                             // 0x04B0   (0x0010)  
	TMap<EUISelectionState, class UAnimSequence*>      UIDummyAnimData;                                            // 0x04C0   (0x0050)  
	EUISelectionState                                  UISelectionState;                                           // 0x0510   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0511   (0x0003)  MISSED
	float                                              LegIKStrength;                                              // 0x0514   (0x0004)  
	FVector                                            HipOffset;                                                  // 0x0518   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0524   (0x0008)  MISSED
	FRotator                                           HipRotation;                                                // 0x052C   (0x000C)  
	FRotator                                           SpineCounterRotation;                                       // 0x0538   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0544   (0x0004)  MISSED
	TArray<FRandomPlayerSequenceEntryNamed>            FigetEntry0;                                                // 0x0548   (0x0010)  
	TArray<FRandomPlayerSequenceEntryNamed>            FigetEntry1;                                                // 0x0558   (0x0010)  
	bool                                               bIsEntry0;                                                  // 0x0568   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0569   (0x0003)  MISSED
	int32_t                                            FidgetUpdateIndex;                                          // 0x056C   (0x0004)  
	bool                                               bIkLeftHand;                                                // 0x0570   (0x0001)  
	unsigned char                                      UnknownData04_7[0xF];                                       // 0x0571   (0x000F)  MISSED


	/// Functions
	// Function /Script/Indiana.PreviewCharacterAnimInstance.SetSelectionState
	// void SetSelectionState(EUISelectionState InSelectionState);                                                              // [0x189c3a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.PreviewWeaponAnimations
/// Size: 0x0210 (528 bytes) (0x000200 - 0x000210) align 8 MaxSize: 0x0210
class UPreviewWeaponAnimations : public UWeaponVisuals
{ 
public:
	TArray<FRandomPlayerSequenceEntryNamed>            Fidgets;                                                    // 0x0200   (0x0010)  
};

/// Class /Script/Indiana.Projectile
/// Size: 0x0598 (1432 bytes) (0x0002B8 - 0x000598) align 8 MaxSize: 0x0598
class AProjectile : public AActor
{ 
public:
	class UIndianaProjMovementComponent*               ProjectileMovement;                                         // 0x02B8   (0x0008)  
	class USphereComponent*                            MainCollisionComponent;                                     // 0x02C0   (0x0008)  
	class USphereComponent*                            DamageCollisionComponent;                                   // 0x02C8   (0x0008)  
	class USceneComponent*                             VisualRoot;                                                 // 0x02D0   (0x0008)  
	bool                                               bOverlapDamageCollision;                                    // 0x02D8   (0x0001)  
	bool                                               bSweepOverlapDamageCollision;                               // 0x02D9   (0x0001)  
	bool                                               bLineCheckOverlapDamageCollision;                           // 0x02DA   (0x0001)  
	bool                                               bSubstepLineChecks;                                         // 0x02DB   (0x0001)  
	float                                              LineCheckRate;                                              // 0x02DC   (0x0004)  
	float                                              ProjectileLifetime;                                         // 0x02E0   (0x0004)  
	float                                              Impulse;                                                    // 0x02E4   (0x0004)  
	float                                              ProjectileBounceMinForce;                                   // 0x02E8   (0x0004)  
	float                                              ShiftedVisualsInterpSpeed;                                  // 0x02EC   (0x0004)  
	bool                                               bDestroyOnImpact;                                           // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02F1   (0x0007)  MISSED
	class UEventEffects*                               ImpactEffects;                                              // 0x02F8   (0x0008)  
	class UImpactDataSet*                              ImpactDataSet;                                              // 0x0300   (0x0008)  
	class UImpactDataSet*                              BounceDataSet;                                              // 0x0308   (0x0008)  
	FDamageDescription                                 ProjectileDamage;                                           // 0x0310   (0x0078)  
	unsigned char                                      UnknownData01_6[0xB8];                                      // 0x0388   (0x00B8)  MISSED
	class UTracerSoundData*                            TracerSound;                                                // 0x0440   (0x0008)  
	unsigned char                                      UnknownData02_6[0x120];                                     // 0x0448   (0x0120)  MISSED
	FEventEffectState                                  EventEffectState;                                           // 0x0568   (0x0020)  
	class UAkAudioEvent*                               AmbientNoiseEvent;                                          // 0x0588   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0590   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.Projectile.OnHit
	// void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x189bc70] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Projectile.OnDamageEndOverlap
	// void OnDamageEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x189ba40] Final|Native|Protected 
	// Function /Script/Indiana.Projectile.OnDamageBeginOverlap
	// void OnDamageBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x189b820] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Projectile.OnBounce
	// void OnBounce(FHitResult& ImpactResult, FVector& ImpactVelocity);                                                        // [0x189b6f0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Projectile.GetOverlapCollisionSize
	// float GetOverlapCollisionSize();                                                                                         // [0x189b6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Projectile.GetCollisionSize
	// float GetCollisionSize();                                                                                                // [0x189b690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Projectile.GetChargeAmount
	// float GetChargeAmount();                                                                                                 // [0x189b670] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ProjectileLauncher
/// Size: 0x0520 (1312 bytes) (0x000478 - 0x000520) align 8 MaxSize: 0x0520
class AProjectileLauncher : public ADestructible
{ 
public:
	class UClass*                                      ProjectileClass;                                            // 0x0478   (0x0008)  
	FDamageLevelScaler                                 ProjectileDamageLevelScaler;                                // 0x0480   (0x0090)  
	class UArrowComponent*                             ArrowComponent;                                             // 0x0510   (0x0008)  
	FName                                              LaunchSocketName;                                           // 0x0518   (0x0008)  
};

/// Class /Script/Indiana.PS5ActivityManager
/// Size: 0x0090 (144 bytes) (0x000030 - 0x000090) align 8 MaxSize: 0x0090
class UPS5ActivityManager : public UActivityManager
{ 
public:
	unsigned char                                      UnknownData00_1[0x60];                                      // 0x0030   (0x0060)  MISSED


	/// Functions
	// Function /Script/Indiana.PS5ActivityManager.OnQueryLatestSaveFinished
	// void OnQueryLatestSaveFinished(FString LatestSaveName, bool bHasSaves);                                                  // [0x189bff0] Final|Native|Protected 
	// Function /Script/Indiana.PS5ActivityManager.OnPreLoadMap
	// void OnPreLoadMap(FString MapName);                                                                                      // [0x189bf40] Final|Native|Protected 
	// Function /Script/Indiana.PS5ActivityManager.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x189be50] Final|Native|Protected 
};

/// Class /Script/Indiana.PushDisableStatusEffect
/// Size: 0x01D8 (472 bytes) (0x0001A0 - 0x0001D8) align 8 MaxSize: 0x01D8
class UPushDisableStatusEffect : public UAnimDisableStatusEffect
{ 
public:
	float                                              PushSpeed;                                                  // 0x01A0   (0x0004)  
	float                                              PushSpeedZ;                                                 // 0x01A4   (0x0004)  
	float                                              SlideFriction;                                              // 0x01A8   (0x0004)  
	float                                              ClearEffectDistanceToOrigin;                                // 0x01AC   (0x0004)  
	float                                              ClearEffectDistanceFromOrigin;                              // 0x01B0   (0x0004)  
	bool                                               bClearEffectUsesSpaceBetweenColliders;                      // 0x01B4   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x01B5   (0x0003)  MISSED
	float                                              AcceptableHeightDifference;                                 // 0x01B8   (0x0004)  
	bool                                               bPushAwayFromOriginActor;                                   // 0x01BC   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1B];                                      // 0x01BD   (0x001B)  MISSED
};

/// Class /Script/Indiana.QuadrupedAnimInstance
/// Size: 0x09E0 (2528 bytes) (0x000950 - 0x0009E0) align 16 MaxSize: 0x09E0
class UQuadrupedAnimInstance : public UTPVAnimInstance
{ 
public:
	FVector                                            PelvisAdjust;                                               // 0x0950   (0x000C)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x095C   (0x000C)  MISSED
	FRotator                                           PelvisRotate;                                               // 0x0968   (0x000C)  
	float                                              IKStrength;                                                 // 0x0974   (0x0004)  
	float                                              GroundRollMultiplier;                                       // 0x0978   (0x0004)  
	float                                              HipTranslationXYBlendSpeed;                                 // 0x097C   (0x0004)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0980   (0x0018)  MISSED
	float                                              ForwardBlendMin;                                            // 0x0998   (0x0004)  
	float                                              ForwardBlendMax;                                            // 0x099C   (0x0004)  
	float                                              BackwardBlendMin;                                           // 0x09A0   (0x0004)  
	float                                              BackwardBlendMax;                                           // 0x09A4   (0x0004)  
	float                                              BackwardAngle;                                              // 0x09A8   (0x0004)  
	float                                              CombatDirection;                                            // 0x09AC   (0x0004)  
	bool                                               bLocoForwardActive;                                         // 0x09B0   (0x0001)  
	bool                                               bLocoBackwardActive;                                        // 0x09B1   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x09B2   (0x0006)  MISSED
	TArray<class UAnimSequence*>                       LocomotionTurnInPlace;                                      // 0x09B8   (0x0010)  
	TArray<class UAnimSequence*>                       CombatTurnInPlace;                                          // 0x09C8   (0x0010)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x09D8   (0x0008)  MISSED
};

/// Class /Script/Indiana.Quest
/// Size: 0x0120 (288 bytes) (0x0000B8 - 0x000120) align 8 MaxSize: 0x0120
class UQuest : public UFlowChart
{ 
public:
	unsigned char                                      UnknownData00_1[0x68];                                      // 0x00B8   (0x0068)  MISSED
};

/// Class /Script/Indiana.QuestAddendumWidget
/// Size: 0x0308 (776 bytes) (0x000300 - 0x000308) align 8 MaxSize: 0x0308
class UQuestAddendumWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              AddendumTextBlock;                                          // 0x0300   (0x0008)  


	/// Functions
	// Function /Script/Indiana.QuestAddendumWidget.OnObjectiveStatusChange
	// void OnObjectiveStatusChange(ECompletionStatus ObjectiveCompletion);                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestDataAsset
/// Size: 0x0090 (144 bytes) (0x000038 - 0x000090) align 8 MaxSize: 0x0090
class UQuestDataAsset : public UDataAsset
{ 
public:
	SDK_UNDEFINED(80,638) /* TMap<EQuestLocation, TWeakObjectPtr<UTexture2D*>> */ __um(QuestImages);               // 0x0038   (0x0050)  
	class UQuestSortingData*                           SortingData;                                                // 0x0088   (0x0008)  
};

/// Class /Script/Indiana.QuestJournalWidget
/// Size: 0x04C0 (1216 bytes) (0x000300 - 0x0004C0) align 8 MaxSize: 0x04C0
class UQuestJournalWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x58];                                      // 0x0300   (0x0058)  MISSED
	class UButtonGroup*                                ButtonGroup;                                                // 0x0358   (0x0008)  
	class UOptionPresenterWidget*                      OptionPresenter;                                            // 0x0360   (0x0008)  
	class UTextBlockBase*                              QuestNameTextBlock;                                         // 0x0368   (0x0008)  
	class UTextBlockBase*                              QuestResolutionTextBlock;                                   // 0x0370   (0x0008)  
	class UScrollBox*                                  QuestListScrollBox;                                         // 0x0378   (0x0008)  
	class UScrollBox*                                  QuestDescriptionScrollBox;                                  // 0x0380   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0388   (0x0008)  
	class UVerticalBox*                                QuestListVerticalBox;                                       // 0x0390   (0x0008)  
	class UQuestListWidget*                            CompletedQuestList;                                         // 0x0398   (0x0008)  
	class UQuestListWidget*                            BotchedQuestList;                                           // 0x03A0   (0x0008)  
	class UTextBlockBase*                              DLCPrefixTextBlock;                                         // 0x03A8   (0x0008)  
	class UTextBlockBase*                              QuestDescriptionTextBlock;                                  // 0x03B0   (0x0008)  
	class UImage*                                      DLCLogoImage;                                               // 0x03B8   (0x0008)  
	class UObjectiveListWidget*                        ObjectiveList;                                              // 0x03C0   (0x0008)  
	class UImage*                                      QuestTypeImage;                                             // 0x03C8   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x03D0   (0x0008)  
	class UButtonBase*                                 InvisibleButton;                                            // 0x03D8   (0x0008)  
	FInputLabelDescription                             MakeActiveDescription_Gamepad;                              // 0x03E0   (0x0038)  
	FInputLabelDescription                             MakeActiveDescription_Keyboard;                             // 0x0418   (0x0038)  
	class UClass*                                      QuestListWidgetClass;                                       // 0x0450   (0x0008)  
	class UTexture2D*                                  INX1LogoImage;                                              // 0x0458   (0x0008)  
	class UTexture2D*                                  INX2LogoImage;                                              // 0x0460   (0x0008)  
	float                                              GamepadZoomMultiplier;                                      // 0x0468   (0x0004)  
	unsigned char                                      UnknownData01_6[0x14];                                      // 0x046C   (0x0014)  MISSED
	class UQuestSortingData*                           SortingData;                                                // 0x0480   (0x0008)  
	unsigned char                                      UnknownData02_7[0x38];                                      // 0x0488   (0x0038)  MISSED


	/// Functions
	// Function /Script/Indiana.QuestJournalWidget.OnQuestImageLoaded
	// void OnQuestImageLoaded();                                                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestListEntryWidget
/// Size: 0x02E8 (744 bytes) (0x0002A0 - 0x0002E8) align 8 MaxSize: 0x02E8
class UQuestListEntryWidget : public UGenericCollapsableListEntry
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x02A0   (0x0018)  MISSED
	class UTexture2D*                                  BaseGameCritPathTexture;                                    // 0x02B8   (0x0008)  
	class UTexture2D*                                  INX01CritPathTexture;                                       // 0x02C0   (0x0008)  
	class UTexture2D*                                  INX01NonCritPathTexture;                                    // 0x02C8   (0x0008)  
	class UTexture2D*                                  INX02CritPathTexture;                                       // 0x02D0   (0x0008)  
	class UTexture2D*                                  INX02NonCritPathTexture;                                    // 0x02D8   (0x0008)  
	class UImage*                                      CritPathImage;                                              // 0x02E0   (0x0008)  


	/// Functions
	// Function /Script/Indiana.QuestListEntryWidget.SetQuestCompletionStatus
	// void SetQuestCompletionStatus(EQuestState QuestState);                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestListEntryWidget.SetActiveQuest
	// void SetActiveQuest(bool bActive);                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestListWidget
/// Size: 0x03B8 (952 bytes) (0x000358 - 0x0003B8) align 8 MaxSize: 0x03B8
class UQuestListWidget : public UGenericCollapsableList
{ 
public:
	unsigned char                                      UnknownData00_1[0x60];                                      // 0x0358   (0x0060)  MISSED
};

/// Class /Script/Indiana.QuestLogComboBoxWidget
/// Size: 0x02D8 (728 bytes) (0x000278 - 0x0002D8) align 8 MaxSize: 0x02D8
class UQuestLogComboBoxWidget : public UUserWidget
{ 
public:
	class UComboBoxStringBase*                         ComboBox;                                                   // 0x0278   (0x0008)  
	unsigned char                                      UnknownData00_7[0x58];                                      // 0x0280   (0x0058)  MISSED


	/// Functions
	// Function /Script/Indiana.QuestLogComboBoxWidget.OnValueChanged
	// void OnValueChanged(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);                                       // [0x189c270] Final|Native|Protected 
	// Function /Script/Indiana.QuestLogComboBoxWidget.OnSortOptionIncrement
	// void OnSortOptionIncrement();                                                                                            // [0x189c250] Final|Native|Public  
};

/// Class /Script/Indiana.QuestLogEntryWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UQuestLogEntryWidget : public UIndianaUserWidget
{ 
public:
	class UBorder*                                     ContentBorder;                                              // 0x0300   (0x0008)  
	class UTextBlockBase*                              QuestStateTextBlock;                                        // 0x0308   (0x0008)  
	class UTextBlockBase*                              QuestTitleTextBlock;                                        // 0x0310   (0x0008)  
	class UVerticalBox*                                ObjectiveVerticalBox;                                       // 0x0318   (0x0008)  
	class UClass*                                      ObjectiveClass;                                             // 0x0320   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0328   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestUpdated
	// void OnQuestUpdated();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestTextFadeOutComplete
	// void OnQuestTextFadeOutComplete();                                                                                       // [0x189c1a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestTextFadeInComplete
	// void OnQuestTextFadeInComplete();                                                                                        // [0x189c180] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestFailed
	// void OnQuestFailed();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestCompleted
	// void OnQuestCompleted();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestAnimationStartOrUpdateComplete
	// void OnQuestAnimationStartOrUpdateComplete();                                                                            // [0x189c160] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestAnimationFinishedComplete
	// void OnQuestAnimationFinishedComplete();                                                                                 // [0x189c140] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogEntryWidget.FadeOutQuestText
	// void FadeOutQuestText();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogEntryWidget.FadeInQuestText
	// void FadeInQuestText();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestLogWidget
/// Size: 0x03C0 (960 bytes) (0x000300 - 0x0003C0) align 16 MaxSize: 0x03C0
class UQuestLogWidget : public UIndianaUserWidget
{ 
public:
	class UBorder*                                     AnimationBorder;                                            // 0x0300   (0x0008)  
	class UImage*                                      QuestBacking;                                               // 0x0308   (0x0008)  
	class USizeBox*                                    ContentSizeBox;                                             // 0x0310   (0x0008)  
	class UQuestLogEntryWidget*                        QuestEntry;                                                 // 0x0318   (0x0008)  
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0320   (0x0008)  
	float                                              StartingDisplayTime;                                        // 0x0328   (0x0004)  
	float                                              FailedOrCompletedDisplayTime;                               // 0x032C   (0x0004)  
	float                                              AlwaysOnDisplayTime;                                        // 0x0330   (0x0004)  
	float                                              AnimationDuration;                                          // 0x0334   (0x0004)  
	float                                              ContentResizeInterpExponent;                                // 0x0338   (0x0004)  
	float                                              ContentVerticalPadding;                                     // 0x033C   (0x0004)  
	float                                              BackingVerticalPadding;                                     // 0x0340   (0x0004)  
	int32_t                                            QuestLogBackingMaterialSize;                                // 0x0344   (0x0004)  
	unsigned char                                      UnknownData00_7[0x78];                                      // 0x0348   (0x0078)  MISSED


	/// Functions
	// Function /Script/Indiana.QuestLogWidget.OnQuestUpdateModeChanged
	// void OnQuestUpdateModeChanged(int32_t ModeIn);                                                                           // [0x189c1c0] Final|Native|Protected 
	// Function /Script/Indiana.QuestLogWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisibleIn);                                                                            // [0x189bbe0] Final|Native|Protected 
	// Function /Script/Indiana.QuestLogWidget.OnFadeOutComplete
	// void OnFadeOutComplete();                                                                                                // [0x189bbc0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogWidget.OnFadeInComplete
	// void OnFadeInComplete();                                                                                                 // [0x189bba0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogWidget.FadeOutContents
	// void FadeOutContents();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogWidget.FadeInContents
	// void FadeInContents();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestManager
/// Size: 0x0410 (1040 bytes) (0x000030 - 0x000410) align 8 MaxSize: 0x0410
class UQuestManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x128];                                     // 0x0030   (0x0128)  MISSED
	TMap<FGuid, class UQuest*>                         LoadedQuests;                                               // 0x0158   (0x0050)  
	unsigned char                                      UnknownData01_7[0x268];                                     // 0x01A8   (0x0268)  MISSED
};

/// Class /Script/Indiana.QuestObjectiveEntryWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class UQuestObjectiveEntryWidget : public UIndianaUserWidget
{ 
public:
	class UBorder*                                     ContentContainer;                                           // 0x0300   (0x0008)  
	class UOverlay*                                    ObjectiveStatusOverlay;                                     // 0x0308   (0x0008)  
	class UImage*                                      ObjectiveCompletedImage;                                    // 0x0310   (0x0008)  
	class UTextBlockBase*                              TitleTextBlock;                                             // 0x0318   (0x0008)  
	float                                              DisplayTime;                                                // 0x0320   (0x0004)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x0324   (0x0014)  MISSED


	/// Functions
	// Function /Script/Indiana.QuestObjectiveEntryWidget.StartFailAnim
	// void StartFailAnim();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.StartCompleteAnim
	// void StartCompleteAnim();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnOutroComplete
	// void OnOutroComplete();                                                                                                  // [0x18a0050] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnObjectiveUpdateAnimComplete
	// void OnObjectiveUpdateAnimComplete();                                                                                    // [0x18a0030] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnObjectiveMadeInactive
	// void OnObjectiveMadeInactive();                                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnObjectiveMadeActive
	// void OnObjectiveMadeActive();                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnIntroComplete
	// void OnIntroComplete();                                                                                                  // [0x189ff40] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.QuestObjectiveTitleWidget
/// Size: 0x02A8 (680 bytes) (0x000278 - 0x0002A8) align 8 MaxSize: 0x02A8
class UQuestObjectiveTitleWidget : public UUserWidget
{ 
public:
	class UTextBlockBase*                              ObjectiveTitleTextBlock;                                    // 0x0278   (0x0008)  
	class UQuestObjectiveWidget*                       QuestObjective;                                             // 0x0280   (0x0008)  
	class UImage*                                      ObjectiveStateImage;                                        // 0x0288   (0x0008)  
	class UTexture2D*                                  CompletedObjective;                                         // 0x0290   (0x0008)  
	class UTexture2D*                                  FailedObjective;                                            // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x02A0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.QuestObjectiveTitleWidget.OnObjectiveStatusChange
	// void OnObjectiveStatusChange(ECompletionStatus ObjectiveStatus);                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestObjectiveWidget
/// Size: 0x0290 (656 bytes) (0x000278 - 0x000290) align 8 MaxSize: 0x0290
class UQuestObjectiveWidget : public UUserWidget
{ 
public:
	class UTextBlockBase*                              ObjectiveTextBlock;                                         // 0x0278   (0x0008)  
	class UVerticalBox*                                AddendumList;                                               // 0x0280   (0x0008)  
	class UClass*                                      ObjectiveAddendum;                                          // 0x0288   (0x0008)  


	/// Functions
	// Function /Script/Indiana.QuestObjectiveWidget.OnObjectiveStatusChange
	// void OnObjectiveStatusChange(ECompletionStatus ObjectiveStatus);                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Struct /Script/Indiana.QuestSubTypeGroup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FQuestSubTypeGroup
{ 
	TArray<EQuestType>                                 AcceptedSubTypes;                                           // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.DifficultyRange
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FDifficultyRange
{ 
	int32_t                                            RangeMinimum;                                               // 0x0000   (0x0004)  
	int32_t                                            RangeMaximum;                                               // 0x0004   (0x0004)  
};

/// Class /Script/Indiana.QuestSortingData
/// Size: 0x02A0 (672 bytes) (0x000038 - 0x0002A0) align 8 MaxSize: 0x02A0
class UQuestSortingData : public UDataAsset
{ 
public:
	TArray<EQuestType>                                 QuestSortingOrder;                                          // 0x0038   (0x0010)  
	bool                                               bUseSimplifiedSort;                                         // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0049   (0x0007)  MISSED
	TArray<EQuestType>                                 SimplifiedQuestSortingOrder;                                // 0x0050   (0x0010)  
	TMap<EQuestType, FQuestSubTypeGroup>               QuestSubgroups;                                             // 0x0060   (0x0050)  
	TMap<int32_t, FQuestSubTypeGroup>                  QuestSupergroups;                                           // 0x00B0   (0x0050)  
	TMap<int32_t, FLocString>                          QuestContentTypeStringIDs;                                  // 0x0100   (0x0050)  
	TMap<EQuestType, FLocString>                       QuestTypeStringIDs;                                         // 0x0150   (0x0050)  
	TMap<EQuestLocation, FLocString>                   QuestLocationStringIDs;                                     // 0x01A0   (0x0050)  
	TMap<EQuestDifficulty, FLocString>                 QuestDifficultyStringIDs;                                   // 0x01F0   (0x0050)  
	TMap<EQuestDifficulty, FDifficultyRange>           QuestDifficultyRanges;                                      // 0x0240   (0x0050)  
	FLocString                                         MostRecentQuestListTitle;                                   // 0x0290   (0x0008)  
	FLocString                                         AlphabeticalQuestListTitle;                                 // 0x0298   (0x0008)  
};

/// Class /Script/Indiana.QuickMeleeData
/// Size: 0x0070 (112 bytes) (0x000038 - 0x000070) align 8 MaxSize: 0x0070
class UQuickMeleeData : public UDataAsset
{ 
public:
	EWeaponEvent                                       WeaponEvent;                                                // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              Cooldown;                                                   // 0x003C   (0x0004)  
	float                                              Time;                                                       // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	class UClass*                                      StatusEffect;                                               // 0x0048   (0x0008)  
	float                                              Damage;                                                     // 0x0050   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	class UClass*                                      DamageType;                                                 // 0x0058   (0x0008)  
	class UImpactDataSet*                              ImpactDataSet;                                              // 0x0060   (0x0008)  
	bool                                               bDegradesWeapon;                                            // 0x0068   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Indiana.RadialBackgroundSectionWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class URadialBackgroundSectionWidget : public UIndianaUserWidget
{ 
public:
	class UImage*                                      BackgroundImage;                                            // 0x0300   (0x0008)  
	class UImage*                                      HighlightImage;                                             // 0x0308   (0x0008)  
	class UImage*                                      EquippedImage;                                              // 0x0310   (0x0008)  
	class UImage*                                      OutlineImage;                                               // 0x0318   (0x0008)  
};

/// Class /Script/Indiana.RadialContainerWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class URadialContainerWidget : public UIndianaUserWidget
{ 
public:
	class UClass*                                      TextRadialSectionClass;                                     // 0x0300   (0x0008)  
	class UClass*                                      ImageRadialSectionClass;                                    // 0x0308   (0x0008)  
	class UCanvasPanel*                                SectionsCanvas;                                             // 0x0310   (0x0008)  
	class URadialWidget*                               Radial;                                                     // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0320   (0x0010)  MISSED
};

/// Class /Script/Indiana.RadialContextMenuWidget
/// Size: 0x0338 (824 bytes) (0x000308 - 0x000338) align 8 MaxSize: 0x0338
class URadialContextMenuWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class UOverlay*                                    RadialOverlay;                                              // 0x0308   (0x0008)  
	class UBorder*                                     SectionTextBorder;                                          // 0x0310   (0x0008)  
	class UTextBlockBase*                              SectionText;                                                // 0x0318   (0x0008)  
	class UClass*                                      RadialContainerClass;                                       // 0x0320   (0x0008)  
	class UBorder*                                     RadialBorder;                                               // 0x0328   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0330   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.RadialContextMenuWidget.OnRadialMenuSelection
	// void OnRadialMenuSelection(int32_t Index);                                                                               // [0x18a0070] Final|Native|Protected 
};

/// Class /Script/Indiana.RadialWidget
/// Size: 0x0440 (1088 bytes) (0x000300 - 0x000440) align 8 MaxSize: 0x0440
class URadialWidget : public UIndianaUserWidget
{ 
public:
	SDK_UNDEFINED(16,639) /* FMulticastInlineDelegate */ __um(SectionSelected);                                    // 0x0300   (0x0010)  
	unsigned char                                      UnknownData00_6[0x60];                                      // 0x0310   (0x0060)  MISSED
	float                                              Diameter;                                                   // 0x0370   (0x0004)  
	float                                              TimeDilation;                                               // 0x0374   (0x0004)  
	bool                                               bDilateTime;                                                // 0x0378   (0x0001)  
	bool                                               bUseCursor;                                                 // 0x0379   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x037A   (0x0002)  MISSED
	float                                              AutoCorrectionThreshold;                                    // 0x037C   (0x0004)  
	float                                              AutoCorrectionScalar;                                       // 0x0380   (0x0004)  
	bool                                               bUseAutoCorrection;                                         // 0x0384   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0385   (0x0003)  MISSED
	float                                              InputOuterRadius;                                           // 0x0388   (0x0004)  
	float                                              InputInnerRatio;                                            // 0x038C   (0x0004)  
	float                                              MouseInputScalar;                                           // 0x0390   (0x0004)  
	float                                              GamepadDeadZone;                                            // 0x0394   (0x0004)  
	float                                              GamepadInputScalar;                                         // 0x0398   (0x0004)  
	bool                                               bUseGamepadInertia;                                         // 0x039C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x039D   (0x0003)  MISSED
	float                                              SelectedSectionAlpha;                                       // 0x03A0   (0x0004)  
	int32_t                                            SubPartitionSections;                                       // 0x03A4   (0x0004)  
	int32_t                                            SubPartitionStart;                                          // 0x03A8   (0x0004)  
	int32_t                                            SectionsMax;                                                // 0x03AC   (0x0004)  
	int32_t                                            SelectedSectionIndex;                                       // 0x03B0   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x03B4   (0x0004)  MISSED
	class UMaterialInstanceDynamic*                    DynamicMaterial;                                            // 0x03B8   (0x0008)  
	class UOverlay*                                    ContentOverlay;                                             // 0x03C0   (0x0008)  
	class UNamedSlot*                                  ContentSlot;                                                // 0x03C8   (0x0008)  
	class UCanvasPanel*                                OrientatorCanvas;                                           // 0x03D0   (0x0008)  
	class UImage*                                      MaterialImage;                                              // 0x03D8   (0x0008)  
	class UImage*                                      OrientatorImage;                                            // 0x03E0   (0x0008)  
	class UAkAudioEvent*                               ConfirmSectionSound;                                        // 0x03E8   (0x0008)  
	class UAkAudioEvent*                               SelectSectionSound;                                         // 0x03F0   (0x0008)  
	float                                              OrientatorDegrees;                                          // 0x03F8   (0x0004)  
	unsigned char                                      UnknownData05_7[0x44];                                      // 0x03FC   (0x0044)  MISSED


	/// Functions
	// Function /Script/Indiana.RadialWidget.OnSectionConfirmedAux
	// void OnSectionConfirmedAux();                                                                                            // [0x18a01a0] Final|Native|Protected 
	// Function /Script/Indiana.RadialWidget.OnSectionConfirmed
	// void OnSectionConfirmed();                                                                                               // [0x18a0180] Final|Native|Protected 
	// Function /Script/Indiana.RadialWidget.OnRadialScroll
	// void OnRadialScroll(float Value);                                                                                        // [0x18a0100] Final|Native|Protected 
};

/// Class /Script/Indiana.RagDollDeathBehavior
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class URagDollDeathBehavior : public UDeathBehavior
{ 
public:
};

/// Class /Script/Indiana.RagdollDisable
/// Size: 0x01E8 (488 bytes) (0x0001A0 - 0x0001E8) align 8 MaxSize: 0x01E8
class URagdollDisable : public UAnimDisableStatusEffect
{ 
public:
	float                                              GetUpMontagePlayrate;                                       // 0x01A0   (0x0004)  
	float                                              Impulse;                                                    // 0x01A4   (0x0004)  
	bool                                               bTurnOffGravity;                                            // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x01A9   (0x0003)  MISSED
	FVector                                            OverrideDirection;                                          // 0x01AC   (0x000C)  
	FVector                                            RandomVariance;                                             // 0x01B8   (0x000C)  
	FVector                                            MinVarianceClamp;                                           // 0x01C4   (0x000C)  
	float                                              MaxFloatDistance;                                           // 0x01D0   (0x0004)  
	float                                              LinearDampening;                                            // 0x01D4   (0x0004)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x01D8   (0x0010)  MISSED
};

/// Struct /Script/Indiana.RandomActionSetPair
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FRandomActionSetPair
{ 
	class UAIAction*                                   Action;                                                     // 0x0000   (0x0008)  
	float                                              Score;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Indiana.RandomActionSet
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class URandomActionSet : public UAIAction
{ 
public:
	TArray<FRandomActionSetPair>                       PotentialActions;                                           // 0x0038   (0x0010)  
	class UAIAction*                                   ChosenAction;                                               // 0x0048   (0x0008)  
};

/// Class /Script/Indiana.RandomBankGameDataReference
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class URandomBankGameDataReference : public UGameDataReference
{ 
public:
};

/// Struct /Script/Indiana.WeightedEffect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FWeightedEffect
{ 
	class UEventEffect*                                Effect;                                                     // 0x0000   (0x0008)  
	float                                              Weight;                                                     // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Indiana.RandomEventEffects
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class URandomEventEffects : public UEventEffect
{ 
public:
	TArray<FWeightedEffect>                            Effects;                                                    // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0040   (0x0008)  MISSED
};

/// Struct /Script/Indiana.QueryPair
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FQueryPair
{ 
	class UEQSRequest_IndianaBase*                     EQSRequest;                                                 // 0x0000   (0x0008)  
	float                                              Weight;                                                     // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Indiana.RandomQuerySet
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class URandomQuerySet : public UDataAsset
{ 
public:
	TArray<FQueryPair>                                 QueryCostPairs;                                             // 0x0038   (0x0010)  
};

/// Struct /Script/Indiana.PriorityCreatureSpawn
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FPriorityCreatureSpawn
{ 
	FGameplayTagContainer                              CreaturesTypeTags;                                          // 0x0000   (0x0020)  
	FGameplayTagContainer                              CreatureRoleTags;                                           // 0x0020   (0x0020)  
};

/// Class /Script/Indiana.RandomSpawnNode
/// Size: 0x0570 (1392 bytes) (0x000538 - 0x000570) align 8 MaxSize: 0x0570
class ARandomSpawnNode : public ASpawnNodeBase
{ 
public:
	TArray<FPriorityCreatureSpawn>                     PriorityCreatureSpawns;                                     // 0x0538   (0x0010)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0548   (0x0028)  MISSED
};

/// Class /Script/Indiana.RangeBehaviorStateInfo
/// Size: 0x0188 (392 bytes) (0x000178 - 0x000188) align 8 MaxSize: 0x0188
class URangeBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0178   (0x0010)  MISSED
};

/// Class /Script/Indiana.RangeRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class URangeRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Struct /Script/Indiana.HitReaction
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FHitReaction
{ 
	class UClass*                                      StatusEffect;                                               // 0x0000   (0x0008)  
	float                                              CooldownTime;                                               // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Indiana.ReactionComponent
/// Size: 0x0250 (592 bytes) (0x0000E0 - 0x000250) align 8 MaxSize: 0x0250
class UReactionComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	TMap<EHitReactType, FHitReaction>                  HitReactions;                                               // 0x00E8   (0x0050)  
	class UClass*                                      PlayerHitReactionCameraShake;                               // 0x0138   (0x0008)  
	class UClass*                                      DebugCameraShake;                                           // 0x0140   (0x0008)  
	float                                              MinDamagePctHitReact;                                       // 0x0148   (0x0004)  
	float                                              MaxDamagePctHitReact;                                       // 0x014C   (0x0004)  
	float                                              LightHitReactionStrength;                                   // 0x0150   (0x0004)  
	float                                              ADSHitReactionScalar;                                       // 0x0154   (0x0004)  
	unsigned char                                      UnknownData01_6[0x38];                                      // 0x0158   (0x0038)  MISSED
	FRuntimeFloatCurve                                 CameraShakeAngleCurve;                                      // 0x0190   (0x0088)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0218   (0x0004)  MISSED
	float                                              HitReactStrength;                                           // 0x021C   (0x0004)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0220   (0x0008)  MISSED
	float                                              InflictedDamagePctDecayRate;                                // 0x0228   (0x0004)  
	float                                              InflictedDamagePctLight;                                    // 0x022C   (0x0004)  
	float                                              InflictedDamagePctHeavy;                                    // 0x0230   (0x0004)  
	unsigned char                                      UnknownData04_7[0x1C];                                      // 0x0234   (0x001C)  MISSED


	/// Functions
	// Function /Script/Indiana.ReactionComponent.TriggerDebugCameraShake
	// void TriggerDebugCameraShake(float Strength, float X, float Y);                                                          // [0x18a4840] Final|Exec|Native|Public 
	// Function /Script/Indiana.ReactionComponent.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CDI);                                                                                // [0x18a4780] Native|Public|HasOutParms 
};

/// Class /Script/Indiana.ReactiveEnvironmentActor
/// Size: 0x02D8 (728 bytes) (0x0002B8 - 0x0002D8) align 8 MaxSize: 0x02D8
class AReactiveEnvironmentActor : public AActor
{ 
public:
	class USkeletalMeshComponent*                      Mesh;                                                       // 0x02B8   (0x0008)  
	float                                              PlayerProximityDistanceThreshold;                           // 0x02C0   (0x0004)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x02C4   (0x0014)  MISSED
};

/// Class /Script/Indiana.ReactiveEnvironmentAnimInstance
/// Size: 0x02E0 (736 bytes) (0x0002C8 - 0x0002E0) align 16 MaxSize: 0x02E0
class UReactiveEnvironmentAnimInstance : public UAnimInstance
{ 
public:
	bool                                               bIsInPlayerProximity;                                       // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x02C9   (0x0003)  MISSED
	float                                              TimeSinceInPlayerProximity;                                 // 0x02CC   (0x0004)  
	bool                                               bDead;                                                      // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x02D1   (0x000F)  MISSED
};

/// Class /Script/Indiana.RecoilData
/// Size: 0x0158 (344 bytes) (0x000038 - 0x000158) align 8 MaxSize: 0x0158
class URecoilData : public UDataAsset
{ 
public:
	FRotator                                           RandomOffset;                                               // 0x0038   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	FRuntimeFloatCurve                                 YawOffsetCurve;                                             // 0x0048   (0x0088)  
	FRuntimeFloatCurve                                 PitchOffsetCurve;                                           // 0x00D0   (0x0088)  
};

/// Class /Script/Indiana.RecoilManagerComponent
/// Size: 0x0138 (312 bytes) (0x0000E0 - 0x000138) align 8 MaxSize: 0x0138
class URecoilManagerComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x00E0   (0x0058)  MISSED
};

/// Class /Script/Indiana.RedirectorMap
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class URedirectorMap : public UDataAsset
{ 
public:
	TMap<FName, FName>                                 RedirectorMap;                                              // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.ReflectStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UReflectStatusEffect : public UStatusEffect
{ 
public:
	float                                              ReflectChance;                                              // 0x0188   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x018C   (0x0004)  MISSED
};

/// Class /Script/Indiana.RelevanceOptimizationInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class URelevanceOptimizationInterface : public UInterface
{ 
public:
};

/// Class /Script/Indiana.Reload_AnimNotify
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align 8 MaxSize: 0x0040
class UReload_AnimNotify : public UAnimNotify
{ 
public:
};

/// Class /Script/Indiana.ReloadStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UReloadStatusEffect : public UStatusEffect
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0188   (0x0008)  MISSED
};

/// Class /Script/Indiana.RenderThreadAnimationWidget
/// Size: 0x0280 (640 bytes) (0x000278 - 0x000280) align 8 MaxSize: 0x0280
class URenderThreadAnimationWidget : public UUserWidget
{ 
public:
	class UImage*                                      AnimationImage;                                             // 0x0278   (0x0008)  
};

/// Class /Script/Indiana.RepairUpgradeInfoWidget
/// Size: 0x0380 (896 bytes) (0x000300 - 0x000380) align 8 MaxSize: 0x0380
class URepairUpgradeInfoWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              ItemNameTextBlock;                                          // 0x0300   (0x0008)  
	class UHorizontalBox*                              RepairStatusHorizontalBox;                                  // 0x0308   (0x0008)  
	class USizeBox*                                    CurrentRepairStatusSizeBox;                                 // 0x0310   (0x0008)  
	class UProgressBar*                                CurrentRepairStatusBar;                                     // 0x0318   (0x0008)  
	class USizeBox*                                    CurrentRepairPristineStatusSizeBox;                         // 0x0320   (0x0008)  
	class UProgressBar*                                CurrentRepairPristineStatusBar;                             // 0x0328   (0x0008)  
	class UTextBlockBase*                              CurrentRepairStatusTextBlock;                               // 0x0330   (0x0008)  
	class USizeBox*                                    RepairedStatusSizeBox;                                      // 0x0338   (0x0008)  
	class UProgressBar*                                RepairedStatusBar;                                          // 0x0340   (0x0008)  
	class USizeBox*                                    RepairedPristineSizeBox;                                    // 0x0348   (0x0008)  
	class UProgressBar*                                RepairedPristineStatusBar;                                  // 0x0350   (0x0008)  
	class UTextBlockBase*                              RepairedPristineStatusTextBlock;                            // 0x0358   (0x0008)  
	class UTextBlockBase*                              StatChangeName;                                             // 0x0360   (0x0008)  
	class UItemStatEntryWidget*                        PreItemStat;                                                // 0x0368   (0x0008)  
	class UItemStatEntryWidget*                        PostItemStat;                                               // 0x0370   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0378   (0x0008)  MISSED
};

/// Class /Script/Indiana.ReplaceRandomFlawStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UReplaceRandomFlawStatusEffect : public UStatusEffect
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0188   (0x0008)  MISSED
};

/// Class /Script/Indiana.RepositionSearchBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000120 - 0x000128) align 8 MaxSize: 0x0128
class URepositionSearchBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0120   (0x0008)  MISSED
};

/// Class /Script/Indiana.RepositionSearchRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class URepositionSearchRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.ReputationData
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class UReputationData : public UDataAsset
{ 
public:
	EReputationRankType                                RankType;                                                   // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            Rank;                                                       // 0x003C   (0x0004)  
	float                                              VendorPriceAdjustment;                                      // 0x0040   (0x0004)  
	bool                                               PlayerCanBuyRestrictedVendorStock;                          // 0x0044   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	FLocString                                         Name;                                                       // 0x0048   (0x0008)  
	FLocString                                         Reaction;                                                   // 0x0050   (0x0008)  
};

/// Class /Script/Indiana.ReputationDetailsWidget
/// Size: 0x0360 (864 bytes) (0x000300 - 0x000360) align 8 MaxSize: 0x0360
class UReputationDetailsWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0300   (0x0008)  
	class UReputationProgressWidget*                   NegativeProgress;                                           // 0x0308   (0x0008)  
	class UReputationProgressWidget*                   PositiveProgress;                                           // 0x0310   (0x0008)  
	class UTextBlockBase*                              StatusTextBlock;                                            // 0x0318   (0x0008)  
	class UTextBlockBase*                              StatusBodyTextBlock;                                        // 0x0320   (0x0008)  
	class UTextBlockBase*                              DescriptionBodyTextBlock;                                   // 0x0328   (0x0008)  
	class UTextBlockBase*                              EffectsBodyTextBlock;                                       // 0x0330   (0x0008)  
	class UTextBlockBase*                              VendorPriceTextBlock;                                       // 0x0338   (0x0008)  
	class UBackgroundPanelWidget*                      BackgroundPanelWidget;                                      // 0x0340   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0348   (0x0018)  MISSED
};

/// Class /Script/Indiana.ReputationEntryWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UReputationEntryWidget : public UIndianaUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0300   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0308   (0x0008)  
	class UTextBlockBase*                              StatusTextBlock;                                            // 0x0310   (0x0008)  
	class UFactionData*                                Data;                                                       // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0320   (0x0010)  MISSED
};

/// Class /Script/Indiana.ReputationListWidget
/// Size: 0x0328 (808 bytes) (0x000300 - 0x000328) align 8 MaxSize: 0x0328
class UReputationListWidget : public UIndianaUserWidget
{ 
public:
	FLocString                                         Name;                                                       // 0x0300   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0308   (0x0008)  
	class UVerticalBox*                                EntryContainer;                                             // 0x0310   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0318   (0x0010)  MISSED
};

/// Class /Script/Indiana.ReputationProgressWidget
/// Size: 0x0298 (664 bytes) (0x000278 - 0x000298) align 8 MaxSize: 0x0298
class UReputationProgressWidget : public UUserWidget
{ 
public:
	FLocString                                         ProgressCategory;                                           // 0x0278   (0x0008)  
	class UProgressBar*                                ProgressBar;                                                // 0x0280   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0288   (0x0008)  
	class UTextBlockBase*                              ValueTextBlock;                                             // 0x0290   (0x0008)  
};

/// Class /Script/Indiana.ReputationSummaryWidget
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class UReputationSummaryWidget : public UIndianaUserWidget
{ 
public:
	class UClass*                                      EntryClass;                                                 // 0x0300   (0x0008)  
	class UReputationListWidget*                       PrimaryList;                                                // 0x0308   (0x0008)  
	class UReputationListWidget*                       RegionalList;                                               // 0x0310   (0x0008)  
	class UReputationDetailsWidget*                    Details;                                                    // 0x0318   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0320   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0328   (0x0008)  
	class UButtonGroup*                                ButtonGroup;                                                // 0x0330   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0338   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.ReputationSummaryWidget.RemoveReputationBackgroundOnMinimize
	// void RemoveReputationBackgroundOnMinimize();                                                                             // [0x18a4820] Final|Native|Public  
	// Function /Script/Indiana.ReputationSummaryWidget.OnFactionReputationChanged
	// void OnFactionReputationChanged(class UFactionData* FactionData, EReputationType ReputationType, int32_t Amount, class UReputationData* ReputationBefore, class UReputationData* ReputationAfter); // [0x18a43f0] Final|Native|Protected 
	// Function /Script/Indiana.ReputationSummaryWidget.InitReputationBackgroundOnMaximize
	// void InitReputationBackgroundOnMaximize();                                                                               // [0x18a4190] Final|Native|Public  
};

/// Class /Script/Indiana.ResetSpellCooldownStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UResetSpellCooldownStatusEffect : public UStatusEffect
{ 
public:
	class UClass*                                      Spell;                                                      // 0x0188   (0x0008)  
};

/// Class /Script/Indiana.RespecMachine
/// Size: 0x02C8 (712 bytes) (0x0002B8 - 0x0002C8) align 8 MaxSize: 0x02C8
class ARespecMachine : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02B8   (0x0008)  MISSED
	class UInteractableComponent*                      InteractableComponent;                                      // 0x02C0   (0x0008)  
};

/// Class /Script/Indiana.RestrictedArea
/// Size: 0x0368 (872 bytes) (0x0002B8 - 0x000368) align 8 MaxSize: 0x0368
class ARestrictedArea : public AActor
{ 
public:
	class UObsidianIDComponent*                        IDComponent;                                                // 0x02B8   (0x0008)  
	class UDisguiseData*                               Disguise;                                                   // 0x02C0   (0x0008)  
	FLogicalExpression                                 EnabledGlobalVariableExpression;                            // 0x02C8   (0x0068)  
	TArray<class UClass*>                              Teams;                                                      // 0x0330   (0x0010)  
	SDK_UNDEFINED(16,640) /* TArray<TWeakObjectPtr<AIndianaAiCharacter*>> */ __um(Guards);                         // 0x0340   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0350   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.RestrictedArea.IsEnabled
	// bool IsEnabled();                                                                                                        // [0x18a41b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.RestrictedAreaComponent
/// Size: 0x0270 (624 bytes) (0x000268 - 0x000270) align 16 MaxSize: 0x0270
class URestrictedAreaComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0268   (0x0008)  MISSED
};

/// Class /Script/Indiana.RestrictedAreaVolume
/// Size: 0x0318 (792 bytes) (0x000310 - 0x000318) align 8 MaxSize: 0x0318
class ARestrictedAreaVolume : public AVolume
{ 
public:
	class ARestrictedArea*                             RestrictedArea;                                             // 0x0310   (0x0008)  
};

/// Class /Script/Indiana.ResurrectStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UResurrectStatusEffect : public UStatusEffect
{ 
public:
	float                                              PercentMaxHealthOnResurrect;                                // 0x0188   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x018C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.CrosshairVisuals
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FCrosshairVisuals
{ 
	class UTexture2D*                                  Left;                                                       // 0x0000   (0x0008)  
	class UTexture2D*                                  Top;                                                        // 0x0008   (0x0008)  
	class UTexture2D*                                  Center;                                                     // 0x0010   (0x0008)  
	class UTexture2D*                                  Minimal;                                                    // 0x0018   (0x0008)  
	class UTexture2D*                                  StaticImage;                                                // 0x0020   (0x0008)  
	FVector2D                                          StaticImagePositionOffset;                                  // 0x0028   (0x0008)  
};

/// Struct /Script/Indiana.CrosshairStates
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 MaxSize: 0x0090
struct FCrosshairStates
{ 
	FCrosshairVisuals                                  Default;                                                    // 0x0000   (0x0030)  
	FCrosshairVisuals                                  Hostile;                                                    // 0x0030   (0x0030)  
	FCrosshairVisuals                                  Neutral;                                                    // 0x0060   (0x0030)  
};

/// Class /Script/Indiana.ReticleVisualsDataAsset
/// Size: 0x00C8 (200 bytes) (0x000038 - 0x0000C8) align 8 MaxSize: 0x00C8
class UReticleVisualsDataAsset : public UDataAsset
{ 
public:
	FCrosshairStates                                   States;                                                     // 0x0038   (0x0090)  
};

/// Class /Script/Indiana.ReticleWidget
/// Size: 0x03A0 (928 bytes) (0x000300 - 0x0003A0) align 8 MaxSize: 0x03A0
class UReticleWidget : public UIndianaUserWidget
{ 
public:
	class UCanvasPanel*                                RootCanvas;                                                 // 0x0300   (0x0008)  
	class UImage*                                      ReticuleInteract;                                           // 0x0308   (0x0008)  
	class UImage*                                      TTDRotators;                                                // 0x0310   (0x0008)  
	class UCrosshairWidget*                            Crosshair;                                                  // 0x0318   (0x0008)  
	class UCauseDamageReticleWidget*                   CauseDamageWidget;                                          // 0x0320   (0x0008)  
	class UOverlay*                                    TTDOverlay;                                                 // 0x0328   (0x0008)  
	class UOverlay*                                    TTDDTOverlay;                                               // 0x0330   (0x0008)  
	class UOverlay*                                    DTImageOverlay;                                             // 0x0338   (0x0008)  
	class UImage*                                      DTImage;                                                    // 0x0340   (0x0008)  
	class UTextBlockBase*                              DTTextBlock;                                                // 0x0348   (0x0008)  
	class UOverlay*                                    StealthOverlay;                                             // 0x0350   (0x0008)  
	TWeakObjectPtr<class UCompanionCommandComponent*>  CompanionCommandComponent;                                  // 0x0358   (0x0008)  
	TWeakObjectPtr<class UMedKitComponent*>            MedKitComponent;                                            // 0x0360   (0x0008)  
	float                                              MovingDimFactor;                                            // 0x0368   (0x0004)  
	float                                              RotationSpeed;                                              // 0x036C   (0x0004)  
	float                                              StealthTime;                                                // 0x0370   (0x0004)  
	unsigned char                                      UnknownData00_7[0x2C];                                      // 0x0374   (0x002C)  MISSED


	/// Functions
	// Function /Script/Indiana.ReticleWidget.ShrinkTTDRotator
	// void ShrinkTTDRotator();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ReticleWidget.SetTTDProgressRatio
	// void SetTTDProgressRatio(float NewTTDRatio);                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ReticleWidget.OnTTDTargetLost
	// void OnTTDTargetLost();                                                                                                  // [0x18a4760] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnTTDTargetAcquired
	// void OnTTDTargetAcquired();                                                                                              // [0x18a4740] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnTTDReticleMeterModeChanged
	// void OnTTDReticleMeterModeChanged(int32_t bVisible);                                                                     // [0x18a46b0] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnReticleModeChanged
	// void OnReticleModeChanged(int32_t ModeIn);                                                                               // [0x18a4620] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18a4590] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnCombatStateChanged
	// void OnCombatStateChanged(bool bCombatIn, bool bRestoring);                                                              // [0x18a4320] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.ExpandTTDRotator
	// void ExpandTTDRotator();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.RetreatBehaviorStateInfo
/// Size: 0x0190 (400 bytes) (0x000178 - 0x000190) align 8 MaxSize: 0x0190
class URetreatBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0178   (0x0018)  MISSED
};

/// Class /Script/Indiana.RetreatRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class URetreatRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.RockFoliageTool
/// Size: 0x02B8 (696 bytes) (0x0002B8 - 0x0002B8) align 8 MaxSize: 0x02B8
class ARockFoliageTool : public AActor
{ 
public:


	/// Functions
	// Function /Script/Indiana.RockFoliageTool.MoveBigScaleInstanceToFoliageType
	// void MoveBigScaleInstanceToFoliageType(class AInstancedFoliageActor* IFA, class UFoliageType* OldType, class UFoliageType* NewType, float InstanceScale); // [0x18a41d0] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.StatClampingData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FStatClampingData
{ 
	bool                                               bMinClamp;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              MinValue;                                                   // 0x0004   (0x0004)  
	bool                                               bMaxClamp;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              MaxValue;                                                   // 0x000C   (0x0004)  
};

/// Class /Script/Indiana.RpgStat
/// Size: 0x0080 (128 bytes) (0x000038 - 0x000080) align 8 MaxSize: 0x0080
class URpgStat : public UDataAsset
{ 
public:
	EStatClampingMethod                                StatClampingMethod;                                         // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FStatClampingData                                  CustomClampingData;                                         // 0x003C   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	TArray<class URpgStat*>                            CombineStats;                                               // 0x0050   (0x0010)  
	TArray<class URpgStat*>                            CombineChildrenStats;                                       // 0x0060   (0x0010)  
	FLocString                                         Format;                                                     // 0x0070   (0x0008)  
	float                                              DescriptionBaseValue;                                       // 0x0078   (0x0004)  
	bool                                               bInvertSign;                                                // 0x007C   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x007D   (0x0003)  MISSED
};

/// Class /Script/Indiana.RpgStatComponent
/// Size: 0x01C0 (448 bytes) (0x0000E0 - 0x0001C0) align 8 MaxSize: 0x01C0
class URpgStatComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x00E0   (0x0018)  MISSED
	FRpgStatCollection                                 InternalRpgStatCollection;                                  // 0x00F8   (0x0068)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0160   (0x0010)  MISSED
	TMap<class URpgStat*, FStatClampingData>           OverrideClampingData;                                       // 0x0170   (0x0050)  


	/// Functions
	// Function /Script/Indiana.RpgStatComponent.SetModifier
	// void SetModifier(class UObject* SourceObject, int32_t SourceId, FStatModifierDescription& StatModifier);                 // [0x18a96e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.RpgStatComponent.RpgStatShowStat
	// void RpgStatShowStat(FString Stat);                                                                                      // [0x18a9450] Final|Exec|Native|Public|Const 
	// Function /Script/Indiana.RpgStatComponent.RpgStatShowAll
	// void RpgStatShowAll();                                                                                                   // [0x18a9430] Final|Exec|Native|Public|Const 
	// Function /Script/Indiana.RpgStatComponent.RpgStatRemoveModifierDebug
	// void RpgStatRemoveModifierDebug(FName& Stat);                                                                            // [0x18a93a0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.RpgStatComponent.RpgStatAddModifierDebug
	// void RpgStatAddModifierDebug(FName& Stat, float Value);                                                                  // [0x18a92c0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.RpgStatComponent.RemoveModifier
	// void RemoveModifier(class UObject* SourceObject, int32_t SourceId, FStatModifierDescription& StatModifier);              // [0x18a90b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.RpgStatComponent.OnCollectionStatUpdated
	// void OnCollectionStatUpdated(class URpgStat* Stat);                                                                      // [0x18a8d10] Final|Native|Protected 
	// Function /Script/Indiana.RpgStatComponent.GetValue
	// float GetValue(class URpgStat* Stat, ERpgStatGroupMask StatGroupMask, float InputValue);                                 // [0x18a89c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.PendingDeferredSpawn
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 MaxSize: 0x0038
struct FPendingDeferredSpawn
{ 
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/Indiana.CachedGameState
/// Size: 0x0178 (376 bytes) (0x000000 - 0x000178) align 8 MaxSize: 0x0178
struct FCachedGameState
{ 
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0000   (0x0020)  MISSED
	TArray<class UObject*>                             PreloadedObjects;                                           // 0x0020   (0x0010)  
	unsigned char                                      UnknownData01_6[0x70];                                      // 0x0030   (0x0070)  MISSED
	TArray<FPendingDeferredSpawn>                      PendingDeferredSpawns;                                      // 0x00A0   (0x0010)  
	TMap<class AActor*, uint64_t>                      DeferredSpawnActorStateDataOffsets;                         // 0x00B0   (0x0050)  
	TMap<FGuid, class AActor*>                         DeferredSpawnsByGUID;                                       // 0x0100   (0x0050)  
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x0150   (0x0028)  MISSED
};

/// Class /Script/Indiana.SaveGameManager
/// Size: 0x0690 (1680 bytes) (0x000030 - 0x000690) align 16 MaxSize: 0x0690
class USaveGameManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0030   (0x0008)  MISSED
	SDK_UNDEFINED(16,641) /* FMulticastInlineDelegate */ __um(OnRequestSaveMetadataComplete);                      // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,642) /* FMulticastInlineDelegate */ __um(OnQueryLatestSaveComplete);                          // 0x0048   (0x0010)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0058   (0x0018)  MISSED
	SDK_UNDEFINED(16,643) /* FMulticastInlineDelegate */ __um(OnSaveStarted);                                      // 0x0070   (0x0010)  
	SDK_UNDEFINED(16,644) /* FMulticastInlineDelegate */ __um(OnSaveComplete);                                     // 0x0080   (0x0010)  
	SDK_UNDEFINED(16,645) /* FMulticastInlineDelegate */ __um(OnLoadComplete);                                     // 0x0090   (0x0010)  
	SDK_UNDEFINED(16,646) /* FMulticastInlineDelegate */ __um(OnActiveUserChanged);                                // 0x00A0   (0x0010)  
	SDK_UNDEFINED(16,647) /* FMulticastInlineDelegate */ __um(OnFetchCloudSavesComplete);                          // 0x00B0   (0x0010)  
	SDK_UNDEFINED(16,648) /* FMulticastInlineDelegate */ __um(OnUserGameSettingsLoadComplete);                     // 0x00C0   (0x0010)  
	unsigned char                                      UnknownData02_6[0x1B0];                                     // 0x00D0   (0x01B0)  MISSED
	float                                              ScreenshotWaitTimeLimitSeconds;                             // 0x0280   (0x0004)  
	unsigned char                                      UnknownData03_6[0x11C];                                     // 0x0284   (0x011C)  MISSED
	TMap<FName, FCachedGameState>                      CachedGameStates;                                           // 0x03A0   (0x0050)  
	unsigned char                                      UnknownData04_6[0x60];                                      // 0x03F0   (0x0060)  MISSED
	FString                                            AutosaveIconFilePath;                                       // 0x0450   (0x0010)  
	int32_t                                            MaxOverwriteableSaveCount;                                  // 0x0460   (0x0004)  
	unsigned char                                      UnknownData05_6[0x1FC];                                     // 0x0464   (0x01FC)  MISSED
	SDK_UNDEFINED(16,649) /* FMulticastInlineDelegate */ __um(OnPS4LoadInturrupted);                               // 0x0660   (0x0010)  
	unsigned char                                      UnknownData06_7[0x20];                                      // 0x0670   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.SaveGameManager.SaveUserGameSettings
	// void SaveUserGameSettings(bool bSettingsPotentiallyChanged);                                                             // [0x18a9650] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.SaveGame
	// ESaveGameResult SaveGame(FString Filename, bool bIgnoreSuperNova, ESaveGameType SaveGameType);                           // [0x18a9500] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.RequestPostGameSave
	// void RequestPostGameSave();                                                                                              // [0x185bda0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestPointOfNoReturnSave
	// void RequestPointOfNoReturnSave();                                                                                       // [0x18a92a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestPointOfNoReturnRollbackSave
	// void RequestPointOfNoReturnRollbackSave();                                                                               // [0x18a9280] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestBeforeSkipSave
	// void RequestBeforeSkipSave();                                                                                            // [0x185bda0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestBeforeEVTransitionSave
	// void RequestBeforeEVTransitionSave();                                                                                    // [0x18a9260] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestAutosave
	// void RequestAutosave(bool bAllowOnSuperNova);                                                                            // [0x18a91e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.Quicksave
	// ESaveGameResult Quicksave();                                                                                             // [0x18a9080] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.Quickload
	// ELoadGameResult Quickload();                                                                                             // [0x18a9050] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.PointOfNoReturnSave
	// void PointOfNoReturnSave();                                                                                              // [0x18a9030] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.PointOfNoReturnRollbackSave
	// void PointOfNoReturnRollbackSave();                                                                                      // [0x18a9010] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.OnPromptedSaveSaveMenuClosed
	// void OnPromptedSaveSaveMenuClosed(bool bForced);                                                                         // [0x18a8f60] Final|Native|Protected 
	// Function /Script/Indiana.SaveGameManager.OnActorDestroyed
	// void OnActorDestroyed(class AActor* Actor);                                                                              // [0x18a8c80] Final|Native|Public  
	// Function /Script/Indiana.SaveGameManager.LoadUserGameSettings
	// void LoadUserGameSettings();                                                                                             // [0x18a8be0] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.LoadGame
	// ELoadGameResult LoadGame(FString Filename, bool bPreValidateMetadata);                                                   // [0x18a8ae0] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.EnsureSignIn
	// bool EnsureSignIn();                                                                                                     // [0x18a8990] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.DisableSaves
	// void DisableSaves(bool bDisable);                                                                                        // [0x18a8910] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.DeleteGame
	// EDeleteGameResult DeleteGame(FString Filename);                                                                          // [0x18a8830] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.CheckCanSaveGame
	// void CheckCanSaveGame();                                                                                                 // [0x18a8810] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.BeforeEVTransitionSave
	// void BeforeEVTransitionSave();                                                                                           // [0x18a87f0] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.Autosave
	// bool Autosave(EAutoSaveType AutoSaveType, bool bIgnoreSuperNova);                                                        // [0x18a8720] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.SaveLoadDetailWidget
/// Size: 0x03F8 (1016 bytes) (0x000278 - 0x0003F8) align 8 MaxSize: 0x03F8
class USaveLoadDetailWidget : public UUserWidget
{ 
public:
	FString                                            StringBetweenPlayerNameAndLevel;                            // 0x0278   (0x0010)  
	class UButtonBase*                                 Button;                                                     // 0x0288   (0x0008)  
	class UImage*                                      SaveScreenshot;                                             // 0x0290   (0x0008)  
	class UImage*                                      InvalidSave;                                                // 0x0298   (0x0008)  
	class UImage*                                      PONRSave;                                                   // 0x02A0   (0x0008)  
	class UTextBlockBase*                              SaveTypeText;                                               // 0x02A8   (0x0008)  
	class UTextBlockBase*                              CharacterInfoText;                                          // 0x02B0   (0x0008)  
	class UTextBlockBase*                              CurrentQuestText;                                           // 0x02B8   (0x0008)  
	class UTextBlockBase*                              DifficultyText;                                             // 0x02C0   (0x0008)  
	class UTextBlockBase*                              SaveDateText;                                               // 0x02C8   (0x0008)  
	class UTextBlockBase*                              PlaytimeText;                                               // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x120];                                     // 0x02D8   (0x0120)  MISSED
};

/// Class /Script/Indiana.SaveLoadMenuWidget
/// Size: 0x03D8 (984 bytes) (0x000308 - 0x0003D8) align 8 MaxSize: 0x03D8
class USaveLoadMenuWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0308   (0x0010)  MISSED
	class UButtonBase*                                 InvisibleButton;                                            // 0x0318   (0x0008)  
	class UWidget*                                     SaveGameBlocker;                                            // 0x0320   (0x0008)  
	class UTextBlockBase*                              InterfaceTitleText;                                         // 0x0328   (0x0008)  
	class UTextBlockBase*                              SaveGamesText;                                              // 0x0330   (0x0008)  
	class UScrollBox*                                  ContentScrollBox;                                           // 0x0338   (0x0008)  
	class UVerticalBox*                                ContentVerticalBox;                                         // 0x0340   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0348   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0350   (0x0008)  
	class UWidget*                                     Background;                                                 // 0x0358   (0x0008)  
	class UWidget*                                     CompatWidget;                                               // 0x0360   (0x0008)  
	class UTextBlockBase*                              CompatCurVersion;                                           // 0x0368   (0x0008)  
	class UTextBlockBase*                              CompatSaveVersion;                                          // 0x0370   (0x0008)  
	class UTextBlockBase*                              CompatDLC1Status;                                           // 0x0378   (0x0008)  
	class UTextBlockBase*                              CompatDLC2Status;                                           // 0x0380   (0x0008)  
	class UClass*                                      SaveLoadDetail;                                             // 0x0388   (0x0008)  
	class UClass*                                      NewSaveClass;                                               // 0x0390   (0x0008)  
	TWeakObjectPtr<class UTexture2D*>                  PONRSaveTexture;                                            // 0x0398   (0x0008)  
	unsigned char                                      UnknownData01_7[0x38];                                      // 0x03A0   (0x0038)  MISSED


	/// Functions
	// Function /Script/Indiana.SaveLoadMenuWidget.OnSaveDataRequestFinished
	// void OnSaveDataRequestFinished();                                                                                        // [0x18a8ff0] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.OnPS4LoadInturrupted
	// void OnPS4LoadInturrupted(FString SaveName);                                                                             // [0x18a8eb0] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x18a8dc0] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.OnExitInterface
	// void OnExitInterface();                                                                                                  // [0x18a8da0] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.OnActiveUserChanged
	// void OnActiveUserChanged(EActiveUserChangeType ChangeType);                                                              // [0x18a8c00] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.DeleteSave
	// void DeleteSave();                                                                                                       // [0x18a88f0] Final|Native|Protected 
};

/// Class /Script/Indiana.SavingWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class USavingWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0300   (0x0008)  MISSED
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0308   (0x0008)  
	float                                              MinimumSecondsToRun;                                        // 0x0310   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0314   (0x000C)  MISSED


	/// Functions
	// Function /Script/Indiana.SavingWidget.ShowSavingWidget
	// void ShowSavingWidget();                                                                                                 // [0x18b48c0] Final|Native|Public  
	// Function /Script/Indiana.SavingWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18b0ac0] Final|Native|Protected 
	// Function /Script/Indiana.SavingWidget.HideSavingWidget
	// void HideSavingWidget(ESaveGameResult SaveGameResult, ESaveGameType SaveGameType);                                       // [0x18b0480] Final|Native|Public  
};

/// Class /Script/Indiana.ScalableImage
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class UScalableImage : public UIndianaUserWidget
{ 
public:
	class USizeBox*                                    MainSizeBox;                                                // 0x0300   (0x0008)  
	class UImage*                                      MainImage;                                                  // 0x0308   (0x0008)  
	FVector2D                                          OriginalSize;                                               // 0x0310   (0x0008)  
	FVector2D                                          MaximumSize;                                                // 0x0318   (0x0008)  
	class UTexture2D*                                  DesiredTexture;                                             // 0x0320   (0x0008)  
	bool                                               bMatchDesiredTextureSize;                                   // 0x0328   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x0329   (0x000F)  MISSED


	/// Functions
	// Function /Script/Indiana.ScalableImage.SizeSettingChanged
	// void SizeSettingChanged(int32_t SizeIn);                                                                                 // [0x18b48e0] Final|Native|Protected 
};

/// Struct /Script/Indiana.ScaledActorEntry
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FScaledActorEntry
{ 
	int32_t                                            MinPlayerLevel;                                             // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TSoftObjectPtr<class UClass*>                      ActorClass;                                                 // 0x0008   (0x0028)  
};

/// Class /Script/Indiana.ScaledActorTable
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UScaledActorTable : public UDataAsset
{ 
public:
	TArray<FScaledActorEntry>                          PossibleActors;                                             // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.ScaledSpawnNode
/// Size: 0x0568 (1384 bytes) (0x000538 - 0x000568) align 8 MaxSize: 0x0568
class AScaledSpawnNode : public ASpawnNodeBase
{ 
public:
	class UScaledActorTable*                           ScaledActorTable;                                           // 0x0538   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0540   (0x0028)  MISSED
};

/// Class /Script/Indiana.ScaleStatusEffect
/// Size: 0x0198 (408 bytes) (0x000188 - 0x000198) align 8 MaxSize: 0x0198
class UScaleStatusEffect : public UStatusEffect
{ 
public:
	float                                              Scale;                                                      // 0x0188   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x018C   (0x0004)  MISSED
	class URpgStat*                                    ScaleStat;                                                  // 0x0190   (0x0008)  
};

/// Class /Script/Indiana.ScalingData
/// Size: 0x0068 (104 bytes) (0x000038 - 0x000068) align 8 MaxSize: 0x0068
class UScalingData : public UDataAsset
{ 
public:
	TArray<float>                                      HealthScalars;                                              // 0x0038   (0x0010)  
	TArray<float>                                      DamageScalars;                                              // 0x0048   (0x0010)  
	TArray<float>                                      ArmorScalars;                                               // 0x0058   (0x0010)  
};

/// Class /Script/Indiana.ScalingOverrideBox
/// Size: 0x02F0 (752 bytes) (0x0002B8 - 0x0002F0) align 8 MaxSize: 0x02F0
class AScalingOverrideBox : public AActor
{ 
public:
	int32_t                                            MinEffectiveLevel;                                          // 0x02B8   (0x0004)  
	int32_t                                            MaxEffectiveLevel;                                          // 0x02BC   (0x0004)  
	bool                                               bApplyLevelModifier;                                        // 0x02C0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x02C1   (0x0003)  MISSED
	int32_t                                            FlatLevelModifier;                                          // 0x02C4   (0x0004)  
	class UBoxComponent*                               BoxShape;                                                   // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x02D0   (0x0020)  MISSED
};

/// Class /Script/Indiana.ScannerFlavorTextData
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class UScannerFlavorTextData : public UDataAsset
{ 
public:
	TArray<FLocString>                                 FlavorStrings;                                              // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.Scar
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UScar : public UPrimaryDataAsset
{ 
public:
	class UTexture*                                    ScarsNormalMap;                                             // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.ScopeData
/// Size: 0x0170 (368 bytes) (0x000038 - 0x000170) align 8 MaxSize: 0x0170
class UScopeData : public UDataAsset
{ 
public:
	class UMaterial*                                   PostProcessMaterial;                                        // 0x0038   (0x0008)  
	class UReticleVisualsDataAsset*                    ReticleVisuals;                                             // 0x0040   (0x0008)  
	float                                              ZoomFOVAdjustment;                                          // 0x0048   (0x0004)  
	float                                              TransitionInTime;                                           // 0x004C   (0x0004)  
	float                                              TransitionOutTime;                                          // 0x0050   (0x0004)  
	float                                              LookStickRateMultiplier;                                    // 0x0054   (0x0004)  
	bool                                               bCanInteractWhileScoped;                                    // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	FRuntimeFloatCurve                                 TransitionInFadeCurve;                                      // 0x0060   (0x0088)  
	FRuntimeFloatCurve                                 TransitionOutFadeCurve;                                     // 0x00E8   (0x0088)  
};

/// Class /Script/Indiana.ScriptRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UScriptRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.PopRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UPopRequestData : public UScriptRequestData
{ 
public:
};

/// Class /Script/Indiana.ClearCompanionCommandStatesRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UClearCompanionCommandStatesRequestData : public UScriptRequestData
{ 
public:
};

/// Class /Script/Indiana.ClearBehaviorStatesOfTypeRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class UClearBehaviorStatesOfTypeRequestData : public UScriptRequestData
{ 
public:
	EBehaviorState                                     BehaviorState;                                              // 0x0068   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Indiana.RequestTargetRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class URequestTargetRequestData : public UScriptRequestData
{ 
public:
	ETargetRequestType                                 TargetRequestType;                                          // 0x0068   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Indiana.SetWeaponPreferenceRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class USetWeaponPreferenceRequestData : public UScriptRequestData
{ 
public:
	EWeaponPreference                                  WeaponPreference;                                           // 0x0068   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Indiana.ScriptEvent
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UScriptEvent : public UObject
{ 
public:
};

/// Class /Script/Indiana.SetGlobalValueEvent
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class USetGlobalValueEvent : public UScriptEvent
{ 
public:
	FGlobalVariable                                    GlobalVariable;                                             // 0x0030   (0x0010)  
	int32_t                                            VariableValue;                                              // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Indiana.SetGlobalIfGlobalEvent
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align 8 MaxSize: 0x0060
class USetGlobalIfGlobalEvent : public UScriptEvent
{ 
public:
	FGlobalVariable                                    GlobalVariable;                                             // 0x0030   (0x0010)  
	int32_t                                            VariableValue;                                              // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	FGlobalVariable                                    ConditionGlobalVariable;                                    // 0x0048   (0x0010)  
	int32_t                                            ConditionValue;                                             // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Indiana.IncrementGlobalValueEvent
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UIncrementGlobalValueEvent : public UScriptEvent
{ 
public:
	FGlobalVariable                                    GlobalVariable;                                             // 0x0030   (0x0010)  
	int32_t                                            IncrementValue;                                             // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Indiana.RandomizeGlobalValueEvent
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class URandomizeGlobalValueEvent : public UScriptEvent
{ 
public:
	FGlobalVariable                                    GlobalVariable;                                             // 0x0030   (0x0010)  
	int32_t                                            MinValue;                                                   // 0x0040   (0x0004)  
	int32_t                                            MaxValue;                                                   // 0x0044   (0x0004)  
};

/// Class /Script/Indiana.StartQuestEvent
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UStartQuestEvent : public UScriptEvent
{ 
public:
	FQuestReference                                    Quest;                                                      // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.TriggerQuestAddendumEvent
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UTriggerQuestAddendumEvent : public UScriptEvent
{ 
public:
	FQuestReference                                    Quest;                                                      // 0x0030   (0x0010)  
	int32_t                                            AddendumID;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Indiana.AdvanceQuestEvent
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UAdvanceQuestEvent : public UScriptEvent
{ 
public:
	FQuestReference                                    Quest;                                                      // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.RemoteEvent
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class URemoteEvent : public UScriptEvent
{ 
public:
	FString                                            EventName;                                                  // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.ScriptManager
/// Size: 0x0180 (384 bytes) (0x000030 - 0x000180) align 8 MaxSize: 0x0180
class UScriptManager : public UObject
{ 
public:
	class UScripts*                                    Scripts;                                                    // 0x0030   (0x0008)  
	class UConditionals*                               Conditionals;                                               // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_7[0x140];                                     // 0x0040   (0x0140)  MISSED
};

/// Class /Script/Indiana.Scripts
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UScripts : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Indiana.Scripts.UnsealOCL
	// void UnsealOCL(FGuid& OCLObjectID);                                                                                      // [0x18b5100] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.UnlockOCL
	// void UnlockOCL(FGuid& OCLObjectID);                                                                                      // [0x18b5070] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.UnlockComputer
	// void UnlockComputer(FGuid& ComputerObjectID);                                                                            // [0x18b4fe0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.UnlockCompanion
	// void UnlockCompanion(FGuid& CompanionID);                                                                                // [0x18b4f50] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.UnbarOCL
	// void UnbarOCL(FGuid& OCLObjectID);                                                                                       // [0x18b4ec0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.TriggerQuestFailState
	// void TriggerQuestFailState(FGuid QuestID, int32_t EndStateID);                                                           // [0x18b4df0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.TriggerQuestEndState
	// void TriggerQuestEndState(FGuid QuestID, int32_t EndStateID);                                                            // [0x18b4d20] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.TriggerQuestAddendum
	// void TriggerQuestAddendum(FGuid QuestID, int32_t AddendumID);                                                            // [0x18b4c50] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.TravelToDestination
	// void TravelToDestination(FString TravelDestination, bool bTriggerAutosave);                                              // [0x18b4b70] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.TakeItemValue
	// void TakeItemValue(FString Item);                                                                                        // [0x18b4ad0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.StartQuestWithAlternateDescription
	// void StartQuestWithAlternateDescription(FGuid QuestID, int32_t QuestDescriptionID);                                      // [0x18b4a00] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.StartQuest
	// void StartQuest(FGuid QuestID);                                                                                          // [0x18b4970] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.ShowBeacon
	// void ShowBeacon(FGuid& BeaconObjectID);                                                                                  // [0x18b4830] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetTrackedQuest
	// void SetTrackedQuest(FGuid QuestID);                                                                                     // [0x18b47a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetTeamRelationship
	// void SetTeamRelationship(FString SourceTeam, FString& OtherTeam, TEnumAsByte<ETeamAttitude> Relationship, bool bMutual); // [0x18b4610] Final|Native|Static|Public|HasOutParms 
	// Function /Script/Indiana.Scripts.SetTalkIdleOverride
	// void SetTalkIdleOverride(FGuid Actor, FName TalkIdleOverrideName, EEmotion Emotion, float Delay, float Duration, bool Persist); // [0x18b4430] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetSpeakersTalkIdleOverride
	// void SetSpeakersTalkIdleOverride(FName TalkIdleOverrideName, EEmotion Emotion, float Delay, float Duration, bool Persist); // [0x18b42a0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSpeakersEmotionWithDelay
	// void SetSpeakersEmotionWithDelay(EEmotion Emotion, float EmotionDelay, float Duration, bool Persist);                    // [0x18b4150] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSpeakersEmotionFull
	// void SetSpeakersEmotionFull(EEmotion Emotion, float Delay, float Duration, float HeadStrength, bool Persist, bool AffectHead, bool AffectBody); // [0x18b3f20] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSpeakersEmotion
	// void SetSpeakersEmotion(EEmotion Emotion, float Duration, bool Persist);                                                 // [0x18b3e10] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSpeakersDefaultEmotion
	// void SetSpeakersDefaultEmotion(EEmotion Emotion);                                                                        // [0x18b3da0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSlideshowImageKey
	// void SetSlideshowImageKey(FString& ImageKey);                                                                            // [0x18b3d00] Final|Native|Static|Public|HasOutParms 
	// Function /Script/Indiana.Scripts.SetQuestAlternateDescription
	// void SetQuestAlternateDescription(FGuid QuestID, int32_t QuestDescriptionID);                                            // [0x18b3c30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetPosture
	// void SetPosture(EPosture Posture, float Delay, float Duration, bool Persist);                                            // [0x18b3ae0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPointOfInterestDiscovered
	// void SetPointOfInterestDiscovered(FString PointOfInterestData, bool bCanAwardXP);                                        // [0x18b3a00] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerVisitedTravelDestination
	// void SetPlayerVisitedTravelDestination(FString TravelDestination);                                                       // [0x18b3960] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerVisitedRegion
	// void SetPlayerVisitedRegion(FString TravelRegion);                                                                       // [0x18b38c0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerTravelDestinationLocked
	// void SetPlayerTravelDestinationLocked(FString TravelDestination, bool bLocked);                                          // [0x18b37e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerTravelDestinationHidden
	// void SetPlayerTravelDestinationHidden(FString TravelDestination, bool bHidden);                                          // [0x18b3700] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerShipLocation
	// void SetPlayerShipLocation(FString ShipDestination);                                                                     // [0x18b3660] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerRelationshipToHostile
	// void SetPlayerRelationshipToHostile(FGuid& CharacterID);                                                                 // [0x18b35d0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPlayerOwnershipOfItemTypeInContainer
	// void SetPlayerOwnershipOfItemTypeInContainer(FGuid& ContainerID, FString Item, bool bPlayerOwned, bool bClearNonPlayerOwnership); // [0x18b3320] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPlayerOwnershipOfItemsInContainer
	// void SetPlayerOwnershipOfItemsInContainer(FGuid& ContainerID, bool bPlayerOwned, bool bClearNonPlayerOwnership);         // [0x18b34b0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPlayerAwareOfTravelDestination
	// void SetPlayerAwareOfTravelDestination(FString TravelDestination);                                                       // [0x18b3280] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerAwareOfRegion
	// void SetPlayerAwareOfRegion(FString TravelRegion);                                                                       // [0x18b31e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPickupPlayerOwnership
	// void SetPickupPlayerOwnership(FGuid& PickupID, bool bPlayerOwned, bool bClearNonPlayerOwnership);                        // [0x18b30c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPickupNonPlayerOwnership
	// void SetPickupNonPlayerOwnership(FGuid& PickupID, FGuid& Actor, bool bClearPlayerOwnership);                             // [0x18b2f80] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPickupFactionOwnership
	// void SetPickupFactionOwnership(FGuid& PickupID, FString Faction, bool bClearPlayerOwnership);                            // [0x18b2e40] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetObjectiveAlternateDescription
	// void SetObjectiveAlternateDescription(FGuid QuestID, int32_t ObjectiveID, int32_t ObjectiveDescriptionID);               // [0x18b2d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetNonPlayerOwnershipOfItemTypeInContainer
	// void SetNonPlayerOwnershipOfItemTypeInContainer(FGuid& ContainerID, FString Item, FGuid& Actor, bool bClearPlayerOwnership); // [0x18b2a60] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetNonPlayerOwnershipOfItemsInContainer
	// void SetNonPlayerOwnershipOfItemsInContainer(FGuid& ContainerID, FGuid& Actor, bool bClearPlayerOwnership);              // [0x18b2bf0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetMusicOverride
	// void SetMusicOverride(FString OverrideTrack);                                                                            // [0x18b29c0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetInterrogationComplete
	// void SetInterrogationComplete(EInterrogationResult Result);                                                              // [0x18b2950] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetGlobalVariableValue
	// void SetGlobalVariableValue(FGlobalVariable& Variable, int32_t Value);                                                   // [0x18b2860] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetGlobalValue
	// void SetGlobalValue(FString VariableName, int32_t Value);                                                                // [0x18b2780] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetGlobalIfGlobal
	// void SetGlobalIfGlobal(FString ConditionVariableName, int32_t ConditionValue, FString VariableName, int32_t Value);      // [0x18b2600] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetFactionOwnershipOfItemTypeInContainer
	// void SetFactionOwnershipOfItemTypeInContainer(FGuid& ContainerID, FString Item, FString Faction, bool bClearPlayerOwnership); // [0x18b2320] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetFactionOwnershipOfItemsInContainer
	// void SetFactionOwnershipOfItemsInContainer(FGuid& ContainerID, FString Faction, bool bClearPlayerOwnership);             // [0x18b24c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetFactionEncountered
	// void SetFactionEncountered(FString Faction);                                                                             // [0x18b2280] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetEmotionWithDelay
	// void SetEmotionWithDelay(FGuid Actor, EEmotion Emotion, float EmotionDelay, float Duration, bool Persist);               // [0x18b20e0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetEmotionFull
	// void SetEmotionFull(FGuid Actor, EEmotion Emotion, float Delay, float Duration, float HeadStrength, bool Persist, bool AffectHead, bool AffectBody); // [0x18b1e60] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetEmotion
	// void SetEmotion(FGuid Actor, EEmotion Emotion, float Duration, bool Persist);                                            // [0x18b1d00] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetDefaultEmotion
	// void SetDefaultEmotion(FGuid Actor, EEmotion Emotion);                                                                   // [0x18b1c30] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetConversationTargetActor
	// void SetConversationTargetActor(FGuid Actor, FGuid Target, bool bRotateBody, bool bStickyTarget);                        // [0x18b1ad0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetConversationHeadTargetActor
	// void SetConversationHeadTargetActor(FGuid Actor, FGuid Target, bool bStickyTarget);                                      // [0x18b19b0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetConversationEyesTargetActor
	// void SetConversationEyesTargetActor(FGuid Actor, FGuid Target, bool bStickyTarget);                                      // [0x18b1890] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetConversationBodyTargetActor
	// void SetConversationBodyTargetActor(FGuid Actor, FGuid Target, bool bStickyTarget);                                      // [0x18b1770] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetCompanionWantsToTalk
	// void SetCompanionWantsToTalk(ESpecialObsidianID CompanionID, bool bWantsToTalk);                                         // [0x18b16b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetCharacterTeam_AvoidUsingThis
	// void SetCharacterTeam_AvoidUsingThis(FGuid& CharacterID, FString Team);                                                  // [0x18b15b0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SealOCL
	// void SealOCL(FGuid& OCLObjectID);                                                                                        // [0x18b1520] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ResumeMusic
	// void ResumeMusic();                                                                                                      // [0x18b1500] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.ResetRPGSystems
	// void ResetRPGSystems();                                                                                                  // [0x18b14e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.ReplaceCompanionInSlot
	// void ReplaceCompanionInSlot(FGuid& PotientalCompanionID, ECompanionSlot CommpanionSlot);                                 // [0x18b1400] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.RemoveItemFromActor
	// void RemoveItemFromActor(FGuid& ActorId, FString Item, int32_t Count);                                                   // [0x18b12c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.RemoveItem
	// void RemoveItem(FString Item, int32_t Count);                                                                            // [0x18b11e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.RemoveCurrency
	// void RemoveCurrency(FGuid& ActorId, int32_t Count);                                                                      // [0x18b1100] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.RemoveCompanionFromParty
	// void RemoveCompanionFromParty(FGuid& CompanionID);                                                                       // [0x18b1070] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.RemoteEvent
	// void RemoteEvent(FString EventName);                                                                                     // [0x18b0fd0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.RegisterNamedTimestamp
	// void RegisterNamedTimestamp(FString TimestampName);                                                                      // [0x18b0f30] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.RandomizeGlobalValueWithGlobals
	// void RandomizeGlobalValueWithGlobals(FString VariableName, FString MinValueGlobal, FString MaxValueGlobal);              // [0x18b0de0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.RandomizeGlobalValue
	// void RandomizeGlobalValue(FString VariableName, int32_t MinValue, int32_t MaxValue);                                     // [0x18b0cc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.PlayConversationChatterEvent
	// void PlayConversationChatterEvent(EChatterEventType ChatterEvent, bool bConversationNode);                               // [0x18b0c00] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.PauseMusic
	// void PauseMusic();                                                                                                       // [0x18b0be0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.OpenOCL
	// void OpenOCL(FGuid& OCLObjectID);                                                                                        // [0x18b0b50] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.MentionQuest
	// void MentionQuest(FGuid QuestID);                                                                                        // [0x18b0a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.MentionPointOfInterest
	// void MentionPointOfInterest(FString PointOfInterestData);                                                                // [0x18b0990] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.MarkConversationNodeAsRead
	// void MarkConversationNodeAsRead(FGuid ConversationID, int32_t NodeID);                                                   // [0x18b08c0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.MakePointOfInterestDiscoverable
	// void MakePointOfInterestDiscoverable(FString PointOfInterestData, bool bStillHidden);                                    // [0x18b07e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.LockOCL
	// void LockOCL(FGuid& OCLObjectID);                                                                                        // [0x18b0750] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.LockComputer
	// void LockComputer(FGuid& ComputerObjectID);                                                                              // [0x18b06c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.KillNPC
	// void KillNPC(FGuid& Character);                                                                                          // [0x18b0630] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.IncrementGlobalValue
	// void IncrementGlobalValue(FString VariableName, int32_t IncrementValue);                                                 // [0x18b0550] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.HidePointOfInterest
	// void HidePointOfInterest(FString PointOfInterestData);                                                                   // [0x18b03e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.HideBeacon
	// void HideBeacon(FGuid& BeaconObjectID);                                                                                  // [0x18b0350] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.GivePerkToActor
	// void GivePerkToActor(FGuid& ActorId, FString Perk);                                                                      // [0x18b0250] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.GiveLoot
	// void GiveLoot(FString LootTableData);                                                                                    // [0x18b01b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.GiveItemToActor
	// void GiveItemToActor(FGuid& ActorIdID, FString Item, int32_t Count);                                                     // [0x18b0070] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.GiveItem
	// void GiveItem(FString Item, int32_t Count);                                                                              // [0x18aff90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.GiveCurrency
	// void GiveCurrency(FGuid& ActorId, int32_t Count);                                                                        // [0x18afeb0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.GetCompanionMoral
	// float GetCompanionMoral(ESpecialObsidianID CompanionID);                                                                 // [0x18afe30] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.DynamicallyReplaceCompanion
	// void DynamicallyReplaceCompanion(ESpecialObsidianID OldCompanionID, ESpecialObsidianID NewCompanionID);                  // [0x18afd70] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.DismissCompanion
	// void DismissCompanion(ESpecialObsidianID CompanionID);                                                                   // [0x18afd00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.DisarmTrap
	// void DisarmTrap(FGuid& TrapObjectID);                                                                                    // [0x18afc70] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.DebugPrintMessage
	// void DebugPrintMessage(FString Message);                                                                                 // [0x18afbd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.DebugAdvanceQuest
	// void DebugAdvanceQuest(FGuid QuestID);                                                                                   // [0x18afb40] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.CloseOCL
	// void CloseOCL(FGuid& OCLObjectID, bool Block, bool bSeal);                                                               // [0x18afa20] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearTalkIdleOverrideOnNextEmotionChange
	// void ClearTalkIdleOverrideOnNextEmotionChange(FGuid Actor);                                                              // [0x18af990] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearTalkIdleOverride
	// void ClearTalkIdleOverride(FGuid Actor, EEmotion Emotion, float Duration, bool Persist);                                 // [0x18af830] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearSpeakersTalkIdleOverrideOnNextEmotionChange
	// void ClearSpeakersTalkIdleOverrideOnNextEmotionChange();                                                                 // [0x18af810] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearSpeakersTalkIdleOverride
	// void ClearSpeakersTalkIdleOverride(EEmotion Emotion, float Duration, bool Persist);                                      // [0x18af700] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearSpeakersDefaultEmotion
	// void ClearSpeakersDefaultEmotion();                                                                                      // [0x18af6e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearPickupOwnerships
	// void ClearPickupOwnerships(FGuid& PickupID, bool bClearPlayerOwnership, bool bClearNonPlayerOwnership);                  // [0x18af5c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearOwnershipsOfItemTypeInContainer
	// void ClearOwnershipsOfItemTypeInContainer(FGuid& ContainerID, FString Item, bool bClearPlayerOwnership, bool bClearNonPlayerOwnership); // [0x18af310] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearOwnershipsOfItemsInContainer
	// void ClearOwnershipsOfItemsInContainer(FGuid& ContainerID, bool bClearPlayerOwnership, bool bClearNonPlayerOwnership);   // [0x18af4a0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearNamedTimestamp
	// void ClearNamedTimestamp(FString TimestampName);                                                                         // [0x18af270] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearMusicOverride
	// void ClearMusicOverride();                                                                                               // [0x18af250] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.ClearFactionRecentHostilityToPlayer
	// void ClearFactionRecentHostilityToPlayer(FString Faction);                                                               // [0x18af1b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearEmotion
	// void ClearEmotion(FGuid Actor);                                                                                          // [0x18af120] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearDefaultEmotion
	// void ClearDefaultEmotion(FGuid Actor);                                                                                   // [0x18af090] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationTargetActor
	// void ClearConversationTargetActor(FGuid Actor, bool bStickyTarget);                                                      // [0x18aefc0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationNodeAsRead
	// void ClearConversationNodeAsRead(FGuid ConversationID, int32_t NodeID);                                                  // [0x18aeef0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationHeadTargetActor
	// void ClearConversationHeadTargetActor(FGuid Actor, bool bStickyTarget);                                                  // [0x18aee20] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationEyesTargetActor
	// void ClearConversationEyesTargetActor(FGuid Actor, bool bStickyTarget);                                                  // [0x18aed50] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationBodyTargetActor
	// void ClearConversationBodyTargetActor(FGuid Actor, bool bStickyTarget);                                                  // [0x18aec80] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.CallGlobalScript
	// void CallGlobalScript(FGuid GlobalScriptID);                                                                             // [0x18aebf0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.Bribe
	// void Bribe(FString VariableName);                                                                                        // [0x18aeb50] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.BeginTradeWithSpeaker
	// void BeginTradeWithSpeaker();                                                                                            // [0x18aeb30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.BarOCL
	// void BarOCL(FGuid& OCLObjectID);                                                                                         // [0x18aeaa0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.AttemptEnableHazard
	// void AttemptEnableHazard(FGuid& HazardActorID, bool bEnable);                                                            // [0x18ae9c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ArmTrap
	// void ArmTrap(FGuid& TrapObjectID);                                                                                       // [0x18ae930] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.AdvanceToHour
	// void AdvanceToHour(int32_t TargetHour);                                                                                  // [0x18ae8b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceTime
	// void AdvanceTime(float Days, float Hours, float Minutes, float Seconds);                                                 // [0x18ae760] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceSeconds
	// void AdvanceSeconds(float Seconds);                                                                                      // [0x18ae6e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceQuest
	// void AdvanceQuest(FGuid QuestID);                                                                                        // [0x18ae650] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.AdvanceMinutes
	// void AdvanceMinutes(float Minutes);                                                                                      // [0x18ae5d0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceHours
	// void AdvanceHours(float Hours);                                                                                          // [0x18ae550] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceDays
	// void AdvanceDays(float Days);                                                                                            // [0x18ae4d0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdjustFactionReputation
	// void AdjustFactionReputation(FString Faction, EReputationType ReputationType, EReputationIncrementType IncrementType, int32_t CustomAmount); // [0x18ae360] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdjustCompanionMoral
	// void AdjustCompanionMoral(ESpecialObsidianID CompanionID, bool bPositiveMoralAdjustment, EMoraleContribution Contribution, float CustomAmount, bool bOnlyActivePartyMembers); // [0x18ae1b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AddCompanionToParty
	// void AddCompanionToParty(FGuid& CompanionID);                                                                            // [0x18ae120] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.AddAudioLogBP
	// void AddAudioLogBP(class UAudioLogDataAsset* audiolog, bool bPlayOnPickup);                                              // [0x18ae060] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.AddAudioLog
	// void AddAudioLog(FString audiolog, bool bPlayOnPickup);                                                                  // [0x18adf80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.AchievementIncrement
	// void AchievementIncrement(FName& AchievementName, int32_t Count);                                                        // [0x18adeb0] Final|Native|Static|Public|HasOutParms 
	// Function /Script/Indiana.Scripts.AchievementGameOver
	// void AchievementGameOver();                                                                                              // [0x18ade90] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AchievementCompleted
	// void AchievementCompleted(FName& AchievementName);                                                                       // [0x18ade10] Final|Native|Static|Public|HasOutParms 
};

/// Class /Script/Indiana.SearchBehaviorStateInfo
/// Size: 0x0148 (328 bytes) (0x000120 - 0x000148) align 8 MaxSize: 0x0148
class USearchBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	class UBehaviorStateRequestData*                   QueuedDecisionTreeRequest;                                  // 0x0120   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0128   (0x0020)  MISSED
};

/// Class /Script/Indiana.SearchRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class USearchRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
	bool                                               bRequireReachable;                                          // 0x0068   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	float                                              RequiredSearchDuration;                                     // 0x006C   (0x0004)  
};

/// Class /Script/Indiana.SelectedNotificationWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class USelectedNotificationWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              TextBlock;                                                  // 0x0300   (0x0008)  
	float                                              NotificationVisibleTimePerClick;                            // 0x0308   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x030C   (0x000C)  MISSED


	/// Functions
	// Function /Script/Indiana.SelectedNotificationWidget.StopFadeOutAnimation
	// void StopFadeOutAnimation();                                                                                             // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.SelectedNotificationWidget.PlayNotificationAnimation
	// void PlayNotificationAnimation();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.SelectedNotificationWidget.PlayFadeOutAnimation
	// void PlayFadeOutAnimation();                                                                                             // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.SelectedNotificationWidget.OnFadeRightAnimationEnd
	// void OnFadeRightAnimationEnd();                                                                                          // [0x18b9cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SelectedNotificationWidget.OnFadeOutAnimationEnd
	// void OnFadeOutAnimationEnd();                                                                                            // [0x18b9ca0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.HUDSetting
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 MaxSize: 0x0034
struct FHUDSetting
{ 
	ECompassVisibilityMode                             CompassVisibility;                                          // 0x0000   (0x0001)  
	EDialogSkillMode                                   DialogSkillMode;                                            // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              TooltipDelay;                                               // 0x0004   (0x0004)  
	float                                              NotificationDuration;                                       // 0x0008   (0x0004)  
	bool                                               bInteractionOutlines;                                       // 0x000C   (0x0001)  
	bool                                               bInteractionControls;                                       // 0x000D   (0x0001)  
	bool                                               bWaypointMarkers;                                           // 0x000E   (0x0001)  
	EEnemyHealthBarMode                                EnemyHealthBarMode;                                         // 0x000F   (0x0001)  
	EReticleMode                                       ReticleMode;                                                // 0x0010   (0x0001)  
	bool                                               bReticleFeedback;                                           // 0x0011   (0x0001)  
	EQuestUpdateMode                                   QuestUpdateMode;                                            // 0x0012   (0x0001)  
	bool                                               bAwarenessMeterMode;                                        // 0x0013   (0x0001)  
	EPlayerStatusBarMode                               StatusBarMode;                                              // 0x0014   (0x0001)  
	bool                                               bShowPlayerStatusEffects;                                   // 0x0015   (0x0001)  
	EPlayerStatusEffectTextMode                        PlayerStatusEffectTextMode;                                 // 0x0016   (0x0001)  
	ECompanionAbilityUIMode                            CompanionAbilityUI;                                         // 0x0017   (0x0001)  
	ECompanionAbilityBindingMode                       CompanionAbilityBindings;                                   // 0x0018   (0x0001)  
	EHeldWeaponDisplayMode                             HeldWeaponDisplay;                                          // 0x0019   (0x0001)  
	EHeldWeaponDisplayText                             HeldWeaponTextDisplay;                                      // 0x001A   (0x0001)  
	EAreaNameMode                                      AreaNameMode;                                               // 0x001B   (0x0001)  
	EDirectionalDamageIndicatorMode                    DirectionalDamageIndicatorMode;                             // 0x001C   (0x0001)  
	EFPSIndicatorMode                                  FPSIndicator;                                               // 0x001D   (0x0001)  
	bool                                               bShowSurvivalBars;                                          // 0x001E   (0x0001)  
	EMedicalInhalerMode                                InhalerMode;                                                // 0x001F   (0x0001)  
	EAbilityControlMode                                AbilityControlMode;                                         // 0x0020   (0x0001)  
	ECompanionStatusMode                               CompanionStatusMode;                                        // 0x0021   (0x0001)  
	ECompanionAbilityPassiveCDMode                     CompanionAbilityPassiveCooldowns;                           // 0x0022   (0x0001)  
	ECompanionAbilityPassiveNotificationMode           CompanionAbilityPassiveNotifications;                       // 0x0023   (0x0001)  
	bool                                               bShowLevelUpNotifications;                                  // 0x0024   (0x0001)  
	bool                                               bShowLevelUpReminders;                                      // 0x0025   (0x0001)  
	bool                                               bShowCombatIndicator;                                       // 0x0026   (0x0001)  
	bool                                               bShowTTDScanner;                                            // 0x0027   (0x0001)  
	ETTDReticleMeterMode                               TTDReticleMeterMode;                                        // 0x0028   (0x0001)  
	bool                                               bTTDStatusEffectPreview;                                    // 0x0029   (0x0001)  
	bool                                               bShowDisguiseMeter;                                         // 0x002A   (0x0001)  
	bool                                               bEquipmentRepairWarning;                                    // 0x002B   (0x0001)  
	EWeaponSelectMode                                  WeaponSelectMode;                                           // 0x002C   (0x0001)  
	EWeaponSelectAxisMode                              WeaponSelectAxisMode;                                       // 0x002D   (0x0001)  
	bool                                               bShowTutorialNotifications;                                 // 0x002E   (0x0001)  
	bool                                               bShowTutorialPopups;                                        // 0x002F   (0x0001)  
	bool                                               bShowLootTooltips;                                          // 0x0030   (0x0001)  
	bool                                               bShowLootControls;                                          // 0x0031   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0032   (0x0002)  MISSED
};

/// Class /Script/Indiana.SettingsHUDMode
/// Size: 0x00E8 (232 bytes) (0x000038 - 0x0000E8) align 8 MaxSize: 0x00E8
class USettingsHUDMode : public UDataAsset
{ 
public:
	FHUDSetting                                        MinimalSettings;                                            // 0x0038   (0x0034)  
	FHUDSetting                                        DefaultSettings;                                            // 0x006C   (0x0034)  
	FHUDSetting                                        MaximumSettings;                                            // 0x00A0   (0x0034)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
	TArray<ESetting>                                   HudSettings;                                                // 0x00D8   (0x0010)  
};

/// Class /Script/Indiana.SettingsMenuButtonSlotWidget
/// Size: 0x0350 (848 bytes) (0x000300 - 0x000350) align 8 MaxSize: 0x0350
class USettingsMenuButtonSlotWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UButtonBase*                                 ChildButton;                                                // 0x0310   (0x0008)  
	class UTextBlockBase*                              ButtonTextBlock;                                            // 0x0318   (0x0008)  
	class USettingsMenuWidget*                         SettingsMenu;                                               // 0x0320   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0328   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.SettingsMenuButtonSlotWidget.OnButtonClicked
	// void OnButtonClicked();                                                                                                  // [0x18b9be0] Final|Native|Protected 
};

/// Class /Script/Indiana.SettingsMenuSlotEntryBase
/// Size: 0x0300 (768 bytes) (0x000300 - 0x000300) align 8 MaxSize: 0x0300
class USettingsMenuSlotEntryBase : public UIndianaUserWidget
{ 
public:
};

/// Class /Script/Indiana.SettingsMenuCheckBoxWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class USettingsMenuCheckBoxWidget : public USettingsMenuSlotEntryBase
{ 
public:
	class UCheckBoxWidget*                             CheckBox;                                                   // 0x0300   (0x0008)  
	class UUserSetting*                                UserSetting;                                                // 0x0308   (0x0008)  
	class USettingsMenuWidget*                         SettingsMenu;                                               // 0x0310   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0318   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.SettingsMenuCheckBoxWidget.OnValueChanged
	// void OnValueChanged(class UButtonBase* Button);                                                                          // [0x18b9fa0] Final|Native|Protected 
};

/// Class /Script/Indiana.SettingsMenuComboBoxWidget
/// Size: 0x0290 (656 bytes) (0x000278 - 0x000290) align 8 MaxSize: 0x0290
class USettingsMenuComboBoxWidget : public UUserWidget
{ 
public:
	class UComboBoxStringBase*                         ComboBox;                                                   // 0x0278   (0x0008)  
	class UUserSetting*                                UserSetting;                                                // 0x0280   (0x0008)  
	class USettingsMenuWidget*                         SettingsMenu;                                               // 0x0288   (0x0008)  


	/// Functions
	// Function /Script/Indiana.SettingsMenuComboBoxWidget.OnValueChanged
	// void OnValueChanged(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);                                       // [0x18ba030] Final|Native|Protected 
};

/// Struct /Script/Indiana.SettingPlatformStringContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FSettingPlatformStringContainer
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	FLocString                                         Description;                                                // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.SettingDescription
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 MaxSize: 0x0068
struct FSettingDescription
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	FLocString                                         Description;                                                // 0x0008   (0x0008)  
	ESettingSubcategory                                Subcategory;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	TMap<EPlatformFamily, FSettingPlatformStringContainer> PlatformOverrides;                                      // 0x0018   (0x0050)  
};

/// Struct /Script/Indiana.SubcategoryDescription
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 MaxSize: 0x0060
struct FSubcategoryDescription
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	FLocString                                         Description;                                                // 0x0008   (0x0008)  
	TMap<EPlatformFamily, FSettingPlatformStringContainer> PlatformOverrides;                                      // 0x0010   (0x0050)  
};

/// Struct /Script/Indiana.GamepadLayout
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 MaxSize: 0x0070
struct FGamepadLayout
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	FLocString                                         Description;                                                // 0x0008   (0x0008)  
	TMap<EPlatformFamily, FSettingPlatformStringContainer> PlatformOverrides;                                      // 0x0010   (0x0050)  
	TArray<FLocString>                                 ButtonNames;                                                // 0x0060   (0x0010)  
};

/// Struct /Script/Indiana.DynamicOverrides
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 MaxSize: 0x0008
struct FDynamicOverrides
{ 
	FLocString                                         AutoSprintName;                                             // 0x0000   (0x0008)  
};

/// Class /Script/Indiana.SettingsMenuData
/// Size: 0x00F0 (240 bytes) (0x000038 - 0x0000F0) align 8 MaxSize: 0x00F0
class USettingsMenuData : public UDataAsset
{ 
public:
	TMap<ESetting, FSettingDescription>                SettingMap;                                                 // 0x0038   (0x0050)  
	TMap<ESettingSubcategory, FSubcategoryDescription> SubcategoryMap;                                             // 0x0088   (0x0050)  
	TArray<FGamepadLayout>                             GamepadLayouts;                                             // 0x00D8   (0x0010)  
	FDynamicOverrides                                  DynamicOverrides;                                           // 0x00E8   (0x0008)  
};

/// Class /Script/Indiana.SettingsMenuInputKeySelector
/// Size: 0x03A8 (936 bytes) (0x000300 - 0x0003A8) align 8 MaxSize: 0x03A8
class USettingsMenuInputKeySelector : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0300   (0x0020)  MISSED
	FLocString                                         NoKeySpecifiedText;                                         // 0x0320   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0328   (0x0008)  MISSED
	class UTextBlockBase*                              KeyInputTextBlock;                                          // 0x0330   (0x0008)  
	class UImage*                                      InputIcon;                                                  // 0x0338   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0340   (0x0008)  
	class UClass*                                      KeybindDialogBoxClass;                                      // 0x0348   (0x0008)  
	unsigned char                                      UnknownData02_7[0x58];                                      // 0x0350   (0x0058)  MISSED


	/// Functions
	// Function /Script/Indiana.SettingsMenuInputKeySelector.OnRightClicked
	// void OnRightClicked();                                                                                                   // [0x18b9ef0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuInputKeySelector.OnClicked
	// void OnClicked();                                                                                                        // [0x18b9c00] Final|Native|Protected 
};

/// Class /Script/Indiana.SettingsMenuKeyRebindWidget
/// Size: 0x0360 (864 bytes) (0x000300 - 0x000360) align 8 MaxSize: 0x0360
class USettingsMenuKeyRebindWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              SettingName;                                                // 0x0300   (0x0008)  
	class USettingsMenuInputKeySelector*               PrimaryKeySelector;                                         // 0x0308   (0x0008)  
	class USettingsMenuInputKeySelector*               SecondaryKeySelector;                                       // 0x0310   (0x0008)  
	class UButtonBase*                                 GameplayButton;                                             // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0320   (0x0010)  MISSED
	class UUserSettingKeyBinding*                      UserSetting;                                                // 0x0330   (0x0008)  
	class USettingsMenuWidget*                         SettingsMenu;                                               // 0x0338   (0x0008)  
	class UKeyBindsMenuWidget*                         ParentWidget;                                               // 0x0340   (0x0008)  
	FLocString                                         SettingNameString;                                          // 0x0348   (0x0008)  
	bool                                               bIsSelecting;                                               // 0x0350   (0x0001)  
	unsigned char                                      UnknownData01_6[0xB];                                       // 0x0351   (0x000B)  MISSED
	int32_t                                            SelectionIndex;                                             // 0x035C   (0x0004)  


	/// Functions
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnSecondaryIsSelectingKeyChanged
	// void OnSecondaryIsSelectingKeyChanged(bool bIsSelectingKey);                                                             // [0x18b9f10] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnPrimaryIsSelectingKeyChanged
	// void OnPrimaryIsSelectingKeyChanged(bool bIsSelectingKey);                                                               // [0x18b9e60] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnKeySelected
	// void OnKeySelected(FInputChord InputChord);                                                                              // [0x18b9d00] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnContainerClicked
	// void OnContainerClicked();                                                                                               // [0x18b9c20] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnBack
	// void OnBack();                                                                                                           // [0x18b9bc0] Final|Native|Protected 
};

/// Class /Script/Indiana.SettingsMenuOptionPresenterWdgt
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class USettingsMenuOptionPresenterWdgt : public USettingsMenuSlotEntryBase
{ 
public:
	class UOverlay*                                    ButtonContents;                                             // 0x0300   (0x0008)  
	class UOptionPresenterWidget*                      OptionPresenter;                                            // 0x0308   (0x0008)  
	class UUserSetting*                                UserSetting;                                                // 0x0310   (0x0008)  
	class USettingsMenuWidget*                         SettingsMenu;                                               // 0x0318   (0x0008)  


	/// Functions
	// Function /Script/Indiana.SettingsMenuOptionPresenterWdgt.OnValueChanged
	// void OnValueChanged(int32_t SelectedItem);                                                                               // [0x18ba160] Final|Native|Public  
};

/// Class /Script/Indiana.SettingsMenuSliderWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class USettingsMenuSliderWidget : public USettingsMenuSlotEntryBase
{ 
public:
	class UWaitTimeSliderWidget*                       Slider;                                                     // 0x0300   (0x0008)  
	class UTextBlockBase*                              ValueTextBlock;                                             // 0x0308   (0x0008)  
	class UUserSetting*                                UserSetting;                                                // 0x0310   (0x0008)  
	class USettingsMenuWidget*                         SettingsMenu;                                               // 0x0318   (0x0008)  
	class UDifficultySelectWidget*                     DifficultySelect;                                           // 0x0320   (0x0008)  
	class UIndianaInterfaceUserWidget*                 ParentMenu;                                                 // 0x0328   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0330   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.SettingsMenuSliderWidget.OnValueChanged
	// void OnValueChanged(FSliderEvent& Event);                                                                                // [0x18ba1f0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.SettingsMenuSlotWidget
/// Size: 0x0350 (848 bytes) (0x000300 - 0x000350) align 8 MaxSize: 0x0350
class USettingsMenuSlotWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0300   (0x0020)  MISSED
	class UButtonBase*                                 GamepadButton;                                              // 0x0320   (0x0008)  
	class UTextBlockBase*                              SettingName;                                                // 0x0328   (0x0008)  
	class UNamedSlot*                                  NamedSlot;                                                  // 0x0330   (0x0008)  
	class USizeBox*                                    OptionTypeSizeBox;                                          // 0x0338   (0x0008)  
	class USizeBox*                                    OptionNameSizeBox;                                          // 0x0340   (0x0008)  
	float                                              ExtendedOptionTypeNameWidth;                                // 0x0348   (0x0004)  
	float                                              ExtendedOptionTypeMinWidth;                                 // 0x034C   (0x0004)  
};

/// Class /Script/Indiana.SettingsMenuSubcategoryWidget
/// Size: 0x0298 (664 bytes) (0x000278 - 0x000298) align 8 MaxSize: 0x0298
class USettingsMenuSubcategoryWidget : public UUserWidget
{ 
public:
	class UButtonBase*                                 ApplyButton;                                                // 0x0278   (0x0008)  
	class UTextBlockBase*                              CategoryNameText;                                           // 0x0280   (0x0008)  
	class UVerticalBox*                                SlotsVerticalBox;                                           // 0x0288   (0x0008)  
	class UClass*                                      SubcategorySlotClass;                                       // 0x0290   (0x0008)  
};

/// Class /Script/Indiana.UserSetting
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align 8 MaxSize: 0x0060
class UUserSetting : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0030   (0x0020)  MISSED
	class UUserWidget*                                 Control;                                                    // 0x0050   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0058   (0x0008)  MISSED
};

/// Class /Script/Indiana.UserSettingBool
/// Size: 0x0098 (152 bytes) (0x000060 - 0x000098) align 8 MaxSize: 0x0098
class UUserSettingBool : public UUserSetting
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0060   (0x0038)  MISSED
};

/// Class /Script/Indiana.UserSettingFloat
/// Size: 0x00A0 (160 bytes) (0x000060 - 0x0000A0) align 8 MaxSize: 0x00A0
class UUserSettingFloat : public UUserSetting
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0060   (0x0040)  MISSED
};

/// Class /Script/Indiana.UserSettingInt32
/// Size: 0x00A0 (160 bytes) (0x000060 - 0x0000A0) align 8 MaxSize: 0x00A0
class UUserSettingInt32 : public UUserSetting
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0060   (0x0040)  MISSED
};

/// Class /Script/Indiana.UserSettingKeyBinding
/// Size: 0x0070 (112 bytes) (0x000060 - 0x000070) align 8 MaxSize: 0x0070
class UUserSettingKeyBinding : public UUserSetting
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0060   (0x0010)  MISSED
};

/// Class /Script/Indiana.UserSettingActionBinding
/// Size: 0x0100 (256 bytes) (0x000070 - 0x000100) align 8 MaxSize: 0x0100
class UUserSettingActionBinding : public UUserSettingKeyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x90];                                      // 0x0070   (0x0090)  MISSED
};

/// Class /Script/Indiana.UserSettingAxisBinding
/// Size: 0x00F8 (248 bytes) (0x000070 - 0x0000F8) align 8 MaxSize: 0x00F8
class UUserSettingAxisBinding : public UUserSettingKeyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x88];                                      // 0x0070   (0x0088)  MISSED
};

/// Class /Script/Indiana.UserSettingActionKeyboardBinding
/// Size: 0x00C0 (192 bytes) (0x000070 - 0x0000C0) align 8 MaxSize: 0x00C0
class UUserSettingActionKeyboardBinding : public UUserSettingKeyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0070   (0x0050)  MISSED
};

/// Class /Script/Indiana.UserSettingAxisKeyboardBinding
/// Size: 0x00C8 (200 bytes) (0x000070 - 0x0000C8) align 8 MaxSize: 0x00C8
class UUserSettingAxisKeyboardBinding : public UUserSettingKeyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x0070   (0x0058)  MISSED
};

/// Class /Script/Indiana.SettingsMenuWidget
/// Size: 0x0678 (1656 bytes) (0x000308 - 0x000678) align 8 MaxSize: 0x0678
class USettingsMenuWidget : public UIndianaInterfaceUserWidget
{ 
public:
	SDK_UNDEFINED(16,650) /* FMulticastInlineDelegate */ __um(SettingsClosedDelegate);                             // 0x0308   (0x0010)  
	class UClass*                                      SubcategorySlotClass;                                       // 0x0318   (0x0008)  
	class UClass*                                      SubcategoryClass;                                           // 0x0320   (0x0008)  
	class UClass*                                      SliderClass;                                                // 0x0328   (0x0008)  
	class UClass*                                      CheckBoxClass;                                              // 0x0330   (0x0008)  
	class UClass*                                      OptionPresenterClass;                                       // 0x0338   (0x0008)  
	class UClass*                                      ButtonClass;                                                // 0x0340   (0x0008)  
	class UClass*                                      KeyBindInterfaceClass;                                      // 0x0348   (0x0008)  
	class USettingsHUDMode*                            HUDSettingsAsset;                                           // 0x0350   (0x0008)  
	float                                              GamepadScrollMultiplier;                                    // 0x0358   (0x0004)  
	float                                              LangOptPresenterWidthOverride;                              // 0x035C   (0x0004)  
	float                                              LangOptLabelWidthOverride;                                  // 0x0360   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0364   (0x0004)  MISSED
	class UScrollBox*                                  MenuScrollBox;                                              // 0x0368   (0x0008)  
	class UScrollBox*                                  DescriptionScrollBox;                                       // 0x0370   (0x0008)  
	class UVerticalBox*                                Category0VerticalBox;                                       // 0x0378   (0x0008)  
	class UVerticalBox*                                Category1VerticalBox;                                       // 0x0380   (0x0008)  
	class UVerticalBox*                                Category2VerticalBox;                                       // 0x0388   (0x0008)  
	class UVerticalBox*                                Category3VerticalBox;                                       // 0x0390   (0x0008)  
	class UVerticalBox*                                Category4VerticalBox;                                       // 0x0398   (0x0008)  
	class UVerticalBox*                                Category5VerticalBox;                                       // 0x03A0   (0x0008)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x03A8   (0x0030)  MISSED
	class USettingsMenuSubcategoryWidget*              DisplaySubcategory;                                         // 0x03D8   (0x0008)  
	class UWidgetSwitcher*                             MenuSwitcher;                                               // 0x03E0   (0x0008)  
	class UHorizontalBox*                              PCButtonsHorizontalBox;                                     // 0x03E8   (0x0008)  
	class UHorizontalBox*                              InputLabelsHorizontalBox;                                   // 0x03F0   (0x0008)  
	class UTextBlockBase*                              DescriptionTextBlock;                                       // 0x03F8   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0400   (0x0008)  
	class UWidget*                                     Background;                                                 // 0x0408   (0x0008)  
	class UImage*                                      DescriptionImage;                                           // 0x0410   (0x0008)  
	class UBackgroundPanelWidget*                      DescriptionBackgroundPanel;                                 // 0x0418   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0420   (0x0008)  
	class UButtonBase*                                 DefaultsButton;                                             // 0x0428   (0x0008)  
	class UButtonBase*                                 ApplyButton;                                                // 0x0430   (0x0008)  
	TArray<class UUserSetting*>                        UserSettings;                                               // 0x0438   (0x0010)  
	TArray<class UUserSetting*>                        DisplayUserSettings;                                        // 0x0448   (0x0010)  
	TMap<ECategory, FLocString>                        NavBarCategories;                                           // 0x0458   (0x0050)  
	class USettingsMenuData*                           SettingsData;                                               // 0x04A8   (0x0008)  
	class UNavigationGroupWidget*                      NavigationBar;                                              // 0x04B0   (0x0008)  
	unsigned char                                      UnknownData02_7[0x1C0];                                     // 0x04B8   (0x01C0)  MISSED


	/// Functions
	// Function /Script/Indiana.SettingsMenuWidget.ValueChanged
	// void ValueChanged(class UUserSetting* UserSetting);                                                                      // [0x18ba940] Final|Native|Public  
	// Function /Script/Indiana.SettingsMenuWidget.UpdateDialogTimerText
	// void UpdateDialogTimerText(float DeltaTime);                                                                             // [0x18ba8c0] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.SetVisualEffectQuality
	// void SetVisualEffectQuality(int32_t Value);                                                                              // [0x18ba830] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetViewDistanceQuality
	// void SetViewDistanceQuality(int32_t Value);                                                                              // [0x18ba7a0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetTextureQuality
	// void SetTextureQuality(int32_t Value);                                                                                   // [0x18ba710] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetSSGIQuality
	// void SetSSGIQuality(int32_t Value);                                                                                      // [0x18ba5f0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetShadowQuality
	// void SetShadowQuality(int32_t Value);                                                                                    // [0x18ba680] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetPostProcessingQuality
	// void SetPostProcessingQuality(int32_t Value);                                                                            // [0x18ba560] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetGraphicsQuality
	// void SetGraphicsQuality(int32_t Value);                                                                                  // [0x18ba4d0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetFoliageQuality
	// void SetFoliageQuality(int32_t Value);                                                                                   // [0x18ba440] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetAntiAliasingQuality
	// void SetAntiAliasingQuality(int32_t Value);                                                                              // [0x18ba3b0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetAntiAliasingMethod
	// void SetAntiAliasingMethod(int32_t Value);                                                                               // [0x18ba320] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.QueueRefreshHUDMode
	// void QueueRefreshHUDMode();                                                                                              // [0x18ba300] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.OnOpenPCKeyBinds
	// void OnOpenPCKeyBinds();                                                                                                 // [0x18b9e40] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.OnOpenGamepadLayout
	// void OnOpenGamepadLayout();                                                                                              // [0x18b9e20] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18b9ce0] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.OnDetectGraphics
	// void OnDetectGraphics();                                                                                                 // [0x18b9c80] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.OnCyclePageRight
	// void OnCyclePageRight();                                                                                                 // [0x18b9c60] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.OnCyclePageLeft
	// void OnCyclePageLeft();                                                                                                  // [0x18b9c40] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.EmptyHandler
	// void EmptyHandler();                                                                                                     // [0x18b9ba0] Final|Native|Public  
	// Function /Script/Indiana.SettingsMenuWidget.DefaultsActionHandler
	// void DefaultsActionHandler();                                                                                            // [0x18b9b80] Final|Native|Public  
};

/// Class /Script/Indiana.Shape
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UShape : public UObject
{ 
public:
};

/// Class /Script/Indiana.BoxShape
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UBoxShape : public UShape
{ 
public:
	FBoxShapeData                                      BoxShape;                                                   // 0x0030   (0x0018)  
};

/// Class /Script/Indiana.SphereShape
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class USphereShape : public UShape
{ 
public:
	FSphereShapeData                                   SphereShape;                                                // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.CapsuleShape
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class UCapsuleShape : public UShape
{ 
public:
	FCapsuleShapeData                                  CapsuleShape;                                               // 0x0030   (0x0010)  
};

/// Class /Script/Indiana.SharedWeaponVisuals
/// Size: 0x0200 (512 bytes) (0x000200 - 0x000200) align 8 MaxSize: 0x0200
class USharedWeaponVisuals : public UWeaponVisuals
{ 
public:
};

/// Class /Script/Indiana.ShipDoor
/// Size: 0x0318 (792 bytes) (0x0002B8 - 0x000318) align 8 MaxSize: 0x0318
class AShipDoor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x38];                                      // 0x02B8   (0x0038)  MISSED
	class UClass*                                      CompanionSelectionClass;                                    // 0x02F0   (0x0008)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x02F8   (0x0008)  
	class UAkAudioEvent*                               TravelSound;                                                // 0x0300   (0x0008)  
	class UBeaconComponent*                            BeaconComponent;                                            // 0x0308   (0x0008)  
	class UObsidianIDComponent*                        ObsidianID;                                                 // 0x0310   (0x0008)  
};

/// Class /Script/Indiana.ShipFastTravelPointComponent
/// Size: 0x0270 (624 bytes) (0x000268 - 0x000270) align 16 MaxSize: 0x0270
class UShipFastTravelPointComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0268   (0x0008)  MISSED
};

/// Class /Script/Indiana.ShipFastTravelPoint
/// Size: 0x02F0 (752 bytes) (0x0002E8 - 0x0002F0) align 8 MaxSize: 0x02F0
class AShipFastTravelPoint : public ABasicMapFloorTrackedActor
{ 
public:
	class UShipDestinationData*                        ShipDestinationData;                                        // 0x02E8   (0x0008)  
};

/// Class /Script/Indiana.ShipLocation
/// Size: 0x0330 (816 bytes) (0x0002B8 - 0x000330) align 8 MaxSize: 0x0330
class AShipLocation : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x38];                                      // 0x02B8   (0x0038)  MISSED
	class UInteractableComponent*                      InteractableComponent;                                      // 0x02F0   (0x0008)  
	class UBeaconComponent*                            BeaconComponent;                                            // 0x02F8   (0x0008)  
	class UIndianaNavModifierComponent*                NavModifierComponent;                                       // 0x0300   (0x0008)  
	class UObsidianIDComponent*                        ObsidianID;                                                 // 0x0308   (0x0008)  
	class UTravelTriggerComponent*                     ShipDestinationTravelTrigger;                               // 0x0310   (0x0008)  
	class UAkAudioEvent*                               TravelSound;                                                // 0x0318   (0x0008)  
	class UShipDestinationData*                        ShipLocationData;                                           // 0x0320   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0328   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.ShipLocation.ShipLocationDeactivated
	// void ShipLocationDeactivated();                                                                                          // [0x1804b40] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ShipLocation.ShipLocationActivated
	// void ShipLocationActivated();                                                                                            // [0x18c04b0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ShipLocation.OnShipLocationChanged
	// void OnShipLocationChanged(class UShipDestinationData* NewLocation);                                                     // [0x18bfed0] Final|Native|Protected 
};

/// Class /Script/Indiana.ShipTerminal
/// Size: 0x0330 (816 bytes) (0x0002B8 - 0x000330) align 8 MaxSize: 0x0330
class AShipTerminal : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x38];                                      // 0x02B8   (0x0038)  MISSED
	class UClass*                                      SystemMapClass;                                             // 0x02F0   (0x0008)  
	class UMusicTrackData*                             SystemMapAmbientMusic;                                      // 0x02F8   (0x0008)  
	SDK_UNDEFINED(16,651) /* FMulticastInlineDelegate */ __um(OnSystemMapClosed);                                  // 0x0300   (0x0010)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x0310   (0x0008)  
	class UBeaconComponent*                            BeaconComponent;                                            // 0x0318   (0x0008)  
	class UObsidianIDComponent*                        ObsidianID;                                                 // 0x0320   (0x0008)  
	class USystemMapData*                              SystemMapData;                                              // 0x0328   (0x0008)  
};

/// Struct /Script/Indiana.MapShipDestinations
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FMapShipDestinations
{ 
	TMap<FGuid, class UShipDestinationData*>           Destinations;                                               // 0x0000   (0x0050)  
};

/// Class /Script/Indiana.ShipTravelData
/// Size: 0x0090 (144 bytes) (0x000038 - 0x000090) align 8 MaxSize: 0x0090
class UShipTravelData : public UDataAsset
{ 
public:
	class UMapInformation*                             ShipMapInformation;                                         // 0x0038   (0x0008)  
	SDK_UNDEFINED(80,652) /* TMap<TWeakObjectPtr<UWorld*>, FMapShipDestinations> */ __um(ShipDestinations);        // 0x0040   (0x0050)  
};

/// Class /Script/Indiana.ShipTravelDataCollection
/// Size: 0x00A8 (168 bytes) (0x000038 - 0x0000A8) align 8 MaxSize: 0x00A8
class UShipTravelDataCollection : public UDataAsset
{ 
public:
	TArray<class UShipTravelData*>                     Sources;                                                    // 0x0038   (0x0010)  
	SDK_UNDEFINED(80,653) /* TMap<TWeakObjectPtr<UWorld*>, FMapShipDestinations> */ __um(ShipDestinations);        // 0x0048   (0x0050)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0098   (0x0010)  MISSED
};

/// Class /Script/Indiana.SkeletalMeshModVisual
/// Size: 0x00F0 (240 bytes) (0x0000C0 - 0x0000F0) align 8 MaxSize: 0x00F0
class USkeletalMeshModVisual : public UMeshModVisual
{ 
public:
	TWeakObjectPtr<class USkeletalMesh*>               Mesh;                                                       // 0x00C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x00C8   (0x0020)  MISSED
	FName                                              AttachSocket;                                               // 0x00E8   (0x0008)  
};

/// Class /Script/Indiana.SkillAdjustment
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class USkillAdjustment : public UIndianaUserWidget
{ 
public:
	class UImage*                                      AdjustmentTypeImage;                                        // 0x0300   (0x0008)  
	class UTextBlockBase*                              AdjustmentValue;                                            // 0x0308   (0x0008)  
	class UTextBlockBase*                              AdjustmentDescription;                                      // 0x0310   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0318   (0x0028)  MISSED
};

/// Class /Script/Indiana.SkillButtonEntryWidget
/// Size: 0x0490 (1168 bytes) (0x000470 - 0x000490) align 8 MaxSize: 0x0490
class USkillButtonEntryWidget : public UStatsSkillButtonEntryBase
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0470   (0x0018)  MISSED
	class UImage*                                      SkillUnlockedAnim;                                          // 0x0488   (0x0008)  
};

/// Class /Script/Indiana.SkillGroupDetailWidget
/// Size: 0x02B8 (696 bytes) (0x000278 - 0x0002B8) align 8 MaxSize: 0x02B8
class USkillGroupDetailWidget : public UUserWidget
{ 
public:
	class UImage*                                      TwoSkillsBackground;                                        // 0x0278   (0x0008)  
	class UImage*                                      ThreeSkillsBackground;                                      // 0x0280   (0x0008)  
	class UCategoryButtonEntryWidget*                  SkillGroupCategory;                                         // 0x0288   (0x0008)  
	class UVerticalBox*                                ChildSkills;                                                // 0x0290   (0x0008)  
	class UClass*                                      SkillEntryClass;                                            // 0x0298   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x02A0   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.SkillGroupDetailWidget.OnSkillSelected
	// void OnSkillSelected();                                                                                                  // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.SkillStatusEffect
/// Size: 0x0200 (512 bytes) (0x000188 - 0x000200) align 8 MaxSize: 0x0200
class USkillStatusEffect : public UStatusEffect
{ 
public:
	ESkill                                             SkillToCheck;                                               // 0x0188   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0189   (0x0007)  MISSED
	TMap<int32_t, class UClass*>                       SkillEffects;                                               // 0x0190   (0x0050)  
	bool                                               bAllThatPass;                                               // 0x01E0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1F];                                      // 0x01E1   (0x001F)  MISSED


	/// Functions
	// Function /Script/Indiana.SkillStatusEffect.OnSpawnedEffectCleared
	// void OnSpawnedEffectCleared(class UStatusEffect* SpawnedEffect);                                                         // [0x18bfff0] Final|Native|Protected 
};

/// Class /Script/Indiana.SkillSummaryEntryWidget
/// Size: 0x0298 (664 bytes) (0x000278 - 0x000298) align 8 MaxSize: 0x0298
class USkillSummaryEntryWidget : public UUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0278   (0x0008)  
	class UTextBlockBase*                              SkillNameText;                                              // 0x0280   (0x0008)  
	class UTextBlockBase*                              SkillLevelText;                                             // 0x0288   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0290   (0x0008)  MISSED
};

/// Class /Script/Indiana.SkillUnlockEntryWidget
/// Size: 0x0350 (848 bytes) (0x000300 - 0x000350) align 8 MaxSize: 0x0350
class USkillUnlockEntryWidget : public UIndianaUserWidget
{ 
public:
	class USkillUnlockPanelMeter*                      Meter;                                                      // 0x0300   (0x0008)  
	class UImage*                                      SkillUnlockedImage;                                         // 0x0308   (0x0008)  
	class UImage*                                      SkillFadedLine;                                             // 0x0310   (0x0008)  
	class UImage*                                      SkillUnlockAnim;                                            // 0x0318   (0x0008)  
	class UImage*                                      HalfMeterLine;                                              // 0x0320   (0x0008)  
	class UTextBlockBase*                              SkillUnlockTextBlock;                                       // 0x0328   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0330   (0x0020)  MISSED
};

/// Class /Script/Indiana.SkillUnlockPanelMeter
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class USkillUnlockPanelMeter : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0300   (0x0008)  MISSED
	class UImage*                                      MeterBase;                                                  // 0x0308   (0x0008)  
	class UImage*                                      MeterOld;                                                   // 0x0310   (0x0008)  
	class UImage*                                      MeterNew;                                                   // 0x0318   (0x0008)  
};

/// Class /Script/Indiana.SkillUnlockPanelWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class USkillUnlockPanelWidget : public UIndianaUserWidget
{ 
public:
	class USkillUnlockPanelMeter*                      InitialMeter;                                               // 0x0300   (0x0008)  
	class UOverlay*                                    SkillsOverlay;                                              // 0x0308   (0x0008)  
	class UVerticalBox*                                SkillUnlocksVerticalBox;                                    // 0x0310   (0x0008)  
};

/// Class /Script/Indiana.SkinTone
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USkinTone : public UPrimaryDataAsset
{ 
public:
	float                                              SkinTemp;                                                   // 0x0038   (0x0004)  
	float                                              SkinTone;                                                   // 0x003C   (0x0004)  
};

/// Struct /Script/Indiana.IndianaSliderStyle
/// Size: 0x0390 (912 bytes) (0x000008 - 0x000390) align 8 MaxSize: 0x0390
struct FIndianaSliderStyle : FSlateWidgetStyle
{ 
	FSlateBrushContainer                               NormalBarBrush;                                             // 0x0008   (0x0090)  
	FSlateBrushContainer                               FocusedBarBrush;                                            // 0x0098   (0x0090)  
	FSlateBrushContainer                               DisabledBarBrush;                                           // 0x0128   (0x0090)  
	FSlateBrushContainer                               NormalThumbBrush;                                           // 0x01B8   (0x0090)  
	FSlateBrushContainer                               FocusedThumbBrush;                                          // 0x0248   (0x0090)  
	FSlateBrushContainer                               DisabledThumbBrush;                                         // 0x02D8   (0x0090)  
	float                                              BarThickness;                                               // 0x0368   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x036C   (0x0004)  MISSED
	class UAkAudioEvent*                               HoveredSoundOverride;                                       // 0x0370   (0x0008)  
	class UAkAudioEvent*                               FocusedSoundOverride;                                       // 0x0378   (0x0008)  
	class UAkAudioEvent*                               StepSoundOverride;                                          // 0x0380   (0x0008)  
	float                                              SliderIndentation;                                          // 0x0388   (0x0004)  
	bool                                               bUseSliderIndentation;                                      // 0x038C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x038D   (0x0003)  MISSED
};

/// Class /Script/Indiana.SliderBase
/// Size: 0x0578 (1400 bytes) (0x000120 - 0x000578) align 8 MaxSize: 0x0578
class USliderBase : public UWidget
{ 
public:
	float                                              Value;                                                      // 0x0120   (0x0004)  
	SDK_UNDEFINED(16,654) /* FDelegateProperty */      __um(ValueDelegate);                                        // 0x0124   (0x0010)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x0134   (0x0001)  
	bool                                               IndentHandle;                                               // 0x0135   (0x0001)  
	bool                                               Locked;                                                     // 0x0136   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0137   (0x0001)  MISSED
	float                                              StepSize;                                                   // 0x0138   (0x0004)  
	bool                                               IsFocusable;                                                // 0x013C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x013D   (0x0003)  MISSED
	SDK_UNDEFINED(16,655) /* FMulticastInlineDelegate */ __um(OnValueChanged);                                     // 0x0140   (0x0010)  
	SDK_UNDEFINED(16,656) /* FMulticastInlineDelegate */ __um(OnHovered);                                          // 0x0150   (0x0010)  
	SDK_UNDEFINED(16,657) /* FMulticastInlineDelegate */ __um(OnUnhovered);                                        // 0x0160   (0x0010)  
	SDK_UNDEFINED(16,658) /* FMulticastInlineDelegate */ __um(OnFocusReceived);                                    // 0x0170   (0x0010)  
	SDK_UNDEFINED(16,659) /* FMulticastInlineDelegate */ __um(OnFocusLost);                                        // 0x0180   (0x0010)  
	FIndianaSliderStyle                                WidgetStyle;                                                // 0x0190   (0x0390)  
	unsigned char                                      UnknownData02_7[0x58];                                      // 0x0520   (0x0058)  MISSED


	/// Functions
	// Function /Script/Indiana.SliderBase.SetValue
	// void SetValue(float InValue);                                                                                            // [0x18c0430] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.SetStepSize
	// void SetStepSize(float InValue);                                                                                         // [0x18c03b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.SetLocked
	// void SetLocked(bool InValue);                                                                                            // [0x18c0190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.SetIndentHandle
	// void SetIndentHandle(bool InValue);                                                                                      // [0x18c0100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.SetAndCommitValue
	// void SetAndCommitValue(float InValue);                                                                                   // [0x18c0080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.ModifySliderValue
	// void ModifySliderValue(float InValue);                                                                                   // [0x18bf970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.GetValue
	// float GetValue();                                                                                                        // [0x18bf940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaSliderWidgetStyle
/// Size: 0x03C8 (968 bytes) (0x000038 - 0x0003C8) align 8 MaxSize: 0x03C8
class UIndianaSliderWidgetStyle : public USlateWidgetStyleContainerBase
{ 
public:
	FIndianaSliderStyle                                SliderStyle;                                                // 0x0038   (0x0390)  
};

/// Class /Script/Indiana.SlideshowImageSet
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align 8 MaxSize: 0x0088
class USlideshowImageSet : public UDataAsset
{ 
public:
	TMap<FString, class UTexture2D*>                   TextureMapping;                                             // 0x0038   (0x0050)  
};

/// Class /Script/Indiana.SlideshowWidget
/// Size: 0x0428 (1064 bytes) (0x000360 - 0x000428) align 8 MaxSize: 0x0428
class USlideshowWidget : public UConversationBaseWidget
{ 
public:
	float                                              ActiveInputLabelTime;                                       // 0x0360   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0364   (0x0004)  MISSED
	class UTextBlockBase*                              BodyText;                                                   // 0x0368   (0x0008)  
	class UOverlay*                                    MainOverlay;                                                // 0x0370   (0x0008)  
	class UBorder*                                     BodyBorder;                                                 // 0x0378   (0x0008)  
	class UImage*                                      PrimaryImage;                                               // 0x0380   (0x0008)  
	class UInputLabelWidget*                           InputLabelBack;                                             // 0x0388   (0x0008)  
	class UInputLabelWidget*                           InputLabelForward;                                          // 0x0390   (0x0008)  
	class UTextBlockBase*                              MissingImageTextBlock;                                      // 0x0398   (0x0008)  
	TMap<FString, class UTexture2D*>                   Textures;                                                   // 0x03A0   (0x0050)  
	unsigned char                                      UnknownData01_7[0x38];                                      // 0x03F0   (0x0038)  MISSED


	/// Functions
	// Function /Script/Indiana.SlideshowWidget.SetSlideshowImagesAsset
	// void SetSlideshowImagesAsset(class USlideshowImageSet* ImageSet);                                                        // [0x18c0320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SlideshowWidget.SetSlideshowImageKey
	// void SetSlideshowImageKey(FString ImageKey);                                                                             // [0x18c0220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SlideshowWidget.OnSlideshowEnd
	// void OnSlideshowEnd(class UConversationInstance* Instance);                                                              // [0x18bff60] Final|Native|Protected 
	// Function /Script/Indiana.SlideshowWidget.OnCinematicSubtitleSettingChanged
	// void OnCinematicSubtitleSettingChanged(bool bVisibleIn);                                                                 // [0x18bfe40] Final|Native|Protected 
};

/// Class /Script/Indiana.SpawnActorBehaviorStateInfo
/// Size: 0x0190 (400 bytes) (0x000178 - 0x000190) align 8 MaxSize: 0x0190
class USpawnActorBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0178   (0x0018)  MISSED
};

/// Class /Script/Indiana.SpawnActorRequestData
/// Size: 0x0098 (152 bytes) (0x000080 - 0x000098) align 8 MaxSize: 0x0098
class USpawnActorRequestData : public UDecisionTreeEQSRequestData
{ 
public:
	FGameplayTag                                       AnimationTag;                                               // 0x0080   (0x0008)  
	class UClass*                                      ActorToSpawn;                                               // 0x0088   (0x0008)  
	int32_t                                            SpawnAmount;                                                // 0x0090   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/Indiana.SpawnActorEventEffect
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align 8 MaxSize: 0x0040
class USpawnActorEventEffect : public UEventEffect
{ 
public:
	class UClass*                                      SpawnActorClass;                                            // 0x0030   (0x0008)  
	ESpawnActorEventLocationSetting                    LocationSetting;                                            // 0x0038   (0x0001)  
	ESpawnActorEventRotationSetting                    RotationSetting;                                            // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x003A   (0x0006)  MISSED
};

/// Class /Script/Indiana.SpawnActorStatusEffect
/// Size: 0x01C8 (456 bytes) (0x000188 - 0x0001C8) align 8 MaxSize: 0x01C8
class USpawnActorStatusEffect : public UStatusEffect
{ 
public:
	class UClass*                                      CharacterClass;                                             // 0x0188   (0x0008)  
	int32_t                                            NumCharactersToSpawn;                                       // 0x0190   (0x0004)  
	FVector                                            CharacterScale;                                             // 0x0194   (0x000C)  
	FVector                                            SpawnLocationOffset;                                        // 0x01A0   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x01AC   (0x0004)  MISSED
	class UEQSRequest_IndianaBase*                     EQSRequest;                                                 // 0x01B0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x01B8   (0x0010)  MISSED
};

/// Class /Script/Indiana.SpawnHazardStatusEffect
/// Size: 0x01D8 (472 bytes) (0x000188 - 0x0001D8) align 8 MaxSize: 0x01D8
class USpawnHazardStatusEffect : public UStatusEffect
{ 
public:
	class UClass*                                      HazardClass;                                                // 0x0188   (0x0008)  
	float                                              DistanceBetweenHazards;                                     // 0x0190   (0x0004)  
	int32_t                                            MaxHazards;                                                 // 0x0194   (0x0004)  
	FVector                                            HazardScale;                                                // 0x0198   (0x000C)  
	unsigned char                                      UnknownData00_7[0x34];                                      // 0x01A4   (0x0034)  MISSED
};

/// Class /Script/Indiana.SpawnSource
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USpawnSource : public UInterface
{ 
public:
};

/// Class /Script/Indiana.TrackedSpawn
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UTrackedSpawn : public UInterface
{ 
public:
};

/// Class /Script/Indiana.SpawnNodeComponent
/// Size: 0x0270 (624 bytes) (0x000268 - 0x000270) align 16 MaxSize: 0x0270
class USpawnNodeComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0268   (0x0008)  MISSED
};

/// Class /Script/Indiana.SpeakerGameDataReference
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class USpeakerGameDataReference : public UGameDataReference
{ 
public:


	/// Functions
	// Function /Script/Indiana.SpeakerGameDataReference.GetWwiseChatterVoiceOverride
	// FString GetWwiseChatterVoiceOverride();                                                                                  // [0x18c4b30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetWwiseChatterEventOverride
	// FString GetWwiseChatterEventOverride();                                                                                  // [0x18c4ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetInGameNameWithGender
	// FString GetInGameNameWithGender(EGender CharacterGender);                                                                // [0x18c4a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetInGameNameID
	// int32_t GetInGameNameID();                                                                                               // [0x18c49e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetInGameName
	// FString GetInGameName();                                                                                                 // [0x18c49a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetGender
	// EGender GetGender();                                                                                                     // [0x18c4970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetChatterPrefix
	// FString GetChatterPrefix();                                                                                              // [0x18c48f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetChatterFile
	// FGuid GetChatterFile();                                                                                                  // [0x18c48b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetCharacterGrouping
	// ECharacterGrouping GetCharacterGrouping();                                                                               // [0x18c4880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.AreaOfEffect
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 16 MaxSize: 0x0060
struct FAreaOfEffect
{ 
	FTransformedShape                                  CollisionShapeInfo;                                         // 0x0000   (0x0040)  
	class URpgStat*                                    CollisionSizeStat;                                          // 0x0040   (0x0008)  
	ESpellEffectTarget                                 SourceType;                                                 // 0x0048   (0x0001)  
	bool                                               bIgnoreSources;                                             // 0x0049   (0x0001)  
	bool                                               bOnlyTargetPlayerHostiles;                                  // 0x004A   (0x0001)  
	bool                                               bPenetratesWalls;                                           // 0x004B   (0x0001)  
	FName                                              CollisionSocket;                                            // 0x004C   (0x0008)  
	EMeshTarget                                        MeshTarget;                                                 // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_7[0xB];                                       // 0x0055   (0x000B)  MISSED
};

/// Struct /Script/Indiana.TargetCone
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FTargetCone
{ 
	class URpgStat*                                    CollisionSizeStat;                                          // 0x0000   (0x0008)  
	float                                              ConeHalfAngle;                                              // 0x0008   (0x0004)  
	EConeAxis                                          ConeAxis;                                                   // 0x000C   (0x0001)  
	bool                                               bInvertAxis;                                                // 0x000D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x000E   (0x0002)  MISSED
	float                                              Radius;                                                     // 0x0010   (0x0004)  
	FVector                                            SocketOffset;                                               // 0x0014   (0x000C)  
	ESpellEffectTarget                                 SourceType;                                                 // 0x0020   (0x0001)  
	bool                                               bPenetratesWalls;                                           // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0022   (0x0002)  MISSED
	FName                                              CollisionSocket;                                            // 0x0024   (0x0008)  
	EMeshTarget                                        MeshTarget;                                                 // 0x002C   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x002D   (0x0003)  MISSED
};

/// Struct /Script/Indiana.TargetEffect
/// Size: 0x00D0 (208 bytes) (0x000000 - 0x0000D0) align 16 MaxSize: 0x00D0
struct FTargetEffect
{ 
	ESpellEffectTarget                                 SpellEffectTarget;                                          // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<class UStatusEffect*>                       StatusEffects;                                              // 0x0008   (0x0010)  
	TArray<class USpellConditional*>                   EffectTargetConditionals;                                   // 0x0018   (0x0010)  
	ESpellEffectDirectionType                          EffectDirectionType;                                        // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              RotationAngle;                                              // 0x002C   (0x0004)  
	bool                                               bRandomlyNegateRotationAngle;                               // 0x0030   (0x0001)  
	bool                                               bInverseDirection;                                          // 0x0031   (0x0001)  
	bool                                               bForceTwoDimensionalDirection;                              // 0x0032   (0x0001)  
	unsigned char                                      UnknownData02_6[0xD];                                       // 0x0033   (0x000D)  MISSED
	FAreaOfEffect                                      AreaOfEffect;                                               // 0x0040   (0x0060)  
	FTargetCone                                        TargetCone;                                                 // 0x00A0   (0x0030)  
};

/// Struct /Script/Indiana.SpellEffectByEvent
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FSpellEffectByEvent
{ 
	class UEventListener*                              ApplyEvent;                                                 // 0x0000   (0x0008)  
	class UEventListener*                              RemoveEvent;                                                // 0x0008   (0x0008)  
	TArray<FTargetEffect>                              TargetEffects;                                              // 0x0010   (0x0010)  
	bool                                               bRemoveSingleStack;                                         // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/Indiana.Spell
/// Size: 0x0190 (400 bytes) (0x000030 - 0x000190) align 16 MaxSize: 0x0190
class USpell : public UObject
{ 
public:
	FLocString                                         DisplayName;                                                // 0x0030   (0x0008)  
	FLocString                                         DisplayDescription;                                         // 0x0038   (0x0008)  
	bool                                               bCheckMiscID;                                               // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              Cooldown;                                                   // 0x0044   (0x0004)  
	class URpgStat*                                    CooldownRpgStat;                                            // 0x0048   (0x0008)  
	float                                              EventCooldown;                                              // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	class URpgStat*                                    EventCooldownRpgStat;                                       // 0x0058   (0x0008)  
	TArray<class USpellConditional*>                   TargetConditionals;                                         // 0x0060   (0x0010)  
	FTargetEffect                                      OnCastEffects;                                              // 0x0070   (0x00D0)  
	TArray<FTargetEffect>                              OnCastEffectsArray;                                         // 0x0140   (0x0010)  
	FSpellEffectByEvent                                OnEventEffects;                                             // 0x0150   (0x0028)  
	class URpgStat*                                    ApplyChanceRpgStat;                                         // 0x0178   (0x0008)  
	class URpgStat*                                    ReceiveChanceRpgStat;                                       // 0x0180   (0x0008)  
	bool                                               bOrientTowardsFirstExplicitTarget;                          // 0x0188   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0189   (0x0007)  MISSED
};

/// Class /Script/Indiana.SpellConditional
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class USpellConditional : public UObject
{ 
public:
	bool                                               bCheckCaster;                                               // 0x0030   (0x0001)  
	bool                                               bNot;                                                       // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Class /Script/Indiana.SpellConditional_CreatureType
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align 8 MaxSize: 0x0060
class USpellConditional_CreatureType : public USpellConditional
{ 
public:
	FGameplayTagContainer                              CreatureTypes;                                              // 0x0038   (0x0020)  
	bool                                               bNegateCheck;                                               // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Indiana.SpellConditional_Health
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_Health : public USpellConditional
{ 
public:
	float                                              Value;                                                      // 0x0038   (0x0004)  
	bool                                               bUsePercentage;                                             // 0x003C   (0x0001)  
	ComparisonOperator                                 Operator;                                                   // 0x003D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x003E   (0x0002)  MISSED
};

/// Class /Script/Indiana.SpellConditional_Encumbrance
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_Encumbrance : public USpellConditional
{ 
public:
	float                                              Value;                                                      // 0x0038   (0x0004)  
	bool                                               bUsePercentage;                                             // 0x003C   (0x0001)  
	ComparisonOperator                                 Operator;                                                   // 0x003D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x003E   (0x0002)  MISSED
};

/// Class /Script/Indiana.SpellConditional_MeleeWeaponCategory
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_MeleeWeaponCategory : public USpellConditional
{ 
public:
	FGameplayTag                                       WeaponCategory;                                             // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.SpellConditional_NumCompanions
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_NumCompanions : public USpellConditional
{ 
public:
	int32_t                                            NumCompanions;                                              // 0x0038   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Class /Script/Indiana.SpellConditional_RandomChance
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class USpellConditional_RandomChance : public USpellConditional
{ 
public:
	float                                              Chance;                                                     // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	class URpgStat*                                    ChanceStat;                                                 // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.SpellConditional_MinSkill
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class USpellConditional_MinSkill : public USpellConditional
{ 
public:
	ESkill                                             Skill;                                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            MinSkill;                                                   // 0x003C   (0x0004)  
	class URpgStat*                                    MinSkillStat;                                               // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.SpellConditional_HasStatusEffect
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class USpellConditional_HasStatusEffect : public USpellConditional
{ 
public:
	class UClass*                                      StatusEffect;                                               // 0x0038   (0x0008)  
	int32_t                                            NumStacks;                                                  // 0x0040   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x0044   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Class /Script/Indiana.SpellConditional_HasSpell
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_HasSpell : public USpellConditional
{ 
public:
	class UClass*                                      CastSpell;                                                  // 0x0038   (0x0008)  
};

/// Class /Script/Indiana.SpellConditional_IsPlayer
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class USpellConditional_IsPlayer : public USpellConditional
{ 
public:
};

/// Class /Script/Indiana.SpellConditional_IsFacingCaster
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_IsFacingCaster : public USpellConditional
{ 
public:
	float                                              ValidAngle;                                                 // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Indiana.SpellConditional_IsDifficulty
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class USpellConditional_IsDifficulty : public USpellConditional
{ 
public:
	TArray<EGameDifficulty>                            AllowedDifficulties;                                        // 0x0038   (0x0010)  
};

/// Class /Script/Indiana.SpellConditional_HostileStatusEffect
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align 8 MaxSize: 0x0038
class USpellConditional_HostileStatusEffect : public USpellConditional
{ 
public:
};

/// Class /Script/Indiana.SpellConditional_TTDMeter
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_TTDMeter : public USpellConditional
{ 
public:
	float                                              Value;                                                      // 0x0038   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Class /Script/Indiana.SpellConditional_IsInCombatWithPlayer
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_IsInCombatWithPlayer : public USpellConditional
{ 
public:
	bool                                               bNegateCheck;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Indiana.SpellConditional_IsPacifist
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_IsPacifist : public USpellConditional
{ 
public:
	bool                                               bNegateCheck;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Indiana.SpellConditional_IsHostileToPlayer
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_IsHostileToPlayer : public USpellConditional
{ 
public:
	bool                                               bNegateCheck;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Indiana.SpellConditional_IsHostileToCaster
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_IsHostileToCaster : public USpellConditional
{ 
public:
	bool                                               bNegateCheck;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Indiana.SpellConditional_IsOnPlayerShip
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_IsOnPlayerShip : public USpellConditional
{ 
public:
	bool                                               bNegateCheck;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Indiana.SpellConditional_IsCompanion
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_IsCompanion : public USpellConditional
{ 
public:
	bool                                               bNegateCheck;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Indiana.SpellConditional_RosterSize
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_RosterSize : public USpellConditional
{ 
public:
	int32_t                                            Count;                                                      // 0x0038   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Class /Script/Indiana.SpellConditional_FlawCount
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class USpellConditional_FlawCount : public USpellConditional
{ 
public:
	int32_t                                            Count;                                                      // 0x0038   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x003C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Class /Script/Indiana.SpellConditional_IsAmmoTypeEquipped
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align 8 MaxSize: 0x0048
class USpellConditional_IsAmmoTypeEquipped : public USpellConditional
{ 
public:
	bool                                               bNegateCheck;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	class UClass*                                      AmmoClass;                                                  // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.SpellConditional_CheckGlobalVariable
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class USpellConditional_CheckGlobalVariable : public USpellConditional
{ 
public:
	FString                                            GlobalVariable;                                             // 0x0038   (0x0010)  
	int32_t                                            Value;                                                      // 0x0048   (0x0004)  
	ComparisonOperator                                 Operator;                                                   // 0x004C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Struct /Script/Indiana.SpellInstance
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 MaxSize: 0x0058
struct FSpellInstance
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UEventListener*                              ApplyEvent;                                                 // 0x0008   (0x0008)  
	class UEventListener*                              RemoveEvent;                                                // 0x0010   (0x0008)  
	unsigned char                                      UnknownData01_7[0x40];                                      // 0x0018   (0x0040)  MISSED
};

/// Class /Script/Indiana.SpellManagerComponent
/// Size: 0x0240 (576 bytes) (0x0000E0 - 0x000240) align 8 MaxSize: 0x0240
class USpellManagerComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x00E0   (0x0018)  MISSED
	TMap<class UClass*, FSpellInstance>                PersistentSpells;                                           // 0x00F8   (0x0050)  
	unsigned char                                      UnknownData01_6[0x58];                                      // 0x0148   (0x0058)  MISSED
	FSpellSet                                          PassiveSpellSet;                                            // 0x01A0   (0x0050)  
	unsigned char                                      UnknownData02_7[0x50];                                      // 0x01F0   (0x0050)  MISSED
};

/// Class /Script/Indiana.SpellRemoveStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class USpellRemoveStatusEffect : public UStatusEffect
{ 
public:
	class UClass*                                      Spell;                                                      // 0x0188   (0x0008)  
};

/// Class /Script/Indiana.SpellTargetBehaviorStateInfo
/// Size: 0x0178 (376 bytes) (0x000178 - 0x000178) align 8 MaxSize: 0x0178
class USpellTargetBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.SpellTargetRequestData
/// Size: 0x0098 (152 bytes) (0x000080 - 0x000098) align 8 MaxSize: 0x0098
class USpellTargetRequestData : public UDecisionTreeEQSRequestData
{ 
public:
	float                                              MinMoveDistance;                                            // 0x0080   (0x0004)  
	float                                              MaxMoveDistance;                                            // 0x0084   (0x0004)  
	float                                              MaxCastDistance;                                            // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	class UClass*                                      Spell;                                                      // 0x0090   (0x0008)  
};

/// Class /Script/Indiana.SpreadManagerComponent
/// Size: 0x0148 (328 bytes) (0x0000E0 - 0x000148) align 8 MaxSize: 0x0148
class USpreadManagerComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x00E0   (0x0010)  MISSED
	float                                              CrouchingModifier;                                          // 0x00F0   (0x0004)  
	float                                              InAirModifier;                                              // 0x00F4   (0x0004)  
	float                                              FineAimModifier;                                            // 0x00F8   (0x0004)  
	float                                              NPCModifier;                                                // 0x00FC   (0x0004)  
	float                                              SpreadSmoothReturnTime;                                     // 0x0100   (0x0004)  
	unsigned char                                      UnknownData01_7[0x44];                                      // 0x0104   (0x0044)  MISSED


	/// Functions
	// Function /Script/Indiana.SpreadManagerComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bInCombat, bool bRestoring);                                                               // [0x18c4c30] Final|Native|Private 
	// Function /Script/Indiana.SpreadManagerComponent.OnAttack
	// void OnAttack(float DurationScalar);                                                                                     // [0x18c4bb0] Final|Native|Private 
};

/// Class /Script/Indiana.StackSplittingWidget
/// Size: 0x04C8 (1224 bytes) (0x000308 - 0x0004C8) align 8 MaxSize: 0x04C8
class UStackSplittingWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x58];                                      // 0x0308   (0x0058)  MISSED
	class UTextBlockBase*                              TextBlock;                                                  // 0x0360   (0x0008)  
	class UTextBlockBase*                              SubTextBlock;                                               // 0x0368   (0x0008)  
	class UTextBlockBase*                              ValueTextBlock;                                             // 0x0370   (0x0008)  
	class UTextBlockBase*                              FullStackValue;                                             // 0x0378   (0x0008)  
	class UButtonBase*                                 ConfirmButton;                                              // 0x0380   (0x0008)  
	class UButtonBase*                                 CancelButton;                                               // 0x0388   (0x0008)  
	class UInputLabelWidget*                           ConfirmLabel;                                               // 0x0390   (0x0008)  
	class UInputLabelWidget*                           BackLabel;                                                  // 0x0398   (0x0008)  
	class UButtonBase*                                 MinButton;                                                  // 0x03A0   (0x0008)  
	class UButtonBase*                                 MaxButton;                                                  // 0x03A8   (0x0008)  
	class UInputLabelWidget*                           InputLabelMin;                                              // 0x03B0   (0x0008)  
	class UInputLabelWidget*                           InputLabelMax;                                              // 0x03B8   (0x0008)  
	class USizeBox*                                    BackingBotSizeBox;                                          // 0x03C0   (0x0008)  
	class UVerticalBox*                                ContentVerticalBox;                                         // 0x03C8   (0x0008)  
	class UHorizontalBox*                              KeyboardInputBox;                                           // 0x03D0   (0x0008)  
	class UHorizontalBox*                              GamepadInputBox;                                            // 0x03D8   (0x0008)  
	class UWaitTimeSliderWidget*                       ValueSlider;                                                // 0x03E0   (0x0008)  
	class USizeBox*                                    ContentSizeBox;                                             // 0x03E8   (0x0008)  
	class UUserWidget*                                 BackgroundWidget;                                           // 0x03F0   (0x0008)  
	TMap<EStackSplitStyle, FVector2D>                  StyleMinimums;                                              // 0x03F8   (0x0050)  
	TMap<EStackSplitStyle, FVector2D>                  StyleMaximums;                                              // 0x0448   (0x0050)  
	float                                              ContentVerticalPadding;                                     // 0x0498   (0x0004)  
	int32_t                                            BackingMaterialSize;                                        // 0x049C   (0x0004)  
	int32_t                                            BackingTopSize;                                             // 0x04A0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x04A4   (0x0004)  MISSED
	class UItem*                                       ItemToSplit;                                                // 0x04A8   (0x0008)  
	unsigned char                                      UnknownData02_7[0x18];                                      // 0x04B0   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.StackSplittingWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StackSplittingWidget.OnStackSplitMin
	// void OnStackSplitMin();                                                                                                  // [0x18c4e70] Final|Native|Protected 
	// Function /Script/Indiana.StackSplittingWidget.OnStackSplitMax
	// void OnStackSplitMax();                                                                                                  // [0x18c4e50] Final|Native|Protected 
	// Function /Script/Indiana.StackSplittingWidget.OnSliderValueChanged
	// void OnSliderValueChanged(FSliderEvent& Event);                                                                          // [0x18c4d40] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.StackSplittingWidget.OnInputConfirm
	// void OnInputConfirm();                                                                                                   // [0x18c4d20] Final|Native|Protected 
	// Function /Script/Indiana.StackSplittingWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18c4d00] Final|Native|Protected 
};

/// Class /Script/Indiana.StageItem
/// Size: 0x03A8 (936 bytes) (0x000390 - 0x0003A8) align 8 MaxSize: 0x03A8
class AStageItem : public AItemVisualizer
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0390   (0x0018)  MISSED
};

/// Class /Script/Indiana.StaminaComponent
/// Size: 0x0108 (264 bytes) (0x0000E0 - 0x000108) align 8 MaxSize: 0x0108
class UStaminaComponent : public UActorComponent
{ 
public:
	float                                              MaxValue;                                                   // 0x00E0   (0x0004)  
	float                                              RegenDelay;                                                 // 0x00E4   (0x0004)  
	float                                              RegenRate;                                                  // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	class UAkAudioEvent*                               OutOfStaminaEvent;                                          // 0x00F0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x00F8   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.StaminaComponent.StaminaReplenish
	// void StaminaReplenish(float Amount);                                                                                     // [0x18c8930] Final|Exec|Native|Public 
	// Function /Script/Indiana.StaminaComponent.StaminaConsume
	// void StaminaConsume(float Amount);                                                                                       // [0x18c88b0] Final|Exec|Native|Public 
	// Function /Script/Indiana.StaminaComponent.OnCauseDamage
	// void OnCauseDamage(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x18c83a0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.StaminaComponent.GetValue
	// float GetValue();                                                                                                        // [0x18c8340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.StaminaComponent.GetNormalizedValue
	// float GetNormalizedValue();                                                                                              // [0x18c82c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.StaminaComponent.GetMaxValue
	// float GetMaxValue();                                                                                                     // [0x18c8290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.StandardAmmoPool
/// Size: 0x00B8 (184 bytes) (0x000080 - 0x0000B8) align 8 MaxSize: 0x00B8
class UStandardAmmoPool : public UAmmoPoolBase
{ 
public:
	int32_t                                            PoolSize;                                                   // 0x0080   (0x0004)  
	EAmmoType                                          AmmoType;                                                   // 0x0084   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0085   (0x0003)  MISSED
	FGameplayTag                                       AmmoTypeTag;                                                // 0x0088   (0x0008)  
	class UClass*                                      DefaultAmmoClass;                                           // 0x0090   (0x0008)  
	class UAmmo*                                       CurrentAmmo;                                                // 0x0098   (0x0008)  
	class UClass*                                      PendingAmmoClass;                                           // 0x00A0   (0x0008)  
	class UClass*                                      LoadingAmmoClass;                                           // 0x00A8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x00B0   (0x0008)  MISSED
};

/// Class /Script/Indiana.StasisLogicDataAsset
/// Size: 0x00C8 (200 bytes) (0x000038 - 0x0000C8) align 8 MaxSize: 0x00C8
class UStasisLogicDataAsset : public UStasisLogicBaseDataAsset
{ 
public:
	FString                                            Comment;                                                    // 0x0038   (0x0010)  
	bool                                               bAllowNonStasisEvenIfCompanionRecruited;                    // 0x0048   (0x0001)  
	bool                                               bInvertStasisConditions;                                    // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x004A   (0x0006)  MISSED
	FLogicalGroupedExpression                          StasisConditions;                                           // 0x0050   (0x0078)  
};

/// Class /Script/Indiana.StaticMeshModVisual
/// Size: 0x00F0 (240 bytes) (0x0000C0 - 0x0000F0) align 8 MaxSize: 0x00F0
class UStaticMeshModVisual : public UMeshModVisual
{ 
public:
	TWeakObjectPtr<class UStaticMesh*>                 Mesh;                                                       // 0x00C0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x00C8   (0x0020)  MISSED
	FName                                              AttachSocket;                                               // 0x00E8   (0x0008)  
};

/// Class /Script/Indiana.StatModifierStatusEffect
/// Size: 0x0240 (576 bytes) (0x000188 - 0x000240) align 8 MaxSize: 0x0240
class UStatModifierStatusEffect : public UStatusEffect
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0188   (0x0010)  MISSED
	FStatModifierDescription                           StatModifier;                                               // 0x0198   (0x0018)  
	bool                                               bReapplyOnSkillChange;                                      // 0x01B0   (0x0001)  
	bool                                               bUseSkillScalarCurve;                                       // 0x01B1   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x01B2   (0x0006)  MISSED
	FRuntimeFloatCurve                                 SkillScalarCurve;                                           // 0x01B8   (0x0088)  


	/// Functions
	// Function /Script/Indiana.StatModifierStatusEffect.OnSkillUpdated
	// void OnSkillUpdated(ESkill UpdatedSkill, int32_t NewValue);                                                              // [0x18c8570] Final|Native|Protected 
};

/// Class /Script/Indiana.StatsFlawSummaryWidget
/// Size: 0x0310 (784 bytes) (0x000300 - 0x000310) align 8 MaxSize: 0x0310
class UStatsFlawSummaryWidget : public UIndianaUserWidget
{ 
public:
	class UVerticalBox*                                VerticalBox;                                                // 0x0300   (0x0008)  
	class UClass*                                      EntryClass;                                                 // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.StatsPerksPageWidget
/// Size: 0x03E8 (1000 bytes) (0x000300 - 0x0003E8) align 8 MaxSize: 0x03E8
class UStatsPerksPageWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x48];                                      // 0x0300   (0x0048)  MISSED
	TArray<float>                                      TierHeights;                                                // 0x0348   (0x0010)  
	TArray<class UClass*>                              PerksIgnoringArrowAdjustment;                               // 0x0358   (0x0010)  
	class UCharacterDescriptionPanel*                  DescriptionPanel;                                           // 0x0368   (0x0008)  
	class UTextBlockBase*                              PointsAvailableTextBlock;                                   // 0x0370   (0x0008)  
	class UTextBlockBase*                              PerkTotalTextBlock;                                         // 0x0378   (0x0008)  
	class UTextBlockBase*                              PerkTotalValueTextBlock;                                    // 0x0380   (0x0008)  
	class UPerksListWidget*                            PlayerPerkList;                                             // 0x0388   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0390   (0x0008)  
	class UImage*                                      TierBottomImage;                                            // 0x0398   (0x0008)  
	class USizeBox*                                    DynamicSizeBox;                                             // 0x03A0   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x03A8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x38];                                      // 0x03B0   (0x0038)  MISSED


	/// Functions
	// Function /Script/Indiana.StatsPerksPageWidget.OnRevertAllocationsClicked
	// void OnRevertAllocationsClicked();                                                                                       // [0x18c8550] Final|Native|Protected 
	// Function /Script/Indiana.StatsPerksPageWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18c8440] Final|Native|Protected 
	// Function /Script/Indiana.StatsPerksPageWidget.OnDeallocation
	// void OnDeallocation();                                                                                                   // [0x18b9ba0] Final|Native|Protected 
	// Function /Script/Indiana.StatsPerksPageWidget.OnAllocation
	// void OnAllocation();                                                                                                     // [0x18b9ba0] Final|Native|Protected 
	// Function /Script/Indiana.StatsPerksPageWidget.OnAcceptAllocations
	// void OnAcceptAllocations();                                                                                              // [0x18c8360] Final|Native|Protected 
};

/// Class /Script/Indiana.StatsPerkSummaryWidget
/// Size: 0x0328 (808 bytes) (0x000300 - 0x000328) align 8 MaxSize: 0x0328
class UStatsPerkSummaryWidget : public UIndianaUserWidget
{ 
public:
	class UVerticalBox*                                VerticalBox;                                                // 0x0300   (0x0008)  
	class UClass*                                      EntryClass;                                                 // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0310   (0x0018)  MISSED
};

/// Class /Script/Indiana.StatsSkillsPageWidget
/// Size: 0x04A0 (1184 bytes) (0x000430 - 0x0004A0) align 8 MaxSize: 0x04A0
class UStatsSkillsPageWidget : public UCharacterSkillsBasePage
{ 
public:
	unsigned char                                      UnknownData00_8[0x30];                                      // 0x0430   (0x0030)  MISSED
	class UTextBlockBase*                              SkillsHeaderTextBlock;                                      // 0x0460   (0x0008)  
	class UTextBlockBase*                              SkillPointsTitle;                                           // 0x0468   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0470   (0x0008)  
	class UHorizontalBox*                              SkillPointDisplayHorizontalBox;                             // 0x0478   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0480   (0x0008)  
	float                                              GamepadZoomMultiplier;                                      // 0x0488   (0x0004)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x048C   (0x0014)  MISSED


	/// Functions
	// Function /Script/Indiana.StatsSkillsPageWidget.OnSkillUpdated
	// void OnSkillUpdated(ESkill Skill, int32_t Value);                                                                        // [0x18c8640] Final|Native|Protected 
	// Function /Script/Indiana.StatsSkillsPageWidget.OnResetAllAllocations
	// void OnResetAllAllocations();                                                                                            // [0x18c8530] Final|Native|Public  
	// Function /Script/Indiana.StatsSkillsPageWidget.OnPlayerLevelUp
	// void OnPlayerLevelUp(int32_t NewLevel);                                                                                  // [0x18c84a0] Final|Native|Protected 
	// Function /Script/Indiana.StatsSkillsPageWidget.OnLedgerToggle
	// void OnLedgerToggle();                                                                                                   // [0x18c8480] Final|Native|Protected 
	// Function /Script/Indiana.StatsSkillsPageWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18c8460] Final|Native|Protected 
	// Function /Script/Indiana.StatsSkillsPageWidget.OnAllocation
	// void OnAllocation();                                                                                                     // [0x18b9ba0] Final|Native|Public  
};

/// Class /Script/Indiana.StatsSkillSummaryWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class UStatsSkillSummaryWidget : public UIndianaUserWidget
{ 
public:
	class UVerticalBox*                                SkillVerticalBox;                                           // 0x0300   (0x0008)  
	TArray<ESkill>                                     SkillDisplayOrder;                                          // 0x0308   (0x0010)  
	class UClass*                                      SkillEntryClass;                                            // 0x0318   (0x0008)  
};

/// Class /Script/Indiana.StatsSummaryPageWidget
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class UStatsSummaryPageWidget : public UIndianaUserWidget
{ 
public:
	float                                              GamepadScrollMultiplier;                                    // 0x0300   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0304   (0x0004)  MISSED
	class UAttributeSummaryWidget*                     AttributeSummary;                                           // 0x0308   (0x0008)  
	class UAptitudeSummaryWidget*                      AptitudeSummary;                                            // 0x0310   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0318   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x0320   (0x0008)  
	class UCharacterDescriptionPanel*                  DescriptionPanel;                                           // 0x0328   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0330   (0x0010)  MISSED
};

/// Class /Script/Indiana.StatusEffectApplier
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align 8 MaxSize: 0x0048
class UStatusEffectApplier : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0030   (0x0008)  MISSED
	class UStatusEffect*                               OwnerFireEffect;                                            // 0x0038   (0x0008)  
	class UStatusEffect*                               OwnerHitTargetEffect;                                       // 0x0040   (0x0008)  
};

/// Class /Script/Indiana.StatusEffectBarEntryWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class UStatusEffectBarEntryWidget : public UIndianaUserWidget
{ 
public:
	class UImage*                                      StatusEffectImage;                                          // 0x0300   (0x0008)  
	class UImage*                                      BulbImage;                                                  // 0x0308   (0x0008)  
	bool                                               bAnimInProgress;                                            // 0x0310   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x0311   (0x000F)  MISSED


	/// Functions
	// Function /Script/Indiana.StatusEffectBarEntryWidget.ResetWidgetState
	// void ResetWidgetState(float DesiredRenderOpacity);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusEffectBarEntryWidget.OnAnimComplete
	// void OnAnimComplete();                                                                                                   // [0x18c8380] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.StatusEffectBarEntryWidget.AnimateOut
	// void AnimateOut();                                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusEffectBarEntryWidget.AnimateIn
	// void AnimateIn();                                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.StatusEffectBarWidget
/// Size: 0x0398 (920 bytes) (0x000300 - 0x000398) align 8 MaxSize: 0x0398
class UStatusEffectBarWidget : public UIndianaUserWidget
{ 
public:
	class UStatusEffectBarEntryWidget*                 StatusEffectEntryOne;                                       // 0x0300   (0x0008)  
	class UStatusEffectBarEntryWidget*                 StatusEffectEntryTwo;                                       // 0x0308   (0x0008)  
	class UStatusEffectBarEntryWidget*                 StatusEffectEntryThree;                                     // 0x0310   (0x0008)  
	class UStatusEffectBarEntryWidget*                 StatusEffectEntryFour;                                      // 0x0318   (0x0008)  
	class UStatusEffectBarEntryWidget*                 StatusEffectEntryFive;                                      // 0x0320   (0x0008)  
	class UStatusEffectBarEntryWidget*                 StatusEffectEntrySix;                                       // 0x0328   (0x0008)  
	float                                              AnimationTime;                                              // 0x0330   (0x0004)  
	int32_t                                            StatusBlockAnimDistance;                                    // 0x0334   (0x0004)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0338   (0x0060)  MISSED


	/// Functions
	// Function /Script/Indiana.StatusEffectBarWidget.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);              // [0x18c87e0] Final|Native|Protected 
	// Function /Script/Indiana.StatusEffectBarWidget.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                // [0x18c8710] Final|Native|Protected 
};

/// Class /Script/Indiana.StatusEffectEntryWidget
/// Size: 0x0328 (808 bytes) (0x000300 - 0x000328) align 8 MaxSize: 0x0328
class UStatusEffectEntryWidget : public UIndianaUserWidget
{ 
public:
	class UButtonBase*                                 Button;                                                     // 0x0300   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0308   (0x0008)  
	class UTextBlockBase*                              TimeRemainingTextBlock;                                     // 0x0310   (0x0008)  
	class UImage*                                      Icon;                                                       // 0x0318   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0320   (0x0008)  MISSED
};

/// Class /Script/Indiana.StatusEffectManagerComponent
/// Size: 0x0168 (360 bytes) (0x0000E0 - 0x000168) align 8 MaxSize: 0x0168
class UStatusEffectManagerComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x00E0   (0x0010)  MISSED
	TArray<class UStatusEffect*>                       StatusEffects;                                              // 0x00F0   (0x0010)  
	TArray<class UStatusEffect*>                       StatusEffectsToClear;                                       // 0x0100   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0110   (0x0010)  MISSED
	SDK_UNDEFINED(16,660) /* FMulticastInlineDelegate */ __um(OnAddStatusEffect);                                  // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,661) /* FMulticastInlineDelegate */ __um(OnRemoveStatusEffect);                               // 0x0130   (0x0010)  
	SDK_UNDEFINED(16,662) /* FMulticastInlineDelegate */ __um(OnRestoredStatusEffect);                             // 0x0140   (0x0010)  
	TArray<class UClass*>                              StatusEffectImmunities;                                     // 0x0150   (0x0010)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0160   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.StatusEffectManagerComponent.RemoveStatusEffectsOfClass
	// void RemoveStatusEffectsOfClass(class UClass* Data);                                                                     // [0x18cc130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventHostileStatusEffectsOnCompanions
	// void PreventHostileStatusEffectsOnCompanions(bool bPreventHostileStatusEffectsIn, bool bShouldClear);                    // [0x18cc060] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventHostileStatusEffectsNPC
	// void PreventHostileStatusEffectsNPC(bool bPreventHostileStatusEffectsIn, bool bShouldClear);                             // [0x18cbf90] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventHostileStatusEffects
	// void PreventHostileStatusEffects(bool bPreventHostileStatusEffectsIn, bool bShouldClear);                                // [0x18cbec0] Final|Exec|Native|Public 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventAllStatusEffectsOnCompanions
	// void PreventAllStatusEffectsOnCompanions(bool bPreventStatusEffectsIn, bool bShouldClear);                               // [0x18cbdf0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventAllStatusEffectsNPC
	// void PreventAllStatusEffectsNPC(bool bPreventStatusEffectsIn, bool bShouldClear);                                        // [0x18cbd20] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventAllStatusEffects
	// void PreventAllStatusEffects(bool bPreventStatusEffectsIn, bool bShouldClear);                                           // [0x18cbc50] Final|Exec|Native|Public 
	// Function /Script/Indiana.StatusEffectManagerComponent.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x18cb9f0] Final|Native|Private 
	// Function /Script/Indiana.StatusEffectManagerComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x18cb7c0] Final|Native|Private 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearStatusEffectOnCompanions
	// void ClearStatusEffectOnCompanions(FString Name);                                                                        // [0x18cb2f0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearStatusEffectNPC
	// void ClearStatusEffectNPC(FString Name);                                                                                 // [0x18cb240] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearStatusEffect
	// void ClearStatusEffect(FString Name);                                                                                    // [0x18cb190] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearAllStatusEffectsOnCompanions
	// void ClearAllStatusEffectsOnCompanions(bool bOnlyHostile);                                                               // [0x18cb100] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearAllStatusEffectsNPC
	// void ClearAllStatusEffectsNPC(bool bOnlyHostile);                                                                        // [0x18cb070] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearAllStatusEffects
	// void ClearAllStatusEffects(bool bOnlyHostile);                                                                           // [0x18cafe0] Final|Exec|Native|Public 
	// Function /Script/Indiana.StatusEffectManagerComponent.BPAddEffect
	// class UStatusEffect* BPAddEffect(class UClass* Data, TScriptInterface<Class> Origin, FDynamicEffectProperties& AddProperties); // [0x18cae70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.StatusEffectManagerComponent.AddStatusEffectToCompanions
	// void AddStatusEffectToCompanions(FString Name);                                                                          // [0x18cadc0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.AddStatusEffectNPC
	// void AddStatusEffectNPC(FString Name);                                                                                   // [0x18cad10] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.AddStatusEffect
	// void AddStatusEffect(FString Name);                                                                                      // [0x18cac60] Final|Exec|Native|Protected 
};

/// Class /Script/Indiana.StatusEffectOrigin
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UStatusEffectOrigin : public UInterface
{ 
public:
};

/// Class /Script/Indiana.StatusEffectRemove
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UStatusEffectRemove : public UStatusEffect
{ 
public:
	class UClass*                                      StatusEffect;                                               // 0x0188   (0x0008)  
};

/// Class /Script/Indiana.StatusEffectTagEntryWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class UStatusEffectTagEntryWidget : public UIndianaUserWidget
{ 
public:
	class UImage*                                      StatusEffectImage;                                          // 0x0300   (0x0008)  
	class UTextBlockBase*                              StackQuantityTextBlock;                                     // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0310   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.StatusEffectTagEntryWidget.OnImageSet
	// void OnImageSet();                                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.StatusEffectTagWidget
/// Size: 0x0368 (872 bytes) (0x000300 - 0x000368) align 8 MaxSize: 0x0368
class UStatusEffectTagWidget : public UIndianaUserWidget
{ 
public:
	class UStatusEffectTagEntryWidget*                 StatusEffectEntryOne;                                       // 0x0300   (0x0008)  
	class UStatusEffectTagEntryWidget*                 StatusEffectEntryTwo;                                       // 0x0308   (0x0008)  
	class UStatusEffectTagEntryWidget*                 StatusEffectEntryThree;                                     // 0x0310   (0x0008)  
	class UStatusEffectTagEntryWidget*                 StatusEffectEntryFour;                                      // 0x0318   (0x0008)  
	class UStatusEffectTagEntryWidget*                 StatusEffectEntryFive;                                      // 0x0320   (0x0008)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0328   (0x0040)  MISSED


	/// Functions
	// Function /Script/Indiana.StatusEffectTagWidget.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);              // [0x18cbb60] Final|Native|Protected 
	// Function /Script/Indiana.StatusEffectTagWidget.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                // [0x18cba90] Final|Native|Protected 
};

/// Class /Script/Indiana.StatusEffectTarget
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UStatusEffectTarget : public UInterface
{ 
public:
};

/// Class /Script/Indiana.StatusEffectUIVisualsData
/// Size: 0x0078 (120 bytes) (0x000038 - 0x000078) align 8 MaxSize: 0x0078
class UStatusEffectUIVisualsData : public UDataAsset
{ 
public:
	ESymbolType                                        SymbolType;                                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FLocString                                         StatusEffectName;                                           // 0x003C   (0x0008)  
	FLocString                                         StatusEffectDescription;                                    // 0x0044   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	class UTexture2D*                                  Icon;                                                       // 0x0050   (0x0008)  
	class UTexture2D*                                  IconLarge;                                                  // 0x0058   (0x0008)  
	class UTexture2D*                                  IconHUD;                                                    // 0x0060   (0x0008)  
	TArray<EDLCFlags>                                  DLCFlags;                                                   // 0x0068   (0x0010)  
};

/// Class /Script/Indiana.StatusTagActor
/// Size: 0x02E0 (736 bytes) (0x0002C0 - 0x0002E0) align 8 MaxSize: 0x02E0
class AStatusTagActor : public APooledActor
{ 
public:
	class UStatusWidgetComponent*                      StatusTagComponent;                                         // 0x02C0   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x02D0   (0x0010)  MISSED
};

/// Struct /Script/Indiana.AlertStateImageSet
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FAlertStateImageSet
{ 
	class UTexture2D*                                  BackingTexture;                                             // 0x0000   (0x0008)  
	class UTexture2D*                                  FillTexture;                                                // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.AwarenessImageSet
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 MaxSize: 0x0060
struct FAwarenessImageSet
{ 
	FAlertStateImageSet                                ImageSetUnaware;                                            // 0x0000   (0x0010)  
	FAlertStateImageSet                                ImageSetSuspicious;                                         // 0x0010   (0x0010)  
	FAlertStateImageSet                                ImageSetInvestigating;                                      // 0x0020   (0x0010)  
	FAlertStateImageSet                                ImageSetAlerted;                                            // 0x0030   (0x0010)  
	FAlertStateImageSet                                ImageSetDisguise;                                           // 0x0040   (0x0010)  
	FAlertStateImageSet                                ImageSetDisguiseAlert;                                      // 0x0050   (0x0010)  
};

/// Struct /Script/Indiana.AwarenessTalkImageSet
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FAwarenessTalkImageSet
{ 
	class UTexture2D*                                  DisguiseUnalerted;                                          // 0x0000   (0x0008)  
	class UTexture2D*                                  DisguiseAlerted;                                            // 0x0008   (0x0008)  
	class UTexture2D*                                  NonDisguiseUnalerted;                                       // 0x0010   (0x0008)  
	class UTexture2D*                                  NonDisguiseAlerted;                                         // 0x0018   (0x0008)  
};

/// Class /Script/Indiana.StatusTagAwarenessWidget
/// Size: 0x03C8 (968 bytes) (0x000300 - 0x0003C8) align 8 MaxSize: 0x03C8
class UStatusTagAwarenessWidget : public UIndianaUserWidget
{ 
public:
	FName                                              BackingTextureParamName;                                    // 0x0300   (0x0008)  
	FName                                              FillTextureParamName;                                       // 0x0308   (0x0008)  
	FName                                              FillParamName;                                              // 0x0310   (0x0008)  
	FAwarenessImageSet                                 AwarenessImageSet;                                          // 0x0318   (0x0060)  
	FAwarenessTalkImageSet                             AwarenessTalkImageSet;                                      // 0x0378   (0x0020)  
	class UImage*                                      MaterialImage;                                              // 0x0398   (0x0008)  
	class UImage*                                      AlertImage;                                                 // 0x03A0   (0x0008)  
	class UImage*                                      TalkImage;                                                  // 0x03A8   (0x0008)  
	class UMaterialInstanceDynamic*                    MaterialInstance;                                           // 0x03B0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x03B8   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.StatusTagAwarenessWidget.SetTextures
	// void SetTextures(class UTexture2D* BackingTexture, class UTexture2D* FillTexture);                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusTagAwarenessWidget.SetTalkImage
	// void SetTalkImage(class UTexture2D* TalkTexture);                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.StatusTagGenerator
/// Size: 0x0090 (144 bytes) (0x000030 - 0x000090) align 8 MaxSize: 0x0090
class UStatusTagGenerator : public UObject
{ 
public:
	class UActorPool*                                  StatusTagPool;                                              // 0x0030   (0x0008)  
	class UClass*                                      StatusTagSubclass;                                          // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0040   (0x0050)  MISSED
};

/// Class /Script/Indiana.StatusTagWidget
/// Size: 0x0400 (1024 bytes) (0x000300 - 0x000400) align 8 MaxSize: 0x0400
class UStatusTagWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0300   (0x0008)  
	class UTextBlockBase*                              BarkTextBlock;                                              // 0x0308   (0x0008)  
	class UCanvasPanel*                                RootPanel;                                                  // 0x0310   (0x0008)  
	class UImage*                                      SneakBlip;                                                  // 0x0318   (0x0008)  
	class UImage*                                      HostileImage;                                               // 0x0320   (0x0008)  
	class UImage*                                      TargetMarked;                                               // 0x0328   (0x0008)  
	class UImage*                                      FactionImage;                                               // 0x0330   (0x0008)  
	class UImage*                                      HealthBar;                                                  // 0x0338   (0x0008)  
	class UImage*                                      RecentDamage;                                               // 0x0340   (0x0008)  
	class UBorder*                                     DisguiseEmblemContainer;                                    // 0x0348   (0x0008)  
	class UBorder*                                     RootBorder;                                                 // 0x0350   (0x0008)  
	class UBorder*                                     TargetBorder;                                               // 0x0358   (0x0008)  
	class UOverlay*                                    HealthOverlay;                                              // 0x0360   (0x0008)  
	class UVerticalBox*                                HealthVerticalBox;                                          // 0x0368   (0x0008)  
	class UStatusEffectTagWidget*                      StatusEffectDisplay;                                        // 0x0370   (0x0008)  
	class UImage*                                      InterrogationAlerted;                                       // 0x0378   (0x0008)  
	class UStatusTagAwarenessWidget*                   AwarenessWidget;                                            // 0x0380   (0x0008)  
	class UOverlay*                                    AwarenessOverlay;                                           // 0x0388   (0x0008)  
	float                                              LostHealthAnimTime;                                         // 0x0390   (0x0004)  
	bool                                               bFadeOutComplete;                                           // 0x0394   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6B];                                      // 0x0395   (0x006B)  MISSED


	/// Functions
	// Function /Script/Indiana.StatusTagWidget.OnSetPlayerTargeted
	// void OnSetPlayerTargeted(bool bIsTarget);                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusTagWidget.OnMeterVisibilityChanged
	// void OnMeterVisibilityChanged(bool bVisible);                                                                            // [0x18cb730] Final|Native|Protected 
	// Function /Script/Indiana.StatusTagWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18cb610] Final|Native|Protected 
	// Function /Script/Indiana.StatusTagWidget.OnHealthBarModeChanged
	// void OnHealthBarModeChanged(int32_t ModeIn);                                                                             // [0x18cb6a0] Final|Native|Protected 
	// Function /Script/Indiana.StatusTagWidget.OnCombatStateChanged
	// void OnCombatStateChanged(bool bCombatIn, bool bRestoring);                                                              // [0x18cb540] Final|Native|Protected 
};

/// Class /Script/Indiana.StatusWidgetComponent
/// Size: 0x0680 (1664 bytes) (0x000670 - 0x000680) align 16 MaxSize: 0x0680
class UStatusWidgetComponent : public UIndianaWidgetComponent
{ 
public:
	float                                              Offset;                                                     // 0x0670   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0674   (0x000C)  MISSED
};

/// Class /Script/Indiana.StealthComponent
/// Size: 0x0238 (568 bytes) (0x0000E0 - 0x000238) align 8 MaxSize: 0x0238
class UStealthComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x120];                                     // 0x00E0   (0x0120)  MISSED
	SDK_UNDEFINED(16,663) /* FMulticastInlineDelegate */ __um(OnStealthChanged);                                   // 0x0200   (0x0010)  
	unsigned char                                      UnknownData01_6[0x24];                                      // 0x0210   (0x0024)  MISSED
	float                                              PickpocketClearTime;                                        // 0x0234   (0x0004)  


	/// Functions
	// Function /Script/Indiana.StealthComponent.OnStopStealth
	// void OnStopStealth();                                                                                                    // [0x18cbc30] Final|Native|Protected 
	// Function /Script/Indiana.StealthComponent.OnStartStealth
	// void OnStartStealth();                                                                                                   // [0x18cba70] Final|Native|Protected 
	// Function /Script/Indiana.StealthComponent.OnPickpocketDetectionChange
	// void OnPickpocketDetectionChange(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x18cb890] Final|Native|Protected 
	// Function /Script/Indiana.StealthComponent.OnBumped
	// void OnBumped(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);                // [0x18cb3a0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/Indiana.SteamDLCManager
/// Size: 0x0078 (120 bytes) (0x000050 - 0x000078) align 8 MaxSize: 0x0078
class USteamDLCManager : public UDLCManager
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0050   (0x0028)  MISSED
};

/// Struct /Script/Indiana.IDSet
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FIDSet
{ 
	SDK_UNDEFINED(80,664) /* TSet<int32_t> */          __um(Ids);                                                  // 0x0000   (0x0050)  
};

/// Struct /Script/Indiana.OEIStringEntry
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 MaxSize: 0x0058
struct FOEIStringEntry
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            DefaultText;                                                // 0x0008   (0x0010)  
	FString                                            FemaleText;                                                 // 0x0018   (0x0010)  
	FString                                            AlternateXboxText;                                          // 0x0028   (0x0010)  
	FString                                            AlternatePS5Text;                                           // 0x0038   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0048   (0x0010)  MISSED
};

/// Struct /Script/Indiana.OEIStringTable
/// Size: 0x0100 (256 bytes) (0x000000 - 0x000100) align 8 MaxSize: 0x0100
struct FOEIStringTable
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	SDK_UNDEFINED(80,665) /* TSet<int32_t> */          __um(StringsWithTokens);                                    // 0x0010   (0x0050)  
	TMap<FString, FIDSet>                              StringsWithFemaleVO;                                        // 0x0060   (0x0050)  
	TMap<int32_t, FOEIStringEntry>                     Entries;                                                    // 0x00B0   (0x0050)  
};

/// Class /Script/Indiana.StringTableBundleSet
/// Size: 0x0090 (144 bytes) (0x000038 - 0x000090) align 8 MaxSize: 0x0090
class UStringTableBundleSet : public UDataAsset
{ 
public:
	TMap<FString, FOEIStringTable>                     StringTables;                                               // 0x0038   (0x0050)  
	int32_t                                            Hash;                                                       // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.MiniTimeSpan
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FMiniTimeSpan
{ 
	int32_t                                            Minutes;                                                    // 0x0000   (0x0004)  
	int32_t                                            Seconds;                                                    // 0x0004   (0x0004)  
	int32_t                                            Milliseconds;                                               // 0x0008   (0x0004)  
};

/// Struct /Script/Indiana.SubtitleEntry
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 MaxSize: 0x0038
struct FSubtitleEntry
{ 
	FString                                            DebugName;                                                  // 0x0000   (0x0010)  
	FMiniTimeSpan                                      StartTime;                                                  // 0x0010   (0x000C)  
	FMiniTimeSpan                                      EndTime;                                                    // 0x001C   (0x000C)  
	FLocString                                         NameString;                                                 // 0x0028   (0x0008)  
	int32_t                                            SubtitleStringID;                                           // 0x0030   (0x0004)  
	EGender                                            Gender;                                                     // 0x0034   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0035   (0x0003)  MISSED
};

/// Class /Script/Indiana.SubtitleData
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align 8 MaxSize: 0x0058
class USubtitleData : public UDataAsset
{ 
public:
	FString                                            ConversationFile;                                           // 0x0038   (0x0010)  
	TArray<FSubtitleEntry>                             SubtitleEntries;                                            // 0x0048   (0x0010)  
};

/// Class /Script/Indiana.SubtitleEntryWidget
/// Size: 0x0308 (776 bytes) (0x000300 - 0x000308) align 8 MaxSize: 0x0308
class USubtitleEntryWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              EntryTextBlock;                                             // 0x0300   (0x0008)  
};

/// Class /Script/Indiana.SubtitleManagerWidget
/// Size: 0x03A0 (928 bytes) (0x000308 - 0x0003A0) align 8 MaxSize: 0x03A0
class USubtitleManagerWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class UVerticalBox*                                SubtitleVerticalBox;                                        // 0x0308   (0x0008)  
	class UMovieSubtitleData*                          MasterSubtitleData;                                         // 0x0310   (0x0008)  
	class UClass*                                      SubtitleEntryClass;                                         // 0x0318   (0x0008)  
	class USubtitleData*                               CurrentSubtitleData;                                        // 0x0320   (0x0008)  
	unsigned char                                      UnknownData00_7[0x78];                                      // 0x0328   (0x0078)  MISSED


	/// Functions
	// Function /Script/Indiana.SubtitleManagerWidget.OnCinematicSubtitleVisibilityChanged
	// void OnCinematicSubtitleVisibilityChanged(bool bVisible);                                                                // [0x18d0db0] Final|Native|Protected 
	// Function /Script/Indiana.SubtitleManagerWidget.GetCorrectName
	// FString GetCorrectName(FText currentName);                                                                               // [0x18d0bc0] Final|Native|Protected 
};

/// Class /Script/Indiana.SubtitlesWidget
/// Size: 0x0470 (1136 bytes) (0x000300 - 0x000470) align 8 MaxSize: 0x0470
class USubtitlesWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              SpeakerTextBlock;                                           // 0x0300   (0x0008)  
	class UTextBlockBase*                              MessageTextBlock;                                           // 0x0308   (0x0008)  
	class USizeBox*                                    TextSizeBox;                                                // 0x0310   (0x0008)  
	float                                              TextSizeBoxVerticalOffset;                                  // 0x0318   (0x0004)  
	float                                              TextSizeBoxHorizontalOffset;                                // 0x031C   (0x0004)  
	unsigned char                                      UnknownData00_7[0x150];                                     // 0x0320   (0x0150)  MISSED


	/// Functions
	// Function /Script/Indiana.SubtitlesWidget.SetSizeBoxRatio
	// void SetSizeBoxRatio(float HorizontalRatio, float VerticalRatio);                                                        // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.SubtitlesWidget.OnBarkSubtitleVisibilityChanged
	// void OnBarkSubtitleVisibilityChanged(bool bVisible);                                                                     // [0x18d0d20] Final|Native|Protected 
};

/// Class /Script/Indiana.SuppressableInterface
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class USuppressableInterface : public UInterface
{ 
public:
};

/// Class /Script/Indiana.SuppressRandomPlayerPerkStatusEffect
/// Size: 0x0198 (408 bytes) (0x000188 - 0x000198) align 8 MaxSize: 0x0198
class USuppressRandomPlayerPerkStatusEffect : public UStatusEffect
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0188   (0x0010)  MISSED
};

/// Class /Script/Indiana.SuppressStatusEffect
/// Size: 0x0188 (392 bytes) (0x000188 - 0x000188) align 8 MaxSize: 0x0188
class USuppressStatusEffect : public UStatusEffect
{ 
public:
};

/// Class /Script/Indiana.SurvivalBarGroupWidget
/// Size: 0x0350 (848 bytes) (0x000300 - 0x000350) align 8 MaxSize: 0x0350
class USurvivalBarGroupWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class USurvivalBarWidget*                          HungerBar;                                                  // 0x0310   (0x0008)  
	class USurvivalBarWidget*                          ThirstBar;                                                  // 0x0318   (0x0008)  
	class USurvivalBarWidget*                          SleepBar;                                                   // 0x0320   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0328   (0x0028)  MISSED


	/// Functions
	// Function /Script/Indiana.SurvivalBarGroupWidget.OnSubSurvivalBarUpdated
	// void OnSubSurvivalBarUpdated();                                                                                          // [0x18b9be0] Final|Native|Protected 
	// Function /Script/Indiana.SurvivalBarGroupWidget.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty NewDifficulty);                                                                 // [0x18d0e40] Final|Native|Protected 
};

/// Class /Script/Indiana.SurvivalBarWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class USurvivalBarWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	ESurvivalBar                                       SurvivalMode;                                               // 0x0310   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0311   (0x0007)  MISSED
	class UImage*                                      SurvivalIcon;                                               // 0x0318   (0x0008)  
	class UProgressBar*                                SurvivalProgressBar;                                        // 0x0320   (0x0008)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0328   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.SurvivalBarWidget.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty DifficultyIn);                                                                  // [0x18d0ec0] Final|Native|Protected 
};

/// Class /Script/Indiana.SuspiciousBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000120 - 0x000128) align 8 MaxSize: 0x0128
class USuspiciousBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0120   (0x0008)  MISSED
};

/// Class /Script/Indiana.SuspiciousRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class USuspiciousRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
	bool                                               bActiveDuringInvestigate;                                   // 0x0068   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Indiana.Switch
/// Size: 0x0350 (848 bytes) (0x0002B8 - 0x000350) align 8 MaxSize: 0x0350
class ASwitch : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x48];                                      // 0x02B8   (0x0048)  MISSED
	SDK_UNDEFINED(16,666) /* FMulticastInlineDelegate */ __um(OnSwitchStateChanged);                               // 0x0300   (0x0010)  
	class USceneComponent*                             SceneComponent;                                             // 0x0310   (0x0008)  
	class UInteractableComponent*                      InteractableComponent;                                      // 0x0318   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0320   (0x0008)  
	class UAkComponent*                                AkComponent;                                                // 0x0328   (0x0008)  
	class UTravelTriggerComponent*                     TravelTriggerComponent;                                     // 0x0330   (0x0008)  
	CycleBehavior                                      CyclingType;                                                // 0x0338   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0339   (0x0003)  MISSED
	int32_t                                            NumStates;                                                  // 0x033C   (0x0004)  
	int32_t                                            InitialState;                                               // 0x0340   (0x0004)  
	bool                                               bPreventInCombatUsage;                                      // 0x0344   (0x0001)  
	unsigned char                                      UnknownData02_7[0xB];                                       // 0x0345   (0x000B)  MISSED


	/// Functions
	// Function /Script/Indiana.Switch.SetCurrentState
	// void SetCurrentState(int32_t NewState, class AActor* Initiator);                                                         // [0x18d0f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Switch.GetCurrentState
	// int32_t GetCurrentState();                                                                                               // [0x18d0d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Switch.CycleNextState
	// void CycleNextState(class AActor* Initiator);                                                                            // [0x18d0b30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.SwitchAudioComponent
/// Size: 0x01A0 (416 bytes) (0x000150 - 0x0001A0) align 8 MaxSize: 0x01A0
class USwitchAudioComponent : public UInteractableAudioComponent
{ 
public:
	TMap<ESwitchEventType, class UAkPlaySoundEventEffect*> AudioEvents;                                            // 0x0150   (0x0050)  


	/// Functions
	// Function /Script/Indiana.SwitchAudioComponent.Stop
	// void Stop(ESwitchEventType Type);                                                                                        // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SwitchAudioComponent.Play
	// void Play(ESwitchEventType Type);                                                                                        // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.SwitchContextBehaviorStateInfo
/// Size: 0x0128 (296 bytes) (0x000120 - 0x000128) align 8 MaxSize: 0x0128
class USwitchContextBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0120   (0x0008)  MISSED
};

/// Class /Script/Indiana.SwitchContextRequestData
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align 8 MaxSize: 0x0070
class USwitchContextRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
	EDecisionTreeContextType                           Context;                                                    // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Indiana.SwitchTargetBehaviorStateInfo
/// Size: 0x0120 (288 bytes) (0x000120 - 0x000120) align 8 MaxSize: 0x0120
class USwitchTargetBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.SwitchTargetRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class USwitchTargetRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.SwitchWeaponBehaviorStateInfo
/// Size: 0x0130 (304 bytes) (0x000120 - 0x000130) align 8 MaxSize: 0x0130
class USwitchWeaponBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0120   (0x0010)  MISSED
};

/// Class /Script/Indiana.SwitchWeaponRequestData
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align 8 MaxSize: 0x0078
class USwitchWeaponRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
	bool                                               bInstant;                                                   // 0x0068   (0x0001)  
	EWeaponSwitchType                                  WeaponSwitchType;                                           // 0x0069   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x006A   (0x0002)  MISSED
	FGameplayTag                                       WeaponType;                                                 // 0x006C   (0x0008)  
	int32_t                                            WeaponSlotIndex;                                            // 0x0074   (0x0004)  
};

/// Class /Script/Indiana.SymbolDescriptionPanelEntry
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class USymbolDescriptionPanelEntry : public UIndianaUserWidget
{ 
public:
	class UScalableImage*                              ScalableSymbol;                                             // 0x0300   (0x0008)  
	class UTextBlockBase*                              SymbolName;                                                 // 0x0308   (0x0008)  
	class UTextBlockBase*                              SymbolDescription;                                          // 0x0310   (0x0008)  
};

/// Struct /Script/Indiana.StatuEffectVisualSet
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FStatuEffectVisualSet
{ 
	SDK_UNDEFINED(80,667) /* TSet<TWeakObjectPtr<UStatusEffectUIVisualsData*>> */ __um(StatusEffectVisuals);       // 0x0000   (0x0050)  
};

/// Class /Script/Indiana.SymbolList
/// Size: 0x0448 (1096 bytes) (0x000358 - 0x000448) align 8 MaxSize: 0x0448
class USymbolList : public UGenericCollapsableList
{ 
public:
	TMap<ESymbolType, FLocString>                      SymbolEntryNames;                                           // 0x0358   (0x0050)  
	TMap<ESymbolType, FStatuEffectVisualSet>           StatusEffectVisuals;                                        // 0x03A8   (0x0050)  
	unsigned char                                      UnknownData00_6[0x30];                                      // 0x03F8   (0x0030)  MISSED
	class UClass*                                      SymbolEntryClass;                                           // 0x0428   (0x0008)  
	class UMapCompassUIVisualData*                     MapCompassVisualData;                                       // 0x0430   (0x0008)  
	TArray<class UClass*>                              DamageTypesData;                                            // 0x0438   (0x0010)  
};

/// Struct /Script/Indiana.AlternateBrushSet
/// Size: 0x03B8 (952 bytes) (0x000000 - 0x0003B8) align 8 MaxSize: 0x03B8
struct FAlternateBrushSet
{ 
	FSlateBrush                                        HiddenBrush;                                                // 0x0000   (0x0088)  
	FSlateBrush                                        LockedBrush;                                                // 0x0088   (0x0088)  
	FSlateBrush                                        LockedHoverFocused;                                         // 0x0110   (0x0088)  
	FSlateBrush                                        LockedSelected;                                             // 0x0198   (0x0088)  
	FSlateBrush                                        UnlockedBrush;                                              // 0x0220   (0x0088)  
	FSlateBrush                                        UnlockedHoverFocused;                                       // 0x02A8   (0x0088)  
	FSlateBrush                                        UnlockedSelected;                                           // 0x0330   (0x0088)  
};

/// Struct /Script/Indiana.SystemMapEntryData
/// Size: 0x0C00 (3072 bytes) (0x000000 - 0x000C00) align 8 MaxSize: 0x0C00
struct FSystemMapEntryData
{ 
	FString                                            DebugName;                                                  // 0x0000   (0x0010)  
	FVector2D                                          Position;                                                   // 0x0010   (0x0008)  
	FLocString                                         NameString;                                                 // 0x0018   (0x0008)  
	FLocString                                         DescString;                                                 // 0x0020   (0x0008)  
	FVector2D                                          TextPadding;                                                // 0x0028   (0x0008)  
	FVector2D                                          TextAlignment;                                              // 0x0030   (0x0008)  
	FVector2D                                          QuestIconPadding;                                           // 0x0038   (0x0008)  
	FVector2D                                          PlayerIconPadding;                                          // 0x0040   (0x0008)  
	int32_t                                            TextZOrder;                                                 // 0x0048   (0x0004)  
	int32_t                                            ButtonZOrder;                                               // 0x004C   (0x0004)  
	int32_t                                            QuestIconZOrder;                                            // 0x0050   (0x0004)  
	int32_t                                            PlayerIconZOrder;                                           // 0x0054   (0x0004)  
	int32_t                                            SortingOrder;                                               // 0x0058   (0x0004)  
	bool                                               bDisplayPointOfNoReturnWarning;                             // 0x005C   (0x0001)  
	bool                                               bShowWhileHidden;                                           // 0x005D   (0x0001)  
	bool                                               bFlipHorizontal;                                            // 0x005E   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x005F   (0x0001)  MISSED
	FSlateBrush                                        HiddenBrush;                                                // 0x0060   (0x0088)  
	FVector2D                                          HiddenPosition;                                             // 0x00E8   (0x0008)  
	FSlateBrush                                        LockedBrush;                                                // 0x00F0   (0x0088)  
	FSlateBrush                                        LockedHoverFocused;                                         // 0x0178   (0x0088)  
	FSlateBrush                                        LockedSelected;                                             // 0x0200   (0x0088)  
	FSlateBrush                                        UnlockedBrush;                                              // 0x0288   (0x0088)  
	FSlateBrush                                        UnlockedHoverFocused;                                       // 0x0310   (0x0088)  
	FSlateBrush                                        UnlockedSelected;                                           // 0x0398   (0x0088)  
	bool                                               bHasINX1Overrides;                                          // 0x0420   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0421   (0x0007)  MISSED
	FAlternateBrushSet                                 INX1BrushSet;                                               // 0x0428   (0x03B8)  
	bool                                               bHasINX2Overrides;                                          // 0x07E0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x07E1   (0x0007)  MISSED
	FAlternateBrushSet                                 INX2BrushSet;                                               // 0x07E8   (0x03B8)  
	TArray<class UShipDestinationData*>                Destinations;                                               // 0x0BA0   (0x0010)  
	TMap<class UShipDestinationData*, class UTexture2D*> DestinationImages;                                        // 0x0BB0   (0x0050)  
};

/// Class /Script/Indiana.SystemMapData
/// Size: 0x00B0 (176 bytes) (0x000038 - 0x0000B0) align 8 MaxSize: 0x00B0
class USystemMapData : public UDataAsset
{ 
public:
	TArray<FSystemMapEntryData>                        SystemEntries;                                              // 0x0038   (0x0010)  
	TWeakObjectPtr<class USystemMapData*>              DLC1SystemMapData;                                          // 0x0048   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0050   (0x0020)  MISSED
	TWeakObjectPtr<class USystemMapData*>              DLC2SystemMapData;                                          // 0x0070   (0x0008)  
	unsigned char                                      UnknownData01_7[0x38];                                      // 0x0078   (0x0038)  MISSED
};

/// Struct /Script/Indiana.SystemMapEntryHelper
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 MaxSize: 0x0018
struct FSystemMapEntryHelper
{ 
	FLocString                                         NameString;                                                 // 0x0000   (0x0008)  
	FLocString                                         DescString;                                                 // 0x0008   (0x0008)  
	bool                                               bAwareLocation;                                             // 0x0010   (0x0001)  
	bool                                               bHiddenLocation;                                            // 0x0011   (0x0001)  
	bool                                               bLockedLocation;                                            // 0x0012   (0x0001)  
	bool                                               bActiveQuestLocation;                                       // 0x0013   (0x0001)  
	bool                                               bInactiveQuestLocation;                                     // 0x0014   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Class /Script/Indiana.SystemMapEntryWidget
/// Size: 0x0F60 (3936 bytes) (0x000300 - 0x000F60) align 8 MaxSize: 0x0F60
class USystemMapEntryWidget : public UIndianaUserWidget
{ 
public:
	float                                              InactiveBeaconOpacity;                                      // 0x0300   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0304   (0x0004)  MISSED
	class UCanvasPanel*                                EntryCanvasPanel;                                           // 0x0308   (0x0008)  
	class UButtonBase*                                 Button;                                                     // 0x0310   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0318   (0x0008)  
	class UImage*                                      ActiveQuestIcon;                                            // 0x0320   (0x0008)  
	class UImage*                                      InactiveQuestIcon;                                          // 0x0328   (0x0008)  
	class UImage*                                      PlayerIcon;                                                 // 0x0330   (0x0008)  
	TArray<class UShipDestinationData*>                ValidDestinations;                                          // 0x0338   (0x0010)  
	FSystemMapEntryData                                SystemMapEntryData;                                         // 0x0348   (0x0C00)  
	FSystemMapEntryHelper                              EntryHelper;                                                // 0x0F48   (0x0018)  
};

/// Class /Script/Indiana.SystemMapInfoWidget
/// Size: 0x0320 (800 bytes) (0x000300 - 0x000320) align 8 MaxSize: 0x0320
class USystemMapInfoWidget : public UIndianaUserWidget
{ 
public:
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0300   (0x0008)  
	class UTextBlockBase*                              DescriptionTextBlock;                                       // 0x0308   (0x0008)  
	class UVerticalBox*                                ObjectiveVBox;                                              // 0x0310   (0x0008)  
	class UClass*                                      ObjectiveClass;                                             // 0x0318   (0x0008)  
};

/// Class /Script/Indiana.SystemMapInterfaceWidget
/// Size: 0x0320 (800 bytes) (0x000308 - 0x000320) align 8 MaxSize: 0x0320
class USystemMapInterfaceWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class USystemMapWidget*                            SystemMapWidget;                                            // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0310   (0x0010)  MISSED
};

/// Class /Script/Indiana.SystemMapObjectiveWidget
/// Size: 0x0310 (784 bytes) (0x000300 - 0x000310) align 8 MaxSize: 0x0310
class USystemMapObjectiveWidget : public UIndianaUserWidget
{ 
public:
	class UHorizontalBox*                              HorizontalBox;                                              // 0x0300   (0x0008)  
	class UTextBlockBase*                              TextBlock;                                                  // 0x0308   (0x0008)  
};

/// Class /Script/Indiana.SystemMapPlayerShipWidget
/// Size: 0x0348 (840 bytes) (0x000300 - 0x000348) align 8 MaxSize: 0x0348
class USystemMapPlayerShipWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UImage*                                      PlayerShipImage;                                            // 0x0310   (0x0008)  
	class UCurveVector*                                ScaleCurve;                                                 // 0x0318   (0x0008)  
	class UCurveVector*                                DistanceCurve;                                              // 0x0320   (0x0008)  
	float                                              UnitsPerSecond;                                             // 0x0328   (0x0004)  
	float                                              MinimumTravelTime;                                          // 0x032C   (0x0004)  
	float                                              MaximumTravelTime;                                          // 0x0330   (0x0004)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x0334   (0x0014)  MISSED
};

/// Class /Script/Indiana.SystemMapSelectionEntryWidget
/// Size: 0x0340 (832 bytes) (0x000300 - 0x000340) align 8 MaxSize: 0x0340
class USystemMapSelectionEntryWidget : public UIndianaUserWidget
{ 
public:
	float                                              InactiveBeaconOpacity;                                      // 0x0300   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0304   (0x0004)  MISSED
	class UButtonBase*                                 EntryButton;                                                // 0x0308   (0x0008)  
	class UImage*                                      ActiveQuestIcon;                                            // 0x0310   (0x0008)  
	class UImage*                                      InactiveQuestIcon;                                          // 0x0318   (0x0008)  
	class UTextBlockBase*                              EntryTextBlock;                                             // 0x0320   (0x0008)  
	class UShipDestinationData*                        ShipDestination;                                            // 0x0328   (0x0008)  
	class UTexture2D*                                  DestinationImage;                                           // 0x0330   (0x0008)  
	class USystemMapSelectionWidget*                   ParentSelectionWidget;                                      // 0x0338   (0x0008)  


	/// Functions
	// Function /Script/Indiana.SystemMapSelectionEntryWidget.OnEntryUnhoveredUnfocused
	// void OnEntryUnhoveredUnfocused();                                                                                        // [0x18d0f60] Final|Native|Protected 
	// Function /Script/Indiana.SystemMapSelectionEntryWidget.OnEntryHoveredFocused
	// void OnEntryHoveredFocused();                                                                                            // [0x18d0f40] Final|Native|Protected 
};

/// Class /Script/Indiana.SystemMapSelectionWidget
/// Size: 0x03E8 (1000 bytes) (0x000308 - 0x0003E8) align 8 MaxSize: 0x03E8
class USystemMapSelectionWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0308   (0x0018)  MISSED
	class UClass*                                      EntryClass;                                                 // 0x0320   (0x0008)  
	class UMultiQuestMapTracker*                       MultiQuestMapTracker;                                       // 0x0328   (0x0008)  
	class UTextBlockBase*                              HeaderTextblock;                                            // 0x0330   (0x0008)  
	class UImage*                                      MapPreview;                                                 // 0x0338   (0x0008)  
	class UVerticalBox*                                EntryList;                                                  // 0x0340   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x0348   (0x0008)  
	class UButtonBase*                                 CancelButton;                                               // 0x0350   (0x0008)  
	FMargin                                            EntryPadding;                                               // 0x0358   (0x0010)  
	class USizeBox*                                    BackgroundSizeBox;                                          // 0x0368   (0x0008)  
	class USizeBox*                                    ContentSizeBox;                                             // 0x0370   (0x0008)  
	unsigned char                                      UnknownData01_7[0x70];                                      // 0x0378   (0x0070)  MISSED
};

/// Class /Script/Indiana.SystemMapWidget
/// Size: 0x11E8 (4584 bytes) (0x0004B8 - 0x0011E8) align 8 MaxSize: 0x11E8
class USystemMapWidget : public UMapBaseWidget
{ 
public:
	class UClass*                                      SelectionWidgetClass;                                       // 0x04B8   (0x0008)  
	class USystemMapPlayerShipWidget*                  PlayerShipWidget;                                           // 0x04C0   (0x0008)  
	class USystemMapInfoWidget*                        InfoWidget;                                                 // 0x04C8   (0x0008)  
	class UClass*                                      EntryWidgetClass;                                           // 0x04D0   (0x0008)  
	class USystemMapData*                              SystemMapData;                                              // 0x04D8   (0x0008)  
	FVector2D                                          MinGamepadBounds;                                           // 0x04E0   (0x0008)  
	FVector2D                                          MaxGamepadBounds;                                           // 0x04E8   (0x0008)  
	unsigned char                                      UnknownData00_7[0xCF8];                                     // 0x04F0   (0x0CF8)  MISSED
};

/// Class /Script/Indiana.TacticalTimeDilationComponent
/// Size: 0x0260 (608 bytes) (0x0000E0 - 0x000260) align 8 MaxSize: 0x0260
class UTacticalTimeDilationComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	SDK_UNDEFINED(16,668) /* FMulticastInlineDelegate */ __um(TacticalTimeDilationStarted);                        // 0x00E8   (0x0010)  
	SDK_UNDEFINED(16,669) /* FMulticastInlineDelegate */ __um(TacticalTimeDilationEnded);                          // 0x00F8   (0x0010)  
	SDK_UNDEFINED(16,670) /* FMulticastInlineDelegate */ __um(TacticalTimeDilationMeterChange);                    // 0x0108   (0x0010)  
	unsigned char                                      UnknownData01_6[0x54];                                      // 0x0118   (0x0054)  MISSED
	float                                              TimeDilation;                                               // 0x016C   (0x0004)  
	float                                              PlayerTimeDilation;                                         // 0x0170   (0x0004)  
	float                                              TimeDilationMeterMax;                                       // 0x0174   (0x0004)  
	float                                              TimeDilationDrainRate;                                      // 0x0178   (0x0004)  
	float                                              TimeDilationFillRate;                                       // 0x017C   (0x0004)  
	float                                              TimeDilationFillDelay;                                      // 0x0180   (0x0004)  
	float                                              TimeDilationMinMeterToStart;                                // 0x0184   (0x0004)  
	float                                              TimeDilationDrainRateAction;                                // 0x0188   (0x0004)  
	float                                              TimeDilationDrainRateMovement;                              // 0x018C   (0x0004)  
	float                                              TransitionTime;                                             // 0x0190   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0194   (0x0004)  MISSED
	class URpgStat*                                    TimeDilationStat;                                           // 0x0198   (0x0008)  
	float                                              ReloadScalar;                                               // 0x01A0   (0x0004)  
	float                                              LookRateScalar;                                             // 0x01A4   (0x0004)  
	class UAkAudioEvent*                               TTDMeterDepleted;                                           // 0x01A8   (0x0008)  
	class UAkAudioEvent*                               TTDDeactivated;                                             // 0x01B0   (0x0008)  
	class UAkAudioEvent*                               TTDUsuable;                                                 // 0x01B8   (0x0008)  
	class UAkAudioEvent*                               TTDMeterFull;                                               // 0x01C0   (0x0008)  
	float                                              MovementAudioDrainRate;                                     // 0x01C8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x01CC   (0x0004)  MISSED
	FRuntimeFloatCurve                                 FasterTTDDrainCurve;                                        // 0x01D0   (0x0088)  
	float                                              TimeDilationActionDuration;                                 // 0x0258   (0x0004)  
	float                                              TimeDilationMovementDuration;                               // 0x025C   (0x0004)  


	/// Functions
	// Function /Script/Indiana.TacticalTimeDilationComponent.PreventTTD
	// void PreventTTD(bool bPrevent);                                                                                          // [0x18d5870] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TacticalTimeDilationComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18d53c0] Final|Native|Protected 
	// Function /Script/Indiana.TacticalTimeDilationComponent.OnPlayerConversationChange
	// void OnPlayerConversationChange(class UConversationInstance* Instance, bool bEntered);                                   // [0x18d4ff0] Final|Native|Protected 
	// Function /Script/Indiana.TacticalTimeDilationComponent.OnDeath
	// void OnDeath(FCauseDamageInfo& CauseDamageInfo);                                                                         // [0x18d4c00] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TacticalTimeDilationComponent.OnAttack
	// void OnAttack(float DurationScalar);                                                                                     // [0x18d4a10] Final|Native|Protected 
	// Function /Script/Indiana.TacticalTimeDilationComponent.EnableTimeDilation
	// void EnableTimeDilation(bool bEnabled, bool bInstant, bool bForce);                                                      // [0x18d42c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TacticalTimeDilationComponent.AttributeUpdated
	// void AttributeUpdated(EAttribute Attribute, int32_t NewValue);                                                           // [0x18d3e10] Final|Native|Protected 
};

/// Struct /Script/Indiana.WwiseVOEvent
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FWwiseVOEvent
{ 
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	class UAkAudioEvent*                               AudioEvent;                                                 // 0x0010   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0018   (0x0008)  MISSED
};

/// Class /Script/Indiana.TalkManager
/// Size: 0x1ED8 (7896 bytes) (0x000030 - 0x001ED8) align 8 MaxSize: 0x1ED8
class UTalkManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0xA0];                                      // 0x0030   (0x00A0)  MISSED
	FWwiseVOEvent                                      SourceChatterWiseEvents[240];                               // 0x00D0   (0x1E00)  
	class UObjectLibrary*                              AudioEventObjectLibrary;                                    // 0x1ED0   (0x0008)  
};

/// Class /Script/Indiana.TargetableComponent
/// Size: 0x0100 (256 bytes) (0x0000E0 - 0x000100) align 8 MaxSize: 0x0100
class UTargetableComponent : public UActorComponent
{ 
public:
	float                                              OuterBoundingBoxWidthMultiplier;                            // 0x00E0   (0x0004)  
	float                                              OuterBoundingBoxHeightMultiplier;                           // 0x00E4   (0x0004)  
	float                                              InnerBoundingBoxWidthMultiplier;                            // 0x00E8   (0x0004)  
	float                                              InnerBoundingBoxHeightMultiplier;                           // 0x00EC   (0x0004)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x00F0   (0x0010)  MISSED


	/// Functions
	// Function /Script/Indiana.TargetableComponent.OnStateOfBeingChanged
	// void OnStateOfBeingChanged(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                // [0x18d5450] Final|Native|Private 
	// Function /Script/Indiana.TargetableComponent.OnActionToggled
	// void OnActionToggled(ETogglableAction ToggleActionType, bool bIsToggled);                                                // [0x18d4940] Final|Native|Private 
};

/// Class /Script/Indiana.TargetInfoComponent
/// Size: 0x01F8 (504 bytes) (0x0000E0 - 0x0001F8) align 8 MaxSize: 0x01F8
class UTargetInfoComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x28];                                      // 0x00E0   (0x0028)  MISSED
	TWeakObjectPtr<class AActor*>                      PrimaryTarget;                                              // 0x0108   (0x0008)  
	TWeakObjectPtr<class AActor*>                      QueuedTarget;                                               // 0x0110   (0x0008)  
	TWeakObjectPtr<class AActor*>                      OverrideTarget;                                             // 0x0118   (0x0008)  
	unsigned char                                      UnknownData01_7[0xD8];                                      // 0x0120   (0x00D8)  MISSED
};

/// Class /Script/Indiana.TeamComponent
/// Size: 0x01F8 (504 bytes) (0x0000E0 - 0x0001F8) align 8 MaxSize: 0x01F8
class UTeamComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x00E0   (0x0018)  MISSED
	class UClass*                                      TeamData;                                                   // 0x00F8   (0x0008)  
	unsigned char                                      UnknownData01_7[0xF8];                                      // 0x0100   (0x00F8)  MISSED


	/// Functions
	// Function /Script/Indiana.TeamComponent.SetRelationshipToPlayer
	// void SetRelationshipToPlayer(TEnumAsByte<ETeamAttitude> InRelationship, EChangeRelationshipSource InSource, ECrimeType InCrimeType); // [0x18d5c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TeamComponent.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& DamageInfo);                                                                         // [0x18d55c0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TeamComponent.OnDetectedPlayerCrime
	// void OnDetectedPlayerCrime(ECrimeType InCrimeType, bool bPlayerDisguised, EInterrogationResult InInterrogationResult);   // [0x18d4d40] Final|Native|Protected 
	// Function /Script/Indiana.TeamComponent.OnDeath
	// void OnDeath(FCauseDamageInfo& DamageInfo);                                                                              // [0x18d4ca0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TeamComponent.GetRelationshipWithTeam
	// TEnumAsByte<ETeamAttitude> GetRelationshipWithTeam(class UClass* InTeamData);                                            // [0x18d45d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TeamComponent.GetRelationshipWithPlayer
	// TEnumAsByte<ETeamAttitude> GetRelationshipWithPlayer();                                                                  // [0x18d45a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TeamComponent.GetRelationship
	// TEnumAsByte<ETeamAttitude> GetRelationship(class AActor* InActor);                                                       // [0x18d4500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TeamComponent.ClearRelationshipToPlayer
	// void ClearRelationshipToPlayer(EChangeRelationshipSource InSource);                                                      // [0x18d4240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TeamComponent.BPSetRelationshipToPlayer
	// void BPSetRelationshipToPlayer(class AIndianaAiCharacter* Character, TEnumAsByte<ETeamAttitude> Relationship);           // [0x18d4180] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.TeamComponent.BPClearRelationshipToPlayer
	// void BPClearRelationshipToPlayer(class AIndianaAiCharacter* Character);                                                  // [0x18d3ee0] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.TeamRelationship
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 MaxSize: 0x0002
struct FTeamRelationship
{ 
	unsigned char                                      UnknownData00_2[0x2];                                       // 0x0000   (0x0002)  MISSED
};

/// Class /Script/Indiana.TeamData
/// Size: 0x0238 (568 bytes) (0x000080 - 0x000238) align 8 MaxSize: 0x0238
class UTeamData : public UBaseTeamData
{ 
public:
	class UClass*                                      Faction;                                                    // 0x0080   (0x0008)  
	TEnumAsByte<ETeamAttitude>                         DefaultRelationship;                                        // 0x0088   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0089   (0x0007)  MISSED
	SDK_UNDEFINED(80,671) /* TSet<UClass*> */          __um(HostileTeams);                                         // 0x0090   (0x0050)  
	SDK_UNDEFINED(80,672) /* TSet<UClass*> */          __um(NeutralTeams);                                         // 0x00E0   (0x0050)  
	SDK_UNDEFINED(80,673) /* TSet<UClass*> */          __um(FriendlyTeams);                                        // 0x0130   (0x0050)  
	TMap<class UClass*, FTeamRelationship>             TeamRelationships;                                          // 0x0180   (0x0050)  
	unsigned char                                      UnknownData01_7[0x68];                                      // 0x01D0   (0x0068)  MISSED
};

/// Class /Script/Indiana.TeamManager
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align 8 MaxSize: 0x0080
class UTeamManager : public UObject
{ 
public:
	TMap<class UClass*, class UTeamData*>              TeamMap;                                                    // 0x0030   (0x0050)  


	/// Functions
	// Function /Script/Indiana.TeamManager.BPSetRelationship
	// void BPSetRelationship(class UClass* SourceTeamData, class UClass* OtherTeamData, TEnumAsByte<ETeamAttitude> Relationship, bool bMutual); // [0x18d4030] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.TeamManager.BPGetRelationship
	// TEnumAsByte<ETeamAttitude> BPGetRelationship(class UClass* SourceTeamData, class UClass* OtherTeamData);                 // [0x18d3f60] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TelemetryComponent
/// Size: 0x0118 (280 bytes) (0x0000E0 - 0x000118) align 8 MaxSize: 0x0118
class UTelemetryComponent : public UActorComponent
{ 
public:
	float                                              MinMoveTelemetry;                                           // 0x00E0   (0x0004)  
	bool                                               bEnableTelemetryTick;                                       // 0x00E4   (0x0001)  
	unsigned char                                      UnknownData00_7[0x33];                                      // 0x00E5   (0x0033)  MISSED


	/// Functions
	// Function /Script/Indiana.TelemetryComponent.OnVendorTransactionComplete
	// void OnVendorTransactionComplete(int32_t BuyingBalance, int32_t SellingBalance, int32_t RepairingBalance, FItemStackSplit& ItemStackSplit); // [0x18d5700] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TelemetryComponent.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x18d5660] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TelemetryComponent.OnTacticalTimeDialationStarted
	// void OnTacticalTimeDialationStarted();                                                                                   // [0x18d55a0] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnTacticalTimeDialationEnded
	// void OnTacticalTimeDialationEnded(float Duration);                                                                       // [0x18d5520] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnStartGameSession
	// void OnStartGameSession(FGuid& Guid);                                                                                    // [0x18d5320] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.TelemetryComponent.OnPlayerZoneChange
	// void OnPlayerZoneChange(FVector& Location, FString NewMapName, FString OldMapName);                                      // [0x18d51c0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.TelemetryComponent.OnPlayerMove
	// void OnPlayerMove(FVector& Location, FString MapName);                                                                   // [0x18d50c0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.TelemetryComponent.OnMedKitUsed
	// void OnMedKitUsed(int32_t ConsumablesUsed);                                                                              // [0x18d4f60] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnLevelChanged
	// void OnLevelChanged(int32_t Level);                                                                                      // [0x18d4ed0] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnEndGameSession
	// void OnEndGameSession(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                        // [0x18d4e50] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bInCombat, bool bRestoring);                                                              // [0x18d4b30] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnCharacterKilled
	// void OnCharacterKilled(FCauseDamageInfo& CauseDamageInfo);                                                               // [0x18d4a90] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.TelemetryManager
/// Size: 0x0070 (112 bytes) (0x000030 - 0x000070) align 8 MaxSize: 0x0070
class UTelemetryManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0030   (0x0040)  MISSED


	/// Functions
	// Function /Script/Indiana.TelemetryManager.SendDataKeys
	// void SendDataKeys();                                                                                                     // [0xbb4890] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.TeleportBehaviorStateInfo
/// Size: 0x0130 (304 bytes) (0x000120 - 0x000130) align 8 MaxSize: 0x0130
class UTeleportBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	class UEQSRequest_IndianaBase*                     EQSRequest;                                                 // 0x0120   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0128   (0x0008)  MISSED
};

/// Class /Script/Indiana.TeleportRequestData
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align 8 MaxSize: 0x0078
class UTeleportRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
	class UEQSRequest_IndianaBase*                     EQSRequest;                                                 // 0x0068   (0x0008)  
	float                                              TeleportDurationMin;                                        // 0x0070   (0x0004)  
	float                                              TeleportDurationMax;                                        // 0x0074   (0x0004)  
};

/// Class /Script/Indiana.TemporaryActor
/// Size: 0x02B8 (696 bytes) (0x0002B8 - 0x0002B8) align 8 MaxSize: 0x02B8
class ATemporaryActor : public AActor
{ 
public:
};

/// Class /Script/Indiana.TestAudioDataTypeReference
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align 8 MaxSize: 0x0050
class UTestAudioDataTypeReference : public UGameDataReference
{ 
public:


	/// Functions
	// Function /Script/Indiana.TestAudioDataTypeReference.GetTestAudioState
	// FString GetTestAudioState();                                                                                             // [0x18d47f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TestAudioDataTypeReference.GetTestAudioEvent
	// FString GetTestAudioEvent();                                                                                             // [0x18d4770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TestAudioDataTypeReference.GetTestAudioEnvironment
	// FString GetTestAudioEnvironment();                                                                                       // [0x18d46f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TestAudioDataTypeReference.GetTestAudioBank
	// FString GetTestAudioBank();                                                                                              // [0x18d4670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.TestAudioComponent
/// Size: 0x00E0 (224 bytes) (0x0000E0 - 0x0000E0) align 8 MaxSize: 0x00E0
class UTestAudioComponent : public UActorComponent
{ 
public:
};

/// Class /Script/Indiana.TetherBehaviorStateInfo
/// Size: 0x0178 (376 bytes) (0x000178 - 0x000178) align 8 MaxSize: 0x0178
class UTetherBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
};

/// Class /Script/Indiana.TetherRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UTetherRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.TextBlockBase
/// Size: 0x0418 (1048 bytes) (0x000140 - 0x000418) align 8 MaxSize: 0x0418
class UTextBlockBase : public UTextLayoutWidget
{ 
public:
	FLocString                                         TextReference;                                              // 0x0140   (0x0008)  
	FText                                              Text;                                                       // 0x0148   (0x0018)  
	float                                              MinDesiredWidth;                                            // 0x0160   (0x0004)  
	bool                                               bConvertToUpper;                                            // 0x0164   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0165   (0x0003)  MISSED
	int32_t                                            MaxFontScaling;                                             // 0x0168   (0x0004)  
	bool                                               bWrapWithInvalidationPanel;                                 // 0x016C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x016D   (0x0003)  MISSED
	FIndianaTextBlockStyle                             WidgetStyle;                                                // 0x0170   (0x0288)  
	bool                                               bUseShadowOffset;                                           // 0x03F8   (0x0001)  
	bool                                               bUseOutline;                                                // 0x03F9   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x03FA   (0x0002)  MISSED
	int32_t                                            InitialFontSize;                                            // 0x03FC   (0x0004)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0400   (0x0018)  MISSED


	/// Functions
	// Function /Script/Indiana.TextBlockBase.UseTextStyleShadowOffset
	// void UseTextStyleShadowOffset(bool bShouldUse);                                                                          // [0x18d6060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.UseTextStyleOutline
	// void UseTextStyleOutline(bool bShouldUse);                                                                               // [0x18d5fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetTextByLocString
	// void SetTextByLocString(FLocString& LocString);                                                                          // [0x18d5f30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetText
	// void SetText(FString inString);                                                                                          // [0x18d5e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetShadowOffset
	// void SetShadowOffset(FVector2D InShadowOffset);                                                                          // [0x18d5e00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetShadowColorAndOpacity
	// void SetShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);                                                     // [0x18d5d70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetOutline
	// void SetOutline(FFontOutlineSettings OutlineSettings);                                                                   // [0x18d5bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetOpacity
	// void SetOpacity(float InOpacity);                                                                                        // [0x18d5b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetFont
	// void SetFont(FSlateFontInfo InFontInfo);                                                                                 // [0x18d5a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetColorAndOpacity
	// void SetColorAndOpacity(FSlateColor InColorAndOpacity);                                                                  // [0x18d5900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.IsEmpty
	// bool IsEmpty();                                                                                                          // [0x18d4910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TextBlockBase.GetText
	// FText GetText();                                                                                                         // [0x18d4870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TextBlockBase.GetFont
	// FSlateFontInfo GetFont();                                                                                                // [0x18d4470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TextBlockBase.GetColorAndOpacity
	// FSlateColor GetColorAndOpacity();                                                                                        // [0x18d43f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaTextBlockWidgetStyle
/// Size: 0x02B0 (688 bytes) (0x000038 - 0x0002B0) align 8 MaxSize: 0x02B0
class UIndianaTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
{ 
public:
	FTextBlockStyle                                    TextBlockStyle;                                             // 0x0038   (0x0278)  
};

/// Class /Script/Indiana.TextEntryWidget
/// Size: 0x0380 (896 bytes) (0x000300 - 0x000380) align 8 MaxSize: 0x0380
class UTextEntryWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x48];                                      // 0x0300   (0x0048)  MISSED
	class UEditableText*                               EditableTextField;                                          // 0x0348   (0x0008)  
	class UTextBlockBase*                              CapacityTextBlock;                                          // 0x0350   (0x0008)  
	class UTextBlockBase*                              BadNameWarning;                                             // 0x0358   (0x0008)  
	int32_t                                            CharacterMax;                                               // 0x0360   (0x0004)  
	int32_t                                            CharacterMin;                                               // 0x0364   (0x0004)  
	FLocString                                         HintText;                                                   // 0x0368   (0x0008)  
	EIndianaUIColorType                                HintTextColor;                                              // 0x0370   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x0371   (0x000F)  MISSED


	/// Functions
	// Function /Script/Indiana.TextEntryWidget.OnTextfieldCommitted
	// void OnTextfieldCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitType);                                             // [0x18d9e90] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TextEntryWidget.OnTextfieldChanged
	// void OnTextfieldChanged(FText& Text);                                                                                    // [0x18d9dc0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.TextSectionWidget
/// Size: 0x02A0 (672 bytes) (0x000288 - 0x0002A0) align 8 MaxSize: 0x02A0
class UTextSectionWidget : public URadialSectionWidget
{ 
public:
	class UPanelWidget*                                Panel;                                                      // 0x0288   (0x0008)  
	class UTextBlockBase*                              TextBlock;                                                  // 0x0290   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0298   (0x0008)  MISSED
};

/// Class /Script/Indiana.ThreatStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UThreatStatusEffect : public UStatusEffect
{ 
public:
	float                                              ThreatScalar;                                               // 0x0188   (0x0004)  
	bool                                               bClearSwitchTargetCooldown;                                 // 0x018C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x018D   (0x0003)  MISSED
};

/// Class /Script/Indiana.TimeDilationComponent
/// Size: 0x0188 (392 bytes) (0x0000E0 - 0x000188) align 8 MaxSize: 0x0188
class UTimeDilationComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,674) /* FMulticastInlineDelegate */ __um(OnTimeDilationUpdated);                              // 0x00E0   (0x0010)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x00F0   (0x0018)  MISSED
	class UMaterialInterface*                          Material;                                                   // 0x0108   (0x0008)  
	float                                              ScreenFxBlendTime;                                          // 0x0110   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	TMap<FName, FRuntimeFloatCurve>                    Params;                                                     // 0x0118   (0x0050)  
	unsigned char                                      UnknownData02_7[0x20];                                      // 0x0168   (0x0020)  MISSED


	/// Functions
	// Function /Script/Indiana.TimeDilationComponent.TimeDilatePlayer
	// void TimeDilatePlayer(float Dilation);                                                                                   // [0x18da2a0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.TimeDilationComponent.SlomoWorld
	// void SlomoWorld(float Dilation);                                                                                         // [0x18da220] Final|Exec|Native|Protected 
	// Function /Script/Indiana.TimeDilationComponent.OnTimeDilationStart
	// void OnTimeDilationStart();                                                                                              // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.TimeDilationComponent.OnTimeDilationEnd
	// void OnTimeDilationEnd();                                                                                                // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.TinkeringWidget
/// Size: 0x03A0 (928 bytes) (0x000308 - 0x0003A0) align 8 MaxSize: 0x03A0
class UTinkeringWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0308   (0x0020)  MISSED
	class UInputLabelWidget*                           ConfirmLabel;                                               // 0x0328   (0x0008)  
	class UInputLabelWidget*                           BackLabel;                                                  // 0x0330   (0x0008)  
	class UVerticalBox*                                ContentVerticalBox;                                         // 0x0338   (0x0008)  
	class UHorizontalBox*                              KeyboardInputBox;                                           // 0x0340   (0x0008)  
	class UHorizontalBox*                              GamepadInputBox;                                            // 0x0348   (0x0008)  
	class USizeBox*                                    BackingBotSizeBox;                                          // 0x0350   (0x0008)  
	class UTextBlockBase*                              ItemNameTextBlock;                                          // 0x0358   (0x0008)  
	class UTextBlockBase*                              DescTextBlock;                                              // 0x0360   (0x0008)  
	class UTextBlockBase*                              BaseValueTextBlock;                                         // 0x0368   (0x0008)  
	class UTextBlockBase*                              UpgradeTextBlock;                                           // 0x0370   (0x0008)  
	class UButtonBase*                                 ConfirmButton;                                              // 0x0378   (0x0008)  
	class UButtonBase*                                 CancelButton;                                               // 0x0380   (0x0008)  
	float                                              ContentVerticalPadding;                                     // 0x0388   (0x0004)  
	int32_t                                            BackingMaterialSize;                                        // 0x038C   (0x0004)  
	int32_t                                            BackingTopSize;                                             // 0x0390   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0394   (0x0004)  MISSED
	class UDegradableItem*                             CachedItem;                                                 // 0x0398   (0x0008)  


	/// Functions
	// Function /Script/Indiana.TinkeringWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.ToggleActionStatusEffect
/// Size: 0x0198 (408 bytes) (0x000188 - 0x000198) align 8 MaxSize: 0x0198
class UToggleActionStatusEffect : public UStatusEffect
{ 
public:
	ETogglableAction                                   Action;                                                     // 0x0188   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x0189   (0x000F)  MISSED
};

/// Class /Script/Indiana.ToolTipContainerWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UToolTipContainerWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0300   (0x0018)  MISSED
	FMargin                                            AdjacencyPadding;                                           // 0x0318   (0x0010)  
	class UHorizontalBox*                              ContentHorizontalBox;                                       // 0x0328   (0x0008)  
};

/// Class /Script/Indiana.OverrideRotationSpeedAnimMetaData
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
class UOverrideRotationSpeedAnimMetaData : public UAnimMetaData
{ 
public:
	float                                              MaxRotationSpeed;                                           // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Indiana.TracerSoundData
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UTracerSoundData : public UDataAsset
{ 
public:
	class UAkAudioEvent*                               ProjectileSound;                                            // 0x0038   (0x0008)  
	int32_t                                            TooCloseFadeInPercent;                                      // 0x0040   (0x0004)  
	bool                                               bStopOnImpact;                                              // 0x0044   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              ImpactFadeDuration;                                         // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Indiana.Trap
/// Size: 0x05F8 (1528 bytes) (0x0002B8 - 0x0005F8) align 8 MaxSize: 0x05F8
class ATrap : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x02B8   (0x0010)  MISSED
	SDK_UNDEFINED(16,675) /* FMulticastInlineDelegate */ __um(OnTrapStateChange);                                  // 0x02C8   (0x0010)  
	SDK_UNDEFINED(16,676) /* FMulticastInlineDelegate */ __um(OnTrapArmed);                                        // 0x02D8   (0x0010)  
	SDK_UNDEFINED(16,677) /* FMulticastInlineDelegate */ __um(OnTrapDisarmed);                                     // 0x02E8   (0x0010)  
	SDK_UNDEFINED(16,678) /* FMulticastInlineDelegate */ __um(OnTrapDeactivated);                                  // 0x02F8   (0x0010)  
	SDK_UNDEFINED(16,679) /* FMulticastInlineDelegate */ __um(OnTrapArmAttemptedFailed);                           // 0x0308   (0x0010)  
	SDK_UNDEFINED(16,680) /* FMulticastInlineDelegate */ __um(OnTrapDisarmAttemptedFailed);                        // 0x0318   (0x0010)  
	SDK_UNDEFINED(16,681) /* FMulticastInlineDelegate */ __um(OnTrapArmStart);                                     // 0x0328   (0x0010)  
	SDK_UNDEFINED(16,682) /* FMulticastInlineDelegate */ __um(OnTrapDisarmStart);                                  // 0x0338   (0x0010)  
	SDK_UNDEFINED(16,683) /* FMulticastInlineDelegate */ __um(OnTrapArmInterrupted);                               // 0x0348   (0x0010)  
	SDK_UNDEFINED(16,684) /* FMulticastInlineDelegate */ __um(OnTrapDisarmInterrupted);                            // 0x0358   (0x0010)  
	SDK_UNDEFINED(16,685) /* FMulticastInlineDelegate */ __um(OnTrapActivated);                                    // 0x0368   (0x0010)  
	SDK_UNDEFINED(16,686) /* FMulticastInlineDelegate */ __um(OnTrapActivationCancelled);                          // 0x0378   (0x0010)  
	SDK_UNDEFINED(16,687) /* FMulticastInlineDelegate */ __um(OnTrapPreDetonate);                                  // 0x0388   (0x0010)  
	SDK_UNDEFINED(16,688) /* FMulticastInlineDelegate */ __um(OnTrapDetonated);                                    // 0x0398   (0x0010)  
	SDK_UNDEFINED(16,689) /* FMulticastInlineDelegate */ __um(OnTrapAttacked);                                     // 0x03A8   (0x0010)  
	SDK_UNDEFINED(16,690) /* FMulticastInlineDelegate */ __um(OnTrapRearming);                                     // 0x03B8   (0x0010)  
	SDK_UNDEFINED(16,691) /* FMulticastInlineDelegate */ __um(OnTrapRearmed);                                      // 0x03C8   (0x0010)  
	ETrapState                                         InitialState;                                               // 0x03D8   (0x0001)  
	bool                                               bCanArm;                                                    // 0x03D9   (0x0001)  
	bool                                               bCanDisarm;                                                 // 0x03DA   (0x0001)  
	ETrapDifficulty                                    TrapDifficulty;                                             // 0x03DB   (0x0001)  
	float                                              PreDetonationSeconds;                                       // 0x03DC   (0x0004)  
	float                                              DetonationDelaySeconds;                                     // 0x03E0   (0x0004)  
	float                                              DetonationsPerSecond;                                       // 0x03E4   (0x0004)  
	float                                              RearmDelaySeconds;                                          // 0x03E8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x03EC   (0x0004)  MISSED
	class UClass*                                      StatusEffectType;                                           // 0x03F0   (0x0008)  
	FDamageDescription                                 DamageDescription;                                          // 0x03F8   (0x0078)  
	FDamageLevelScaler                                 DamageLevelScaler;                                          // 0x0470   (0x0090)  
	class UImpactDataSet*                              ImpactDataSet;                                              // 0x0500   (0x0008)  
	class UParticleSystem*                             AttackFxShotOrigin;                                         // 0x0508   (0x0008)  
	class UParticleSystem*                             AttackFxShotEnd;                                            // 0x0510   (0x0008)  
	class UParticleSystem*                             AttackFxBeam;                                               // 0x0518   (0x0008)  
	FName                                              AttackFxBeamEndParam;                                       // 0x0520   (0x0008)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0528   (0x0010)  MISSED
	class USceneComponent*                             SceneComponent;                                             // 0x0538   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0540   (0x0008)  
	class UAkComponent*                                AkComponent;                                                // 0x0548   (0x0008)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0550   (0x0010)  MISSED
	class UShapeComponent*                             ActivationShapeComponent;                                   // 0x0560   (0x0008)  
	class UShapeComponent*                             ActivatorTrackingShapeComponent;                            // 0x0568   (0x0008)  
	unsigned char                                      UnknownData04_7[0x88];                                      // 0x0570   (0x0088)  MISSED


	/// Functions
	// Function /Script/Indiana.Trap.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18d9d30] Final|Native|Protected 
	// Function /Script/Indiana.Trap.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x18d9c60] Final|Native|Protected 
	// Function /Script/Indiana.Trap.OnActivatorTrackingShapeEndOverlap
	// void OnActivatorTrackingShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18d99a0] Final|Native|Protected 
	// Function /Script/Indiana.Trap.OnActivatorTrackingShapeBeginOverlap
	// void OnActivatorTrackingShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18d9780] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Trap.OnActivationShapeEndOverlap
	// void OnActivationShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18d9620] Final|Native|Protected 
	// Function /Script/Indiana.Trap.OnActivationShapeBeginOverlap
	// void OnActivationShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18d9400] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Trap.IsRearming
	// bool IsRearming();                                                                                                       // [0x18d93d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.IsDetonationPending
	// bool IsDetonationPending();                                                                                              // [0x18d93a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.GetExactTrapDifficulty
	// char GetExactTrapDifficulty();                                                                                           // [0x18d92f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.GetCurrentState
	// ETrapState GetCurrentState();                                                                                            // [0x18d92d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.GetActivatorTrackingShapeComponent
	// class UShapeComponent* GetActivatorTrackingShapeComponent();                                                             // [0x18d9280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.GetActivationShapeComponent
	// class UShapeComponent* GetActivationShapeComponent();                                                                    // [0x18d9250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.DisarmTrap
	// void DisarmTrap(class AIndianaCharacter* Initiator, bool bFireTrapDisarmedEvent);                                        // [0x18d9180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Trap.DeactivateTrap
	// void DeactivateTrap(class AIndianaCharacter* Initiator, bool bFireTrapDeactivatedEvent);                                 // [0x18d90b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Trap.ArmTrap
	// void ArmTrap(class AIndianaCharacter* Initiator, bool bFireTrapArmedEvent);                                              // [0x18d8fc0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TrapAudioComponent
/// Size: 0x01A0 (416 bytes) (0x000150 - 0x0001A0) align 8 MaxSize: 0x01A0
class UTrapAudioComponent : public UInteractableAudioComponent
{ 
public:
	TMap<ETrapEventType, class UAkPlaySoundEventEffect*> AudioEvents;                                              // 0x0150   (0x0050)  


	/// Functions
	// Function /Script/Indiana.TrapAudioComponent.Stop
	// void Stop(ETrapEventType Type);                                                                                          // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TrapAudioComponent.Play
	// void Play(ETrapEventType Type);                                                                                          // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TrapEffectSource
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
class UTrapEffectSource : public UInterface
{ 
public:


	/// Functions
	// Function /Script/Indiana.TrapEffectSource.ReceiveTriggerUntripped
	// void ReceiveTriggerUntripped();                                                                                          // [0x18ded50] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceiveTriggerTripped
	// void ReceiveTriggerTripped();                                                                                            // [0x18ded30] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceiveTriggerDisarmed
	// void ReceiveTriggerDisarmed();                                                                                           // [0x18ded10] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceiveTriggerArmed
	// void ReceiveTriggerArmed();                                                                                              // [0x18decf0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceivePreDeploy
	// void ReceivePreDeploy();                                                                                                 // [0x18decd0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceiveDeployOrder
	// void ReceiveDeployOrder();                                                                                               // [0x18decb0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.GetCurrentActivators
	// void GetCurrentActivators(TArray<AIndianaCharacter*>& OutActivators);                                                    // [0x18de1f0] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/Indiana.TrapTerminal
/// Size: 0x0450 (1104 bytes) (0x000430 - 0x000450) align 8 MaxSize: 0x0450
class ATrapTerminal : public AComputerTerminal
{ 
public:
	TArray<class ATrapTrigger*>                        ConnectedTrapTriggers;                                      // 0x0430   (0x0010)  
	TArray<class AHazard*>                             ConnectedHazards;                                           // 0x0440   (0x0010)  
};

/// Class /Script/Indiana.TrapTrigger
/// Size: 0x03D8 (984 bytes) (0x0002B8 - 0x0003D8) align 8 MaxSize: 0x03D8
class ATrapTrigger : public AActor
{ 
public:
	ETrapTriggerState                                  InitialState;                                               // 0x02B8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02B9   (0x0007)  MISSED
	SDK_UNDEFINED(16,692) /* FMulticastInlineDelegate */ __um(OnTrapTriggerStateChange);                           // 0x02C0   (0x0010)  
	SDK_UNDEFINED(16,693) /* FMulticastInlineDelegate */ __um(OnTrapTriggerArmed);                                 // 0x02D0   (0x0010)  
	SDK_UNDEFINED(16,694) /* FMulticastInlineDelegate */ __um(OnTrapTriggerDisarmed);                              // 0x02E0   (0x0010)  
	SDK_UNDEFINED(16,695) /* FMulticastInlineDelegate */ __um(OnTrapTriggerTripped);                               // 0x02F0   (0x0010)  
	SDK_UNDEFINED(16,696) /* FMulticastInlineDelegate */ __um(OnTrapTriggerUntripped);                             // 0x0300   (0x0010)  
	SDK_UNDEFINED(16,697) /* FMulticastInlineDelegate */ __um(OnTrapTriggerPreDeploy);                             // 0x0310   (0x0010)  
	SDK_UNDEFINED(16,698) /* FMulticastInlineDelegate */ __um(OnTrapTriggerDeployed);                              // 0x0320   (0x0010)  
	SDK_UNDEFINED(16,699) /* FMulticastInlineDelegate */ __um(OnTrapTriggerRearming);                              // 0x0330   (0x0010)  
	SDK_UNDEFINED(16,700) /* FMulticastInlineDelegate */ __um(OnTrapTriggerRearmed);                               // 0x0340   (0x0010)  
	float                                              PreDeploymentSeconds;                                       // 0x0350   (0x0004)  
	float                                              DeploymentDelaySeconds;                                     // 0x0354   (0x0004)  
	float                                              DeploymentsPerSecond;                                       // 0x0358   (0x0004)  
	float                                              RearmDelaySeconds;                                          // 0x035C   (0x0004)  
	class UClass*                                      TeamClass;                                                  // 0x0360   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x0368   (0x0008)  
	class UObsidianIDComponent*                        IDComponent;                                                // 0x0370   (0x0008)  
	SDK_UNDEFINED(16,701) /* TArray<TWeakObjectPtr<AActor*>> */ __um(EffectSources);                               // 0x0378   (0x0010)  
	class UShapeComponent*                             ActivationShapeComponent;                                   // 0x0388   (0x0008)  
	class UShapeComponent*                             ActivatorTrackingShapeComponent;                            // 0x0390   (0x0008)  
	unsigned char                                      UnknownData01_6[0x29];                                      // 0x0398   (0x0029)  MISSED
	bool                                               bBlocksNavMesh;                                             // 0x03C1   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x03C2   (0x0006)  MISSED
	class UClass*                                      ArmedNavAreaClass;                                          // 0x03C8   (0x0008)  
	class UIndianaNavModifierComponent*                NavModifierComponent;                                       // 0x03D0   (0x0008)  


	/// Functions
	// Function /Script/Indiana.TrapTrigger.OnActivatorTrackingShapeEndOverlap
	// void OnActivatorTrackingShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18de640] Final|Native|Protected 
	// Function /Script/Indiana.TrapTrigger.OnActivatorTrackingShapeBeginOverlap
	// void OnActivatorTrackingShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18d9780] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TrapTrigger.OnActivationShapeEndOverlap
	// void OnActivationShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18d9620] Final|Native|Protected 
	// Function /Script/Indiana.TrapTrigger.OnActivationShapeBeginOverlap
	// void OnActivationShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18de420] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TrapTrigger.IsRearming
	// bool IsRearming();                                                                                                       // [0x18de3f0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TrapTrigger.IsDeploymentPending
	// bool IsDeploymentPending();                                                                                              // [0x18de3c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TrapTrigger.GetCurrentState
	// ETrapTriggerState GetCurrentState();                                                                                     // [0x18de2a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TrapTrigger.DisarmTrapTrigger
	// void DisarmTrapTrigger(bool bAlertEffectSources);                                                                        // [0x18de0e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TrapTrigger.ChangeState
	// void ChangeState(ETrapTriggerState State);                                                                               // [0x18de060] Final|Native|Private|BlueprintCallable 
	// Function /Script/Indiana.TrapTrigger.ArmTrapTrigger
	// void ArmTrapTrigger();                                                                                                   // [0x18de040] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TravelDestinationData
/// Size: 0x00D8 (216 bytes) (0x000038 - 0x0000D8) align 8 MaxSize: 0x00D8
class UTravelDestinationData : public UDataAsset
{ 
public:
	TWeakObjectPtr<class UWorld*>                      DestinationMap;                                             // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0040   (0x0020)  MISSED
	ERegionType                                        OwningRegion;                                               // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0061   (0x0007)  MISSED
	class UTravelRegionData*                           ParentRegion;                                               // 0x0068   (0x0008)  
	TWeakObjectPtr<class UTexture2D*>                  MapPreview;                                                 // 0x0070   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0078   (0x0020)  MISSED
	TArray<class UTravelRegionData*>                   RegionsToMarkAware;                                         // 0x0098   (0x0010)  
	FLocString                                         Name;                                                       // 0x00A8   (0x0008)  
	FLocString                                         Description;                                                // 0x00B0   (0x0008)  
	uint32_t                                           InitialDiscoveryFlags;                                      // 0x00B8   (0x0004)  
	EPointOfInterestLocationType                       PointOfInterestType;                                        // 0x00BC   (0x0001)  
	EPointOfInterestXPType                             PointOfInterestXP;                                          // 0x00BD   (0x0001)  
	bool                                               bFakeShipLocation;                                          // 0x00BE   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x00BF   (0x0001)  MISSED
	float                                              AvailablityDurationDays;                                    // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	SDK_UNDEFINED(16,702) /* TArray<TWeakObjectPtr<UAssetList*>> */ __um(DestinationAssets);                       // 0x00C8   (0x0010)  


	/// Functions
	// Function /Script/Indiana.TravelDestinationData.GetDebugString
	// FString GetDebugString();                                                                                                // [0x18de2c0] Final|Native|Public|Const 
};

/// Class /Script/Indiana.ShipDestinationData
/// Size: 0x00E0 (224 bytes) (0x0000D8 - 0x0000E0) align 8 MaxSize: 0x00E0
class UShipDestinationData : public UTravelDestinationData
{ 
public:
	class UMapInformation*                             RegionMapInformation;                                       // 0x00D8   (0x0008)  
};

/// Struct /Script/Indiana.TravelMapPosition
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 8 MaxSize: 0x00A0
struct FTravelMapPosition
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	TArray<class UTravelDestinationData*>              TravelDestinations;                                         // 0x0008   (0x0010)  
	int32_t                                            PrimaryDestinationIndex;                                    // 0x0018   (0x0004)  
	FVector2D                                          WorldCoordinate;                                            // 0x001C   (0x0008)  
	bool                                               bInvertVisibilityConditions;                                // 0x0024   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	FLogicalGroupedExpression                          VisibilityConditions;                                       // 0x0028   (0x0078)  
};

/// Struct /Script/Indiana.TravelShipMapPosition
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 MaxSize: 0x0080
struct FTravelShipMapPosition
{ 
	class UShipDestinationData*                        ShipDestination;                                            // 0x0000   (0x0008)  
	bool                                               bUseConditional;                                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	FLogicalExpression                                 Conditional;                                                // 0x0010   (0x0068)  
	FVector2D                                          WorldCoordinate;                                            // 0x0078   (0x0008)  
};

/// Struct /Script/Indiana.TravelShipData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FTravelShipData
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	class UTravelDestinationData*                      PlayerShipDestinationData;                                  // 0x0008   (0x0008)  
	TArray<FTravelShipMapPosition>                     ShipLocations;                                              // 0x0010   (0x0010)  
};

/// Class /Script/Indiana.TravelMapLayoutData
/// Size: 0x0098 (152 bytes) (0x000038 - 0x000098) align 8 MaxSize: 0x0098
class UTravelMapLayoutData : public UDataAsset
{ 
public:
	TWeakObjectPtr<class UWorld*>                      AssociatedPersistentMap;                                    // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0040   (0x0020)  MISSED
	bool                                               bLoadAllSublevels;                                          // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0061   (0x0007)  MISSED
	TArray<FTravelMapPosition>                         TravelMapPositions;                                         // 0x0068   (0x0010)  
	FTravelShipData                                    ShipTravelData;                                             // 0x0078   (0x0020)  
};

/// Class /Script/Indiana.TravelRegionData
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align 8 MaxSize: 0x0060
class UTravelRegionData : public UDataAsset
{ 
public:
	FLocString                                         Name;                                                       // 0x0038   (0x0008)  
	FLocString                                         Description;                                                // 0x0040   (0x0008)  
	TArray<class UClass*>                              AssociatedFactions;                                         // 0x0048   (0x0010)  
	float                                              GamepadMovementScalar;                                      // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Indiana.TravelTriggerComponent
/// Size: 0x0100 (256 bytes) (0x0000E0 - 0x000100) align 8 MaxSize: 0x0100
class UTravelTriggerComponent : public UActorComponent
{ 
public:
	class UTravelDestinationData*                      TravelDestinationData;                                      // 0x00E0   (0x0008)  
	bool                                               bHideTransition;                                            // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00E9   (0x0007)  MISSED
	SDK_UNDEFINED(16,703) /* FMulticastInlineDelegate */ __um(OnTravelInitiated);                                  // 0x00F0   (0x0010)  


	/// Functions
	// Function /Script/Indiana.TravelTriggerComponent.OnOverlapActor
	// void OnOverlapActor(class AActor* OverlappedActor, class AActor* OtherActor);                                            // [0x18de9b0] Final|Native|Public  
	// Function /Script/Indiana.TravelTriggerComponent.OnOpen
	// void OnOpen(class AActor* OpeningActor);                                                                                 // [0x18de920] Final|Native|Public  
	// Function /Script/Indiana.TravelTriggerComponent.OnInteract
	// void OnInteract(FInteractionDescription& Description);                                                                   // [0x18de850] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.TravelTriggerComponent.GetDebugString
	// FString GetDebugString();                                                                                                // [0x18de340] Final|Native|Public|Const 
	// Function /Script/Indiana.TravelTriggerComponent.GetAreaName
	// FString GetAreaName();                                                                                                   // [0x18de1b0] Final|Native|Public|Const 
	// Function /Script/Indiana.TravelTriggerComponent.GetAreaDescription
	// FString GetAreaDescription();                                                                                            // [0x18de170] Final|Native|Public|Const 
};

/// Class /Script/Indiana.TTDEnemyScanner
/// Size: 0x03C0 (960 bytes) (0x000300 - 0x0003C0) align 8 MaxSize: 0x03C0
class UTTDEnemyScanner : public UIndianaUserWidget
{ 
public:
	class UInvalidationBox*                            MainInvalidationBox;                                        // 0x0300   (0x0008)  
	class UOverlay*                                    ContentOverlay;                                             // 0x0308   (0x0008)  
	class UTextBlockBase*                              EnemyName;                                                  // 0x0310   (0x0008)  
	class UTextBlockBase*                              FactionLabel;                                               // 0x0318   (0x0008)  
	class UTextBlockBase*                              FactionName;                                                // 0x0320   (0x0008)  
	class UTextBlockBase*                              HealthTextBlock;                                            // 0x0328   (0x0008)  
	class UTextBlockBase*                              ArmorTextBlock;                                             // 0x0330   (0x0008)  
	class UTextBlockBase*                              AnalysisText;                                               // 0x0338   (0x0008)  
	class UTextBlockBase*                              FlavorText;                                                 // 0x0340   (0x0008)  
	class UTextBlockBase*                              AnalysisHeaderTextBlock;                                    // 0x0348   (0x0008)  
	class UTextBlockBase*                              StatusHeaderTextBlock;                                      // 0x0350   (0x0008)  
	class UImage*                                      FactionIcon;                                                // 0x0358   (0x0008)  
	class UEnemyDifficultyWidget*                      EnemyDifficulty;                                            // 0x0360   (0x0008)  
	class UTTDStatusEffectsWidget*                     StatusEffects;                                              // 0x0368   (0x0008)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0370   (0x0050)  MISSED


	/// Functions
	// Function /Script/Indiana.TTDEnemyScanner.StopFactionImageAnimation
	// void StopFactionImageAnimation();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TTDEnemyScanner.ScanEnded
	// void ScanEnded();                                                                                                        // [0x18ded90] Final|Native|Protected 
	// Function /Script/Indiana.TTDEnemyScanner.ScanCompleted
	// void ScanCompleted();                                                                                                    // [0x18ded70] Final|Native|Protected 
	// Function /Script/Indiana.TTDEnemyScanner.OnTTDScannerVisibilityChanged
	// void OnTTDScannerVisibilityChanged(bool bVisible);                                                                       // [0x18dec20] Final|Native|Protected 
	// Function /Script/Indiana.TTDEnemyScanner.OnMakeVisible
	// void OnMakeVisible();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TTDEnemyScanner.OnMakeInvisible
	// void OnMakeInvisible();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TTDEnemyScanner.OnMadeInvisible
	// void OnMadeInvisible();                                                                                                  // [0x18de900] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TTDEnemyScanner.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18de7c0] Final|Native|Protected 
	// Function /Script/Indiana.TTDEnemyScanner.OnFactionImageLoaded
	// void OnFactionImageLoaded();                                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TTDEnemyScanner.OnActiveScannerTargetChanged
	// void OnActiveScannerTargetChanged();                                                                                     // [0x18de7a0] Final|Native|Protected 
};

/// Class /Script/Indiana.TTDStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UTTDStatusEffect : public UStatusEffect
{ 
public:
	float                                              Adjustment;                                                 // 0x0188   (0x0004)  
	bool                                               bStartTTD;                                                  // 0x018C   (0x0001)  
	bool                                               bNoFastDraining;                                            // 0x018D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x018E   (0x0002)  MISSED
};

/// Class /Script/Indiana.TTDStatusEffectsWidget
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align 8 MaxSize: 0x0318
class UTTDStatusEffectsWidget : public UIndianaUserWidget
{ 
public:
	class UHorizontalBox*                              StatusEffectsHorizontalBox;                                 // 0x0300   (0x0008)  
	class UClass*                                      StatusEffectEntryClass;                                     // 0x0308   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0310   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.TTDStatusEffectsWidget.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);              // [0x18deb50] Final|Native|Protected 
	// Function /Script/Indiana.TTDStatusEffectsWidget.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                // [0x18dea80] Final|Native|Protected 
};

/// Struct /Script/Indiana.TutorialBaseEventData
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 MaxSize: 0x0078
struct FTutorialBaseEventData
{ 
	bool                                               bIsGamepadTutorial;                                         // 0x0000   (0x0001)  
	ETutorialEvent                                     MouseAndKeyboardTutorialEvent;                              // 0x0001   (0x0001)  
	ETutorialEvent                                     GamepadTutorialEvent;                                       // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x0003   (0x0005)  MISSED
	FLogicalExpression                                 Conditional;                                                // 0x0008   (0x0068)  
	ETutorialCategory                                  Category;                                                   // 0x0070   (0x0001)  
	bool                                               bNeverDisplayInJournal;                                     // 0x0071   (0x0001)  
	char                                               TutorialSortOrder;                                          // 0x0072   (0x0001)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x0073   (0x0005)  MISSED
};

/// Struct /Script/Indiana.TutorialPlatformStringContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FTutorialPlatformStringContainer
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	FLocString                                         Description;                                                // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.TutorialEventDataContainer
/// Size: 0x0100 (256 bytes) (0x000078 - 0x000100) align 8 MaxSize: 0x0100
struct FTutorialEventDataContainer : FTutorialBaseEventData
{ 
	FLocString                                         TutorialNameString;                                         // 0x0078   (0x0008)  
	FLocString                                         TutorialEventString;                                        // 0x0080   (0x0008)  
	TMap<EPlatformFamily, FTutorialPlatformStringContainer> PlatformOverrides;                                     // 0x0088   (0x0050)  
	bool                                               bDisplayInJournalByDefault;                                 // 0x00D8   (0x0001)  
	bool                                               bDisplayTitleInSideNotification;                            // 0x00D9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x00DA   (0x0006)  MISSED
	FString                                            ActionName;                                                 // 0x00E0   (0x0010)  
	TArray<FString>                                    ActionNameList;                                             // 0x00F0   (0x0010)  
};

/// Struct /Script/Indiana.TutorialFullScreenEventDataContainer
/// Size: 0x0250 (592 bytes) (0x000078 - 0x000250) align 8 MaxSize: 0x0250
struct FTutorialFullScreenEventDataContainer : FTutorialBaseEventData
{ 
	ETutorialDisplayType                               DisplayType;                                                // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0079   (0x0003)  MISSED
	FMargin                                            Padding;                                                    // 0x007C   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x008C   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x008D   (0x0001)  
	bool                                               bShowTutorialTag;                                           // 0x008E   (0x0001)  
	bool                                               bShowTutorialName;                                          // 0x008F   (0x0001)  
	bool                                               bDisplayInJournalByDefault;                                 // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	FLocString                                         PreFlavorString;                                            // 0x0094   (0x0008)  
	FLocString                                         TutorialNameString;                                         // 0x009C   (0x0008)  
	FLocString                                         TutorialBodyString;                                         // 0x00A4   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	TMap<EPlatformFamily, FTutorialPlatformStringContainer> PlatformOverrides;                                     // 0x00B0   (0x0050)  
	FLocString                                         SubHeaderString;                                            // 0x0100   (0x0008)  
	FLocString                                         SubDescriptionString;                                       // 0x0108   (0x0008)  
	TMap<EPlatformFamily, FTutorialPlatformStringContainer> SubPlatformOverrides;                                  // 0x0110   (0x0050)  
	FLocString                                         ColoredString;                                              // 0x0160   (0x0008)  
	FInputLabelDescription                             PrimaryDescription;                                         // 0x0168   (0x0038)  
	FInputLabelDescription                             SecondaryDescription;                                       // 0x01A0   (0x0038)  
	FInputLabelDescription                             BindingDescriptionOne;                                      // 0x01D8   (0x0038)  
	FInputLabelDescription                             BindingDescriptionTwo;                                      // 0x0210   (0x0038)  
	class UBrandDataAsset*                             BrandType;                                                  // 0x0248   (0x0008)  
};

/// Class /Script/Indiana.TutorialDataAsset
/// Size: 0x0278 (632 bytes) (0x000038 - 0x000278) align 8 MaxSize: 0x0278
class UTutorialDataAsset : public UDataAsset
{ 
public:
	TMap<ETutorialEvent, FTutorialEventDataContainer>  TutorialEventData;                                          // 0x0038   (0x0050)  
	TMap<ETutorialEvent, FTutorialFullScreenEventDataContainer> FullScreenTutorialEventData;                       // 0x0088   (0x0050)  
	FInputLabelDescription                             DefaultDescription;                                         // 0x00D8   (0x0038)  
	FInputLabelDescription                             FlawPrimaryDescription;                                     // 0x0110   (0x0038)  
	FInputLabelDescription                             FlawSecondaryDescription;                                   // 0x0148   (0x0038)  
	FInputLabelDescription                             PointOfNoReturnPrimaryDescription;                          // 0x0180   (0x0038)  
	FInputLabelDescription                             PointOfNoReturnSecondaryDescription;                        // 0x01B8   (0x0038)  
	FInputLabelDescription                             DLCInfoPopupPrimaryDescription;                             // 0x01F0   (0x0038)  
	TMap<ETutorialCategory, FLocString>                TutorialCategoryStrings;                                    // 0x0228   (0x0050)  
};

/// Class /Script/Indiana.TutorialList
/// Size: 0x0398 (920 bytes) (0x000358 - 0x000398) align 8 MaxSize: 0x0398
class UTutorialList : public UGenericCollapsableList
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0358   (0x0040)  MISSED


	/// Functions
	// Function /Script/Indiana.TutorialList.AddNewCompletedTutorial
	// void AddNewCompletedTutorial(ETutorialEvent TutorialEvent);                                                              // [0x18e1a00] Final|Native|Public  
};

/// Class /Script/Indiana.TutorialListContainer
/// Size: 0x0328 (808 bytes) (0x000310 - 0x000328) align 8 MaxSize: 0x0328
class UTutorialListContainer : public UGenericCollapsableListContainer
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0310   (0x0018)  MISSED
};

/// Class /Script/Indiana.TutorialManager
/// Size: 0x0280 (640 bytes) (0x000030 - 0x000280) align 8 MaxSize: 0x0280
class UTutorialManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0030   (0x0010)  MISSED
	SDK_UNDEFINED(80,704) /* TSet<ESkill> */           __um(DialogueSkills);                                       // 0x0040   (0x0050)  
	unsigned char                                      UnknownData01_6[0x170];                                     // 0x0090   (0x0170)  MISSED
	float                                              TutorialLogDuration;                                        // 0x0200   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0204   (0x0004)  MISSED
	TSoftObjectPtr<class UClass*>                      ShroudItem;                                                 // 0x0208   (0x0028)  
	TMap<FName, EControlDevice>                        DeviceSpecificActions;                                      // 0x0230   (0x0050)  


	/// Functions
	// Function /Script/Indiana.TutorialManager.ShowTutorialEventMessage
	// void ShowTutorialEventMessage(ETutorialEvent TutorialEvent, bool bShowOncePerSession, bool bInfiniteDuration);           // [0x18e2b20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.TutorialManager.PlayerTargetChange
	// void PlayerTargetChange(bool bAdded);                                                                                    // [0x18e2a00] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerTakeDamage
	// void PlayerTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                // [0x18e2960] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TutorialManager.PlayerSkillUpdated
	// void PlayerSkillUpdated(ESkill Skill, int32_t NewValue);                                                                 // [0x18e2890] Final|Native|Public  
	// Function /Script/Indiana.TutorialManager.PlayerSkillCheckSuccess
	// void PlayerSkillCheckSuccess(EXPGainReason Reason, int32_t XPEarned, ESkill SkillUsed);                                  // [0x18e2780] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerMedKitUsed
	// void PlayerMedKitUsed();                                                                                                 // [0xbb4890] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerLevelChanged
	// void PlayerLevelChanged(int32_t NewLevel);                                                                               // [0x18e26f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TutorialManager.PlayerLanded
	// void PlayerLanded(float DistanceFell);                                                                                   // [0x18e2670] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerKill
	// void PlayerKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                // [0x18e2580] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TutorialManager.PlayerItemAdded
	// void PlayerItemAdded(FItemStack& Item);                                                                                  // [0x18e24e0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TutorialManager.PlayerHealthChanged
	// void PlayerHealthChanged(float HealthChanged, class AActor* Instigator);                                                 // [0x18e2410] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerFinishedEquipping
	// void PlayerFinishedEquipping(class UWeapon* Weapon);                                                                     // [0x18e2380] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerEnteredRestrictedArea
	// void PlayerEnteredRestrictedArea(class ARestrictedArea* RestrictedArea);                                                 // [0x18e22f0] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerEncumberedChanged
	// void PlayerEncumberedChanged(bool bEncumbered);                                                                          // [0x18e2260] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerDisguiseDrainEnd
	// void PlayerDisguiseDrainEnd();                                                                                           // [0x18e2240] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerCompanionKilled
	// void PlayerCompanionKilled(class AActor* Companion);                                                                     // [0x18e21b0] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerCompanionAdded
	// void PlayerCompanionAdded(class AIndianaAiCharacter* NPC, bool bRegister);                                               // [0x18e20e0] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerCombatStateChanged
	// void PlayerCombatStateChanged(bool bIsInCombat, bool bRestoring);                                                        // [0x18e2010] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerCausedDamage
	// void PlayerCausedDamage(FCauseDamageInfo& CauseDamageInfo);                                                              // [0x18e1f70] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TutorialManager.MarkTutorialEventComplete
	// void MarkTutorialEventComplete(ETutorialEvent TutorialEvent);                                                            // [0x18e1bf0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.TutorialManager.ItemDamageStatusChange
	// void ItemDamageStatusChange(EItemDegradationState DegredationState);                                                     // [0x18e1b70] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.IsTutorialEventCompleted
	// bool IsTutorialEventCompleted(ETutorialEvent TutorialEvent);                                                             // [0x18e1af0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.TutorialManager.HideTutorialEventMessage
	// void HideTutorialEventMessage(ETutorialEvent TutorialEvent);                                                             // [0x18e1a80] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TutorialPopupStyleWidget
/// Size: 0x0400 (1024 bytes) (0x000300 - 0x000400) align 8 MaxSize: 0x0400
class UTutorialPopupStyleWidget : public UIndianaUserWidget
{ 
public:
	ETutorialDisplayType                               DisplayType;                                                // 0x0300   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0301   (0x0003)  MISSED
	float                                              ContentVerticalPadding;                                     // 0x0304   (0x0004)  
	float                                              NarrowerNameWrapping;                                       // 0x0308   (0x0004)  
	int32_t                                            BackingMaterialSize;                                        // 0x030C   (0x0004)  
	int32_t                                            BackingTopSize;                                             // 0x0310   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0314   (0x0004)  MISSED
	class UVerticalBox*                                ContentVerticalBox;                                         // 0x0318   (0x0008)  
	class UHorizontalBox*                              TutorialTagBox;                                             // 0x0320   (0x0008)  
	class UTextBlockBase*                              PreFlavorTextBlock;                                         // 0x0328   (0x0008)  
	class UTextBlockBase*                              NameTextBlock;                                              // 0x0330   (0x0008)  
	class UTextBlockBase*                              DescriptionTextBlock;                                       // 0x0338   (0x0008)  
	class UTextBlockBase*                              SubheaderTextblock;                                         // 0x0340   (0x0008)  
	class UTextBlockBase*                              SubDescriptionTextBlock;                                    // 0x0348   (0x0008)  
	class UOverlay*                                    ColoredOverlay;                                             // 0x0350   (0x0008)  
	class UTextBlockBase*                              ColoredTextBlock;                                           // 0x0358   (0x0008)  
	class UImage*                                      ColoredImage;                                               // 0x0360   (0x0008)  
	class UImage*                                      MascotImage;                                                // 0x0368   (0x0008)  
	class UHorizontalBox*                              OptionalBindings;                                           // 0x0370   (0x0008)  
	class UInputLabelWidget*                           OptionalBindingOne;                                         // 0x0378   (0x0008)  
	class UInputLabelWidget*                           OptionalBindingTwo;                                         // 0x0380   (0x0008)  
	class UInputLabelWidget*                           PrimaryInputLabel;                                          // 0x0388   (0x0008)  
	class UInputLabelWidget*                           SecondaryInputLabel;                                        // 0x0390   (0x0008)  
	class UButtonBase*                                 PrimaryButton;                                              // 0x0398   (0x0008)  
	class UButtonBase*                                 SecondaryButton;                                            // 0x03A0   (0x0008)  
	class USizeBox*                                    BackingBotSizeBox;                                          // 0x03A8   (0x0008)  
	class UImage*                                      BackingBot;                                                 // 0x03B0   (0x0008)  
	unsigned char                                      UnknownData02_7[0x48];                                      // 0x03B8   (0x0048)  MISSED


	/// Functions
	// Function /Script/Indiana.TutorialPopupStyleWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TutorialPopupStyleWidget.FadeInMascotImage
	// void FadeInMascotImage();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.TutorialPopupWidget
/// Size: 0x0350 (848 bytes) (0x000308 - 0x000350) align 8 MaxSize: 0x0350
class UTutorialPopupWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x0308   (0x0020)  MISSED
	class UUserWidget*                                 BGAlpha;                                                    // 0x0328   (0x0008)  
	class UOverlay*                                    StyleContainerOverlay;                                      // 0x0330   (0x0008)  
	class UIndianaUserWidget*                          CachedCurrentTutorialWidget;                                // 0x0338   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0340   (0x0010)  MISSED
};

/// Class /Script/Indiana.TutorialTriggerVolume
/// Size: 0x0360 (864 bytes) (0x000358 - 0x000360) align 8 MaxSize: 0x0360
class ATutorialTriggerVolume : public ATriggerVolume
{ 
public:
	ETutorialEvent                                     TutorialEvent;                                              // 0x0358   (0x0001)  
	bool                                               MarkTutorialEventCompleteTrigger;                           // 0x0359   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x035A   (0x0006)  MISSED
};

/// Class /Script/Indiana.UglyStickStatusEffect
/// Size: 0x01A0 (416 bytes) (0x000188 - 0x0001A0) align 8 MaxSize: 0x01A0
class UUglyStickStatusEffect : public UStatusEffect
{ 
public:
	class UBoneModificationsPreset*                    OriginalBoneModPreset;                                      // 0x0188   (0x0008)  
	class UBoneModificationsPreset*                    UglyStickBoneModPreset;                                     // 0x0190   (0x0008)  
	class UBoneModificationsPreset*                    DuplicatePreset;                                            // 0x0198   (0x0008)  
};

/// Class /Script/Indiana.UIFlipBookData
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align 8 MaxSize: 0x0050
class UUIFlipBookData : public UDataAsset
{ 
public:
	uint32_t                                           NumColumns;                                                 // 0x0038   (0x0004)  
	uint32_t                                           NumRows;                                                    // 0x003C   (0x0004)  
	uint32_t                                           FrameRate;                                                  // 0x0040   (0x0004)  
	uint32_t                                           NumFrames;                                                  // 0x0044   (0x0004)  
	class UTexture*                                    FlipbookTexture;                                            // 0x0048   (0x0008)  
};

/// Class /Script/Indiana.UnlockAbilityStatusEffect
/// Size: 0x0190 (400 bytes) (0x000188 - 0x000190) align 8 MaxSize: 0x0190
class UUnlockAbilityStatusEffect : public UStatusEffect
{ 
public:
	EUnlockAbility                                     UnlockedAbility;                                            // 0x0188   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0189   (0x0007)  MISSED
};

/// Struct /Script/Indiana.ResolutionFontSizeData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FResolutionFontSizeData
{ 
	FString                                            DebugName;                                                  // 0x0000   (0x0010)  
	FVector2D                                          Resolution;                                                 // 0x0010   (0x0008)  
	int8_t                                             FontSize;                                                   // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Class /Script/Indiana.RenderThreadLoadingScreenWidget
/// Size: 0x0438 (1080 bytes) (0x000278 - 0x000438) align 8 MaxSize: 0x0438
class URenderThreadLoadingScreenWidget : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0278   (0x0018)  MISSED
	TArray<class UTexture2D*>                          LoadingImages;                                              // 0x0290   (0x0010)  
	TArray<FString>                                    LoadingTips;                                                // 0x02A0   (0x0010)  
	float                                              SecondsBetweenImages;                                       // 0x02B0   (0x0004)  
	float                                              SecondsBetweenTips;                                         // 0x02B4   (0x0004)  
	int32_t                                            MaxNumberOfTips;                                            // 0x02B8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02BC   (0x0004)  MISSED
	class UImage*                                      LoadingImage;                                               // 0x02C0   (0x0008)  
	class UImage*                                      BlockerImage;                                               // 0x02C8   (0x0008)  
	class UTextBlock*                                  TipTextBlock;                                               // 0x02D0   (0x0008)  
	class UTextBlock*                                  TipTextBlock0;                                              // 0x02D8   (0x0008)  
	class UTextBlock*                                  TipTextBlock1;                                              // 0x02E0   (0x0008)  
	class UTextBlock*                                  TipTextBlock2;                                              // 0x02E8   (0x0008)  
	class UTextBlock*                                  TipTextBlock3;                                              // 0x02F0   (0x0008)  
	class UTextBlock*                                  TipTextBlock4;                                              // 0x02F8   (0x0008)  
	class UTextBlock*                                  TipTextBlock5;                                              // 0x0300   (0x0008)  
	class UTextBlock*                                  TipTextBlock6;                                              // 0x0308   (0x0008)  
	class UTextBlock*                                  TipTextBlock7;                                              // 0x0310   (0x0008)  
	class UTextBlock*                                  TipTextBlock8;                                              // 0x0318   (0x0008)  
	class UTextBlock*                                  TipTextBlock9;                                              // 0x0320   (0x0008)  
	class UInvalidationBox*                            TipArrayInvalidationBox;                                    // 0x0328   (0x0008)  
	class UImage*                                      AnimatingMascot;                                            // 0x0330   (0x0008)  
	TArray<FResolutionFontSizeData>                    ResolutionFontSizes;                                        // 0x0338   (0x0010)  
	TWeakObjectPtr<class UTexture2D*>                  MascotFBTexture;                                            // 0x0348   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0350   (0x0020)  MISSED
	TWeakObjectPtr<class UMaterial*>                   MascotFBMaterial;                                           // 0x0370   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x0378   (0x0020)  MISSED
	TWeakObjectPtr<class UMaterialInstance*>           MascotFBInstance;                                           // 0x0398   (0x0008)  
	unsigned char                                      UnknownData04_6[0x20];                                      // 0x03A0   (0x0020)  MISSED
	class UTexture2D*                                  MascotFBTexturePtr;                                         // 0x03C0   (0x0008)  
	class UMaterial*                                   MascotFBMaterialPtr;                                        // 0x03C8   (0x0008)  
	class UMaterialInstance*                           MascotFBInstancePtr;                                        // 0x03D0   (0x0008)  
	unsigned char                                      UnknownData05_7[0x60];                                      // 0x03D8   (0x0060)  MISSED
};

/// Struct /Script/Indiana.VendorStockDescriptor
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FVendorStockDescriptor
{ 
	class ULootTableData*                              LootTable;                                                  // 0x0000   (0x0008)  
	bool                                               bIsOneOff;                                                  // 0x0008   (0x0001)  
	bool                                               bIsRestricted;                                              // 0x0009   (0x0001)  
	bool                                               bIgnoreRestockDelay;                                        // 0x000A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x000B   (0x0005)  MISSED
	class UGenericLogicDataAsset*                      GenerationConditionsDataAsset;                              // 0x0010   (0x0008)  
	FGuid                                              DescriptorGuid;                                             // 0x0018   (0x0010)  
};

/// Struct /Script/Indiana.PerkCostModifier
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FPerkCostModifier
{ 
	class UClass*                                      Perk;                                                       // 0x0000   (0x0008)  
	float                                              CostModifier;                                               // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Indiana.VendorComponent
/// Size: 0x01E0 (480 bytes) (0x0000E0 - 0x0001E0) align 8 MaxSize: 0x01E0
class UVendorComponent : public UActorComponent
{ 
public:
	FLocString                                         VendorName;                                                 // 0x00E0   (0x0008)  
	TWeakObjectPtr<class AContainer*>                  VendorContainer;                                            // 0x00E8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x00F0   (0x0020)  MISSED
	TArray<FVendorStockDescriptor>                     VendorStockDescriptors;                                     // 0x0110   (0x0010)  
	TArray<class ULootTableData*>                      VendorLootTables;                                           // 0x0120   (0x0010)  
	TArray<class ULootTableData*>                      OneOffLootTables;                                           // 0x0130   (0x0010)  
	TArray<class ULootTableData*>                      RestrictedLootTables;                                       // 0x0140   (0x0010)  
	bool                                               bReputationBreaksRestriction;                               // 0x0150   (0x0001)  
	bool                                               bHackingBreaksRestriction;                                  // 0x0151   (0x0001)  
	bool                                               bPurchaseOnly;                                              // 0x0152   (0x0001)  
	bool                                               bIsVendingMachine;                                          // 0x0153   (0x0001)  
	bool                                               bIgnorePlayerMerchantSkill;                                 // 0x0154   (0x0001)  
	bool                                               bCanRepair;                                                 // 0x0155   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0156   (0x0002)  MISSED
	class UClass*                                      OwningFaction;                                              // 0x0158   (0x0008)  
	TArray<FPerkCostModifier>                          CostModifierPerks;                                          // 0x0160   (0x0010)  
	class UAkAudioEvent*                               TransactionCompleteAudioEvent;                              // 0x0170   (0x0008)  
	class UAkAudioEvent*                               VendorCloseAudioEvent;                                      // 0x0178   (0x0008)  
	unsigned char                                      UnknownData02_7[0x60];                                      // 0x0180   (0x0060)  MISSED


	/// Functions
	// Function /Script/Indiana.VendorComponent.SetVendorContainer
	// void SetVendorContainer(class AContainer* Container);                                                                    // [0x18e2a90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.VendorWidget
/// Size: 0x0620 (1568 bytes) (0x000308 - 0x000620) align 8 MaxSize: 0x0620
class UVendorWidget : public UIndianaInterfaceUserWidget
{ 
public:
	float                                              StackSplittingViewerOpacity;                                // 0x0308   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x030C   (0x0004)  MISSED
	class UTexture2D*                                  RestrictedLockedTexture;                                    // 0x0310   (0x0008)  
	class UTexture2D*                                  RestrictedUnlockedTexture;                                  // 0x0318   (0x0008)  
	class UClass*                                      PerkAdditionalStock;                                        // 0x0320   (0x0008)  
	class UClass*                                      PerkBuyingPrice;                                            // 0x0328   (0x0008)  
	class UClass*                                      PerkSurcharge;                                              // 0x0330   (0x0008)  
	class UItemViewerButtonWidget*                     HoveredItem;                                                // 0x0338   (0x0008)  
	class UTextBlockBase*                              VendorNameTextBlock;                                        // 0x0340   (0x0008)  
	class UImage*                                      FactionImage;                                               // 0x0348   (0x0008)  
	class UHorizontalBox*                              ActionHBox;                                                 // 0x0350   (0x0008)  
	class UTextBlockBase*                              ActionValueTextBlock;                                       // 0x0358   (0x0008)  
	class UTextBlockBase*                              SellDisabledMessage;                                        // 0x0360   (0x0008)  
	class UVerticalBox*                                RestrictedVerticalBox;                                      // 0x0368   (0x0008)  
	class UImage*                                      RestrictedIcon;                                             // 0x0370   (0x0008)  
	class UTextBlockBase*                              RestrictedHeaderTextBlock;                                  // 0x0378   (0x0008)  
	class UTextBlockBase*                              RestrictedDescTextBlock;                                    // 0x0380   (0x0008)  
	class UVerticalBox*                                BuySellItemDetailsVerticalBox;                              // 0x0388   (0x0008)  
	class UTextBlockBase*                              ItemNameTextBlock;                                          // 0x0390   (0x0008)  
	class UTextBlockBase*                              ItemDescTextBlock;                                          // 0x0398   (0x0008)  
	class UVerticalBox*                                ItemModdingVerticalBox;                                     // 0x03A0   (0x0008)  
	class UTextBlockBase*                              InstalledModificationsTextBlock;                            // 0x03A8   (0x0008)  
	class UVerticalBox*                                InstalledModsVerticalBox;                                   // 0x03B0   (0x0008)  
	class UEquipmentModsWidget*                        ModWidget;                                                  // 0x03B8   (0x0008)  
	class UVerticalBox*                                RepairItemDetailsVerticalBox;                               // 0x03C0   (0x0008)  
	class USizeBox*                                    CurrentRepairStatusSizeBox;                                 // 0x03C8   (0x0008)  
	class UProgressBar*                                CurrentRepairStatusBar;                                     // 0x03D0   (0x0008)  
	class USizeBox*                                    CurrentRepairPristineStatusSizeBox;                         // 0x03D8   (0x0008)  
	class UProgressBar*                                CurrentRepairPristineStatusBar;                             // 0x03E0   (0x0008)  
	class UTextBlockBase*                              CurrentRepairStatusTextBlock;                               // 0x03E8   (0x0008)  
	class USizeBox*                                    RepairedStatusSizeBox;                                      // 0x03F0   (0x0008)  
	class UProgressBar*                                RepairedStatusBar;                                          // 0x03F8   (0x0008)  
	class USizeBox*                                    RepairedPristineSizeBox;                                    // 0x0400   (0x0008)  
	class UProgressBar*                                RepairedPristineStatusBar;                                  // 0x0408   (0x0008)  
	class UTextBlockBase*                              RepairedPristineStatusTextBlock;                            // 0x0410   (0x0008)  
	class UItemStatEntryWidget*                        PreItemStat;                                                // 0x0418   (0x0008)  
	class UItemStatEntryWidget*                        PostItemStat;                                               // 0x0420   (0x0008)  
	class UTextBlockBase*                              DiscountSurchargeTextBlock;                                 // 0x0428   (0x0008)  
	class UCartInfoWidget*                             CartInfoWidget;                                             // 0x0430   (0x0008)  
	class UPlayerStatsWidget*                          PlayerStats;                                                // 0x0438   (0x0008)  
	class UInputLabelGroupWidget*                      LabelGroup;                                                 // 0x0440   (0x0008)  
	class UInputLabelWidget*                           ActionInputLabelBuy;                                        // 0x0448   (0x0008)  
	class UInputLabelWidget*                           ActionInputLabelSell;                                       // 0x0450   (0x0008)  
	class UInputLabelWidget*                           ActionInputLabelRepair;                                     // 0x0458   (0x0008)  
	class UNavigationGroupWidget*                      NavigationGroupWidget;                                      // 0x0460   (0x0008)  
	class UScrollingWidgetGroup*                       ScrollingWidgetGroup;                                       // 0x0468   (0x0008)  
	class UScrollBox*                                  PageScrollBox;                                              // 0x0470   (0x0008)  
	class UHorizontalBox*                              PerkStockHBox;                                              // 0x0478   (0x0008)  
	class UTextBlockBase*                              PerkStockDesc;                                              // 0x0480   (0x0008)  
	class UHorizontalBox*                              PerkPriceHBox;                                              // 0x0488   (0x0008)  
	class UTextBlockBase*                              PerkPriceDesc;                                              // 0x0490   (0x0008)  
	class UHorizontalBox*                              PerkSurchargeHBox;                                          // 0x0498   (0x0008)  
	class UTextBlockBase*                              PerkSurchargeDesc;                                          // 0x04A0   (0x0008)  
	class UItemViewerWidget*                           VendorViewer;                                               // 0x04A8   (0x0008)  
	class UItemViewerNavigationWidget*                 VendorSubNavigationWidget;                                  // 0x04B0   (0x0008)  
	class UTextBlockBase*                              VendorFilterType;                                           // 0x04B8   (0x0008)  
	class UItemViewerWidget*                           PlayerSellViewer;                                           // 0x04C0   (0x0008)  
	class UItemViewerNavigationWidget*                 PlayerSellSubNavigationWidget;                              // 0x04C8   (0x0008)  
	class UTextBlockBase*                              PlayerSellFilterType;                                       // 0x04D0   (0x0008)  
	class UItemViewerWidget*                           PlayerRepairViewer;                                         // 0x04D8   (0x0008)  
	class UItemViewerNavigationWidget*                 PlayerRepairSubNavigationWidget;                            // 0x04E0   (0x0008)  
	class UTextBlockBase*                              PlayerRepairFilterType;                                     // 0x04E8   (0x0008)  
	class UClass*                                      ItemRepairClass;                                            // 0x04F0   (0x0008)  
	class UClass*                                      StackSplittingClass;                                        // 0x04F8   (0x0008)  
	TArray<FKey>                                       VendorNiceSequence;                                         // 0x0500   (0x0010)  
	unsigned char                                      UnknownData01_7[0x110];                                     // 0x0510   (0x0110)  MISSED


	/// Functions
	// Function /Script/Indiana.VendorWidget.UpdateSubnavigationActivation
	// void UpdateSubnavigationActivation();                                                                                    // [0x18e2c40] Final|Native|Protected 
	// Function /Script/Indiana.VendorWidget.OnStoreItemRemoved
	// void OnStoreItemRemoved(FItemStack& ItemStack);                                                                          // [0x18e1ed0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.VendorWidget.OnStoreItemAdded
	// void OnStoreItemAdded(FItemStack& ItemStack);                                                                            // [0x18e1e30] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.VendorWidget.OnSetCurrentPage
	// void OnSetCurrentPage(EVendorPages Page, bool bAnimate);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.OnPlayerItemRemoved
	// void OnPlayerItemRemoved(FItemStack& ItemStack);                                                                         // [0x18e1d90] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.VendorWidget.OnPlayerItemAdded
	// void OnPlayerItemAdded(FItemStack& ItemStack);                                                                           // [0x18e1cf0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.VendorWidget.OnItemInspectorClosed
	// void OnItemInspectorClosed(class UItemInspectorWidget* ItemInspectorWidget);                                             // [0x18e1c60] Final|Native|Protected 
	// Function /Script/Indiana.VendorWidget.OnAnimationSoldJunk
	// void OnAnimationSoldJunk();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.OnAnimationSoldItem
	// void OnAnimationSoldItem();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.OnAnimationRepairedItem
	// void OnAnimationRepairedItem();                                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.OnAnimationBoughtItem
	// void OnAnimationBoughtItem();                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.FadeInFactionImage
	// void FadeInFactionImage();                                                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.WaitAction
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align 8 MaxSize: 0x0040
class UWaitAction : public UAIAction
{ 
public:
	float                                              WaitTime;                                                   // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Indiana.WaitTimeSliderWidget
/// Size: 0x0338 (824 bytes) (0x000300 - 0x000338) align 8 MaxSize: 0x0338
class UWaitTimeSliderWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x10];                                      // 0x0300   (0x0010)  MISSED
	class UButtonBase*                                 LeftButton;                                                 // 0x0310   (0x0008)  
	class UButtonBase*                                 RightButton;                                                // 0x0318   (0x0008)  
	class USliderBase*                                 Slider;                                                     // 0x0320   (0x0008)  
	class UAkAudioEvent*                               GamepadNextAudio;                                           // 0x0328   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0330   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.WaitTimeSliderWidget.OnValueChanged
	// void OnValueChanged(FSliderEvent& Event);                                                                                // [0x18e5f10] Final|Native|Protected|HasOutParms 
};

/// Struct /Script/Indiana.WaitData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FWaitData
{ 
	float                                              StepValue;                                                  // 0x0000   (0x0004)  
	FLocString                                         LocString;                                                  // 0x0004   (0x0008)  
};

/// Class /Script/Indiana.WaitTimeWidget
/// Size: 0x03A0 (928 bytes) (0x000308 - 0x0003A0) align 8 MaxSize: 0x03A0
class UWaitTimeWidget : public UIndianaInterfaceUserWidget
{ 
public:
	class UTextBlockBase*                              WaitDurationTextBlock;                                      // 0x0308   (0x0008)  
	class UButtonBase*                                 ConfirmButton;                                              // 0x0310   (0x0008)  
	class UButtonBase*                                 CancelButton;                                               // 0x0318   (0x0008)  
	class UInputLabelGroupWidget*                      LabelGroup;                                                 // 0x0320   (0x0008)  
	class UWaitTimeSliderWidget*                       RestSlider;                                                 // 0x0328   (0x0008)  
	class UTextBlockBase*                              MinTimeTextBlock;                                           // 0x0330   (0x0008)  
	class UTextBlockBase*                              MaxTimeTextBlock;                                           // 0x0338   (0x0008)  
	TMap<ERestType, FWaitData>                         WaitTypeData;                                               // 0x0340   (0x0050)  
	int32_t                                            DefaultStartingTime;                                        // 0x0390   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0394   (0x000C)  MISSED


	/// Functions
	// Function /Script/Indiana.WaitTimeWidget.OnSliderValueChanged
	// void OnSliderValueChanged(FSliderEvent& Event);                                                                          // [0x18e5d70] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.WaitTimeWidget.OnInputConfirm
	// void OnInputConfirm();                                                                                                   // [0x18e5d50] Final|Native|Protected 
	// Function /Script/Indiana.WaitTimeWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18e5d30] Final|Native|Protected 
};

/// Class /Script/Indiana.WalkBehaviorStateInfo
/// Size: 0x0188 (392 bytes) (0x000178 - 0x000188) align 8 MaxSize: 0x0188
class UWalkBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0178   (0x0010)  MISSED
};

/// Class /Script/Indiana.WalkRequestData
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align 8 MaxSize: 0x0080
class UWalkRequestData : public UDecisionTreeEQSRequestData
{ 
public:
};

/// Class /Script/Indiana.WalkNavLink
/// Size: 0x02E8 (744 bytes) (0x0002E8 - 0x0002E8) align 8 MaxSize: 0x02E8
class AWalkNavLink : public AReservableNavLink
{ 
public:
};

/// Class /Script/Indiana.WanderBehaviorStateInfo
/// Size: 0x0140 (320 bytes) (0x000120 - 0x000140) align 8 MaxSize: 0x0140
class UWanderBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0120   (0x0020)  MISSED
};

/// Class /Script/Indiana.WanderRequestData
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align 8 MaxSize: 0x0068
class UWanderRequestData : public UDecisionTreeEmptyRequestData
{ 
public:
};

/// Class /Script/Indiana.WorkbenchPageWidget
/// Size: 0x0400 (1024 bytes) (0x0003A0 - 0x000400) align 8 MaxSize: 0x0400
class UWorkbenchPageWidget : public UBaseInventoryItemManagement
{ 
public:
	unsigned char                                      UnknownData00_8[0x20];                                      // 0x03A0   (0x0020)  MISSED
	class UInventoryWeaponsPageWidget*                 Weapons;                                                    // 0x03C0   (0x0008)  
	class UInventoryArmorPageWidget*                   Armor;                                                      // 0x03C8   (0x0008)  
	class UInputLabelGroupWidget*                      InputLabelGroup;                                            // 0x03D0   (0x0008)  
	class UFlavorTextWidget*                           FlavorTextWidget;                                           // 0x03D8   (0x0008)  
	class UTextBlockBase*                              DisabledMessage;                                            // 0x03E0   (0x0008)  
	SDK_UNDEFINED(16,705) /* TArray<TSoftObjectPtr<UClass*>> */ __um(ProhibitedCharacterClasses);                  // 0x03E8   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x03F8   (0x0008)  MISSED


	/// Functions
	// Function /Script/Indiana.WorkbenchPageWidget.OnItemRemoved
	// void OnItemRemoved(FItemStack& ItemStack);                                                                               // [0x18ebb90] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.WorkbenchPageWidget.OnDragDrop_SwapWeaponSlot
	// void OnDragDrop_SwapWeaponSlot(class UIndianaDragDropOperation* Operation);                                              // [0x18ebb00] Final|Native|Protected 
	// Function /Script/Indiana.WorkbenchPageWidget.OnDragDrop_SetWeaponSlot
	// void OnDragDrop_SetWeaponSlot(class UIndianaDragDropOperation* Operation);                                               // [0x18eba70] Final|Native|Protected 
	// Function /Script/Indiana.WorkbenchPageWidget.OnDragDrop_ClearArmorSlot
	// void OnDragDrop_ClearArmorSlot(class UIndianaDragDropOperation* Operation);                                              // [0x18eb9e0] Final|Native|Protected 
};

/// Class /Script/Indiana.WBBreakdownPageWidget
/// Size: 0x0418 (1048 bytes) (0x000400 - 0x000418) align 8 MaxSize: 0x0418
class UWBBreakdownPageWidget : public UWorkbenchPageWidget
{ 
public:
	class UCartInfoWidget*                             CartInfoWidget;                                             // 0x0400   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0408   (0x0010)  MISSED
};

/// Class /Script/Indiana.WBModificationPageWidget
/// Size: 0x0428 (1064 bytes) (0x000400 - 0x000428) align 8 MaxSize: 0x0428
class UWBModificationPageWidget : public UWorkbenchPageWidget
{ 
public:
	class UClass*                                      ItemModdingClass;                                           // 0x0400   (0x0008)  
	class UTextBlockBase*                              ItemNameTextBlock;                                          // 0x0408   (0x0008)  
	class UTextBlockBase*                              ItemDescTextBlock;                                          // 0x0410   (0x0008)  
	class UVerticalBox*                                ItemDetailsContainer;                                       // 0x0418   (0x0008)  
	class UEquipmentModsWidget*                        EquipmentMods;                                              // 0x0420   (0x0008)  
};

/// Class /Script/Indiana.WBRepairPageWidget
/// Size: 0x0450 (1104 bytes) (0x000400 - 0x000450) align 8 MaxSize: 0x0450
class UWBRepairPageWidget : public UWorkbenchPageWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x0400   (0x0018)  MISSED
	class URepairUpgradeInfoWidget*                    RepairInfoWidget;                                           // 0x0418   (0x0008)  
	class UCartInfoWidget*                             CartInfoWidget;                                             // 0x0420   (0x0008)  
	class UVerticalBox*                                InfoVerticalBox;                                            // 0x0428   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0430   (0x0020)  MISSED
};

/// Class /Script/Indiana.WBUpgradePageWidget
/// Size: 0x0428 (1064 bytes) (0x000400 - 0x000428) align 8 MaxSize: 0x0428
class UWBUpgradePageWidget : public UWorkbenchPageWidget
{ 
public:
	class URepairUpgradeInfoWidget*                    RepairInfoWidget;                                           // 0x0400   (0x0008)  
	class UCartInfoWidget*                             CartInfoWidget;                                             // 0x0408   (0x0008)  
	class UClass*                                      TinkeringClass;                                             // 0x0410   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0418   (0x0010)  MISSED
};

/// Struct /Script/Indiana.OnHitStatusEffects
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FOnHitStatusEffects
{ 
	ESkill                                             Skill;                                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class URpgStat*                                    SkillModifierStat;                                          // 0x0008   (0x0008)  
	int32_t                                            MinSkill;                                                   // 0x0010   (0x0004)  
	int32_t                                            Chance;                                                     // 0x0014   (0x0004)  
	class UClass*                                      StatusEffect;                                               // 0x0018   (0x0008)  
	bool                                               bAlwaysApply;                                               // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/Indiana.Weapon
/// Size: 0x05D0 (1488 bytes) (0x000128 - 0x0005D0) align 8 MaxSize: 0x05D0
class UWeapon : public UDegradableItem
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0128   (0x0008)  MISSED
	SDK_UNDEFINED(16,706) /* FMulticastInlineDelegate */ __um(StartEquipDelegate);                                 // 0x0130   (0x0010)  
	SDK_UNDEFINED(16,707) /* FMulticastInlineDelegate */ __um(EndEquipDelegate);                                   // 0x0140   (0x0010)  
	SDK_UNDEFINED(16,708) /* FMulticastInlineDelegate */ __um(StartUnequipDelegate);                               // 0x0150   (0x0010)  
	SDK_UNDEFINED(16,709) /* FMulticastInlineDelegate */ __um(EndUnequipDelegate);                                 // 0x0160   (0x0010)  
	SDK_UNDEFINED(16,710) /* FMulticastInlineDelegate */ __um(StartReloadDelegate);                                // 0x0170   (0x0010)  
	SDK_UNDEFINED(16,711) /* FMulticastInlineDelegate */ __um(EndReloadDelegate);                                  // 0x0180   (0x0010)  
	SDK_UNDEFINED(16,712) /* FMulticastInlineDelegate */ __um(InterruptReloadDelegate);                            // 0x0190   (0x0010)  
	SDK_UNDEFINED(16,713) /* FMulticastInlineDelegate */ __um(StartHolsterDelegate);                               // 0x01A0   (0x0010)  
	SDK_UNDEFINED(16,714) /* FMulticastInlineDelegate */ __um(EndHolsterDelegate);                                 // 0x01B0   (0x0010)  
	SDK_UNDEFINED(16,715) /* FMulticastInlineDelegate */ __um(StartUnholsterDelegate);                             // 0x01C0   (0x0010)  
	SDK_UNDEFINED(16,716) /* FMulticastInlineDelegate */ __um(EndUnholsterDelegate);                               // 0x01D0   (0x0010)  
	SDK_UNDEFINED(16,717) /* FMulticastInlineDelegate */ __um(CalledShotStartedDelegate);                          // 0x01E0   (0x0010)  
	SDK_UNDEFINED(16,718) /* FMulticastInlineDelegate */ __um(CalledShotEndedDelegate);                            // 0x01F0   (0x0010)  
	class UFPVSkeletalMeshComponent*                   SkeletalMeshComponent;                                      // 0x0200   (0x0008)  
	class URpgStatComponent*                           StatComponent;                                              // 0x0208   (0x0008)  
	class URpgStatComponent*                           OwnerStatComponent;                                         // 0x0210   (0x0008)  
	class UCharacterInfoComponent*                     CharacterInfoComponent;                                     // 0x0218   (0x0008)  
	class UTacticalTimeDilationComponent*              TTDComponent;                                               // 0x0220   (0x0008)  
	class UWeaponMode*                                 PrimaryMode;                                                // 0x0228   (0x0008)  
	class UAmmoPoolBase*                               AmmoPool;                                                   // 0x0230   (0x0008)  
	class UWeaponModContainer*                         WeaponModContainer;                                         // 0x0238   (0x0008)  
	class UBodyLocationSpellAsset*                     WeaponLocationSpellAsset;                                   // 0x0240   (0x0008)  
	TWeakObjectPtr<class USkeletalMesh*>               WeaponMesh;                                                 // 0x0248   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0250   (0x0020)  MISSED
	TSoftObjectPtr<class UClass*>                      WeaponAnimInstance;                                         // 0x0270   (0x0028)  
	char                                               PrimaryTriggerThreshold;                                    // 0x0298   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0299   (0x0003)  MISSED
	float                                              EquipTime;                                                  // 0x029C   (0x0004)  
	float                                              UnequipTime;                                                // 0x02A0   (0x0004)  
	float                                              HolsterTime;                                                // 0x02A4   (0x0004)  
	float                                              UnholsterTime;                                              // 0x02A8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x02AC   (0x0004)  MISSED
	TSoftObjectPtr<class UClass*>                      FPVVisualsClass;                                            // 0x02B0   (0x0028)  
	class UTriggerEffect*                              TriggerEffectPS5;                                           // 0x02D8   (0x0008)  
	TSoftObjectPtr<class UClass*>                      TPVVisualsClass;                                            // 0x02E0   (0x0028)  
	TSoftObjectPtr<class UClass*>                      FPAnimationsClass;                                          // 0x0308   (0x0028)  
	TSoftObjectPtr<class UClass*>                      CreatureTPAnimationsClass;                                  // 0x0330   (0x0028)  
	TSoftObjectPtr<class UClass*>                      SharedVisualsClass;                                         // 0x0358   (0x0028)  
	TSoftObjectPtr<class UClass*>                      SoundEffectsClass;                                          // 0x0380   (0x0028)  
	TSoftObjectPtr<class UClass*>                      PreviewAnimationsClass;                                     // 0x03A8   (0x0028)  
	FRpgStatCollection                                 RpgStatCollection;                                          // 0x03D0   (0x0068)  
	TArray<class UMicroModTable*>                      MicroModTables;                                             // 0x0438   (0x0010)  
	class UClass*                                      EquippedMicroMod;                                           // 0x0448   (0x0008)  
	ESkill                                             Skill;                                                      // 0x0450   (0x0001)  
	ESkill                                             SkillSecondary;                                             // 0x0451   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0452   (0x0002)  MISSED
	float                                              ImpulseOverride;                                            // 0x0454   (0x0004)  
	float                                              ArmorPenetration;                                           // 0x0458   (0x0004)  
	FGameplayTag                                       WeaponCategory;                                             // 0x045C   (0x0008)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0464   (0x0004)  MISSED
	class UAISettings_Weapon*                          AISettings;                                                 // 0x0468   (0x0008)  
	class UAISettings_Weapon*                          CompanionOverrideAISettings;                                // 0x0470   (0x0008)  
	class UAssetCollection*                            AssetCollection;                                            // 0x0478   (0x0008)  
	TArray<FOnHitStatusEffects>                        OnHitStatusEffects;                                         // 0x0480   (0x0010)  
	FSpellSet                                          WeaponSpellSet;                                             // 0x0490   (0x0050)  
	char                                               MinSkill;                                                   // 0x04E0   (0x0001)  
	char                                               MinAttribute;                                               // 0x04E1   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x04E2   (0x0002)  MISSED
	float                                              WeakSpotMultiplier;                                         // 0x04E4   (0x0004)  
	float                                              SwarmScalar;                                                // 0x04E8   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x04EC   (0x0004)  MISSED
	class UClass*                                      CritSpell;                                                  // 0x04F0   (0x0008)  
	class UClass*                                      OnHitSpell;                                                 // 0x04F8   (0x0008)  
	float                                              OnHitSpellChance;                                           // 0x0500   (0x0004)  
	bool                                               bRequireDirectHitForHitSpell;                               // 0x0504   (0x0001)  
	bool                                               bOverrideProjectileWizzRadius;                              // 0x0505   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x0506   (0x0002)  MISSED
	float                                              ProjectileWizzRadius;                                       // 0x0508   (0x0004)  
	bool                                               bOverrideProjectileCollisionRadius;                         // 0x050C   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x050D   (0x0003)  MISSED
	float                                              ProjectileCollisionRadius;                                  // 0x0510   (0x0004)  
	bool                                               bCanGenerateLootOnBreakdown;                                // 0x0514   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3B];                                      // 0x0515   (0x003B)  MISSED
	class UPrimaryWeaponVisuals*                       CurrentVisuals;                                             // 0x0550   (0x0008)  
	unsigned char                                      UnknownData11_6[0x18];                                      // 0x0558   (0x0018)  MISSED
	bool                                               bCalledShotWeapon;                                          // 0x0570   (0x0001)  
	unsigned char                                      UnknownData12_6[0x38];                                      // 0x0571   (0x0038)  MISSED
	bool                                               bIsHealGun;                                                 // 0x05A9   (0x0001)  
	bool                                               bImprovised;                                                // 0x05AA   (0x0001)  
	unsigned char                                      UnknownData13_6[0x1];                                       // 0x05AB   (0x0001)  MISSED
	float                                              QuietWeaponNoiseRadius;                                     // 0x05AC   (0x0004)  
	unsigned char                                      UnknownData14_6[0x8];                                       // 0x05B0   (0x0008)  MISSED
	bool                                               bCanDamageFriendlies;                                       // 0x05B8   (0x0001)  
	bool                                               bShouldScanForEvidence;                                     // 0x05B9   (0x0001)  
	unsigned char                                      UnknownData15_6[0x6];                                       // 0x05BA   (0x0006)  MISSED
	TArray<FString>                                    ActiveWorldNames;                                           // 0x05C0   (0x0010)  


	/// Functions
	// Function /Script/Indiana.Weapon.StartUnequip
	// void StartUnequip(bool bInstantUnequip);                                                                                 // [0x18e6020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18e5e80] Final|Native|Protected 
	// Function /Script/Indiana.Weapon.OnAnimNotifyEvent
	// void OnAnimNotifyEvent(EAnimNotify AnimNotifyEvent);                                                                     // [0x18e5cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsUnequipping
	// bool IsUnequipping();                                                                                                    // [0x18e5c80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.IsThirdPersonEquipMode
	// bool IsThirdPersonEquipMode(EWeaponEquipMode EquipMode);                                                                 // [0x18e5c00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsPreviewEquipMode
	// bool IsPreviewEquipMode(EWeaponEquipMode EquipMode);                                                                     // [0x18e5b80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsOnActiveWorld
	// bool IsOnActiveWorld();                                                                                                  // [0x18e5b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsNearbyEvidence
	// bool IsNearbyEvidence();                                                                                                 // [0x18e5b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.IsHealGun
	// bool IsHealGun();                                                                                                        // [0x18e5b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.IsFirstPersonEquipMode
	// bool IsFirstPersonEquipMode(EWeaponEquipMode EquipMode);                                                                 // [0x18e5a80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsEquipping
	// bool IsEquipping();                                                                                                      // [0x18e5a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetWeaponModContainer
	// class UWeaponModContainer* GetWeaponModContainer();                                                                      // [0x18e5a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetWeaponEquipMode
	// EWeaponEquipMode GetWeaponEquipMode();                                                                                   // [0x18e5a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetStats
	// class URpgStatComponent* GetStats();                                                                                     // [0x18e59e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetRadialDamageOuterRadius
	// float GetRadialDamageOuterRadius();                                                                                      // [0x18e59b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetProjectileCollisionRadius
	// float GetProjectileCollisionRadius();                                                                                    // [0x18e5980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetPrimaryMode
	// class UWeaponMode* GetPrimaryMode();                                                                                     // [0x18e5920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetMesh
	// class UFPVSkeletalMeshComponent* GetMesh();                                                                              // [0x18e5960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetCurrentVisuals
	// class UPrimaryWeaponVisuals* GetCurrentVisuals();                                                                        // [0x18e5940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetCurrentMode
	// class UWeaponMode* GetCurrentMode();                                                                                     // [0x18e5920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetCharacterInfoComponent
	// class UCharacterInfoComponent* GetCharacterInfoComponent();                                                              // [0x18e5900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetAmmoPool
	// class UAmmoPoolBase* GetAmmoPool();                                                                                      // [0x18e58e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetAISettings
	// class UAISettings_Weapon* GetAISettings(class AIndianaAiCharacter* InOwner);                                             // [0x18e5840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.AnimEventGameplayTagData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FAnimEventGameplayTagData
{ 
	FGameplayTag                                       GameplayTag;                                                // 0x0000   (0x0008)  
	class UBasePlayAnimEventEffect*                    AnimEventEffect;                                            // 0x0008   (0x0008)  
};

/// Struct /Script/Indiana.AnimEventGameplayTagContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FAnimEventGameplayTagContainer
{ 
	TArray<FAnimEventGameplayTagData>                  AnimationData;                                              // 0x0000   (0x0010)  
};

/// Class /Script/Indiana.WeaponAnimations
/// Size: 0x02A0 (672 bytes) (0x000200 - 0x0002A0) align 8 MaxSize: 0x02A0
class UWeaponAnimations : public UWeaponVisuals
{ 
public:
	bool                                               bUseAltIKTargets;                                           // 0x0200   (0x0001)  
	bool                                               bDisableArmIK;                                              // 0x0201   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0202   (0x0006)  MISSED
	class UAnimSequence*                               JumpSequence;                                               // 0x0208   (0x0008)  
	class UAnimSequence*                               FallSequence;                                               // 0x0210   (0x0008)  
	class UAnimSequence*                               LandSequence;                                               // 0x0218   (0x0008)  
	class UAnimSequence*                               LowGravJumpSequence;                                        // 0x0220   (0x0008)  
	class UAnimSequence*                               LowGravFallSequence;                                        // 0x0228   (0x0008)  
	class UAnimSequence*                               LowGravLandSequence;                                        // 0x0230   (0x0008)  
	class UDeathMontageSet*                            DeathMontages;                                              // 0x0238   (0x0008)  
	class UAnimMontage*                                CowerMontage;                                               // 0x0240   (0x0008)  
	class UAnimMontage*                                DodgeLeftMontage;                                           // 0x0248   (0x0008)  
	class UAnimMontage*                                DodgeRightMontage;                                          // 0x0250   (0x0008)  
	class UAnimMontage*                                DodgeBackMontage;                                           // 0x0258   (0x0008)  
	class UAnimMontage*                                DodgeForwardMontage;                                        // 0x0260   (0x0008)  
	class UAnimMontage*                                TeleportEnterMontage;                                       // 0x0268   (0x0008)  
	class UAnimMontage*                                TeleportEmergingMontage;                                    // 0x0270   (0x0008)  
	class UAnimMontage*                                TeleportExitMontage;                                        // 0x0278   (0x0008)  
	FAnimEventGameplayTagContainer                     Disables;                                                   // 0x0280   (0x0010)  
	FAnimEventGameplayTagContainer                     OptionalAnimations;                                         // 0x0290   (0x0010)  
};

/// Struct /Script/Indiana.HitFlinchAnim
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FHitFlinchAnim
{ 
	FGameplayTagContainer                              BodyParts;                                                  // 0x0000   (0x0020)  
	class UAnimMontage*                                Anim;                                                       // 0x0020   (0x0008)  
};

/// Class /Script/Indiana.WeaponAnimationsCreature
/// Size: 0x02D0 (720 bytes) (0x0002A0 - 0x0002D0) align 8 MaxSize: 0x02D0
class UWeaponAnimationsCreature : public UWeaponAnimations
{ 
public:
	TArray<FHitFlinchAnim>                             HitFlinches;                                                // 0x02A0   (0x0010)  
	TArray<FHitFlinchAnim>                             BlockingHitFlinches;                                        // 0x02B0   (0x0010)  
	float                                              AimHorizontalOffset;                                        // 0x02C0   (0x0004)  
	float                                              AimVerticalOffset;                                          // 0x02C4   (0x0004)  
	float                                              AimSourceVerticalOffset;                                    // 0x02C8   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x02CC   (0x0004)  MISSED
};

/// Class /Script/Indiana.WeaponAnimationSet
/// Size: 0x0070 (112 bytes) (0x000038 - 0x000070) align 8 MaxSize: 0x0070
class UWeaponAnimationSet : public UDataAsset
{ 
public:
	class UDeathMontageSet*                            DeathMontages;                                              // 0x0038   (0x0008)  
	class UAnimMontage*                                DodgeLeftMontage;                                           // 0x0040   (0x0008)  
	class UAnimMontage*                                DodgeRightMontage;                                          // 0x0048   (0x0008)  
	class UAnimMontage*                                DodgeBackMontage;                                           // 0x0050   (0x0008)  
	float                                              WalkSpeed;                                                  // 0x0058   (0x0004)  
	float                                              RunSpeed;                                                   // 0x005C   (0x0004)  
	FAnimEventGameplayTagContainer                     Disables;                                                   // 0x0060   (0x0010)  
};

/// Class /Script/Indiana.WeaponAnimationsFPV
/// Size: 0x0460 (1120 bytes) (0x0002A0 - 0x000460) align 8 MaxSize: 0x0460
class UWeaponAnimationsFPV : public UWeaponAnimations
{ 
public:
	class UAnimSequence*                               RunSequence;                                                // 0x02A0   (0x0008)  
	class UAimOffsetBlendSpace*                        RunDirectionAimOffset;                                      // 0x02A8   (0x0008)  
	class UAnimSequence*                               IdleSequence;                                               // 0x02B0   (0x0008)  
	class UBlendSpaceBase*                             LocomotionBlendSpace;                                       // 0x02B8   (0x0008)  
	class UAimOffsetBlendSpace*                        LookAimOffset;                                              // 0x02C0   (0x0008)  
	class UAnimMontage*                                StartCrouch;                                                // 0x02C8   (0x0008)  
	class UAnimMontage*                                StopCrouch;                                                 // 0x02D0   (0x0008)  
	class UAnimSequence*                               WeaponCharge;                                               // 0x02D8   (0x0008)  
	class UAimOffsetBlendSpace*                        HitReact;                                                   // 0x02E0   (0x0008)  
	class UAnimMontage*                                BlockStart;                                                 // 0x02E8   (0x0008)  
	class UAnimSequence*                               BlockIdle;                                                  // 0x02F0   (0x0008)  
	class UAnimMontage*                                BlockEnd;                                                   // 0x02F8   (0x0008)  
	class UAnimMontage*                                BlockHit;                                                   // 0x0300   (0x0008)  
	class UAnimSequence*                               BlockRunSequence;                                           // 0x0308   (0x0008)  
	class UAimOffsetBlendSpace*                        BlockRunDirectionAimOffset;                                 // 0x0310   (0x0008)  
	class UBlendSpaceBase*                             BlockLocomotionBlendSpace;                                  // 0x0318   (0x0008)  
	class UAimOffsetBlendSpace*                        BlockLookAimOffset;                                         // 0x0320   (0x0008)  
	class UAnimMontage*                                DodgeLeftBlockMontage;                                      // 0x0328   (0x0008)  
	class UAnimMontage*                                DodgeRightBlockMontage;                                     // 0x0330   (0x0008)  
	class UAnimMontage*                                DodgeBackBlockMontage;                                      // 0x0338   (0x0008)  
	class UAnimMontage*                                DodgeForwardBlockMontage;                                   // 0x0340   (0x0008)  
	class UAnimSequence*                               BlockJumpSequence;                                          // 0x0348   (0x0008)  
	class UAnimSequence*                               BlockFallSequence;                                          // 0x0350   (0x0008)  
	class UAnimSequence*                               BlockLandSequence;                                          // 0x0358   (0x0008)  
	float                                              BlockJumpAdditiveScale;                                     // 0x0360   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0364   (0x0004)  MISSED
	class UAnimSequence*                               LowGravBlockJumpSequence;                                   // 0x0368   (0x0008)  
	class UAnimSequence*                               LowGravBlockFallSequence;                                   // 0x0370   (0x0008)  
	class UAnimSequence*                               LowGravBlockLandSequence;                                   // 0x0378   (0x0008)  
	class UAnimMontage*                                StartCrouchBlock;                                           // 0x0380   (0x0008)  
	class UAnimMontage*                                StopCrouchBlock;                                            // 0x0388   (0x0008)  
	class UAnimSequence*                               SprintSequence;                                             // 0x0390   (0x0008)  
	class UAnimSequence*                               SprintStartSequence;                                        // 0x0398   (0x0008)  
	class UAnimSequence*                               SprintEndSequence;                                          // 0x03A0   (0x0008)  
	class UAnimSequence*                               LowGravSprintSequence;                                      // 0x03A8   (0x0008)  
	class UAnimSequence*                               LowGravSprintStartSequence;                                 // 0x03B0   (0x0008)  
	class UAnimSequence*                               LowGravSprintEndSequence;                                   // 0x03B8   (0x0008)  
	class UAnimSequence*                               FineAimRunSequence;                                         // 0x03C0   (0x0008)  
	class UAimOffsetBlendSpace*                        FineAimRunDirectionAimOffset;                               // 0x03C8   (0x0008)  
	class UAnimSequence*                               FineAimIdleSequence;                                        // 0x03D0   (0x0008)  
	class UBlendSpaceBase*                             FineAimLocomotionBlendSpace;                                // 0x03D8   (0x0008)  
	class UAimOffsetBlendSpace*                        FineAimLookAimOffset;                                       // 0x03E0   (0x0008)  
	class UAnimSequence*                               FineAimJumpSequence;                                        // 0x03E8   (0x0008)  
	class UAnimSequence*                               FineAimFallSequence;                                        // 0x03F0   (0x0008)  
	class UAnimSequence*                               FineAimLandSequence;                                        // 0x03F8   (0x0008)  
	float                                              FineAimJumpAdditiveScale;                                   // 0x0400   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0404   (0x0004)  MISSED
	class UAnimSequence*                               LowGravFineAimJumpSequence;                                 // 0x0408   (0x0008)  
	class UAnimSequence*                               LowGravFineAimFallSequence;                                 // 0x0410   (0x0008)  
	class UAnimSequence*                               LowGravFineAimLandSequence;                                 // 0x0418   (0x0008)  
	class UAnimMontage*                                StartCrouchFineAim;                                         // 0x0420   (0x0008)  
	class UAnimMontage*                                StopCrouchFineAim;                                          // 0x0428   (0x0008)  
	class UAnimSequence*                               FineAimWeaponCharge;                                        // 0x0430   (0x0008)  
	class UAnimMontage*                                FineAimDodgeForwardMontage;                                 // 0x0438   (0x0008)  
	class UAnimMontage*                                FineAimDodgeLeftMontage;                                    // 0x0440   (0x0008)  
	class UAnimMontage*                                FineAimDodgeRightMontage;                                   // 0x0448   (0x0008)  
	class UAnimMontage*                                FineAimDodgeBackMontage;                                    // 0x0450   (0x0008)  
	float                                              FineAimDodgeAdditiveScale;                                  // 0x0458   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x045C   (0x0004)  MISSED
};

/// Class /Script/Indiana.WeaponAnimationsTPV
/// Size: 0x0498 (1176 bytes) (0x0002D0 - 0x000498) align 8 MaxSize: 0x0498
class UWeaponAnimationsTPV : public UWeaponAnimationsCreature
{ 
public:
	class UAimOffsetBlendSpace*                        CombatAimBlendSpace;                                        // 0x02D0   (0x0008)  
	TArray<FRandomPlayerSequenceEntryNamed>            CombatIdleSequences;                                        // 0x02D8   (0x0010)  
	class UAnimSequence*                               CombatIdle;                                                 // 0x02E8   (0x0008)  
	class UAnimSequence*                               HobbledWalkForward;                                         // 0x02F0   (0x0008)  
	float                                              HobbledWalkForwardDistance;                                 // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x02FC   (0x0004)  MISSED
	class UAnimSequence*                               CombatWalkForward;                                          // 0x0300   (0x0008)  
	float                                              CombatWalkForwardDistance;                                  // 0x0308   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x030C   (0x0004)  MISSED
	class UAnimSequence*                               CombatRunForward;                                           // 0x0310   (0x0008)  
	float                                              CombatRunForwardDistance;                                   // 0x0318   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x031C   (0x0004)  MISSED
	class UBlendSpace1D*                               ForwardBlendSpace;                                          // 0x0320   (0x0008)  
	class UBlendSpace1D*                               RunForwardBlendSpace;                                       // 0x0328   (0x0008)  
	float                                              ForwardBlendMin;                                            // 0x0330   (0x0004)  
	float                                              ForwardBlendMax;                                            // 0x0334   (0x0004)  
	class UAnimSequence*                               CombatWalkBackward;                                         // 0x0338   (0x0008)  
	float                                              CombatWalkBackwardDistance;                                 // 0x0340   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0344   (0x0004)  MISSED
	class UAnimSequence*                               CombatRunBackward;                                          // 0x0348   (0x0008)  
	float                                              CombatRunBackwardDistance;                                  // 0x0350   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0354   (0x0004)  MISSED
	class UBlendSpace1D*                               BackwardBlendSpace;                                         // 0x0358   (0x0008)  
	class UBlendSpace1D*                               RunBackwardBlendSpace;                                      // 0x0360   (0x0008)  
	float                                              BackwardBlendMin;                                           // 0x0368   (0x0004)  
	float                                              BackwardBlendMax;                                           // 0x036C   (0x0004)  
	class UAnimSequence*                               CombatWalkLeft;                                             // 0x0370   (0x0008)  
	float                                              CombatWalkLeftDistance;                                     // 0x0378   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x037C   (0x0004)  MISSED
	class UAnimSequence*                               CombatRunLeft;                                              // 0x0380   (0x0008)  
	float                                              CombatRunLeftDistance;                                      // 0x0388   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x038C   (0x0004)  MISSED
	class UBlendSpace1D*                               LeftBlendSpace;                                             // 0x0390   (0x0008)  
	class UBlendSpace1D*                               RunLeftBlendSpace;                                          // 0x0398   (0x0008)  
	float                                              LeftBlendMin;                                               // 0x03A0   (0x0004)  
	float                                              LeftBlendMax;                                               // 0x03A4   (0x0004)  
	class UAnimSequence*                               CombatWalkRight;                                            // 0x03A8   (0x0008)  
	float                                              CombatWalkRightDistance;                                    // 0x03B0   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x03B4   (0x0004)  MISSED
	class UAnimSequence*                               CombatRunRight;                                             // 0x03B8   (0x0008)  
	float                                              CombatRunRightDistance;                                     // 0x03C0   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x03C4   (0x0004)  MISSED
	class UBlendSpace1D*                               RightBlendSpace;                                            // 0x03C8   (0x0008)  
	class UBlendSpace1D*                               RunRightBlendSpace;                                         // 0x03D0   (0x0008)  
	float                                              RightBlendMin;                                              // 0x03D8   (0x0004)  
	float                                              RightBlendMax;                                              // 0x03DC   (0x0004)  
	TArray<class UAnimSequence*>                       CombatTurnInPlace;                                          // 0x03E0   (0x0010)  
	class UAnimSequence*                               CombatCrouchStartSequence;                                  // 0x03F0   (0x0008)  
	class UAnimSequence*                               CombatCrouchIdleSequence;                                   // 0x03F8   (0x0008)  
	class UAnimSequence*                               CombatCrouchEndSequence;                                    // 0x0400   (0x0008)  
	class UAnimSequence*                               ReadyFireArmPose;                                           // 0x0408   (0x0008)  
	class UAnimSequence*                               IdleFireArmPose;                                            // 0x0410   (0x0008)  
	class UAnimSequence*                               WeaponDownWalkArm;                                          // 0x0418   (0x0008)  
	class UAnimSequence*                               WeaponDownRunArm;                                           // 0x0420   (0x0008)  
	float                                              ReadyFireDelay;                                             // 0x0428   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x042C   (0x0004)  MISSED
	class UAnimSequence*                               BlockStartSequence;                                         // 0x0430   (0x0008)  
	class UAnimSequence*                               BlockIdleSequence;                                          // 0x0438   (0x0008)  
	class UAnimSequence*                               SearchingStartSequence;                                     // 0x0440   (0x0008)  
	TArray<FRandomPlayerSequenceEntryNamed>            SearchingIdleSequences;                                     // 0x0448   (0x0010)  
	TArray<FRandomPlayerSequenceEntryNamed>            DeadBodySearchSequences;                                    // 0x0458   (0x0010)  
	TArray<class UAnimMontage*>                        GetUpFromFaceDownPose;                                      // 0x0468   (0x0010)  
	TArray<class UAnimMontage*>                        GetUpFromFaceUpPose;                                        // 0x0478   (0x0010)  
	float                                              AuthoredWalkSpeed;                                          // 0x0488   (0x0004)  
	float                                              AuthoredRunSpeed;                                           // 0x048C   (0x0004)  
	float                                              RunSpeedThreshold;                                          // 0x0490   (0x0004)  
	unsigned char                                      UnknownData10_7[0x4];                                       // 0x0494   (0x0004)  MISSED
};

/// Class /Script/Indiana.WeaponAnimInstance
/// Size: 0x0310 (784 bytes) (0x0002C8 - 0x000310) align 16 MaxSize: 0x0310
class UWeaponAnimInstance : public UAnimInstance
{ 
public:
	class UWeapon*                                     Weapon;                                                     // 0x02C8   (0x0008)  
	float                                              WeaponCharge;                                               // 0x02D0   (0x0004)  
	float                                              AmmoGaugeAlpha;                                             // 0x02D4   (0x0004)  
	EIndianaDamageType                                 PrimaryDamageType;                                          // 0x02D8   (0x0001)  
	EIndianaDamageType                                 SecondaryDamageType;                                        // 0x02D9   (0x0001)  
	bool                                               WeaponIsSwinging;                                           // 0x02DA   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x02DB   (0x0001)  MISSED
	float                                              SpinProgress;                                               // 0x02DC   (0x0004)  
	bool                                               ForceSpin;                                                  // 0x02E0   (0x0001)  
	bool                                               SpinningUp;                                                 // 0x02E1   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x02E2   (0x0002)  MISSED
	float                                              ProjectileCharge;                                           // 0x02E4   (0x0004)  
	FVector                                            WeaponOffset;                                               // 0x02E8   (0x000C)  
	FRotator                                           WeaponRotation;                                             // 0x02F4   (0x000C)  
	FVector                                            WeaponScale;                                                // 0x0300   (0x000C)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x030C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Indiana.WeaponAnimInstance.WeaponCharging
	// bool WeaponCharging();                                                                                                   // [0x18e9a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.WeaponAudio
/// Size: 0x0200 (512 bytes) (0x000200 - 0x000200) align 8 MaxSize: 0x0200
class UWeaponAudio : public UWeaponVisuals
{ 
public:
};

/// Struct /Script/Indiana.WeaponModDefaultVisuals
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FWeaponModDefaultVisuals
{ 
	FGameplayTagContainer                              WeaponCategories;                                           // 0x0000   (0x0020)  
	class UModVisual*                                  DefaultVisuals;                                             // 0x0020   (0x0008)  
};

/// Class /Script/Indiana.WeaponMod
/// Size: 0x01D0 (464 bytes) (0x000118 - 0x0001D0) align 8 MaxSize: 0x01D0
class UWeaponMod : public UItem
{ 
public:
	TWeakObjectPtr<class UStaticMesh*>                 PickupMesh;                                                 // 0x0118   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0120   (0x0020)  MISSED
	SDK_UNDEFINED(16,719) /* TArray<TSoftObjectPtr<UClass*>> */ __um(EquippableWeapons);                           // 0x0140   (0x0010)  
	FGameplayTagContainer                              EquippableCategories;                                       // 0x0150   (0x0020)  
	EModSlot                                           ModificationSlot;                                           // 0x0170   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0171   (0x0007)  MISSED
	class UClass*                                      DamageTypeOverride;                                         // 0x0178   (0x0008)  
	TWeakObjectPtr<class UScopeData*>                  ScopeData;                                                  // 0x0180   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0188   (0x0020)  MISSED
	TArray<FStatModifierDescription>                   WeaponStatModifiers;                                        // 0x01A8   (0x0010)  
	TArray<FWeaponModDefaultVisuals>                   DefaultWeaponVisuals;                                       // 0x01B8   (0x0010)  
	class UClass*                                      Spell;                                                      // 0x01C8   (0x0008)  
};

/// Class /Script/Indiana.RangedBarrelMod
/// Size: 0x01D0 (464 bytes) (0x0001D0 - 0x0001D0) align 8 MaxSize: 0x01D0
class URangedBarrelMod : public UWeaponMod
{ 
public:
};

/// Class /Script/Indiana.RangedUnderbarrelMod
/// Size: 0x01D0 (464 bytes) (0x0001D0 - 0x0001D0) align 8 MaxSize: 0x01D0
class URangedUnderbarrelMod : public UWeaponMod
{ 
public:
};

/// Class /Script/Indiana.RangedSightMod
/// Size: 0x01D0 (464 bytes) (0x0001D0 - 0x0001D0) align 8 MaxSize: 0x01D0
class URangedSightMod : public UWeaponMod
{ 
public:
};

/// Class /Script/Indiana.RangedMagazineMod
/// Size: 0x01D0 (464 bytes) (0x0001D0 - 0x0001D0) align 8 MaxSize: 0x01D0
class URangedMagazineMod : public UWeaponMod
{ 
public:
};

/// Class /Script/Indiana.MeleeGripMod
/// Size: 0x01D0 (464 bytes) (0x0001D0 - 0x0001D0) align 8 MaxSize: 0x01D0
class UMeleeGripMod : public UWeaponMod
{ 
public:
};

/// Class /Script/Indiana.MeleeAttackMod
/// Size: 0x01D0 (464 bytes) (0x0001D0 - 0x0001D0) align 8 MaxSize: 0x01D0
class UMeleeAttackMod : public UWeaponMod
{ 
public:
};

/// Struct /Script/Indiana.WeaponModSlot
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 MaxSize: 0x0058
struct FWeaponModSlot
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UModVisual*                                  SlotDefaultVisuals;                                         // 0x0008   (0x0008)  
	bool                                               bModdable;                                                  // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	class UClass*                                      DefaultMod;                                                 // 0x0018   (0x0008)  
	class UWeaponMod*                                  CurrentMod;                                                 // 0x0020   (0x0008)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0028   (0x0010)  MISSED
	class UModVisual*                                  CurrentVisuals;                                             // 0x0038   (0x0008)  
	class UModVisual*                                  PendingRemovalVisuals;                                      // 0x0040   (0x0008)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0048   (0x0010)  MISSED
};

/// Struct /Script/Indiana.WeaponModVisualOverride
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FWeaponModVisualOverride
{ 
	SDK_UNDEFINED(16,720) /* TArray<TSoftObjectPtr<UClass*>> */ __um(Mods);                                        // 0x0000   (0x0010)  
	class UModVisual*                                  VisualOverride;                                             // 0x0010   (0x0008)  
};

/// Struct /Script/Indiana.WeaponModProjectileOverride
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 MaxSize: 0x0060
struct FWeaponModProjectileOverride
{ 
	SDK_UNDEFINED(16,721) /* TArray<TSoftObjectPtr<UClass*>> */ __um(Mods);                                        // 0x0000   (0x0010)  
	TSoftObjectPtr<class UClass*>                      OverrideProjectileClass;                                    // 0x0010   (0x0028)  
	TWeakObjectPtr<class UInstantHitData*>             OverrideInstantHitData;                                     // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0040   (0x0020)  MISSED
};

/// Class /Script/Indiana.WeaponModContainer
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align 8 MaxSize: 0x00B0
class UWeaponModContainer : public UObject
{ 
public:
	TMap<EModSlot, FWeaponModSlot>                     ModSlots;                                                   // 0x0030   (0x0050)  
	TArray<FWeaponModVisualOverride>                   ModVisualOverrides;                                         // 0x0080   (0x0010)  
	TArray<FWeaponModProjectileOverride>               ProjectileOverrides;                                        // 0x0090   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x00A0   (0x0010)  MISSED
};

/// Class /Script/Indiana.WeaponRadialSectionWidget
/// Size: 0x0298 (664 bytes) (0x000288 - 0x000298) align 8 MaxSize: 0x0298
class UWeaponRadialSectionWidget : public URadialSectionWidget
{ 
public:
	class UVerticalBox*                                VerticalBox;                                                // 0x0288   (0x0008)  
	class UImage*                                      Image;                                                      // 0x0290   (0x0008)  
};

/// Class /Script/Indiana.WeaponSelectWidget
/// Size: 0x0490 (1168 bytes) (0x000300 - 0x000490) align 8 MaxSize: 0x0490
class UWeaponSelectWidget : public UIndianaUserWidget
{ 
public:
	SDK_UNDEFINED(16,722) /* FMulticastInlineDelegate */ __um(OnSetWeaponEquippedDelegate);                        // 0x0300   (0x0010)  
	SDK_UNDEFINED(16,723) /* FMulticastInlineDelegate */ __um(OnSetAmmoEquippedDelegate);                          // 0x0310   (0x0010)  
	class URadialWidget*                               Radial;                                                     // 0x0320   (0x0008)  
	class UWeaponRadialSectionWidget*                  WeaponSection0;                                             // 0x0328   (0x0008)  
	class UWeaponRadialSectionWidget*                  WeaponSection1;                                             // 0x0330   (0x0008)  
	class UWeaponRadialSectionWidget*                  WeaponSection2;                                             // 0x0338   (0x0008)  
	class UWeaponRadialSectionWidget*                  WeaponSection3;                                             // 0x0340   (0x0008)  
	class UAmmoRadialSectionWidget*                    AmmoSection0;                                               // 0x0348   (0x0008)  
	class UAmmoRadialSectionWidget*                    AmmoSection1;                                               // 0x0350   (0x0008)  
	class UAmmoRadialSectionWidget*                    AmmoSection2;                                               // 0x0358   (0x0008)  
	class URadialBackgroundSectionWidget*              Section0;                                                   // 0x0360   (0x0008)  
	class URadialBackgroundSectionWidget*              Section1;                                                   // 0x0368   (0x0008)  
	class URadialBackgroundSectionWidget*              Section2;                                                   // 0x0370   (0x0008)  
	class URadialBackgroundSectionWidget*              Section3;                                                   // 0x0378   (0x0008)  
	class URadialBackgroundSectionWidget*              Section4;                                                   // 0x0380   (0x0008)  
	class URadialBackgroundSectionWidget*              Section5;                                                   // 0x0388   (0x0008)  
	class URadialBackgroundSectionWidget*              Section6;                                                   // 0x0390   (0x0008)  
	unsigned char                                      UnknownData00_7[0xF8];                                      // 0x0398   (0x00F8)  MISSED


	/// Functions
	// Function /Script/Indiana.WeaponSelectWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18e9900] Final|Native|Protected 
	// Function /Script/Indiana.WeaponSelectWidget.IsWeaponSectionValid
	// bool IsWeaponSectionValid(int32_t Index);                                                                                // [0x18e97d0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponSelectWidget.IsSectionValid
	// bool IsSectionValid(int32_t Index);                                                                                      // [0x18e9730] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponSelectWidget.IsAmmoSectionValid
	// bool IsAmmoSectionValid(int32_t Index);                                                                                  // [0x18e9600] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponSelectWidget.HasAmmo
	// bool HasAmmo();                                                                                                          // [0x18e95d0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.WeaponStateWidget
/// Size: 0x0330 (816 bytes) (0x000300 - 0x000330) align 8 MaxSize: 0x0330
class UWeaponStateWidget : public UIndianaUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0300   (0x0008)  MISSED
	class UTextBlockBase*                              WeaponValueTextBlock;                                       // 0x0308   (0x0008)  
	class UTextBlockBase*                              WeaponValueMaxTextBlock;                                    // 0x0310   (0x0008)  
	class UHorizontalBox*                              MaxAmmoContainer;                                           // 0x0318   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0320   (0x0010)  MISSED
};

/// Class /Script/Indiana.WeaponStateWidgetComponent
/// Size: 0x0680 (1664 bytes) (0x000670 - 0x000680) align 16 MaxSize: 0x0680
class UWeaponStateWidgetComponent : public UIndianaWidgetComponent
{ 
public:
	float                                              FineAimScale;                                               // 0x0670   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0674   (0x000C)  MISSED
};

/// Class /Script/Indiana.WeaponStatusEffectApplier
/// Size: 0x0060 (96 bytes) (0x000048 - 0x000060) align 8 MaxSize: 0x0060
class UWeaponStatusEffectApplier : public UStatusEffectApplier
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0048   (0x0008)  MISSED
	class UStatusEffect*                               WeaponFireEffect;                                           // 0x0050   (0x0008)  
	class UStatusEffect*                               WeaponHitTargetEffect;                                      // 0x0058   (0x0008)  
};

/// Class /Script/Indiana.WeaponVisualStateModVisual
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align 8 MaxSize: 0x0078
class UWeaponVisualStateModVisual : public UModVisual
{ 
public:
	FName                                              Event;                                                      // 0x0068   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0070   (0x0008)  MISSED
};

/// Class /Script/Indiana.WindowsSaveGameManager
/// Size: 0x06B0 (1712 bytes) (0x000690 - 0x0006B0) align 16 MaxSize: 0x06B0
class UWindowsSaveGameManager : public USaveGameManager
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0690   (0x0020)  MISSED
};

/// Class /Script/Indiana.Workbench
/// Size: 0x02C8 (712 bytes) (0x0002B8 - 0x0002C8) align 8 MaxSize: 0x02C8
class AWorkbench : public AActor
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x02B8   (0x0008)  MISSED
	class UInteractableComponent*                      InteractableComponent;                                      // 0x02C0   (0x0008)  
};

/// Class /Script/Indiana.WorkbenchTransactionDetails
/// Size: 0x0300 (768 bytes) (0x000300 - 0x000300) align 8 MaxSize: 0x0300
class UWorkbenchTransactionDetails : public UIndianaUserWidget
{ 
public:
};

/// Class /Script/Indiana.WorkbenchWidget
/// Size: 0x0358 (856 bytes) (0x000308 - 0x000358) align 8 MaxSize: 0x0358
class UWorkbenchWidget : public UIndianaInterfaceUserWidget
{ 
public:
	unsigned char                                      UnknownData00_8[0x8];                                       // 0x0308   (0x0008)  MISSED
	class UWBModificationPageWidget*                   ModificationPage;                                           // 0x0310   (0x0008)  
	class UWBUpgradePageWidget*                        UpgradePage;                                                // 0x0318   (0x0008)  
	class UWBRepairPageWidget*                         RepairPage;                                                 // 0x0320   (0x0008)  
	class UWBBreakdownPageWidget*                      BreakdownPage;                                              // 0x0328   (0x0008)  
	class UNavigationGroupWidget*                      NavigationBar;                                              // 0x0330   (0x0008)  
	class UScrollBox*                                  PageScrollBox;                                              // 0x0338   (0x0008)  
	class UScrollingWidgetGroup*                       ScrollingWidgetGroup;                                       // 0x0340   (0x0008)  
	class UPlayerStatsWidget*                          PlayerStats;                                                // 0x0348   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0350   (0x0008)  MISSED
};

/// Struct /Script/Indiana.HitTypeData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FHitTypeData
{ 
	class UCurveVector*                                Curve;                                                      // 0x0000   (0x0008)  
	float                                              AnimationDuration;                                          // 0x0008   (0x0004)  
	float                                              HorizontalMovementScalarMin;                                // 0x000C   (0x0004)  
	float                                              HorizontalMovementScalarMax;                                // 0x0010   (0x0004)  
	float                                              VerticalMovementScalarMin;                                  // 0x0014   (0x0004)  
	float                                              VerticalMovementScalarMax;                                  // 0x0018   (0x0004)  
	ETextDirectionType                                 TextMovementDirectionType;                                  // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Indiana.DamageTypeColors
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 MaxSize: 0x0002
struct FDamageTypeColors
{ 
	EIndianaUIColorType                                TextColor;                                                  // 0x0000   (0x0001)  
	EIndianaUIColorType                                OutlineColor;                                               // 0x0001   (0x0001)  
};

/// Class /Script/Indiana.WorldSpaceDamageTextGenerator
/// Size: 0x0100 (256 bytes) (0x000030 - 0x000100) align 8 MaxSize: 0x0100
class UWorldSpaceDamageTextGenerator : public UObject
{ 
public:
	FHitTypeData                                       WeakspotHits;                                               // 0x0030   (0x0020)  
	FHitTypeData                                       StandardHits;                                               // 0x0050   (0x0020)  
	FHitTypeData                                       GrazeHits;                                                  // 0x0070   (0x0020)  
	TMap<EIndianaDamageType, FDamageTypeColors>        DamageTypeColors;                                           // 0x0090   (0x0050)  
	FDamageTypeColors                                  HealingColor;                                               // 0x00E0   (0x0002)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x00E2   (0x0002)  MISSED
	float                                              PlayerTextScalar;                                           // 0x00E4   (0x0004)  
	float                                              CompanionTextScalar;                                        // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	class UClass*                                      DamageTextSubclass;                                         // 0x00F0   (0x0008)  
	class UActorPool*                                  DamageTextPool;                                             // 0x00F8   (0x0008)  
};

/// Class /Script/Indiana.WorldSpaceDamageWidgetComponent
/// Size: 0x0680 (1664 bytes) (0x000670 - 0x000680) align 16 MaxSize: 0x0680
class UWorldSpaceDamageWidgetComponent : public UIndianaWidgetComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0670   (0x0010)  MISSED
};

/// Class /Script/Indiana.WormAnimInstance
/// Size: 0x09A0 (2464 bytes) (0x000950 - 0x0009A0) align 16 MaxSize: 0x09A0
class UWormAnimInstance : public UTPVAnimInstance
{ 
public:
	unsigned char                                      UnknownData00_8[0xC];                                       // 0x0950   (0x000C)  MISSED
	float                                              IKStrength;                                                 // 0x095C   (0x0004)  
	float                                              HipBlendSpeed;                                              // 0x0960   (0x0004)  
	FVector                                            HipOffset;                                                  // 0x0964   (0x000C)  
	TArray<class UAnimSequence*>                       LocomotionTurnInPlace;                                      // 0x0970   (0x0010)  
	TArray<class UAnimSequence*>                       CombatTurnInPlace;                                          // 0x0980   (0x0010)  
	bool                                               bIsTeleporting;                                             // 0x0990   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0991   (0x0007)  MISSED
	class UAnimSequence*                               TeleportIdleAnim;                                           // 0x0998   (0x0008)  
};

/// Struct /Script/Indiana.CauseDamageInfo
/// Size: 0x0110 (272 bytes) (0x000000 - 0x000110) align 8 MaxSize: 0x0110
struct FCauseDamageInfo
{ 
	TWeakObjectPtr<class AController*>                 InstigatorController;                                       // 0x0000   (0x0008)  
	TWeakObjectPtr<class AActor*>                      SourceActor;                                                // 0x0008   (0x0008)  
	TWeakObjectPtr<class AActor*>                      Target;                                                     // 0x0010   (0x0008)  
	EDamageEventType                                   DamageEventType;                                            // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              DesiredDamage;                                              // 0x001C   (0x0004)  
	float                                              ActualDamage;                                               // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FVector_NetQuantize                                ImpactLocation;                                             // 0x0028   (0x000C)  
	FVector_NetQuantize                                ImpactDirection;                                            // 0x0034   (0x000C)  
	FName                                              HitBone;                                                    // 0x0040   (0x0008)  
	TWeakObjectPtr<class UPhysicalMaterial*>           HitPhysMaterial;                                            // 0x0048   (0x0008)  
	FGameplayTag                                       BodyPartHit;                                                // 0x0050   (0x0008)  
	class UClass*                                      DamageType;                                                 // 0x0058   (0x0008)  
	FGameplayTag                                       WeaponCategory;                                             // 0x0060   (0x0008)  
	unsigned char                                      UnknownData02_7[0xA8];                                      // 0x0068   (0x00A8)  MISSED
};

/// Struct /Script/Indiana.ItemStackSplit
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FItemStackSplit
{ 
	FItemStack                                         ItemStack;                                                  // 0x0000   (0x0010)  
	int32_t                                            SplitCount;                                                 // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Indiana.InteractionDescription
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FInteractionDescription
{ 
	class AActor*                                      Interactee;                                                 // 0x0000   (0x0008)  
	class AIndianaCharacter*                           Initiator;                                                  // 0x0008   (0x0008)  
	EInteractionType                                   Interaction;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	TWeakObjectPtr<class UInteractableComponent*>      Interactable;                                               // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x001C   (0x000C)  MISSED
};

/// Struct /Script/Indiana.ComponentEvent
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FComponentEvent
{ 
	class UWidget*                                     Dispatcher;                                                 // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0008   (0x0028)  MISSED
};

/// Struct /Script/Indiana.ButtonEvent
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
struct FButtonEvent : FComponentEvent
{ 
};

/// Struct /Script/Indiana.SliderEvent
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align 8 MaxSize: 0x0038
struct FSliderEvent : FComponentEvent
{ 
	float                                              Value;                                                      // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Indiana.AchievementProgress
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 MaxSize: 0x0004
struct FAchievementProgress
{ 
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x0000   (0x0004)  MISSED
};

/// Struct /Script/Indiana.AIDetectionData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FAIDetectionData
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Indiana.AISoundDetectionData
/// Size: 0x0040 (64 bytes) (0x000018 - 0x000040) align 8 MaxSize: 0x0040
struct FAISoundDetectionData : FAIDetectionData
{ 
	ESoundDetectionType                                SoundType;                                                  // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	TWeakObjectPtr<class AActor*>                      ShoutTarget;                                                // 0x001C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x1C];                                      // 0x0024   (0x001C)  MISSED
};

/// Struct /Script/Indiana.JointDriverData
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 16 MaxSize: 0x0090
struct FJointDriverData
{ 
	FName                                              IKChainName;                                                // 0x0000   (0x0008)  
	EFootID                                            FootID;                                                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              FootDownDistance;                                           // 0x000C   (0x0004)  
	float                                              FootUpDistance;                                             // 0x0010   (0x0004)  
	FBoneReference                                     BoneThatWillBeIKed;                                         // 0x0014   (0x0010)  
	FBoneReference                                     BoneToModify;                                               // 0x0024   (0x0010)  
	FBoneReference                                     UpperLegJoint;                                              // 0x0034   (0x0010)  
	FBoneReference                                     HipBoneToUseForHeightCalculation;                           // 0x0044   (0x0010)  
	unsigned char                                      UnknownData01_7[0x3C];                                      // 0x0054   (0x003C)  MISSED
};

/// Struct /Script/Indiana.AnimNode_BatchJointDriver
/// Size: 0x01E0 (480 bytes) (0x0000C8 - 0x0001E0) align 8 MaxSize: 0x01E0
struct FAnimNode_BatchJointDriver : FAnimNode_SkeletalControlBase
{ 
	TArray<FJointDriverData>                           Legs;                                                       // 0x00C8   (0x0010)  
	float                                              PlantRollAmount;                                            // 0x00D8   (0x0004)  
	float                                              MaxPitchClamp;                                              // 0x00DC   (0x0004)  
	float                                              MinPitchClamp;                                              // 0x00E0   (0x0004)  
	FName                                              BackLeftName;                                               // 0x00E4   (0x0008)  
	FName                                              BackRightName;                                              // 0x00EC   (0x0008)  
	FName                                              FrontLeftName;                                              // 0x00F4   (0x0008)  
	FName                                              FrontRightName;                                             // 0x00FC   (0x0008)  
	float                                              MaxHeightCompensation;                                      // 0x0104   (0x0004)  
	bool                                               SetTransformOnMiss;                                         // 0x0108   (0x0001)  
	bool                                               bDoHeightCompensation;                                      // 0x0109   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x010A   (0x0002)  MISSED
	float                                              GroundRollMultiplier;                                       // 0x010C   (0x0004)  
	FBoneReference                                     HipBoneToModify;                                            // 0x0110   (0x0010)  
	FBoneReference                                     BipedHipCounterBone;                                        // 0x0120   (0x0010)  
	FBoneReference                                     ConversationCameraBone;                                     // 0x0130   (0x0010)  
	float                                              HipAdjustRange;                                             // 0x0140   (0x0004)  
	float                                              HipTranslationSpeedRun;                                     // 0x0144   (0x0004)  
	float                                              HipTranslationSpeedIdle;                                    // 0x0148   (0x0004)  
	float                                              HipLimitSpeedRun;                                           // 0x014C   (0x0004)  
	float                                              HipRotationSpeedRun;                                        // 0x0150   (0x0004)  
	float                                              HipTranslationSpeed;                                        // 0x0154   (0x0004)  
	float                                              HipLimitSpeed;                                              // 0x0158   (0x0004)  
	float                                              HipRotationSpeed;                                           // 0x015C   (0x0004)  
	float                                              FootTranslationSpeed;                                       // 0x0160   (0x0004)  
	float                                              FootTranslationSpeedRun;                                    // 0x0164   (0x0004)  
	float                                              FootRotationSpeed;                                          // 0x0168   (0x0004)  
	float                                              FootRotationSpeedRun;                                       // 0x016C   (0x0004)  
	float                                              MaxTickBeforeReset;                                         // 0x0170   (0x0004)  
	bool                                               bIgnoreNormalRays;                                          // 0x0174   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6B];                                      // 0x0175   (0x006B)  MISSED
};

/// Struct /Script/Indiana.AnimNode_BatchModify
/// Size: 0x00D8 (216 bytes) (0x0000C8 - 0x0000D8) align 8 MaxSize: 0x00D8
struct FAnimNode_BatchModify : FAnimNode_SkeletalControlBase
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x00C8   (0x0010)  MISSED
};

/// Struct /Script/Indiana.AnimNode_BoneMatch
/// Size: 0x0130 (304 bytes) (0x0000C8 - 0x000130) align 16 MaxSize: 0x0130
struct FAnimNode_BoneMatch : FAnimNode_SkeletalControlBase
{ 
	FBoneReference                                     SourceBone;                                                 // 0x00C8   (0x0010)  
	FBoneReference                                     TargetBone;                                                 // 0x00D8   (0x0010)  
	unsigned char                                      UnknownData00_7[0x48];                                      // 0x00E8   (0x0048)  MISSED
};

/// Struct /Script/Indiana.AnimNode_CurveSlot
/// Size: 0x00B0 (176 bytes) (0x000010 - 0x0000B0) align 16 MaxSize: 0x00B0
struct FAnimNode_CurveSlot : FAnimNode_Base
{ 
	FPoseLink                                          Source;                                                     // 0x0010   (0x0010)  
	FName                                              SlotName;                                                   // 0x0020   (0x0008)  
	bool                                               bAlwaysUpdateSourcePose;                                    // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_7[0x87];                                      // 0x0029   (0x0087)  MISSED
};

/// Struct /Script/Indiana.AnimNode_EyeLidLimitEntry
/// Size: 0x005C (92 bytes) (0x000000 - 0x00005C) align 4 MaxSize: 0x005C
struct FAnimNode_EyeLidLimitEntry
{ 
	FBoneReference                                     UpperEyelidBone;                                            // 0x0000   (0x0010)  
	FBoneReference                                     UpperEyelidMidBone;                                         // 0x0010   (0x0010)  
	FBoneReference                                     LowerEyelidBone;                                            // 0x0020   (0x0010)  
	FBoneReference                                     LowerEyelidMidBone;                                         // 0x0030   (0x0010)  
	bool                                               bFlipAngles;                                                // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1B];                                      // 0x0041   (0x001B)  MISSED
};

/// Struct /Script/Indiana.AnimNode_EyeLidLimits
/// Size: 0x00E8 (232 bytes) (0x0000C8 - 0x0000E8) align 8 MaxSize: 0x00E8
struct FAnimNode_EyeLidLimits : FAnimNode_SkeletalControlBase
{ 
	float                                              UpperLidCorrectAmount;                                      // 0x00C8   (0x0004)  
	float                                              OverlapDistance;                                            // 0x00CC   (0x0004)  
	TArray<FAnimNode_EyeLidLimitEntry>                 EyeLidEntries;                                              // 0x00D0   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x00E0   (0x0008)  MISSED
};

/// Struct /Script/Indiana.AnimNode_EyeLookAt
/// Size: 0x01C0 (448 bytes) (0x0000C8 - 0x0001C0) align 16 MaxSize: 0x01C0
struct FAnimNode_EyeLookAt : FAnimNode_SkeletalControlBase
{ 
	FBoneReference                                     BoneToModify;                                               // 0x00C8   (0x0010)  
	FBoneReference                                     LookAtBone;                                                 // 0x00D8   (0x0010)  
	FName                                              LookAtSocket;                                               // 0x00E8   (0x0008)  
	FVector                                            LookAtLocation;                                             // 0x00F0   (0x000C)  
	TEnumAsByte<EAxisOption>                           LookAtAxis;                                                 // 0x00FC   (0x0001)  
	bool                                               bUseLookUpAxis;                                             // 0x00FD   (0x0001)  
	TEnumAsByte<EAxisOption>                           LookUpAxis;                                                 // 0x00FE   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x00FF   (0x0001)  MISSED
	float                                              LookAtClampUp;                                              // 0x0100   (0x0004)  
	float                                              LookAtClampRight;                                           // 0x0104   (0x0004)  
	float                                              InterpolationTime;                                          // 0x0108   (0x0004)  
	bool                                               bEnableDebug;                                               // 0x010C   (0x0001)  
	bool                                               bClearRotationFirst;                                        // 0x010D   (0x0001)  
	unsigned char                                      UnknownData01_7[0xB2];                                      // 0x010E   (0x00B2)  MISSED
};

/// Struct /Script/Indiana.AnimNode_JointDriver
/// Size: 0x0170 (368 bytes) (0x0000C8 - 0x000170) align 16 MaxSize: 0x0170
struct FAnimNode_JointDriver : FAnimNode_SkeletalControlBase
{ 
	FName                                              IKChainName;                                                // 0x00C8   (0x0008)  
	EFootID                                            FootID;                                                     // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00D1   (0x0003)  MISSED
	float                                              FootDownDistance;                                           // 0x00D4   (0x0004)  
	float                                              FootUpDistance;                                             // 0x00D8   (0x0004)  
	FBoneReference                                     BoneThatWillBeIKed;                                         // 0x00DC   (0x0010)  
	FBoneReference                                     BoneToModify;                                               // 0x00EC   (0x0010)  
	FBoneReference                                     UpperLegJoint;                                              // 0x00FC   (0x0010)  
	FBoneReference                                     HipBoneToUseForHeightCalculation;                           // 0x010C   (0x0010)  
	float                                              PlantRollAmount;                                            // 0x011C   (0x0004)  
	float                                              MaxPitchClamp;                                              // 0x0120   (0x0004)  
	float                                              MinPitchClamp;                                              // 0x0124   (0x0004)  
	float                                              MaxHeightCompensation;                                      // 0x0128   (0x0004)  
	bool                                               SetTransformOnMiss;                                         // 0x012C   (0x0001)  
	bool                                               bDoHeightCompensation;                                      // 0x012D   (0x0001)  
	bool                                               bPerformVelocityCompensation;                               // 0x012E   (0x0001)  
	unsigned char                                      UnknownData01_7[0x41];                                      // 0x012F   (0x0041)  MISSED
};

/// Struct /Script/Indiana.AnimNode_LocomotionPlay
/// Size: 0x0090 (144 bytes) (0x000080 - 0x000090) align 8 MaxSize: 0x0090
struct FAnimNode_LocomotionPlay : FAnimNode_SequencePlayer
{ 
	int32_t                                            CurrentSlot;                                                // 0x0080   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0084   (0x000C)  MISSED
};

/// Struct /Script/Indiana.AnimNode_RandomSequenceNamed
/// Size: 0x0088 (136 bytes) (0x000010 - 0x000088) align 8 MaxSize: 0x0088
struct FAnimNode_RandomSequenceNamed : FAnimNode_Base
{ 
	bool                                               bShuffleMode;                                               // 0x0010   (0x0001)  
	bool                                               bRandomTimeOnInitialize;                                    // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0012   (0x0002)  MISSED
	float                                              RandomTimePercentage;                                       // 0x0014   (0x0004)  
	float                                              RandomTimeStart;                                            // 0x0018   (0x0004)  
	FName                                              ListName;                                                   // 0x001C   (0x0008)  
	FName                                              SetUpdateName;                                              // 0x0024   (0x0008)  
	float                                              PlayRate;                                                   // 0x002C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x58];                                      // 0x0030   (0x0058)  MISSED
};

/// Struct /Script/Indiana.AnimNode_RotateBoneAboutBone
/// Size: 0x0100 (256 bytes) (0x0000C8 - 0x000100) align 8 MaxSize: 0x0100
struct FAnimNode_RotateBoneAboutBone : FAnimNode_SkeletalControlBase
{ 
	FBoneReference                                     SourceBone;                                                 // 0x00C8   (0x0010)  
	FBoneReference                                     TargetBone;                                                 // 0x00D8   (0x0010)  
	FRotator                                           Rotation;                                                   // 0x00E8   (0x000C)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x00F4   (0x000C)  MISSED
};

/// Struct /Script/Indiana.BannedNameReaderData
/// Size: 0x0018 (24 bytes) (0x000008 - 0x000018) align 8 MaxSize: 0x0018
struct FBannedNameReaderData : FTableRowBase
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0008   (0x0010)  MISSED
};

/// Struct /Script/Indiana.TrackingRegion
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align 8 MaxSize: 0x00F0
struct FTrackingRegion
{ 
	unsigned char                                      UnknownData00_2[0xF0];                                      // 0x0000   (0x00F0)  MISSED
};

/// Struct /Script/Indiana.BodyTrackingRegion
/// Size: 0x0118 (280 bytes) (0x0000F0 - 0x000118) align 8 MaxSize: 0x0118
struct FBodyTrackingRegion : FTrackingRegion
{ 
	unsigned char                                      UnknownData00_8[0x18];                                      // 0x00F0   (0x0018)  MISSED
	class ULocomotionLogicComponent*                   LocomotionLogic;                                            // 0x0108   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0110   (0x0008)  MISSED
};

/// Struct /Script/Indiana.CharacterCreationAttributeData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FCharacterCreationAttributeData
{ 
	TMap<EAttribute, ECharacterAttributeRange>         AttributeValues;                                            // 0x0000   (0x0050)  
};

/// Struct /Script/Indiana.CharacterCreationSkillData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FCharacterCreationSkillData
{ 
	TArray<ESkillCategory>                             StartingSkillCategories;                                    // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Struct /Script/Indiana.CharacterCreationPerkData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FCharacterCreationPerkData
{ 
	TArray<class UClass*>                              SelectedPerks;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/Indiana.CreationTemplate
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 MaxSize: 0x00A8
struct FCreationTemplate
{ 
	FLocString                                         TitleTextReference;                                         // 0x0000   (0x0008)  
	FLocString                                         BodyTextReference;                                          // 0x0008   (0x0008)  
	class UClass*                                      Aptitude;                                                   // 0x0010   (0x0008)  
	FCharacterCreationAttributeData                    AttributeData;                                              // 0x0018   (0x0050)  
	FCharacterCreationSkillData                        SkillData;                                                  // 0x0068   (0x0020)  
	FCharacterCreationPerkData                         PerkData;                                                   // 0x0088   (0x0010)  
	class UAppearancePreset*                           AppearancePreset;                                           // 0x0098   (0x0008)  
	bool                                               bIsCustomCharacter;                                         // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00A1   (0x0007)  MISSED
};

/// Struct /Script/Indiana.AttributeMetaData
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 MaxSize: 0x0002
struct FAttributeMetaData
{ 
	char                                               PointedAttributeIndex;                                      // 0x0000   (0x0001)  
	bool                                               bPointIsUp;                                                 // 0x0001   (0x0001)  
};

/// Struct /Script/Indiana.ScannerData
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 MaxSize: 0x00A8
struct FScannerData
{ 
	unsigned char                                      UnknownData00_2[0xA8];                                      // 0x0000   (0x00A8)  MISSED
};

/// Struct /Script/Indiana.ScannerArmorData
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 MaxSize: 0x0060
struct FScannerArmorData
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Indiana.ChatterCooldownSet
/// Size: 0x0030 (48 bytes) (0x000008 - 0x000030) align 8 MaxSize: 0x0030
struct FChatterCooldownSet : FGameDataStructure
{ 
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0008   (0x0028)  MISSED
};

/// Struct /Script/Indiana.ChatterCooldownSettings
/// Size: 0x0018 (24 bytes) (0x000008 - 0x000018) align 8 MaxSize: 0x0018
struct FChatterCooldownSettings : FGameDataStructure
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0008   (0x0010)  MISSED
};

/// Struct /Script/Indiana.ChatterEventsGameDataReferenceID
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align 8 MaxSize: 0x0018
struct FChatterEventsGameDataReferenceID : FGameDataReferenceID
{ 
};

/// Struct /Script/Indiana.CompanionCommandMoveToLocation
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 MaxSize: 0x0040
struct FCompanionCommandMoveToLocation
{ 
	unsigned char                                      UnknownData00_2[0x40];                                      // 0x0000   (0x0040)  MISSED
};

/// Struct /Script/Indiana.LocationCost
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FLocationCost
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Indiana.AddictionModifier
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FAddictionModifier
{ 
	FGameplayTag                                       AddictionTag;                                               // 0x0000   (0x0008)  
	float                                              AmountToRemove;                                             // 0x0008   (0x0004)  
};

/// Struct /Script/Indiana.NodeConfig
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 MaxSize: 0x0018
struct FNodeConfig
{ 
	bool                                               bEnabled;                                                   // 0x0000   (0x0001)  
	bool                                               bOverrideCameraProperties;                                  // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	FCameraProperties                                  CameraProperties;                                           // 0x0008   (0x0010)  
};

/// Struct /Script/Indiana.ReceiveDamageData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 MaxSize: 0x0048
struct FReceiveDamageData
{ 
	unsigned char                                      UnknownData00_2[0x48];                                      // 0x0000   (0x0048)  MISSED
};

/// Struct /Script/Indiana.IndianaGenericDamageEvent
/// Size: 0x00D8 (216 bytes) (0x000010 - 0x0000D8) align 8 MaxSize: 0x00D8
struct FIndianaGenericDamageEvent : FDamageEvent
{ 
	unsigned char                                      UnknownData00_1[0xC8];                                      // 0x0010   (0x00C8)  MISSED
};

/// Struct /Script/Indiana.IndianaPointDamageEvent
/// Size: 0x0170 (368 bytes) (0x0000A8 - 0x000170) align 8 MaxSize: 0x0170
struct FIndianaPointDamageEvent : FPointDamageEvent
{ 
	unsigned char                                      UnknownData00_1[0xC8];                                      // 0x00A8   (0x00C8)  MISSED
};

/// Struct /Script/Indiana.IndianaRadialDamageEvent
/// Size: 0x0108 (264 bytes) (0x000040 - 0x000108) align 8 MaxSize: 0x0108
struct FIndianaRadialDamageEvent : FRadialDamageEvent
{ 
	unsigned char                                      UnknownData00_1[0xC8];                                      // 0x0040   (0x00C8)  MISSED
};

/// Struct /Script/Indiana.DeathPoseData
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 MaxSize: 0x0068
struct FDeathPoseData
{ 
	unsigned char                                      UnknownData00_2[0x68];                                      // 0x0000   (0x0068)  MISSED
};

/// Struct /Script/Indiana.DeathBodyInstanceData
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 16 MaxSize: 0x0060
struct FDeathBodyInstanceData
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Indiana.EventEffectParams
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 MaxSize: 0x0080
struct FEventEffectParams
{ 
	unsigned char                                      UnknownData00_2[0x80];                                      // 0x0000   (0x0080)  MISSED
};

/// Struct /Script/Indiana.EyesTrackingRegion
/// Size: 0x00F0 (240 bytes) (0x0000F0 - 0x0000F0) align 8 MaxSize: 0x00F0
struct FEyesTrackingRegion : FTrackingRegion
{ 
};

/// Struct /Script/Indiana.FaceFxRigsGameDataReferenceID
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align 8 MaxSize: 0x0018
struct FFaceFxRigsGameDataReferenceID : FGameDataReferenceID
{ 
};

/// Struct /Script/Indiana.FaceFxRigStructure
/// Size: 0x0020 (32 bytes) (0x000008 - 0x000020) align 8 MaxSize: 0x0020
struct FFaceFxRigStructure : FGameDataStructure
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0008   (0x0018)  MISSED
};

/// Struct /Script/Indiana.BlockedActorData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FBlockedActorData
{ 
	int32_t                                            Slot;                                                       // 0x0000   (0x0004)  
	EEntryLocationStatus                               LocationStatus;                                             // 0x0004   (0x0004)  
	SDK_UNDEFINED(16,724) /* TArray<TWeakObjectPtr<AActor*>> */ __um(BlockingActors);                              // 0x0008   (0x0010)  
	SDK_UNDEFINED(16,725) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(BlockingComponents);             // 0x0018   (0x0010)  
};

/// Struct /Script/Indiana.DelayedEventData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FDelayedEventData
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Indiana.ReputationActionModifiers
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FReputationActionModifiers
{ 
	float                                              BribeModifier;                                              // 0x0000   (0x0004)  
	float                                              TalkModifier;                                               // 0x0004   (0x0004)  
	float                                              FightModifier;                                              // 0x0008   (0x0004)  
};

/// Struct /Script/Indiana.MeleeAnim
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FMeleeAnim
{ 
	EWeaponEvent                                       WeaponEvent;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              AnimTime;                                                   // 0x0004   (0x0004)  
	bool                                               bLoop;                                                      // 0x0008   (0x0001)  
	bool                                               bSkippable;                                                 // 0x0009   (0x0001)  
	bool                                               bSkipIfHoldReleased;                                        // 0x000A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x000B   (0x0001)  MISSED
};

/// Struct /Script/Indiana.TransitionGroupElement
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FTransitionGroupElement
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Indiana.HeadTrackingRegion
/// Size: 0x0150 (336 bytes) (0x0000F0 - 0x000150) align 8 MaxSize: 0x0150
struct FHeadTrackingRegion : FTrackingRegion
{ 
	unsigned char                                      UnknownData00_1[0x60];                                      // 0x00F0   (0x0060)  MISSED
};

/// Struct /Script/Indiana.PerceptionRangeScalar
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FPerceptionRangeScalar
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Indiana.IndianaAINoiseEvent
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align 8 MaxSize: 0x0030
struct FIndianaAINoiseEvent : FAINoiseEvent
{ 
};

/// Struct /Script/Indiana.CompanionInfo
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FCompanionInfo
{ 
	float                                              Health;                                                     // 0x0000   (0x0004)  
	float                                              DTBody;                                                     // 0x0004   (0x0004)  
	float                                              DTHead;                                                     // 0x0008   (0x0004)  
};

/// Struct /Script/Indiana.TrajectoryResult
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FTrajectoryResult
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Indiana.InteractPayloadParamDescription
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 MaxSize: 0x0020
struct FInteractPayloadParamDescription
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Indiana.NavigationCategory
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 MaxSize: 0x0090
struct FNavigationCategory
{ 
	FLocString                                         Name;                                                       // 0x0000   (0x0008)  
	FSlateBrush                                        Brush;                                                      // 0x0008   (0x0088)  
};

/// Struct /Script/Indiana.MeleeEQSResult
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 MaxSize: 0x0010
struct FMeleeEQSResult
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Indiana.MeleeAttacker
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 MaxSize: 0x0018
struct FMeleeAttacker
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Indiana.ObjectRefCounter
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 MaxSize: 0x0030
struct FObjectRefCounter
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Indiana.ObjectiveWaypointGameDataReferenceID
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align 8 MaxSize: 0x0018
struct FObjectiveWaypointGameDataReferenceID : FGameDataReferenceID
{ 
};

/// Struct /Script/Indiana.RandomBank
/// Size: 0x0020 (32 bytes) (0x000008 - 0x000020) align 8 MaxSize: 0x0020
struct FRandomBank : FGameDataStructure
{ 
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0008   (0x0018)  MISSED
};

/// Struct /Script/Indiana.RandomBankGameDataReferenceID
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align 8 MaxSize: 0x0018
struct FRandomBankGameDataReferenceID : FGameDataReferenceID
{ 
};

/// Struct /Script/Indiana.RandomTextEntry
/// Size: 0x0010 (16 bytes) (0x000008 - 0x000010) align 8 MaxSize: 0x0010
struct FRandomTextEntry : FGameDataStructure
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Indiana.SharedStateStubData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 MaxSize: 0x001C
struct FSharedStateStubData
{ 
	unsigned char                                      UnknownData00_2[0x1C];                                      // 0x0000   (0x001C)  MISSED
};

/// Struct /Script/Indiana.SaveGameGeneralMetadata
/// Size: 0x00E8 (232 bytes) (0x000000 - 0x0000E8) align 8 MaxSize: 0x00E8
struct FSaveGameGeneralMetadata
{ 
	unsigned char                                      UnknownData00_2[0xE8];                                      // 0x0000   (0x00E8)  MISSED
};

/// Struct /Script/Indiana.LevelReference
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 MaxSize: 0x0028
struct FLevelReference
{ 
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Indiana.GenericGameStateHeader
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 MaxSize: 0x000C
struct FGenericGameStateHeader
{ 
	unsigned char                                      UnknownData00_2[0xC];                                       // 0x0000   (0x000C)  MISSED
};

/// Struct /Script/Indiana.GenericVersionedGameStateHeader
/// Size: 0x0010 (16 bytes) (0x00000C - 0x000010) align 4 MaxSize: 0x0010
struct FGenericVersionedGameStateHeader : FGenericGameStateHeader
{ 
	unsigned char                                      UnknownData00_1[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/Indiana.CompanionGameStateHeader
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align 8 MaxSize: 0x0040
struct FCompanionGameStateHeader : FGenericVersionedGameStateHeader
{ 
	unsigned char                                      UnknownData00_1[0x30];                                      // 0x0010   (0x0030)  MISSED
};

/// Struct /Script/Indiana.PlayerGameStateHeader
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align 8 MaxSize: 0x0020
struct FPlayerGameStateHeader : FGenericVersionedGameStateHeader
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Struct /Script/Indiana.ActorGameStateHeader
/// Size: 0x0028 (40 bytes) (0x00000C - 0x000028) align 4 MaxSize: 0x0028
struct FActorGameStateHeader : FGenericGameStateHeader
{ 
	unsigned char                                      UnknownData00_1[0x1C];                                      // 0x000C   (0x001C)  MISSED
};

/// Struct /Script/Indiana.LevelGameStateHeader
/// Size: 0x0038 (56 bytes) (0x000010 - 0x000038) align 8 MaxSize: 0x0038
struct FLevelGameStateHeader : FGenericVersionedGameStateHeader
{ 
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0010   (0x0028)  MISSED
};

/// Struct /Script/Indiana.GenericVersionedWithDependenciesGameStateHeader
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align 8 MaxSize: 0x0020
struct FGenericVersionedWithDependenciesGameStateHeader : FGenericVersionedGameStateHeader
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Struct /Script/Indiana.DependencyLoadRequest
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FDependencyLoadRequest
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Indiana.DestroyedPrePlacedActorRegistry
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 MaxSize: 0x0050
struct FDestroyedPrePlacedActorRegistry
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Indiana.StatusEffectSerializationContext
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FStatusEffectSerializationContext
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Indiana.DynamicEffectProperties
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 MaxSize: 0x0024
struct FDynamicEffectProperties
{ 
	bool                                               bIgnoreApplyChance;                                         // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            EffectDirection;                                            // 0x0004   (0x000C)  
	FName                                              EffectBone;                                                 // 0x0010   (0x0008)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0018   (0x000C)  MISSED
};

/// Struct /Script/Indiana.ScriptedTeamDataSource
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 MaxSize: 0x0010
struct FScriptedTeamDataSource
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Indiana.TestAudioDataTypeReferenceID
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align 8 MaxSize: 0x0018
struct FTestAudioDataTypeReferenceID : FGameDataReferenceID
{ 
};

/// Struct /Script/Indiana.IKChainConfig
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 MaxSize: 0x0001
struct FIKChainConfig
{ 
	EFootID                                            FootID;                                                     // 0x0000   (0x0001)  
};

/// Struct /Script/Indiana.CostModifiers
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 MaxSize: 0x0014
struct FCostModifiers
{ 
	unsigned char                                      UnknownData00_2[0x14];                                      // 0x0000   (0x0014)  MISSED
};

/// Struct /Script/Indiana.WeaponAimTrackingRegion
/// Size: 0x0110 (272 bytes) (0x0000F0 - 0x000110) align 8 MaxSize: 0x0110
struct FWeaponAimTrackingRegion : FTrackingRegion
{ 
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x00F0   (0x0020)  MISSED
};

/// Struct /Script/Indiana.LerpTimer
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 MaxSize: 0x0018
struct FLerpTimer
{ 
	float                                              Duration;                                                   // 0x0000   (0x0004)  
	SDK_UNDEFINED(16,726) /* FDelegateProperty */      __um(TickDelegate);                                         // 0x0004   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

#pragma pack(pop)


static_assert(sizeof(UIndianaUserWidget) == 0x0300); // 768 bytes (0x000278 - 0x000300)
static_assert(sizeof(UAbilityOverviewChildWidget) == 0x0370); // 880 bytes (0x000300 - 0x000370)
static_assert(sizeof(UAbilityOverviewDetailWidget) == 0x0400); // 1024 bytes (0x000370 - 0x000400)
static_assert(sizeof(UAbilityOverviewWidget) == 0x05A0); // 1440 bytes (0x000300 - 0x0005A0)
static_assert(sizeof(UAchievementDataAsset) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UAchievementsManager) == 0x0160); // 352 bytes (0x000030 - 0x000160)
static_assert(sizeof(UAIAction) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UActionSequence) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UBehaviorStateInfo) == 0x0120); // 288 bytes (0x000030 - 0x000120)
static_assert(sizeof(UEmpty_BehaviorStateInfo) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UActivatedBehaviorStateInfo) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UDecisionTreeRequestData) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(FAISelector_FValue) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBehaviorStateRequestData) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UDecisionTreeEmptyRequestData) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UActivatedRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UActivityManager) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(APooledActor) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(FActorPoolConfiguration) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UActorPool) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UActorRenderWidget) == 0x0398); // 920 bytes (0x000300 - 0x000398)
static_assert(sizeof(AActorStage) == 0x0380); // 896 bytes (0x0002B8 - 0x000380)
static_assert(sizeof(FAkPlaySoundState) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAkPlaySoundStatePair) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FPlayFxState) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPlayFxPair) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FEventEffectState) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FLocString) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UStatusEffect) == 0x0188); // 392 bytes (0x000030 - 0x000188)
static_assert(sizeof(UAdjustCCCooldownStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UAdjustDurationStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UAICastSpell_AnimNotify) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UAICastSpell_AnimNotifyState) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpawnBehavior_AnimNotify) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAIDecisionUpdate) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIDecisionUpdate_Mantisaur) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UAIDecisionUpdate_Mantiqueen) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UAIDecisionUpdate_HealDrone) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UAIDecisionUpdate_CanidHowl) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UAIDecisionUpdate_ShieldBot) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UAIDefensiveActionsComponent) == 0x0120); // 288 bytes (0x0000E0 - 0x000120)
static_assert(sizeof(UAIDetectionComponent) == 0x0218); // 536 bytes (0x0000E0 - 0x000218)
static_assert(sizeof(UAIEventInfo) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIEventInfo_Location) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UAIEventInfo_Direction) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UAIEventInfo_Actor) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UAIEventInfo_StatusEffect) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UAIEventInfo_Spell) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UAIEventInfo_CalledShot) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UAIEventInfo_Behavior) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UAIEventInfo_Float) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UAIEventInfo_Transform) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UInteractionComponent) == 0x00F0); // 240 bytes (0x0000E0 - 0x0000F0)
static_assert(sizeof(UAIInteractionComponent) == 0x0140); // 320 bytes (0x0000F0 - 0x000140)
static_assert(sizeof(FAimAssistConfig) == 0x01C0); // 448 bytes (0x000000 - 0x0001C0)
static_assert(sizeof(UAimAssistComponent) == 0x05E0); // 1504 bytes (0x0000E0 - 0x0005E0)
static_assert(sizeof(UAimAssistData) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UIndianaCharMovementComponent) == 0x0E00); // 3584 bytes (0x000B60 - 0x000E00)
static_assert(sizeof(FExtremaOverlap) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAIMovementComponent) == 0x0F50); // 3920 bytes (0x000E00 - 0x000F50)
static_assert(sizeof(UAIPossessable) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_AIAction) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPatrol_PatrolNodeAction) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIActor) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIActorWritable) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_Player) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_DecisionTreeActor) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_Self) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPatrol_PatrolNode) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPatrol_PatrolNode_LookAtOverride) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFurniture_LookAtOverride) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCover_CurrentCoverNode) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionFollow_Target) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionFollow_Position) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFollow_Target) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_HealTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIBool) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIBoolWriteable) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_True) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MovingFireEnabled) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_WalkingFireEnabled) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_ShouldServiceExitTask) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_ShouldFaceTargetWhileMoving) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_IsWeaponRanged) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_ShouldScope) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_IsFullyCrouched) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_IsFullyUncrouched) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_IsMoveToSuccessful) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPatrol_PatrolNodeOrientOnArrival) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPatrol_PatrolNodeLookAtWhileWalking) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPatrol_PatrolRunMovementStateEnabled) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPatrol_PatrolNodeActionInfiniteDuration) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFollow_ClearTargetDetection) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFollow_Retreating) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFollow_IsCompanionCommandOrClearTargetDetection) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCalledShot_IsTargetReactionComplete) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCalledShot_IsAttackAnimationComplete) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USwitchWeapon_IsInstant) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UJump_ShouldRotateToFaceTargetMidAir) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_ShouldFire) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_ShouldStationaryFire) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_HasNoQueuedDecisionTreeRequest) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_RequiresReachable) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_ShouldIgnoreCollisionDuringTargetApproach) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_ShouldBumpDuringTargetApproach) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_ShouldSprintDuringTargetApproach) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UOnRails_ShouldChase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UOnRails_IsOnRails) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMelee_UseAdaptiveRootMotion) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMelee_IsPatternComplete) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMelee_ShouldLookAtTargetDuringRecovery) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMelee_ShouldIgnoreCollisionDuringApproach) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMelee_ShouldBumpDuringApproach) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMelee_ShouldSprintDuringApproach) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFurniture_ShouldComplete) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionCommandMoveTo_StationaryAttackEnabled) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionCommandMoveTo_MovingAttackEnabled) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCower_ShouldCower) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMoveTo_ShouldFaceTargetWhileWaiting) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USpawn_IsFinishedSpawning) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UConversation_ShouldTeleport) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_CanSeeHealTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_IsFinishedWatchingKilledTeammate) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIEQSParameter) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionFollow_DefaultRadius) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionFollow_InnerRadius) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionFollow_InnerPointAmount) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionFollow_DefaultIdealAngle) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionFollow_DefaultMinAngle) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionMoveTo_DefaultRadius) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionMoveTo_DefaultIdealAngle) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionMoveTo_DefaultMinAngle) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MinMoveDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MaxMoveDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MaxMoveDistanceThreshold) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MinPreferredRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MaxPreferredRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_AllowedCoverTypes) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_FullHeight) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_RepositionType) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MeleeRecoveryMoveMinDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MeleeRecoveryMoveMaxDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMeleeSlot_NumRings) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMeleeSlot_PointsPerRing) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWander_Radius) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWander_MinMoveDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWander_MaxMoveDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWander_MaxPathDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(URangedRepositionType_Stationary) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(URangedRepositionType_Strafe) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(URangedRepositionType_Forward) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionCalledShot_MinMeleeRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionCalledShot_MaxMeleeRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionCalledShot_MinLimitedRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionCalledShot_MaxLimitedRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UTownie_MaxFleeDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MaxUnmarkedFleeDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MaxUnmarkedFleePathDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_DeadBodyWanderRadius) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_DeadBodyWanderMinMoveDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_DeadBodyWanderMaxMoveDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_DeadBodyWanderMaxPathDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_WanderRadius) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_WanderMinMoveDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_WanderMaxMoveDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_WanderMaxPathDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIFiringPattern) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_StationaryFiringPattern) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_CoverFiringPattern) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MovingFiringPattern) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_CalledShotRangeFiringPattern) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIFValue) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeapon_MinMeleeRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeapon_MaxMeleeRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeapon_MaxMeleeRangeWithPadding) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeapon_MeleeRecoveryMoveRandomChance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeapon_MeleeRecoveryDodgeRandomChance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeapon_MeleeRecoveryMaxTargetDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeapon_MeleeAdapativeRootmotionStopDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeapon_CalledShotMeleeAdapativeRootmotionStopDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MovingFirePrePauseTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MaxPreferredRangeF) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MaxAbsoluteRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_PreferredRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_CoverWalkingDistanceThreshold) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_RangedRepositionWalkingDistanceThreshold) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_TargetLostTimeInitiallySeenRanged) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_TargetLostTimeInitiallyUnseenRanged) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_TargetLostTimeInitiallySeenCover) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_TargetLostTimeInitiallyUnseenCover) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_SuppressingFireTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MinMeleeActionDelay) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MeleeRecoveryDelay) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_MeleeWaitDistance) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_WanderIdleTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_WeaponPauseTimeFuzz) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_CompanionCommandHunkerDownDuration) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_CompanionCommandFlankDuration) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_CompanionCommandSuppressDuration) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_DelayDodge) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_DelayMeleeBlock) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_CompanionCommandSuppressLostTargetTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USettings_CompanionCommandFlankLostTargetTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFollow_TeleportRotation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UConversation_TeleportRotation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWander_WanderRadius) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_UnreachableWaitTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearch_WanderIdleTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UTeleport_TeleportDuration) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UTeleport_TeleportTargetRotation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFollow_MinRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFollow_MaxRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USpellTarget_MaxRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USpellTarget_MinRange) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_PreMoveWaitTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_ArrivalRadius) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_DeadBodyWanderIdleTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_SeeKilledTeammateTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_EndWaitTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_StimulusUpdateMinDuration) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInvestigate_ExitChatterTriggerTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFurniture_EntryAcceptanceRadius) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMoveTo_ArrivalWaitTime) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCalledShot_CameraCutDelay) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAIInt) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCalledShot_FireIndex) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFiringPatternComplete_FinishBehavior) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFiringPatternComplete_FinishTask) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFiringPatternComplete_Repeat) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFiringPatternComplete_Cover) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMeleeAction_CurrentRequest) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMeleeAction_RecoveryDodgeDirection) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWeaponSlot_CurrentRequest) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UContext_CurrentRequest) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDodge_Direction) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAILocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAILocationWritable) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_MoveLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_DecisionTreeLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_DecisionTreeActorLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_CurrentLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetStimulusLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetAimLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetHeadLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetCheatAimLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetCheatHeadLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetMovingAimLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetMovingHeadLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetSphereCheatLocaiton) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetStimulusSourceActorLocaiton) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_PrimaryTargetProjectedStimulusLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_RandomNearbyLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_VantageLocationForPrimaryTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_FurthestLocationOnSpline) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCover_CoverFiringLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCover_CoverFiringAimLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCover_CoverIntoCoverFiringAim) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCover_CoverLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCover_CoverWallLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UMelee_BodyAttackingTargetLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPatrol_PatrolNodeOrientationLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFollow_TeleportLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UConversation_TeleportLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFollow_FollowTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWander_Origin) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UIdle_Origin) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UIdle_OrientationLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFurniture_EntryLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFurniture_ProjectedEntryLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFurniture_ExitLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UFurniture_RotationLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UJump_StartLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UJump_EndLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCrouch_StartLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCrouch_EndLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWalk_StartLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UWalk_EndLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCompanionCommand_MoveTo) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGeneral_HealTargetLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_UObject) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_DisableStatusEffect) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_FleeStatusEffect) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_PersuadeStatusEffect) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_TeleportStartAnimation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_TeleportEmergingAnimation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_TeleportExitAnimation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_TeleportEQS) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_SpawnActorAnimation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_CowerAnimation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAI_AnimationStateAnimation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAISettings_Behavior) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FDefensiveActionElement) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FReactiveToMeleeElement) == 0x0060); // 96 bytes (0x000004 - 0x000060)
static_assert(sizeof(FReactiveToRangeElement) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UAISettings_DefensiveAction) == 0x00B0); // 176 bytes (0x000038 - 0x0000B0)
static_assert(sizeof(UAISettings_Follow) == 0x0088); // 136 bytes (0x000030 - 0x000088)
static_assert(sizeof(UAISettings_FollowPlayer) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAISettings_Furniture) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UAISettings_Idle) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAISettings_Patrol) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UAISettings_Traverse) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UAISettings_Wander) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(FAISettings_RecoveryBackupBehavior) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FAISettings_MeleeActionBase) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FAISettings_MeleeAction) == 0x0058); // 88 bytes (0x00003C - 0x000058)
static_assert(sizeof(FAISettings_MeleePatternEntry) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FAISettings_MeleePattern) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FAISettings_Melee) == 0x00E0); // 224 bytes (0x000000 - 0x0000E0)
static_assert(sizeof(FAISettings_FiringPattern) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAISettings_StationaryFire) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FAISettings_CoverFire) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FAISettings_MovingFire) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FAISettings_SuppressingFire) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FAISettings_LostTarget) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAISettings_RangedBehavior_Set) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAISettings_RangedBehavior_TooFar_Set) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FAISettings_RangePositioning_Set) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAISettings_RangedPositioning) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAISettings_RangedBehavior) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FAISettings_Block) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FAISettings_Dodge) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FAISettings_Positioning) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UAISettings_Weapon) == 0x0260); // 608 bytes (0x000038 - 0x000260)
static_assert(sizeof(FAISettingsWander) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FBehaviorSettings_Set) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FGlobalVariable) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FGlobalVariableConditional) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FQuestReference) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FQuestStateConditional) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FCompanionStateConditional) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FPCGenderConditional) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(FDLCInstalledConditional) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FLogicalStatement) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FLogicalExpression) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FScriptedBehavior_Set) == 0x0078); // 120 bytes (0x000010 - 0x000078)
static_assert(sizeof(FBehaviorPackage) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FBehaviorPhases) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSaveGameDataBehaviorStack) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSaveGameDataDetection) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSaveGameDataTargetInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSaveGameDataDecisionTree) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSaveGameDataInterest) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FSaveGameDataAIController) == 0x00C0); // 192 bytes (0x000000 - 0x0000C0)
static_assert(sizeof(UAISettingsComponent) == 0x03A8); // 936 bytes (0x0000E0 - 0x0003A8)
static_assert(sizeof(UTargetingComponent) == 0x00E8); // 232 bytes (0x0000E0 - 0x0000E8)
static_assert(sizeof(UAiTargetingComponent) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(AAlarm) == 0x02C8); // 712 bytes (0x0002B8 - 0x0002C8)
static_assert(sizeof(UAlarmComponent) == 0x00F8); // 248 bytes (0x0000E0 - 0x0000F8)
static_assert(sizeof(FExaminableStringSet) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FItemTutorialSet) == 0x0006); // 6 bytes (0x000000 - 0x000006)
static_assert(sizeof(FGameDateTime) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UItem) == 0x0118); // 280 bytes (0x000030 - 0x000118)
static_assert(sizeof(FDamageMultipliers) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAmmo) == 0x01A0); // 416 bytes (0x000118 - 0x0001A0)
static_assert(sizeof(UAmmoPoolBase) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(URadialSectionWidget) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(UAmmoRadialSectionWidget) == 0x02A8); // 680 bytes (0x000288 - 0x0002A8)
static_assert(sizeof(UAmmoReadoutWidget) == 0x03B0); // 944 bytes (0x000300 - 0x0003B0)
static_assert(sizeof(UAnimationAudioSet) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UAnimationBehaviorStateInfo) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UAnimationRequestData) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(UAnimationCurveUtils) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDisableStatusEffect) == 0x0198); // 408 bytes (0x000188 - 0x000198)
static_assert(sizeof(UAnimDisableStatusEffect) == 0x01A0); // 416 bytes (0x000198 - 0x0001A0)
static_assert(sizeof(FBoneMod) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UBoneModifications) == 0x00A0); // 160 bytes (0x000038 - 0x0000A0)
static_assert(sizeof(UBoneModificationsPreset) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UAnimNotify_AttachWeapon) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_AudioEvent) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UAnimNotify_Despawn) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_DetachWeapon) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_EventEffects) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UAnimNotify_Finished) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_FootStep) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UAnimNotify_IndianaAkEvent) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UAnimNotify_MedkitEnd) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_MeleeActionFinished) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_MeleeAllowInput) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UAnimNotify_MeleeCanSwing) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_MeleeCheckInput) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_MeleeRecoil) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_ParamsEvent) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UAnimNotify_PlayChatter) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UAnimNotify_PropDespawn) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(FPropEntry) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(UPropData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UNewPropData) == 0x00A0); // 160 bytes (0x000038 - 0x0000A0)
static_assert(sizeof(UAnimNotify_PropSpawn) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UAnimNotify_RagDoll) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UAnimNotify_UpdateCanisterVisual) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_UseMedKit) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_WeaponFire) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimNotify_WeaponVisualEvent) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UAnimNotifyState_AltIKToggle) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotifyState_AudioEventLoop) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotifyState_DisableAutoStep) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_DisableDetection) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_DisableHipPoses) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_DisableVision) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_HideWeapon) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_InspectEnd) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_Invulnerable) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotifyState_PreventInterrupts) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_FurnitureInterrupt) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotifyState_MeleeAllowInput) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimNotifyState_MeleeCanSwing) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_MeleeCheckInput) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_MeleeDamage) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UAnimNotifyState_Prop) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UAnimNotifyState_SuppressFire) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_ToggleArmPose) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_ToggleTracking) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(FTransformedShape) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UAoEStatusEffect) == 0x01E0); // 480 bytes (0x000188 - 0x0001E0)
static_assert(sizeof(FAppearanceCustomizations) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FAppearanceMatch) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FMainAppearances) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FAppliedAppearanceMod) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FHeadAppearanceMods) == 0x0090); // 144 bytes (0x000058 - 0x000090)
static_assert(sizeof(FAppearanceInstance) == 0x02C8); // 712 bytes (0x000000 - 0x0002C8)
static_assert(sizeof(FMaterialParamDescription) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FFadeSettings) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UAppearanceComponent) == 0x0480); // 1152 bytes (0x0000E0 - 0x000480)
static_assert(sizeof(UAppearancePreset) == 0x0128); // 296 bytes (0x000038 - 0x000128)
static_assert(sizeof(UApplyRosterSkillBonusesStatusEffect) == 0x01C0); // 448 bytes (0x000188 - 0x0001C0)
static_assert(sizeof(UApproachBehaviorStateInfo) == 0x0160); // 352 bytes (0x000120 - 0x000160)
static_assert(sizeof(UApproachRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(FAptitudeTextures) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(UAptitude) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(UAptitudeReadoutWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UAptitudeSummaryWidget) == 0x0290); // 656 bytes (0x000278 - 0x000290)
static_assert(sizeof(UDegradableItem) == 0x0128); // 296 bytes (0x000118 - 0x000128)
static_assert(sizeof(UArmorBase) == 0x01B8); // 440 bytes (0x000128 - 0x0001B8)
static_assert(sizeof(FArmorData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FArmorPiece) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FArmorModifier) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FArmorPieceEntry) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FArmorModifierEntry) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UArmorComponent) == 0x0150); // 336 bytes (0x0000E0 - 0x000150)
static_assert(sizeof(FStatModifierDescriptionBase) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FStatModifierDescription) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(UArmorItem) == 0x01F8); // 504 bytes (0x0001B8 - 0x0001F8)
static_assert(sizeof(FNewArmorModVisual) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FArmorVisualProperties) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UArmorModItem) == 0x0260); // 608 bytes (0x0001B8 - 0x000260)
static_assert(sizeof(UArmorModArmoring) == 0x0260); // 608 bytes (0x000260 - 0x000260)
static_assert(sizeof(UArmorModUtility) == 0x0260); // 608 bytes (0x000260 - 0x000260)
static_assert(sizeof(UArmorModResistance) == 0x0260); // 608 bytes (0x000260 - 0x000260)
static_assert(sizeof(UArmorModDampening) == 0x0260); // 608 bytes (0x000260 - 0x000260)
static_assert(sizeof(FNewArmorSetModVisual) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FArmorSetModSlot) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FStatModifierInstance) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FStatInstance) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FRpgStatCollection) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(UArmorSet) == 0x0370); // 880 bytes (0x0001F8 - 0x000370)
static_assert(sizeof(UArmorStatusEffect) == 0x01A8); // 424 bytes (0x000188 - 0x0001A8)
static_assert(sizeof(FAssetInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UAssetCollection) == 0x00D8); // 216 bytes (0x000030 - 0x0000D8)
static_assert(sizeof(UAssetList) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UModVisual) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UAttachFxModVisual) == 0x00A0); // 160 bytes (0x000068 - 0x0000A0)
static_assert(sizeof(UAttachNiagaraFxModVisual) == 0x00A0); // 160 bytes (0x000068 - 0x0000A0)
static_assert(sizeof(UAttackInfo) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UMeleeAttackInfo) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(UAttributeSliderGroupWidget) == 0x03D0); // 976 bytes (0x000300 - 0x0003D0)
static_assert(sizeof(UAttributeSliderPageWidget) == 0x0388); // 904 bytes (0x000300 - 0x000388)
static_assert(sizeof(UAttributeSummaryEntryWidget) == 0x02B0); // 688 bytes (0x000278 - 0x0002B0)
static_assert(sizeof(UAttributeSummaryGroupWidget) == 0x0290); // 656 bytes (0x000278 - 0x000290)
static_assert(sizeof(UAttributeSummaryWidget) == 0x02E0); // 736 bytes (0x000278 - 0x0002E0)
static_assert(sizeof(UAudioHelpers) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AInteractableActor) == 0x0308); // 776 bytes (0x0002B8 - 0x000308)
static_assert(sizeof(AAudioLogActor) == 0x0358); // 856 bytes (0x000308 - 0x000358)
static_assert(sizeof(FAudioLogDefinition) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAudioLogDataAsset) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UAudioLogLibraryDataAsset) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(UGenericCollapsableList) == 0x0358); // 856 bytes (0x000300 - 0x000358)
static_assert(sizeof(UAudioLogList) == 0x03F8); // 1016 bytes (0x000358 - 0x0003F8)
static_assert(sizeof(UGenericCollapsableListEntry) == 0x02A0); // 672 bytes (0x000278 - 0x0002A0)
static_assert(sizeof(UAudioLogListEntryWidget) == 0x02A0); // 672 bytes (0x0002A0 - 0x0002A0)
static_assert(sizeof(UAudioLogManager) == 0x0178); // 376 bytes (0x000030 - 0x000178)
static_assert(sizeof(UIndianaInterfaceUserWidget) == 0x0308); // 776 bytes (0x000300 - 0x000308)
static_assert(sizeof(UAudioLogWidget) == 0x0398); // 920 bytes (0x000308 - 0x000398)
static_assert(sizeof(UAudioParamModVisual) == 0x0088); // 136 bytes (0x000068 - 0x000088)
static_assert(sizeof(UAudioSwitchModVisual) == 0x0088); // 136 bytes (0x000068 - 0x000088)
static_assert(sizeof(UAutoSneakAttackStatusEffect) == 0x0188); // 392 bytes (0x000188 - 0x000188)
static_assert(sizeof(UAutoStasisTriggerComponent) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(AAutoStasisTrigger) == 0x0338); // 824 bytes (0x000310 - 0x000338)
static_assert(sizeof(UBackgroundPanelWidget) == 0x0300); // 768 bytes (0x000278 - 0x000300)
static_assert(sizeof(UBackgroundSplitPanelWidget) == 0x0360); // 864 bytes (0x000278 - 0x000360)
static_assert(sizeof(UBaseInventoryItemManagement) == 0x03A0); // 928 bytes (0x000308 - 0x0003A0)
static_assert(sizeof(UBaseMapEntryWidget) == 0x0300); // 768 bytes (0x000300 - 0x000300)
static_assert(sizeof(UEventEffect) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UBasePlayAnimEventEffect) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UBaseTeamData) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(ABasicMapFloorTrackedActor) == 0x02E8); // 744 bytes (0x0002B8 - 0x0002E8)
static_assert(sizeof(FBeaconProperties) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(ANewBeacon) == 0x0338); // 824 bytes (0x0002B8 - 0x000338)
static_assert(sizeof(UBeaconComponent) == 0x02A0); // 672 bytes (0x000268 - 0x0002A0)
static_assert(sizeof(FBeaconData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FMapBeaconCache) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(UBeaconManager) == 0x0148); // 328 bytes (0x000030 - 0x000148)
static_assert(sizeof(UBeaconMapEntryWidget) == 0x0358); // 856 bytes (0x000300 - 0x000358)
static_assert(sizeof(UBeaconTagWidget) == 0x0370); // 880 bytes (0x000300 - 0x000370)
static_assert(sizeof(UIndianaWidgetComponent) == 0x0670); // 1648 bytes (0x000650 - 0x000670)
static_assert(sizeof(UBeaconTagWidgetComponent) == 0x0680); // 1664 bytes (0x000670 - 0x000680)
static_assert(sizeof(FDeathClassOverride) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDamageDescription) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FDamageLevelScaler) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(ADestructible) == 0x0478); // 1144 bytes (0x0002B8 - 0x000478)
static_assert(sizeof(ABeamLauncher) == 0x05A8); // 1448 bytes (0x000478 - 0x0005A8)
static_assert(sizeof(FWeaponInputBuffer) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UWeaponMode) == 0x0130); // 304 bytes (0x000030 - 0x000130)
static_assert(sizeof(FDepthOfFieldSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FCustomShotAngles) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(URangedMode) == 0x05B8); // 1464 bytes (0x000130 - 0x0005B8)
static_assert(sizeof(UBeamMode) == 0x06A0); // 1696 bytes (0x0005B8 - 0x0006A0)
static_assert(sizeof(FBeardAppearance) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UBeardAppearances) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UBeardColor) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(AFurnitureActor) == 0x02C8); // 712 bytes (0x0002B8 - 0x0002C8)
static_assert(sizeof(ABed) == 0x0300); // 768 bytes (0x0002C8 - 0x000300)
static_assert(sizeof(FAIStateHistory) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UBehaviorStackComponent) == 0x0230); // 560 bytes (0x0000E0 - 0x000230)
static_assert(sizeof(UEQS_BehaviorStateInfo) == 0x0178); // 376 bytes (0x000120 - 0x000178)
static_assert(sizeof(UBehaviorTreeGlobalParams) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(FBreakBoneInfo) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(UIndianaAnimInstance) == 0x04A0); // 1184 bytes (0x0002C8 - 0x0004A0)
static_assert(sizeof(UCharacterAnimInstance) == 0x0558); // 1368 bytes (0x0004A0 - 0x000558)
static_assert(sizeof(FBodyRotationProperties) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FRandomPlayerSequenceEntryNamed) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FLocomotionNode) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UTPVAnimInstance) == 0x0950); // 2384 bytes (0x000558 - 0x000950)
static_assert(sizeof(FBipedWeaponAnims) == 0x0158); // 344 bytes (0x000000 - 0x000158)
static_assert(sizeof(FBipedPersonalityAnims) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FLoopRandomSequence) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FDiscoveredAnims) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FTalkingIdleEntry) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(UBipedAnimInstance) == 0x12E0); // 4832 bytes (0x000950 - 0x0012E0)
static_assert(sizeof(FBlockProperties) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UBlockComponent) == 0x0260); // 608 bytes (0x0000E0 - 0x000260)
static_assert(sizeof(ABlockInventoryVolume) == 0x0310); // 784 bytes (0x000310 - 0x000310)
static_assert(sizeof(FAppearanceGoreCap) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FBodyAppearance) == 0x00F0); // 240 bytes (0x000040 - 0x0000F0)
static_assert(sizeof(UBodyAppearances) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(FSpellEffectApplyChance) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(UBodyLocationSpellAsset) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(FBodyPart) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UBodyPartData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UBodyPartsComponent) == 0x00E0); // 224 bytes (0x0000E0 - 0x0000E0)
static_assert(sizeof(UBoneModStatusEffect) == 0x0198); // 408 bytes (0x000188 - 0x000198)
static_assert(sizeof(UBossComponent) == 0x0110); // 272 bytes (0x0000E0 - 0x000110)
static_assert(sizeof(UBossFightManager) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UBotAnimInstance) == 0x0AA0); // 2720 bytes (0x000950 - 0x000AA0)
static_assert(sizeof(UBrandDataAsset) == 0x00E0); // 224 bytes (0x000038 - 0x0000E0)
static_assert(sizeof(UBreakdownPopupWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UBrows) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UBTDecorator_IndianaConditional) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(FCompositeConditionalElement) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UBT_Con_Composite) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(FAISelector_Location) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBT_Con_General_IsLocationValid) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UBT_Con_Animation_ShouldFaceTargetBeforePlayback) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Approach_IsTargetInConversation) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Approach_IsInInterrogationRange) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_CompanionFollow_ShouldWait) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_CompanionFollow_IsFollowLocationValid) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Cover_IsCoverType) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_Cover_WasInterrupted) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Crouch_IsCrouchInPlace) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Furniture_IsCurrentBehaviorState) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_Furniture_ShouldOrientToFurniture) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Furniture_IsReserved) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Furniture_IsValid) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(FAISelector_Actor) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBT_Con_General_IsSeen) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UBT_Con_General_IsAimingPossible) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_IsFollowTargetValid) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_IsFollower) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_IsOnRails) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_HasEquippedWeapon) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_IsInRange) == 0x00B0); // 176 bytes (0x000078 - 0x0000B0)
static_assert(sizeof(UBT_Con_General_CanMoveCloserOnRails) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UBT_Con_General_ClosestVantageIsInRange) == 0x00A8); // 168 bytes (0x000078 - 0x0000A8)
static_assert(sizeof(UBT_Con_General_IsFacingTarget) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(FAISelector_Bool) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBT_Con_General_CheckBooleanSelector) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_IsTimeSinceBehaviorState) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UBT_Con_General_TestContinuousSeenTime) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UBT_Con_General_IsBehaviorStateComplete) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_WithInDistance) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UBT_Con_General_IsInPlayerConversation) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_General_IsValidHealTarget) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_IsPrimaryTargetStimulusType) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_Random) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_IsAlertStateTimeRemainingEstimateGreaterThan) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_WantsNonBehaviorCrouch) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_General_Dot) == 0x00A0); // 160 bytes (0x000078 - 0x0000A0)
static_assert(sizeof(UBT_Con_General_HasVantageOnActor) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_SimpleIsSeen) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_General_IsCreatureType) == 0x00A0); // 160 bytes (0x000078 - 0x0000A0)
static_assert(sizeof(UBT_Con_Jump_ShouldRotateToFaceJumpDirection) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Jump_IsJumpInPlace) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Jump_IsIntroAnimationComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Jump_IsOutroAnimationComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Melee_IsSlottingState) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_Melee_IsRecoveryType) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Con_Melee_IsDodgeRecoveryPossible) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_MoveTo_ShouldWaitAfterArrival) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Patrol_IsPatrolNodeValid) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Patrol_HasPatrolNodeAction) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Patrol_IsBeyondRotate) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Patrol_OrientOnArrival) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Con_Search_ShouldMoveDirectlyToTarget) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTDecorator_IndianaScript) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UBTDecorator_IndianaToggleScript) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_SetMovementState) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(UBT_Scr_SetMovementState_Distance) == 0x0098); // 152 bytes (0x000080 - 0x000098)
static_assert(sizeof(UBT_Scr_Approach_Interrogate) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Approach_SetApproaching) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_CalledShot_CameraStep) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Scr_CalledShot_Teleport) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Cover_IncrementCoverUseCounter) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Cover_SetCoverType) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_Cover_ClearInterrupted) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Crouch_UpdatePrematureExit) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Flank_ForceTargetOverride) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Follow_ClearTeleportFlag) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Furniture_SetFurniture) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_Furniture_SetConversationWaitState) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_Furniture_TransitionState) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Furniture_AttemptToReserve) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Furniture_ForceInterest) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_General_SetAnimationParameter) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UBT_Scr_General_LockAIState) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_RequestPrimaryTarget) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Scr_General_PromoteQueuedToPrimaryTarget) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_General_ClearStimulus) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_General_SetBehaviorStateComplete) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UBT_Scr_General_TriggerChatterEvent) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Scr_General_ClearTargetDetection) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UBT_Scr_General_CancelCompanionCommandAttack) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Scr_General_ChangeCapsuleRadius) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UBT_Scr_General_SetCanBump) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UBT_Scr_General_LockAllRotations) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(FAISelector_Int) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBT_Scr_General_SwitchContext) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Scr_General_Crouch) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_StartBehaviorStateCountdown) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Scr_General_TurnOffCharacterCollisionToggle) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_TurnOffMesh) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_EnableContinousMovement) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_Teleport) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UBT_Scr_General_EnableGodVision) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_SetAlertStateMinDuration) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBT_Scr_General_RegisterAreaRange) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UBT_Scr_General_SetBehaviorNavigationSettings) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(UBT_Scr_General_SetOverrideBehaviorAnimation) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UBT_Scr_General_SetArcing) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_SetTogglableAction) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(UBT_Scr_General_ToggleMovementOptimizations) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_DisableNavWalking) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_SetCowering) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_Mute) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_General_DisableRelavancy) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_Investigate_NotifyPreMoveWaitCompleted) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Investigate_EndWaitExit) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Jump_SetAnimationJumpFlag) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_Jump_LaunchJump) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Jump_SetJumpGravity) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_Melee_IncrementPattern) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBT_Scr_Melee_SetIsAttacking) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(UBT_Scr_Patrol_SetBehaviorStateComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_IndianaBase) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_Chatter) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBTService_EventFirer_TargetLostCover) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UBTService_EventFirer_TargetLostRanged) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(UBTService_EventFirer_UnsafeCover) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(UBTService_EventFirer_UnsafeOccupiedCover) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBTService_EventFirer_SuspiciousComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_InvestigateComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_DeactivatedComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_ApproachComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_RetreatComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_CompanionFollowComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(FAISelector_UObject) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBTService_EventFirer_SEComplete) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBTService_EventFirer_InvalidSearch) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_SearchComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_SearchTargetLost) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_ConversationComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_InvalidMelee) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_MeleeWait) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_BlockedLOS) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBTService_EventFirer_IsNotSeen) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBTService_EventFirer_TargetOutsideMaxAbsoluteRange) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_CCMoveToEnterCombatMode) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_CowerComplete) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_EventFirer_Generic) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBTService_EventReload_InCover) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_TeammateKilled_InCombat) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_WatchKilledTeammate_InCombat) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(FAISelector_FiringPattern) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBTService_General_FiringPattern) == 0x00C0); // 192 bytes (0x000078 - 0x0000C0)
static_assert(sizeof(UBTService_General_FocusAt) == 0x00D8); // 216 bytes (0x000078 - 0x0000D8)
static_assert(sizeof(UBTService_RequestPrimaryTarget) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UBTService_Search_Chatter) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UBTService_Search_UpdateFire) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBTService_SpellTargetService) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(UBTTask_IndianaBase) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UBTTask_Block) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UBTTask_Death) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UBTTask_Disable) == 0x0108); // 264 bytes (0x000090 - 0x000108)
static_assert(sizeof(UBTTask_Dodge) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UBTTask_Indiana_PlayAnimation) == 0x00B8); // 184 bytes (0x000090 - 0x0000B8)
static_assert(sizeof(FAISelector_BoolWriteable) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBTTask_IndianaMoveTo) == 0x00C8); // 200 bytes (0x000090 - 0x0000C8)
static_assert(sizeof(UBTTask_IndianaDirectMoveTo) == 0x00D0); // 208 bytes (0x0000C8 - 0x0000D0)
static_assert(sizeof(FAISelector_ActorWritable) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FAISelector_LocationWritable) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBTTask_IndianaRunEQSQuery) == 0x00C0); // 192 bytes (0x000090 - 0x0000C0)
static_assert(sizeof(UBTTask_IndianaWait) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UBTTask_MeleeAttack) == 0x00C0); // 192 bytes (0x000090 - 0x0000C0)
static_assert(sizeof(FAISelector_Action) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UBTTask_RunActions) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UBTTask_RunRandomEQSQuery) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(UBTTask_Script) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UBTTask_SwitchWeapon) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UBTTask_TriggerPatrolNodeEvent) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UBTTask_UseCover) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UBTTask_UseFurniture) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FSlateBrushContainer) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FSizeConstraint) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FIndianaTextBlockStyle) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(FIndianaButtonStyle) == 0x0828); // 2088 bytes (0x000008 - 0x000828)
static_assert(sizeof(UButtonBase) == 0x0B98); // 2968 bytes (0x000138 - 0x000B98)
static_assert(sizeof(UButtonBaseContainerWidget) == 0x02B0); // 688 bytes (0x000278 - 0x0002B0)
static_assert(sizeof(UButtonBaseSlot) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UButtonLedgerHeader) == 0x0B98); // 2968 bytes (0x000B98 - 0x000B98)
static_assert(sizeof(UIndianaButtonWidgetStyle) == 0x0860); // 2144 bytes (0x000038 - 0x000860)
static_assert(sizeof(UCalledShotBehaviorStateInfo) == 0x0240); // 576 bytes (0x000178 - 0x000240)
static_assert(sizeof(UDecisionTreeEQSRequestData) == 0x0080); // 128 bytes (0x000060 - 0x000080)
static_assert(sizeof(UCalledShotRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UCombatCameraComponent) == 0x0120); // 288 bytes (0x0000E0 - 0x000120)
static_assert(sizeof(UCalledShotCameraComponent) == 0x01B8); // 440 bytes (0x000120 - 0x0001B8)
static_assert(sizeof(FTimeDilationData) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(UCalledShotData) == 0x01D0); // 464 bytes (0x000038 - 0x0001D0)
static_assert(sizeof(UCartInfoWidget) == 0x03B0); // 944 bytes (0x000300 - 0x0003B0)
static_assert(sizeof(UCastSpellEventEffect) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UCastSpellStatusEffect) == 0x0198); // 408 bytes (0x000188 - 0x000198)
static_assert(sizeof(UStatsSkillButtonEntryBase) == 0x0470); // 1136 bytes (0x000300 - 0x000470)
static_assert(sizeof(UCategoryButtonEntryWidget) == 0x0498); // 1176 bytes (0x000470 - 0x000498)
static_assert(sizeof(UCauseDamageReticleWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(UCCAppearancePageWidget) == 0x0408); // 1032 bytes (0x000300 - 0x000408)
static_assert(sizeof(UCCAptitudeListEntry) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(UCCAptitudeListWidget) == 0x0328); // 808 bytes (0x000300 - 0x000328)
static_assert(sizeof(UCCAptitudePageWidget) == 0x0388); // 904 bytes (0x000300 - 0x000388)
static_assert(sizeof(UCCAptitudeSummaryWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(UCCAttributeSummaryWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(FUIAppearanceData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UCCCharacterCustomizationBaseWdgt) == 0x0398); // 920 bytes (0x000300 - 0x000398)
static_assert(sizeof(UCCCharacterSummaryPageWidget) == 0x0460); // 1120 bytes (0x000300 - 0x000460)
static_assert(sizeof(FBoneModificationUIWrapper) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCCFacialCustomizationWidget) == 0x03F8); // 1016 bytes (0x000398 - 0x0003F8)
static_assert(sizeof(UCCFeaturesCustomizationWidget) == 0x0398); // 920 bytes (0x000398 - 0x000398)
static_assert(sizeof(UCCGenderSelectionWidget) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(UCCNameSelectionWidget) == 0x0350); // 848 bytes (0x000300 - 0x000350)
static_assert(sizeof(UCCPerksPageWidget) == 0x0478); // 1144 bytes (0x000300 - 0x000478)
static_assert(sizeof(FSkillCategoryDetail) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UCharacterSkillsBasePage) == 0x0430); // 1072 bytes (0x000300 - 0x000430)
static_assert(sizeof(UCCSkillsPageWidget) == 0x04B0); // 1200 bytes (0x000430 - 0x0004B0)
static_assert(sizeof(UCCSkillsSummaryCategoryWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(UCCSkillsSummaryListWidget) == 0x0310); // 784 bytes (0x000300 - 0x000310)
static_assert(sizeof(UCCSkillSummaryDetailWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UCCSkillSummaryWidget) == 0x0308); // 776 bytes (0x000300 - 0x000308)
static_assert(sizeof(AChair) == 0x0300); // 768 bytes (0x0002C8 - 0x000300)
static_assert(sizeof(UCharacterCreationData) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UCharacterCreationMasterWidget) == 0x0420); // 1056 bytes (0x000308 - 0x000420)
static_assert(sizeof(FDeathClassRow) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UDeathClass) == 0x0120); // 288 bytes (0x000030 - 0x000120)
static_assert(sizeof(UDeathComponent) == 0x00F8); // 248 bytes (0x0000E0 - 0x0000F8)
static_assert(sizeof(FCharacterDeathDamageInfo) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(UCharacterDeathComponent) == 0x02B8); // 696 bytes (0x0000F8 - 0x0002B8)
static_assert(sizeof(UCharacterDeathImpulse) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(FCharacterDeathDataRow) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UCharacterDeathData) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UCharacterDerivedStatsWidget) == 0x0378); // 888 bytes (0x000300 - 0x000378)
static_assert(sizeof(ULedgerDescriptionPanel) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UCharacterDescriptionPanel) == 0x0368); // 872 bytes (0x000320 - 0x000368)
static_assert(sizeof(UCharacterDetailsWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(FGameDataReferenceID) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSpeakerGameDataReferenceID) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FScannerAbility) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRangedStatModifierDescription) == 0x00B0); // 176 bytes (0x000010 - 0x0000B0)
static_assert(sizeof(FPerkSubclassArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCharacterInfoComponent) == 0x03A0); // 928 bytes (0x0000E0 - 0x0003A0)
static_assert(sizeof(FBaseItemDefinition) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDegradableItemDefinition) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FWeaponItemDefinition) == 0x0058); // 88 bytes (0x000018 - 0x000058)
static_assert(sizeof(FArmorItemDefinition) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FArmorSetItemDefinition) == 0x0050); // 80 bytes (0x000018 - 0x000050)
static_assert(sizeof(FAmmoItemDefinition) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FCurrencyItmDefinition) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FResourceItmDefinition) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FQuestItmDefinition) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FWeaponModItemDefinition) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FHelmetItemDefinition) == 0x0020); // 32 bytes (0x000018 - 0x000020)
static_assert(sizeof(FArmorModArmoringItemDefinition) == 0x0020); // 32 bytes (0x000018 - 0x000020)
static_assert(sizeof(FArmorModUtilityItemDefinition) == 0x0020); // 32 bytes (0x000018 - 0x000020)
static_assert(sizeof(FArmorModResistanceItemDefinition) == 0x0020); // 32 bytes (0x000018 - 0x000020)
static_assert(sizeof(FArmorModDampeningItemDefinition) == 0x0020); // 32 bytes (0x000018 - 0x000020)
static_assert(sizeof(FGadgetItemDefinition) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FItemDefinitionVariant) == 0x01F0); // 496 bytes (0x000000 - 0x0001F0)
static_assert(sizeof(FDefaultItemStack) == 0x01F8); // 504 bytes (0x000000 - 0x0001F8)
static_assert(sizeof(FItemStack) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UInventoryComponent) == 0x0200); // 512 bytes (0x0000E0 - 0x000200)
static_assert(sizeof(UCharacterInventoryComponent) == 0x0238); // 568 bytes (0x000200 - 0x000238)
static_assert(sizeof(UCharacterMedKitWidget) == 0x03D0); // 976 bytes (0x000300 - 0x0003D0)
static_assert(sizeof(UCharacterNameplateWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(UCharacterOverviewWidget) == 0x04F8); // 1272 bytes (0x000300 - 0x0004F8)
static_assert(sizeof(UCharacterLibrary) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCharacterScalingComponent) == 0x00E0); // 224 bytes (0x0000E0 - 0x0000E0)
static_assert(sizeof(UShoutComponent) == 0x0100); // 256 bytes (0x0000E0 - 0x000100)
static_assert(sizeof(UCharacterShoutComponent) == 0x0160); // 352 bytes (0x000100 - 0x000160)
static_assert(sizeof(UCharacterSkillsDescriptionPanel) == 0x0378); // 888 bytes (0x000368 - 0x000378)
static_assert(sizeof(UCharacterStatusEffectsWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(UFlowChart) == 0x00B8); // 184 bytes (0x000030 - 0x0000B8)
static_assert(sizeof(UChatter) == 0x0128); // 296 bytes (0x0000B8 - 0x000128)
static_assert(sizeof(FExpressionComponentAsset) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FConditionalExpressionAsset) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FConditionalCallAsset) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FConditionalAsset) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FChatterLinkAsset) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FScriptCallAsset) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FDialogueNodeAsset) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FTalkNodeAsset) == 0x0100); // 256 bytes (0x0000B0 - 0x000100)
static_assert(sizeof(FScriptNodeAsset) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(FChatterNodeAsset) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(FChatterBranchNodeAsset) == 0x00D8); // 216 bytes (0x0000B8 - 0x0000D8)
static_assert(sizeof(FGameDataStructure) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FChatterEvent) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FChatterEventNodeAsset) == 0x00E0); // 224 bytes (0x0000B0 - 0x0000E0)
static_assert(sizeof(FSoundEffectNodeAsset) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(FChatterBundle) == 0x00E0); // 224 bytes (0x000000 - 0x0000E0)
static_assert(sizeof(UChatterBundleSet) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UChatterEventEffect) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UGameDataReference) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UChatterEventsGameDataReference) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UChatterGameHelpers) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UChatterManager) == 0x6FDC8); // 458184 bytes (0x000030 - 0x06FDC8)
static_assert(sizeof(UFlowChartPlayer) == 0x00C0); // 192 bytes (0x000030 - 0x0000C0)
static_assert(sizeof(UChatterPlayer) == 0x0168); // 360 bytes (0x0000C0 - 0x000168)
static_assert(sizeof(UCheckBoxWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UCineCombatCameraParams) == 0x0170); // 368 bytes (0x000030 - 0x000170)
static_assert(sizeof(ACineCombatCamera) == 0x0308); // 776 bytes (0x0002B8 - 0x000308)
static_assert(sizeof(ACineCombatSequenceActor) == 0x0350); // 848 bytes (0x000340 - 0x000350)
static_assert(sizeof(UCineCombatSequencePlayer) == 0x0648); // 1608 bytes (0x000608 - 0x000648)
static_assert(sizeof(UCinematicPlayerWidget) == 0x0348); // 840 bytes (0x000308 - 0x000348)
static_assert(sizeof(UClearThreatStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UCodexDataAsset) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(FInputLabelDescription) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UCodexJournal) == 0x03C8); // 968 bytes (0x000300 - 0x0003C8)
static_assert(sizeof(FIndianaComboButtonStyle) == 0x0960); // 2400 bytes (0x000008 - 0x000960)
static_assert(sizeof(FIndianaComboBoxStyle) == 0x0968); // 2408 bytes (0x000008 - 0x000968)
static_assert(sizeof(UComboBoxStringBase) == 0x0C40); // 3136 bytes (0x000120 - 0x000C40)
static_assert(sizeof(UIndianaComboBoxWidgetStyle) == 0x09A0); // 2464 bytes (0x000038 - 0x0009A0)
static_assert(sizeof(UCommandPointWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UCompanionBehaviorOptionWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UCompanionBehaviorsWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(FMoveToQueryInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCompanionCommandComponent) == 0x03B8); // 952 bytes (0x0000E0 - 0x0003B8)
static_assert(sizeof(UTimedBehaviorStateInfo) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UCompanionCommandTimedBehaviorStateInfo) == 0x0128); // 296 bytes (0x000128 - 0x000128)
static_assert(sizeof(UCompanionCommandFlankBehaviorStateInfo) == 0x0128); // 296 bytes (0x000128 - 0x000128)
static_assert(sizeof(UCompanionCommandFlankRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UCompanionCommandMoveToBehaviorStateInfo) == 0x0180); // 384 bytes (0x000178 - 0x000180)
static_assert(sizeof(UCompanionCommandMoveToRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UCompanionCommandSuppressBehaviorStateInfo) == 0x0128); // 296 bytes (0x000128 - 0x000128)
static_assert(sizeof(UCompanionCommandSuppressRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(FBotchableQuestInfo) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UCompanionComponent) == 0x0230); // 560 bytes (0x0000E0 - 0x000230)
static_assert(sizeof(UCompanionDetails) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(UCompanionEntryWidget) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(UCompanionEquipmentBarWidget) == 0x0470); // 1136 bytes (0x000300 - 0x000470)
static_assert(sizeof(FPageDimensions) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FItemViewerInitializer) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(UCompanionEquipmentWidget) == 0x0548); // 1352 bytes (0x0003A0 - 0x000548)
static_assert(sizeof(UCompanionFollowBehaviorStateInfo) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UCompanionFollowRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(UCompanionManager) == 0x0230); // 560 bytes (0x000030 - 0x000230)
static_assert(sizeof(UCompanionManagerComponent) == 0x0190); // 400 bytes (0x0000E0 - 0x000190)
static_assert(sizeof(UCompanionMeterStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UCompanionMoraleEvent) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UCompanionMoraleStatusEffect) == 0x0198); // 408 bytes (0x000188 - 0x000198)
static_assert(sizeof(UCompanionMoveToWidget) == 0x0308); // 776 bytes (0x000300 - 0x000308)
static_assert(sizeof(UCompanionMoveToWidgetComponent) == 0x0690); // 1680 bytes (0x000670 - 0x000690)
static_assert(sizeof(UCompanionOverviewWidget) == 0x03C0); // 960 bytes (0x000300 - 0x0003C0)
static_assert(sizeof(UCompanionPerksWidget) == 0x03B8); // 952 bytes (0x000300 - 0x0003B8)
static_assert(sizeof(FCompanionEQSRequest) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FConversationCompanionConfig) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UCompanionPositionComponent) == 0x0258); // 600 bytes (0x0000E0 - 0x000258)
static_assert(sizeof(UCompanionPositionData) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UCompanionScreenWrapperWidget) == 0x0348); // 840 bytes (0x000308 - 0x000348)
static_assert(sizeof(UCompanionSelectionWidget) == 0x03B0); // 944 bytes (0x000308 - 0x0003B0)
static_assert(sizeof(UCompanionSkillSummary) == 0x0358); // 856 bytes (0x000300 - 0x000358)
static_assert(sizeof(UCompanionStatSummary) == 0x0348); // 840 bytes (0x000300 - 0x000348)
static_assert(sizeof(UCompanionStatsWidget) == 0x03B0); // 944 bytes (0x000300 - 0x0003B0)
static_assert(sizeof(UCompanionsWidget) == 0x03B0); // 944 bytes (0x000300 - 0x0003B0)
static_assert(sizeof(FEntryData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCompassEntryData) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UCompassEntryWidget) == 0x02A0); // 672 bytes (0x000278 - 0x0002A0)
static_assert(sizeof(FCompassAreaBeaconEaseSetting) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FDistanceRatioToSpeedPair) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UCompassWidget) == 0x10F0); // 4336 bytes (0x000300 - 0x0010F0)
static_assert(sizeof(UCompensateForTTDStatusEffect) == 0x01A0); // 416 bytes (0x000188 - 0x0001A0)
static_assert(sizeof(UComponentDebugInterface) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AComputerTerminal) == 0x0430); // 1072 bytes (0x0002B8 - 0x000430)
static_assert(sizeof(UInteractableAudioComponent) == 0x0150); // 336 bytes (0x0000E0 - 0x000150)
static_assert(sizeof(UComputerTerminalAudioComponent) == 0x01A0); // 416 bytes (0x000150 - 0x0001A0)
static_assert(sizeof(UComputerTerminalContainerWidget) == 0x0328); // 808 bytes (0x000300 - 0x000328)
static_assert(sizeof(FComputerBrandData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UComputerTerminalHeaderData) == 0x00B8); // 184 bytes (0x000038 - 0x0000B8)
static_assert(sizeof(UComputerTerminalHeaderWidget) == 0x03E0); // 992 bytes (0x000300 - 0x0003E0)
static_assert(sizeof(UConversationBaseWidget) == 0x0360); // 864 bytes (0x000308 - 0x000360)
static_assert(sizeof(UComputerTerminalWidget) == 0x0418); // 1048 bytes (0x000360 - 0x000418)
static_assert(sizeof(UComputerTerminalWidgetComponent) == 0x0680); // 1664 bytes (0x000670 - 0x000680)
static_assert(sizeof(UConditionals) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UConsumableAmmoPool) == 0x00A8); // 168 bytes (0x000080 - 0x0000A8)
static_assert(sizeof(UResourceItem) == 0x0140); // 320 bytes (0x000118 - 0x000140)
static_assert(sizeof(UConsumableItem) == 0x0230); // 560 bytes (0x000140 - 0x000230)
static_assert(sizeof(AContainer) == 0x0448); // 1096 bytes (0x0002B8 - 0x000448)
static_assert(sizeof(UConversation) == 0x0188); // 392 bytes (0x0000B8 - 0x000188)
static_assert(sizeof(UConversationActorInterface) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UConversationBehaviorStateInfo) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UConversationRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UConversationBlueprintLibrary) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UConversationCamera) == 0x01F8); // 504 bytes (0x0000E0 - 0x0001F8)
static_assert(sizeof(UConversationCroppingComponent) == 0x0520); // 1312 bytes (0x000520 - 0x000520)
static_assert(sizeof(UConversationData) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UConversationFramingComponent) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UConversationHistoryWidget) == 0x02A0); // 672 bytes (0x000278 - 0x0002A0)
static_assert(sizeof(FCharacterDescription) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCameraProperties) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FConversationDescription) == 0x01F8); // 504 bytes (0x000000 - 0x0001F8)
static_assert(sizeof(FTalkDependencies) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(UConversationInstance) == 0x03E0); // 992 bytes (0x000030 - 0x0003E0)
static_assert(sizeof(UConversationInterface) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USkillCheckInterruption) == 0x00A0); // 160 bytes (0x000030 - 0x0000A0)
static_assert(sizeof(AConversationLighting) == 0x0360); // 864 bytes (0x0002B8 - 0x000360)
static_assert(sizeof(UConversationManager) == 0x04A0); // 1184 bytes (0x000030 - 0x0004A0)
static_assert(sizeof(UConversationMessageWidget) == 0x02C8); // 712 bytes (0x000278 - 0x0002C8)
static_assert(sizeof(UConversationPlayer) == 0x03B8); // 952 bytes (0x0000C0 - 0x0003B8)
static_assert(sizeof(UConversationRegisterComponent) == 0x08D8); // 2264 bytes (0x0000E0 - 0x0008D8)
static_assert(sizeof(UConversationResponseWidget) == 0x02D0); // 720 bytes (0x000278 - 0x0002D0)
static_assert(sizeof(UConversationSubtitleWidget) == 0x0310); // 784 bytes (0x000308 - 0x000310)
static_assert(sizeof(UConversationWidget) == 0x0520); // 1312 bytes (0x000360 - 0x000520)
static_assert(sizeof(ACorpse) == 0x0390); // 912 bytes (0x0002B8 - 0x000390)
static_assert(sizeof(UCoverBehaviorStateInfo) == 0x01A0); // 416 bytes (0x000178 - 0x0001A0)
static_assert(sizeof(UCoverRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UQuickCoverStateInfo) == 0x01A0); // 416 bytes (0x0001A0 - 0x0001A0)
static_assert(sizeof(UQuickCoverRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(FCoverAssetCollisionData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UCoverGenerationAssetData) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(AEnviromentNode) == 0x0358); // 856 bytes (0x0002B8 - 0x000358)
static_assert(sizeof(ACoverNode) == 0x03B8); // 952 bytes (0x000358 - 0x0003B8)
static_assert(sizeof(UCoverNodeComponent) == 0x00E0); // 224 bytes (0x0000E0 - 0x0000E0)
static_assert(sizeof(ACoverNodeGenerationVolume) == 0x0360); // 864 bytes (0x000310 - 0x000360)
static_assert(sizeof(UCowerBehaviorStateInfo) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UCowerRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UCrashLogging) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UCreateItemStatusEffect) == 0x01A0); // 416 bytes (0x000188 - 0x0001A0)
static_assert(sizeof(FCreditsEntry) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FCreditsGroup) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UCreditsData) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UCreditsFormattingData) == 0x00F0); // 240 bytes (0x000038 - 0x0000F0)
static_assert(sizeof(UCreditsWidget) == 0x0380); // 896 bytes (0x000308 - 0x000380)
static_assert(sizeof(UCrosshairWidget) == 0x0370); // 880 bytes (0x000300 - 0x000370)
static_assert(sizeof(UCrouchBehaviorStateInfo) == 0x0188); // 392 bytes (0x000178 - 0x000188)
static_assert(sizeof(UCrouchRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(AIndianaNavLink) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(APlaceableNavLink) == 0x02D0); // 720 bytes (0x0002D0 - 0x0002D0)
static_assert(sizeof(AReservableNavLink) == 0x02E8); // 744 bytes (0x0002D0 - 0x0002E8)
static_assert(sizeof(ACrouchNavLink) == 0x02E8); // 744 bytes (0x0002E8 - 0x0002E8)
static_assert(sizeof(UCurrencyItem) == 0x0140); // 320 bytes (0x000118 - 0x000140)
static_assert(sizeof(UCustomEventEffect) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(ACustomHitReceiver) == 0x02B8); // 696 bytes (0x0002B8 - 0x0002B8)
static_assert(sizeof(FAppliedMaterialParam) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UCustomMaterialModVisual) == 0x0090); // 144 bytes (0x000068 - 0x000090)
static_assert(sizeof(UCustomModVisual) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UCustomTimeDilationStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UDamageableComponent) == 0x0298); // 664 bytes (0x0000E0 - 0x000298)
static_assert(sizeof(UDamageByGameTagStatusEffect) == 0x01B0); // 432 bytes (0x000188 - 0x0001B0)
static_assert(sizeof(UDamageEffectWidget) == 0x0370); // 880 bytes (0x000300 - 0x000370)
static_assert(sizeof(UDamageFlagsStatusEffect) == 0x0198); // 408 bytes (0x000188 - 0x000198)
static_assert(sizeof(UDamageStatusEffect) == 0x0210); // 528 bytes (0x000188 - 0x000210)
static_assert(sizeof(ADamageTextActor) == 0x02E0); // 736 bytes (0x0002C0 - 0x0002E0)
static_assert(sizeof(UDeactivatedBehaviorStateInfo) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UDeactivatedRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UDeathBehavior) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UDeathBehaviorStateInfo) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UDeathRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(FDeathBodyTypeAudioEvent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UDeathBodyTypeAudioEvents) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UDeathBodyTypeParticleSystems) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UDeathClassData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UDeathMenuWidget) == 0x0360); // 864 bytes (0x000308 - 0x000360)
static_assert(sizeof(UDeathOverrideStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UDeathStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UDebugOverlayWidget) == 0x0310); // 784 bytes (0x000308 - 0x000310)
static_assert(sizeof(UDecisionTree) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDecisionTree_AvoidMeleeAttack) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UDecisionTree_Base) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDecisionTree_DefaultMeleeAttack) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UDecisionTree_CanidMeleeAttack) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UDecisionTree_CanidOnStatusEffectAdded) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UDecisionTree_CanidMeleeRecovery) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UDecisionTree_Combined) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_CombinedRequests) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_CompanionCalledShot) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UDecisionTree_DefaultAttack) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UDecisionTree_DefaultOutOfCombat) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_DefaultPacifist) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UDecisionTree_DefaultRangeAttack) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UDecisionTree_DefaultSwitchContext) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_Dodge) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UDecisionTree_ForceCompanionFollow) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UDecisionTree_GainedAwareness) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDecisionTree_GorillianRangeComplete) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_GorillianMeleeComplete) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UDecisionTree_GorillianBurrowComplete) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_GorillianCombatStart) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UDecisionTree_PrimalRavager) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UDecisionTree_JumpReposition) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UDecisionTree_LineOfFireBlocked) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UDecisionTree_LostTarget) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UDecisionTree_MantiQueenDefaultTree) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UDecisionTree_MantiQueenRangeComplete) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_MantiBlock) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_MeleeUnreachable) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_PreEmptiveMeleeAction) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_QueueBehavior) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(FRandomRequestItem) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UDecisionTree_RandomRequest) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UDecisionTree_RaptidonMatriarchOnPhaseChange) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UDecisionTree_ReactiveRangeAction) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UDecisionTree_SecurityBotOutOfCombat) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UDecisionTree_WeaponPreference) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(FPhaseWeaponDefinition) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UDecisionTree_WeaponSwapByPhase) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(FDecisionTreeStack) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDecisionTreeContextMap) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(UDecisionTreeComponent) == 0x0168); // 360 bytes (0x0000E0 - 0x000168)
static_assert(sizeof(FDecisionTreeMapElement) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UDecisionTreeDesignerData) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UDecisionTreeDesignerDataBundle) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(FDecisionTreeResult) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UDecisionTreeProcessor) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UDecisionTreeSequenceRequestData) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UDerivedStatWidget) == 0x0328); // 808 bytes (0x000300 - 0x000328)
static_assert(sizeof(UDespawnAction) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UDestructibleAudioComponent) == 0x01A0); // 416 bytes (0x000150 - 0x0001A0)
static_assert(sizeof(UDestructibleShoutComponent) == 0x0108); // 264 bytes (0x000100 - 0x000108)
static_assert(sizeof(UDevelopmentFunctionality) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDialogBoxWidget) == 0x03B8); // 952 bytes (0x000308 - 0x0003B8)
static_assert(sizeof(UDialogBoxRespecWidget) == 0x03D0); // 976 bytes (0x0003B8 - 0x0003D0)
static_assert(sizeof(UDialogWarningBoxWidget) == 0x0368); // 872 bytes (0x000308 - 0x000368)
static_assert(sizeof(UDifficultyManager) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(FDifficultyModifier) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FDifficultyStatModifierDescription) == 0x0250); // 592 bytes (0x000010 - 0x000250)
static_assert(sizeof(UDifficultyRpgStatModifiers) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UDifficultySelectWidget) == 0x0480); // 1152 bytes (0x000308 - 0x000480)
static_assert(sizeof(UDirectionalAnimDisableStatusEffect) == 0x01B0); // 432 bytes (0x0001A0 - 0x0001B0)
static_assert(sizeof(UDirt) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UDisableBehaviorStateInfo) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UDisableRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UDisguiseData) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(FLogicalExpressionGroup) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FLogicalGroupedExpression) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(UQuestItem) == 0x01D0); // 464 bytes (0x000118 - 0x0001D0)
static_assert(sizeof(UDisguiseItem) == 0x01D0); // 464 bytes (0x0001D0 - 0x0001D0)
static_assert(sizeof(UDisguiseMeterWidget) == 0x0430); // 1072 bytes (0x000300 - 0x000430)
static_assert(sizeof(UDisguiseStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UDisplayInterface) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDLCManager) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UDodgeBehaviorStateInfo) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UDodgeRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(ADoor) == 0x0420); // 1056 bytes (0x0002B8 - 0x000420)
static_assert(sizeof(UDragContainerWidget) == 0x02B8); // 696 bytes (0x000278 - 0x0002B8)
static_assert(sizeof(UDraggableInterface) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDragVisualsWidget) == 0x0278); // 632 bytes (0x000278 - 0x000278)
static_assert(sizeof(UItemCellVisualsWidget) == 0x0280); // 640 bytes (0x000278 - 0x000280)
static_assert(sizeof(ADynamicTOD) == 0x0EE8); // 3816 bytes (0x0002B8 - 0x000EE8)
static_assert(sizeof(AElevator) == 0x03E0); // 992 bytes (0x0002B8 - 0x0003E0)
static_assert(sizeof(UElevatorAudioComponent) == 0x01A0); // 416 bytes (0x000150 - 0x0001A0)
static_assert(sizeof(UIdleDisableStatusEffect) == 0x01A0); // 416 bytes (0x000198 - 0x0001A0)
static_assert(sizeof(UElevatorDisableStatusEffect) == 0x01A8); // 424 bytes (0x0001A0 - 0x0001A8)
static_assert(sizeof(FEmotionEntry) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(UEmotionData) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UEnableEmitterModVisual) == 0x0080); // 128 bytes (0x000068 - 0x000080)
static_assert(sizeof(FPotentialEncounterList) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FEncounterClearConditions) == 0x00F8); // 248 bytes (0x000000 - 0x0000F8)
static_assert(sizeof(FGameTimeDataEntry) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FEncounterActivationConditions) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(AEncounter) == 0x0608); // 1544 bytes (0x0002B8 - 0x000608)
static_assert(sizeof(UEncounterComponent) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(UEncounterEnemyDescription) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UEncounterEnemyScaled) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UEncounterEnemyFixed) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UEncounterCompositionBase) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UEncounterCompositionStandard) == 0x00C0); // 192 bytes (0x0000B0 - 0x0000C0)
static_assert(sizeof(UEncounterCompositionSubList) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UEncounterList) == 0x01E8); // 488 bytes (0x000038 - 0x0001E8)
static_assert(sizeof(UEnemyDifficultyWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UEnemyScannerComponent) == 0x0220); // 544 bytes (0x0000E0 - 0x000220)
static_assert(sizeof(UEnemyScannerWidget) == 0x0358); // 856 bytes (0x000300 - 0x000358)
static_assert(sizeof(AEnvironmentalSpaceVolume) == 0x0318); // 792 bytes (0x000310 - 0x000318)
static_assert(sizeof(UEnvironmentInteractionComponent) == 0x0190); // 400 bytes (0x0000E0 - 0x000190)
static_assert(sizeof(UEnvQueryGenerator_Cover) == 0x00D8); // 216 bytes (0x000058 - 0x0000D8)
static_assert(sizeof(UEnvQueryGenerator_FeetLocation) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UEnvQueryTest_CanSeeCharacter) == 0x0208); // 520 bytes (0x000200 - 0x000208)
static_assert(sizeof(UEnvQueryTest_CharacterHealth) == 0x0200); // 512 bytes (0x000200 - 0x000200)
static_assert(sizeof(UEnvQueryTest_Cover) == 0x0208); // 520 bytes (0x000200 - 0x000208)
static_assert(sizeof(UEnvQueryTest_DynamicSearchTest) == 0x0200); // 512 bytes (0x000200 - 0x000200)
static_assert(sizeof(UEnvQueryTest_DynamicFleeTest) == 0x0200); // 512 bytes (0x000200 - 0x000200)
static_assert(sizeof(UEnvQueryTest_FollowerPos) == 0x0280); // 640 bytes (0x000200 - 0x000280)
static_assert(sizeof(UEnvQueryTest_HasIndianaTag) == 0x0228); // 552 bytes (0x000200 - 0x000228)
static_assert(sizeof(UEnvQueryTest_IsActorOfClass) == 0x0208); // 520 bytes (0x000200 - 0x000208)
static_assert(sizeof(UEnvQueryTest_NavmeshRaycast) == 0x0208); // 520 bytes (0x000200 - 0x000208)
static_assert(sizeof(UEnvQueryTest_OccupiedRaycast) == 0x0220); // 544 bytes (0x000200 - 0x000220)
static_assert(sizeof(UEnvQueryTest_OccupiedEnvironmentNodes) == 0x0238); // 568 bytes (0x000200 - 0x000238)
static_assert(sizeof(UEnvQueryTest_PreferredCover) == 0x0278); // 632 bytes (0x000208 - 0x000278)
static_assert(sizeof(UEnvQueryTest_Ranged) == 0x0208); // 520 bytes (0x000200 - 0x000208)
static_assert(sizeof(UEnvQueryTest_PreferredRanged) == 0x02E8); // 744 bytes (0x000208 - 0x0002E8)
static_assert(sizeof(UEnvQueryTest_Projectile) == 0x0208); // 520 bytes (0x000200 - 0x000208)
static_assert(sizeof(UEnvQueryTest_TeamRelationship) == 0x0208); // 520 bytes (0x000200 - 0x000208)
static_assert(sizeof(UEnvQueryTest_ValidCover) == 0x0208); // 520 bytes (0x000208 - 0x000208)
static_assert(sizeof(UEnvQueryTest_ValidCoverFire) == 0x0240); // 576 bytes (0x000208 - 0x000240)
static_assert(sizeof(UEnvQueryTest_ValidJump) == 0x0200); // 512 bytes (0x000200 - 0x000200)
static_assert(sizeof(UEnvQueryTest_ValidRangedFire) == 0x0208); // 520 bytes (0x000208 - 0x000208)
static_assert(sizeof(UEpicGameStoreDLCManager) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(UEQSContext_IndianaBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_QuerierFeetLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_PrimaryTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_PrimaryTargetLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_PrimaryTargetFeetLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_PrimaryTargetStimulusLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_FollowTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_WanderAchor) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_FleeStatusEffectTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_CompanionFollowOrigin) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_CompanionFollowOriginProjected) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_CompanionFollowForward) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_CompanionCommandLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_CompanionCommandForward) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_CompanionCommandTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_Companions) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_CalledShotSpellTargetFeetLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_CalledShotSpellTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_CalledShotEndFurnitureLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_SphereCheatLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_Player) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_PrimaryTargetStimulusSourceActorLocation) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_TetherOrigin) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEQSContext_GeneralEQSActor) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FAISelector_EQSParameter) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FAIDynamicParam_IndianaBase) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UEQSRequest_IndianaBase) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(FWeaponSlot) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMedKitConsumableSlot) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UEquipmentComponent) == 0x0490); // 1168 bytes (0x0000E0 - 0x000490)
static_assert(sizeof(UEquipmentModsWidget) == 0x03F0); // 1008 bytes (0x000300 - 0x0003F0)
static_assert(sizeof(UEquipmentModWidget) == 0x02A8); // 680 bytes (0x000278 - 0x0002A8)
static_assert(sizeof(UEventEffectComponent) == 0x0130); // 304 bytes (0x0000E0 - 0x000130)
static_assert(sizeof(UEventEffects) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UEventListener) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(UFactionListener) == 0x00B0); // 176 bytes (0x000058 - 0x0000B0)
static_assert(sizeof(UOnKillListener) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(UOnCompanionKillListener) == 0x00C8); // 200 bytes (0x0000B0 - 0x0000C8)
static_assert(sizeof(UOnKillTurnToAshListener) == 0x00B8); // 184 bytes (0x0000B0 - 0x0000B8)
static_assert(sizeof(UOnCompanionRegistrationChanged) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnCompanionRegistrationAdded) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnAttackComplete) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnCausedDamage) == 0x00F8); // 248 bytes (0x0000B0 - 0x0000F8)
static_assert(sizeof(UOnReceiveDamage) == 0x00E0); // 224 bytes (0x0000B0 - 0x0000E0)
static_assert(sizeof(UOnReceiveFallingDamage) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnMeleeHit) == 0x00C0); // 192 bytes (0x0000B0 - 0x0000C0)
static_assert(sizeof(UOnMeleeActionStart) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnMeleeActionEnd) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnSpellCast) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnSpellRemoved) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnBlockStart) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnBlockEnd) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnPerfectBlock) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnBlockedHit) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnDetected) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnIndividualDetected) == 0x00C0); // 192 bytes (0x0000B0 - 0x0000C0)
static_assert(sizeof(UOnPlayerMoveStart) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnPlayerMoveEnd) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnDodgeEvent) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnStatusEffectAddedEvent) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UOnStatusEffectRemovedEvent) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnNumHostileStatusEffects) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UHasStatusEffectsEvent) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UOnSkillUsedEvent) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnSkillEndedEvent) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnSkillCheckSuccess) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnItemConsumed) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnSpendMoney) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnPickPocket) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnPickPocketStart) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnPickPocketEnd) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UReputationListener) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UOnPartyChange) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UOnPerfectDodge) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnBehaviorStateChange) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnCalledShotCameraChange) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnCompanionCommandIssued) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnCompanionCommandIssuedEnemy) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnHealthPercentage) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnCompanionKilled) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnCinematicModeChange) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnMedKitUsed) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnRestrictedAreaEntered) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnRestrictedAreaExited) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOrListener) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UOnAcrophobiaEnabled) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnTactialTimeDialationStart) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnTactialTimeDialationEnd) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnResurrect) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnRest) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnInteractableSelectionChanged) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnStatUpdated) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnSkillUpdated) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnOccupiedElevatorMove) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnAnimationSpellTrigger) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UOnJump) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnLanded) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnTTDMeterPercentage) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnSprintStart) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnSprintEnd) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnPlayerFirstAttacked) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UOnPlayerFirstAttack) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UOnStateOfBeingChanged) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnObjectBumped) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnCombatStateChange) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnGetUp) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnPlayerConversationChange) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnAddictionTimerEntersMaxed) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnAddictionTimerLeavesMaxed) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnSellItemNumBits) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnFlawAccepted) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnLevelChangedListener) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnItemTinkered) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnEncumberedChange) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnStartCrouch) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnStopCrouch) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnInterrogateStartEvent) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnGroinHit) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnPatientNKill) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnMadScientistKill) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnBrandsMatch) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnSharpDressed) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnSpecialPETBenefits) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnUdderGatlingNeedler) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnElementalMaelstrom) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnInterrogateEndEvent) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnMaxPositiveFactions) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnMaxNegativeFactions) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnKillingBlowListener) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnQuestCompleteListener) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnModInstalledListener) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnWeaponEquipped) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UOnWeaponHolstered) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UOnWeaponUnholstered) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(UOnWithinRoboRange) == 0x00C0); // 192 bytes (0x0000B0 - 0x0000C0)
static_assert(sizeof(UOnPlayerBeginPlay) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnFastTravelInitiated) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnRespec) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UOnCarryWeightChange) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UOnGlobalVarChanged) == 0x0078); // 120 bytes (0x000058 - 0x000078)
static_assert(sizeof(UOnPickupAudioLog) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(AEvidenceActor) == 0x0550); // 1360 bytes (0x0002B8 - 0x000550)
static_assert(sizeof(UEvidenceComponent) == 0x00E0); // 224 bytes (0x0000E0 - 0x0000E0)
static_assert(sizeof(UInteractionEvent) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UExaminableEvent) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UExaminableWidget) == 0x0350); // 848 bytes (0x000308 - 0x000350)
static_assert(sizeof(UExpandableAreaBase) == 0x03F0); // 1008 bytes (0x000120 - 0x0003F0)
static_assert(sizeof(UEyeColor) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UFaceFxRigsGameDataReference) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UFactionData) == 0x0200); // 512 bytes (0x000030 - 0x000200)
static_assert(sizeof(UFactionManager) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(UToolTipContentWidget) == 0x0300); // 768 bytes (0x000300 - 0x000300)
static_assert(sizeof(UFastTravelTooltipWidget) == 0x0310); // 784 bytes (0x000300 - 0x000310)
static_assert(sizeof(UFilePathLoader) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FIndianaDamageEvent) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FShotInfo) == 0x0108); // 264 bytes (0x000000 - 0x000108)
static_assert(sizeof(UFireMode) == 0x09F8); // 2552 bytes (0x0005B8 - 0x0009F8)
static_assert(sizeof(FDamageTypeRequirementFire) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UFireMultiDamageTypeMode) == 0x0A38); // 2616 bytes (0x0009F8 - 0x000A38)
static_assert(sizeof(FSpawnPropertyModifiers) == 0x00D0); // 208 bytes (0x000000 - 0x0000D0)
static_assert(sizeof(ASpawnNodeBase) == 0x0538); // 1336 bytes (0x0002B8 - 0x000538)
static_assert(sizeof(AFixedSpawnNode) == 0x0560); // 1376 bytes (0x000538 - 0x000560)
static_assert(sizeof(UFlavorTextWidget) == 0x0310); // 784 bytes (0x000300 - 0x000310)
static_assert(sizeof(UFlaw) == 0x0088); // 136 bytes (0x000030 - 0x000088)
static_assert(sizeof(UFlawSummaryEntryWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(UFlawTree) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(UFleeBehaviorStateInfo) == 0x0180); // 384 bytes (0x000178 - 0x000180)
static_assert(sizeof(UFleeRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(AFleeNode) == 0x0358); // 856 bytes (0x000358 - 0x000358)
static_assert(sizeof(UFlipbookWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UFloorIndicatorWidget) == 0x03C0); // 960 bytes (0x000300 - 0x0003C0)
static_assert(sizeof(UFloorLevelWidget) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(UFollowBehaviorStateInfo) == 0x0150); // 336 bytes (0x000120 - 0x000150)
static_assert(sizeof(UFollowRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UFootstepAudio) == 0x0148); // 328 bytes (0x000030 - 0x000148)
static_assert(sizeof(UFootstepData) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UFootstepEnvironmentInteraction) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(FFootstepStimulus) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FFootstepSurfaceMatch) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFootstepMatch) == 0x0038); // 56 bytes (0x000018 - 0x000038)
static_assert(sizeof(FFootstepStimulusOverride) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(FSpecialEventStimulusOverride) == 0x0020); // 32 bytes (0x000018 - 0x000020)
static_assert(sizeof(FSpecialMovementStimulusProperties) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UFootstepStimulusData) == 0x00A0); // 160 bytes (0x000038 - 0x0000A0)
static_assert(sizeof(FFootstepVisuals) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FFootstepVisualsOverride) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(FSpecialEventVisualsOverride) == 0x0048); // 72 bytes (0x000018 - 0x000048)
static_assert(sizeof(FSpecialMovementVisualProperties) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UFootstepVisualData) == 0x00C8); // 200 bytes (0x000038 - 0x0000C8)
static_assert(sizeof(UForcedAnimationComponent) == 0x0110); // 272 bytes (0x0000E0 - 0x000110)
static_assert(sizeof(UForceFeedbackEventEffect) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UFPVAnimInstance) == 0x0600); // 1536 bytes (0x000558 - 0x000600)
static_assert(sizeof(UFPVCameraComponent) == 0x0880); // 2176 bytes (0x000860 - 0x000880)
static_assert(sizeof(UFPVSkeletalMeshComponent) == 0x0FD0); // 4048 bytes (0x000FC8 - 0x000FD0)
static_assert(sizeof(UFreezeDisableStatusEffect) == 0x0198); // 408 bytes (0x000198 - 0x000198)
static_assert(sizeof(UFurnitureAction) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UFurnitureSkeletonPreviewMeshMap) == 0x00C8); // 200 bytes (0x000038 - 0x0000C8)
static_assert(sizeof(UFurnitureBehaviorStateInfo) == 0x01A8); // 424 bytes (0x000120 - 0x0001A8)
static_assert(sizeof(UFurnitureRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(FurniturePositionalAnimationData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UFurnitureAnimationData) == 0x01A0); // 416 bytes (0x000038 - 0x0001A0)
static_assert(sizeof(FTransformOverride) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UFurnitureComponent) == 0x0470); // 1136 bytes (0x000268 - 0x000470)
static_assert(sizeof(UGadget) == 0x0150); // 336 bytes (0x000118 - 0x000150)
static_assert(sizeof(UGameCalendar) == 0x00E0); // 224 bytes (0x000030 - 0x0000E0)
static_assert(sizeof(UKeyHoldActionBase) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UStandardKeyHoldAction) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(UIndexedReleaseKeyHoldAction) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(UDoubleClickKeyHoldAction) == 0x0090); // 144 bytes (0x000068 - 0x000090)
static_assert(sizeof(UIndianaInputComponent) == 0x01A0); // 416 bytes (0x000170 - 0x0001A0)
static_assert(sizeof(UGameInputComponent) == 0x0228); // 552 bytes (0x0001A0 - 0x000228)
static_assert(sizeof(UGammaSelectionWidget) == 0x0370); // 880 bytes (0x000308 - 0x000370)
static_assert(sizeof(UGDKDLCManager) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UGeneralButtonWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(UGenericCollapsableListContainer) == 0x0310); // 784 bytes (0x000300 - 0x000310)
static_assert(sizeof(UGenericListEntryWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UGenericLogicDataAsset) == 0x00C0); // 192 bytes (0x000038 - 0x0000C0)
static_assert(sizeof(UGenericNotificationEntryWidget) == 0x0440); // 1088 bytes (0x000300 - 0x000440)
static_assert(sizeof(UGenericNotificationWidget) == 0x0460); // 1120 bytes (0x000300 - 0x000460)
static_assert(sizeof(AGhostNavMesh) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UGhostNavMeshComponent) == 0x0590); // 1424 bytes (0x000590 - 0x000590)
static_assert(sizeof(FAchievementArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UGlobalAchievementData) == 0x0118); // 280 bytes (0x000038 - 0x000118)
static_assert(sizeof(FAIEventTypeMapElement) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FWeaponAISettingsMapElement) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FLostTargetTimes) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDisablePriorityMapElement) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCompanionFollowSettings) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCompanionCommmandMoveToSettings) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FCompanionCommmandSettings) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FNavigationBlockDetectionSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FNavigationBlockedSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FNavigationBumpSettings) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FNavigationJumpSettings) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FGameTimespan) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSpellSet) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FMinMaxChatterTime) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FChatterEventRestrictedCharacterGroups) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FInvestigationSettings) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FPseudoGodModeSettings) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UGlobalAIData) == 0x0AC8); // 2760 bytes (0x000038 - 0x000AC8)
static_assert(sizeof(FDamageTypeScalar) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FArmorVsDamageTypes) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UGlobalArmorData) == 0x01C8); // 456 bytes (0x000038 - 0x0001C8)
static_assert(sizeof(FInteractAudioEvent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UGlobalAudioData) == 0x0308); // 776 bytes (0x000038 - 0x000308)
static_assert(sizeof(FReputationActionConsequence) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FReputationElement) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UGlobalFactionData) == 0x0308); // 776 bytes (0x000038 - 0x000308)
static_assert(sizeof(UGlobalFactionDataCollection) == 0x0100); // 256 bytes (0x000038 - 0x000100)
static_assert(sizeof(UGlobalItemData) == 0x0100); // 256 bytes (0x000038 - 0x000100)
static_assert(sizeof(FNameTypeBinding) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FLinkedBinding) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FGamepadBindings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FGamepadBindingsList) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UGlobalKeybindsData) == 0x00E8); // 232 bytes (0x000038 - 0x0000E8)
static_assert(sizeof(FMeleeInput) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FMeleeAction) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(UGlobalMeleeData) == 0x00B0); // 176 bytes (0x000038 - 0x0000B0)
static_assert(sizeof(FDefaultTeamRelationships) == 0x00F0); // 240 bytes (0x000000 - 0x0000F0)
static_assert(sizeof(UGlobalTeamData) == 0x01D8); // 472 bytes (0x000038 - 0x0001D8)
static_assert(sizeof(UGlobalTeamDataCollection) == 0x0190); // 400 bytes (0x000038 - 0x000190)
static_assert(sizeof(FActionLabelDescription) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSpecializedAmmoClasses) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FHUDFadeSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UGlobalUIData) == 0x0178); // 376 bytes (0x000038 - 0x000178)
static_assert(sizeof(UGlobalWeaponData) == 0x01B8); // 440 bytes (0x000038 - 0x0001B8)
static_assert(sizeof(UGravityStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(AGravManger) == 0x02B8); // 696 bytes (0x0002B8 - 0x0002B8)
static_assert(sizeof(UButtonGroup) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UTransitionGroup) == 0x00A0); // 160 bytes (0x000030 - 0x0000A0)
static_assert(sizeof(UToggleTransitionGroup) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UScrollingWidgetGroup) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(FHairAppearance) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UHairAppearances) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UHairColor) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(UHairCustomizationWidget) == 0x0398); // 920 bytes (0x000398 - 0x000398)
static_assert(sizeof(AHazard) == 0x0380); // 896 bytes (0x0002B8 - 0x000380)
static_assert(sizeof(UHazardAudioComponent) == 0x01A0); // 416 bytes (0x000150 - 0x0001A0)
static_assert(sizeof(AHazardSource) == 0x0480); // 1152 bytes (0x000478 - 0x000480)
static_assert(sizeof(FTrackingSetting) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UHeadAndBodyTrackingComponent) == 0x05D8); // 1496 bytes (0x0000E0 - 0x0005D8)
static_assert(sizeof(FNewHeadAppearance) == 0x00C0); // 192 bytes (0x000040 - 0x0000C0)
static_assert(sizeof(UHeadAppearances) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UHealGunBehaviorStateInfo) == 0x0188); // 392 bytes (0x000178 - 0x000188)
static_assert(sizeof(UHealGunRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UHealStatusEffect) == 0x01B0); // 432 bytes (0x000188 - 0x0001B0)
static_assert(sizeof(UHealthComponent) == 0x01C0); // 448 bytes (0x0000E0 - 0x0001C0)
static_assert(sizeof(UHealthKitTooltipWidget) == 0x03B0); // 944 bytes (0x000300 - 0x0003B0)
static_assert(sizeof(AHearingNavLink) == 0x02D0); // 720 bytes (0x0002D0 - 0x0002D0)
static_assert(sizeof(FAreaHeightTile) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(AHeightmapManager) == 0x0340); // 832 bytes (0x000310 - 0x000340)
static_assert(sizeof(UHelmet) == 0x02B0); // 688 bytes (0x0001F8 - 0x0002B0)
static_assert(sizeof(UHeroStat) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UHideMeshEventEffect) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UHighlightComponent) == 0x0138); // 312 bytes (0x0000E0 - 0x000138)
static_assert(sizeof(FHeightValuesTexture) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(UHitEffectIndicatorComponent) == 0x0970); // 2416 bytes (0x0000E0 - 0x000970)
static_assert(sizeof(FHitLocationChance) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UHitLocationData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UHitReactionStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UHopeBotBehaviorStateInfo) == 0x0178); // 376 bytes (0x000178 - 0x000178)
static_assert(sizeof(UHopeBotRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UHoverbotAnimInstance) == 0x0990); // 2448 bytes (0x000950 - 0x000990)
static_assert(sizeof(UHUDWidget) == 0x03F0); // 1008 bytes (0x000308 - 0x0003F0)
static_assert(sizeof(UHunkerDownBehaviorStateInfo) == 0x0128); // 296 bytes (0x000128 - 0x000128)
static_assert(sizeof(UHunkerDownBehaviorRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UIdleBehaviorStateInfo) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UIdleRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UIdleCameraComponent) == 0x0350); // 848 bytes (0x0002F0 - 0x000350)
static_assert(sizeof(UImageSectionWidget) == 0x02A8); // 680 bytes (0x000288 - 0x0002A8)
static_assert(sizeof(UImmobilizeStatusEffect) == 0x0188); // 392 bytes (0x000188 - 0x000188)
static_assert(sizeof(UImmuneStatusEffect) == 0x01B8); // 440 bytes (0x000188 - 0x0001B8)
static_assert(sizeof(FImpactAudioDamageTypeOverlays) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UImpactAudioData) == 0x0230); // 560 bytes (0x000038 - 0x000230)
static_assert(sizeof(FImpactAIDataOverride) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UImpactDataSet) == 0x00A0); // 160 bytes (0x000038 - 0x0000A0)
static_assert(sizeof(FImpactParticle) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FImpactFxEntry) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UImpactFxData) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(FAimTargets) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FPropComponents) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(AIndianaCharacter) == 0x0C18); // 3096 bytes (0x000560 - 0x000C18)
static_assert(sizeof(AIndianaAiCharacter) == 0x0E60); // 3680 bytes (0x000C18 - 0x000E60)
static_assert(sizeof(AIndianaAiController) == 0x04A8); // 1192 bytes (0x0003C0 - 0x0004A8)
static_assert(sizeof(UIndianaAIPerceptionComponent) == 0x0220); // 544 bytes (0x0001C0 - 0x000220)
static_assert(sizeof(UIndianaAIPerceptionSystem) == 0x01B0); // 432 bytes (0x000138 - 0x0001B0)
static_assert(sizeof(UIndianaAISense_Hearing) == 0x00F0); // 240 bytes (0x0000F0 - 0x0000F0)
static_assert(sizeof(UIndianaAISense_Sight) == 0x0180); // 384 bytes (0x000180 - 0x000180)
static_assert(sizeof(UIndianaAISystem) == 0x0138); // 312 bytes (0x000138 - 0x000138)
static_assert(sizeof(FAudioState) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(AIndianaAkAmbientVolume) == 0x03D8); // 984 bytes (0x000358 - 0x0003D8)
static_assert(sizeof(AIndianaAkAmbientSpatialVolume) == 0x03F0); // 1008 bytes (0x0003D8 - 0x0003F0)
static_assert(sizeof(UIndianaAnimNotify_FootPlace) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(FAttributeStatModifierDescription) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(UIndianaAttribute) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UStrengthAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UDexterityAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UEnduranceAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UIntelligenceAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UPerceptionAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UWillpowerAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UCharmAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UWitsAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UTemperamentAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UIndianaAttributes) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UIndianaDefaultButtonAudioData) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(FLandAudioEvent) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UIndianaAudioComponent) == 0x0280); // 640 bytes (0x0000E0 - 0x000280)
static_assert(sizeof(UIndianaAutoPlayer) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FAutoConsoleCommandProperties) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FAutoRandomInputProperties) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UIndianaAutoPlayerTestSettings) == 0x01E8); // 488 bytes (0x000040 - 0x0001E8)
static_assert(sizeof(UIndianaAvoidanceManager) == 0x0150); // 336 bytes (0x0000E8 - 0x000150)
static_assert(sizeof(UIndianaBehaviorTreeComponent) == 0x0318); // 792 bytes (0x0002C8 - 0x000318)
static_assert(sizeof(UIndianaBossBar) == 0x0380); // 896 bytes (0x000300 - 0x000380)
static_assert(sizeof(AIndianaCharacterDummy) == 0x0610); // 1552 bytes (0x000560 - 0x000610)
static_assert(sizeof(UIndianaCheatManager) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UIndianaDamageType) == 0x00B0); // 176 bytes (0x000048 - 0x0000B0)
static_assert(sizeof(AIndianaDebugCameraController) == 0x0730); // 1840 bytes (0x000728 - 0x000730)
static_assert(sizeof(UIndianaDragDropOperation) == 0x00B8); // 184 bytes (0x000090 - 0x0000B8)
static_assert(sizeof(UIndianaFlybyAkComponent) == 0x0490); // 1168 bytes (0x000488 - 0x000490)
static_assert(sizeof(FAISoundDetectionSettings) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UIndianaFormulas) == 0x0158); // 344 bytes (0x000030 - 0x000158)
static_assert(sizeof(FWeatherState) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(UWeatherStateContainer) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UIndianaGameInstance) == 0x0D70); // 3440 bytes (0x0001B0 - 0x000D70)
static_assert(sizeof(AIndianaGameMode) == 0x03D8); // 984 bytes (0x0003A8 - 0x0003D8)
static_assert(sizeof(UIndianaGameplayStatics) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UIndianaGameUserSettings) == 0x0A68); // 2664 bytes (0x000128 - 0x000A68)
static_assert(sizeof(UIndianaGameViewportClient) == 0x0398); // 920 bytes (0x000380 - 0x000398)
static_assert(sizeof(UIndianaGlobals) == 0x0278); // 632 bytes (0x000030 - 0x000278)
static_assert(sizeof(FTagToAudio) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTagToAudioList) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UIndianaItemAudioData) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(FWeightedImageData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FLoadingImageContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FConditionalizedLoadingImageContainer) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(FLoadingScreenRegionMaps) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FConditionalizedLoadingTips) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(UIndianaLoadingScreenImageData) == 0x01C0); // 448 bytes (0x000038 - 0x0001C0)
static_assert(sizeof(UIndianaLoadingScreenManager) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(UIndianaMathStatics) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UIndianaNavigationSystem) == 0x1730); // 5936 bytes (0x001638 - 0x001730)
static_assert(sizeof(FRotatedBox) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UIndianaNavModifierComponent) == 0x0178); // 376 bytes (0x000110 - 0x000178)
static_assert(sizeof(UIndianaPathFollowingComponent) == 0x0350); // 848 bytes (0x0002A8 - 0x000350)
static_assert(sizeof(UIndianaPlayerAudioComponent) == 0x03A8); // 936 bytes (0x000280 - 0x0003A8)
static_assert(sizeof(AIndianaPlayerCharacter) == 0x17C0); // 6080 bytes (0x000C18 - 0x0017C0)
static_assert(sizeof(AIndianaPlayerController) == 0x0680); // 1664 bytes (0x000628 - 0x000680)
static_assert(sizeof(UIndianaPlayerInput) == 0x03D0); // 976 bytes (0x0003B8 - 0x0003D0)
static_assert(sizeof(AIndianaPlayerStart) == 0x0318); // 792 bytes (0x0002E8 - 0x000318)
static_assert(sizeof(UIndianaProjMovementComponent) == 0x0230); // 560 bytes (0x000218 - 0x000230)
static_assert(sizeof(FSkillUnlockEffect) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UIndianaSkill) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UHandGunsSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(ULongGunsSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UHeavyWeaponsSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(USneakSkill) == 0x0080); // 128 bytes (0x000078 - 0x000080)
static_assert(sizeof(ULockpickSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UEngineeringSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UHackSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UMedicalSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(ULightMeleeSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UHeavyMeleeSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UScienceSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UPersuadeSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(ULieSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UIntimidateSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UDodgeSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UBlockSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UInspirationSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UDeterminationSkill) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(UIndianaSkills) == 0x00C0); // 192 bytes (0x000030 - 0x0000C0)
static_assert(sizeof(FSkillsArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAttributesArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSkillCheck) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UIndianaStatGlobals) == 0x0120); // 288 bytes (0x000038 - 0x000120)
static_assert(sizeof(UIndianaStats) == 0x0118); // 280 bytes (0x000030 - 0x000118)
static_assert(sizeof(AIndianaTargetPoint) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(FTextAnimationData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UIndianaTextAnimationData) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(AIndianaUI) == 0x0690); // 1680 bytes (0x0003A8 - 0x000690)
static_assert(sizeof(UIndianaUIAudioData) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(FOpacityWrapper) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UIndianaUIColorsData) == 0x00D8); // 216 bytes (0x000038 - 0x0000D8)
static_assert(sizeof(UIndianaUIControllerIconsData) == 0x0128); // 296 bytes (0x000038 - 0x000128)
static_assert(sizeof(UIndianaUIFunctionLibrary) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AIndianaWorldSettings) == 0x05B8); // 1464 bytes (0x0004A0 - 0x0005B8)
static_assert(sizeof(UInputGuideWidget) == 0x0478); // 1144 bytes (0x000300 - 0x000478)
static_assert(sizeof(UInputLabelGroupWidget) == 0x0370); // 880 bytes (0x000300 - 0x000370)
static_assert(sizeof(UInputLabelHoldWidget) == 0x03B8); // 952 bytes (0x000300 - 0x0003B8)
static_assert(sizeof(UInputLabelWidget) == 0x0370); // 880 bytes (0x000300 - 0x000370)
static_assert(sizeof(UInputWidget) == 0x0378); // 888 bytes (0x000300 - 0x000378)
static_assert(sizeof(UInstantHitData) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(FInteractPayload) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FInteractActorDescription) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UInteractableComponent) == 0x0330); // 816 bytes (0x000268 - 0x000330)
static_assert(sizeof(UInteractableMapEntry) == 0x0308); // 776 bytes (0x000300 - 0x000308)
static_assert(sizeof(UScriptingEvent) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UInteractionInterface) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInteractorInterface) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UInterestComponent) == 0x0198); // 408 bytes (0x0000E0 - 0x000198)
static_assert(sizeof(FInterestTypeData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UInterestDataPackage) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UInventoryAmmoData) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UInventoryPageWidget) == 0x0430); // 1072 bytes (0x000300 - 0x000430)
static_assert(sizeof(UInventoryArmorPageWidget) == 0x0488); // 1160 bytes (0x000430 - 0x000488)
static_assert(sizeof(UInventoryConsumablesPageWidget) == 0x0570); // 1392 bytes (0x000430 - 0x000570)
static_assert(sizeof(UInventoryGadgetsPageWidget) == 0x04F0); // 1264 bytes (0x000430 - 0x0004F0)
static_assert(sizeof(UInventoryItemSlotWidget) == 0x0308); // 776 bytes (0x000300 - 0x000308)
static_assert(sizeof(UItemViewerItemWidget) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(UInventoryItemWidget) == 0x0370); // 880 bytes (0x000288 - 0x000370)
static_assert(sizeof(UInventoryJunkPageWidget) == 0x0430); // 1072 bytes (0x000430 - 0x000430)
static_assert(sizeof(UInventoryMaterialsPageWidget) == 0x0430); // 1072 bytes (0x000430 - 0x000430)
static_assert(sizeof(UInventoryModificationsPageWidget) == 0x0430); // 1072 bytes (0x000430 - 0x000430)
static_assert(sizeof(UInventoryWeaponAmmoGroupWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(UInventoryWeaponAmmoWidget) == 0x0318); // 792 bytes (0x000278 - 0x000318)
static_assert(sizeof(UInventoryWeaponsPageWidget) == 0x0550); // 1360 bytes (0x000430 - 0x000550)
static_assert(sizeof(UInventoryWidget) == 0x04B8); // 1208 bytes (0x0003A0 - 0x0004B8)
static_assert(sizeof(UInvestigateBehaviorStateInfo) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UInvestigateRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UItemActionButtonContainersWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UItemActionDragContainersWidget) == 0x0350); // 848 bytes (0x000300 - 0x000350)
static_assert(sizeof(UItemConditionWidget) == 0x0308); // 776 bytes (0x000300 - 0x000308)
static_assert(sizeof(UItemContainerEntryWidget) == 0x0368); // 872 bytes (0x000300 - 0x000368)
static_assert(sizeof(UItemContainerListWidget) == 0x03E8); // 1000 bytes (0x000300 - 0x0003E8)
static_assert(sizeof(UItemContainerWidget) == 0x0368); // 872 bytes (0x000308 - 0x000368)
static_assert(sizeof(UItemDegradationAlertWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UItemDegradationEntryWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UItemDrugSectionWidget) == 0x02B8); // 696 bytes (0x000288 - 0x0002B8)
static_assert(sizeof(UItemGadgetSectionWidget) == 0x02B0); // 688 bytes (0x000288 - 0x0002B0)
static_assert(sizeof(UItemInspectorStatWidget) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(UItemInspectorWidget) == 0x0388); // 904 bytes (0x000308 - 0x000388)
static_assert(sizeof(UItemMedKitSectionWidget) == 0x0298); // 664 bytes (0x000288 - 0x000298)
static_assert(sizeof(UItemModdingWidget) == 0x06B8); // 1720 bytes (0x0003A0 - 0x0006B8)
static_assert(sizeof(AItemOwnershipVolume) == 0x0350); // 848 bytes (0x000310 - 0x000350)
static_assert(sizeof(UItemRepairWidget) == 0x03A8); // 936 bytes (0x000308 - 0x0003A8)
static_assert(sizeof(UItemStatEntryWidget) == 0x0348); // 840 bytes (0x000300 - 0x000348)
static_assert(sizeof(UItemStatsCategoryWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(UItemStatsWidget) == 0x0418); // 1048 bytes (0x000300 - 0x000418)
static_assert(sizeof(UItemToolTipWidget) == 0x04F8); // 1272 bytes (0x000300 - 0x0004F8)
static_assert(sizeof(UItemTransferWidget) == 0x03D0); // 976 bytes (0x000308 - 0x0003D0)
static_assert(sizeof(UItemViewerButtonWidget) == 0x0BA0); // 2976 bytes (0x000B98 - 0x000BA0)
static_assert(sizeof(UItemViewerCellWidget) == 0x0280); // 640 bytes (0x000278 - 0x000280)
static_assert(sizeof(UItemViewerHealthKitButtonWidget) == 0x0B98); // 2968 bytes (0x000B98 - 0x000B98)
static_assert(sizeof(UItemViewerNavigationWidget) == 0x0390); // 912 bytes (0x000300 - 0x000390)
static_assert(sizeof(UItemViewerPageWidget) == 0x0370); // 880 bytes (0x000300 - 0x000370)
static_assert(sizeof(UItemViewerPannerWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UItemViewerScrollSelector) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UItemViewerScrollSelectorEntry) == 0x0310); // 784 bytes (0x000300 - 0x000310)
static_assert(sizeof(UItemViewerWidget) == 0x0650); // 1616 bytes (0x000300 - 0x000650)
static_assert(sizeof(AItemVisualizer) == 0x0390); // 912 bytes (0x0002B8 - 0x000390)
static_assert(sizeof(UItemWeaponSectionWidget) == 0x02B0); // 688 bytes (0x000288 - 0x0002B0)
static_assert(sizeof(UJournalDescriptionPanel) == 0x0338); // 824 bytes (0x000320 - 0x000338)
static_assert(sizeof(ULedgerJournalWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UJumpBehaviorStateInfo) == 0x0188); // 392 bytes (0x000178 - 0x000188)
static_assert(sizeof(UJumpRequestData) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(AJumpNavLink) == 0x02E8); // 744 bytes (0x0002E8 - 0x0002E8)
static_assert(sizeof(UKeybindDialogBoxWidget) == 0x0390); // 912 bytes (0x000308 - 0x000390)
static_assert(sizeof(UKeyBindsMenuWidget) == 0x0B58); // 2904 bytes (0x000308 - 0x000B58)
static_assert(sizeof(UKillCameraComponent) == 0x0160); // 352 bytes (0x000120 - 0x000160)
static_assert(sizeof(UKillStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(ALadder) == 0x0318); // 792 bytes (0x0002D0 - 0x000318)
static_assert(sizeof(ULedgerCharacterStatsWidget) == 0x0328); // 808 bytes (0x000300 - 0x000328)
static_assert(sizeof(ULedgerCharacterWidget) == 0x0348); // 840 bytes (0x000300 - 0x000348)
static_assert(sizeof(ULedgerMapQuestSelectionWidget) == 0x0370); // 880 bytes (0x000308 - 0x000370)
static_assert(sizeof(UMapBaseWidget) == 0x04B8); // 1208 bytes (0x000300 - 0x0004B8)
static_assert(sizeof(ULedgerMapWidget) == 0x06C0); // 1728 bytes (0x0004B8 - 0x0006C0)
static_assert(sizeof(ULedgerWidget) == 0x0418); // 1048 bytes (0x000308 - 0x000418)
static_assert(sizeof(ULegalWidget) == 0x03E8); // 1000 bytes (0x0003B8 - 0x0003E8)
static_assert(sizeof(ULevelOptionsWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(ULevelUpButtonWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(ULevelUpNotificationWidget) == 0x03E0); // 992 bytes (0x000308 - 0x0003E0)
static_assert(sizeof(ULocomotionAnimationSet) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(FDeathMontageGroup) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UDeathMontageSet) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UTPVPersonalityCollection) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UTalkingIdleOverrideData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UTPVPersonalitySet) == 0x0230); // 560 bytes (0x000038 - 0x000230)
static_assert(sizeof(FLocomotionData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(ULocomotionLogicComponent) == 0x0230); // 560 bytes (0x0000E0 - 0x000230)
static_assert(sizeof(ULogList) == 0x0388); // 904 bytes (0x000358 - 0x000388)
static_assert(sizeof(ULootRowBase) == 0x00C0); // 192 bytes (0x000030 - 0x0000C0)
static_assert(sizeof(ULootRowItem) == 0x02B0); // 688 bytes (0x0000C0 - 0x0002B0)
static_assert(sizeof(ULootRowTable) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(ULootTableData) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(ALowGravJumpNavLink) == 0x02F0); // 752 bytes (0x0002E8 - 0x0002F0)
static_assert(sizeof(UMainActionKeyBindDisplay) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(UMainMenuDLCManagerWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(FPlatformSetProductID) == 0x00C0); // 192 bytes (0x000000 - 0x0000C0)
static_assert(sizeof(UMainMenuDLCWidget) == 0x0450); // 1104 bytes (0x000300 - 0x000450)
static_assert(sizeof(FMainMenuLevelDescription) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UMainMenuLevelsData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UMainMenuWidget) == 0x03F8); // 1016 bytes (0x000308 - 0x0003F8)
static_assert(sizeof(UMainOptionsWidget) == 0x03E0); // 992 bytes (0x000300 - 0x0003E0)
static_assert(sizeof(UMakeup) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(FManagerDebuggerPlayerData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UManagerDebugger) == 0x00C8); // 200 bytes (0x000030 - 0x0000C8)
static_assert(sizeof(UManifest) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UMapAreaBeaconWidget) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(UMapBeaconData) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UMapBeaconEntryTooltipWidget) == 0x0300); // 768 bytes (0x000300 - 0x000300)
static_assert(sizeof(UMapBeaconEntryWidget) == 0x0358); // 856 bytes (0x000308 - 0x000358)
static_assert(sizeof(FMapCompassUIVisuals) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UMapCompassUIVisualData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UMapFastTravelEntryWidget) == 0x0330); // 816 bytes (0x000308 - 0x000330)
static_assert(sizeof(UMapFloorTrackedActor) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AMapFloorVolume) == 0x0318); // 792 bytes (0x000310 - 0x000318)
static_assert(sizeof(FConditionalMusicTrack) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(UMapGameplayMusicSettings) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(FMapFloorData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UMapInformation) == 0x0100); // 256 bytes (0x000038 - 0x000100)
static_assert(sizeof(UMapLoadingMusicSettings) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(FPointOfInterestLocation) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UMapPointOfInterestData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UMapPointOfInterestWidget) == 0x0320); // 800 bytes (0x000308 - 0x000320)
static_assert(sizeof(UMapQuestSelectionEntryWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UMapRendererFilterData) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(AMapRenderer) == 0x0398); // 920 bytes (0x0002B8 - 0x000398)
static_assert(sizeof(FMapTextEntryData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UMapTextData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(AMapTextEntry) == 0x0308); // 776 bytes (0x0002E8 - 0x000308)
static_assert(sizeof(UMapTextEntryWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UMapTransitionNotification) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(FMaterialParamMod) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(UMaterialParamModVisual) == 0x00D0); // 208 bytes (0x000068 - 0x0000D0)
static_assert(sizeof(UMedKitAbilityWidget) == 0x03E0); // 992 bytes (0x000370 - 0x0003E0)
static_assert(sizeof(UMedKitComponent) == 0x0168); // 360 bytes (0x0000E0 - 0x000168)
static_assert(sizeof(UMedKitDrugSlotWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(FMeleeAnimEvent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMeleeAnimEventEffect) == 0x0110); // 272 bytes (0x000030 - 0x000110)
static_assert(sizeof(UMeleeBlockBehaviorStateInfo) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UMeleeBlockRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UMeleeActionCollisionInfo) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(FShapeInterface) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FBoxShapeData) == 0x0018); // 24 bytes (0x000008 - 0x000018)
static_assert(sizeof(FSphereShapeData) == 0x0010); // 16 bytes (0x000008 - 0x000010)
static_assert(sizeof(FCapsuleShapeData) == 0x0010); // 16 bytes (0x000008 - 0x000010)
static_assert(sizeof(FShapeVariant) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FTransformedShapeVariant) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FMeleeCollisionInfo) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(UMeleeMode) == 0x04C8); // 1224 bytes (0x000130 - 0x0004C8)
static_assert(sizeof(FDamageTypeRequirement) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMeleeMultiDamageTypeMode) == 0x0500); // 1280 bytes (0x0004C8 - 0x000500)
static_assert(sizeof(UMeleeSequencer) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UMeleeSlotBehaviorStateInfo) == 0x0148); // 328 bytes (0x000120 - 0x000148)
static_assert(sizeof(UMeleeSlotBaseRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UMeleeSlotRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(UMeleeSlotPatternRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(UMeleeSlotManagerComponent) == 0x0150); // 336 bytes (0x0000E0 - 0x000150)
static_assert(sizeof(UMeleeStatusEffect) == 0x0188); // 392 bytes (0x000188 - 0x000188)
static_assert(sizeof(UWeaponVisuals) == 0x0200); // 512 bytes (0x000030 - 0x000200)
static_assert(sizeof(UPrimaryWeaponVisuals) == 0x0248); // 584 bytes (0x000200 - 0x000248)
static_assert(sizeof(UMeleeVisuals) == 0x0258); // 600 bytes (0x000248 - 0x000258)
static_assert(sizeof(UMeshModVisual) == 0x00C0); // 192 bytes (0x000068 - 0x0000C0)
static_assert(sizeof(UMetaTeamData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UMFTSelectionEntryWidget) == 0x0310); // 784 bytes (0x000300 - 0x000310)
static_assert(sizeof(UMFTSelectionWidget) == 0x0340); // 832 bytes (0x000308 - 0x000340)
static_assert(sizeof(UMicroMod) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UMicroModTable) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(FModAppearance) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UModAppearances) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FAppliedMod) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UAppliedModVisualData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UModVisuals) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(UMoveToBehaviorStateInfo) == 0x0180); // 384 bytes (0x000178 - 0x000180)
static_assert(sizeof(UMoveToRequestData) == 0x0090); // 144 bytes (0x000080 - 0x000090)
static_assert(sizeof(UMoviePlayerWidget) == 0x0370); // 880 bytes (0x000308 - 0x000370)
static_assert(sizeof(UMovieSubtitleData) == 0x00D8); // 216 bytes (0x000038 - 0x0000D8)
static_assert(sizeof(UMultiQuestMapTracker) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(UStatusEffectChildData) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UMultiStatusEffect) == 0x01B8); // 440 bytes (0x000188 - 0x0001B8)
static_assert(sizeof(UMusicTrackData) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UMusicManager) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UNavArea_Crouch) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavArea_Door) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavArea_Elevator) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavArea_Hazard) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavArea_Hearing) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavArea_Jump) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavArea_Ladder) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavArea_Mine) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavArea_Trap) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavArea_Walk) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavFilter_AIControllerBehavior) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavFilter_AIControllerDefaultEQS) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNavigationGroupWidget) == 0x0380); // 896 bytes (0x000300 - 0x000380)
static_assert(sizeof(UNewSaveWidget) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(UNiagaraOptimizationComponent) == 0x0108); // 264 bytes (0x0000E0 - 0x000108)
static_assert(sizeof(UNotificationHelpers) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UNPCNavigationQueryFilter_EQS) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UNPCNavigationQueryFilter_Pathing) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(UObjectiveListWidget) == 0x0328); // 808 bytes (0x000300 - 0x000328)
static_assert(sizeof(UObjectiveWaypointGameDataReference) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UObsidianIDComponent) == 0x00F8); // 248 bytes (0x0000E0 - 0x0000F8)
static_assert(sizeof(UOCLAudioComponent) == 0x01A0); // 416 bytes (0x000150 - 0x0001A0)
static_assert(sizeof(UOCLComponent) == 0x02C0); // 704 bytes (0x0000E0 - 0x0002C0)
static_assert(sizeof(AOctreeHelperActor) == 0x02C0); // 704 bytes (0x0002B8 - 0x0002C0)
static_assert(sizeof(UOctreeRenderingComponent) == 0x0500); // 1280 bytes (0x0004F8 - 0x000500)
static_assert(sizeof(UOnRailsBehaviorStateInfo) == 0x0188); // 392 bytes (0x000178 - 0x000188)
static_assert(sizeof(UOnRailsRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UOnRailsComponent) == 0x0178); // 376 bytes (0x0000E0 - 0x000178)
static_assert(sizeof(UOptionPresenterWidget) == 0x0380); // 896 bytes (0x000300 - 0x000380)
static_assert(sizeof(UOptionSliderWidget) == 0x0368); // 872 bytes (0x000300 - 0x000368)
static_assert(sizeof(UOverlayedSystemMapData) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UPaginatedButtonWidget) == 0x0288); // 648 bytes (0x000278 - 0x000288)
static_assert(sizeof(UPooledParticleSystemComponent) == 0x0770); // 1904 bytes (0x000760 - 0x000770)
static_assert(sizeof(FParticleSystemPool) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FPendingParticleSpawnInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UParticlePool) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(UPatrolBehaviorStateInfo) == 0x0148); // 328 bytes (0x000120 - 0x000148)
static_assert(sizeof(UPatrolRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(FActionSet) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(APatrolNode) == 0x0318); // 792 bytes (0x0002B8 - 0x000318)
static_assert(sizeof(UPatrolNodeComponent) == 0x00E0); // 224 bytes (0x0000E0 - 0x0000E0)
static_assert(sizeof(UPauseMenuWidget) == 0x0370); // 880 bytes (0x000308 - 0x000370)
static_assert(sizeof(UPerceptionRangeScalarStatusEffect) == 0x01B0); // 432 bytes (0x000188 - 0x0001B0)
static_assert(sizeof(FPerkTextures) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UPerk) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UPerkReadoutWidget) == 0x0348); // 840 bytes (0x000300 - 0x000348)
static_assert(sizeof(UPerksListEntry) == 0x0368); // 872 bytes (0x000300 - 0x000368)
static_assert(sizeof(UPerksListRowWidget) == 0x0428); // 1064 bytes (0x000300 - 0x000428)
static_assert(sizeof(UPerksListWidget) == 0x0360); // 864 bytes (0x000300 - 0x000360)
static_assert(sizeof(UPerksTierWidget) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(UPerkSummaryEntryWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(FPerkTier) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FPerkTiers) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPerkTree) == 0x00C8); // 200 bytes (0x000038 - 0x0000C8)
static_assert(sizeof(UPerkTreeCollection) == 0x00A8); // 168 bytes (0x000038 - 0x0000A8)
static_assert(sizeof(UPersistentFiringPattern) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPersonalSpaceComponent) == 0x0198); // 408 bytes (0x0000E0 - 0x000198)
static_assert(sizeof(UPersuadeBehaviorStateInfo) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(UPersuadeRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UPetableComponent) == 0x0110); // 272 bytes (0x0000E0 - 0x000110)
static_assert(sizeof(APickup) == 0x0630); // 1584 bytes (0x000390 - 0x000630)
static_assert(sizeof(UAkPlaySoundEventEffect) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UPlayAnimationAction) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UPlayAnimEventEffect) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UPlayAnimStateEventEffect) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPlayDirectionalAnimEventEffect) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UPlayerAppearanceComponent) == 0x0488); // 1160 bytes (0x000480 - 0x000488)
static_assert(sizeof(UPlayerDeathComponent) == 0x0300); // 768 bytes (0x0002B8 - 0x000300)
static_assert(sizeof(UPlayerDisableStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UPlayerEnvironmentInteractionComponent) == 0x03A0); // 928 bytes (0x000190 - 0x0003A0)
static_assert(sizeof(FAddictionTimer) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSurvivalTier) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCurveData) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(UPlayerHealthComponent) == 0x0388); // 904 bytes (0x0001C0 - 0x000388)
static_assert(sizeof(FSkillValueExperienceRange) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FLevelDifferenceRangeScalar) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UPlayerInfoComponent) == 0x09B8); // 2488 bytes (0x0003A0 - 0x0009B8)
static_assert(sizeof(UPlayerInteractionComponent) == 0x0228); // 552 bytes (0x0000F0 - 0x000228)
static_assert(sizeof(FLootOnBreakdown) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPlayerInventoryComponent) == 0x0318); // 792 bytes (0x000238 - 0x000318)
static_assert(sizeof(FDodgeInputRange) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FDodgeProperties) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UPlayerMovementComponent) == 0x13F0); // 5104 bytes (0x000E00 - 0x0013F0)
static_assert(sizeof(UPlayerPresetData) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UPlayerShoutComponent) == 0x0108); // 264 bytes (0x000100 - 0x000108)
static_assert(sizeof(UPlayerStatsWidget) == 0x0348); // 840 bytes (0x000300 - 0x000348)
static_assert(sizeof(UPlayerTargetingComponent) == 0x0250); // 592 bytes (0x0000E8 - 0x000250)
static_assert(sizeof(UPlayFxEventEffect) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UPlayLayeredFxEventEffect) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UPlaySoundEventEffect) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPointOfInterestComponent) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(APointOfInterest) == 0x02F8); // 760 bytes (0x0002E8 - 0x0002F8)
static_assert(sizeof(UPointOfInterestData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(FInterestStateTextures) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UPointOfInterestTextureData) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UPointOfInterestTooltipWidget) == 0x0308); // 776 bytes (0x000300 - 0x000308)
static_assert(sizeof(FPONRQuest) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FConversationReference) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FConversationPoNR) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FNodeSet) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FNodeVarConditionalVarReset) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UPointOfNoReturnRollbackData) == 0x0110); // 272 bytes (0x000030 - 0x000110)
static_assert(sizeof(UPoseableMeshModVisual) == 0x0140); // 320 bytes (0x0000C0 - 0x000140)
static_assert(sizeof(UPosedSkeletalMeshModVisual) == 0x00E8); // 232 bytes (0x0000C0 - 0x0000E8)
static_assert(sizeof(UPostProcessEventEffect) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(FPostProcessFX) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(UPostProcessStatusEffect) == 0x0208); // 520 bytes (0x000188 - 0x000208)
static_assert(sizeof(UPreloadAssetList) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UPresenceData) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UPreviewCharacterAnimInstance) == 0x0580); // 1408 bytes (0x0004A0 - 0x000580)
static_assert(sizeof(UPreviewWeaponAnimations) == 0x0210); // 528 bytes (0x000200 - 0x000210)
static_assert(sizeof(AProjectile) == 0x0598); // 1432 bytes (0x0002B8 - 0x000598)
static_assert(sizeof(AProjectileLauncher) == 0x0520); // 1312 bytes (0x000478 - 0x000520)
static_assert(sizeof(UPS5ActivityManager) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UPushDisableStatusEffect) == 0x01D8); // 472 bytes (0x0001A0 - 0x0001D8)
static_assert(sizeof(UQuadrupedAnimInstance) == 0x09E0); // 2528 bytes (0x000950 - 0x0009E0)
static_assert(sizeof(UQuest) == 0x0120); // 288 bytes (0x0000B8 - 0x000120)
static_assert(sizeof(UQuestAddendumWidget) == 0x0308); // 776 bytes (0x000300 - 0x000308)
static_assert(sizeof(UQuestDataAsset) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UQuestJournalWidget) == 0x04C0); // 1216 bytes (0x000300 - 0x0004C0)
static_assert(sizeof(UQuestListEntryWidget) == 0x02E8); // 744 bytes (0x0002A0 - 0x0002E8)
static_assert(sizeof(UQuestListWidget) == 0x03B8); // 952 bytes (0x000358 - 0x0003B8)
static_assert(sizeof(UQuestLogComboBoxWidget) == 0x02D8); // 728 bytes (0x000278 - 0x0002D8)
static_assert(sizeof(UQuestLogEntryWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UQuestLogWidget) == 0x03C0); // 960 bytes (0x000300 - 0x0003C0)
static_assert(sizeof(UQuestManager) == 0x0410); // 1040 bytes (0x000030 - 0x000410)
static_assert(sizeof(UQuestObjectiveEntryWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(UQuestObjectiveTitleWidget) == 0x02A8); // 680 bytes (0x000278 - 0x0002A8)
static_assert(sizeof(UQuestObjectiveWidget) == 0x0290); // 656 bytes (0x000278 - 0x000290)
static_assert(sizeof(FQuestSubTypeGroup) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDifficultyRange) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UQuestSortingData) == 0x02A0); // 672 bytes (0x000038 - 0x0002A0)
static_assert(sizeof(UQuickMeleeData) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(URadialBackgroundSectionWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(URadialContainerWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(URadialContextMenuWidget) == 0x0338); // 824 bytes (0x000308 - 0x000338)
static_assert(sizeof(URadialWidget) == 0x0440); // 1088 bytes (0x000300 - 0x000440)
static_assert(sizeof(URagDollDeathBehavior) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(URagdollDisable) == 0x01E8); // 488 bytes (0x0001A0 - 0x0001E8)
static_assert(sizeof(FRandomActionSetPair) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(URandomActionSet) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(URandomBankGameDataReference) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(FWeightedEffect) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(URandomEventEffects) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(FQueryPair) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(URandomQuerySet) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(FPriorityCreatureSpawn) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(ARandomSpawnNode) == 0x0570); // 1392 bytes (0x000538 - 0x000570)
static_assert(sizeof(URangeBehaviorStateInfo) == 0x0188); // 392 bytes (0x000178 - 0x000188)
static_assert(sizeof(URangeRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(FHitReaction) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UReactionComponent) == 0x0250); // 592 bytes (0x0000E0 - 0x000250)
static_assert(sizeof(AReactiveEnvironmentActor) == 0x02D8); // 728 bytes (0x0002B8 - 0x0002D8)
static_assert(sizeof(UReactiveEnvironmentAnimInstance) == 0x02E0); // 736 bytes (0x0002C8 - 0x0002E0)
static_assert(sizeof(URecoilData) == 0x0158); // 344 bytes (0x000038 - 0x000158)
static_assert(sizeof(URecoilManagerComponent) == 0x0138); // 312 bytes (0x0000E0 - 0x000138)
static_assert(sizeof(URedirectorMap) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UReflectStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(URelevanceOptimizationInterface) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UReload_AnimNotify) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UReloadStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(URenderThreadAnimationWidget) == 0x0280); // 640 bytes (0x000278 - 0x000280)
static_assert(sizeof(URepairUpgradeInfoWidget) == 0x0380); // 896 bytes (0x000300 - 0x000380)
static_assert(sizeof(UReplaceRandomFlawStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(URepositionSearchBehaviorStateInfo) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(URepositionSearchRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UReputationData) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UReputationDetailsWidget) == 0x0360); // 864 bytes (0x000300 - 0x000360)
static_assert(sizeof(UReputationEntryWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UReputationListWidget) == 0x0328); // 808 bytes (0x000300 - 0x000328)
static_assert(sizeof(UReputationProgressWidget) == 0x0298); // 664 bytes (0x000278 - 0x000298)
static_assert(sizeof(UReputationSummaryWidget) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(UResetSpellCooldownStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(ARespecMachine) == 0x02C8); // 712 bytes (0x0002B8 - 0x0002C8)
static_assert(sizeof(ARestrictedArea) == 0x0368); // 872 bytes (0x0002B8 - 0x000368)
static_assert(sizeof(URestrictedAreaComponent) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(ARestrictedAreaVolume) == 0x0318); // 792 bytes (0x000310 - 0x000318)
static_assert(sizeof(UResurrectStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(FCrosshairVisuals) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FCrosshairStates) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(UReticleVisualsDataAsset) == 0x00C8); // 200 bytes (0x000038 - 0x0000C8)
static_assert(sizeof(UReticleWidget) == 0x03A0); // 928 bytes (0x000300 - 0x0003A0)
static_assert(sizeof(URetreatBehaviorStateInfo) == 0x0190); // 400 bytes (0x000178 - 0x000190)
static_assert(sizeof(URetreatRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(ARockFoliageTool) == 0x02B8); // 696 bytes (0x0002B8 - 0x0002B8)
static_assert(sizeof(FStatClampingData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(URpgStat) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(URpgStatComponent) == 0x01C0); // 448 bytes (0x0000E0 - 0x0001C0)
static_assert(sizeof(FPendingDeferredSpawn) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FCachedGameState) == 0x0178); // 376 bytes (0x000000 - 0x000178)
static_assert(sizeof(USaveGameManager) == 0x0690); // 1680 bytes (0x000030 - 0x000690)
static_assert(sizeof(USaveLoadDetailWidget) == 0x03F8); // 1016 bytes (0x000278 - 0x0003F8)
static_assert(sizeof(USaveLoadMenuWidget) == 0x03D8); // 984 bytes (0x000308 - 0x0003D8)
static_assert(sizeof(USavingWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UScalableImage) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(FScaledActorEntry) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UScaledActorTable) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(AScaledSpawnNode) == 0x0568); // 1384 bytes (0x000538 - 0x000568)
static_assert(sizeof(UScaleStatusEffect) == 0x0198); // 408 bytes (0x000188 - 0x000198)
static_assert(sizeof(UScalingData) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(AScalingOverrideBox) == 0x02F0); // 752 bytes (0x0002B8 - 0x0002F0)
static_assert(sizeof(UScannerFlavorTextData) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(UScar) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UScopeData) == 0x0170); // 368 bytes (0x000038 - 0x000170)
static_assert(sizeof(UScriptRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UPopRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UClearCompanionCommandStatesRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UClearBehaviorStatesOfTypeRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(URequestTargetRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USetWeaponPreferenceRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(UScriptEvent) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USetGlobalValueEvent) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(USetGlobalIfGlobalEvent) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UIncrementGlobalValueEvent) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(URandomizeGlobalValueEvent) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UStartQuestEvent) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UTriggerQuestAddendumEvent) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UAdvanceQuestEvent) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(URemoteEvent) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UScriptManager) == 0x0180); // 384 bytes (0x000030 - 0x000180)
static_assert(sizeof(UScripts) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USearchBehaviorStateInfo) == 0x0148); // 328 bytes (0x000120 - 0x000148)
static_assert(sizeof(USearchRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USelectedNotificationWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(FHUDSetting) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(USettingsHUDMode) == 0x00E8); // 232 bytes (0x000038 - 0x0000E8)
static_assert(sizeof(USettingsMenuButtonSlotWidget) == 0x0350); // 848 bytes (0x000300 - 0x000350)
static_assert(sizeof(USettingsMenuSlotEntryBase) == 0x0300); // 768 bytes (0x000300 - 0x000300)
static_assert(sizeof(USettingsMenuCheckBoxWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(USettingsMenuComboBoxWidget) == 0x0290); // 656 bytes (0x000278 - 0x000290)
static_assert(sizeof(FSettingPlatformStringContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSettingDescription) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSubcategoryDescription) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FGamepadLayout) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FDynamicOverrides) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(USettingsMenuData) == 0x00F0); // 240 bytes (0x000038 - 0x0000F0)
static_assert(sizeof(USettingsMenuInputKeySelector) == 0x03A8); // 936 bytes (0x000300 - 0x0003A8)
static_assert(sizeof(USettingsMenuKeyRebindWidget) == 0x0360); // 864 bytes (0x000300 - 0x000360)
static_assert(sizeof(USettingsMenuOptionPresenterWdgt) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(USettingsMenuSliderWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(USettingsMenuSlotWidget) == 0x0350); // 848 bytes (0x000300 - 0x000350)
static_assert(sizeof(USettingsMenuSubcategoryWidget) == 0x0298); // 664 bytes (0x000278 - 0x000298)
static_assert(sizeof(UUserSetting) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UUserSettingBool) == 0x0098); // 152 bytes (0x000060 - 0x000098)
static_assert(sizeof(UUserSettingFloat) == 0x00A0); // 160 bytes (0x000060 - 0x0000A0)
static_assert(sizeof(UUserSettingInt32) == 0x00A0); // 160 bytes (0x000060 - 0x0000A0)
static_assert(sizeof(UUserSettingKeyBinding) == 0x0070); // 112 bytes (0x000060 - 0x000070)
static_assert(sizeof(UUserSettingActionBinding) == 0x0100); // 256 bytes (0x000070 - 0x000100)
static_assert(sizeof(UUserSettingAxisBinding) == 0x00F8); // 248 bytes (0x000070 - 0x0000F8)
static_assert(sizeof(UUserSettingActionKeyboardBinding) == 0x00C0); // 192 bytes (0x000070 - 0x0000C0)
static_assert(sizeof(UUserSettingAxisKeyboardBinding) == 0x00C8); // 200 bytes (0x000070 - 0x0000C8)
static_assert(sizeof(USettingsMenuWidget) == 0x0678); // 1656 bytes (0x000308 - 0x000678)
static_assert(sizeof(UShape) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UBoxShape) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(USphereShape) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UCapsuleShape) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(USharedWeaponVisuals) == 0x0200); // 512 bytes (0x000200 - 0x000200)
static_assert(sizeof(AShipDoor) == 0x0318); // 792 bytes (0x0002B8 - 0x000318)
static_assert(sizeof(UShipFastTravelPointComponent) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(AShipFastTravelPoint) == 0x02F0); // 752 bytes (0x0002E8 - 0x0002F0)
static_assert(sizeof(AShipLocation) == 0x0330); // 816 bytes (0x0002B8 - 0x000330)
static_assert(sizeof(AShipTerminal) == 0x0330); // 816 bytes (0x0002B8 - 0x000330)
static_assert(sizeof(FMapShipDestinations) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UShipTravelData) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UShipTravelDataCollection) == 0x00A8); // 168 bytes (0x000038 - 0x0000A8)
static_assert(sizeof(USkeletalMeshModVisual) == 0x00F0); // 240 bytes (0x0000C0 - 0x0000F0)
static_assert(sizeof(USkillAdjustment) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(USkillButtonEntryWidget) == 0x0490); // 1168 bytes (0x000470 - 0x000490)
static_assert(sizeof(USkillGroupDetailWidget) == 0x02B8); // 696 bytes (0x000278 - 0x0002B8)
static_assert(sizeof(USkillStatusEffect) == 0x0200); // 512 bytes (0x000188 - 0x000200)
static_assert(sizeof(USkillSummaryEntryWidget) == 0x0298); // 664 bytes (0x000278 - 0x000298)
static_assert(sizeof(USkillUnlockEntryWidget) == 0x0350); // 848 bytes (0x000300 - 0x000350)
static_assert(sizeof(USkillUnlockPanelMeter) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(USkillUnlockPanelWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(USkinTone) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(FIndianaSliderStyle) == 0x0390); // 912 bytes (0x000008 - 0x000390)
static_assert(sizeof(USliderBase) == 0x0578); // 1400 bytes (0x000120 - 0x000578)
static_assert(sizeof(UIndianaSliderWidgetStyle) == 0x03C8); // 968 bytes (0x000038 - 0x0003C8)
static_assert(sizeof(USlideshowImageSet) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(USlideshowWidget) == 0x0428); // 1064 bytes (0x000360 - 0x000428)
static_assert(sizeof(USpawnActorBehaviorStateInfo) == 0x0190); // 400 bytes (0x000178 - 0x000190)
static_assert(sizeof(USpawnActorRequestData) == 0x0098); // 152 bytes (0x000080 - 0x000098)
static_assert(sizeof(USpawnActorEventEffect) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(USpawnActorStatusEffect) == 0x01C8); // 456 bytes (0x000188 - 0x0001C8)
static_assert(sizeof(USpawnHazardStatusEffect) == 0x01D8); // 472 bytes (0x000188 - 0x0001D8)
static_assert(sizeof(USpawnSource) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UTrackedSpawn) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USpawnNodeComponent) == 0x0270); // 624 bytes (0x000268 - 0x000270)
static_assert(sizeof(USpeakerGameDataReference) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(FAreaOfEffect) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FTargetCone) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FTargetEffect) == 0x00D0); // 208 bytes (0x000000 - 0x0000D0)
static_assert(sizeof(FSpellEffectByEvent) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USpell) == 0x0190); // 400 bytes (0x000030 - 0x000190)
static_assert(sizeof(USpellConditional) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(USpellConditional_CreatureType) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(USpellConditional_Health) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_Encumbrance) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_MeleeWeaponCategory) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_NumCompanions) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_RandomChance) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(USpellConditional_MinSkill) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(USpellConditional_HasStatusEffect) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(USpellConditional_HasSpell) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_IsPlayer) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(USpellConditional_IsFacingCaster) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_IsDifficulty) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(USpellConditional_HostileStatusEffect) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(USpellConditional_TTDMeter) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_IsInCombatWithPlayer) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_IsPacifist) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_IsHostileToPlayer) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_IsHostileToCaster) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_IsOnPlayerShip) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_IsCompanion) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_RosterSize) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_FlawCount) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USpellConditional_IsAmmoTypeEquipped) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(USpellConditional_CheckGlobalVariable) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(FSpellInstance) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(USpellManagerComponent) == 0x0240); // 576 bytes (0x0000E0 - 0x000240)
static_assert(sizeof(USpellRemoveStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(USpellTargetBehaviorStateInfo) == 0x0178); // 376 bytes (0x000178 - 0x000178)
static_assert(sizeof(USpellTargetRequestData) == 0x0098); // 152 bytes (0x000080 - 0x000098)
static_assert(sizeof(USpreadManagerComponent) == 0x0148); // 328 bytes (0x0000E0 - 0x000148)
static_assert(sizeof(UStackSplittingWidget) == 0x04C8); // 1224 bytes (0x000308 - 0x0004C8)
static_assert(sizeof(AStageItem) == 0x03A8); // 936 bytes (0x000390 - 0x0003A8)
static_assert(sizeof(UStaminaComponent) == 0x0108); // 264 bytes (0x0000E0 - 0x000108)
static_assert(sizeof(UStandardAmmoPool) == 0x00B8); // 184 bytes (0x000080 - 0x0000B8)
static_assert(sizeof(UStasisLogicDataAsset) == 0x00C8); // 200 bytes (0x000038 - 0x0000C8)
static_assert(sizeof(UStaticMeshModVisual) == 0x00F0); // 240 bytes (0x0000C0 - 0x0000F0)
static_assert(sizeof(UStatModifierStatusEffect) == 0x0240); // 576 bytes (0x000188 - 0x000240)
static_assert(sizeof(UStatsFlawSummaryWidget) == 0x0310); // 784 bytes (0x000300 - 0x000310)
static_assert(sizeof(UStatsPerksPageWidget) == 0x03E8); // 1000 bytes (0x000300 - 0x0003E8)
static_assert(sizeof(UStatsPerkSummaryWidget) == 0x0328); // 808 bytes (0x000300 - 0x000328)
static_assert(sizeof(UStatsSkillsPageWidget) == 0x04A0); // 1184 bytes (0x000430 - 0x0004A0)
static_assert(sizeof(UStatsSkillSummaryWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UStatsSummaryPageWidget) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(UStatusEffectApplier) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UStatusEffectBarEntryWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UStatusEffectBarWidget) == 0x0398); // 920 bytes (0x000300 - 0x000398)
static_assert(sizeof(UStatusEffectEntryWidget) == 0x0328); // 808 bytes (0x000300 - 0x000328)
static_assert(sizeof(UStatusEffectManagerComponent) == 0x0168); // 360 bytes (0x0000E0 - 0x000168)
static_assert(sizeof(UStatusEffectOrigin) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UStatusEffectRemove) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UStatusEffectTagEntryWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(UStatusEffectTagWidget) == 0x0368); // 872 bytes (0x000300 - 0x000368)
static_assert(sizeof(UStatusEffectTarget) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UStatusEffectUIVisualsData) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(AStatusTagActor) == 0x02E0); // 736 bytes (0x0002C0 - 0x0002E0)
static_assert(sizeof(FAlertStateImageSet) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAwarenessImageSet) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FAwarenessTalkImageSet) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UStatusTagAwarenessWidget) == 0x03C8); // 968 bytes (0x000300 - 0x0003C8)
static_assert(sizeof(UStatusTagGenerator) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UStatusTagWidget) == 0x0400); // 1024 bytes (0x000300 - 0x000400)
static_assert(sizeof(UStatusWidgetComponent) == 0x0680); // 1664 bytes (0x000670 - 0x000680)
static_assert(sizeof(UStealthComponent) == 0x0238); // 568 bytes (0x0000E0 - 0x000238)
static_assert(sizeof(USteamDLCManager) == 0x0078); // 120 bytes (0x000050 - 0x000078)
static_assert(sizeof(FIDSet) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FOEIStringEntry) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FOEIStringTable) == 0x0100); // 256 bytes (0x000000 - 0x000100)
static_assert(sizeof(UStringTableBundleSet) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(FMiniTimeSpan) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSubtitleEntry) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(USubtitleData) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(USubtitleEntryWidget) == 0x0308); // 776 bytes (0x000300 - 0x000308)
static_assert(sizeof(USubtitleManagerWidget) == 0x03A0); // 928 bytes (0x000308 - 0x0003A0)
static_assert(sizeof(USubtitlesWidget) == 0x0470); // 1136 bytes (0x000300 - 0x000470)
static_assert(sizeof(USuppressableInterface) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USuppressRandomPlayerPerkStatusEffect) == 0x0198); // 408 bytes (0x000188 - 0x000198)
static_assert(sizeof(USuppressStatusEffect) == 0x0188); // 392 bytes (0x000188 - 0x000188)
static_assert(sizeof(USurvivalBarGroupWidget) == 0x0350); // 848 bytes (0x000300 - 0x000350)
static_assert(sizeof(USurvivalBarWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(USuspiciousBehaviorStateInfo) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(USuspiciousRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(ASwitch) == 0x0350); // 848 bytes (0x0002B8 - 0x000350)
static_assert(sizeof(USwitchAudioComponent) == 0x01A0); // 416 bytes (0x000150 - 0x0001A0)
static_assert(sizeof(USwitchContextBehaviorStateInfo) == 0x0128); // 296 bytes (0x000120 - 0x000128)
static_assert(sizeof(USwitchContextRequestData) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USwitchTargetBehaviorStateInfo) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(USwitchTargetRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(USwitchWeaponBehaviorStateInfo) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(USwitchWeaponRequestData) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(USymbolDescriptionPanelEntry) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(FStatuEffectVisualSet) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(USymbolList) == 0x0448); // 1096 bytes (0x000358 - 0x000448)
static_assert(sizeof(FAlternateBrushSet) == 0x03B8); // 952 bytes (0x000000 - 0x0003B8)
static_assert(sizeof(FSystemMapEntryData) == 0x0C00); // 3072 bytes (0x000000 - 0x000C00)
static_assert(sizeof(USystemMapData) == 0x00B0); // 176 bytes (0x000038 - 0x0000B0)
static_assert(sizeof(FSystemMapEntryHelper) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USystemMapEntryWidget) == 0x0F60); // 3936 bytes (0x000300 - 0x000F60)
static_assert(sizeof(USystemMapInfoWidget) == 0x0320); // 800 bytes (0x000300 - 0x000320)
static_assert(sizeof(USystemMapInterfaceWidget) == 0x0320); // 800 bytes (0x000308 - 0x000320)
static_assert(sizeof(USystemMapObjectiveWidget) == 0x0310); // 784 bytes (0x000300 - 0x000310)
static_assert(sizeof(USystemMapPlayerShipWidget) == 0x0348); // 840 bytes (0x000300 - 0x000348)
static_assert(sizeof(USystemMapSelectionEntryWidget) == 0x0340); // 832 bytes (0x000300 - 0x000340)
static_assert(sizeof(USystemMapSelectionWidget) == 0x03E8); // 1000 bytes (0x000308 - 0x0003E8)
static_assert(sizeof(USystemMapWidget) == 0x11E8); // 4584 bytes (0x0004B8 - 0x0011E8)
static_assert(sizeof(UTacticalTimeDilationComponent) == 0x0260); // 608 bytes (0x0000E0 - 0x000260)
static_assert(sizeof(FWwiseVOEvent) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UTalkManager) == 0x1ED8); // 7896 bytes (0x000030 - 0x001ED8)
static_assert(sizeof(UTargetableComponent) == 0x0100); // 256 bytes (0x0000E0 - 0x000100)
static_assert(sizeof(UTargetInfoComponent) == 0x01F8); // 504 bytes (0x0000E0 - 0x0001F8)
static_assert(sizeof(UTeamComponent) == 0x01F8); // 504 bytes (0x0000E0 - 0x0001F8)
static_assert(sizeof(FTeamRelationship) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(UTeamData) == 0x0238); // 568 bytes (0x000080 - 0x000238)
static_assert(sizeof(UTeamManager) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UTelemetryComponent) == 0x0118); // 280 bytes (0x0000E0 - 0x000118)
static_assert(sizeof(UTelemetryManager) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UTeleportBehaviorStateInfo) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UTeleportRequestData) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(ATemporaryActor) == 0x02B8); // 696 bytes (0x0002B8 - 0x0002B8)
static_assert(sizeof(UTestAudioDataTypeReference) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UTestAudioComponent) == 0x00E0); // 224 bytes (0x0000E0 - 0x0000E0)
static_assert(sizeof(UTetherBehaviorStateInfo) == 0x0178); // 376 bytes (0x000178 - 0x000178)
static_assert(sizeof(UTetherRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UTextBlockBase) == 0x0418); // 1048 bytes (0x000140 - 0x000418)
static_assert(sizeof(UIndianaTextBlockWidgetStyle) == 0x02B0); // 688 bytes (0x000038 - 0x0002B0)
static_assert(sizeof(UTextEntryWidget) == 0x0380); // 896 bytes (0x000300 - 0x000380)
static_assert(sizeof(UTextSectionWidget) == 0x02A0); // 672 bytes (0x000288 - 0x0002A0)
static_assert(sizeof(UThreatStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UTimeDilationComponent) == 0x0188); // 392 bytes (0x0000E0 - 0x000188)
static_assert(sizeof(UTinkeringWidget) == 0x03A0); // 928 bytes (0x000308 - 0x0003A0)
static_assert(sizeof(UToggleActionStatusEffect) == 0x0198); // 408 bytes (0x000188 - 0x000198)
static_assert(sizeof(UToolTipContainerWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UOverrideRotationSpeedAnimMetaData) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UTracerSoundData) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(ATrap) == 0x05F8); // 1528 bytes (0x0002B8 - 0x0005F8)
static_assert(sizeof(UTrapAudioComponent) == 0x01A0); // 416 bytes (0x000150 - 0x0001A0)
static_assert(sizeof(UTrapEffectSource) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(ATrapTerminal) == 0x0450); // 1104 bytes (0x000430 - 0x000450)
static_assert(sizeof(ATrapTrigger) == 0x03D8); // 984 bytes (0x0002B8 - 0x0003D8)
static_assert(sizeof(UTravelDestinationData) == 0x00D8); // 216 bytes (0x000038 - 0x0000D8)
static_assert(sizeof(UShipDestinationData) == 0x00E0); // 224 bytes (0x0000D8 - 0x0000E0)
static_assert(sizeof(FTravelMapPosition) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FTravelShipMapPosition) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FTravelShipData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UTravelMapLayoutData) == 0x0098); // 152 bytes (0x000038 - 0x000098)
static_assert(sizeof(UTravelRegionData) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UTravelTriggerComponent) == 0x0100); // 256 bytes (0x0000E0 - 0x000100)
static_assert(sizeof(UTTDEnemyScanner) == 0x03C0); // 960 bytes (0x000300 - 0x0003C0)
static_assert(sizeof(UTTDStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(UTTDStatusEffectsWidget) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(FTutorialBaseEventData) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FTutorialPlatformStringContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTutorialEventDataContainer) == 0x0100); // 256 bytes (0x000078 - 0x000100)
static_assert(sizeof(FTutorialFullScreenEventDataContainer) == 0x0250); // 592 bytes (0x000078 - 0x000250)
static_assert(sizeof(UTutorialDataAsset) == 0x0278); // 632 bytes (0x000038 - 0x000278)
static_assert(sizeof(UTutorialList) == 0x0398); // 920 bytes (0x000358 - 0x000398)
static_assert(sizeof(UTutorialListContainer) == 0x0328); // 808 bytes (0x000310 - 0x000328)
static_assert(sizeof(UTutorialManager) == 0x0280); // 640 bytes (0x000030 - 0x000280)
static_assert(sizeof(UTutorialPopupStyleWidget) == 0x0400); // 1024 bytes (0x000300 - 0x000400)
static_assert(sizeof(UTutorialPopupWidget) == 0x0350); // 848 bytes (0x000308 - 0x000350)
static_assert(sizeof(ATutorialTriggerVolume) == 0x0360); // 864 bytes (0x000358 - 0x000360)
static_assert(sizeof(UUglyStickStatusEffect) == 0x01A0); // 416 bytes (0x000188 - 0x0001A0)
static_assert(sizeof(UUIFlipBookData) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UUnlockAbilityStatusEffect) == 0x0190); // 400 bytes (0x000188 - 0x000190)
static_assert(sizeof(FResolutionFontSizeData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(URenderThreadLoadingScreenWidget) == 0x0438); // 1080 bytes (0x000278 - 0x000438)
static_assert(sizeof(FVendorStockDescriptor) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FPerkCostModifier) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UVendorComponent) == 0x01E0); // 480 bytes (0x0000E0 - 0x0001E0)
static_assert(sizeof(UVendorWidget) == 0x0620); // 1568 bytes (0x000308 - 0x000620)
static_assert(sizeof(UWaitAction) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UWaitTimeSliderWidget) == 0x0338); // 824 bytes (0x000300 - 0x000338)
static_assert(sizeof(FWaitData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UWaitTimeWidget) == 0x03A0); // 928 bytes (0x000308 - 0x0003A0)
static_assert(sizeof(UWalkBehaviorStateInfo) == 0x0188); // 392 bytes (0x000178 - 0x000188)
static_assert(sizeof(UWalkRequestData) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(AWalkNavLink) == 0x02E8); // 744 bytes (0x0002E8 - 0x0002E8)
static_assert(sizeof(UWanderBehaviorStateInfo) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UWanderRequestData) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UWorkbenchPageWidget) == 0x0400); // 1024 bytes (0x0003A0 - 0x000400)
static_assert(sizeof(UWBBreakdownPageWidget) == 0x0418); // 1048 bytes (0x000400 - 0x000418)
static_assert(sizeof(UWBModificationPageWidget) == 0x0428); // 1064 bytes (0x000400 - 0x000428)
static_assert(sizeof(UWBRepairPageWidget) == 0x0450); // 1104 bytes (0x000400 - 0x000450)
static_assert(sizeof(UWBUpgradePageWidget) == 0x0428); // 1064 bytes (0x000400 - 0x000428)
static_assert(sizeof(FOnHitStatusEffects) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UWeapon) == 0x05D0); // 1488 bytes (0x000128 - 0x0005D0)
static_assert(sizeof(FAnimEventGameplayTagData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimEventGameplayTagContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UWeaponAnimations) == 0x02A0); // 672 bytes (0x000200 - 0x0002A0)
static_assert(sizeof(FHitFlinchAnim) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UWeaponAnimationsCreature) == 0x02D0); // 720 bytes (0x0002A0 - 0x0002D0)
static_assert(sizeof(UWeaponAnimationSet) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UWeaponAnimationsFPV) == 0x0460); // 1120 bytes (0x0002A0 - 0x000460)
static_assert(sizeof(UWeaponAnimationsTPV) == 0x0498); // 1176 bytes (0x0002D0 - 0x000498)
static_assert(sizeof(UWeaponAnimInstance) == 0x0310); // 784 bytes (0x0002C8 - 0x000310)
static_assert(sizeof(UWeaponAudio) == 0x0200); // 512 bytes (0x000200 - 0x000200)
static_assert(sizeof(FWeaponModDefaultVisuals) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UWeaponMod) == 0x01D0); // 464 bytes (0x000118 - 0x0001D0)
static_assert(sizeof(URangedBarrelMod) == 0x01D0); // 464 bytes (0x0001D0 - 0x0001D0)
static_assert(sizeof(URangedUnderbarrelMod) == 0x01D0); // 464 bytes (0x0001D0 - 0x0001D0)
static_assert(sizeof(URangedSightMod) == 0x01D0); // 464 bytes (0x0001D0 - 0x0001D0)
static_assert(sizeof(URangedMagazineMod) == 0x01D0); // 464 bytes (0x0001D0 - 0x0001D0)
static_assert(sizeof(UMeleeGripMod) == 0x01D0); // 464 bytes (0x0001D0 - 0x0001D0)
static_assert(sizeof(UMeleeAttackMod) == 0x01D0); // 464 bytes (0x0001D0 - 0x0001D0)
static_assert(sizeof(FWeaponModSlot) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FWeaponModVisualOverride) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FWeaponModProjectileOverride) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(UWeaponModContainer) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UWeaponRadialSectionWidget) == 0x0298); // 664 bytes (0x000288 - 0x000298)
static_assert(sizeof(UWeaponSelectWidget) == 0x0490); // 1168 bytes (0x000300 - 0x000490)
static_assert(sizeof(UWeaponStateWidget) == 0x0330); // 816 bytes (0x000300 - 0x000330)
static_assert(sizeof(UWeaponStateWidgetComponent) == 0x0680); // 1664 bytes (0x000670 - 0x000680)
static_assert(sizeof(UWeaponStatusEffectApplier) == 0x0060); // 96 bytes (0x000048 - 0x000060)
static_assert(sizeof(UWeaponVisualStateModVisual) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(UWindowsSaveGameManager) == 0x06B0); // 1712 bytes (0x000690 - 0x0006B0)
static_assert(sizeof(AWorkbench) == 0x02C8); // 712 bytes (0x0002B8 - 0x0002C8)
static_assert(sizeof(UWorkbenchTransactionDetails) == 0x0300); // 768 bytes (0x000300 - 0x000300)
static_assert(sizeof(UWorkbenchWidget) == 0x0358); // 856 bytes (0x000308 - 0x000358)
static_assert(sizeof(FHitTypeData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FDamageTypeColors) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(UWorldSpaceDamageTextGenerator) == 0x0100); // 256 bytes (0x000030 - 0x000100)
static_assert(sizeof(UWorldSpaceDamageWidgetComponent) == 0x0680); // 1664 bytes (0x000670 - 0x000680)
static_assert(sizeof(UWormAnimInstance) == 0x09A0); // 2464 bytes (0x000950 - 0x0009A0)
static_assert(sizeof(FCauseDamageInfo) == 0x0110); // 272 bytes (0x000000 - 0x000110)
static_assert(sizeof(FItemStackSplit) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FInteractionDescription) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FComponentEvent) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FButtonEvent) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FSliderEvent) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FAchievementProgress) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FAIDetectionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAISoundDetectionData) == 0x0040); // 64 bytes (0x000018 - 0x000040)
static_assert(sizeof(FJointDriverData) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FAnimNode_BatchJointDriver) == 0x01E0); // 480 bytes (0x0000C8 - 0x0001E0)
static_assert(sizeof(FAnimNode_BatchModify) == 0x00D8); // 216 bytes (0x0000C8 - 0x0000D8)
static_assert(sizeof(FAnimNode_BoneMatch) == 0x0130); // 304 bytes (0x0000C8 - 0x000130)
static_assert(sizeof(FAnimNode_CurveSlot) == 0x00B0); // 176 bytes (0x000010 - 0x0000B0)
static_assert(sizeof(FAnimNode_EyeLidLimitEntry) == 0x005C); // 92 bytes (0x000000 - 0x00005C)
static_assert(sizeof(FAnimNode_EyeLidLimits) == 0x00E8); // 232 bytes (0x0000C8 - 0x0000E8)
static_assert(sizeof(FAnimNode_EyeLookAt) == 0x01C0); // 448 bytes (0x0000C8 - 0x0001C0)
static_assert(sizeof(FAnimNode_JointDriver) == 0x0170); // 368 bytes (0x0000C8 - 0x000170)
static_assert(sizeof(FAnimNode_LocomotionPlay) == 0x0090); // 144 bytes (0x000080 - 0x000090)
static_assert(sizeof(FAnimNode_RandomSequenceNamed) == 0x0088); // 136 bytes (0x000010 - 0x000088)
static_assert(sizeof(FAnimNode_RotateBoneAboutBone) == 0x0100); // 256 bytes (0x0000C8 - 0x000100)
static_assert(sizeof(FBannedNameReaderData) == 0x0018); // 24 bytes (0x000008 - 0x000018)
static_assert(sizeof(FTrackingRegion) == 0x00F0); // 240 bytes (0x000000 - 0x0000F0)
static_assert(sizeof(FBodyTrackingRegion) == 0x0118); // 280 bytes (0x0000F0 - 0x000118)
static_assert(sizeof(FCharacterCreationAttributeData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FCharacterCreationSkillData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCharacterCreationPerkData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCreationTemplate) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FAttributeMetaData) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FScannerData) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FScannerArmorData) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FChatterCooldownSet) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FChatterCooldownSettings) == 0x0018); // 24 bytes (0x000008 - 0x000018)
static_assert(sizeof(FChatterEventsGameDataReferenceID) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FCompanionCommandMoveToLocation) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FLocationCost) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAddictionModifier) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FNodeConfig) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FReceiveDamageData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FIndianaGenericDamageEvent) == 0x00D8); // 216 bytes (0x000010 - 0x0000D8)
static_assert(sizeof(FIndianaPointDamageEvent) == 0x0170); // 368 bytes (0x0000A8 - 0x000170)
static_assert(sizeof(FIndianaRadialDamageEvent) == 0x0108); // 264 bytes (0x000040 - 0x000108)
static_assert(sizeof(FDeathPoseData) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FDeathBodyInstanceData) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FEventEffectParams) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FEyesTrackingRegion) == 0x00F0); // 240 bytes (0x0000F0 - 0x0000F0)
static_assert(sizeof(FFaceFxRigsGameDataReferenceID) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FFaceFxRigStructure) == 0x0020); // 32 bytes (0x000008 - 0x000020)
static_assert(sizeof(FBlockedActorData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FDelayedEventData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FReputationActionModifiers) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMeleeAnim) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FTransitionGroupElement) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FHeadTrackingRegion) == 0x0150); // 336 bytes (0x0000F0 - 0x000150)
static_assert(sizeof(FPerceptionRangeScalar) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FIndianaAINoiseEvent) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FCompanionInfo) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FTrajectoryResult) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FInteractPayloadParamDescription) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FNavigationCategory) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FMeleeEQSResult) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMeleeAttacker) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FObjectRefCounter) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FObjectiveWaypointGameDataReferenceID) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FRandomBank) == 0x0020); // 32 bytes (0x000008 - 0x000020)
static_assert(sizeof(FRandomBankGameDataReferenceID) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FRandomTextEntry) == 0x0010); // 16 bytes (0x000008 - 0x000010)
static_assert(sizeof(FSharedStateStubData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FSaveGameGeneralMetadata) == 0x00E8); // 232 bytes (0x000000 - 0x0000E8)
static_assert(sizeof(FLevelReference) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FGenericGameStateHeader) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FGenericVersionedGameStateHeader) == 0x0010); // 16 bytes (0x00000C - 0x000010)
static_assert(sizeof(FCompanionGameStateHeader) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FPlayerGameStateHeader) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FActorGameStateHeader) == 0x0028); // 40 bytes (0x00000C - 0x000028)
static_assert(sizeof(FLevelGameStateHeader) == 0x0038); // 56 bytes (0x000010 - 0x000038)
static_assert(sizeof(FGenericVersionedWithDependenciesGameStateHeader) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FDependencyLoadRequest) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDestroyedPrePlacedActorRegistry) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FStatusEffectSerializationContext) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDynamicEffectProperties) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FScriptedTeamDataSource) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTestAudioDataTypeReferenceID) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FIKChainConfig) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCostModifiers) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FWeaponAimTrackingRegion) == 0x0110); // 272 bytes (0x0000F0 - 0x000110)
static_assert(sizeof(FLerpTimer) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(offsetof(UIndianaUserWidget, AssetKey) == 0x0290);
static_assert(offsetof(UIndianaUserWidget, OwnerWidgetComponent) == 0x02A8);
static_assert(offsetof(UAbilityOverviewChildWidget, AbilityProgressBar) == 0x0350);
static_assert(offsetof(UAbilityOverviewChildWidget, AbilityPosition) == 0x0364);
static_assert(offsetof(UAbilityOverviewDetailWidget, CompanionAttackBackgroundTexture) == 0x0378);
static_assert(offsetof(UAbilityOverviewDetailWidget, CompanionAttackFillTexture) == 0x0380);
static_assert(offsetof(UAbilityOverviewDetailWidget, CompanionMoveToBackgroundTexture) == 0x0388);
static_assert(offsetof(UAbilityOverviewDetailWidget, CompanionMoveToFillTexture) == 0x0390);
static_assert(offsetof(UAbilityOverviewDetailWidget, HoldPCBox) == 0x03A0);
static_assert(offsetof(UAbilityOverviewDetailWidget, HoldRingPC) == 0x03A8);
static_assert(offsetof(UAbilityOverviewDetailWidget, HoldGamepadBox) == 0x03B0);
static_assert(offsetof(UAbilityOverviewDetailWidget, HoldRingGamepad) == 0x03B8);
static_assert(offsetof(UAbilityOverviewWidget, GamepadPanelOverlay) == 0x0300);
static_assert(offsetof(UAbilityOverviewWidget, MainInvalidationBox) == 0x0308);
static_assert(offsetof(UAbilityOverviewWidget, CommandOneLightImage) == 0x0310);
static_assert(offsetof(UAbilityOverviewWidget, CommandTwoLightImage) == 0x0318);
static_assert(offsetof(UAbilityOverviewWidget, CommandThreeLightImage) == 0x0320);
static_assert(offsetof(UAbilityOverviewWidget, CommandFourLightImage) == 0x0328);
static_assert(offsetof(UAbilityOverviewWidget, CommandOneButtonImage) == 0x0330);
static_assert(offsetof(UAbilityOverviewWidget, CommandTwoButtonImage) == 0x0338);
static_assert(offsetof(UAbilityOverviewWidget, CommandThreeButtonImage) == 0x0340);
static_assert(offsetof(UAbilityOverviewWidget, CommandFourButtonImage) == 0x0348);
static_assert(offsetof(UAbilityOverviewWidget, CommandOneButtonPress) == 0x0350);
static_assert(offsetof(UAbilityOverviewWidget, CommandTwoButtonPress) == 0x0358);
static_assert(offsetof(UAbilityOverviewWidget, CommandThreeButtonPress) == 0x0360);
static_assert(offsetof(UAbilityOverviewWidget, CommandFourButtonPress) == 0x0368);
static_assert(offsetof(UAbilityOverviewWidget, CompanionCommandOne) == 0x0370);
static_assert(offsetof(UAbilityOverviewWidget, CompanionCommandTwo) == 0x0378);
static_assert(offsetof(UAbilityOverviewWidget, CompanionCommandThree) == 0x0380);
static_assert(offsetof(UAbilityOverviewWidget, CompanionCommandFour) == 0x0388);
static_assert(offsetof(UAbilityOverviewWidget, CompanionInputLabelOne) == 0x0390);
static_assert(offsetof(UAbilityOverviewWidget, CompanionInputLabelTwo) == 0x0398);
static_assert(offsetof(UAbilityOverviewWidget, CompanionInputLabelThree) == 0x03A0);
static_assert(offsetof(UAbilityOverviewWidget, CompanionInputLabelFour) == 0x03A8);
static_assert(offsetof(UAbilityOverviewWidget, CompanionInputWidgetOne) == 0x03B0);
static_assert(offsetof(UAbilityOverviewWidget, CompanionInputWidgetTwo) == 0x03B8);
static_assert(offsetof(UAbilityOverviewWidget, CompanionInputWidgetThree) == 0x03C0);
static_assert(offsetof(UAbilityOverviewWidget, CompanionInputWidgetFour) == 0x03C8);
static_assert(offsetof(UAbilityOverviewWidget, AbilityIcon) == 0x03D0);
static_assert(offsetof(UAbilityOverviewWidget, ButtonUnavailableTexture) == 0x03D8);
static_assert(offsetof(UAbilityOverviewWidget, ButtonAvailableTexture) == 0x03E0);
static_assert(offsetof(UAbilityOverviewWidget, ButtonPressedTexture) == 0x03E8);
static_assert(offsetof(UAchievementDataAsset, EventListener) == 0x0038);
static_assert(offsetof(UAchievementDataAsset, SteamName) == 0x0048);
static_assert(offsetof(UAchievementDataAsset, PS4Name) == 0x0050);
static_assert(offsetof(UAchievementDataAsset, XboxName) == 0x0058);
static_assert(offsetof(UAchievementsManager, CurrentPresenceData) == 0x0108);
static_assert(offsetof(UActionSequence, Actions) == 0x0038);
static_assert(offsetof(UActionSequence, ConstructedAction) == 0x0048);
static_assert(offsetof(FAISelector_FValue, AIFValue) == 0x0000);
static_assert(offsetof(UBehaviorStateRequestData, MinRange) == 0x0040);
static_assert(offsetof(UBehaviorStateRequestData, PreferredRange) == 0x0048);
static_assert(offsetof(UBehaviorStateRequestData, RequiresRangeRequest) == 0x0050);
static_assert(offsetof(UDecisionTreeEmptyRequestData, InfoType) == 0x0060);
static_assert(offsetof(APooledActor, OwningPool) == 0x02B8);
static_assert(offsetof(FActorPoolConfiguration, PoolingMethod) == 0x0000);
static_assert(offsetof(FActorPoolConfiguration, ActorClass) == 0x0008);
static_assert(offsetof(UActorPool, PoolConfiguration) == 0x0030);
static_assert(offsetof(UActorPool, ActiveActors) == 0x0048);
static_assert(offsetof(UActorPool, FreeActors) == 0x0058);
static_assert(offsetof(UActorRenderWidget, ActorStageClass) == 0x0318);
static_assert(offsetof(UActorRenderWidget, MouseSensitivity) == 0x0330);
static_assert(offsetof(UActorRenderWidget, GamepadSensitivity) == 0x0338);
static_assert(offsetof(UActorRenderWidget, ImageMaterial) == 0x0340);
static_assert(offsetof(UActorRenderWidget, RenderTargetFormat) == 0x0354);
static_assert(offsetof(UActorRenderWidget, Border) == 0x0358);
static_assert(offsetof(UActorRenderWidget, Image) == 0x0360);
static_assert(offsetof(AActorStage, AttachPointSceneComponent) == 0x02C0);
static_assert(offsetof(AActorStage, FinalColorCaptureComponent) == 0x02C8);
static_assert(offsetof(AActorStage, AlphaCaptureComponent) == 0x02D0);
static_assert(offsetof(AActorStage, IdleRotationSpeed) == 0x02EC);
static_assert(offsetof(AActorStage, IdleRotationStart) == 0x02F8);
static_assert(offsetof(AActorStage, ActiveVisuals) == 0x0308);
static_assert(offsetof(FAkPlaySoundStatePair, EventEffect) == 0x0000);
static_assert(offsetof(FAkPlaySoundStatePair, State) == 0x0008);
static_assert(offsetof(FPlayFxPair, EventEffect) == 0x0000);
static_assert(offsetof(FPlayFxPair, State) == 0x0008);
static_assert(offsetof(FEventEffectState, PlayAkSoundStateMap) == 0x0000);
static_assert(offsetof(FEventEffectState, PlayFxStateMap) == 0x0010);
static_assert(offsetof(FLocString, TableType) == 0x0004);
static_assert(offsetof(UStatusEffect, EventEffectState) == 0x0080);
static_assert(offsetof(UStatusEffect, ParentSpell) == 0x00A0);
static_assert(offsetof(UStatusEffect, InitialApplicationType) == 0x00FE);
static_assert(offsetof(UStatusEffect, DurationType) == 0x00FF);
static_assert(offsetof(UStatusEffect, OriginOffensiveSkill) == 0x0100);
static_assert(offsetof(UStatusEffect, TargetDefensiveAttribute) == 0x0101);
static_assert(offsetof(UStatusEffect, DurationStat) == 0x0110);
static_assert(offsetof(UStatusEffect, ApplicationType) == 0x0119);
static_assert(offsetof(UStatusEffect, Skill) == 0x0123);
static_assert(offsetof(UStatusEffect, EffectName) == 0x0130);
static_assert(offsetof(UStatusEffect, EffectDescription) == 0x0138);
static_assert(offsetof(UStatusEffect, StartEventEffects) == 0x0140);
static_assert(offsetof(UStatusEffect, ApplyEventEffects) == 0x0148);
static_assert(offsetof(UStatusEffect, EndEventEffects) == 0x0150);
static_assert(offsetof(UStatusEffect, UIVisualsData) == 0x0158);
static_assert(offsetof(UStatusEffect, DescriptionFormat) == 0x0160);
static_assert(offsetof(UAdjustCCCooldownStatusEffect, Command) == 0x0188);
static_assert(offsetof(UAICastSpell_AnimNotify, SpellType) == 0x0040);
static_assert(offsetof(UAICastSpell_AnimNotifyState, TriggerEvent) == 0x0038);
static_assert(offsetof(UAIEventInfo_StatusEffect, StatusEffect) == 0x0030);
static_assert(offsetof(FAimAssistConfig, FrictionInputCurve) == 0x0028);
static_assert(offsetof(FAimAssistConfig, FrictionStrengthTowardsTargetCurve) == 0x00B0);
static_assert(offsetof(FAimAssistConfig, FrictionStrengthAwayFromTargetCurve) == 0x0138);
static_assert(offsetof(UAimAssistComponent, DifficultyBulletScalars) == 0x00E8);
static_assert(offsetof(UAimAssistComponent, DefaultAimAssistConfig) == 0x0420);
static_assert(offsetof(UIndianaCharMovementComponent, BlockSpeedMultStat) == 0x0C58);
static_assert(offsetof(UIndianaCharMovementComponent, FallingDamageType) == 0x0C70);
static_assert(offsetof(UIndianaCharMovementComponent, DefaultFootstepData) == 0x0DD0);
static_assert(offsetof(UIndianaCharMovementComponent, OverrideFootstepData) == 0x0DD8);
static_assert(offsetof(FExtremaOverlap, Overlapper) == 0x0008);
static_assert(offsetof(UAIMovementComponent, ExtremaSceneComponent) == 0x0E80);
static_assert(offsetof(UAIMovementComponent, ExtremaOverlapper) == 0x0E88);
static_assert(offsetof(UAIMovementComponent, ExtremaBlocker) == 0x0E90);
static_assert(offsetof(UAIMovementComponent, ExtremaOverlaps) == 0x0E98);
static_assert(offsetof(FReactiveToMeleeElement, MeleeActionProbabilityOverrides) == 0x0010);
static_assert(offsetof(UAISettings_DefensiveAction, ReactiveToMeleeActions) == 0x0038);
static_assert(offsetof(UAISettings_DefensiveAction, ReactiveToRangeActions) == 0x0088);
static_assert(offsetof(UAISettings_DefensiveAction, PreemptiveMeleeActions) == 0x00A0);
static_assert(offsetof(UAISettings_Follow, FollowTarget) == 0x0030);
static_assert(offsetof(UAISettings_Follow, FollowTargetSpawnNode) == 0x0058);
static_assert(offsetof(UAISettings_Furniture, Furniture) == 0x0030);
static_assert(offsetof(UAISettings_Furniture, FurnitureActor) == 0x0040);
static_assert(offsetof(UAISettings_Furniture, FurnitureComponent) == 0x0048);
static_assert(offsetof(UAISettings_Patrol, PatrolNode) == 0x0030);
static_assert(offsetof(UAISettings_Patrol, PatrolType) == 0x0038);
static_assert(offsetof(FAISettings_RecoveryBackupBehavior, RecoveryType) == 0x0000);
static_assert(offsetof(FAISettings_RecoveryBackupBehavior, DodgeDirection) == 0x0014);
static_assert(offsetof(FAISettings_MeleeActionBase, BackupBehavior) == 0x0010);
static_assert(offsetof(FAISettings_MeleeAction, UseCase) == 0x0040);
static_assert(offsetof(FAISettings_MeleePatternEntry, MeleeAction) == 0x0000);
static_assert(offsetof(FAISettings_MeleePatternEntry, Settings) == 0x0008);
static_assert(offsetof(FAISettings_MeleePattern, AttackPattern) == 0x0010);
static_assert(offsetof(FAISettings_Melee, MainBackupBehavior) == 0x0014);
static_assert(offsetof(FAISettings_Melee, MeleeActions) == 0x0038);
static_assert(offsetof(FAISettings_Melee, AttackPatterns) == 0x0090);
static_assert(offsetof(FAISettings_StationaryFire, FiringPattern) == 0x0004);
static_assert(offsetof(FAISettings_CoverFire, CoverTypes) == 0x0001);
static_assert(offsetof(FAISettings_CoverFire, FiringPattern) == 0x0008);
static_assert(offsetof(FAISettings_MovingFire, FiringPattern) == 0x0008);
static_assert(offsetof(FAISettings_SuppressingFire, Duration) == 0x0000);
static_assert(offsetof(FAISettings_LostTarget, WaitTime) == 0x0000);
static_assert(offsetof(FAISettings_LostTarget, SearchMode) == 0x0008);
static_assert(offsetof(FAISettings_RangedPositioning, TooNear) == 0x0000);
static_assert(offsetof(FAISettings_RangedPositioning, PreferredRange) == 0x0010);
static_assert(offsetof(FAISettings_RangedPositioning, TooFar) == 0x0020);
static_assert(offsetof(FAISettings_RangedBehavior, OnEnterCombatBehavior) == 0x0000);
static_assert(offsetof(FAISettings_RangedBehavior, Near) == 0x0010);
static_assert(offsetof(FAISettings_RangedBehavior, PreferedRange) == 0x0020);
static_assert(offsetof(FAISettings_RangedBehavior, ToFar) == 0x0030);
static_assert(offsetof(FAISettings_RangedBehavior, OverrideRangeRepositionData) == 0x004C);
static_assert(offsetof(UAISettings_Weapon, WeaponFireType) == 0x0038);
static_assert(offsetof(UAISettings_Weapon, Melee) == 0x0040);
static_assert(offsetof(UAISettings_Weapon, StationaryFire) == 0x0128);
static_assert(offsetof(UAISettings_Weapon, CoverFire) == 0x0144);
static_assert(offsetof(UAISettings_Weapon, MovingFire) == 0x0170);
static_assert(offsetof(UAISettings_Weapon, SuppressingFire) == 0x019C);
static_assert(offsetof(UAISettings_Weapon, LostTarget) == 0x01A0);
static_assert(offsetof(UAISettings_Weapon, RangeBehavior) == 0x01B0);
static_assert(offsetof(UAISettings_Weapon, AI_SettingsDefensiveActions) == 0x0230);
static_assert(offsetof(UAISettings_Weapon, Block) == 0x0238);
static_assert(offsetof(UAISettings_Weapon, Dodge) == 0x024C);
static_assert(offsetof(UAISettings_Weapon, Positioning) == 0x0254);
static_assert(offsetof(FBehaviorSettings_Set, DefaultBehavior) == 0x0000);
static_assert(offsetof(FBehaviorSettings_Set, InterestData) == 0x0008);
static_assert(offsetof(FGlobalVariable, DisplayName) == 0x0000);
static_assert(offsetof(FGlobalVariableConditional, GlobalVariable) == 0x0000);
static_assert(offsetof(FGlobalVariableConditional, Operator) == 0x0010);
static_assert(offsetof(FGlobalVariableConditional, OtherGlobalVariable) == 0x0018);
static_assert(offsetof(FQuestReference, ID) == 0x0000);
static_assert(offsetof(FQuestStateConditional, QuestReference) == 0x0000);
static_assert(offsetof(FQuestStateConditional, Operator) == 0x0010);
static_assert(offsetof(FQuestStateConditional, ComparisonState) == 0x0011);
static_assert(offsetof(FCompanionStateConditional, CompanionToCheck) == 0x0000);
static_assert(offsetof(FCompanionStateConditional, Operator) == 0x0001);
static_assert(offsetof(FCompanionStateConditional, ComparisonState) == 0x0002);
static_assert(offsetof(FPCGenderConditional, Operator) == 0x0000);
static_assert(offsetof(FPCGenderConditional, ComparisonGender) == 0x0001);
static_assert(offsetof(FDLCInstalledConditional, DLCToCheck) == 0x0000);
static_assert(offsetof(FLogicalStatement, Operator) == 0x0000);
static_assert(offsetof(FLogicalStatement, ConditionalType) == 0x0001);
static_assert(offsetof(FLogicalStatement, Condition) == 0x0008);
static_assert(offsetof(FLogicalStatement, QuestStateCondition) == 0x0038);
static_assert(offsetof(FLogicalStatement, CompanionStateCondition) == 0x004C);
static_assert(offsetof(FLogicalStatement, PCGenderCondition) == 0x0050);
static_assert(offsetof(FLogicalStatement, DLCInstalledCondition) == 0x0053);
static_assert(offsetof(FLogicalExpression, ConditionalType) == 0x0000);
static_assert(offsetof(FLogicalExpression, BaseCondition) == 0x0008);
static_assert(offsetof(FLogicalExpression, BaseQuestStateCondition) == 0x0038);
static_assert(offsetof(FLogicalExpression, BaseCompanionStateCondition) == 0x004C);
static_assert(offsetof(FLogicalExpression, BasePCGenderCondition) == 0x0050);
static_assert(offsetof(FLogicalExpression, BaseDLCInstalledCondition) == 0x0053);
static_assert(offsetof(FLogicalExpression, AdditionalConditions) == 0x0058);
static_assert(offsetof(FScriptedBehavior_Set, GlobalVariableExpression) == 0x0010);
static_assert(offsetof(FBehaviorPackage, DefaultBehaviorData) == 0x0000);
static_assert(offsetof(FBehaviorPackage, TimeOfDayData) == 0x0010);
static_assert(offsetof(FBehaviorPackage, ScriptedBehaviors) == 0x0060);
static_assert(offsetof(FBehaviorPhases, PhaseListeners) == 0x0018);
static_assert(offsetof(FSaveGameDataBehaviorStack, SavedStateInfos) == 0x0000);
static_assert(offsetof(FSaveGameDataAIController, BehaviorStackData) == 0x0010);
static_assert(offsetof(FSaveGameDataAIController, DetectionData) == 0x0020);
static_assert(offsetof(FSaveGameDataAIController, TargetInfoData) == 0x0050);
static_assert(offsetof(FSaveGameDataAIController, DecisionTreeData) == 0x0064);
static_assert(offsetof(FSaveGameDataAIController, InterestData) == 0x0070);
static_assert(offsetof(UAISettingsComponent, LevelsToWaitForLoad) == 0x00E8);
static_assert(offsetof(UAISettingsComponent, OverrideDecisionTreeData) == 0x00F8);
static_assert(offsetof(UAISettingsComponent, SecondaryOverrideDecisionTreeData) == 0x0100);
static_assert(offsetof(UAISettingsComponent, CustomAIUpdate) == 0x0108);
static_assert(offsetof(UAISettingsComponent, DebugDecisionTree) == 0x0110);
static_assert(offsetof(UAISettingsComponent, DebugDecisionTreeRequest) == 0x0118);
static_assert(offsetof(UAISettingsComponent, DetectionMode) == 0x0158);
static_assert(offsetof(UAISettingsComponent, CombatReaction) == 0x0170);
static_assert(offsetof(UAISettingsComponent, WeaponPreference) == 0x0171);
static_assert(offsetof(UAISettingsComponent, SlotPriority) == 0x017C);
static_assert(offsetof(UAISettingsComponent, OverrideFleeNode) == 0x0188);
static_assert(offsetof(UAISettingsComponent, DefaultBehaviorType) == 0x01A1);
static_assert(offsetof(UAISettingsComponent, PatrolNode) == 0x01A8);
static_assert(offsetof(UAISettingsComponent, InterestData) == 0x01B0);
static_assert(offsetof(UAISettingsComponent, ParentDefaultBehaviorType) == 0x01B8);
static_assert(offsetof(UAISettingsComponent, ParentOverrideWanderSettings) == 0x01BC);
static_assert(offsetof(UAISettingsComponent, ParentInterestData) == 0x01D0);
static_assert(offsetof(UAISettingsComponent, OutOfCombatData) == 0x01D8);
static_assert(offsetof(UAISettingsComponent, ParentDefaultBehavior) == 0x0270);
static_assert(offsetof(UAISettingsComponent, OverrideDefaultBehavior) == 0x0278);
static_assert(offsetof(UAISettingsComponent, AISettings) == 0x0290);
static_assert(offsetof(UAISettingsComponent, PhaseInfo) == 0x02A0);
static_assert(offsetof(UAISettingsComponent, ControllerSaveData) == 0x02D0);
static_assert(offsetof(UAISettingsComponent, OutOfCombatSightConfigOverride) == 0x0398);
static_assert(offsetof(UAISettingsComponent, PseudoGodMode) == 0x03A0);
static_assert(offsetof(AAlarm, SceneComponent) == 0x02B8);
static_assert(offsetof(AAlarm, RestrictedArea) == 0x02C0);
static_assert(offsetof(FExaminableStringSet, Name) == 0x0000);
static_assert(offsetof(FExaminableStringSet, Description) == 0x0008);
static_assert(offsetof(FExaminableStringSet, OverrideLabel) == 0x0010);
static_assert(offsetof(FExaminableStringSet, RemoteEventOnExaminationEnd) == 0x0018);
static_assert(offsetof(FItemTutorialSet, OnItemAddedTutorial) == 0x0000);
static_assert(offsetof(FItemTutorialSet, OnItemEquippedTutorial) == 0x0001);
static_assert(offsetof(FItemTutorialSet, OnItemLostTutorial) == 0x0002);
static_assert(offsetof(FItemTutorialSet, OnItemBreakDownTutorial) == 0x0003);
static_assert(offsetof(FItemTutorialSet, OnItemDroppedTutorial) == 0x0004);
static_assert(offsetof(FItemTutorialSet, OnItemSoldTutorial) == 0x0005);
static_assert(offsetof(UItem, Name) == 0x0030);
static_assert(offsetof(UItem, Brand) == 0x0038);
static_assert(offsetof(UItem, Description) == 0x0040);
static_assert(offsetof(UItem, Lore) == 0x004C);
static_assert(offsetof(UItem, UIImage) == 0x0058);
static_assert(offsetof(UItem, ExaminableStringSet) == 0x0064);
static_assert(offsetof(UItem, BrandData) == 0x0088);
static_assert(offsetof(UItem, PaperdollOriginRotation) == 0x00A0);
static_assert(offsetof(UItem, OnUseEvent) == 0x00B0);
static_assert(offsetof(UItem, OwningFaction) == 0x00C0);
static_assert(offsetof(UItem, OwningActor) == 0x00C8);
static_assert(offsetof(UItem, GameplayTag) == 0x00F4);
static_assert(offsetof(UItem, Tutorials) == 0x00FC);
static_assert(offsetof(UItem, TimeOfSaleByPlayer) == 0x0110);
static_assert(offsetof(UAmmo, AmmoType) == 0x0118);
static_assert(offsetof(UAmmo, DamageMultipliers) == 0x011C);
static_assert(offsetof(UAmmo, AmmoIcon) == 0x0130);
static_assert(offsetof(UAmmo, AmmoTypeTag) == 0x0158);
static_assert(offsetof(UAmmo, OnHitSpell) == 0x0168);
static_assert(offsetof(UAmmo, PassiveSpell) == 0x0170);
static_assert(offsetof(UAmmo, PickupMesh) == 0x0178);
static_assert(offsetof(UAmmoRadialSectionWidget, VerticalBox) == 0x0288);
static_assert(offsetof(UAmmoRadialSectionWidget, NameTextBlock) == 0x0290);
static_assert(offsetof(UAmmoRadialSectionWidget, CountTextBlock) == 0x0298);
static_assert(offsetof(UAmmoRadialSectionWidget, Image) == 0x02A0);
static_assert(offsetof(UAmmoReadoutWidget, InvalidationWrapper) == 0x0300);
static_assert(offsetof(UAmmoReadoutWidget, AmmoReadout) == 0x0308);
static_assert(offsetof(UAmmoReadoutWidget, AmmoTypeImage) == 0x0310);
static_assert(offsetof(UAmmoReadoutWidget, AmmoBrandImage) == 0x0318);
static_assert(offsetof(UAmmoReadoutWidget, LoadedAmmoTextBlock) == 0x0320);
static_assert(offsetof(UAmmoReadoutWidget, RemainingAmmoTextBlock) == 0x0328);
static_assert(offsetof(UAmmoReadoutWidget, LoadedConsumeableTextBlock) == 0x0330);
static_assert(offsetof(UAmmoReadoutWidget, LoadedConsumeableIcon) == 0x0338);
static_assert(offsetof(UAnimationAudioSet, Events) == 0x0038);
static_assert(offsetof(UAnimationRequestData, AnimationTag) == 0x0068);
static_assert(offsetof(UDisableStatusEffect, DisableType) == 0x0188);
static_assert(offsetof(FBoneMod, Transform) == 0x0000);
static_assert(offsetof(UBoneModifications, BoneMods) == 0x0038);
static_assert(offsetof(UBoneModifications, UIDisplayText) == 0x0094);
static_assert(offsetof(UBoneModificationsPreset, BoneSettings) == 0x0038);
static_assert(offsetof(UAnimNotify_AudioEvent, Event) == 0x0040);
static_assert(offsetof(UAnimNotify_AudioEvent, LoopType) == 0x0048);
static_assert(offsetof(UAnimNotify_EventEffects, EventEffects) == 0x0040);
static_assert(offsetof(UAnimNotify_FootStep, FootID) == 0x0040);
static_assert(offsetof(UAnimNotify_FootStep, SpecialEvent) == 0x0042);
static_assert(offsetof(UAnimNotify_IndianaAkEvent, Event) == 0x0040);
static_assert(offsetof(UAnimNotify_ParamsEvent, Event) == 0x0040);
static_assert(offsetof(UAnimNotify_PlayChatter, NotifyChatterEvent) == 0x0040);
static_assert(offsetof(UAnimNotify_PropDespawn, PropToDespawn) == 0x0040);
static_assert(offsetof(UAnimNotify_PropDespawn, PropDataToDespawn) == 0x0048);
static_assert(offsetof(FPropEntry, PropTag) == 0x0000);
static_assert(offsetof(FPropEntry, SkeletalMeshToSpawn) == 0x0008);
static_assert(offsetof(FPropEntry, StaticMeshToSpawn) == 0x0010);
static_assert(offsetof(FPropEntry, SocketToAttachTo) == 0x0018);
static_assert(offsetof(FPropEntry, SocketOffset) == 0x0020);
static_assert(offsetof(FPropEntry, SocketRotation) == 0x002C);
static_assert(offsetof(FPropEntry, ParticleSystemToSpawn) == 0x0038);
static_assert(offsetof(FPropEntry, ParticleSocketToAttachTo) == 0x0040);
static_assert(offsetof(FPropEntry, ParticleSocketOffset) == 0x0048);
static_assert(offsetof(FPropEntry, ParticleSocketRotation) == 0x0054);
static_assert(offsetof(FPropEntry, DespawnRule) == 0x0060);
static_assert(offsetof(UPropData, Props) == 0x0038);
static_assert(offsetof(UNewPropData, PropInfo) == 0x0038);
static_assert(offsetof(UAnimNotify_PropSpawn, PropToSpawn) == 0x0040);
static_assert(offsetof(UAnimNotify_PropSpawn, PropDataToSpawn) == 0x0048);
static_assert(offsetof(UAnimNotify_WeaponVisualEvent, Event) == 0x0040);
static_assert(offsetof(UAnimNotifyState_AudioEventLoop, Event) == 0x0038);
static_assert(offsetof(UAnimNotifyState_FurnitureInterrupt, InterruptType) == 0x0038);
static_assert(offsetof(UAnimNotifyState_MeleeDamage, MeleeCollisionTrigger) == 0x0038);
static_assert(offsetof(UAnimNotifyState_Prop, PropToSpawn) == 0x0038);
static_assert(offsetof(UAnimNotifyState_Prop, PropDataToSpawn) == 0x0040);
static_assert(offsetof(FTransformedShape, Shape) == 0x0000);
static_assert(offsetof(FTransformedShape, ShapeTransform) == 0x0010);
static_assert(offsetof(UAoEStatusEffect, CollisionShape) == 0x0190);
static_assert(offsetof(UAoEStatusEffect, StatusEffect) == 0x01D0);
static_assert(offsetof(FAppearanceCustomizations, EyeColor) == 0x0008);
static_assert(offsetof(FAppearanceCustomizations, Hair) == 0x0010);
static_assert(offsetof(FAppearanceCustomizations, HairColor) == 0x0018);
static_assert(offsetof(FAppearanceCustomizations, Brows) == 0x0020);
static_assert(offsetof(FAppearanceCustomizations, Beard) == 0x0028);
static_assert(offsetof(FAppearanceCustomizations, BeardColor) == 0x0030);
static_assert(offsetof(FAppearanceCustomizations, SkinTone) == 0x0038);
static_assert(offsetof(FAppearanceCustomizations, Scar) == 0x0040);
static_assert(offsetof(FAppearanceCustomizations, Dirt) == 0x0048);
static_assert(offsetof(FAppearanceCustomizations, Makeup) == 0x0050);
static_assert(offsetof(FAppearanceCustomizations, DetailMask) == 0x0058);
static_assert(offsetof(FAppearanceCustomizations, DetailColor) == 0x0060);
static_assert(offsetof(FAppearanceMatch, Genders) == 0x0000);
static_assert(offsetof(FAppearanceMatch, Views) == 0x0020);
static_assert(offsetof(FAppliedAppearanceMod, ModAppearances) == 0x0008);
static_assert(offsetof(FAppliedAppearanceMod, SourceMod) == 0x0010);
static_assert(offsetof(FAppliedAppearanceMod, Mod) == 0x0018);
static_assert(offsetof(FAppliedAppearanceMod, ComponentTags) == 0x0020);
static_assert(offsetof(FAppliedAppearanceMod, RequiredTags) == 0x0030);
static_assert(offsetof(FHeadAppearanceMods, HeadStyle) == 0x0058);
static_assert(offsetof(FHeadAppearanceMods, HairMorphTarget) == 0x005C);
static_assert(offsetof(FHeadAppearanceMods, HairMeshMod) == 0x0078);
static_assert(offsetof(FHeadAppearanceMods, BeardMeshMod) == 0x0080);
static_assert(offsetof(FHeadAppearanceMods, MaterialParamMods) == 0x0088);
static_assert(offsetof(FAppearanceInstance, TargetMeshName) == 0x0000);
static_assert(offsetof(FAppearanceInstance, AppearanceMatch) == 0x0010);
static_assert(offsetof(FAppearanceInstance, SecondaryAppearanceMesh) == 0x0058);
static_assert(offsetof(FAppearanceInstance, AppearanceModVisual) == 0x0060);
static_assert(offsetof(FAppearanceInstance, CurrentAppearances) == 0x0068);
static_assert(offsetof(FAppearanceInstance, PendingAppearances) == 0x0090);
static_assert(offsetof(FAppearanceInstance, CurrentHeadAppearanceMods) == 0x00B8);
static_assert(offsetof(FAppearanceInstance, PendingHeadAppearanceMods) == 0x0148);
static_assert(offsetof(FAppearanceInstance, CurrentMods) == 0x01D8);
static_assert(offsetof(FAppearanceInstance, PendingMods) == 0x0228);
static_assert(offsetof(FAppearanceInstance, CurrentBaseMeshComponentTags) == 0x0278);
static_assert(offsetof(FAppearanceInstance, CurrentFootstepData) == 0x0288);
static_assert(offsetof(FMaterialParamDescription, MaterialSlot) == 0x0000);
static_assert(offsetof(FMaterialParamDescription, MaterialParam) == 0x0008);
static_assert(offsetof(FFadeSettings, RevealEmissiveColor) == 0x0000);
static_assert(offsetof(FFadeSettings, RevealRMEA) == 0x0020);
static_assert(offsetof(FFadeSettings, RevealNormal) == 0x0028);
static_assert(offsetof(FFadeSettings, RevealBaseColor) == 0x0030);
static_assert(offsetof(UAppearanceComponent, AppearancePreset) == 0x00F8);
static_assert(offsetof(UAppearanceComponent, AppearanceGender) == 0x0100);
static_assert(offsetof(UAppearanceComponent, DefaultHead) == 0x0108);
static_assert(offsetof(UAppearanceComponent, DefaultBody) == 0x0110);
static_assert(offsetof(UAppearanceComponent, Customization) == 0x0120);
static_assert(offsetof(UAppearanceComponent, BoneModPreset) == 0x01A0);
static_assert(offsetof(UAppearanceComponent, UglyStickBoneModPreset) == 0x01A8);
static_assert(offsetof(UAppearanceComponent, BoneModifications) == 0x01B0);
static_assert(offsetof(UAppearanceComponent, AppearanceTransitionParam) == 0x0200);
static_assert(offsetof(UAppearanceComponent, CurrentBody) == 0x0208);
static_assert(offsetof(UAppearanceComponent, BodyComponentTags) == 0x0210);
static_assert(offsetof(UAppearanceComponent, AppearanceInstances) == 0x0220);
static_assert(offsetof(UAppearanceComponent, RuntimeSetScalars) == 0x0290);
static_assert(offsetof(UAppearanceComponent, RuntimeSetVectors) == 0x02E0);
static_assert(offsetof(UAppearanceComponent, BodyPartData) == 0x0388);
static_assert(offsetof(UAppearanceComponent, AttachedGoreCaps) == 0x0398);
static_assert(offsetof(UAppearanceComponent, FadeSettings) == 0x0448);
static_assert(offsetof(UAppearancePreset, Head) == 0x0038);
static_assert(offsetof(UAppearancePreset, Body) == 0x0040);
static_assert(offsetof(UAppearancePreset, Gender) == 0x0048);
static_assert(offsetof(UAppearancePreset, Customizations) == 0x0050);
static_assert(offsetof(UAppearancePreset, BoneModPreset) == 0x00D0);
static_assert(offsetof(UAppearancePreset, BoneModifications) == 0x00D8);
static_assert(offsetof(FAptitudeTextures, Uninteractable) == 0x0000);
static_assert(offsetof(FAptitudeTextures, Highlighted) == 0x0028);
static_assert(offsetof(FAptitudeTextures, Icon) == 0x0050);
static_assert(offsetof(UAptitude, Name) == 0x0030);
static_assert(offsetof(UAptitude, Description) == 0x0038);
static_assert(offsetof(UAptitude, Spells) == 0x0040);
static_assert(offsetof(UAptitude, Icons) == 0x0050);
static_assert(offsetof(UAptitude, Aptitude) == 0x00C8);
static_assert(offsetof(UAptitudeReadoutWidget, TextContainer) == 0x0300);
static_assert(offsetof(UAptitudeReadoutWidget, AptitudeNameTextBlock) == 0x0308);
static_assert(offsetof(UAptitudeReadoutWidget, AptitudeSynopsisTextBlock) == 0x0310);
static_assert(offsetof(UAptitudeReadoutWidget, AptitudeDescriptionTextBlock) == 0x0318);
static_assert(offsetof(UAptitudeSummaryWidget, Button) == 0x0278);
static_assert(offsetof(UAptitudeSummaryWidget, AptitudeTitleTextBlock) == 0x0280);
static_assert(offsetof(UAptitudeSummaryWidget, AptitudeDescTextBlock) == 0x0288);
static_assert(offsetof(UDegradableItem, DegradationState) == 0x0120);
static_assert(offsetof(UArmorBase, PickupMesh) == 0x0128);
static_assert(offsetof(UArmorBase, Dummy) == 0x01A8);
static_assert(offsetof(FArmorData, ArmorType) == 0x0040);
static_assert(offsetof(FArmorPiece, BodyParts) == 0x0000);
static_assert(offsetof(FArmorPiece, ArmorData) == 0x0020);
static_assert(offsetof(FArmorModifier, EffectedBodyParts) == 0x0000);
static_assert(offsetof(FArmorModifier, DamageTypes) == 0x0020);
static_assert(offsetof(UArmorComponent, InnateArmorValues) == 0x00E8);
static_assert(offsetof(UArmorComponent, UnarmoredArmorType) == 0x00F8);
static_assert(offsetof(UArmorComponent, InnateArmorModifiers) == 0x0100);
static_assert(offsetof(UArmorComponent, EquippedArmor) == 0x0118);
static_assert(offsetof(UArmorComponent, ArmorModifiers) == 0x0128);
static_assert(offsetof(FStatModifierDescriptionBase, RpgStat) == 0x0000);
static_assert(offsetof(FStatModifierDescriptionBase, Group) == 0x0008);
static_assert(offsetof(FStatModifierDescriptionBase, ModifierType) == 0x0009);
static_assert(offsetof(UArmorItem, ArmorModifiers) == 0x01C0);
static_assert(offsetof(UArmorItem, StatModifiers) == 0x01D0);
static_assert(offsetof(UArmorItem, ArmorSlot) == 0x01E0);
static_assert(offsetof(FNewArmorModVisual, ModAppearances) == 0x0000);
static_assert(offsetof(FArmorVisualProperties, ModdablePerMod) == 0x0008);
static_assert(offsetof(UArmorModItem, NewVisuals) == 0x01B8);
static_assert(offsetof(UArmorModItem, VisualProperties) == 0x01C8);
static_assert(offsetof(UArmorModItem, ArmorModifiers) == 0x0220);
static_assert(offsetof(UArmorModItem, StatModifiers) == 0x0230);
static_assert(offsetof(UArmorModItem, Spell) == 0x0240);
static_assert(offsetof(FNewArmorSetModVisual, ModAppearances) == 0x0000);
static_assert(offsetof(FArmorSetModSlot, ModSlot) == 0x0000);
static_assert(offsetof(FArmorSetModSlot, CurrentModClass) == 0x0008);
static_assert(offsetof(FArmorSetModSlot, EquippedMod) == 0x0010);
static_assert(offsetof(FStatModifierInstance, SourceObject) == 0x0000);
static_assert(offsetof(FStatModifierInstance, StatModifier) == 0x0010);
static_assert(offsetof(FStatInstance, Modifiers) == 0x0008);
static_assert(offsetof(FRpgStatCollection, StatMap) == 0x0010);
static_assert(offsetof(UArmorSet, BodyAppearances) == 0x01F8);
static_assert(offsetof(UArmorSet, NewArmorModVisuals) == 0x0200);
static_assert(offsetof(UArmorSet, VisualProperties) == 0x0210);
static_assert(offsetof(UArmorSet, Armor) == 0x0268);
static_assert(offsetof(UArmorSet, ArmorModSlots) == 0x0278);
static_assert(offsetof(UArmorSet, ArmorSetAudio) == 0x02D8);
static_assert(offsetof(UArmorSet, AudioPlayerSurfaceType) == 0x02E0);
static_assert(offsetof(UArmorSet, RpgStatCollection) == 0x02E8);
static_assert(offsetof(UArmorSet, MicroModTables) == 0x0350);
static_assert(offsetof(UArmorSet, EquippedMicroMod) == 0x0360);
static_assert(offsetof(UArmorSet, WearerRpgStatComponent) == 0x0368);
static_assert(offsetof(UArmorStatusEffect, Modifiers) == 0x0188);
static_assert(offsetof(FAssetInfo, Asset) == 0x0020);
static_assert(offsetof(UAssetCollection, AssetInfos) == 0x0030);
static_assert(offsetof(UModVisual, NewComponentTags) == 0x0040);
static_assert(offsetof(UModVisual, RequiredComponentTags) == 0x0050);
static_assert(offsetof(UAttachFxModVisual, ParticleSystem) == 0x0068);
static_assert(offsetof(UAttachFxModVisual, AttachSocket) == 0x0090);
static_assert(offsetof(UAttachFxModVisual, AddedComponent) == 0x0098);
static_assert(offsetof(UAttachNiagaraFxModVisual, ParticleSystem) == 0x0068);
static_assert(offsetof(UAttachNiagaraFxModVisual, AttachSocket) == 0x0090);
static_assert(offsetof(UAttachNiagaraFxModVisual, AddedComponent) == 0x0098);
static_assert(offsetof(UAttributeSliderGroupWidget, TitleTextBlock) == 0x0320);
static_assert(offsetof(UAttributeSliderGroupWidget, OptionSelector1) == 0x0328);
static_assert(offsetof(UAttributeSliderGroupWidget, OptionSelector2) == 0x0330);
static_assert(offsetof(UAttributeSliderGroupWidget, Option1ValueImage) == 0x0338);
static_assert(offsetof(UAttributeSliderGroupWidget, Option2ValueImage) == 0x0340);
static_assert(offsetof(UAttributeSliderGroupWidget, OptionOneNameLocString) == 0x0348);
static_assert(offsetof(UAttributeSliderGroupWidget, OptionOneDescriptionLocString) == 0x0350);
static_assert(offsetof(UAttributeSliderGroupWidget, OptionTwoNameLocString) == 0x0358);
static_assert(offsetof(UAttributeSliderGroupWidget, OptionTwoDescriptionLocString) == 0x0360);
static_assert(offsetof(UAttributeSliderGroupWidget, AttributeValueImages) == 0x0368);
static_assert(offsetof(UAttributeSliderPageWidget, SliderContainer) == 0x0328);
static_assert(offsetof(UAttributeSliderPageWidget, AttributeSliderGroup1) == 0x0330);
static_assert(offsetof(UAttributeSliderPageWidget, AttributeSliderGroup2) == 0x0338);
static_assert(offsetof(UAttributeSliderPageWidget, AttributeSliderGroup3) == 0x0340);
static_assert(offsetof(UAttributeSliderPageWidget, PointsRemainingTextBlock) == 0x0348);
static_assert(offsetof(UAttributeSliderPageWidget, InputLabelGroup) == 0x0350);
static_assert(offsetof(UAttributeSliderPageWidget, DescriptionPanel) == 0x0358);
static_assert(offsetof(UAttributeSummaryEntryWidget, Button) == 0x0278);
static_assert(offsetof(UAttributeSummaryEntryWidget, AttributeNameText) == 0x0280);
static_assert(offsetof(UAttributeSummaryEntryWidget, AttributeLevelText) == 0x0288);
static_assert(offsetof(UAttributeSummaryEntryWidget, AttributeValueImages) == 0x0290);
static_assert(offsetof(UAttributeSummaryEntryWidget, ValueImage) == 0x02A0);
static_assert(offsetof(UAttributeSummaryGroupWidget, AttributeOne) == 0x0278);
static_assert(offsetof(UAttributeSummaryGroupWidget, AttributeTwo) == 0x0280);
static_assert(offsetof(UAttributeSummaryWidget, MindEntry) == 0x0278);
static_assert(offsetof(UAttributeSummaryWidget, BodyEntry) == 0x0280);
static_assert(offsetof(UAttributeSummaryWidget, PersonalityEntry) == 0x0288);
static_assert(offsetof(UAttributeSummaryWidget, AttributeValueImages) == 0x0290);
static_assert(offsetof(AInteractableActor, Interactable) == 0x02D0);
static_assert(offsetof(AInteractableActor, IDComponent) == 0x02D8);
static_assert(offsetof(AInteractableActor, Floats) == 0x02E0);
static_assert(offsetof(AInteractableActor, Ints) == 0x02EC);
static_assert(offsetof(AInteractableActor, GameplayTag) == 0x02FC);
static_assert(offsetof(AAudioLogActor, AudioLogData) == 0x0338);
static_assert(offsetof(AAudioLogActor, ScriptEvents) == 0x0340);
static_assert(offsetof(FAudioLogDefinition, ConversationData) == 0x0000);
static_assert(offsetof(UAudioLogDataAsset, Name) == 0x0038);
static_assert(offsetof(UAudioLogDataAsset, DescriptionText) == 0x0040);
static_assert(offsetof(UAudioLogDataAsset, AudioLogDefinition) == 0x0048);
static_assert(offsetof(UAudioLogLibraryDataAsset, BaseGameAudioLogs) == 0x0038);
static_assert(offsetof(UAudioLogLibraryDataAsset, INX01AudioLogs) == 0x0048);
static_assert(offsetof(UAudioLogLibraryDataAsset, INX02AudioLogs) == 0x0058);
static_assert(offsetof(UGenericCollapsableList, UnseenImage) == 0x0320);
static_assert(offsetof(UGenericCollapsableList, ExpandableArea) == 0x0328);
static_assert(offsetof(UGenericCollapsableList, TitleTextBlock) == 0x0330);
static_assert(offsetof(UGenericCollapsableList, EntryContainer) == 0x0338);
static_assert(offsetof(UGenericCollapsableList, ListTitle) == 0x0340);
static_assert(offsetof(UGenericCollapsableList, ListEntryClass) == 0x0348);
static_assert(offsetof(UAudioLogList, PackageType) == 0x0368);
static_assert(offsetof(UGenericCollapsableListEntry, ActiveImage) == 0x0278);
static_assert(offsetof(UGenericCollapsableListEntry, UnseenImage) == 0x0280);
static_assert(offsetof(UGenericCollapsableListEntry, NameTextBlock) == 0x0288);
static_assert(offsetof(UGenericCollapsableListEntry, Button) == 0x0290);
static_assert(offsetof(UAudioLogManager, SoftAudioLogLibrary) == 0x0060);
static_assert(offsetof(UAudioLogManager, AudioLogLibrary) == 0x0098);
static_assert(offsetof(UAudioLogManager, InvalidAudioLogName) == 0x00B0);
static_assert(offsetof(UAudioLogManager, PauseEvent) == 0x00B8);
static_assert(offsetof(UAudioLogManager, ResumeEvent) == 0x00C0);
static_assert(offsetof(UAudioLogManager, TempAudioLogName) == 0x00C8);
static_assert(offsetof(UAudioLogManager, CurrentAudioLogPlayState) == 0x00D8);
static_assert(offsetof(UAudioLogWidget, AudioLogLibrary) == 0x0310);
static_assert(offsetof(UAudioLogWidget, LogNameTextBlock) == 0x0320);
static_assert(offsetof(UAudioLogWidget, IconOverlay) == 0x0328);
static_assert(offsetof(UAudioLogWidget, StopImage) == 0x0330);
static_assert(offsetof(UAudioLogWidget, TimerText) == 0x0338);
static_assert(offsetof(UAudioLogWidget, TrackProgressBar) == 0x0340);
static_assert(offsetof(UAudioLogWidget, InputLabelGroup) == 0x0348);
static_assert(offsetof(UAudioLogWidget, BackgroundImage) == 0x0350);
static_assert(offsetof(UAudioLogWidget, SpeakerTextBlock) == 0x0358);
static_assert(offsetof(UAudioLogWidget, MessageTextBlock) == 0x0360);
static_assert(offsetof(UAudioParamModVisual, RTPCName) == 0x0068);
static_assert(offsetof(UAudioSwitchModVisual, SwitchGroupName) == 0x0068);
static_assert(offsetof(UAudioSwitchModVisual, SwitchStateName) == 0x0070);
static_assert(offsetof(UBackgroundPanelWidget, Border) == 0x0278);
static_assert(offsetof(UBackgroundPanelWidget, BorderInner) == 0x0280);
static_assert(offsetof(UBackgroundPanelWidget, OuterTexture) == 0x0288);
static_assert(offsetof(UBackgroundPanelWidget, InnerTexture) == 0x02B0);
static_assert(offsetof(UBackgroundSplitPanelWidget, OuterTextureTop) == 0x0278);
static_assert(offsetof(UBackgroundSplitPanelWidget, OuterTextureBottom) == 0x02A0);
static_assert(offsetof(UBackgroundSplitPanelWidget, InnerTextureTop) == 0x02C8);
static_assert(offsetof(UBackgroundSplitPanelWidget, InnerTextureBottom) == 0x02F0);
static_assert(offsetof(UBaseInventoryItemManagement, ItemViewer) == 0x0338);
static_assert(offsetof(UBaseInventoryItemManagement, ItemViewerNavigation) == 0x0340);
static_assert(offsetof(UBaseInventoryItemManagement, ItemRepairClass) == 0x0348);
static_assert(offsetof(UBaseInventoryItemManagement, PageScrollBox) == 0x0350);
static_assert(offsetof(UBaseInventoryItemManagement, BreakdownPopup) == 0x0358);
static_assert(offsetof(UBaseInventoryItemManagement, ScrollingWidgetGroup) == 0x0360);
static_assert(offsetof(UBaseInventoryItemManagement, HoveredItem) == 0x0368);
static_assert(offsetof(UBaseInventoryItemManagement, CharacterRenderer) == 0x0370);
static_assert(offsetof(UBasePlayAnimEventEffect, TargetMesh) == 0x0030);
static_assert(offsetof(FBeaconProperties, DisplayText) == 0x0000);
static_assert(offsetof(FBeaconProperties, BeaconType) == 0x0008);
static_assert(offsetof(FBeaconProperties, BeaconTagWidgetClass) == 0x0010);
static_assert(offsetof(ANewBeacon, BeaconProperties) == 0x02E8);
static_assert(offsetof(UBeaconComponent, BeaconProperties) == 0x0268);
static_assert(offsetof(FBeaconData, Position) == 0x0000);
static_assert(offsetof(FBeaconData, CurrentFloor) == 0x000C);
static_assert(offsetof(FBeaconData, SpecialType) == 0x0014);
static_assert(offsetof(FBeaconData, ShipDestinationData) == 0x0018);
static_assert(offsetof(FBeaconData, BeaconProperties) == 0x0020);
static_assert(offsetof(FMapBeaconCache, BeaconData) == 0x0000);
static_assert(offsetof(UBeaconManager, BeaconCaches) == 0x0030);
static_assert(offsetof(UBeaconMapEntryWidget, ActiveQuestIcon) == 0x0300);
static_assert(offsetof(UBeaconMapEntryWidget, InactiveQuestIcon) == 0x0308);
static_assert(offsetof(UBeaconMapEntryWidget, Icon) == 0x0310);
static_assert(offsetof(UBeaconMapEntryWidget, QuestNameHBox) == 0x0318);
static_assert(offsetof(UBeaconMapEntryWidget, QuestNameTextBlock) == 0x0320);
static_assert(offsetof(UBeaconTagWidget, MainCanvasPanel) == 0x0300);
static_assert(offsetof(UBeaconTagWidget, RootBox) == 0x0308);
static_assert(offsetof(UBeaconTagWidget, BeaconDisplayText) == 0x0310);
static_assert(offsetof(UBeaconTagWidget, DistanceTextBlock) == 0x0320);
static_assert(offsetof(UBeaconTagWidget, NameTextBlock) == 0x0328);
static_assert(offsetof(UBeaconTagWidget, BeaconImage) == 0x0330);
static_assert(offsetof(UBeaconTagWidget, HiddenNameTextBlockVisibility) == 0x0338);
static_assert(offsetof(UBeaconTagWidget, OnScreenBeaconTexture) == 0x0340);
static_assert(offsetof(UBeaconTagWidget, OffScreenBeaconTexture) == 0x0348);
static_assert(offsetof(UBeaconTagWidget, OnScreenAreaBeaconTexture) == 0x0350);
static_assert(offsetof(UBeaconTagWidget, OffScreenAreaBeaconTexture) == 0x0358);
static_assert(offsetof(UBeaconTagWidget, LastMarkerType) == 0x0360);
static_assert(offsetof(FDeathClassOverride, DeathClass) == 0x0000);
static_assert(offsetof(FDeathClassOverride, CreatureType) == 0x0008);
static_assert(offsetof(FDamageDescription, DamageEventType) == 0x0000);
static_assert(offsetof(FDamageDescription, DamageType) == 0x0008);
static_assert(offsetof(FDamageDescription, SecondaryDamageType) == 0x0010);
static_assert(offsetof(FDamageDescription, GuaranteedStatusEffects) == 0x0018);
static_assert(offsetof(FDamageDescription, MeleeAttackType) == 0x0028);
static_assert(offsetof(FDamageDescription, HitReactionType) == 0x0029);
static_assert(offsetof(FDamageDescription, DeathClassOverrides) == 0x0068);
static_assert(offsetof(FDamageLevelScaler, BaseDamageCurve) == 0x0008);
static_assert(offsetof(ADestructible, InitialState) == 0x0300);
static_assert(offsetof(ADestructible, PristineStaticMesh) == 0x0308);
static_assert(offsetof(ADestructible, DamagedStaticMesh) == 0x0310);
static_assert(offsetof(ADestructible, DestroyedStaticMesh) == 0x0318);
static_assert(offsetof(ADestructible, ImpactDataSet) == 0x0320);
static_assert(offsetof(ADestructible, DamageDescription) == 0x0328);
static_assert(offsetof(ADestructible, DamageLevelScaler) == 0x03A0);
static_assert(offsetof(ADestructible, SceneComponent) == 0x0430);
static_assert(offsetof(ADestructible, IDComponent) == 0x0438);
static_assert(offsetof(ADestructible, StaticMeshComponent) == 0x0440);
static_assert(offsetof(ADestructible, HealthComponent) == 0x0448);
static_assert(offsetof(ADestructible, DetonationPoint) == 0x0450);
static_assert(offsetof(ADestructible, TargetableComponent) == 0x0458);
static_assert(offsetof(ADestructible, ShoutComponent) == 0x0460);
static_assert(offsetof(ADestructible, NavModComponent) == 0x0468);
static_assert(offsetof(ABeamLauncher, BeamDamageDescription) == 0x0478);
static_assert(offsetof(ABeamLauncher, BeamDamageLevelScaler) == 0x04F0);
static_assert(offsetof(ABeamLauncher, BeamImpactDataSet) == 0x0580);
static_assert(offsetof(ABeamLauncher, AttackFxShotOrigin) == 0x0588);
static_assert(offsetof(ABeamLauncher, AttackFxShotEnd) == 0x0590);
static_assert(offsetof(ABeamLauncher, AttackFxBeam) == 0x0598);
static_assert(offsetof(ABeamLauncher, AttackFxBeamEndParam) == 0x05A0);
static_assert(offsetof(UWeaponMode, DamageDescription) == 0x0070);
static_assert(offsetof(UWeaponMode, DamageModStat) == 0x00F8);
static_assert(offsetof(UWeaponMode, DamageTypeOverride) == 0x0108);
static_assert(offsetof(UWeaponMode, PrimaryTriggerQueue) == 0x0110);
static_assert(offsetof(UWeaponMode, QuickMeleeQueue) == 0x011C);
static_assert(offsetof(URangedMode, MaxRangeFalloutCurve) == 0x0158);
static_assert(offsetof(URangedMode, CalledShotChargeTooCloseCurve) == 0x01E8);
static_assert(offsetof(URangedMode, CalledShotChargeTooFarCurve) == 0x0270);
static_assert(offsetof(URangedMode, OverrideShootSocket) == 0x02FC);
static_assert(offsetof(URangedMode, SpreadCurve) == 0x0308);
static_assert(offsetof(URangedMode, AimAssistData) == 0x03C8);
static_assert(offsetof(URangedMode, FineAnimDoFSettings) == 0x03D0);
static_assert(offsetof(URangedMode, ScopeData) == 0x03E8);
static_assert(offsetof(URangedMode, Recoil) == 0x0458);
static_assert(offsetof(URangedMode, CustomProjectileAngles) == 0x0488);
static_assert(offsetof(URangedMode, NonStealthMeleeData) == 0x0568);
static_assert(offsetof(URangedMode, StealthMeleeData) == 0x0570);
static_assert(offsetof(UBeamMode, BeamLockedRTPCName) == 0x05D4);
static_assert(offsetof(UBeamMode, TargetHealthPercentageRTPCName) == 0x05DC);
static_assert(offsetof(UBeamMode, EmployeeBenefitsRezFailedEvent) == 0x05E8);
static_assert(offsetof(FBeardAppearance, Mesh) == 0x0040);
static_assert(offsetof(FBeardAppearance, BeardTexture) == 0x0068);
static_assert(offsetof(UBeardAppearances, BeardAppearances) == 0x0038);
static_assert(offsetof(UBeardColor, BeardRootColor) == 0x0038);
static_assert(offsetof(UBeardColor, BeardTipColor) == 0x0048);
static_assert(offsetof(AFurnitureActor, IDComponent) == 0x02B8);
static_assert(offsetof(AFurnitureActor, FurnitureComponent) == 0x02C0);
static_assert(offsetof(ABed, InteractableComponent) == 0x02D8);
static_assert(offsetof(ABed, RestSpell) == 0x02E0);
static_assert(offsetof(UBehaviorStackComponent, CurrentStateInfo) == 0x0120);
static_assert(offsetof(UBehaviorStackComponent, QueuedStateInfos) == 0x0128);
static_assert(offsetof(UBehaviorStackComponent, BehaviorStateHistories) == 0x01C0);
static_assert(offsetof(UBehaviorStackComponent, DecisionTreeRequestHistories) == 0x01D0);
static_assert(offsetof(UBehaviorStackComponent, PastStateInfos) == 0x0220);
static_assert(offsetof(FBreakBoneInfo, Target) == 0x0000);
static_assert(offsetof(FBreakBoneInfo, Source) == 0x0008);
static_assert(offsetof(FBreakBoneInfo, BoneBreakName) == 0x0010);
static_assert(offsetof(UIndianaAnimInstance, BreakBoneConfig) == 0x02D0);
static_assert(offsetof(UIndianaAnimInstance, IKBoxExtent) == 0x0454);
static_assert(offsetof(UIndianaAnimInstance, IKCollisionChannel) == 0x0460);
static_assert(offsetof(UCharacterAnimInstance, DefaultWeaponAnimationsTemplate) == 0x04A0);
static_assert(offsetof(UCharacterAnimInstance, DefaultWeaponAnimations) == 0x04A8);
static_assert(offsetof(UCharacterAnimInstance, WeaponAnimations) == 0x04B0);
static_assert(offsetof(UCharacterAnimInstance, LocomotionAnimationSet) == 0x04B8);
static_assert(offsetof(UCharacterAnimInstance, MovementState) == 0x04C0);
static_assert(offsetof(UCharacterAnimInstance, MovementModifierState) == 0x04C1);
static_assert(offsetof(UCharacterAnimInstance, CurrentHolsterState) == 0x04FE);
static_assert(offsetof(UCharacterAnimInstance, WeaponFineAimOffset) == 0x0504);
static_assert(offsetof(UCharacterAnimInstance, WeaponNormalAimOffset) == 0x0510);
static_assert(offsetof(FRandomPlayerSequenceEntryNamed, Sequence) == 0x0000);
static_assert(offsetof(FRandomPlayerSequenceEntryNamed, BlendIn) == 0x0020);
static_assert(offsetof(FLocomotionNode, Node0Sequence) == 0x0000);
static_assert(offsetof(FLocomotionNode, Node1Sequence) == 0x0008);
static_assert(offsetof(UTPVAnimInstance, DefaultRotationProperties) == 0x05A4);
static_assert(offsetof(UTPVAnimInstance, CombatRotationProperties) == 0x05AC);
static_assert(offsetof(UTPVAnimInstance, CombatMeleeRotationProperties) == 0x05B4);
static_assert(offsetof(UTPVAnimInstance, MovingRotationProperties) == 0x05BC);
static_assert(offsetof(UTPVAnimInstance, StationaryRotationType) == 0x05C4);
static_assert(offsetof(UTPVAnimInstance, AimLocation) == 0x05CC);
static_assert(offsetof(UTPVAnimInstance, EyeLocation) == 0x05F0);
static_assert(offsetof(UTPVAnimInstance, FutureLocation) == 0x064C);
static_assert(offsetof(UTPVAnimInstance, DefaultPersonality) == 0x0670);
static_assert(offsetof(UTPVAnimInstance, CurrentPersonality) == 0x0678);
static_assert(offsetof(UTPVAnimInstance, EmotionData) == 0x0680);
static_assert(offsetof(UTPVAnimInstance, OverrideHeadBlendSpace) == 0x0690);
static_assert(offsetof(UTPVAnimInstance, WalkForward) == 0x06B8);
static_assert(offsetof(UTPVAnimInstance, Emotion0BaseIdle) == 0x06C0);
static_assert(offsetof(UTPVAnimInstance, Emotion1BaseIdle) == 0x06D0);
static_assert(offsetof(UTPVAnimInstance, NCWalkStart) == 0x07C8);
static_assert(offsetof(UTPVAnimInstance, NCWalkStop) == 0x07E0);
static_assert(offsetof(UTPVAnimInstance, NCTurnInPlace) == 0x07F8);
static_assert(offsetof(UTPVAnimInstance, CTurnInPlace) == 0x0810);
static_assert(offsetof(UTPVAnimInstance, NCWalkTurn) == 0x0828);
static_assert(offsetof(UTPVAnimInstance, UpdateRateThresholds) == 0x0870);
static_assert(offsetof(UTPVAnimInstance, RagdollSnapshot) == 0x08D0);
static_assert(offsetof(UTPVAnimInstance, GetUpAxis) == 0x0908);
static_assert(offsetof(UTPVAnimInstance, ForwardAxis) == 0x0909);
static_assert(offsetof(UTPVAnimInstance, ChestBone) == 0x090C);
static_assert(offsetof(UTPVAnimInstance, HipBone) == 0x0914);
static_assert(offsetof(UTPVAnimInstance, GetUpFromFaceDownPose) == 0x0928);
static_assert(offsetof(UTPVAnimInstance, GetUpFromFaceUpPose) == 0x0938);
static_assert(offsetof(FBipedWeaponAnims, CombatAimBlendSpace) == 0x0000);
static_assert(offsetof(FBipedWeaponAnims, HobbledWalkForward) == 0x0008);
static_assert(offsetof(FBipedWeaponAnims, CombatWalkForward) == 0x0018);
static_assert(offsetof(FBipedWeaponAnims, CombatRunForward) == 0x0028);
static_assert(offsetof(FBipedWeaponAnims, ForwardBlendSpace) == 0x0038);
static_assert(offsetof(FBipedWeaponAnims, RunForwardBlendSpace) == 0x0040);
static_assert(offsetof(FBipedWeaponAnims, CombatWalkBackward) == 0x0048);
static_assert(offsetof(FBipedWeaponAnims, CombatRunBackward) == 0x0058);
static_assert(offsetof(FBipedWeaponAnims, BackwardBlendSpace) == 0x0068);
static_assert(offsetof(FBipedWeaponAnims, RunBackwardBlendSpace) == 0x0070);
static_assert(offsetof(FBipedWeaponAnims, CombatWalkLeft) == 0x0078);
static_assert(offsetof(FBipedWeaponAnims, CombatRunLeft) == 0x0088);
static_assert(offsetof(FBipedWeaponAnims, LeftBlendSpace) == 0x0098);
static_assert(offsetof(FBipedWeaponAnims, RunLeftBlendSpace) == 0x00A0);
static_assert(offsetof(FBipedWeaponAnims, CombatWalkRight) == 0x00A8);
static_assert(offsetof(FBipedWeaponAnims, CombatRunRight) == 0x00B8);
static_assert(offsetof(FBipedWeaponAnims, RightBlendSpace) == 0x00C8);
static_assert(offsetof(FBipedWeaponAnims, RunRightBlendSpace) == 0x00D0);
static_assert(offsetof(FBipedWeaponAnims, CombatCrouchStartSequence) == 0x00D8);
static_assert(offsetof(FBipedWeaponAnims, CombatCrouchIdleSequence) == 0x00E0);
static_assert(offsetof(FBipedWeaponAnims, CombatCrouchEndSequence) == 0x00E8);
static_assert(offsetof(FBipedWeaponAnims, ReadyFireArmPose) == 0x00F0);
static_assert(offsetof(FBipedWeaponAnims, IdleFireArmPose) == 0x00F8);
static_assert(offsetof(FBipedWeaponAnims, WeaponDownWalkArm) == 0x0100);
static_assert(offsetof(FBipedWeaponAnims, WeaponDownRunArm) == 0x0108);
static_assert(offsetof(FBipedWeaponAnims, BlockStartSequence) == 0x0110);
static_assert(offsetof(FBipedWeaponAnims, BlockIdleSequence) == 0x0118);
static_assert(offsetof(FBipedWeaponAnims, JumpSequence) == 0x0120);
static_assert(offsetof(FBipedWeaponAnims, FallSequence) == 0x0128);
static_assert(offsetof(FBipedWeaponAnims, LandSequence) == 0x0130);
static_assert(offsetof(FBipedWeaponAnims, LowGravJumpSequence) == 0x0138);
static_assert(offsetof(FBipedWeaponAnims, LowGravFallSequence) == 0x0140);
static_assert(offsetof(FBipedWeaponAnims, LowGravLandSequence) == 0x0148);
static_assert(offsetof(FBipedWeaponAnims, SearchingStartSequence) == 0x0150);
static_assert(offsetof(FBipedPersonalityAnims, NonCombatAimBlendSpace) == 0x0000);
static_assert(offsetof(FBipedPersonalityAnims, WalkForward) == 0x0008);
static_assert(offsetof(FBipedPersonalityAnims, WalkBackward) == 0x0010);
static_assert(offsetof(FBipedPersonalityAnims, RunForward) == 0x0018);
static_assert(offsetof(FBipedPersonalityAnims, RunBackward) == 0x0020);
static_assert(offsetof(FBipedPersonalityAnims, LowGravRunForward) == 0x0028);
static_assert(offsetof(FBipedPersonalityAnims, LowGravRunBackward) == 0x0030);
static_assert(offsetof(FBipedPersonalityAnims, HandPose) == 0x0038);
static_assert(offsetof(FBipedPersonalityAnims, WalkArmPose) == 0x0040);
static_assert(offsetof(FBipedPersonalityAnims, RunArmPose) == 0x0048);
static_assert(offsetof(FBipedPersonalityAnims, JumpIntro) == 0x0050);
static_assert(offsetof(FBipedPersonalityAnims, JumpLoop) == 0x0058);
static_assert(offsetof(FBipedPersonalityAnims, JumpLand) == 0x0060);
static_assert(offsetof(FBipedPersonalityAnims, LowGravJumpIntro) == 0x0068);
static_assert(offsetof(FBipedPersonalityAnims, LowGravJumpLoop) == 0x0070);
static_assert(offsetof(FBipedPersonalityAnims, LowGravJumpLand) == 0x0078);
static_assert(offsetof(FBipedPersonalityAnims, CrouchIdleStart) == 0x0080);
static_assert(offsetof(FBipedPersonalityAnims, CrouchIdle) == 0x0088);
static_assert(offsetof(FBipedPersonalityAnims, CrouchIdleEnd) == 0x0090);
static_assert(offsetof(FBipedPersonalityAnims, CrouchWalkStart) == 0x0098);
static_assert(offsetof(FBipedPersonalityAnims, CrouchWalk) == 0x00A0);
static_assert(offsetof(FBipedPersonalityAnims, CrouchWalkEnd) == 0x00A8);
static_assert(offsetof(FBipedPersonalityAnims, HeadAdditiveLayer) == 0x00B0);
static_assert(offsetof(FLoopRandomSequence, LoopSequences) == 0x0000);
static_assert(offsetof(FLoopRandomSequence, StartSequence) == 0x0010);
static_assert(offsetof(FLoopRandomSequence, StopSequence) == 0x0018);
static_assert(offsetof(FDiscoveredAnims, TalkingSequences) == 0x0000);
static_assert(offsetof(FDiscoveredAnims, BaseIdle) == 0x0050);
static_assert(offsetof(FDiscoveredAnims, DialogIdles) == 0x0060);
static_assert(offsetof(FDiscoveredAnims, IdleStates) == 0x0070);
static_assert(offsetof(FDiscoveredAnims, StartSequence) == 0x0080);
static_assert(offsetof(FDiscoveredAnims, WalkForwardSequence) == 0x0088);
static_assert(offsetof(FTalkingIdleEntry, Name) == 0x0000);
static_assert(offsetof(FTalkingIdleEntry, StartSequence) == 0x0008);
static_assert(offsetof(FTalkingIdleEntry, TalkingSequences) == 0x0010);
static_assert(offsetof(FTalkingIdleEntry, Idle) == 0x0060);
static_assert(offsetof(FTalkingIdleEntry, DialogIdle) == 0x0070);
static_assert(offsetof(FTalkingIdleEntry, IdleStates) == 0x0080);
static_assert(offsetof(UBipedAnimInstance, EyePoseAsset) == 0x0958);
static_assert(offsetof(UBipedAnimInstance, HipOffset) == 0x0964);
static_assert(offsetof(UBipedAnimInstance, HipRotation) == 0x0970);
static_assert(offsetof(UBipedAnimInstance, SpineCounterRotation) == 0x097C);
static_assert(offsetof(UBipedAnimInstance, BipedWeaponAnims) == 0x0A70);
static_assert(offsetof(UBipedAnimInstance, WalkForwardWithEmotion) == 0x0BC8);
static_assert(offsetof(UBipedAnimInstance, PersonalityIdleAdditive) == 0x0BD0);
static_assert(offsetof(UBipedAnimInstance, BipedPersonalityAnim) == 0x0BE8);
static_assert(offsetof(UBipedAnimInstance, SearchingIdleSequences) == 0x0CA0);
static_assert(offsetof(UBipedAnimInstance, DeadBodySearchSequences) == 0x0CB0);
static_assert(offsetof(UBipedAnimInstance, CombatIdleSequences) == 0x0CC0);
static_assert(offsetof(UBipedAnimInstance, DiscoveredPersonality) == 0x0CE0);
static_assert(offsetof(UBipedAnimInstance, DiscoveredDialog) == 0x0D70);
static_assert(offsetof(UBipedAnimInstance, DiscoveredEmotion0) == 0x0E00);
static_assert(offsetof(UBipedAnimInstance, DiscoveredEmotion1) == 0x0E90);
static_assert(offsetof(UBipedAnimInstance, CurrentBaseIdle) == 0x0F88);
static_assert(offsetof(UBipedAnimInstance, CurrentIdleLoopSequence) == 0x0F98);
static_assert(offsetof(UBipedAnimInstance, CurrentBarkTalkSequence) == 0x0FC0);
static_assert(offsetof(UBipedAnimInstance, CurrentDialogIdle) == 0x0FE8);
static_assert(offsetof(UBipedAnimInstance, CurrentDialogIdleLoopSequence) == 0x0FF8);
static_assert(offsetof(UBipedAnimInstance, CurrentTalkSequence) == 0x1020);
static_assert(offsetof(UBipedAnimInstance, CurrentEmotion0IdleSequences) == 0x1048);
static_assert(offsetof(UBipedAnimInstance, CurrentEmotion0TalkSequence) == 0x1070);
static_assert(offsetof(UBipedAnimInstance, Emotion0DialogIdle) == 0x1098);
static_assert(offsetof(UBipedAnimInstance, CurrentEmotion0StartSequence) == 0x10A8);
static_assert(offsetof(UBipedAnimInstance, CurrentEmotion1IdleSequences) == 0x10B0);
static_assert(offsetof(UBipedAnimInstance, CurrentEmotion1TalkSequence) == 0x10D8);
static_assert(offsetof(UBipedAnimInstance, Emotion1DialogIdle) == 0x1100);
static_assert(offsetof(UBipedAnimInstance, CurrentEmotion1StartSequence) == 0x1110);
static_assert(offsetof(UBipedAnimInstance, GetUpFromFaceDownPoseWeapon) == 0x1148);
static_assert(offsetof(UBipedAnimInstance, GetUpFromFaceUpPoseWeapon) == 0x1158);
static_assert(offsetof(UBipedAnimInstance, HeadAdditiveLayer) == 0x1170);
static_assert(offsetof(UBipedAnimInstance, HeadAdditiveLayerEmotion0) == 0x1178);
static_assert(offsetof(UBipedAnimInstance, HeadAdditiveLayerEmotion1) == 0x1180);
static_assert(offsetof(UBipedAnimInstance, HeadAdditiveLayerEmotionStart0) == 0x1188);
static_assert(offsetof(UBipedAnimInstance, HeadAdditiveLayerEmotionStart1) == 0x1190);
static_assert(offsetof(UBipedAnimInstance, TalkingOverride) == 0x11B0);
static_assert(offsetof(UBipedAnimInstance, PendingTalkingOverride) == 0x1248);
static_assert(offsetof(UBlockComponent, BlockProperties) == 0x0128);
static_assert(offsetof(UBlockComponent, BlockingParameterName) == 0x0178);
static_assert(offsetof(UBlockComponent, BlockingHitParameterName) == 0x0188);
static_assert(offsetof(UBlockComponent, BlockingHitCurve) == 0x0190);
static_assert(offsetof(FAppearanceGoreCap, BodyParts) == 0x0000);
static_assert(offsetof(FAppearanceGoreCap, UpperCap) == 0x0020);
static_assert(offsetof(FAppearanceGoreCap, LowerCap) == 0x0048);
static_assert(offsetof(FAppearanceGoreCap, SkinnedCap) == 0x0070);
static_assert(offsetof(FBodyAppearance, BodyMesh) == 0x0040);
static_assert(offsetof(FBodyAppearance, GoreCaps) == 0x00B8);
static_assert(offsetof(FBodyAppearance, Footsteps) == 0x00C8);
static_assert(offsetof(UBodyAppearances, BodyAppearances) == 0x0040);
static_assert(offsetof(UBodyAppearances, BodyType) == 0x0050);
static_assert(offsetof(FSpellEffectApplyChance, BodyParts) == 0x0000);
static_assert(offsetof(FSpellEffectApplyChance, SpellApplyChances) == 0x0020);
static_assert(offsetof(UBodyLocationSpellAsset, LocationSpellChanceMap) == 0x0038);
static_assert(offsetof(UBodyLocationSpellAsset, WeaponHitBodyPartTTD) == 0x0048);
static_assert(offsetof(UBodyLocationSpellAsset, ImmuneCreatures) == 0x0050);
static_assert(offsetof(FBodyPart, PhATBodySetupBoneName) == 0x0000);
static_assert(offsetof(FBodyPart, BodyPartTag) == 0x000C);
static_assert(offsetof(FBodyPart, TransformSocketName) == 0x0014);
static_assert(offsetof(FBodyPart, DirectionalBodyParts) == 0x0020);
static_assert(offsetof(FBodyPart, SeverBoneNameOverride) == 0x0034);
static_assert(offsetof(FBodyPart, AttachedSocket) == 0x003C);
static_assert(offsetof(FBodyPart, DetachedSocket) == 0x0044);
static_assert(offsetof(UBodyPartData, BodyParts) == 0x0038);
static_assert(offsetof(UBoneModStatusEffect, BoneMods) == 0x0188);
static_assert(offsetof(UBotAnimInstance, LocomotionTurnInPlace) == 0x0950);
static_assert(offsetof(UBotAnimInstance, CombatTurnInPlace) == 0x0960);
static_assert(offsetof(UBotAnimInstance, ForwardBlendSpace) == 0x0970);
static_assert(offsetof(UBotAnimInstance, LeftBlendSpace) == 0x0978);
static_assert(offsetof(UBotAnimInstance, RightBlendSpace) == 0x0980);
static_assert(offsetof(UBotAnimInstance, BackBlendSpace) == 0x0988);
static_assert(offsetof(UBotAnimInstance, HipOffset) == 0x0A38);
static_assert(offsetof(UBrandDataAsset, Name) == 0x0038);
static_assert(offsetof(UBrandDataAsset, Image) == 0x0040);
static_assert(offsetof(UBrandDataAsset, SmallBrandImage) == 0x0068);
static_assert(offsetof(UBrandDataAsset, LargeTutorialImage) == 0x0090);
static_assert(offsetof(UBrandDataAsset, SmallTutorialImage) == 0x00B8);
static_assert(offsetof(UBreakdownPopupWidget, BreakdownItemsTextBox) == 0x0300);
static_assert(offsetof(UBreakdownPopupWidget, PartsImage) == 0x0308);
static_assert(offsetof(UBreakdownPopupWidget, WeaponPartTexture) == 0x0310);
static_assert(offsetof(UBreakdownPopupWidget, ArmorPartTexture) == 0x0318);
static_assert(offsetof(UBrows, BrowsMask) == 0x0038);
static_assert(offsetof(UBrows, BrowsNormal) == 0x0040);
static_assert(offsetof(UBTDecorator_IndianaConditional, AbortMode) == 0x0070);
static_assert(offsetof(UBTDecorator_IndianaConditional, AbortCondition) == 0x0071);
static_assert(offsetof(FCompositeConditionalElement, Conditional) == 0x0000);
static_assert(offsetof(FCompositeConditionalElement, LogicalOperator) == 0x0008);
static_assert(offsetof(UBT_Con_Composite, Conditionals) == 0x0078);
static_assert(offsetof(FAISelector_Location, AILocation) == 0x0000);
static_assert(offsetof(UBT_Con_General_IsLocationValid, LocationSelector) == 0x0078);
static_assert(offsetof(UBT_Con_Cover_IsCoverType, CoverType) == 0x0078);
static_assert(offsetof(UBT_Con_Furniture_IsCurrentBehaviorState, FurnitureState) == 0x0078);
static_assert(offsetof(FAISelector_Actor, AIActor) == 0x0000);
static_assert(offsetof(UBT_Con_General_IsSeen, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsAimingPossible, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsFollowTargetValid, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsFollower, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsOnRails, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_HasEquippedWeapon, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsInRange, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsInRange, LocationSelector) == 0x0080);
static_assert(offsetof(UBT_Con_General_IsInRange, MinRangeSelector) == 0x0090);
static_assert(offsetof(UBT_Con_General_IsInRange, MaxRangeSelector) == 0x00A0);
static_assert(offsetof(UBT_Con_General_CanMoveCloserOnRails, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_CanMoveCloserOnRails, LocationSelector) == 0x0080);
static_assert(offsetof(UBT_Con_General_ClosestVantageIsInRange, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_ClosestVantageIsInRange, LocationSelector) == 0x0080);
static_assert(offsetof(UBT_Con_General_ClosestVantageIsInRange, MinRangeSelector) == 0x0090);
static_assert(offsetof(UBT_Con_General_ClosestVantageIsInRange, MaxRangeSelector) == 0x00A0);
static_assert(offsetof(UBT_Con_General_IsFacingTarget, MaxAngleSelector) == 0x0080);
static_assert(offsetof(FAISelector_Bool, AIBool) == 0x0000);
static_assert(offsetof(UBT_Con_General_CheckBooleanSelector, BooleanSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsTimeSinceBehaviorState, BehaviorState) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsTimeSinceBehaviorState, Operator) == 0x0079);
static_assert(offsetof(UBT_Con_General_IsTimeSinceBehaviorState, TimeSelector) == 0x0080);
static_assert(offsetof(UBT_Con_General_TestContinuousSeenTime, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_TestContinuousSeenTime, ComparisonOp) == 0x0084);
static_assert(offsetof(UBT_Con_General_IsBehaviorStateComplete, CompletionType) == 0x0078);
static_assert(offsetof(UBT_Con_General_WithInDistance, StartLocation) == 0x0078);
static_assert(offsetof(UBT_Con_General_WithInDistance, EndLocation) == 0x0080);
static_assert(offsetof(UBT_Con_General_IsValidHealTarget, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsPrimaryTargetStimulusType, StimulusType) == 0x0078);
static_assert(offsetof(UBT_Con_General_Random, RandomValueSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsAlertStateTimeRemainingEstimateGreaterThan, TimeRemainingThresholdSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_Dot, StartLinePointA) == 0x0078);
static_assert(offsetof(UBT_Con_General_Dot, EndLinePointA) == 0x0080);
static_assert(offsetof(UBT_Con_General_Dot, StartLinePointB) == 0x0088);
static_assert(offsetof(UBT_Con_General_Dot, EndLinePointB) == 0x0090);
static_assert(offsetof(UBT_Con_General_HasVantageOnActor, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_SimpleIsSeen, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsCreatureType, ActorSelector) == 0x0078);
static_assert(offsetof(UBT_Con_General_IsCreatureType, CreatureTypes) == 0x0080);
static_assert(offsetof(UBT_Con_Melee_IsSlottingState, State) == 0x0078);
static_assert(offsetof(UBT_Con_Melee_IsRecoveryType, RecoveryType) == 0x0078);
static_assert(offsetof(UBTDecorator_IndianaScript, ScriptExecutionType) == 0x0070);
static_assert(offsetof(UBT_Scr_SetMovementState, EnabledSelector) == 0x0070);
static_assert(offsetof(UBT_Scr_SetMovementState, MovementState) == 0x0078);
static_assert(offsetof(UBT_Scr_SetMovementState, DisabledMovementState) == 0x007A);
static_assert(offsetof(UBT_Scr_SetMovementState_Distance, ActorSelector) == 0x0080);
static_assert(offsetof(UBT_Scr_SetMovementState_Distance, LocationSelector) == 0x0088);
static_assert(offsetof(UBT_Scr_SetMovementState_Distance, DistanceThresholdSelector) == 0x0090);
static_assert(offsetof(UBT_Scr_CalledShot_CameraStep, CameraStep) == 0x0078);
static_assert(offsetof(UBT_Scr_General_SetAnimationParameter, Parameter) == 0x0070);
static_assert(offsetof(UBT_Scr_General_RequestPrimaryTarget, RequestType) == 0x0078);
static_assert(offsetof(UBT_Scr_General_SetBehaviorStateComplete, EnabledSelector) == 0x0078);
static_assert(offsetof(UBT_Scr_General_SetBehaviorStateComplete, CompletionType) == 0x0080);
static_assert(offsetof(UBT_Scr_General_TriggerChatterEvent, Event) == 0x0078);
static_assert(offsetof(UBT_Scr_General_ClearTargetDetection, EnabledSelector) == 0x0078);
static_assert(offsetof(UBT_Scr_General_CancelCompanionCommandAttack, EnabledSelector) == 0x0078);
static_assert(offsetof(UBT_Scr_General_SetCanBump, EnabledSelector) == 0x0070);
static_assert(offsetof(UBT_Scr_General_LockAllRotations, EnabledSelector) == 0x0070);
static_assert(offsetof(FAISelector_Int, AIInt) == 0x0000);
static_assert(offsetof(UBT_Scr_General_SwitchContext, ContextSelector) == 0x0078);
static_assert(offsetof(UBT_Scr_General_StartBehaviorStateCountdown, CountDownTimeSelector) == 0x0078);
static_assert(offsetof(UBT_Scr_General_Teleport, TeleportLocationSelector) == 0x0078);
static_assert(offsetof(UBT_Scr_General_Teleport, TeleportRotationSelector) == 0x0080);
static_assert(offsetof(UBT_Scr_General_SetAlertStateMinDuration, MinDurationSelector) == 0x0078);
static_assert(offsetof(UBT_Scr_General_RegisterAreaRange, LocationSelector) == 0x0070);
static_assert(offsetof(UBT_Scr_General_SetBehaviorNavigationSettings, EnabledSelector) == 0x0070);
static_assert(offsetof(UBT_Scr_General_SetOverrideBehaviorAnimation, AnimState) == 0x0070);
static_assert(offsetof(UBT_Scr_General_SetTogglableAction, EnabledSelector) == 0x0070);
static_assert(offsetof(UBT_Scr_General_SetTogglableAction, TogglableAction) == 0x0078);
static_assert(offsetof(UBTService_Chatter, ChatterEventType) == 0x0078);
static_assert(offsetof(UBTService_EventFirer_TargetLostCover, InitiallySeenTargetLostTimeSelector) == 0x0078);
static_assert(offsetof(UBTService_EventFirer_TargetLostCover, InitiallyUnseenTargetLostTimeSelector) == 0x0080);
static_assert(offsetof(UBTService_EventFirer_TargetLostRanged, EnabledSelector) == 0x0078);
static_assert(offsetof(UBTService_EventFirer_TargetLostRanged, InitiallySeenTargetLostTimeSelector) == 0x0080);
static_assert(offsetof(UBTService_EventFirer_TargetLostRanged, InitiallyUnseenTargetLostTimeSelector) == 0x0088);
static_assert(offsetof(UBTService_EventFirer_TargetLostRanged, TargetLostResponse) == 0x0090);
static_assert(offsetof(UBTService_EventFirer_UnsafeCover, LocationSelector) == 0x0080);
static_assert(offsetof(UBTService_EventFirer_UnsafeCover, UnsafeRadiusTarget) == 0x0090);
static_assert(offsetof(FAISelector_UObject, Object) == 0x0000);
static_assert(offsetof(UBTService_EventFirer_SEComplete, DisableStatusEffectSelector) == 0x0078);
static_assert(offsetof(UBTService_EventFirer_IsNotSeen, ActorSelector) == 0x0078);
static_assert(offsetof(UBTService_EventFirer_Generic, GameplayTag) == 0x0078);
static_assert(offsetof(FAISelector_FiringPattern, AIFiringPattern) == 0x0000);
static_assert(offsetof(UBTService_General_FiringPattern, FiringPatternSelector) == 0x0078);
static_assert(offsetof(UBTService_General_FiringPattern, EnabledSelector) == 0x0080);
static_assert(offsetof(UBTService_General_FiringPattern, ScopedEnabled) == 0x0088);
static_assert(offsetof(UBTService_General_FiringPattern, PrePauseTimeSelector) == 0x0090);
static_assert(offsetof(UBTService_General_FiringPattern, SuppressionTimeSelector) == 0x0098);
static_assert(offsetof(UBTService_General_FiringPattern, PauseTimeFuzzSelector) == 0x00A0);
static_assert(offsetof(UBTService_General_FiringPattern, CompleteTypeSelector) == 0x00A8);
static_assert(offsetof(UBTService_General_FiringPattern, CalledShotFireIndexSelector) == 0x00B8);
static_assert(offsetof(UBTService_General_FocusAt, HeadTargetSelector) == 0x0080);
static_assert(offsetof(UBTService_General_FocusAt, HeadTargetActorSelector) == 0x0088);
static_assert(offsetof(UBTService_General_FocusAt, BodyTargetSelector) == 0x0090);
static_assert(offsetof(UBTService_General_FocusAt, BodyTargetActorSelector) == 0x0098);
static_assert(offsetof(UBTService_General_FocusAt, EyesTargetSelector) == 0x00A0);
static_assert(offsetof(UBTService_General_FocusAt, EyesTargetActorSelector) == 0x00A8);
static_assert(offsetof(UBTService_General_FocusAt, WeaponAimTargetSelector) == 0x00B0);
static_assert(offsetof(UBTService_General_FocusAt, WeaponAimTargetActorSelector) == 0x00B8);
static_assert(offsetof(UBTService_General_FocusAt, EnabledSelector) == 0x00C0);
static_assert(offsetof(UBTService_General_FocusAt, ShouldExitCondition) == 0x00C8);
static_assert(offsetof(UBTService_RequestPrimaryTarget, EnabledSelector) == 0x0078);
static_assert(offsetof(UBTService_RequestPrimaryTarget, RequestType) == 0x0080);
static_assert(offsetof(UBTService_SpellTargetService, Target) == 0x0078);
static_assert(offsetof(UBTTask_IndianaBase, SaveGameTaskGuid) == 0x0080);
static_assert(offsetof(UBTTask_Block, Delay) == 0x0098);
static_assert(offsetof(UBTTask_Disable, DisableStatusEffectSelector) == 0x00E0);
static_assert(offsetof(UBTTask_Dodge, DodgeDirection) == 0x0090);
static_assert(offsetof(UBTTask_Indiana_PlayAnimation, AnimationToPlay) == 0x0090);
static_assert(offsetof(UBTTask_Indiana_PlayAnimation, LoopCondition) == 0x00A0);
static_assert(offsetof(FAISelector_BoolWriteable, AIBool) == 0x0000);
static_assert(offsetof(UBTTask_IndianaMoveTo, ActorSelector) == 0x0090);
static_assert(offsetof(UBTTask_IndianaMoveTo, LocationSelector) == 0x0098);
static_assert(offsetof(UBTTask_IndianaMoveTo, BlockedResponse) == 0x00A0);
static_assert(offsetof(UBTTask_IndianaMoveTo, FailResponse) == 0x00A1);
static_assert(offsetof(UBTTask_IndianaMoveTo, PartialPathResponse) == 0x00A2);
static_assert(offsetof(UBTTask_IndianaMoveTo, AcceptableRadiusSelector) == 0x00A8);
static_assert(offsetof(UBTTask_IndianaMoveTo, IsMoveToSuccessful) == 0x00B0);
static_assert(offsetof(UBTTask_IndianaMoveTo, FilterClass) == 0x00B8);
static_assert(offsetof(FAISelector_ActorWritable, AIActor) == 0x0000);
static_assert(offsetof(FAISelector_LocationWritable, AILocation) == 0x0000);
static_assert(offsetof(UBTTask_IndianaRunEQSQuery, EQSRequest) == 0x0090);
static_assert(offsetof(UBTTask_IndianaRunEQSQuery, ActorSelector) == 0x0098);
static_assert(offsetof(UBTTask_IndianaRunEQSQuery, LocationSelector) == 0x00A0);
static_assert(offsetof(UBTTask_IndianaRunEQSQuery, EQSSelector) == 0x00A8);
static_assert(offsetof(UBTTask_IndianaWait, WaitTimeSelector) == 0x0098);
static_assert(offsetof(UBTTask_IndianaWait, WaitExitConditionSelector) == 0x00A0);
static_assert(offsetof(UBTTask_MeleeAttack, MeleeActionSelector) == 0x0090);
static_assert(offsetof(UBTTask_MeleeAttack, UseAdaptiveRootMotionSelector) == 0x0098);
static_assert(offsetof(UBTTask_MeleeAttack, AdapativeRootMotionMinDistanceSelector) == 0x00A0);
static_assert(offsetof(UBTTask_MeleeAttack, RecoveryTimeSelector) == 0x00B0);
static_assert(offsetof(FAISelector_Action, AIAction) == 0x0000);
static_assert(offsetof(UBTTask_RunActions, ActionSelector) == 0x0090);
static_assert(offsetof(UBTTask_RunActions, InfiniteDurationSelector) == 0x0098);
static_assert(offsetof(UBTTask_RunRandomEQSQuery, RandomQuerySet) == 0x00C0);
static_assert(offsetof(UBTTask_SwitchWeapon, InstantSelector) == 0x0090);
static_assert(offsetof(UBTTask_SwitchWeapon, WeaponSlotSelector) == 0x0098);
static_assert(offsetof(UBTTask_TriggerPatrolNodeEvent, ActorSelector) == 0x0090);
static_assert(offsetof(FSlateBrushContainer, BrushAsset) == 0x0000);
static_assert(offsetof(FSlateBrushContainer, Brush) == 0x0008);
static_assert(offsetof(FSizeConstraint, Minimum) == 0x0004);
static_assert(offsetof(FSizeConstraint, Snap) == 0x000C);
static_assert(offsetof(FIndianaTextBlockStyle, ImportAsset) == 0x0278);
static_assert(offsetof(FIndianaTextBlockStyle, ColorOverride) == 0x0280);
static_assert(offsetof(FIndianaButtonStyle, NormalBrush) == 0x0008);
static_assert(offsetof(FIndianaButtonStyle, HoveredBrush) == 0x0098);
static_assert(offsetof(FIndianaButtonStyle, PressedBrush) == 0x0128);
static_assert(offsetof(FIndianaButtonStyle, FocusedBrush) == 0x01B8);
static_assert(offsetof(FIndianaButtonStyle, SelectedNormalBrush) == 0x0248);
static_assert(offsetof(FIndianaButtonStyle, SelectedHoveredBrush) == 0x02D8);
static_assert(offsetof(FIndianaButtonStyle, SelectedPressedBrush) == 0x0368);
static_assert(offsetof(FIndianaButtonStyle, SelectedFocusedBrush) == 0x03F8);
static_assert(offsetof(FIndianaButtonStyle, DisabledBrush) == 0x0488);
static_assert(offsetof(FIndianaButtonStyle, ContentColor) == 0x0518);
static_assert(offsetof(FIndianaButtonStyle, ButtonColor) == 0x0528);
static_assert(offsetof(FIndianaButtonStyle, NormalPadding) == 0x0538);
static_assert(offsetof(FIndianaButtonStyle, PressedPadding) == 0x0548);
static_assert(offsetof(FIndianaButtonStyle, SizeConstraints) == 0x0558);
static_assert(offsetof(FIndianaButtonStyle, TextBlockStyle) == 0x0570);
static_assert(offsetof(FIndianaButtonStyle, PressedSoundOverride) == 0x07F8);
static_assert(offsetof(FIndianaButtonStyle, HoveredSoundOverride) == 0x0800);
static_assert(offsetof(FIndianaButtonStyle, FocusedSoundOverride) == 0x0808);
static_assert(offsetof(FIndianaButtonStyle, SelectedPressedSoundOverride) == 0x0810);
static_assert(offsetof(FIndianaButtonStyle, SelectedHoveredSoundOverride) == 0x0818);
static_assert(offsetof(FIndianaButtonStyle, SelectedFocusedSoundOverride) == 0x0820);
static_assert(offsetof(UButtonBase, ToolTipClass) == 0x0158);
static_assert(offsetof(UButtonBase, TextReference) == 0x0160);
static_assert(offsetof(UButtonBase, ButtonType) == 0x0168);
static_assert(offsetof(UButtonBase, ClickMethod) == 0x016F);
static_assert(offsetof(UButtonBase, TouchMethod) == 0x0170);
static_assert(offsetof(UButtonBase, WidgetStyle) == 0x0218);
static_assert(offsetof(UButtonBase, HitTestMargin) == 0x0A40);
static_assert(offsetof(UButtonBase, AdvancedHitTexture) == 0x0A58);
static_assert(offsetof(UButtonBaseContainerWidget, Button) == 0x0278);
static_assert(offsetof(UButtonBaseContainerWidget, TextBlock) == 0x0280);
static_assert(offsetof(UButtonBaseContainerWidget, InterestIcon) == 0x0288);
static_assert(offsetof(UButtonBaseContainerWidget, ButtonSizeBox) == 0x0290);
static_assert(offsetof(UButtonBaseContainerWidget, TextReference) == 0x0298);
static_assert(offsetof(UButtonBaseSlot, Padding) == 0x0040);
static_assert(offsetof(UButtonBaseSlot, HorizontalAlignment) == 0x0050);
static_assert(offsetof(UButtonBaseSlot, VerticalAlignment) == 0x0051);
static_assert(offsetof(UIndianaButtonWidgetStyle, ButtonStyle) == 0x0038);
static_assert(offsetof(UCalledShotBehaviorStateInfo, ApplyEventListener) == 0x0178);
static_assert(offsetof(UCalledShotBehaviorStateInfo, CalledShotData) == 0x0180);
static_assert(offsetof(UDecisionTreeEQSRequestData, EQSRequest) == 0x0060);
static_assert(offsetof(UDecisionTreeEQSRequestData, BackupEQSRequests) == 0x0068);
static_assert(offsetof(UDecisionTreeEQSRequestData, InfoType) == 0x0078);
static_assert(offsetof(UCalledShotCameraComponent, AttackerAndTargetCloseCameras) == 0x0150);
static_assert(offsetof(UCalledShotCameraComponent, AttackerAndTargetFarCameras) == 0x0160);
static_assert(offsetof(UCalledShotCameraComponent, AttackerCloseCameras) == 0x0170);
static_assert(offsetof(UCalledShotCameraComponent, AttackerFarCameras) == 0x0180);
static_assert(offsetof(UCalledShotCameraComponent, TargetCloseCameras) == 0x0190);
static_assert(offsetof(UCalledShotCameraComponent, TargetFarCameras) == 0x01A0);
static_assert(offsetof(UCalledShotCameraComponent, ImpactCameraShake) == 0x01B0);
static_assert(offsetof(FTimeDilationData, Priority) == 0x0000);
static_assert(offsetof(FTimeDilationData, Type) == 0x0001);
static_assert(offsetof(FTimeDilationData, TimeDilationCurve) == 0x0010);
static_assert(offsetof(UCalledShotData, WeaponClass) == 0x0038);
static_assert(offsetof(UCalledShotData, Spell) == 0x0040);
static_assert(offsetof(UCalledShotData, SocketToTarget) == 0x0048);
static_assert(offsetof(UCalledShotData, UIBackgroundAbilityIcon) == 0x0050);
static_assert(offsetof(UCalledShotData, UIAbilityIcon) == 0x0058);
static_assert(offsetof(UCalledShotData, TimeDilationData) == 0x0068);
static_assert(offsetof(UCalledShotData, AlternativeSpell) == 0x0110);
static_assert(offsetof(UCalledShotData, AlternativeSocketToTarget) == 0x0118);
static_assert(offsetof(UCalledShotData, SpreadRadiusVsDistanceCurve) == 0x0130);
static_assert(offsetof(UCalledShotData, FiringPattern) == 0x01B8);
static_assert(offsetof(UCartInfoWidget, HBoxYourCurrency) == 0x0300);
static_assert(offsetof(UCartInfoWidget, YourCurrencyTextBlock) == 0x0308);
static_assert(offsetof(UCartInfoWidget, YourCurrencyValueTextBlock) == 0x0310);
static_assert(offsetof(UCartInfoWidget, HBoxItemValue) == 0x0318);
static_assert(offsetof(UCartInfoWidget, ItemValueTextBlock) == 0x0320);
static_assert(offsetof(UCartInfoWidget, HBoxDivider) == 0x0328);
static_assert(offsetof(UCartInfoWidget, BindingLabelHorizontalBox) == 0x0330);
static_assert(offsetof(UCartInfoWidget, HBoxPostTransaction) == 0x0338);
static_assert(offsetof(UCartInfoWidget, PostTransactionValueTextBlock) == 0x0340);
static_assert(offsetof(UCartInfoWidget, ActionValueTextBlock) == 0x0348);
static_assert(offsetof(UCartInfoWidget, ErrorMessage) == 0x0350);
static_assert(offsetof(UCartInfoWidget, TotalCurrencyImage) == 0x0358);
static_assert(offsetof(UCartInfoWidget, PurchaseCurrencyImage) == 0x0360);
static_assert(offsetof(UCartInfoWidget, InputLabelRepairOverlay) == 0x0368);
static_assert(offsetof(UCartInfoWidget, InputLabelTinkerOverlay) == 0x0370);
static_assert(offsetof(UCartInfoWidget, InputLabelBreakdownOverlay) == 0x0378);
static_assert(offsetof(UCartInfoWidget, BitTexture) == 0x0380);
static_assert(offsetof(UCartInfoWidget, WeaponPartTexture) == 0x0388);
static_assert(offsetof(UCartInfoWidget, ArmorPartTexture) == 0x0390);
static_assert(offsetof(UCastSpellEventEffect, Spell) == 0x0030);
static_assert(offsetof(UCastSpellStatusEffect, Spell) == 0x0188);
static_assert(offsetof(UStatsSkillButtonEntryBase, AvailablePressedBrush) == 0x0300);
static_assert(offsetof(UStatsSkillButtonEntryBase, UnavailablePressedBrush) == 0x0388);
static_assert(offsetof(UStatsSkillButtonEntryBase, IconImage) == 0x0410);
static_assert(offsetof(UStatsSkillButtonEntryBase, Button) == 0x0418);
static_assert(offsetof(UStatsSkillButtonEntryBase, SkillLevelText) == 0x0420);
static_assert(offsetof(UStatsSkillButtonEntryBase, AdjustedSkillLevelText) == 0x0428);
static_assert(offsetof(UStatsSkillButtonEntryBase, SkillNameText) == 0x0430);
static_assert(offsetof(UStatsSkillButtonEntryBase, NotificationWidget) == 0x0438);
static_assert(offsetof(UCauseDamageReticleWidget, HitCrosshair) == 0x0310);
static_assert(offsetof(UCauseDamageReticleWidget, WeakspotCrosshair) == 0x0318);
static_assert(offsetof(UCauseDamageReticleWidget, KillCrosshair) == 0x0320);
static_assert(offsetof(UCCAppearancePageWidget, GenderArea) == 0x0330);
static_assert(offsetof(UCCAppearancePageWidget, FaceArea) == 0x0338);
static_assert(offsetof(UCCAppearancePageWidget, HairArea) == 0x0340);
static_assert(offsetof(UCCAppearancePageWidget, FeaturesArea) == 0x0348);
static_assert(offsetof(UCCAppearancePageWidget, GenderSelection) == 0x0350);
static_assert(offsetof(UCCAppearancePageWidget, FacialCustomization) == 0x0358);
static_assert(offsetof(UCCAppearancePageWidget, HairCustomization) == 0x0360);
static_assert(offsetof(UCCAppearancePageWidget, FeaturesCustomization) == 0x0368);
static_assert(offsetof(UCCAppearancePageWidget, InputLabelGroup) == 0x0370);
static_assert(offsetof(UCCAppearancePageWidget, CharacterRotationBorder) == 0x0378);
static_assert(offsetof(UCCAppearancePageWidget, MouseSensitivity) == 0x0380);
static_assert(offsetof(UCCAppearancePageWidget, GamepadSensitivity) == 0x0388);
static_assert(offsetof(UCCAptitudeListEntry, SelectedPipImage) == 0x0328);
static_assert(offsetof(UCCAptitudeListEntry, AptitudeNameTextBlock) == 0x0330);
static_assert(offsetof(UCCAptitudeListEntry, Button) == 0x0338);
static_assert(offsetof(UCCAptitudeListWidget, ButtonGroup) == 0x0300);
static_assert(offsetof(UCCAptitudeListWidget, DetailContainer) == 0x0308);
static_assert(offsetof(UCCAptitudeListWidget, EntryClass) == 0x0310);
static_assert(offsetof(UCCAptitudePageWidget, AptitudeTitle) == 0x0340);
static_assert(offsetof(UCCAptitudePageWidget, AptitudeDescription) == 0x0348);
static_assert(offsetof(UCCAptitudePageWidget, AptitudeBenefits) == 0x0350);
static_assert(offsetof(UCCAptitudePageWidget, AptitudesList) == 0x0358);
static_assert(offsetof(UCCAptitudePageWidget, InputLabelGroup) == 0x0360);
static_assert(offsetof(UCCAptitudeSummaryWidget, AptitudeNameTextBlock) == 0x0300);
static_assert(offsetof(UCCAptitudeSummaryWidget, AptitudeEffectTextBlock) == 0x0308);
static_assert(offsetof(UCCAttributeSummaryWidget, AttributeSliderGroup1) == 0x0300);
static_assert(offsetof(UCCAttributeSummaryWidget, AttributeSliderGroup2) == 0x0308);
static_assert(offsetof(UCCAttributeSummaryWidget, AttributeSliderGroup3) == 0x0310);
static_assert(offsetof(FUIAppearanceData, AssetName) == 0x0000);
static_assert(offsetof(FUIAppearanceData, CustomizationName) == 0x0008);
static_assert(offsetof(UCCCharacterCustomizationBaseWdgt, EntryContainer) == 0x0300);
static_assert(offsetof(UCCCharacterCustomizationBaseWdgt, SliderClass) == 0x0308);
static_assert(offsetof(UCCCharacterCustomizationBaseWdgt, AssetData) == 0x0310);
static_assert(offsetof(UCCCharacterSummaryPageWidget, AptitudeSummary) == 0x0330);
static_assert(offsetof(UCCCharacterSummaryPageWidget, AttributeSummary) == 0x0338);
static_assert(offsetof(UCCCharacterSummaryPageWidget, SkillSummary) == 0x0340);
static_assert(offsetof(UCCCharacterSummaryPageWidget, InputLabelGroup) == 0x0348);
static_assert(offsetof(UCCCharacterSummaryPageWidget, DescriptionPanel) == 0x0350);
static_assert(offsetof(FBoneModificationUIWrapper, Modification) == 0x0000);
static_assert(offsetof(UCCFacialCustomizationWidget, BoneModifications) == 0x0398);
static_assert(offsetof(UCCFacialCustomizationWidget, BoneMappings) == 0x03A8);
static_assert(offsetof(UCCGenderSelectionWidget, GenderSelector) == 0x0300);
static_assert(offsetof(UCCGenderSelectionWidget, GamepadButton) == 0x0308);
static_assert(offsetof(UCCNameSelectionWidget, TextEntry) == 0x0330);
static_assert(offsetof(UCCNameSelectionWidget, InputLabelGroup) == 0x0338);
static_assert(offsetof(UCCNameSelectionWidget, InvisibleButton) == 0x0340);
static_assert(offsetof(UCCPerksPageWidget, PerkReadout) == 0x0330);
static_assert(offsetof(UCCPerksPageWidget, MilitaryPerks) == 0x0338);
static_assert(offsetof(UCCPerksPageWidget, AdventurerPerks) == 0x0340);
static_assert(offsetof(UCCPerksPageWidget, LeadershipPerks) == 0x0348);
static_assert(offsetof(UCCPerksPageWidget, PreviousStepButton) == 0x0350);
static_assert(offsetof(UCCPerksPageWidget, NextStepButton) == 0x0358);
static_assert(offsetof(FSkillCategoryDetail, Category) == 0x0000);
static_assert(offsetof(FSkillCategoryDetail, Icon) == 0x0008);
static_assert(offsetof(FSkillCategoryDetail, AssociatedSkills) == 0x0030);
static_assert(offsetof(UCharacterSkillsBasePage, CategoryInformation) == 0x0300);
static_assert(offsetof(UCharacterSkillsBasePage, SkillGroupClass) == 0x0310);
static_assert(offsetof(UCharacterSkillsBasePage, SkillGroupScrollBox) == 0x0318);
static_assert(offsetof(UCharacterSkillsBasePage, SkillPointsRemainingTextBlock) == 0x0320);
static_assert(offsetof(UCharacterSkillsBasePage, DescriptionPanel) == 0x0328);
static_assert(offsetof(UCCSkillsPageWidget, InputLabelGroup) == 0x0478);
static_assert(offsetof(UCCSkillsPageWidget, ScrollIndicator) == 0x0480);
static_assert(offsetof(UCCSkillsSummaryCategoryWidget, SkillContainer) == 0x0300);
static_assert(offsetof(UCCSkillsSummaryCategoryWidget, SkillClass) == 0x0308);
static_assert(offsetof(UCCSkillsSummaryListWidget, GroupContainer) == 0x0300);
static_assert(offsetof(UCCSkillsSummaryListWidget, CategoryClass) == 0x0308);
static_assert(offsetof(UCCSkillSummaryDetailWidget, Button) == 0x0300);
static_assert(offsetof(UCCSkillSummaryDetailWidget, SkillNameTextBlock) == 0x0308);
static_assert(offsetof(UCCSkillSummaryDetailWidget, SkillValueTextBlock) == 0x0310);
static_assert(offsetof(UCCSkillSummaryWidget, SkillsList) == 0x0300);
static_assert(offsetof(AChair, InteractableComponent) == 0x02D8);
static_assert(offsetof(AChair, WaitSpell) == 0x02E0);
static_assert(offsetof(UCharacterCreationData, Aptitudes) == 0x0038);
static_assert(offsetof(UCharacterCreationMasterWidget, PageScrollBox) == 0x0348);
static_assert(offsetof(UCharacterCreationMasterWidget, PageButtonGroup) == 0x0350);
static_assert(offsetof(UCharacterCreationMasterWidget, ScrollingWidgetGroup) == 0x0358);
static_assert(offsetof(UCharacterCreationMasterWidget, AttributeSliderPage) == 0x0360);
static_assert(offsetof(UCharacterCreationMasterWidget, SkillPage) == 0x0368);
static_assert(offsetof(UCharacterCreationMasterWidget, AptitudePage) == 0x0370);
static_assert(offsetof(UCharacterCreationMasterWidget, SummaryPage) == 0x0378);
static_assert(offsetof(UCharacterCreationMasterWidget, AppearancePage) == 0x0380);
static_assert(offsetof(UCharacterCreationMasterWidget, NamePage) == 0x0388);
static_assert(offsetof(UCharacterCreationMasterWidget, ContentContainer) == 0x0390);
static_assert(offsetof(UCharacterCreationMasterWidget, NavigationBar) == 0x0398);
static_assert(offsetof(UCharacterCreationMasterWidget, FramingOverlay) == 0x03A0);
static_assert(offsetof(UCharacterCreationMasterWidget, PlayerNameTextBlock) == 0x03A8);
static_assert(offsetof(UCharacterCreationMasterWidget, BackgroundEffect) == 0x03B0);
static_assert(offsetof(UCharacterCreationMasterWidget, BannedNames) == 0x03B8);
static_assert(offsetof(UCharacterCreationMasterWidget, NewGameLevel) == 0x03C0);
static_assert(offsetof(UCharacterCreationMasterWidget, MainMenuLevel) == 0x03D8);
static_assert(offsetof(UCharacterCreationMasterWidget, IntroMovie) == 0x03F0);
static_assert(offsetof(UCharacterCreationMasterWidget, OutroMoviePartOne) == 0x03F8);
static_assert(offsetof(UCharacterCreationMasterWidget, OutroMoviePartTwo) == 0x0400);
static_assert(offsetof(UCharacterCreationMasterWidget, IntroMovieXSX) == 0x0408);
static_assert(offsetof(UCharacterCreationMasterWidget, OutroMoviePartOneXSX) == 0x0410);
static_assert(offsetof(UCharacterCreationMasterWidget, OutroMoviePartTwoXSX) == 0x0418);
static_assert(offsetof(FDeathClassRow, DeathClass) == 0x0000);
static_assert(offsetof(FDeathClassRow, ParticleSystemData) == 0x0008);
static_assert(offsetof(FDeathClassRow, AudioEventData) == 0x0010);
static_assert(offsetof(UDeathClass, RevealEmissiveColor) == 0x0030);
static_assert(offsetof(UDeathClass, DeathType) == 0x005C);
static_assert(offsetof(UDeathClass, Reveal_RMEA) == 0x0060);
static_assert(offsetof(UDeathClass, Reveal_Normal) == 0x0068);
static_assert(offsetof(UDeathClass, Reveal_Base_Color) == 0x0070);
static_assert(offsetof(UDeathClass, MIDs) == 0x0078);
static_assert(offsetof(UDeathClass, DeathComponent) == 0x0088);
static_assert(offsetof(UDeathClass, OwningActor) == 0x0090);
static_assert(offsetof(UDeathClass, SkeletalMesh) == 0x0098);
static_assert(offsetof(UDeathClass, BodyType) == 0x00A0);
static_assert(offsetof(UDeathClass, BodyPartHit) == 0x00A8);
static_assert(offsetof(UDeathClass, DeathClassRow) == 0x00B0);
static_assert(offsetof(UDeathClass, ImpactLocation) == 0x00D0);
static_assert(offsetof(UDeathClass, ImpactDirection) == 0x00DC);
static_assert(offsetof(UDeathClass, BoneHit) == 0x00E8);
static_assert(offsetof(UDeathClass, BreakBoneName) == 0x00F0);
static_assert(offsetof(UDeathClass, BreakAttachedSocket) == 0x00F8);
static_assert(offsetof(UDeathClass, BreakDetachedSocket) == 0x0100);
static_assert(offsetof(FCharacterDeathDamageInfo, DmgType) == 0x0000);
static_assert(offsetof(FCharacterDeathDamageInfo, WeaponCategory) == 0x0008);
static_assert(offsetof(FCharacterDeathDamageInfo, BodyPartHit) == 0x0018);
static_assert(offsetof(FCharacterDeathDamageInfo, BoneHit) == 0x0020);
static_assert(offsetof(FCharacterDeathDamageInfo, ImpactLocation) == 0x0028);
static_assert(offsetof(FCharacterDeathDamageInfo, ImpactDirection) == 0x0034);
static_assert(offsetof(FCharacterDeathDamageInfo, BreakBoneHit) == 0x0040);
static_assert(offsetof(FCharacterDeathDamageInfo, BreakAttachedSocket) == 0x0048);
static_assert(offsetof(FCharacterDeathDamageInfo, BreakDetachedSocket) == 0x0050);
static_assert(offsetof(FCharacterDeathDamageInfo, DeathClassOverrides) == 0x0060);
static_assert(offsetof(UCharacterDeathComponent, DeathDamageInfo) == 0x00F8);
static_assert(offsetof(UCharacterDeathComponent, DeathClassOverrideByDamageType) == 0x0170);
static_assert(offsetof(UCharacterDeathComponent, DeathClass) == 0x01C8);
static_assert(offsetof(UCharacterDeathComponent, DeathClassOverride) == 0x01D0);
static_assert(offsetof(UCharacterDeathComponent, DeathClassData) == 0x01D8);
static_assert(offsetof(UCharacterDeathComponent, DeathImpulse) == 0x01F0);
static_assert(offsetof(UCharacterDeathComponent, OwnerMesh) == 0x01F8);
static_assert(offsetof(UCharacterDeathComponent, AppearanceComponent) == 0x0200);
static_assert(offsetof(UCharacterDeathComponent, ChosenDeathUClass) == 0x0238);
static_assert(offsetof(FCharacterDeathDataRow, DmgType) == 0x0000);
static_assert(offsetof(FCharacterDeathDataRow, WeaponCategory) == 0x0008);
static_assert(offsetof(FCharacterDeathDataRow, CalledShot) == 0x0010);
static_assert(offsetof(FCharacterDeathDataRow, CriticalHit) == 0x0011);
static_assert(offsetof(FCharacterDeathDataRow, Impulse) == 0x0018);
static_assert(offsetof(FCharacterDeathDataRow, DeathClass) == 0x0028);
static_assert(offsetof(UCharacterDeathData, DeathData) == 0x0038);
static_assert(offsetof(UCharacterDeathData, DefaultDeathClass) == 0x0048);
static_assert(offsetof(UCharacterDeathData, DefaultImpulse) == 0x0050);
static_assert(offsetof(UCharacterDeathData, AshPileCreatureType) == 0x005C);
static_assert(offsetof(UCharacterDerivedStatsWidget, Level) == 0x0310);
static_assert(offsetof(UCharacterDerivedStatsWidget, CurrentExperience) == 0x0318);
static_assert(offsetof(UCharacterDerivedStatsWidget, ExperienceNeededToLevel) == 0x0320);
static_assert(offsetof(UCharacterDerivedStatsWidget, CurrentHealth) == 0x0328);
static_assert(offsetof(UCharacterDerivedStatsWidget, HealthRegen) == 0x0330);
static_assert(offsetof(UCharacterDerivedStatsWidget, HeadArmor) == 0x0338);
static_assert(offsetof(UCharacterDerivedStatsWidget, BodyArmor) == 0x0340);
static_assert(offsetof(UCharacterDerivedStatsWidget, SprintSpeed) == 0x0348);
static_assert(offsetof(UCharacterDerivedStatsWidget, CrouchSpeed) == 0x0350);
static_assert(offsetof(UCharacterDerivedStatsWidget, TacticalTimeDilation) == 0x0358);
static_assert(offsetof(UCharacterDerivedStatsWidget, MerchantSkill) == 0x0360);
static_assert(offsetof(ULedgerDescriptionPanel, DetailsScrollBox) == 0x0300);
static_assert(offsetof(ULedgerDescriptionPanel, HeaderText) == 0x0308);
static_assert(offsetof(ULedgerDescriptionPanel, HeaderBodyText) == 0x0310);
static_assert(offsetof(ULedgerDescriptionPanel, MinorHeaderBodyText) == 0x0318);
static_assert(offsetof(UCharacterDescriptionPanel, PrimaryAdjustmentsVerticalBox) == 0x0320);
static_assert(offsetof(UCharacterDescriptionPanel, SecondaryAdjustmentsVerticalBox) == 0x0328);
static_assert(offsetof(UCharacterDescriptionPanel, AdjustedSkillValueText) == 0x0330);
static_assert(offsetof(UCharacterDescriptionPanel, AdjustedSkillDescText) == 0x0338);
static_assert(offsetof(UCharacterDescriptionPanel, HeaderBodySizeBox) == 0x0340);
static_assert(offsetof(UCharacterDescriptionPanel, BelowAverageWarningContainer) == 0x0348);
static_assert(offsetof(UCharacterDescriptionPanel, AttributeEffectTextBlock) == 0x0350);
static_assert(offsetof(UCharacterDescriptionPanel, AdjustmentClass) == 0x0358);
static_assert(offsetof(UCharacterDetailsWidget, DerivedStats) == 0x0300);
static_assert(offsetof(UCharacterDetailsWidget, StatusEffects) == 0x0308);
static_assert(offsetof(UCharacterDetailsWidget, InputLabelGroup) == 0x0310);
static_assert(offsetof(UCharacterDetailsWidget, FlawSummary) == 0x0318);
static_assert(offsetof(UCharacterDetailsWidget, DescriptionPanel) == 0x0320);
static_assert(offsetof(UCharacterDetailsWidget, FlavorTextWidget) == 0x0328);
static_assert(offsetof(FGameDataReferenceID, ID) == 0x0008);
static_assert(offsetof(FScannerAbility, AbilityName) == 0x0000);
static_assert(offsetof(FRangedStatModifierDescription, RangedCurve) == 0x0018);
static_assert(offsetof(FPerkSubclassArray, Perks) == 0x0000);
static_assert(offsetof(UCharacterInfoComponent, Name) == 0x0190);
static_assert(offsetof(UCharacterInfoComponent, Gender) == 0x0198);
static_assert(offsetof(UCharacterInfoComponent, CreatureXPType) == 0x0199);
static_assert(offsetof(UCharacterInfoComponent, Reference) == 0x01A0);
static_assert(offsetof(UCharacterInfoComponent, ScannerAbilities) == 0x01C0);
static_assert(offsetof(UCharacterInfoComponent, ScannerAnalysisString) == 0x01D0);
static_assert(offsetof(UCharacterInfoComponent, FlavorTextAsset) == 0x01D8);
static_assert(offsetof(UCharacterInfoComponent, FlavorTextString) == 0x01E0);
static_assert(offsetof(UCharacterInfoComponent, RangedLevelStatModifiers) == 0x01F8);
static_assert(offsetof(UCharacterInfoComponent, PerkTree) == 0x0278);
static_assert(offsetof(UCharacterInfoComponent, PostLoadPerks) == 0x0280);
static_assert(offsetof(UCharacterInfoComponent, Perks) == 0x02E0);
static_assert(offsetof(UCharacterInfoComponent, PerkTransactions) == 0x0330);
static_assert(offsetof(FWeaponItemDefinition, WeaponClass) == 0x0018);
static_assert(offsetof(FWeaponItemDefinition, AmmoClass) == 0x0020);
static_assert(offsetof(FWeaponItemDefinition, AmmoConsumableClass) == 0x0028);
static_assert(offsetof(FWeaponItemDefinition, EquippedMods) == 0x0038);
static_assert(offsetof(FWeaponItemDefinition, EquippedMicroMod) == 0x0050);
static_assert(offsetof(FArmorSetItemDefinition, ArmorSetClass) == 0x0018);
static_assert(offsetof(FArmorSetItemDefinition, ArmoringModClass) == 0x0020);
static_assert(offsetof(FArmorSetItemDefinition, UtilityModClass) == 0x0028);
static_assert(offsetof(FArmorSetItemDefinition, ResistanceModClass) == 0x0030);
static_assert(offsetof(FArmorSetItemDefinition, DampeningModClass) == 0x0038);
static_assert(offsetof(FArmorSetItemDefinition, EquippedMicroMod) == 0x0048);
static_assert(offsetof(FAmmoItemDefinition, AmmoClass) == 0x0010);
static_assert(offsetof(FCurrencyItmDefinition, CurrencyItemClass) == 0x0010);
static_assert(offsetof(FResourceItmDefinition, ResourceItemClass) == 0x0010);
static_assert(offsetof(FQuestItmDefinition, QuestItemClass) == 0x0010);
static_assert(offsetof(FWeaponModItemDefinition, WeaponModClass) == 0x0010);
static_assert(offsetof(FHelmetItemDefinition, HelmetClass) == 0x0018);
static_assert(offsetof(FArmorModArmoringItemDefinition, ArmoringModClass) == 0x0018);
static_assert(offsetof(FArmorModUtilityItemDefinition, UtilityModClass) == 0x0018);
static_assert(offsetof(FArmorModResistanceItemDefinition, ResistanceModClass) == 0x0018);
static_assert(offsetof(FArmorModDampeningItemDefinition, DampeningModClass) == 0x0018);
static_assert(offsetof(FGadgetItemDefinition, GadgetClass) == 0x0010);
static_assert(offsetof(FItemDefinitionVariant, ItemType) == 0x0000);
static_assert(offsetof(FItemDefinitionVariant, WeaponItemDefinition) == 0x0008);
static_assert(offsetof(FItemDefinitionVariant, ArmorSetItemDefinition) == 0x0060);
static_assert(offsetof(FItemDefinitionVariant, AmmoItemDefinition) == 0x00B0);
static_assert(offsetof(FItemDefinitionVariant, CurrencyItemDefinition) == 0x00C8);
static_assert(offsetof(FItemDefinitionVariant, ResourceItemDefinition) == 0x00E0);
static_assert(offsetof(FItemDefinitionVariant, QuestItemDefinition) == 0x00F8);
static_assert(offsetof(FItemDefinitionVariant, WeaponModItemDefinition) == 0x0110);
static_assert(offsetof(FItemDefinitionVariant, HelmetItemDefinition) == 0x0128);
static_assert(offsetof(FItemDefinitionVariant, ArmorModArmoringItemDefinition) == 0x0148);
static_assert(offsetof(FItemDefinitionVariant, ArmorModUtilityItemDefinition) == 0x0168);
static_assert(offsetof(FItemDefinitionVariant, ArmorModResistanceItemDefinition) == 0x0188);
static_assert(offsetof(FItemDefinitionVariant, ArmorModDampeningItemDefinition) == 0x01A8);
static_assert(offsetof(FItemDefinitionVariant, MedKitItemDefinitionDeprecated) == 0x01C8);
static_assert(offsetof(FItemDefinitionVariant, GadgetItemDefinition) == 0x01D8);
static_assert(offsetof(FDefaultItemStack, Item) == 0x0000);
static_assert(offsetof(FItemStack, Item) == 0x0000);
static_assert(offsetof(UInventoryComponent, DefaultItemStacks) == 0x0160);
static_assert(offsetof(UInventoryComponent, Items) == 0x0178);
static_assert(offsetof(UInventoryComponent, BaseLootTable) == 0x0188);
static_assert(offsetof(UInventoryComponent, SecondaryTable) == 0x0190);
static_assert(offsetof(UInventoryComponent, AdditionalLoot) == 0x0198);
static_assert(offsetof(UInventoryComponent, OwningFaction) == 0x01B8);
static_assert(offsetof(UInventoryComponent, OwningActor) == 0x01C0);
static_assert(offsetof(UCharacterMedKitWidget, MainInvalidationBox) == 0x0300);
static_assert(offsetof(UCharacterMedKitWidget, MedKitProgressBar) == 0x0308);
static_assert(offsetof(UCharacterMedKitWidget, DrugSlotOne) == 0x0310);
static_assert(offsetof(UCharacterMedKitWidget, DrugSlotTwo) == 0x0318);
static_assert(offsetof(UCharacterMedKitWidget, DrugSlotThree) == 0x0320);
static_assert(offsetof(UCharacterMedKitWidget, DrugSlotFour) == 0x0328);
static_assert(offsetof(UCharacterMedKitWidget, DrugSlotContainer) == 0x0330);
static_assert(offsetof(UCharacterMedKitWidget, InputLabel) == 0x0338);
static_assert(offsetof(UCharacterMedKitWidget, MedKitUsageTextBlock) == 0x0340);
static_assert(offsetof(UCharacterNameplateWidget, NameTextBlock) == 0x0300);
static_assert(offsetof(UCharacterNameplateWidget, LevelTextBlock) == 0x0308);
static_assert(offsetof(UCharacterOverviewWidget, MainInvalidationBox) == 0x0300);
static_assert(offsetof(UCharacterOverviewWidget, MainCanvasPanel) == 0x0308);
static_assert(offsetof(UCharacterOverviewWidget, CharacterMedKit) == 0x0310);
static_assert(offsetof(UCharacterOverviewWidget, AbilityHorizontalBox) == 0x0318);
static_assert(offsetof(UCharacterOverviewWidget, SurvivalBar) == 0x0320);
static_assert(offsetof(UCharacterOverviewWidget, LevelTextBlock) == 0x0328);
static_assert(offsetof(UCharacterOverviewWidget, HealthProgressBar) == 0x0330);
static_assert(offsetof(UCharacterOverviewWidget, HealthBarTip) == 0x0338);
static_assert(offsetof(UCharacterOverviewWidget, HealthBarTipAnim) == 0x0340);
static_assert(offsetof(UCharacterOverviewWidget, HealthOverlay) == 0x0348);
static_assert(offsetof(UCharacterOverviewWidget, TTDProgressBar) == 0x0350);
static_assert(offsetof(UCharacterOverviewWidget, TTDThresholdFill) == 0x0358);
static_assert(offsetof(UCharacterOverviewWidget, TTDThresholdBar) == 0x0360);
static_assert(offsetof(UCharacterOverviewWidget, VentGlow) == 0x0368);
static_assert(offsetof(UCharacterOverviewWidget, XPFill) == 0x0370);
static_assert(offsetof(UCharacterOverviewWidget, XPGlow) == 0x0378);
static_assert(offsetof(UCharacterOverviewWidget, GlowBall) == 0x0380);
static_assert(offsetof(UCharacterOverviewWidget, TTDBarTip) == 0x0388);
static_assert(offsetof(UCharacterOverviewWidget, TTDOverlay) == 0x0390);
static_assert(offsetof(UCharacterOverviewWidget, StatusEffectBarOverlay) == 0x0398);
static_assert(offsetof(UCharacterOverviewWidget, StatusEffectBar) == 0x03A0);
static_assert(offsetof(UCharacterOverviewWidget, TTDSizeBox) == 0x03A8);
static_assert(offsetof(UCharacterOverviewWidget, TTDHBox) == 0x03B0);
static_assert(offsetof(UCharacterOverviewWidget, TTDInputWidget) == 0x03B8);
static_assert(offsetof(UCharacterOverviewWidget, TTDIconProgressBar) == 0x03C0);
static_assert(offsetof(UCharacterOverviewWidget, DashHBox) == 0x03C8);
static_assert(offsetof(UCharacterOverviewWidget, DashInputWidget) == 0x03D0);
static_assert(offsetof(UCharacterOverviewWidget, DashProgressBar) == 0x03D8);
static_assert(offsetof(UShoutComponent, ShoutBounds) == 0x00F0);
static_assert(offsetof(UCharacterSkillsDescriptionPanel, SkillUnlockPanel) == 0x0368);
static_assert(offsetof(UCharacterStatusEffectsWidget, EntryClass) == 0x0300);
static_assert(offsetof(UCharacterStatusEffectsWidget, ContentScrollBox) == 0x0308);
static_assert(offsetof(FExpressionComponentAsset, Operator) == 0x0008);
static_assert(offsetof(FConditionalExpressionAsset, ComponentTypes) == 0x0010);
static_assert(offsetof(FConditionalExpressionAsset, ComponentIndices) == 0x0020);
static_assert(offsetof(FConditionalCallAsset, ScriptCall) == 0x0018);
static_assert(offsetof(FConditionalCallAsset, FullName) == 0x0028);
static_assert(offsetof(FConditionalCallAsset, Flags) == 0x0038);
static_assert(offsetof(FConditionalCallAsset, Parameters) == 0x0048);
static_assert(offsetof(FConditionalAsset, ExpressionComponents) == 0x0000);
static_assert(offsetof(FConditionalAsset, CallComponents) == 0x0010);
static_assert(offsetof(FConditionalAsset, Root) == 0x0020);
static_assert(offsetof(FChatterLinkAsset, Conditional) == 0x0008);
static_assert(offsetof(FScriptCallAsset, Script) == 0x0000);
static_assert(offsetof(FScriptCallAsset, Flags) == 0x0010);
static_assert(offsetof(FScriptCallAsset, Conditional) == 0x0020);
static_assert(offsetof(FDialogueNodeAsset, NodeType) == 0x0008);
static_assert(offsetof(FDialogueNodeAsset, Links) == 0x0010);
static_assert(offsetof(FDialogueNodeAsset, Conditional) == 0x0020);
static_assert(offsetof(FDialogueNodeAsset, OnEnterScripts) == 0x0070);
static_assert(offsetof(FDialogueNodeAsset, OnExitScripts) == 0x0080);
static_assert(offsetof(FDialogueNodeAsset, OnUpdateScripts) == 0x0090);
static_assert(offsetof(FDialogueNodeAsset, PlayType) == 0x00A3);
static_assert(offsetof(FDialogueNodeAsset, Persistence) == 0x00A4);
static_assert(offsetof(FDialogueNodeAsset, DisplayType) == 0x00AC);
static_assert(offsetof(FDialogueNodeAsset, VOPositioning) == 0x00AD);
static_assert(offsetof(FTalkNodeAsset, SpeakerGameDataID) == 0x00B0);
static_assert(offsetof(FTalkNodeAsset, ListenerGameDataID) == 0x00C0);
static_assert(offsetof(FTalkNodeAsset, EmotionType) == 0x00D0);
static_assert(offsetof(FTalkNodeAsset, ExternalVO) == 0x00E8);
static_assert(offsetof(FTalkNodeAsset, VOAttenuationType) == 0x00FC);
static_assert(offsetof(FChatterBranchNodeAsset, ParentID) == 0x00B8);
static_assert(offsetof(FChatterBranchNodeAsset, EventID) == 0x00C8);
static_assert(offsetof(FChatterEvent, EventType) == 0x0008);
static_assert(offsetof(FChatterEvent, OnInterrupt) == 0x0014);
static_assert(offsetof(FChatterEvent, InterruptionLevel) == 0x0015);
static_assert(offsetof(FChatterEvent, OnQueued) == 0x0016);
static_assert(offsetof(FChatterEvent, ChatterPrefix) == 0x0020);
static_assert(offsetof(FChatterEventNodeAsset, EventData) == 0x00B0);
static_assert(offsetof(FSoundEffectNodeAsset, AudioEvent) == 0x00B0);
static_assert(offsetof(FChatterBundle, LoadedFilename) == 0x0000);
static_assert(offsetof(FChatterBundle, ID) == 0x0010);
static_assert(offsetof(FChatterBundle, AudioLookup) == 0x0020);
static_assert(offsetof(FChatterBundle, StringTableFilenames) == 0x0070);
static_assert(offsetof(FChatterBundle, TalkNodes) == 0x0080);
static_assert(offsetof(FChatterBundle, ScriptNodes) == 0x0090);
static_assert(offsetof(FChatterBundle, ChatterNodes) == 0x00A0);
static_assert(offsetof(FChatterBundle, ChatterBranchNodes) == 0x00B0);
static_assert(offsetof(FChatterBundle, ChatterEventNodes) == 0x00C0);
static_assert(offsetof(FChatterBundle, SoundEffectNodes) == 0x00D0);
static_assert(offsetof(UChatterBundleSet, ChatterBundles) == 0x0040);
static_assert(offsetof(UChatterEventEffect, ChatterEvent) == 0x0030);
static_assert(offsetof(UGameDataReference, ID) == 0x003C);
static_assert(offsetof(UChatterManager, LoadedChatter) == 0x0050);
static_assert(offsetof(UChatterManager, ChatterPlayerPool) == 0x00A0);
static_assert(offsetof(UChatterManager, PreviewPlayer) == 0x6FCD0);
static_assert(offsetof(UChatterPlayer, FaceFXAnim) == 0x0158);
static_assert(offsetof(UChatterPlayer, SoundEffectEvent) == 0x0160);
static_assert(offsetof(UCheckBoxWidget, ImageDimensions) == 0x0300);
static_assert(offsetof(UCheckBoxWidget, MaxImageDimensions) == 0x0308);
static_assert(offsetof(UCheckBoxWidget, CheckBoxSizeBox) == 0x0310);
static_assert(offsetof(UCheckBoxWidget, CheckBoxButton) == 0x0318);
static_assert(offsetof(UCheckBoxWidget, CheckedImage) == 0x0320);
static_assert(offsetof(UCineCombatCameraParams, AttachSocket) == 0x0034);
static_assert(offsetof(UCineCombatCameraParams, AttachRelativePosition) == 0x003C);
static_assert(offsetof(UCineCombatCameraParams, LookAtSocket) == 0x0048);
static_assert(offsetof(UCineCombatCameraParams, Offset) == 0x0050);
static_assert(offsetof(UCineCombatCameraParams, LevelSequence) == 0x0060);
static_assert(offsetof(UCineCombatCameraParams, ValidLocationCollisionInfo) == 0x0070);
static_assert(offsetof(UCineCombatCameraParams, TimeDilationData) == 0x00B8);
static_assert(offsetof(ACineCombatCamera, CameraParams) == 0x0300);
static_assert(offsetof(ACineCombatSequenceActor, CameraParams) == 0x0348);
static_assert(offsetof(UCinematicPlayerWidget, HoldInputLabel) == 0x0318);
static_assert(offsetof(UCinematicPlayerWidget, SkipContainer) == 0x0320);
static_assert(offsetof(UCinematicPlayerWidget, CinematicOverlay) == 0x0328);
static_assert(offsetof(UClearThreatStatusEffect, ClearTarget) == 0x0188);
static_assert(offsetof(UCodexDataAsset, Name) == 0x0038);
static_assert(offsetof(UCodexDataAsset, Description) == 0x0040);
static_assert(offsetof(FInputLabelDescription, ActionName) == 0x0000);
static_assert(offsetof(FInputLabelDescription, IconName) == 0x0008);
static_assert(offsetof(FInputLabelDescription, TextReference) == 0x0010);
static_assert(offsetof(UCodexJournal, ButtonGroup) == 0x0300);
static_assert(offsetof(UCodexJournal, PlayAudioLogDescription_Gamepad) == 0x0308);
static_assert(offsetof(UCodexJournal, PlayAudioLogDescription_Keyboard) == 0x0340);
static_assert(offsetof(UCodexJournal, ListScrollBox) == 0x0378);
static_assert(offsetof(UCodexJournal, AudioLogList_BaseGame) == 0x0380);
static_assert(offsetof(UCodexJournal, AudioLogList_INX01) == 0x0388);
static_assert(offsetof(UCodexJournal, AudioLogList_INX02) == 0x0390);
static_assert(offsetof(UCodexJournal, TutorialListContainer) == 0x0398);
static_assert(offsetof(UCodexJournal, SymbolList) == 0x03A0);
static_assert(offsetof(UCodexJournal, LogList) == 0x03A8);
static_assert(offsetof(UCodexJournal, DescriptionPanel) == 0x03B0);
static_assert(offsetof(UCodexJournal, InputLabelGroup) == 0x03B8);
static_assert(offsetof(FIndianaComboButtonStyle, ButtonStyle) == 0x0008);
static_assert(offsetof(FIndianaComboButtonStyle, DownArrowImage) == 0x0830);
static_assert(offsetof(FIndianaComboButtonStyle, MenuBorderBrush) == 0x08C0);
static_assert(offsetof(FIndianaComboButtonStyle, MenuBorderPadding) == 0x0950);
static_assert(offsetof(FIndianaComboBoxStyle, ComboButtonStyle) == 0x0008);
static_assert(offsetof(UComboBoxStringBase, DefaultOptions) == 0x0120);
static_assert(offsetof(UComboBoxStringBase, SelectedOption) == 0x0130);
static_assert(offsetof(UComboBoxStringBase, WidgetStyle) == 0x0140);
static_assert(offsetof(UComboBoxStringBase, ContentPadding) == 0x0AA8);
static_assert(offsetof(UComboBoxStringBase, ForegroundColor) == 0x0B18);
static_assert(offsetof(UIndianaComboBoxWidgetStyle, ComboBoxStyle) == 0x0038);
static_assert(offsetof(UCommandPointWidget, PipBulbImage) == 0x0300);
static_assert(offsetof(UCommandPointWidget, FillImage) == 0x0308);
static_assert(offsetof(UCommandPointWidget, LockedBulbTexture) == 0x0310);
static_assert(offsetof(UCommandPointWidget, UnlockedBulbTexture) == 0x0318);
static_assert(offsetof(UCommandPointWidget, AvailablePipTexture) == 0x0320);
static_assert(offsetof(UCommandPointWidget, UnavailablePipTexture) == 0x0328);
static_assert(offsetof(UCompanionBehaviorOptionWidget, NameLocString) == 0x0300);
static_assert(offsetof(UCompanionBehaviorOptionWidget, DescriptionLocString) == 0x0308);
static_assert(offsetof(UCompanionBehaviorOptionWidget, GamepadNextAudio) == 0x0310);
static_assert(offsetof(UCompanionBehaviorOptionWidget, NameTextBlock) == 0x0318);
static_assert(offsetof(UCompanionBehaviorOptionWidget, Button) == 0x0320);
static_assert(offsetof(UCompanionBehaviorOptionWidget, Option) == 0x0328);
static_assert(offsetof(UCompanionBehaviorsWidget, FollowDistanceWidget) == 0x0318);
static_assert(offsetof(UCompanionBehaviorsWidget, WeaponPreferenceWidget) == 0x0320);
static_assert(offsetof(UCompanionBehaviorsWidget, CombatModeWidget) == 0x0328);
static_assert(offsetof(FMoveToQueryInfo, Extent) == 0x0000);
static_assert(offsetof(UCompanionCommandComponent, CommandChargeCosts) == 0x01A8);
static_assert(offsetof(UCompanionCommandComponent, CommandCooldowns) == 0x0218);
static_assert(offsetof(UCompanionCommandComponent, InitialMoveToQuery) == 0x0304);
static_assert(offsetof(UCompanionCommandComponent, SecondaryMoveToQuery) == 0x0314);
static_assert(offsetof(UCompanionCommandComponent, ProjectedMoveToQuery) == 0x0324);
static_assert(offsetof(FBotchableQuestInfo, ID) == 0x0000);
static_assert(offsetof(UCompanionComponent, CompanionPortrait) == 0x00F0);
static_assert(offsetof(UCompanionComponent, DeathGlobalVariableName) == 0x0100);
static_assert(offsetof(UCompanionComponent, BotchableQuestsOnDeath) == 0x0110);
static_assert(offsetof(UCompanionComponent, CalledShot) == 0x0150);
static_assert(offsetof(UCompanionComponent, MoraleEvents) == 0x01D0);
static_assert(offsetof(UCompanionComponent, InterruptionMontages) == 0x01E0);
static_assert(offsetof(UCompanionComponent, PotentialWeaponPreferences) == 0x01F8);
static_assert(offsetof(UCompanionComponent, WeaponPreferenceDescText) == 0x0208);
static_assert(offsetof(UCompanionDetails, TitleTextBlock) == 0x0300);
static_assert(offsetof(UCompanionDetails, TopBodyTextBlock) == 0x0308);
static_assert(offsetof(UCompanionDetails, BottomBodyTextBlock) == 0x0310);
static_assert(offsetof(UCompanionEntryWidget, CharacterRender) == 0x0310);
static_assert(offsetof(UCompanionEntryWidget, CharacterButton) == 0x0318);
static_assert(offsetof(UCompanionEntryWidget, LockedCharacterImage) == 0x0320);
static_assert(offsetof(UCompanionEntryWidget, NameTextBlock) == 0x0328);
static_assert(offsetof(UCompanionEntryWidget, CustomizeButton) == 0x0330);
static_assert(offsetof(UCompanionEntryWidget, DetailsVerticalBox) == 0x0338);
static_assert(offsetof(UCompanionEquipmentBarWidget, Button0) == 0x03A0);
static_assert(offsetof(UCompanionEquipmentBarWidget, Button1) == 0x03A8);
static_assert(offsetof(UCompanionEquipmentBarWidget, Button2) == 0x03B0);
static_assert(offsetof(UCompanionEquipmentBarWidget, Button3) == 0x03B8);
static_assert(offsetof(UCompanionEquipmentBarWidget, DragContainer0) == 0x03C0);
static_assert(offsetof(UCompanionEquipmentBarWidget, DragContainer1) == 0x03C8);
static_assert(offsetof(UCompanionEquipmentBarWidget, DragContainer2) == 0x03D0);
static_assert(offsetof(UCompanionEquipmentBarWidget, DragContainer3) == 0x03D8);
static_assert(offsetof(UCompanionEquipmentBarWidget, WeaponsVerticalBox) == 0x03E0);
static_assert(offsetof(UCompanionEquipmentBarWidget, ArmorVerticalBox) == 0x03E8);
static_assert(offsetof(FPageDimensions, SupportedClasses) == 0x0010);
static_assert(offsetof(FPageDimensions, SupportedSortingOptions) == 0x0020);
static_assert(offsetof(FItemViewerInitializer, AllDimensions) == 0x0008);
static_assert(offsetof(FItemViewerInitializer, PageDimensions) == 0x0038);
static_assert(offsetof(FItemViewerInitializer, JunkDimensions) == 0x0050);
static_assert(offsetof(FItemViewerInitializer, Images) == 0x0080);
static_assert(offsetof(FItemViewerInitializer, PageHeaderText) == 0x0090);
static_assert(offsetof(UCompanionEquipmentWidget, EquipmentBar) == 0x03A0);
static_assert(offsetof(UCompanionEquipmentWidget, WeaponsInitializer) == 0x03A8);
static_assert(offsetof(UCompanionEquipmentWidget, ArmorInitializer) == 0x0448);
static_assert(offsetof(UCompanionEquipmentWidget, NoInventoryReasonText) == 0x0500);
static_assert(offsetof(UCompanionManagerComponent, ActiveFollower) == 0x00E0);
static_assert(offsetof(UCompanionManagerComponent, StartingCompanionList) == 0x0150);
static_assert(offsetof(UCompanionMoraleEvent, Contribution) == 0x0030);
static_assert(offsetof(UCompanionMoraleEvent, EventListener) == 0x0040);
static_assert(offsetof(UCompanionMoraleStatusEffect, Contribution) == 0x0188);
static_assert(offsetof(UCompanionMoveToWidget, RootBorder) == 0x0300);
static_assert(offsetof(UCompanionOverviewWidget, PortraitInfo) == 0x0300);
static_assert(offsetof(UCompanionOverviewWidget, CompanionPortraitImage) == 0x0308);
static_assert(offsetof(UCompanionOverviewWidget, CompanionBulbImage) == 0x0310);
static_assert(offsetof(UCompanionOverviewWidget, CompanionActionImage) == 0x0318);
static_assert(offsetof(UCompanionOverviewWidget, CompanionTalkImage) == 0x0320);
static_assert(offsetof(UCompanionOverviewWidget, HealthBarImage) == 0x0328);
static_assert(offsetof(UCompanionOverviewWidget, ContentContainerOverlay) == 0x0330);
static_assert(offsetof(UCompanionOverviewWidget, CompanionName) == 0x0338);
static_assert(offsetof(UCompanionOverviewWidget, MainInvalidationBox) == 0x0340);
static_assert(offsetof(UCompanionOverviewWidget, StatusEffectBar) == 0x0348);
static_assert(offsetof(UCompanionOverviewWidget, MoveToImage) == 0x0350);
static_assert(offsetof(UCompanionOverviewWidget, FollowImage) == 0x0358);
static_assert(offsetof(UCompanionPerksWidget, TierHeights) == 0x0330);
static_assert(offsetof(UCompanionPerksWidget, PerkOverlay) == 0x0348);
static_assert(offsetof(UCompanionPerksWidget, PointsAvailableTextBlock) == 0x0350);
static_assert(offsetof(UCompanionPerksWidget, PerkTotalTextBlock) == 0x0358);
static_assert(offsetof(UCompanionPerksWidget, PerkTotalValueTextBlock) == 0x0360);
static_assert(offsetof(UCompanionPerksWidget, List) == 0x0368);
static_assert(offsetof(UCompanionPerksWidget, DescriptionPanel) == 0x0370);
static_assert(offsetof(UCompanionPerksWidget, TierBottomImage) == 0x0378);
static_assert(offsetof(UCompanionPerksWidget, DynamicSizeBox) == 0x0380);
static_assert(offsetof(FCompanionEQSRequest, EQSRequest) == 0x0000);
static_assert(offsetof(FConversationCompanionConfig, Companion1IdealLocation) == 0x0000);
static_assert(offsetof(FConversationCompanionConfig, Companion2IdealLocation) == 0x000C);
static_assert(offsetof(UCompanionPositionComponent, CompanionPositions) == 0x00F0);
static_assert(offsetof(UCompanionPositionComponent, FollowerPositionData) == 0x0100);
static_assert(offsetof(UCompanionPositionComponent, DefaultEQS) == 0x0168);
static_assert(offsetof(UCompanionPositionComponent, StealthEQS) == 0x0190);
static_assert(offsetof(UCompanionPositionComponent, ElevatorEQS) == 0x01B8);
static_assert(offsetof(UCompanionPositionComponent, ConversationConfigs) == 0x01E8);
static_assert(offsetof(UCompanionPositionComponent, MoveToEQS) == 0x0208);
static_assert(offsetof(UCompanionPositionData, PositionActor) == 0x0048);
static_assert(offsetof(UCompanionScreenWrapperWidget, Companions) == 0x0318);
static_assert(offsetof(UCompanionScreenWrapperWidget, ActorRender) == 0x0320);
static_assert(offsetof(UCompanionScreenWrapperWidget, CompanionItemViewer) == 0x0328);
static_assert(offsetof(UCompanionScreenWrapperWidget, PageDimensions) == 0x0330);
static_assert(offsetof(UCompanionSelectionWidget, InputLabelGroup) == 0x0328);
static_assert(offsetof(UCompanionSelectionWidget, CompanionEntry0) == 0x0330);
static_assert(offsetof(UCompanionSelectionWidget, CompanionEntry1) == 0x0338);
static_assert(offsetof(UCompanionSelectionWidget, CompanionEntry2) == 0x0340);
static_assert(offsetof(UCompanionSelectionWidget, CompanionEntry3) == 0x0348);
static_assert(offsetof(UCompanionSelectionWidget, CompanionEntry4) == 0x0350);
static_assert(offsetof(UCompanionSelectionWidget, CompanionEntry5) == 0x0358);
static_assert(offsetof(UCompanionSelectionWidget, EncumberedWarningText) == 0x0360);
static_assert(offsetof(UCompanionSelectionWidget, EncumberenceValueText) == 0x0368);
static_assert(offsetof(UCompanionSelectionWidget, CompanionWidgets) == 0x0370);
static_assert(offsetof(UCompanionSelectionWidget, DisplayOrder) == 0x0380);
static_assert(offsetof(UCompanionSkillSummary, Skill0) == 0x0318);
static_assert(offsetof(UCompanionSkillSummary, Skill1) == 0x0320);
static_assert(offsetof(UCompanionSkillSummary, Skill2) == 0x0328);
static_assert(offsetof(UCompanionSkillSummary, Ability0) == 0x0330);
static_assert(offsetof(UCompanionSkillSummary, Ability1) == 0x0338);
static_assert(offsetof(UCompanionSkillSummary, Ability2) == 0x0340);
static_assert(offsetof(UCompanionSkillSummary, StatsPerkSummary) == 0x0348);
static_assert(offsetof(UCompanionStatSummary, Level) == 0x0300);
static_assert(offsetof(UCompanionStatSummary, Health) == 0x0308);
static_assert(offsetof(UCompanionStatSummary, HelmetArmor) == 0x0310);
static_assert(offsetof(UCompanionStatSummary, BodyArmor) == 0x0318);
static_assert(offsetof(UCompanionStatSummary, MeleeDamage) == 0x0320);
static_assert(offsetof(UCompanionStatSummary, RangedDamage) == 0x0328);
static_assert(offsetof(UCompanionStatSummary, CompanionBehaviors) == 0x0330);
static_assert(offsetof(UCompanionStatSummary, CompanionStatusEffects) == 0x0338);
static_assert(offsetof(UCompanionStatsWidget, CompanionDetails) == 0x0378);
static_assert(offsetof(UCompanionStatsWidget, CompanionStatSummary) == 0x0380);
static_assert(offsetof(UCompanionStatsWidget, CompanionSkillSummary) == 0x0388);
static_assert(offsetof(UCompanionsWidget, StatsWidget) == 0x0330);
static_assert(offsetof(UCompanionsWidget, PerksWidget) == 0x0338);
static_assert(offsetof(UCompanionsWidget, WeaponsEquipmentWidget) == 0x0340);
static_assert(offsetof(UCompanionsWidget, ArmorEquipmentWidget) == 0x0348);
static_assert(offsetof(UCompanionsWidget, NavigationBar) == 0x0350);
static_assert(offsetof(UCompanionsWidget, PageScrollBox) == 0x0358);
static_assert(offsetof(UCompanionsWidget, InputLabelWidget) == 0x0360);
static_assert(offsetof(UCompanionsWidget, FlavorTextWidget) == 0x0368);
static_assert(offsetof(UCompanionsWidget, ScrollingTransitionGroup) == 0x0370);
static_assert(offsetof(UCompanionsWidget, CategoryImages) == 0x0380);
static_assert(offsetof(FEntryData, MaterialInstance) == 0x0000);
static_assert(offsetof(FEntryData, InWorldBeaconImage) == 0x0008);
static_assert(offsetof(UCompassEntryData, EntryDataMap) == 0x0038);
static_assert(offsetof(UCompassEntryWidget, ImageMaterial) == 0x0288);
static_assert(offsetof(UCompassEntryWidget, Image) == 0x0290);
static_assert(offsetof(FCompassAreaBeaconEaseSetting, EaseType) == 0x0000);
static_assert(offsetof(UCompassWidget, BeaconCanvas) == 0x0338);
static_assert(offsetof(UCompassWidget, ContentAnimationSizeBox) == 0x0340);
static_assert(offsetof(UCompassWidget, AnimationBorder) == 0x0348);
static_assert(offsetof(UCompassWidget, EnemiesLeftImage) == 0x0350);
static_assert(offsetof(UCompassWidget, EnemiesRightImage) == 0x0358);
static_assert(offsetof(UCompassWidget, BeaconWidgetClass) == 0x0360);
static_assert(offsetof(UCompassWidget, AvailableCompassWidgets) == 0x0368);
static_assert(offsetof(UCompassWidget, MainInvalidationBox) == 0x0378);
static_assert(offsetof(UCompassWidget, AreaBeaconLight) == 0x0380);
static_assert(offsetof(UCompassWidget, CompassStateMap) == 0x0388);
static_assert(offsetof(UCompassWidget, PointOfInterestStateMap) == 0x03D8);
static_assert(offsetof(UCompassWidget, PointOfInterestActorMap) == 0x0428);
static_assert(offsetof(UCompassWidget, AreaBeaconFadeIn) == 0x0478);
static_assert(offsetof(UCompassWidget, AreaBeaconFadeOut) == 0x0480);
static_assert(offsetof(UCompassWidget, AreaBeaconMovement) == 0x048C);
static_assert(offsetof(UCompassWidget, AreaBeaconLightClamp) == 0x0494);
static_assert(offsetof(UCompassWidget, AreaBeaconDistanceRatioToSpeed) == 0x04A0);
static_assert(offsetof(AComputerTerminal, InitialState) == 0x03A0);
static_assert(offsetof(AComputerTerminal, HackDifficulty) == 0x03A2);
static_assert(offsetof(AComputerTerminal, HackItem) == 0x03A8);
static_assert(offsetof(AComputerTerminal, KeyItem) == 0x03B0);
static_assert(offsetof(AComputerTerminal, SpeakerReference) == 0x03C0);
static_assert(offsetof(AComputerTerminal, SceneComponent) == 0x03D8);
static_assert(offsetof(AComputerTerminal, InteractableComponent) == 0x03E0);
static_assert(offsetof(AComputerTerminal, AkComponent) == 0x03E8);
static_assert(offsetof(AComputerTerminal, IDComponent) == 0x03F0);
static_assert(offsetof(AComputerTerminal, ConversationComponent) == 0x03F8);
static_assert(offsetof(AComputerTerminal, TerminalWidgetComponent) == 0x0400);
static_assert(offsetof(UInteractableAudioComponent, NamedEvents) == 0x00E0);
static_assert(offsetof(UInteractableAudioComponent, EventEffectState) == 0x0130);
static_assert(offsetof(UComputerTerminalAudioComponent, AudioEvents) == 0x0150);
static_assert(offsetof(UComputerTerminalContainerWidget, ComputerLockedImage) == 0x0300);
static_assert(offsetof(UComputerTerminalContainerWidget, ComputerUnlockedImage) == 0x0308);
static_assert(offsetof(UComputerTerminalContainerWidget, ContentContainer) == 0x0310);
static_assert(offsetof(UComputerTerminalContainerWidget, ConversationWidgetClass) == 0x0318);
static_assert(offsetof(UComputerTerminalContainerWidget, ContentWidget) == 0x0320);
static_assert(offsetof(FComputerBrandData, BrandSlogans) == 0x0000);
static_assert(offsetof(FComputerBrandData, BrandIcon) == 0x0010);
static_assert(offsetof(FComputerBrandData, BrandName) == 0x0038);
static_assert(offsetof(UComputerTerminalHeaderData, Brands) == 0x0038);
static_assert(offsetof(UComputerTerminalHeaderData, DLCComputerTerminalHeaderData) == 0x0088);
static_assert(offsetof(UComputerTerminalHeaderWidget, HeaderTextblock) == 0x0310);
static_assert(offsetof(UComputerTerminalHeaderWidget, SubheaderTextblock) == 0x0318);
static_assert(offsetof(UComputerTerminalHeaderWidget, LogoImage) == 0x0320);
static_assert(offsetof(UComputerTerminalHeaderWidget, HeaderHBox) == 0x0328);
static_assert(offsetof(UComputerTerminalHeaderWidget, TextVerticalBox) == 0x0330);
static_assert(offsetof(UComputerTerminalHeaderWidget, ImageSizeBox) == 0x0338);
static_assert(offsetof(UComputerTerminalHeaderWidget, CurrentImageTexture) == 0x0340);
static_assert(offsetof(UConversationBaseWidget, ResponsesContainer) == 0x0328);
static_assert(offsetof(UComputerTerminalWidget, HeaderSlot) == 0x0360);
static_assert(offsetof(UComputerTerminalWidget, BodyTextblock) == 0x0368);
static_assert(offsetof(UComputerTerminalWidget, SelectLabel) == 0x0370);
static_assert(offsetof(UComputerTerminalWidget, ExitLabel) == 0x0378);
static_assert(offsetof(UComputerTerminalWidget, ContinueLabel) == 0x0380);
static_assert(offsetof(UComputerTerminalWidget, ConversationTextScrollBox) == 0x0388);
static_assert(offsetof(UComputerTerminalWidget, ResponseWidgets) == 0x0390);
static_assert(offsetof(UComputerTerminalWidget, ResponseWidgetClass) == 0x03A0);
static_assert(offsetof(UComputerTerminalWidget, DefaultTerminalHeaderClass) == 0x03A8);
static_assert(offsetof(UComputerTerminalWidget, HeaderWidget) == 0x03B0);
static_assert(offsetof(UConsumableAmmoPool, IntrinsicConsumableClasses) == 0x0080);
static_assert(offsetof(UConsumableAmmoPool, CurrentConsumable) == 0x0098);
static_assert(offsetof(UResourceItem, ItemMesh) == 0x0118);
static_assert(offsetof(UConsumableItem, StatusEffect) == 0x0140);
static_assert(offsetof(UConsumableItem, SpellList) == 0x0148);
static_assert(offsetof(UConsumableItem, TagContainer) == 0x01C8);
static_assert(offsetof(UConsumableItem, ConsumableTagContainer) == 0x01E8);
static_assert(offsetof(UConsumableItem, OwnerStatComponent) == 0x0208);
static_assert(offsetof(UConsumableItem, MedKitDurationStat) == 0x0210);
static_assert(offsetof(UConsumableItem, AmmoName) == 0x0218);
static_assert(offsetof(UConsumableItem, AmmoIcon) == 0x0220);
static_assert(offsetof(AContainer, DisplayName) == 0x0408);
static_assert(offsetof(AContainer, SceneComponent) == 0x0410);
static_assert(offsetof(AContainer, OCLComponent) == 0x0418);
static_assert(offsetof(AContainer, InteractableComponent) == 0x0420);
static_assert(offsetof(AContainer, InventoryComponent) == 0x0428);
static_assert(offsetof(AContainer, IDComponent) == 0x0430);
static_assert(offsetof(AContainer, GameplayTag) == 0x0438);
static_assert(offsetof(UConversationCamera, CameraComponent) == 0x00F8);
static_assert(offsetof(UConversationCamera, EyeTargetOffsetAbove) == 0x011C);
static_assert(offsetof(UConversationCamera, EyeTargetOffsetBelow) == 0x0128);
static_assert(offsetof(UConversationCamera, EyeTargetOffsetNormal) == 0x0134);
static_assert(offsetof(UConversationData, ObsidianID) == 0x0030);
static_assert(offsetof(UConversationData, ConversationFile) == 0x0040);
static_assert(offsetof(UConversationData, TriggeredConversations) == 0x0050);
static_assert(offsetof(UConversationData, ReferencedItems) == 0x0060);
static_assert(offsetof(UConversationData, SerializedConversationData) == 0x0070);
static_assert(offsetof(UConversationHistoryWidget, SpeakerClass) == 0x0278);
static_assert(offsetof(UConversationHistoryWidget, SizeBox) == 0x0280);
static_assert(offsetof(UConversationHistoryWidget, ScrollBox) == 0x0288);
static_assert(offsetof(FCharacterDescription, Actor) == 0x0000);
static_assert(offsetof(FCharacterDescription, CharacterReferenceID) == 0x0008);
static_assert(offsetof(FCameraProperties, CameraOffset) == 0x0000);
static_assert(offsetof(FCameraProperties, FixedCameraTarget) == 0x0008);
static_assert(offsetof(FConversationDescription, ConversationData) == 0x0000);
static_assert(offsetof(FConversationDescription, Characters) == 0x0010);
static_assert(offsetof(FConversationDescription, SpeakerCameraOverrides) == 0x0020);
static_assert(offsetof(FConversationDescription, SpeakerAudioOverrides) == 0x0070);
static_assert(offsetof(FConversationDescription, InstanceClass) == 0x00C0);
static_assert(offsetof(FConversationDescription, InstancePayloadActors) == 0x00C8);
static_assert(offsetof(FConversationDescription, BaseCameraProperties) == 0x0118);
static_assert(offsetof(FConversationDescription, OverrideCamera) == 0x0130);
static_assert(offsetof(FConversationDescription, TeleportCondition) == 0x0138);
static_assert(offsetof(FConversationDescription, PlayerTeleport) == 0x01A0);
static_assert(offsetof(FConversationDescription, CompanionOneTeleport) == 0x01B0);
static_assert(offsetof(FConversationDescription, CompanionOnePreference) == 0x01B8);
static_assert(offsetof(FConversationDescription, CompanionTwoTeleport) == 0x01C0);
static_assert(offsetof(FConversationDescription, CompanionTwoPreference) == 0x01C8);
static_assert(offsetof(FConversationDescription, OwnerTeleport) == 0x01D0);
static_assert(offsetof(FTalkDependencies, AnimMontage) == 0x0080);
static_assert(offsetof(FTalkDependencies, AnimFaceFX) == 0x0088);
static_assert(offsetof(UConversationInstance, Description) == 0x0080);
static_assert(offsetof(UConversationInstance, ConversationPlayer) == 0x0350);
static_assert(offsetof(UConversationInstance, TalkDependencies) == 0x0358);
static_assert(offsetof(AConversationLighting, SocketLightReferenceMapping) == 0x02B8);
static_assert(offsetof(AConversationLighting, SocketLightComponentMapping) == 0x0308);
static_assert(offsetof(UConversationManager, CachedConversation) == 0x0078);
static_assert(offsetof(UConversationManager, PreviewPlayer) == 0x0080);
static_assert(offsetof(UConversationManager, ActiveConversations) == 0x0088);
static_assert(offsetof(UConversationManager, LoadedConversations) == 0x00D8);
static_assert(offsetof(UConversationMessageWidget, SpeakerTextColor) == 0x0278);
static_assert(offsetof(UConversationMessageWidget, DialogueTextColor) == 0x0279);
static_assert(offsetof(UConversationMessageWidget, SpeakerTextBlock) == 0x0280);
static_assert(offsetof(UConversationMessageWidget, MessageTextBlock) == 0x0288);
static_assert(offsetof(UConversationMessageWidget, ContentSizeBox) == 0x0290);
static_assert(offsetof(UConversationMessageWidget, ContentVerticalBox) == 0x0298);
static_assert(offsetof(UConversationRegisterComponent, Description) == 0x00E0);
static_assert(offsetof(UConversationRegisterComponent, BasicInterrogationDescription) == 0x02E0);
static_assert(offsetof(UConversationRegisterComponent, InterrogationDescription) == 0x04D8);
static_assert(offsetof(UConversationRegisterComponent, ResumeDescription) == 0x06D8);
static_assert(offsetof(UConversationResponseWidget, ResponsePressedImage) == 0x0278);
static_assert(offsetof(UConversationResponseWidget, ResponseNumberTextBlock) == 0x0280);
static_assert(offsetof(UConversationResponseWidget, MessageTextBlock) == 0x0288);
static_assert(offsetof(UConversationResponseWidget, Button) == 0x0290);
static_assert(offsetof(UConversationResponseWidget, NormalPressedSound) == 0x0298);
static_assert(offsetof(UConversationResponseWidget, SkillCheckPressedSound) == 0x02A0);
static_assert(offsetof(UConversationSubtitleWidget, Subtitle) == 0x0308);
static_assert(offsetof(UConversationWidget, InputLabelContainer) == 0x0360);
static_assert(offsetof(UConversationWidget, ConversationMessage) == 0x0368);
static_assert(offsetof(UConversationWidget, History) == 0x0370);
static_assert(offsetof(UConversationWidget, DottedBGVerticalBox) == 0x0378);
static_assert(offsetof(UConversationWidget, DottedHistoryBGVerticalBox) == 0x0380);
static_assert(offsetof(UConversationWidget, HistoryButton) == 0x0388);
static_assert(offsetof(UConversationWidget, SelectLabel) == 0x0390);
static_assert(offsetof(UConversationWidget, HistoryToggleLabel) == 0x0398);
static_assert(offsetof(UConversationWidget, ScrollLabel) == 0x03A0);
static_assert(offsetof(UConversationWidget, ExitLabel) == 0x03A8);
static_assert(offsetof(UConversationWidget, CanvasOverlay) == 0x03B0);
static_assert(offsetof(UConversationWidget, ConversationOverlay) == 0x03B8);
static_assert(offsetof(UConversationWidget, SpeakerTextBlock) == 0x03C0);
static_assert(offsetof(UConversationWidget, HistoryOverlay) == 0x03C8);
static_assert(offsetof(UConversationWidget, InputOverlay) == 0x03D0);
static_assert(offsetof(UConversationWidget, ConversationSizeOverlay) == 0x03D8);
static_assert(offsetof(UConversationWidget, ResponseOverlay) == 0x03E0);
static_assert(offsetof(UConversationWidget, HistorySizeBox) == 0x03E8);
static_assert(offsetof(UConversationWidget, DialogueSizeBox) == 0x03F0);
static_assert(offsetof(UConversationWidget, ResponseSizeBox) == 0x03F8);
static_assert(offsetof(UConversationWidget, BGGPSizeBox) == 0x0400);
static_assert(offsetof(UConversationWidget, BGPCSizeBox) == 0x0408);
static_assert(offsetof(UConversationWidget, DialogueBorder) == 0x0410);
static_assert(offsetof(UConversationWidget, ResponsesBorder) == 0x0418);
static_assert(offsetof(UConversationWidget, ResponseWidgetClass) == 0x0420);
static_assert(offsetof(UConversationWidget, ResponseWidgets) == 0x0428);
static_assert(offsetof(UConversationWidget, ConversationBackingSourceImageSize) == 0x0438);
static_assert(offsetof(ACorpse, PreSeveredLimbsContainer) == 0x0318);
static_assert(offsetof(ACorpse, DisplayName) == 0x0338);
static_assert(offsetof(ACorpse, Gender) == 0x0340);
static_assert(offsetof(ACorpse, CapsuleComponent) == 0x0348);
static_assert(offsetof(ACorpse, SkeletalMeshComponent) == 0x0350);
static_assert(offsetof(ACorpse, AppearanceComponent) == 0x0358);
static_assert(offsetof(ACorpse, InventoryComponent) == 0x0360);
static_assert(offsetof(ACorpse, InteractableComponent) == 0x0368);
static_assert(offsetof(ACorpse, IDComponent) == 0x0370);
static_assert(offsetof(ACorpse, EquipmentComponent) == 0x0378);
static_assert(offsetof(ACorpse, CreatureType) == 0x0380);
static_assert(offsetof(FCoverAssetCollisionData, BoxExtent) == 0x0000);
static_assert(offsetof(FCoverAssetCollisionData, Transform) == 0x0010);
static_assert(offsetof(ACoverNode, CoverType) == 0x035C);
static_assert(offsetof(ACoverNode, FireAngle) == 0x0388);
static_assert(offsetof(ACoverNode, WorldFiringPosition) == 0x0394);
static_assert(offsetof(ACoverNode, WallAngle) == 0x03A0);
static_assert(offsetof(ACoverNode, WorldWallPosition) == 0x03AC);
static_assert(offsetof(ACoverNodeGenerationVolume, MeshAssetCollisionVolumes) == 0x0350);
static_assert(offsetof(UCreateItemStatusEffect, ItemsToCreate) == 0x0188);
static_assert(offsetof(UCreateItemStatusEffect, CountRule) == 0x0198);
static_assert(offsetof(FCreditsEntry, DebugName) == 0x0000);
static_assert(offsetof(FCreditsEntry, TextType) == 0x0011);
static_assert(offsetof(FCreditsEntry, LocString) == 0x0014);
static_assert(offsetof(FCreditsEntry, SpacingType) == 0x001D);
static_assert(offsetof(FCreditsEntry, ImageAsset) == 0x0020);
static_assert(offsetof(FCreditsEntry, OverrideImageSize) == 0x002C);
static_assert(offsetof(FCreditsGroup, DebugName) == 0x0000);
static_assert(offsetof(FCreditsGroup, Credits) == 0x0010);
static_assert(offsetof(UCreditsData, Credits) == 0x0038);
static_assert(offsetof(UCreditsData, CreditGroups) == 0x0048);
static_assert(offsetof(UCreditsData, CreditsFormattingData) == 0x0058);
static_assert(offsetof(UCreditsFormattingData, TextFormatting) == 0x0038);
static_assert(offsetof(UCreditsFormattingData, SpaceFormatting) == 0x0090);
static_assert(offsetof(UCreditsWidget, CreditsAsset) == 0x0320);
static_assert(offsetof(UCreditsWidget, SwitchCreditsAsset) == 0x0328);
static_assert(offsetof(UCreditsWidget, ActiveVisibility) == 0x0330);
static_assert(offsetof(UCreditsWidget, InactiveVisibility) == 0x0331);
static_assert(offsetof(UCreditsWidget, CreditsScrollBox) == 0x0338);
static_assert(offsetof(UCreditsWidget, CreditsVerticalBox) == 0x0340);
static_assert(offsetof(UCreditsWidget, CreditsMusicGlobalVariable) == 0x0348);
static_assert(offsetof(UCrosshairWidget, RootCanvas) == 0x0300);
static_assert(offsetof(UCrosshairWidget, WeaponContainer) == 0x0308);
static_assert(offsetof(UCrosshairWidget, StandardReticle) == 0x0310);
static_assert(offsetof(UCrosshairWidget, StaticImage) == 0x0318);
static_assert(offsetof(UCrosshairWidget, ReticuleLeft) == 0x0320);
static_assert(offsetof(UCrosshairWidget, ReticuleRight) == 0x0328);
static_assert(offsetof(UCrosshairWidget, ReticuleTop) == 0x0330);
static_assert(offsetof(UCrosshairWidget, ReticuleBottom) == 0x0338);
static_assert(offsetof(UCrosshairWidget, ReticuleCenter) == 0x0340);
static_assert(offsetof(UCrosshairWidget, ReticuleStealth) == 0x0348);
static_assert(offsetof(UCrosshairWidget, ReticleMinimal) == 0x0350);
static_assert(offsetof(UCrosshairWidget, CauseDamageIndicator) == 0x0358);
static_assert(offsetof(AIndianaNavLink, NavLinks) == 0x02C0);
static_assert(offsetof(AReservableNavLink, LeftToRightAISettings) == 0x02D8);
static_assert(offsetof(AReservableNavLink, RightToLeftAISettings) == 0x02E0);
static_assert(offsetof(UCurrencyItem, ItemMesh) == 0x0118);
static_assert(offsetof(FAppliedMaterialParam, DynamicMaterial) == 0x0000);
static_assert(offsetof(FAppliedMaterialParam, ParamType) == 0x0008);
static_assert(offsetof(FAppliedMaterialParam, ParamName) == 0x000C);
static_assert(offsetof(UCustomMaterialModVisual, AppliedMaterialParams) == 0x0068);
static_assert(offsetof(UDamageableComponent, HitLocationData) == 0x00F0);
static_assert(offsetof(UDamageableComponent, HitFeedbackMaterialParam) == 0x00F8);
static_assert(offsetof(UDamageableComponent, HitFeedbackParamCurve) == 0x0100);
static_assert(offsetof(UDamageByGameTagStatusEffect, GameplayTags) == 0x0188);
static_assert(offsetof(UDamageByGameTagStatusEffect, RpgStat) == 0x01A8);
static_assert(offsetof(UDamageEffectWidget, DamageTextBlock) == 0x0310);
static_assert(offsetof(UDamageEffectWidget, ResizeOverlay) == 0x0318);
static_assert(offsetof(UDamageFlagsStatusEffect, DamageFlags) == 0x0188);
static_assert(offsetof(UDamageStatusEffect, DamageValueType) == 0x0190);
static_assert(offsetof(UDamageStatusEffect, BaseDamageType) == 0x0191);
static_assert(offsetof(UDamageStatusEffect, DamageType) == 0x0198);
static_assert(offsetof(UDamageStatusEffect, DamageTypeSecondary) == 0x01A0);
static_assert(offsetof(UDamageStatusEffect, BodyPart) == 0x01A8);
static_assert(offsetof(UDamageStatusEffect, AOECollisionShape) == 0x01C0);
static_assert(offsetof(UDamageStatusEffect, DamageScalingStat) == 0x0200);
static_assert(offsetof(ADamageTextActor, DamageTextComponent) == 0x02D0);
static_assert(offsetof(ADamageTextActor, SceneComponent) == 0x02D8);
static_assert(offsetof(UDeathBehavior, Target) == 0x0038);
static_assert(offsetof(FDeathBodyTypeAudioEvent, DeathAudioEvent) == 0x0000);
static_assert(offsetof(FDeathBodyTypeAudioEvent, AudioEvent) == 0x0008);
static_assert(offsetof(UDeathBodyTypeAudioEvents, AudioEvents) == 0x0038);
static_assert(offsetof(UDeathBodyTypeParticleSystems, ParticleSystems) == 0x0038);
static_assert(offsetof(UDeathClassData, ClassTypeData) == 0x0038);
static_assert(offsetof(UDeathMenuWidget, OptionsVerticalBox) == 0x0308);
static_assert(offsetof(UDeathMenuWidget, ResurrectButton) == 0x0310);
static_assert(offsetof(UDeathMenuWidget, ContinueButton) == 0x0318);
static_assert(offsetof(UDeathMenuWidget, LoadButton) == 0x0320);
static_assert(offsetof(UDeathMenuWidget, SettingsButton) == 0x0328);
static_assert(offsetof(UDeathMenuWidget, MainMenuButton) == 0x0330);
static_assert(offsetof(UDeathMenuWidget, QuitButton) == 0x0338);
static_assert(offsetof(UDeathMenuWidget, MainMenuLevelName) == 0x0340);
static_assert(offsetof(UDeathMenuWidget, SettingsMenuClass) == 0x0350);
static_assert(offsetof(UDeathMenuWidget, SaveLoadClass) == 0x0358);
static_assert(offsetof(UDeathOverrideStatusEffect, DeathClass) == 0x0188);
static_assert(offsetof(UDeathStatusEffect, DamageType) == 0x0188);
static_assert(offsetof(UDebugOverlayWidget, OverlayImage) == 0x0308);
static_assert(offsetof(UDecisionTree_AvoidMeleeAttack, MeleeBlockRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_AvoidMeleeAttack, MetaDodgeTree) == 0x0038);
static_assert(offsetof(UDecisionTree_DefaultMeleeAttack, SearchRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_CanidMeleeAttack, CreateSpaceDashAttackRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_CanidMeleeAttack, DashAttackRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_CanidMeleeAttack, HowlRequest) == 0x0048);
static_assert(offsetof(UDecisionTree_CanidMeleeAttack, DodgeRequest) == 0x0050);
static_assert(offsetof(UDecisionTree_CanidMeleeAttack, HowlStatusEffect) == 0x0060);
static_assert(offsetof(UDecisionTree_CanidOnStatusEffectAdded, HowlRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_CanidOnStatusEffectAdded, DodgeRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_CanidOnStatusEffectAdded, HowlStatusEffect) == 0x0048);
static_assert(offsetof(UDecisionTree_CanidOnStatusEffectAdded, AlphaDeathStatusEffect) == 0x0050);
static_assert(offsetof(UDecisionTree_CanidOnStatusEffectAdded, AlphaDeathFleeRequest) == 0x0058);
static_assert(offsetof(UDecisionTree_CanidMeleeRecovery, DashAttackMeleeAction) == 0x0030);
static_assert(offsetof(UDecisionTree_CanidMeleeRecovery, DashAttackCreateRangeMoveRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_Combined, DecisionTrees) == 0x0030);
static_assert(offsetof(UDecisionTree_CombinedRequests, Requests) == 0x0030);
static_assert(offsetof(UDecisionTree_CombinedRequests, Priority) == 0x0041);
static_assert(offsetof(UDecisionTree_CompanionCalledShot, MeleeCalledShotRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_CompanionCalledShot, UnlimitedRangeCalledShotRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_CompanionCalledShot, LimitedRangeCalledShotRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_CompanionCalledShot, FromFurnitureCalledShotRequest) == 0x0048);
static_assert(offsetof(UDecisionTree_CompanionCalledShot, FromFallCalledShotRequest) == 0x0050);
static_assert(offsetof(UDecisionTree_DefaultAttack, IdleRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_DefaultAttack, MeleeUnreachableDecisionTree) == 0x0038);
static_assert(offsetof(UDecisionTree_DefaultAttack, MeleeDecisionTree) == 0x0040);
static_assert(offsetof(UDecisionTree_DefaultAttack, RangedDecisionTree) == 0x0048);
static_assert(offsetof(UDecisionTree_DefaultAttack, WeaponPreferenceDecisionTree) == 0x0050);
static_assert(offsetof(UDecisionTree_DefaultOutOfCombat, UnawareDecisionTree) == 0x0030);
static_assert(offsetof(UDecisionTree_DefaultOutOfCombat, SuspiciousRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_DefaultOutOfCombat, InvestigateRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_DefaultPacifist, CowerRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_DefaultPacifist, PopRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, CoverRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, QuickCoverRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, RangedRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, RangeRequestNoRangeRequirement) == 0x0048);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, StationaryRangedRequest) == 0x0050);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, AggresiveRangeRequest) == 0x0058);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, RetreatRequest) == 0x0060);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, CompanionRetreatRequest) == 0x0068);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, MoveCloserSearch) == 0x0070);
static_assert(offsetof(UDecisionTree_DefaultRangeAttack, SearchMetaTree) == 0x0078);
static_assert(offsetof(UDecisionTree_DefaultSwitchContext, ApproachRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_DefaultSwitchContext, CombatRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_DefaultSwitchContext, OutOfCombatRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_Dodge, LeftRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_Dodge, BackRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_Dodge, RightRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_ForceCompanionFollow, CompanionFollowRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_GorillianRangeComplete, RequestMeleeDecisionTree) == 0x0030);
static_assert(offsetof(UDecisionTree_GorillianRangeComplete, BurrowRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_GorillianMeleeComplete, BurrowRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_GorillianBurrowComplete, RequestMeleeDecisionTree) == 0x0030);
static_assert(offsetof(UDecisionTree_GorillianBurrowComplete, RequestRangeDecisionTree) == 0x0038);
static_assert(offsetof(UDecisionTree_GorillianCombatStart, RequestMeleeDecisionTree) == 0x0030);
static_assert(offsetof(UDecisionTree_GorillianCombatStart, RequestRangeDecisionTree) == 0x0038);
static_assert(offsetof(UDecisionTree_PrimalRavager, BurrowRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_JumpReposition, JumpForwardMinRange) == 0x0038);
static_assert(offsetof(UDecisionTree_JumpReposition, JumpForwardRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_JumpReposition, JumpStrafeRequest) == 0x0050);
static_assert(offsetof(UDecisionTree_LineOfFireBlocked, DefaultDecisionTree) == 0x0030);
static_assert(offsetof(UDecisionTree_LostTarget, RepositionRequestData) == 0x0030);
static_assert(offsetof(UDecisionTree_LostTarget, SearchRequestData) == 0x0038);
static_assert(offsetof(UDecisionTree_MantiQueenDefaultTree, DefaultAttack) == 0x0030);
static_assert(offsetof(UDecisionTree_MantiQueenDefaultTree, RequestMeleeDecisionTree) == 0x0038);
static_assert(offsetof(UDecisionTree_MantiQueenDefaultTree, RequestRangeDecisionTree) == 0x0040);
static_assert(offsetof(UDecisionTree_MantiQueenDefaultTree, SpitRequest) == 0x0048);
static_assert(offsetof(UDecisionTree_MantiQueenDefaultTree, GlobRequest) == 0x0050);
static_assert(offsetof(UDecisionTree_MantiQueenDefaultTree, TailWhipRequest) == 0x0060);
static_assert(offsetof(UDecisionTree_MantiQueenDefaultTree, SpawnRequest) == 0x0070);
static_assert(offsetof(UDecisionTree_MantiQueenRangeComplete, GlobWeapon) == 0x0030);
static_assert(offsetof(UDecisionTree_MantiQueenRangeComplete, SpitRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_MantiQueenRangeComplete, RequestMeleeDecisionTree) == 0x0040);
static_assert(offsetof(UDecisionTree_MantiBlock, DefaultAttack) == 0x0030);
static_assert(offsetof(UDecisionTree_MantiBlock, BlockRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_MeleeUnreachable, ReachableSearchRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_MeleeUnreachable, UnreachableTargetRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_MeleeUnreachable, RetreatRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_PreEmptiveMeleeAction, MeleeBlockRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_PreEmptiveMeleeAction, MetaDodgeTree) == 0x0038);
static_assert(offsetof(UDecisionTree_QueueBehavior, IdleRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_QueueBehavior, PatrolRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_QueueBehavior, WanderRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_QueueBehavior, FurnitureRequest) == 0x0048);
static_assert(offsetof(UDecisionTree_QueueBehavior, CompanionFollowRequest) == 0x0050);
static_assert(offsetof(UDecisionTree_QueueBehavior, JumpRequest) == 0x0058);
static_assert(offsetof(UDecisionTree_QueueBehavior, CrouchRequest) == 0x0060);
static_assert(offsetof(UDecisionTree_QueueBehavior, FollowRequest) == 0x0068);
static_assert(offsetof(UDecisionTree_QueueBehavior, WalkRequest) == 0x0070);
static_assert(offsetof(FRandomRequestItem, Request) == 0x0000);
static_assert(offsetof(UDecisionTree_RandomRequest, RandomRequestItems) == 0x0038);
static_assert(offsetof(UDecisionTree_RaptidonMatriarchOnPhaseChange, SwitchWeaponPreferenceRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_ReactiveRangeAction, MetaDodgeTree) == 0x0030);
static_assert(offsetof(UDecisionTree_ReactiveRangeAction, MetaBlockTree) == 0x0038);
static_assert(offsetof(UDecisionTree_SecurityBotOutOfCombat, DefaultOutOfCombatDecisionTree) == 0x0030);
static_assert(offsetof(UDecisionTree_SecurityBotOutOfCombat, DeactivatedRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_WeaponPreference, SwitchToPrimaryWeaponRequest) == 0x0030);
static_assert(offsetof(UDecisionTree_WeaponPreference, SwitchToRangedWeaponRequest) == 0x0038);
static_assert(offsetof(UDecisionTree_WeaponPreference, SwitchToLimitedRangedWeaponRequest) == 0x0040);
static_assert(offsetof(UDecisionTree_WeaponPreference, SwitchToUnlimitedRangedWeaponRequest) == 0x0048);
static_assert(offsetof(UDecisionTree_WeaponPreference, SwitchToMeleeWeaponRequest) == 0x0050);
static_assert(offsetof(UDecisionTree_WeaponPreference, SwitchToUnarmedWeaponRequest) == 0x0058);
static_assert(offsetof(UDecisionTree_WeaponPreference, OverrideWeaponPreference) == 0x0062);
static_assert(offsetof(UDecisionTree_WeaponSwapByPhase, PhaseWeaponArray) == 0x0030);
static_assert(offsetof(FDecisionTreeStack, DecisionTrees) == 0x0000);
static_assert(offsetof(FDecisionTreeContextMap, DefaultDecisionTrees) == 0x0000);
static_assert(offsetof(FDecisionTreeContextMap, DecisionTreeMap) == 0x0010);
static_assert(offsetof(UDecisionTreeComponent, DecisionTreeContextMap) == 0x00E8);
static_assert(offsetof(UDecisionTreeComponent, DecisionTreeProcessor) == 0x0158);
static_assert(offsetof(UDecisionTreeComponent, OutOfCombatDecisionTreeProcessor) == 0x0160);
static_assert(offsetof(FDecisionTreeMapElement, EventType) == 0x0000);
static_assert(offsetof(FDecisionTreeMapElement, DecisionTree) == 0x0008);
static_assert(offsetof(UDecisionTreeDesignerData, DefaultDecisionTree) == 0x0038);
static_assert(offsetof(UDecisionTreeDesignerData, DecisionTreeMap) == 0x0040);
static_assert(offsetof(UDecisionTreeDesignerDataBundle, DecisionTreeMaps) == 0x0038);
static_assert(offsetof(FDecisionTreeResult, EventInfo) == 0x0010);
static_assert(offsetof(FDecisionTreeResult, DecisionTreeRequests) == 0x0020);
static_assert(offsetof(UDecisionTreeProcessor, DecisionTreeResultQueue) == 0x0038);
static_assert(offsetof(UDecisionTreeProcessor, CurrentProcessedStateInfo) == 0x0048);
static_assert(offsetof(UDecisionTreeProcessor, ProcessedStateInfoSequence) == 0x0058);
static_assert(offsetof(UDecisionTreeSequenceRequestData, Requests) == 0x0038);
static_assert(offsetof(UDecisionTreeSequenceRequestData, Priority) == 0x0048);
static_assert(offsetof(UDerivedStatWidget, Name) == 0x0300);
static_assert(offsetof(UDerivedStatWidget, Description) == 0x0308);
static_assert(offsetof(UDerivedStatWidget, Button) == 0x0310);
static_assert(offsetof(UDerivedStatWidget, NameTextBlock) == 0x0318);
static_assert(offsetof(UDerivedStatWidget, ValueTextBlock) == 0x0320);
static_assert(offsetof(UDestructibleAudioComponent, AudioEvents) == 0x0150);
static_assert(offsetof(UDialogBoxWidget, ConfirmLabel) == 0x0348);
static_assert(offsetof(UDialogBoxWidget, BackLabel) == 0x0350);
static_assert(offsetof(UDialogBoxWidget, ContentVerticalBox) == 0x0358);
static_assert(offsetof(UDialogBoxWidget, KeyboardInputBox) == 0x0360);
static_assert(offsetof(UDialogBoxWidget, GamepadInputBox) == 0x0368);
static_assert(offsetof(UDialogBoxWidget, BackingBotSizeBox) == 0x0370);
static_assert(offsetof(UDialogBoxWidget, TextBlock) == 0x0378);
static_assert(offsetof(UDialogBoxWidget, SubTextBlock) == 0x0380);
static_assert(offsetof(UDialogBoxWidget, ConfirmButton) == 0x0388);
static_assert(offsetof(UDialogBoxWidget, ConfirmTextBlock) == 0x0390);
static_assert(offsetof(UDialogBoxWidget, CancelButton) == 0x0398);
static_assert(offsetof(UDialogBoxWidget, CancelTextBlock) == 0x03A0);
static_assert(offsetof(UDialogBoxRespecWidget, TextBlockMiddle) == 0x03B8);
static_assert(offsetof(UDialogBoxRespecWidget, TextBlockEnd) == 0x03C0);
static_assert(offsetof(UDialogWarningBoxWidget, ConfirmLabel) == 0x0328);
static_assert(offsetof(UDialogWarningBoxWidget, BackLabel) == 0x0330);
static_assert(offsetof(UDialogWarningBoxWidget, BodyTextblock) == 0x0338);
static_assert(offsetof(UDialogWarningBoxWidget, KeyboardInputBox) == 0x0340);
static_assert(offsetof(UDialogWarningBoxWidget, GamepadInputBox) == 0x0348);
static_assert(offsetof(UDialogWarningBoxWidget, ConfirmButton) == 0x0350);
static_assert(offsetof(UDialogWarningBoxWidget, CancelButton) == 0x0358);
static_assert(offsetof(UDifficultyManager, Difficulty) == 0x0050);
static_assert(offsetof(FDifficultyModifier, Curve) == 0x0008);
static_assert(offsetof(FDifficultyStatModifierDescription, DifficultyModifiers) == 0x0010);
static_assert(offsetof(UDifficultyRpgStatModifiers, RpgStatMods) == 0x0038);
static_assert(offsetof(UDifficultySelectWidget, InputLabelGroup) == 0x0340);
static_assert(offsetof(UDifficultySelectWidget, SelectDifficultyPanel) == 0x0348);
static_assert(offsetof(UDifficultySelectWidget, EasyButton) == 0x0350);
static_assert(offsetof(UDifficultySelectWidget, NormalButton) == 0x0358);
static_assert(offsetof(UDifficultySelectWidget, HardButton) == 0x0360);
static_assert(offsetof(UDifficultySelectWidget, SuperNovaButton) == 0x0368);
static_assert(offsetof(UDifficultySelectWidget, DifficultyTextBlock) == 0x0370);
static_assert(offsetof(UDifficultySelectWidget, DifficultyButtonContainer) == 0x0378);
static_assert(offsetof(UDifficultySelectWidget, DifficultyScrollBox) == 0x0380);
static_assert(offsetof(UDifficultySelectWidget, ConversationScrollBox) == 0x0388);
static_assert(offsetof(UDifficultySelectWidget, SubtitleSettingsPanel) == 0x0398);
static_assert(offsetof(UDifficultySelectWidget, ConversationTextMenuSlot) == 0x03A0);
static_assert(offsetof(UDifficultySelectWidget, ShowBarkMenuSlot) == 0x03A8);
static_assert(offsetof(UDifficultySelectWidget, ShowCinematicMenuSlot) == 0x03B0);
static_assert(offsetof(UDifficultySelectWidget, FontSizeMenuSlot) == 0x03B8);
static_assert(offsetof(UDifficultySelectWidget, ConversationSubOptionHeader) == 0x03C0);
static_assert(offsetof(UDifficultySelectWidget, ConversationDescriptionTextBlock) == 0x03C8);
static_assert(offsetof(UDifficultySelectWidget, ConversationButtonContainer) == 0x03D0);
static_assert(offsetof(UDifficultySelectWidget, InteractionButtonContainer) == 0x03D8);
static_assert(offsetof(UDifficultySelectWidget, ContinueButton) == 0x03E0);
static_assert(offsetof(UDifficultySelectWidget, ConversationDefaultButton) == 0x03E8);
static_assert(offsetof(UDifficultySelectWidget, OptionPresenterClass) == 0x03F0);
static_assert(offsetof(UDifficultySelectWidget, ConversationTextSetting) == 0x03F8);
static_assert(offsetof(UDifficultySelectWidget, ShowBarkSubtitleSetting) == 0x0400);
static_assert(offsetof(UDifficultySelectWidget, ShowCinematicSubtitleSetting) == 0x0408);
static_assert(offsetof(UDifficultySelectWidget, FontSizeSetting) == 0x0410);
static_assert(offsetof(UDifficultySelectWidget, SettingsData) == 0x0418);
static_assert(offsetof(UDifficultySelectWidget, SubtitleSettingsClassRef) == 0x0420);
static_assert(offsetof(UDifficultySelectWidget, FontSizeSettingsClassRef) == 0x0428);
static_assert(offsetof(UDifficultySelectWidget, SliderClass) == 0x0430);
static_assert(offsetof(UDifficultySelectWidget, ContinueLabelDesc) == 0x0448);
static_assert(offsetof(UDirt, DirtTexture) == 0x0038);
static_assert(offsetof(UDisableBehaviorStateInfo, DisableStatusEffect) == 0x0120);
static_assert(offsetof(UDisguiseData, Key) == 0x0038);
static_assert(offsetof(UDisguiseData, FactionData) == 0x0040);
static_assert(offsetof(UDisguiseData, ArmorAppearance) == 0x0048);
static_assert(offsetof(UDisguiseData, HelmetAppearance) == 0x0050);
static_assert(offsetof(FLogicalExpressionGroup, Operator) == 0x0000);
static_assert(offsetof(FLogicalExpressionGroup, Expression) == 0x0008);
static_assert(offsetof(FLogicalGroupedExpression, BaseExpression) == 0x0000);
static_assert(offsetof(FLogicalGroupedExpression, AdditionalExpressions) == 0x0068);
static_assert(offsetof(UQuestItem, QuestItemType) == 0x011C);
static_assert(offsetof(UQuestItem, ItemMesh) == 0x0128);
static_assert(offsetof(UQuestItem, LootableCondition) == 0x0150);
static_assert(offsetof(UDisguiseMeterWidget, MainInvalidationBox) == 0x0300);
static_assert(offsetof(UDisguiseMeterWidget, DisguiseMeterImage) == 0x0308);
static_assert(offsetof(UDisguiseMeterWidget, DisguiseDifficultyUnused) == 0x0310);
static_assert(offsetof(UDisguiseMeterWidget, DisguiseDifficultyUsed) == 0x0318);
static_assert(offsetof(UDisguiseMeterWidget, NormalFrame) == 0x0320);
static_assert(offsetof(UDisguiseMeterWidget, RedFrame) == 0x0328);
static_assert(offsetof(UDisguiseMeterWidget, FactionDisguiseImage) == 0x0330);
static_assert(offsetof(UDisguiseMeterWidget, DisguiseTipHorizontalBox) == 0x0338);
static_assert(offsetof(UDisguiseMeterWidget, DisguiseTipFadeHorizontalBox) == 0x0340);
static_assert(offsetof(UDisguiseMeterWidget, DisguiseStatusTextBlock) == 0x0348);
static_assert(offsetof(UDisguiseMeterWidget, FrameBorder) == 0x0350);
static_assert(offsetof(UDisguiseMeterWidget, ProjectorFrame) == 0x0358);
static_assert(offsetof(UDisguiseMeterWidget, LightImage) == 0x0360);
static_assert(offsetof(UDisguiseMeterWidget, GlowBorder) == 0x0368);
static_assert(offsetof(UDisguiseMeterWidget, DisguiseChecksHorizontalBox) == 0x0370);
static_assert(offsetof(UDisguiseMeterWidget, DefaultImage) == 0x0378);
static_assert(offsetof(UDisguiseMeterWidget, EnvironmentInteractionComponent) == 0x03A0);
static_assert(offsetof(UDisguiseStatusEffect, FactionData) == 0x0188);
static_assert(offsetof(UDodgeRequestData, DodgeDirection) == 0x0068);
static_assert(offsetof(ADoor, SceneComponent) == 0x03F0);
static_assert(offsetof(ADoor, OCLComponent) == 0x03F8);
static_assert(offsetof(ADoor, IDComponent) == 0x0400);
static_assert(offsetof(ADoor, InteractableComponent) == 0x0408);
static_assert(offsetof(ADoor, NavModComponent) == 0x0410);
static_assert(offsetof(ADoor, TravelTriggerComponent) == 0x0418);
static_assert(offsetof(UDragContainerWidget, OperationClass) == 0x02A8);
static_assert(offsetof(UDragContainerWidget, NamedSlot) == 0x02B0);
static_assert(offsetof(UItemCellVisualsWidget, Image) == 0x0278);
static_assert(offsetof(ADynamicTOD, IDComponent) == 0x0458);
static_assert(offsetof(ADynamicTOD, SunLightColor) == 0x0468);
static_assert(offsetof(ADynamicTOD, SunLightIntensity) == 0x0670);
static_assert(offsetof(ADynamicTOD, MoonLightColor) == 0x06F8);
static_assert(offsetof(ADynamicTOD, MoonLightIntensity) == 0x0900);
static_assert(offsetof(ADynamicTOD, LightIntensity) == 0x0988);
static_assert(offsetof(ADynamicTOD, SkyLightIntensity) == 0x0A10);
static_assert(offsetof(ADynamicTOD, StarBrightness) == 0x0A98);
static_assert(offsetof(ADynamicTOD, SunSpriteScale) == 0x0B20);
static_assert(offsetof(ADynamicTOD, LightColor) == 0x0BA8);
static_assert(offsetof(ADynamicTOD, WeatherType) == 0x0DB4);
static_assert(offsetof(ADynamicTOD, SunRotationOffset) == 0x0DB8);
static_assert(offsetof(ADynamicTOD, MoonRotationOffset) == 0x0DC8);
static_assert(offsetof(ADynamicTOD, NoWeatherStateName) == 0x0DD8);
static_assert(offsetof(ADynamicTOD, GlobalMaterialParameterCollection) == 0x0DE0);
static_assert(offsetof(ADynamicTOD, GlobalMaterialWholeSceneLightVectorParameterName) == 0x0DE8);
static_assert(offsetof(ADynamicTOD, GlobalMaterialSunColorParameterName) == 0x0DF0);
static_assert(offsetof(ADynamicTOD, GlobalMaterialStarsIntensityParameterName) == 0x0DF8);
static_assert(offsetof(ADynamicTOD, GlobalMaterialNormalizedTimeParameterName) == 0x0E00);
static_assert(offsetof(ADynamicTOD, MoonsMaterialParameterCollection) == 0x0E08);
static_assert(offsetof(ADynamicTOD, UseDebugTimePropertyName) == 0x0E10);
static_assert(offsetof(ADynamicTOD, DebugTimePropertyName) == 0x0E18);
static_assert(offsetof(ADynamicTOD, AutoUpdateSkyCapturePropertyName) == 0x0E20);
static_assert(offsetof(ADynamicTOD, EnableLoggingPropertyName) == 0x0E28);
static_assert(offsetof(ADynamicTOD, AutoUpdateDebugTimePropertyName) == 0x0E30);
static_assert(offsetof(ADynamicTOD, DebugWeatherPropertyName) == 0x0E38);
static_assert(offsetof(ADynamicTOD, SunDynamicShadowDistancePropertyName) == 0x0E40);
static_assert(offsetof(ADynamicTOD, MoonDynamicShadowDistancePropertyName) == 0x0E48);
static_assert(offsetof(ADynamicTOD, RainAndLightMaskPropertyName) == 0x0E50);
static_assert(offsetof(ADynamicTOD, SunElevationPropertyName) == 0x0E58);
static_assert(offsetof(ADynamicTOD, MoonElevationPropertyName) == 0x0E60);
static_assert(offsetof(ADynamicTOD, MaterialSpecularNearFarPropertyName) == 0x0E68);
static_assert(offsetof(ADynamicTOD, WetMaterialSpecularNearFarPropertyName) == 0x0E70);
static_assert(offsetof(ADynamicTOD, DrySkyProbeMipBrightnessPropertyName) == 0x0E78);
static_assert(offsetof(ADynamicTOD, WetSkyProbeMipBrightnessPropertyName) == 0x0E80);
static_assert(offsetof(ADynamicTOD, MoonLightIntensityPropertyName) == 0x0E88);
static_assert(offsetof(ADynamicTOD, MoonLightColorPropertyName) == 0x0E90);
static_assert(offsetof(ADynamicTOD, RandomWeatherStartPropertyName) == 0x0E98);
static_assert(offsetof(ADynamicTOD, WeatherStartChancePropertyName) == 0x0EA0);
static_assert(offsetof(ADynamicTOD, WeatherStartEventPropertyName) == 0x0EA8);
static_assert(offsetof(ADynamicTOD, WeatherEndEventPropertyName) == 0x0EB0);
static_assert(offsetof(ADynamicTOD, WeatherStateGroupPropertyName) == 0x0EB8);
static_assert(offsetof(ADynamicTOD, WetnessPropertyName) == 0x0EC8);
static_assert(offsetof(ADynamicTOD, StepShadowTimeBetweenUpdatesPropertyName) == 0x0ED0);
static_assert(offsetof(ADynamicTOD, StepShadowUpdateLengthPropertyName) == 0x0ED8);
static_assert(offsetof(ADynamicTOD, SpawnedWeatherPSPropertyName) == 0x0EE0);
static_assert(offsetof(AElevator, SceneComponent) == 0x0328);
static_assert(offsetof(AElevator, CarriageComponent) == 0x0330);
static_assert(offsetof(AElevator, FrameMeshComponent) == 0x0338);
static_assert(offsetof(AElevator, SplineComponent) == 0x0340);
static_assert(offsetof(AElevator, IDComponent) == 0x0348);
static_assert(offsetof(AElevator, AkComponent) == 0x0350);
static_assert(offsetof(AElevator, ExternalDoors) == 0x0368);
static_assert(offsetof(AElevator, OriginExternalDoor) == 0x0378);
static_assert(offsetof(AElevator, DestinationExternalDoor) == 0x0380);
static_assert(offsetof(AElevator, GhostNavMesh_StartFloor) == 0x0388);
static_assert(offsetof(AElevator, GhostNavMesh_EndFloor) == 0x0390);
static_assert(offsetof(AElevator, FloorGhostNavMeshes) == 0x0398);
static_assert(offsetof(AElevator, WaitLocationLeft) == 0x03A8);
static_assert(offsetof(AElevator, WaitLocationMiddle) == 0x03B0);
static_assert(offsetof(AElevator, WaitLocationRight) == 0x03B8);
static_assert(offsetof(AElevator, WaitLocations) == 0x03C0);
static_assert(offsetof(AElevator, TravelTriggerComponent) == 0x03D0);
static_assert(offsetof(UElevatorAudioComponent, AudioEvents) == 0x0150);
static_assert(offsetof(UIdleDisableStatusEffect, DisablePriority) == 0x0198);
static_assert(offsetof(FEmotionEntry, TalkingSequences) == 0x0000);
static_assert(offsetof(FEmotionEntry, Idle) == 0x0050);
static_assert(offsetof(FEmotionEntry, DialogIdle) == 0x0060);
static_assert(offsetof(FEmotionEntry, IdleStates) == 0x0070);
static_assert(offsetof(FEmotionEntry, WalkForwardSequence) == 0x0080);
static_assert(offsetof(FEmotionEntry, BeginEmotionSequence) == 0x0088);
static_assert(offsetof(FEmotionEntry, EmotionAdditiveLayerStart) == 0x0090);
static_assert(offsetof(FEmotionEntry, EmotionAdditiveLayer) == 0x0098);
static_assert(offsetof(UEmotionData, Emotions) == 0x0038);
static_assert(offsetof(UEnableEmitterModVisual, EmitterNames) == 0x0068);
static_assert(offsetof(FPotentialEncounterList, EncounterList) == 0x0000);
static_assert(offsetof(FEncounterClearConditions, ForceClearConditions) == 0x0000);
static_assert(offsetof(FEncounterClearConditions, ClearConditions) == 0x0078);
static_assert(offsetof(FEncounterActivationConditions, ValidConditions) == 0x0000);
static_assert(offsetof(FEncounterActivationConditions, ValidTimePhases) == 0x0080);
static_assert(offsetof(AEncounter, EncounterLists) == 0x0340);
static_assert(offsetof(AEncounter, PotentialEncounterLists) == 0x0350);
static_assert(offsetof(AEncounter, ClearConditions) == 0x0368);
static_assert(offsetof(AEncounter, CooldownTime) == 0x0464);
static_assert(offsetof(AEncounter, EnabledConditions) == 0x0478);
static_assert(offsetof(AEncounter, ActivationActor) == 0x0514);
static_assert(offsetof(AEncounter, TeamOverride) == 0x0548);
static_assert(offsetof(AEncounter, AggroType) == 0x0558);
static_assert(offsetof(AEncounter, ObsidianID) == 0x0560);
static_assert(offsetof(AEncounter, PseudoGodModeOverride) == 0x0600);
static_assert(offsetof(UEncounterEnemyScaled, ScaledActorTable) == 0x0038);
static_assert(offsetof(UEncounterEnemyFixed, ActorClass) == 0x0038);
static_assert(offsetof(UEncounterCompositionBase, ValidConditions) == 0x0030);
static_assert(offsetof(UEncounterCompositionStandard, EncounterEnemies) == 0x00B0);
static_assert(offsetof(UEncounterCompositionSubList, SubEncounterList) == 0x00B0);
static_assert(offsetof(UEncounterList, ValidConditions) == 0x0040);
static_assert(offsetof(UEncounterList, ClearConditions) == 0x00D8);
static_assert(offsetof(UEncounterList, EncounterCompositions) == 0x01D0);
static_assert(offsetof(UEnemyDifficultyWidget, DifficultSymbol) == 0x0300);
static_assert(offsetof(UEnemyDifficultyWidget, LevelTextBlock) == 0x0308);
static_assert(offsetof(UEnemyScannerWidget, NameValueTextBlock) == 0x0300);
static_assert(offsetof(UEnemyScannerWidget, FactionValueTextBlock) == 0x0308);
static_assert(offsetof(UEnemyScannerWidget, LevelValueTextBlock) == 0x0310);
static_assert(offsetof(UEnemyScannerWidget, HealthValueTextBlock) == 0x0318);
static_assert(offsetof(UEnemyScannerWidget, ArmorValueTextBlock) == 0x0320);
static_assert(offsetof(UEnemyScannerWidget, StrongAgainstValueTextBlock) == 0x0328);
static_assert(offsetof(UEnemyScannerWidget, WeakAgainstValueTextBlock) == 0x0330);
static_assert(offsetof(UEnemyScannerWidget, StrongAgainstBox) == 0x0338);
static_assert(offsetof(UEnemyScannerWidget, WeakAgainstBox) == 0x0340);
static_assert(offsetof(UEnvQueryGenerator_Cover, SearchRadius) == 0x0058);
static_assert(offsetof(UEnvQueryGenerator_Cover, CoverTypesProvider) == 0x0090);
static_assert(offsetof(UEnvQueryGenerator_Cover, SearchCenter) == 0x00C8);
static_assert(offsetof(UEnvQueryGenerator_FeetLocation, QueryContext) == 0x0058);
static_assert(offsetof(UEnvQueryTest_CanSeeCharacter, EnemyContext) == 0x0200);
static_assert(offsetof(UEnvQueryTest_Cover, EnemyContext) == 0x0200);
static_assert(offsetof(UEnvQueryTest_FollowerPos, OriginContext) == 0x0200);
static_assert(offsetof(UEnvQueryTest_FollowerPos, ForwardContext) == 0x0208);
static_assert(offsetof(UEnvQueryTest_FollowerPos, IdealAngleProvider) == 0x0210);
static_assert(offsetof(UEnvQueryTest_FollowerPos, MinAngleProvider) == 0x0248);
static_assert(offsetof(UEnvQueryTest_HasIndianaTag, TagsToMatch) == 0x0208);
static_assert(offsetof(UEnvQueryTest_IsActorOfClass, ActorClass) == 0x0200);
static_assert(offsetof(UEnvQueryTest_NavmeshRaycast, DestinationContext) == 0x0200);
static_assert(offsetof(UEnvQueryTest_OccupiedRaycast, DestinationContext) == 0x0200);
static_assert(offsetof(UEnvQueryTest_OccupiedRaycast, OccupationChannel) == 0x0208);
static_assert(offsetof(UEnvQueryTest_OccupiedRaycast, AttitudeFlags) == 0x0210);
static_assert(offsetof(UEnvQueryTest_OccupiedEnvironmentNodes, IgnoreNodesOccupiedByQueryOwner) == 0x0200);
static_assert(offsetof(UEnvQueryTest_PreferredCover, MinPreferredRangeProvider) == 0x0208);
static_assert(offsetof(UEnvQueryTest_PreferredCover, MaxPreferredRangeProvider) == 0x0240);
static_assert(offsetof(UEnvQueryTest_Ranged, TargetContext) == 0x0200);
static_assert(offsetof(UEnvQueryTest_PreferredRanged, MinPreferredRangeProvider) == 0x0208);
static_assert(offsetof(UEnvQueryTest_PreferredRanged, MaxPreferredRangeProvider) == 0x0240);
static_assert(offsetof(UEnvQueryTest_PreferredRanged, RepositionTypeProvider) == 0x0278);
static_assert(offsetof(UEnvQueryTest_PreferredRanged, MinDirectionBiasProvider) == 0x02B0);
static_assert(offsetof(UEnvQueryTest_Projectile, DestinationContext) == 0x0200);
static_assert(offsetof(UEnvQueryTest_ValidCoverFire, ShouldRunTest) == 0x0208);
static_assert(offsetof(FAISelector_EQSParameter, EQSParameter) == 0x0000);
static_assert(offsetof(FAIDynamicParam_IndianaBase, ParamName) == 0x0000);
static_assert(offsetof(FAIDynamicParam_IndianaBase, ParamType) == 0x0008);
static_assert(offsetof(FAIDynamicParam_IndianaBase, ValueSelector) == 0x0010);
static_assert(offsetof(UEQSRequest_IndianaBase, QueryTemplate) == 0x0038);
static_assert(offsetof(UEQSRequest_IndianaBase, QueryConfig) == 0x0040);
static_assert(offsetof(UEQSRequest_IndianaBase, RunMode) == 0x0050);
static_assert(offsetof(FWeaponSlot, Weapon) == 0x0000);
static_assert(offsetof(FMedKitConsumableSlot, Consumable) == 0x0000);
static_assert(offsetof(UEquipmentComponent, WeaponAttachSocket) == 0x0260);
static_assert(offsetof(UEquipmentComponent, DefaultEquippedWeaponItem) == 0x0268);
static_assert(offsetof(UEquipmentComponent, PendingWeaponToEquip) == 0x02C8);
static_assert(offsetof(UEquipmentComponent, EquippedWeapon) == 0x02D0);
static_assert(offsetof(UEquipmentComponent, WeaponSlots) == 0x02D8);
static_assert(offsetof(UEquipmentComponent, DefaultArmorSetItem) == 0x0320);
static_assert(offsetof(UEquipmentComponent, DefaultHelmetItem) == 0x0370);
static_assert(offsetof(UEquipmentComponent, PermanentDisguise) == 0x0390);
static_assert(offsetof(UEquipmentComponent, NewArmorSlots) == 0x0398);
static_assert(offsetof(UEquipmentComponent, DisguiseArmorSlots) == 0x03A8);
static_assert(offsetof(UEquipmentComponent, CurrentDisguise) == 0x03E0);
static_assert(offsetof(UEquipmentComponent, MedKitConsumableSlots) == 0x0460);
static_assert(offsetof(UEquipmentComponent, DefaultMedKitConsumable) == 0x0470);
static_assert(offsetof(UEquipmentComponent, FirstMedKitSlotConsumable) == 0x0478);
static_assert(offsetof(UEquipmentComponent, GadgetSlots) == 0x0480);
static_assert(offsetof(UEquipmentModsWidget, ArmorModImages) == 0x0300);
static_assert(offsetof(UEquipmentModsWidget, WeaponModImages) == 0x0350);
static_assert(offsetof(UEquipmentModsWidget, Mod0Widget) == 0x03A0);
static_assert(offsetof(UEquipmentModsWidget, Mod1Widget) == 0x03A8);
static_assert(offsetof(UEquipmentModsWidget, Mod2Widget) == 0x03B0);
static_assert(offsetof(UEquipmentModsWidget, Mod3Widget) == 0x03B8);
static_assert(offsetof(UEquipmentModWidget, UninstalledTexture) == 0x0280);
static_assert(offsetof(UEquipmentModWidget, InstalledTexture) == 0x0288);
static_assert(offsetof(UEquipmentModWidget, IconImage) == 0x0290);
static_assert(offsetof(UEquipmentModWidget, NameTextBlock) == 0x0298);
static_assert(offsetof(UEquipmentModWidget, DescriptionTextBlock) == 0x02A0);
static_assert(offsetof(UEventEffects, Effects) == 0x0030);
static_assert(offsetof(UFactionListener, Faction) == 0x0058);
static_assert(offsetof(UFactionListener, Attitude) == 0x0061);
static_assert(offsetof(UFactionListener, CreatureTypes) == 0x0068);
static_assert(offsetof(UFactionListener, CreatureRoles) == 0x0088);
static_assert(offsetof(UOnKillListener, WeaponCategory) == 0x00B0);
static_assert(offsetof(UOnCompanionKillListener, CheckDamageFlags) == 0x00B0);
static_assert(offsetof(UOnKillTurnToAshListener, DamageType) == 0x00B0);
static_assert(offsetof(UOnCausedDamage, CheckDamageFlags) == 0x00B0);
static_assert(offsetof(UOnCausedDamage, CheckNotDamageFlags) == 0x00C0);
static_assert(offsetof(UOnCausedDamage, DamageType) == 0x00E0);
static_assert(offsetof(UOnCausedDamage, Skill) == 0x00E8);
static_assert(offsetof(UOnReceiveDamage, WeaponTypes) == 0x00B0);
static_assert(offsetof(UOnReceiveDamage, DamageType) == 0x00D0);
static_assert(offsetof(UOnReceiveDamage, TTDState) == 0x00D8);
static_assert(offsetof(UOnMeleeHit, MeleeType) == 0x00B0);
static_assert(offsetof(UOnMeleeHit, MeleeAction) == 0x00B1);
static_assert(offsetof(UOnMeleeActionStart, MeleeAction) == 0x0058);
static_assert(offsetof(UOnMeleeActionEnd, MeleeAction) == 0x0058);
static_assert(offsetof(UOnSpellCast, Spell) == 0x0058);
static_assert(offsetof(UOnSpellRemoved, Spell) == 0x0058);
static_assert(offsetof(UOnIndividualDetected, Operator) == 0x00B4);
static_assert(offsetof(UOnStatusEffectAddedEvent, StatusEffect) == 0x0058);
static_assert(offsetof(UOnStatusEffectRemovedEvent, StatusEffect) == 0x0058);
static_assert(offsetof(UOnNumHostileStatusEffects, Operator) == 0x0058);
static_assert(offsetof(UHasStatusEffectsEvent, StatusEffects) == 0x0058);
static_assert(offsetof(UOnSkillUsedEvent, Skill) == 0x0058);
static_assert(offsetof(UOnSkillEndedEvent, Skill) == 0x0058);
static_assert(offsetof(UOnSkillCheckSuccess, Skill) == 0x0058);
static_assert(offsetof(UOnSkillCheckSuccess, XPReason) == 0x0059);
static_assert(offsetof(UOnItemConsumed, ItemType) == 0x0058);
static_assert(offsetof(UReputationListener, Faction) == 0x0058);
static_assert(offsetof(UReputationListener, ReputationType) == 0x0060);
static_assert(offsetof(UOnPartyChange, Operator) == 0x005C);
static_assert(offsetof(UOnBehaviorStateChange, BehaviorState) == 0x0058);
static_assert(offsetof(UOnBehaviorStateChange, EventType) == 0x0059);
static_assert(offsetof(UOnCalledShotCameraChange, CameraStepChange) == 0x0058);
static_assert(offsetof(UOnCompanionCommandIssued, Command) == 0x0058);
static_assert(offsetof(UOnCompanionCommandIssuedEnemy, Command) == 0x0058);
static_assert(offsetof(UOnHealthPercentage, Operator) == 0x005C);
static_assert(offsetof(UOnMedKitUsed, Operator) == 0x0058);
static_assert(offsetof(UOrListener, ChildListener) == 0x0058);
static_assert(offsetof(UOnInteractableSelectionChanged, Interaction) == 0x0058);
static_assert(offsetof(UOnStatUpdated, ListenStat) == 0x0058);
static_assert(offsetof(UOnSkillUpdated, ListenSkill) == 0x0058);
static_assert(offsetof(UOnSkillUpdated, Operator) == 0x005A);
static_assert(offsetof(UOnAnimationSpellTrigger, AnimationTriggerTag) == 0x005C);
static_assert(offsetof(UOnTTDMeterPercentage, Operator) == 0x005C);
static_assert(offsetof(UOnStateOfBeingChanged, StateOfBeing) == 0x0058);
static_assert(offsetof(UOnAddictionTimerEntersMaxed, AddictionTag) == 0x0058);
static_assert(offsetof(UOnAddictionTimerLeavesMaxed, AddictionTag) == 0x0058);
static_assert(offsetof(UOnLevelChangedListener, Operator) == 0x0058);
static_assert(offsetof(UOnInterrogateEndEvent, Crime) == 0x0059);
static_assert(offsetof(UOnWeaponEquipped, Skills) == 0x0058);
static_assert(offsetof(UOnWeaponHolstered, Skills) == 0x0058);
static_assert(offsetof(UOnWeaponUnholstered, Skills) == 0x0058);
static_assert(offsetof(UOnWithinRoboRange, Operator) == 0x00B4);
static_assert(offsetof(UOnCarryWeightChange, Operator) == 0x0058);
static_assert(offsetof(UOnGlobalVarChanged, GlobalVariable) == 0x0058);
static_assert(offsetof(UOnGlobalVarChanged, Operator) == 0x006C);
static_assert(offsetof(AEvidenceActor, SceneComponent) == 0x02C0);
static_assert(offsetof(AEvidenceActor, ProximitySource) == 0x02C8);
static_assert(offsetof(AEvidenceActor, InteractableComponent) == 0x02D0);
static_assert(offsetof(AEvidenceActor, ParticleComponent) == 0x02D8);
static_assert(offsetof(AEvidenceActor, DisplayName) == 0x02E0);
static_assert(offsetof(AEvidenceActor, IDComponent) == 0x02E8);
static_assert(offsetof(AEvidenceActor, GameplayTag) == 0x02F0);
static_assert(offsetof(AEvidenceActor, RequiredItem) == 0x02F8);
static_assert(offsetof(AEvidenceActor, OverrideProximityAudio) == 0x0300);
static_assert(offsetof(AEvidenceActor, ScriptEvents) == 0x0310);
static_assert(offsetof(AEvidenceActor, ConversationDescription) == 0x0328);
static_assert(offsetof(AEvidenceActor, EvidenceComponent) == 0x0548);
static_assert(offsetof(UExaminableEvent, Name) == 0x0030);
static_assert(offsetof(UExaminableEvent, Description) == 0x0038);
static_assert(offsetof(UExaminableEvent, OverrideLabel) == 0x0040);
static_assert(offsetof(UExaminableEvent, Codex) == 0x0048);
static_assert(offsetof(UExaminableEvent, RemoteEventOnExaminationEnd) == 0x0050);
static_assert(offsetof(UExaminableEvent, ScriptEvents) == 0x0058);
static_assert(offsetof(UExaminableWidget, TitleTextBlock) == 0x0310);
static_assert(offsetof(UExaminableWidget, BodyTextblock) == 0x0318);
static_assert(offsetof(UExaminableWidget, BackButton) == 0x0320);
static_assert(offsetof(UExaminableWidget, InvisibleButton) == 0x0328);
static_assert(offsetof(UExaminableWidget, BackInputLabel) == 0x0330);
static_assert(offsetof(UExaminableWidget, ScrollBox) == 0x0338);
static_assert(offsetof(UExpandableAreaBase, HeaderWidgetStyle) == 0x0128);
static_assert(offsetof(UExpandableAreaBase, Style) == 0x0130);
static_assert(offsetof(UExpandableAreaBase, BorderBrush) == 0x0250);
static_assert(offsetof(UExpandableAreaBase, BorderColor) == 0x02D8);
static_assert(offsetof(UExpandableAreaBase, HitTestMargin) == 0x0300);
static_assert(offsetof(UExpandableAreaBase, HeaderPadding) == 0x0318);
static_assert(offsetof(UExpandableAreaBase, AreaPadding) == 0x0328);
static_assert(offsetof(UExpandableAreaBase, HeaderContent) == 0x0388);
static_assert(offsetof(UExpandableAreaBase, BodyContent) == 0x0390);
static_assert(offsetof(UEyeColor, PrimaryEyeColor) == 0x0038);
static_assert(offsetof(UEyeColor, SecondaryEyeColor) == 0x0048);
static_assert(offsetof(UFactionData, Name) == 0x0030);
static_assert(offsetof(UFactionData, Description) == 0x0038);
static_assert(offsetof(UFactionData, SmallImage) == 0x0040);
static_assert(offsetof(UFactionData, TTDTooltipImage) == 0x0068);
static_assert(offsetof(UFactionData, LargeImage) == 0x0090);
static_assert(offsetof(UFactionData, ReputationImage) == 0x00B8);
static_assert(offsetof(UFactionData, Visibility) == 0x00E0);
static_assert(offsetof(UFactionData, FactionEnum) == 0x00E1);
static_assert(offsetof(UFactionManager, FactionMap) == 0x0058);
static_assert(offsetof(UFastTravelTooltipWidget, FastTravelTextBlock) == 0x0300);
static_assert(offsetof(UFastTravelTooltipWidget, RestrictionTextBlock) == 0x0308);
static_assert(offsetof(FIndianaDamageEvent, ImpactDataSet) == 0x0020);
static_assert(offsetof(FShotInfo, DamageDescription) == 0x0040);
static_assert(offsetof(FShotInfo, DamageEvent) == 0x00B8);
static_assert(offsetof(UFireMode, FireMode) == 0x05C0);
static_assert(offsetof(UFireMode, ProjectileClass) == 0x05C8);
static_assert(offsetof(UFireMode, OverrideProjectileClass) == 0x05F0);
static_assert(offsetof(UFireMode, InstantHitData) == 0x0600);
static_assert(offsetof(UFireMode, OverrideInstantHitData) == 0x0628);
static_assert(offsetof(UFireMode, ChargeDamageCurve) == 0x0650);
static_assert(offsetof(UFireMode, SpinScalarCurve) == 0x06E0);
static_assert(offsetof(UFireMode, RecoilScalarCurve) == 0x0768);
static_assert(offsetof(UFireMode, SemiAutoRTPCName) == 0x07F0);
static_assert(offsetof(UFireMode, FullAutoRTPCName) == 0x07F8);
static_assert(offsetof(UFireMode, ProjectileCountScalarCurve) == 0x0810);
static_assert(offsetof(UFireMode, ProjectileChargeRTPCName) == 0x0898);
static_assert(offsetof(UFireMode, ProjectileLoadAudioEvents) == 0x08A0);
static_assert(offsetof(UFireMode, CurrentShot) == 0x08D0);
static_assert(offsetof(FDamageTypeRequirementFire, DamageType) == 0x0008);
static_assert(offsetof(FDamageTypeRequirementFire, InstantHitData) == 0x0010);
static_assert(offsetof(UFireMultiDamageTypeMode, Skill) == 0x09F8);
static_assert(offsetof(UFireMultiDamageTypeMode, DamageTypes) == 0x0A00);
static_assert(offsetof(FSpawnPropertyModifiers, TeamOverride) == 0x0000);
static_assert(offsetof(FSpawnPropertyModifiers, ConversationDataOverride) == 0x0008);
static_assert(offsetof(FSpawnPropertyModifiers, AdditionalLoot) == 0x0010);
static_assert(offsetof(FSpawnPropertyModifiers, OutOfCombatBehavior) == 0x0028);
static_assert(offsetof(FSpawnPropertyModifiers, Spline) == 0x00C8);
static_assert(offsetof(ASpawnNodeBase, AIBehavior) == 0x0358);
static_assert(offsetof(ASpawnNodeBase, SpawnModifiers) == 0x03F8);
static_assert(offsetof(ASpawnNodeBase, OwningEncounter) == 0x04C8);
static_assert(offsetof(ASpawnNodeBase, SpawnedInstance) == 0x04D0);
static_assert(offsetof(ASpawnNodeBase, ObsidianID) == 0x04F8);
static_assert(offsetof(ASpawnNodeBase, ProvidedTeamData) == 0x0500);
static_assert(offsetof(AFixedSpawnNode, NodeActor) == 0x0538);
static_assert(offsetof(UFlavorTextWidget, FlavorText) == 0x0300);
static_assert(offsetof(UFlavorTextWidget, TextReference) == 0x0308);
static_assert(offsetof(UFlaw, Name) == 0x0030);
static_assert(offsetof(UFlaw, Description) == 0x0038);
static_assert(offsetof(UFlaw, BrandType) == 0x0040);
static_assert(offsetof(UFlaw, FlawType) == 0x0048);
static_assert(offsetof(UFlaw, Spell) == 0x0058);
static_assert(offsetof(UFlaw, EventListener) == 0x0060);
static_assert(offsetof(UFlaw, DLCFlags) == 0x0068);
static_assert(offsetof(UFlawSummaryEntryWidget, Button) == 0x0300);
static_assert(offsetof(UFlawSummaryEntryWidget, FlawNameText) == 0x0308);
static_assert(offsetof(UFlawTree, Flaws) == 0x0038);
static_assert(offsetof(UFlawTree, DLCFlawTree) == 0x0048);
static_assert(offsetof(UFleeBehaviorStateInfo, DisableStatusEffect) == 0x0178);
static_assert(offsetof(UFlipbookWidget, DynamicMaterial) == 0x0310);
static_assert(offsetof(UFlipbookWidget, FlipbookData) == 0x0318);
static_assert(offsetof(UFlipbookWidget, MaterialInterface) == 0x0320);
static_assert(offsetof(UFlipbookWidget, DisplayImage) == 0x0328);
static_assert(offsetof(UFloorIndicatorWidget, Floor1) == 0x0300);
static_assert(offsetof(UFloorIndicatorWidget, Floor2) == 0x0308);
static_assert(offsetof(UFloorIndicatorWidget, Floor3) == 0x0310);
static_assert(offsetof(UFloorIndicatorWidget, Floor4) == 0x0318);
static_assert(offsetof(UFloorIndicatorWidget, Floor5) == 0x0320);
static_assert(offsetof(UFloorIndicatorWidget, Floor6) == 0x0328);
static_assert(offsetof(UFloorIndicatorWidget, Floor7) == 0x0330);
static_assert(offsetof(UFloorIndicatorWidget, NextFloorButton) == 0x0338);
static_assert(offsetof(UFloorIndicatorWidget, PrevFloorButton) == 0x0340);
static_assert(offsetof(UFloorIndicatorWidget, ContentContainer) == 0x0348);
static_assert(offsetof(UFloorIndicatorWidget, FloorNameTextBlock) == 0x0350);
static_assert(offsetof(UFloorIndicatorWidget, FloorLevelTextBlock) == 0x0358);
static_assert(offsetof(UFloorIndicatorWidget, CurrentFloorColor) == 0x0360);
static_assert(offsetof(UFloorIndicatorWidget, OtherFloorColor) == 0x0370);
static_assert(offsetof(UFloorLevelWidget, FloorImage) == 0x0278);
static_assert(offsetof(UFloorLevelWidget, CurrentFloorImage) == 0x0280);
static_assert(offsetof(UFootstepAudio, FootstepEvent) == 0x0030);
static_assert(offsetof(UFootstepAudio, CustomRTPCValues) == 0x0038);
static_assert(offsetof(UFootstepAudio, CustomFootAttachLocations) == 0x0088);
static_assert(offsetof(UFootstepAudio, MovementEvents) == 0x00D8);
static_assert(offsetof(UFootstepAudio, EventEffectState) == 0x0128);
static_assert(offsetof(UFootstepData, StimulusData) == 0x0038);
static_assert(offsetof(UFootstepData, VisualData) == 0x0040);
static_assert(offsetof(UFootstepData, AudioData) == 0x0048);
static_assert(offsetof(FFootstepMatch, StepTypes) == 0x0018);
static_assert(offsetof(FFootstepMatch, Feet) == 0x0028);
static_assert(offsetof(FFootstepStimulusOverride, Stimulus) == 0x0038);
static_assert(offsetof(FSpecialEventStimulusOverride, Stimulus) == 0x0018);
static_assert(offsetof(FSpecialMovementStimulusProperties, DefaultEventStimulus) == 0x0000);
static_assert(offsetof(FSpecialMovementStimulusProperties, EventStimulusOverrides) == 0x0008);
static_assert(offsetof(UFootstepStimulusData, DefaultFootstepStimulus) == 0x0038);
static_assert(offsetof(UFootstepStimulusData, FootstepStimulusOverrides) == 0x0040);
static_assert(offsetof(UFootstepStimulusData, SpecialEventStimulus) == 0x0050);
static_assert(offsetof(FFootstepVisuals, PSTemplate) == 0x0000);
static_assert(offsetof(FFootstepVisuals, ParticleSystemSpawnType) == 0x0008);
static_assert(offsetof(FFootstepVisuals, PSSocket) == 0x000C);
static_assert(offsetof(FFootstepVisuals, LocationOffset) == 0x0014);
static_assert(offsetof(FFootstepVisuals, RotationOffset) == 0x0020);
static_assert(offsetof(FFootstepVisualsOverride, Visuals) == 0x0038);
static_assert(offsetof(FSpecialEventVisualsOverride, Visuals) == 0x0018);
static_assert(offsetof(FSpecialMovementVisualProperties, DefaultEventVisual) == 0x0000);
static_assert(offsetof(FSpecialMovementVisualProperties, EventVisualsOverrides) == 0x0030);
static_assert(offsetof(UFootstepVisualData, DefaultFootstepVisuals) == 0x0038);
static_assert(offsetof(UFootstepVisualData, FootstepVisualOverrides) == 0x0068);
static_assert(offsetof(UFootstepVisualData, SpecialEventVisuals) == 0x0078);
static_assert(offsetof(UForcedAnimationComponent, InspectOnFirstEquipWeaponNames) == 0x00E0);
static_assert(offsetof(UForceFeedbackEventEffect, ForceFeedbackEffect) == 0x0030);
static_assert(offsetof(UFPVAnimInstance, CurrentAimOffsetZ) == 0x0574);
static_assert(offsetof(UFPVAnimInstance, CurrentAimOffsetX) == 0x0580);
static_assert(offsetof(UFPVAnimInstance, CurrentAimOffset) == 0x058C);
static_assert(offsetof(UFPVAnimInstance, WeaponSway) == 0x05A4);
static_assert(offsetof(UFPVAnimInstance, CrouchMontage) == 0x05C0);
static_assert(offsetof(UFPVAnimInstance, CurrentDodgeMontage) == 0x05C8);
static_assert(offsetof(UFurnitureAction, FurnitureActor) == 0x0038);
static_assert(offsetof(UFurnitureSkeletonPreviewMeshMap, HumanSkeletonMesh) == 0x0088);
static_assert(offsetof(UFurnitureSkeletonPreviewMeshMap, PreviewMaterial) == 0x00B0);
static_assert(offsetof(UFurnitureSkeletonPreviewMeshMap, InvalidPreviewMaterial) == 0x00B8);
static_assert(offsetof(UFurnitureSkeletonPreviewMeshMap, InvalidConversationPreviewMaterial) == 0x00C0);
static_assert(offsetof(FurniturePositionalAnimationData, Start) == 0x0000);
static_assert(offsetof(FurniturePositionalAnimationData, Exit) == 0x0008);
static_assert(offsetof(FurniturePositionalAnimationData, CombatExit) == 0x0010);
static_assert(offsetof(FurniturePositionalAnimationData, Loop) == 0x0018);
static_assert(offsetof(UFurnitureAnimationData, PositionalData) == 0x0038);
static_assert(offsetof(UFurnitureAnimationData, DefaultAnimationData) == 0x0048);
static_assert(offsetof(UFurnitureAnimationData, ConversationEmotionData) == 0x00F0);
static_assert(offsetof(UFurnitureAnimationData, FemaleFurnitureData) == 0x0148);
static_assert(offsetof(UFurnitureAnimationData, HeadAimBlendSpace) == 0x0150);
static_assert(offsetof(UFurnitureAnimationData, RootOffset) == 0x0170);
static_assert(offsetof(FTransformOverride, Transform) == 0x0010);
static_assert(offsetof(UFurnitureComponent, InterestType) == 0x0268);
static_assert(offsetof(UFurnitureComponent, LookAtOverride) == 0x0280);
static_assert(offsetof(UFurnitureComponent, IgnoreEntryPointSlots) == 0x0290);
static_assert(offsetof(UFurnitureComponent, AutoAssignedIgnoreEntryPointSlots) == 0x02A0);
static_assert(offsetof(UFurnitureComponent, TransformOverrides) == 0x0368);
static_assert(offsetof(UFurnitureComponent, AISettings) == 0x0440);
static_assert(offsetof(UFurnitureComponent, AISettingsInfiniteDuration) == 0x0448);
static_assert(offsetof(UFurnitureComponent, TurretTrack) == 0x0458);
static_assert(offsetof(UGadget, ItemMesh) == 0x0118);
static_assert(offsetof(UGadget, Spell) == 0x0140);
static_assert(offsetof(UGadget, GadgetTag) == 0x0148);
static_assert(offsetof(UGameInputComponent, KeyHoldActions) == 0x0210);
static_assert(offsetof(UGammaSelectionWidget, GammaSlider) == 0x0328);
static_assert(offsetof(UGammaSelectionWidget, GammaValueTextBlock) == 0x0330);
static_assert(offsetof(UGammaSelectionWidget, AcceptButton) == 0x0338);
static_assert(offsetof(UGammaSelectionWidget, DefaultButton) == 0x0340);
static_assert(offsetof(UGammaSelectionWidget, DescriptionTextBlock) == 0x0348);
static_assert(offsetof(UGammaSelectionWidget, InputLabelGroup) == 0x0350);
static_assert(offsetof(UGammaSelectionWidget, InputLabelsHorizontalBox) == 0x0358);
static_assert(offsetof(UGammaSelectionWidget, GammaSettingClassRef) == 0x0360);
static_assert(offsetof(UGammaSelectionWidget, GammaSetting) == 0x0368);
static_assert(offsetof(UGeneralButtonWidget, Button) == 0x0300);
static_assert(offsetof(UGeneralButtonWidget, TextBlock) == 0x0308);
static_assert(offsetof(UGeneralButtonWidget, Image) == 0x0310);
static_assert(offsetof(UGenericCollapsableListContainer, ListVerticalBox) == 0x0300);
static_assert(offsetof(UGenericCollapsableListContainer, ListWidgetClass) == 0x0308);
static_assert(offsetof(UGenericListEntryWidget, NameLocString) == 0x0300);
static_assert(offsetof(UGenericListEntryWidget, DescriptionLocString) == 0x0308);
static_assert(offsetof(UGenericListEntryWidget, NameTextBlock) == 0x0310);
static_assert(offsetof(UGenericListEntryWidget, ValueIcon) == 0x0318);
static_assert(offsetof(UGenericListEntryWidget, ValueTextBlock) == 0x0320);
static_assert(offsetof(UGenericListEntryWidget, Button) == 0x0328);
static_assert(offsetof(UGenericLogicDataAsset, Comment) == 0x0038);
static_assert(offsetof(UGenericLogicDataAsset, Conditions) == 0x0048);
static_assert(offsetof(UGenericNotificationEntryWidget, AnimationContainer) == 0x0300);
static_assert(offsetof(UGenericNotificationEntryWidget, TargetImage) == 0x0308);
static_assert(offsetof(UGenericNotificationEntryWidget, TargetImage0) == 0x0310);
static_assert(offsetof(UGenericNotificationEntryWidget, InputInstruction) == 0x0318);
static_assert(offsetof(UGenericNotificationEntryWidget, InputInstruction1) == 0x0320);
static_assert(offsetof(UGenericNotificationEntryWidget, InputInstruction2) == 0x0328);
static_assert(offsetof(UGenericNotificationEntryWidget, InputInstruction3) == 0x0330);
static_assert(offsetof(UGenericNotificationEntryWidget, InputInstruction4) == 0x0338);
static_assert(offsetof(UGenericNotificationEntryWidget, EntryTextBlock) == 0x0360);
static_assert(offsetof(UGenericNotificationWidget, MainBorder) == 0x0300);
static_assert(offsetof(UGenericNotificationWidget, EntryWidget) == 0x0308);
static_assert(offsetof(UGenericNotificationWidget, ContentSizeBox) == 0x0310);
static_assert(offsetof(UGenericNotificationWidget, CurrentState) == 0x0390);
static_assert(offsetof(AGhostNavMesh, SceneComponent) == 0x02B8);
static_assert(offsetof(AGhostNavMesh, GhostNavMeshComponent) == 0x02C0);
static_assert(offsetof(AGhostNavMesh, NavModifierVolume) == 0x02C8);
static_assert(offsetof(FAchievementArray, Achievements) == 0x0000);
static_assert(offsetof(UGlobalAchievementData, Achievements) == 0x0038);
static_assert(offsetof(UGlobalAchievementData, DifficultyAchievements) == 0x0048);
static_assert(offsetof(UGlobalAchievementData, PatientNStatusEffect) == 0x0098);
static_assert(offsetof(UGlobalAchievementData, MadScientistStatusEffects) == 0x00A0);
static_assert(offsetof(UGlobalAchievementData, Brand) == 0x00B8);
static_assert(offsetof(UGlobalAchievementData, SharpDressedItems) == 0x00C0);
static_assert(offsetof(UGlobalAchievementData, HeroStats) == 0x00E0);
static_assert(offsetof(UGlobalAchievementData, DefaultPresenceData) == 0x00F0);
static_assert(offsetof(UGlobalAchievementData, SpecialPETBenefitsWeapons) == 0x00F8);
static_assert(offsetof(UGlobalAchievementData, UdderGatlingNeedlerWeapons) == 0x0108);
static_assert(offsetof(FAIEventTypeMapElement, Event) == 0x0000);
static_assert(offsetof(FAIEventTypeMapElement, EventType) == 0x0008);
static_assert(offsetof(FWeaponAISettingsMapElement, WeaponType) == 0x0000);
static_assert(offsetof(FWeaponAISettingsMapElement, WeaponSettings) == 0x0008);
static_assert(offsetof(FDisablePriorityMapElement, DisableType) == 0x0000);
static_assert(offsetof(FDisablePriorityMapElement, Priority) == 0x0008);
static_assert(offsetof(FInvestigationSettings, DeadBodyWanderSearchSettings) == 0x0028);
static_assert(offsetof(UGlobalAIData, DefaultBlackboard) == 0x0038);
static_assert(offsetof(UGlobalAIData, BehaviorTreeMap) == 0x0040);
static_assert(offsetof(UGlobalAIData, DefaultDecisionTreeData) == 0x0090);
static_assert(offsetof(UGlobalAIData, DefaultCompanionDecisionTreeData) == 0x0098);
static_assert(offsetof(UGlobalAIData, DefaultPacifistDecisionTreeData) == 0x00A0);
static_assert(offsetof(UGlobalAIData, AIEventTypes) == 0x00A8);
static_assert(offsetof(UGlobalAIData, AIEventTypeMap) == 0x00B8);
static_assert(offsetof(UGlobalAIData, BackupWeaponAISettings) == 0x0108);
static_assert(offsetof(UGlobalAIData, DefaultWeaponAISettings) == 0x0110);
static_assert(offsetof(UGlobalAIData, LungeActions) == 0x0130);
static_assert(offsetof(UGlobalAIData, DefaultWeaponAISettingsMap) == 0x0140);
static_assert(offsetof(UGlobalAIData, LostTargetTimesMap) == 0x0198);
static_assert(offsetof(UGlobalAIData, SuppressingFireTimesMap) == 0x01E8);
static_assert(offsetof(UGlobalAIData, PositioningProbabilities) == 0x0244);
static_assert(offsetof(UGlobalAIData, FindMeleeSlotRequest) == 0x02A8);
static_assert(offsetof(UGlobalAIData, FindMeleeWaitRequest) == 0x02B0);
static_assert(offsetof(UGlobalAIData, DisablePriorities) == 0x02B8);
static_assert(offsetof(UGlobalAIData, CowerDisableType) == 0x02C8);
static_assert(offsetof(UGlobalAIData, ShockSpell_CompanionCalledShotAOE) == 0x02D0);
static_assert(offsetof(UGlobalAIData, ShockSpell_CompanionCalledShotTarget) == 0x02D8);
static_assert(offsetof(UGlobalAIData, ShockSpell_KillCamAOE) == 0x02E0);
static_assert(offsetof(UGlobalAIData, DisablePriorityMap) == 0x02E8);
static_assert(offsetof(UGlobalAIData, CompanionDefaultBehavior) == 0x0348);
static_assert(offsetof(UGlobalAIData, CompanionFollowSettings) == 0x0364);
static_assert(offsetof(UGlobalAIData, CompanionCommandMoveToSettings) == 0x0368);
static_assert(offsetof(UGlobalAIData, CompanionCommandSuppressSettings) == 0x036C);
static_assert(offsetof(UGlobalAIData, CompanionCommandFlankSettings) == 0x0374);
static_assert(offsetof(UGlobalAIData, CompanionCommandHunkerDownSettings) == 0x037C);
static_assert(offsetof(UGlobalAIData, HearingNavigationFilterClass) == 0x03B8);
static_assert(offsetof(UGlobalAIData, PlayerCompanionNavigationFilterClass) == 0x03C0);
static_assert(offsetof(UGlobalAIData, PlayerCompanionEQSNavigationFilterClass) == 0x03C8);
static_assert(offsetof(UGlobalAIData, BlockDetectionSettings) == 0x03D0);
static_assert(offsetof(UGlobalAIData, BlockedSettings) == 0x03E4);
static_assert(offsetof(UGlobalAIData, BumpSettings) == 0x03FC);
static_assert(offsetof(UGlobalAIData, JumpSettings) == 0x0408);
static_assert(offsetof(UGlobalAIData, PlayerFirstMeleeHitTimeThreshold) == 0x0410);
static_assert(offsetof(UGlobalAIData, DefaultBehaviorType) == 0x046C);
static_assert(offsetof(UGlobalAIData, BlindSpreadCurve) == 0x0520);
static_assert(offsetof(UGlobalAIData, PassiveSpellSet) == 0x05A8);
static_assert(offsetof(UGlobalAIData, CompanionPassiveSpellSet) == 0x05F8);
static_assert(offsetof(UGlobalAIData, DefaultIdleSettings) == 0x0650);
static_assert(offsetof(UGlobalAIData, DefaultWanderSettings) == 0x0658);
static_assert(offsetof(UGlobalAIData, DefaultFollowPlayerSettings) == 0x0660);
static_assert(offsetof(UGlobalAIData, PatrolWaitForOrientAction) == 0x0668);
static_assert(offsetof(UGlobalAIData, MoraleContributionMap) == 0x0678);
static_assert(offsetof(UGlobalAIData, ThirdPersonSockets) == 0x06C8);
static_assert(offsetof(UGlobalAIData, SquadChatterCreatureTypes) == 0x0760);
static_assert(offsetof(UGlobalAIData, CompanionCommandToChatter) == 0x0780);
static_assert(offsetof(UGlobalAIData, ChatterDelayTimes) == 0x07D0);
static_assert(offsetof(UGlobalAIData, ChatterCompanionAttackWarningCreatureXPLevelDiffs) == 0x0840);
static_assert(offsetof(UGlobalAIData, ChatterCreatureDeathTypeRestrictions) == 0x0890);
static_assert(offsetof(UGlobalAIData, ChatterEventCharacterGroupingRestrictions) == 0x08E0);
static_assert(offsetof(UGlobalAIData, ChatterPlayerDeathCreatureTypes) == 0x09D8);
static_assert(offsetof(UGlobalAIData, InvestigationSettings) == 0x0A00);
static_assert(offsetof(UGlobalAIData, PseudoGodModeMinHealthPercentageMap) == 0x0A40);
static_assert(offsetof(UGlobalAIData, WanderSearchSettings) == 0x0A90);
static_assert(offsetof(UGlobalAIData, BulletClass) == 0x0AA8);
static_assert(offsetof(UGlobalAIData, Disguises) == 0x0AB0);
static_assert(offsetof(UGlobalAIData, EmployeeBenefitsRezStatusEffectName) == 0x0AC0);
static_assert(offsetof(FDamageTypeScalar, DamageTypes) == 0x0000);
static_assert(offsetof(FArmorVsDamageTypes, ArmorType) == 0x0000);
static_assert(offsetof(FArmorVsDamageTypes, DamageTypeScalars) == 0x0008);
static_assert(offsetof(UGlobalArmorData, ArmorVsDamageTypes) == 0x0040);
static_assert(offsetof(UGlobalArmorData, NPCArmorLevelDTModifierCurve) == 0x0050);
static_assert(offsetof(UGlobalArmorData, PlayerArmorLevelDTModifierCurve) == 0x00D8);
static_assert(offsetof(UGlobalArmorData, BodyPartTag) == 0x0160);
static_assert(offsetof(UGlobalArmorData, DamageTypes) == 0x0168);
static_assert(offsetof(UGlobalArmorData, ArmorBonusSkills) == 0x01B8);
static_assert(offsetof(FInteractAudioEvent, OpenSound) == 0x0000);
static_assert(offsetof(FInteractAudioEvent, CloseSound) == 0x0008);
static_assert(offsetof(UGlobalAudioData, DefaultFootstepEvent) == 0x0038);
static_assert(offsetof(UGlobalAudioData, DefaultFootstepSocket) == 0x0040);
static_assert(offsetof(UGlobalAudioData, DefaultPickupSound) == 0x0048);
static_assert(offsetof(UGlobalAudioData, PauseEvent) == 0x0050);
static_assert(offsetof(UGlobalAudioData, UnpauseEvent) == 0x0058);
static_assert(offsetof(UGlobalAudioData, ChatterAnimNotifyToEventMapping) == 0x0060);
static_assert(offsetof(UGlobalAudioData, MusicStateGroupName) == 0x00BC);
static_assert(offsetof(UGlobalAudioData, MusicPlaybackEvent) == 0x00C8);
static_assert(offsetof(UGlobalAudioData, PauseMusicEvent) == 0x00D0);
static_assert(offsetof(UGlobalAudioData, ResumeMusicEvent) == 0x00D8);
static_assert(offsetof(UGlobalAudioData, GameOverMusic) == 0x00E0);
static_assert(offsetof(UGlobalAudioData, SkipMusic) == 0x00E8);
static_assert(offsetof(UGlobalAudioData, LoadingMusicForMaps) == 0x00F0);
static_assert(offsetof(UGlobalAudioData, DefaultVoicePostProcessTag) == 0x0144);
static_assert(offsetof(UGlobalAudioData, HeadStyleToVoicePostProcessTagMapping) == 0x0150);
static_assert(offsetof(UGlobalAudioData, VoicePostProcessTagToRTPCNameMapping) == 0x01A0);
static_assert(offsetof(UGlobalAudioData, TalkNodeVOAttenuationTypeScalingFactors) == 0x01F0);
static_assert(offsetof(UGlobalAudioData, PresetNameToAttenuationTypeMapping) == 0x0240);
static_assert(offsetof(UGlobalAudioData, InteractAudioEvents) == 0x0290);
static_assert(offsetof(UGlobalAudioData, DefaultOpenSound) == 0x02E0);
static_assert(offsetof(UGlobalAudioData, DefaultCloseSound) == 0x02E8);
static_assert(offsetof(UGlobalAudioData, AudioLogStateGroupName) == 0x02F0);
static_assert(offsetof(UGlobalAudioData, AudioLogStateActiveName) == 0x02F8);
static_assert(offsetof(UGlobalAudioData, AudioLogStateInactiveName) == 0x0300);
static_assert(offsetof(FReputationActionConsequence, ReputationType) == 0x0000);
static_assert(offsetof(FReputationActionConsequence, IncrementType) == 0x0001);
static_assert(offsetof(FReputationActionConsequence, TalkIncrementType) == 0x0008);
static_assert(offsetof(FReputationActionConsequence, BribeIncrementType) == 0x0010);
static_assert(offsetof(FReputationElement, ReputationData) == 0x0008);
static_assert(offsetof(UGlobalFactionData, DLCGlobalFactionData) == 0x00E8);
static_assert(offsetof(UGlobalFactionData, ReputationActionConsequences) == 0x0110);
static_assert(offsetof(UGlobalFactionData, Reputations) == 0x0180);
static_assert(offsetof(UGlobalFactionDataCollection, Sources) == 0x0038);
static_assert(offsetof(UGlobalFactionDataCollection, FirstGlobalFactionData) == 0x00F8);
static_assert(offsetof(UGlobalItemData, WeaponPart) == 0x0040);
static_assert(offsetof(UGlobalItemData, ArmorPart) == 0x0048);
static_assert(offsetof(UGlobalItemData, LevelAdvancementCost) == 0x0058);
static_assert(offsetof(UGlobalItemData, LevelAdvanceScalarCurve) == 0x0070);
static_assert(offsetof(UGlobalItemData, DisguisePrerequisiteItem) == 0x00F8);
static_assert(offsetof(FNameTypeBinding, ActionName) == 0x0000);
static_assert(offsetof(FNameTypeBinding, BindingType) == 0x0008);
static_assert(offsetof(FLinkedBinding, LinkedBindingName) == 0x0000);
static_assert(offsetof(FLinkedBinding, Bindings) == 0x0008);
static_assert(offsetof(FGamepadBindings, ActionName) == 0x0000);
static_assert(offsetof(FGamepadBindings, OldKey) == 0x0008);
static_assert(offsetof(FGamepadBindings, NewKey) == 0x0020);
static_assert(offsetof(FGamepadBindings, NewBindingType) == 0x003C);
static_assert(offsetof(FGamepadBindingsList, Bindings) == 0x0000);
static_assert(offsetof(UGlobalKeybindsData, LinkedBindings) == 0x0038);
static_assert(offsetof(UGlobalKeybindsData, GamepadBindings) == 0x0048);
static_assert(offsetof(UGlobalKeybindsData, LayoutBindings) == 0x0098);
static_assert(offsetof(FMeleeInput, PreviousAction) == 0x0000);
static_assert(offsetof(FMeleeInput, ButtonPress) == 0x0001);
static_assert(offsetof(FMeleeAction, Action) == 0x0000);
static_assert(offsetof(FMeleeAction, WeaponEvent) == 0x0001);
static_assert(offsetof(FMeleeAction, Input) == 0x0008);
static_assert(offsetof(FMeleeAction, ForceFeedbackEffectOneHand) == 0x0018);
static_assert(offsetof(FMeleeAction, ForceFeedbackEffectOneHandBlocked) == 0x0020);
static_assert(offsetof(FMeleeAction, ForceFeedbackEffectTwoHands) == 0x0028);
static_assert(offsetof(FMeleeAction, ForceFeedbackEffectTwoHandsBlocked) == 0x0030);
static_assert(offsetof(FMeleeAction, AttackType) == 0x0048);
static_assert(offsetof(FMeleeAction, InterruptAction) == 0x0049);
static_assert(offsetof(FMeleeAction, AutoQueuedAction) == 0x004A);
static_assert(offsetof(UGlobalMeleeData, BlockMaterials) == 0x0058);
static_assert(offsetof(UGlobalMeleeData, MeleeActions) == 0x0060);
static_assert(offsetof(UGlobalTeamData, PlayerTeam) == 0x0038);
static_assert(offsetof(UGlobalTeamData, DefaultTeamRelationships) == 0x0090);
static_assert(offsetof(UGlobalTeamData, INX1TeamData) == 0x0180);
static_assert(offsetof(UGlobalTeamData, INX2TeamData) == 0x01A8);
static_assert(offsetof(UGlobalTeamDataCollection, Sources) == 0x0038);
static_assert(offsetof(FActionLabelDescription, Name) == 0x0000);
static_assert(offsetof(FSpecializedAmmoClasses, Classes) == 0x0000);
static_assert(offsetof(UGlobalUIData, GlobalUIColorsData) == 0x0038);
static_assert(offsetof(UGlobalUIData, LoadingScreenImageData) == 0x0040);
static_assert(offsetof(UGlobalUIData, TextAnimationData) == 0x0048);
static_assert(offsetof(UGlobalUIData, TutorialAssetData) == 0x0050);
static_assert(offsetof(UGlobalUIData, ComputerTerminalHeaderData) == 0x0058);
static_assert(offsetof(UGlobalUIData, QuestData) == 0x0060);
static_assert(offsetof(UGlobalUIData, IndianaUIAudioData) == 0x0068);
static_assert(offsetof(UGlobalUIData, RenderThreadLoadingScreenWidgetClass) == 0x0070);
static_assert(offsetof(UGlobalUIData, ActionLabelDescriptions) == 0x0080);
static_assert(offsetof(UGlobalUIData, PCMouseData) == 0x00D0);
static_assert(offsetof(UGlobalUIData, XboxControllerData) == 0x00D8);
static_assert(offsetof(UGlobalUIData, PlaystationControllerData) == 0x00E0);
static_assert(offsetof(UGlobalUIData, SpecializedAmmoClasses) == 0x00E8);
static_assert(offsetof(UGlobalUIData, CompassData) == 0x0138);
static_assert(offsetof(UGlobalUIData, ForbiddenTextEntryCharacters) == 0x0140);
static_assert(offsetof(UGlobalUIData, AudioActionData) == 0x0150);
static_assert(offsetof(UGlobalUIData, DefaultDummyClass) == 0x0158);
static_assert(offsetof(UGlobalUIData, HUDFadeSettings) == 0x0160);
static_assert(offsetof(UGlobalWeaponData, ShootSocket) == 0x0064);
static_assert(offsetof(UGlobalWeaponData, ProjectorBaseSocket) == 0x006C);
static_assert(offsetof(UGlobalWeaponData, StateWidgetSocket) == 0x0074);
static_assert(offsetof(UGlobalWeaponData, ProjectorEndBone) == 0x007C);
static_assert(offsetof(UGlobalWeaponData, ProjectorEndSocket) == 0x0084);
static_assert(offsetof(UGlobalWeaponData, NPCWeaponLevelDamageModifierCurve) == 0x00A8);
static_assert(offsetof(UGlobalWeaponData, PlayerWeaponLevelDamageModifierCurve) == 0x0130);
static_assert(offsetof(FHairAppearance, StandardMesh) == 0x0040);
static_assert(offsetof(FHairAppearance, CappedMesh) == 0x0068);
static_assert(offsetof(UHairAppearances, HairAppearances) == 0x0038);
static_assert(offsetof(UHairColor, HairRootColor) == 0x0038);
static_assert(offsetof(UHairColor, HairTipColor) == 0x0048);
static_assert(offsetof(UHairColor, HairCapColor) == 0x0058);
static_assert(offsetof(UHairColor, EyeBrowColor) == 0x0068);
static_assert(offsetof(AHazard, HazardEffect) == 0x0310);
static_assert(offsetof(AHazard, HazardTeam) == 0x0318);
static_assert(offsetof(AHazard, SceneComponent) == 0x0330);
static_assert(offsetof(AHazard, CollisionStaticMeshComponent) == 0x0338);
static_assert(offsetof(AHazard, IDComponent) == 0x0340);
static_assert(offsetof(AHazard, ConnectedSources) == 0x0350);
static_assert(offsetof(AHazard, NavModifierComponent) == 0x0378);
static_assert(offsetof(UHazardAudioComponent, AudioEvents) == 0x0150);
static_assert(offsetof(AHazardSource, ParentHazard) == 0x0478);
static_assert(offsetof(UHeadAndBodyTrackingComponent, HeadSettings) == 0x0108);
static_assert(offsetof(UHeadAndBodyTrackingComponent, ConversationHeadSettings) == 0x0114);
static_assert(offsetof(UHeadAndBodyTrackingComponent, BarkConversationHeadSettings) == 0x0120);
static_assert(offsetof(UHeadAndBodyTrackingComponent, ElevatorHeadSettings) == 0x012C);
static_assert(offsetof(FNewHeadAppearance, HeadMesh) == 0x0040);
static_assert(offsetof(FNewHeadAppearance, HairMorphTarget) == 0x00B8);
static_assert(offsetof(UHeadAppearances, HeadAppearances) == 0x0038);
static_assert(offsetof(UHealStatusEffect, HealValueType) == 0x0190);
static_assert(offsetof(UHealStatusEffect, HealMultiplierStat) == 0x0198);
static_assert(offsetof(UHealStatusEffect, SecondaryMultiplierStat) == 0x01A0);
static_assert(offsetof(UHealthKitTooltipWidget, UnlitTexture) == 0x0300);
static_assert(offsetof(UHealthKitTooltipWidget, LitTexture) == 0x0308);
static_assert(offsetof(UHealthKitTooltipWidget, NameTextBlock) == 0x0310);
static_assert(offsetof(UHealthKitTooltipWidget, UsageTextBlock) == 0x0318);
static_assert(offsetof(UHealthKitTooltipWidget, DescriptionTextBlock) == 0x0320);
static_assert(offsetof(UHealthKitTooltipWidget, LoreTextBlock) == 0x0328);
static_assert(offsetof(UHealthKitTooltipWidget, Slot0Box) == 0x0330);
static_assert(offsetof(UHealthKitTooltipWidget, Slot0TextBlock) == 0x0338);
static_assert(offsetof(UHealthKitTooltipWidget, Slot0Image) == 0x0340);
static_assert(offsetof(UHealthKitTooltipWidget, Slot1Box) == 0x0348);
static_assert(offsetof(UHealthKitTooltipWidget, Slot1TextBlock) == 0x0350);
static_assert(offsetof(UHealthKitTooltipWidget, Slot1Image) == 0x0358);
static_assert(offsetof(UHealthKitTooltipWidget, Slot2Box) == 0x0360);
static_assert(offsetof(UHealthKitTooltipWidget, Slot2TextBlock) == 0x0368);
static_assert(offsetof(UHealthKitTooltipWidget, Slot2Image) == 0x0370);
static_assert(offsetof(UHealthKitTooltipWidget, Slot3Box) == 0x0378);
static_assert(offsetof(UHealthKitTooltipWidget, Slot3TextBlock) == 0x0380);
static_assert(offsetof(UHealthKitTooltipWidget, Slot3Image) == 0x0388);
static_assert(offsetof(UHealthKitTooltipWidget, ImageSizeBox) == 0x0390);
static_assert(offsetof(UHealthKitTooltipWidget, FrameBorder) == 0x0398);
static_assert(offsetof(UHealthKitTooltipWidget, MainScaleBox) == 0x03A0);
static_assert(offsetof(FAreaHeightTile, WorldArea) == 0x0000);
static_assert(offsetof(FAreaHeightTile, HeightmapData) == 0x0018);
static_assert(offsetof(AHeightmapManager, WorldBounds) == 0x0310);
static_assert(offsetof(AHeightmapManager, AreaHeightTiles) == 0x0330);
static_assert(offsetof(UHelmet, HeadStyle) == 0x01F8);
static_assert(offsetof(UHelmet, HelmetVisuals) == 0x0200);
static_assert(offsetof(UHelmet, VisualProperties) == 0x0208);
static_assert(offsetof(UHelmet, Armor) == 0x0260);
static_assert(offsetof(UHelmet, VoicePostProcessOverride) == 0x02A8);
static_assert(offsetof(UHeroStat, EventListener) == 0x0038);
static_assert(offsetof(UHeroStat, HeroStatName) == 0x0044);
static_assert(offsetof(UHideMeshEventEffect, TargetMesh) == 0x0030);
static_assert(offsetof(UHighlightComponent, HighlightPostProcessMaterial) == 0x00E0);
static_assert(offsetof(UHighlightComponent, PostProcessDynamicMaterial) == 0x00E8);
static_assert(offsetof(FHeightValuesTexture, Texture) == 0x0000);
static_assert(offsetof(UHitEffectIndicatorComponent, HeightValuesTexture) == 0x0900);
static_assert(offsetof(UHitEffectIndicatorComponent, PostProcessMaterial) == 0x0928);
static_assert(offsetof(UHitEffectIndicatorComponent, PostProcessDynamicMaterial) == 0x0930);
static_assert(offsetof(UHitEffectIndicatorComponent, HitColor) == 0x0958);
static_assert(offsetof(FHitLocationChance, BodyParts) == 0x0000);
static_assert(offsetof(UHitLocationData, HitLocations) == 0x0038);
static_assert(offsetof(UHitReactionStatusEffect, HitReaction) == 0x0188);
static_assert(offsetof(UHoverbotAnimInstance, LocomotionTurnInPlace) == 0x0950);
static_assert(offsetof(UHoverbotAnimInstance, CombatTurnInPlace) == 0x0960);
static_assert(offsetof(UHoverbotAnimInstance, HeightSmooth) == 0x0980);
static_assert(offsetof(UHUDWidget, SafeSpaceCanvasPanel) == 0x0308);
static_assert(offsetof(UHUDWidget, Reticle) == 0x0310);
static_assert(offsetof(UHUDWidget, ItemDegradation) == 0x0318);
static_assert(offsetof(UHUDWidget, CharacterOverview) == 0x0320);
static_assert(offsetof(UHUDWidget, CompanionOverview) == 0x0328);
static_assert(offsetof(UHUDWidget, CompanionOverview0) == 0x0330);
static_assert(offsetof(UHUDWidget, EnemyScanner) == 0x0338);
static_assert(offsetof(UHUDWidget, AudioLogWidget) == 0x0340);
static_assert(offsetof(UHUDWidget, AbilityOverview) == 0x0348);
static_assert(offsetof(UHUDWidget, AbilityOverviewGamepad) == 0x0350);
static_assert(offsetof(UHUDWidget, QuestLog) == 0x0358);
static_assert(offsetof(UHUDWidget, GenericLog) == 0x0360);
static_assert(offsetof(UHUDWidget, Compass) == 0x0368);
static_assert(offsetof(UHUDWidget, WeaponSelect) == 0x0370);
static_assert(offsetof(UHUDWidget, InteractionGuide) == 0x0378);
static_assert(offsetof(UHUDWidget, AmmoReadout) == 0x0380);
static_assert(offsetof(UHUDWidget, DisguiseWidget) == 0x0388);
static_assert(offsetof(UHUDWidget, LevelUpNotification) == 0x0390);
static_assert(offsetof(UHUDWidget, MapTransitionNotification) == 0x0398);
static_assert(offsetof(UHUDWidget, ItemContainerWidget) == 0x03A0);
static_assert(offsetof(UHUDWidget, Flaw) == 0x03B0);
static_assert(offsetof(UIdleCameraComponent, IdleInputDetectionComponent) == 0x0308);
static_assert(offsetof(UImageSectionWidget, Panel) == 0x0288);
static_assert(offsetof(UImageSectionWidget, Image) == 0x0290);
static_assert(offsetof(UImmuneStatusEffect, DisableTypes) == 0x0188);
static_assert(offsetof(UImmuneStatusEffect, OriginActorType) == 0x01A8);
static_assert(offsetof(UImpactAudioData, DefaultCriticalOverlay) == 0x0088);
static_assert(offsetof(UImpactAudioData, DefaultGrazeOverlay) == 0x0090);
static_assert(offsetof(UImpactAudioData, DefaultWeakSpotOverlay) == 0x0098);
static_assert(offsetof(UImpactDataSet, FxData) == 0x0038);
static_assert(offsetof(UImpactDataSet, AudioData) == 0x0040);
static_assert(offsetof(FImpactParticle, Fx) == 0x0000);
static_assert(offsetof(FImpactParticle, ChargeEmitterEnableThresholds) == 0x0010);
static_assert(offsetof(FImpactFxEntry, ImpactParticles) == 0x0000);
static_assert(offsetof(FImpactFxEntry, Decal) == 0x0010);
static_assert(offsetof(FAimTargets, SocketName) == 0x0000);
static_assert(offsetof(FAimTargets, ComponentTag) == 0x0008);
static_assert(offsetof(FPropComponents, PropMesh) == 0x0000);
static_assert(offsetof(FPropComponents, PropParticleSystem) == 0x0008);
static_assert(offsetof(AIndianaCharacter, OverrideDummyClass) == 0x0810);
static_assert(offsetof(AIndianaCharacter, ImmutableBlueprintComponents) == 0x0818);
static_assert(offsetof(AIndianaCharacter, AutoStasisConditions) == 0x0838);
static_assert(offsetof(AIndianaCharacter, GroundOffsetComponent) == 0x08B0);
static_assert(offsetof(AIndianaCharacter, SpreadManagerComponent) == 0x08B8);
static_assert(offsetof(AIndianaCharacter, DamageableComponent) == 0x08C0);
static_assert(offsetof(AIndianaCharacter, ArmorComponent) == 0x08C8);
static_assert(offsetof(AIndianaCharacter, StatusEffectManagerComponent) == 0x08D0);
static_assert(offsetof(AIndianaCharacter, TeamComponent) == 0x08D8);
static_assert(offsetof(AIndianaCharacter, InventoryComponent) == 0x08E0);
static_assert(offsetof(AIndianaCharacter, BlockComponent) == 0x08E8);
static_assert(offsetof(AIndianaCharacter, ReactionComponent) == 0x08F0);
static_assert(offsetof(AIndianaCharacter, IDComponent) == 0x08F8);
static_assert(offsetof(AIndianaCharacter, EnvironmentComponent) == 0x0900);
static_assert(offsetof(AIndianaCharacter, InteractableComponent) == 0x0908);
static_assert(offsetof(AIndianaCharacter, AudioComponentClass) == 0x0910);
static_assert(offsetof(AIndianaCharacter, TelemetryComponent) == 0x0918);
static_assert(offsetof(AIndianaCharacter, SpellManagerComponent) == 0x0920);
static_assert(offsetof(AIndianaCharacter, AimTargets) == 0x0928);
static_assert(offsetof(AIndianaCharacter, ComponentNameToBodyPartTag) == 0x0938);
static_assert(offsetof(AIndianaCharacter, TPVMesh) == 0x0988);
static_assert(offsetof(AIndianaCharacter, IndianaCharacterMovementComponent) == 0x0990);
static_assert(offsetof(AIndianaCharacter, HealthComponent) == 0x0998);
static_assert(offsetof(AIndianaCharacter, DeathComponent) == 0x09A0);
static_assert(offsetof(AIndianaCharacter, EquipmentComponent) == 0x09A8);
static_assert(offsetof(AIndianaCharacter, RpgStatComponent) == 0x09B0);
static_assert(offsetof(AIndianaCharacter, CharacterInfoComponent) == 0x09B8);
static_assert(offsetof(AIndianaCharacter, SlotManagerComponent) == 0x09C0);
static_assert(offsetof(AIndianaCharacter, ConversationRegisterComponent) == 0x09C8);
static_assert(offsetof(AIndianaCharacter, LocomotionLogicComponent) == 0x09D0);
static_assert(offsetof(AIndianaCharacter, TargetableComponent) == 0x09D8);
static_assert(offsetof(AIndianaCharacter, FaceFXComponent) == 0x09E0);
static_assert(offsetof(AIndianaCharacter, AppearanceComponent) == 0x09E8);
static_assert(offsetof(AIndianaCharacter, IndianaAudioComponent) == 0x09F0);
static_assert(offsetof(AIndianaCharacter, PetableComponent) == 0x09F8);
static_assert(offsetof(AIndianaCharacter, DifficultyRpgStatModifiers) == 0x0AA0);
static_assert(offsetof(AIndianaCharacter, TalkingIdleOverrides) == 0x0B98);
static_assert(offsetof(AIndianaCharacter, IdleMeshProps) == 0x0BA0);
static_assert(offsetof(AIndianaCharacter, NonCombatMeshProps) == 0x0BB0);
static_assert(offsetof(AIndianaCharacter, ForeverProps) == 0x0BC0);
static_assert(offsetof(AIndianaCharacter, CreatureType) == 0x0BF8);
static_assert(offsetof(AIndianaCharacter, CreatureRole) == 0x0C00);
static_assert(offsetof(AIndianaAiCharacter, AIMovementComponent) == 0x0C68);
static_assert(offsetof(AIndianaAiCharacter, CompanionComponent) == 0x0C70);
static_assert(offsetof(AIndianaAiCharacter, AISettingsComponent) == 0x0C78);
static_assert(offsetof(AIndianaAiCharacter, InteractionComponent) == 0x0C80);
static_assert(offsetof(AIndianaAiCharacter, TargetingComponent) == 0x0C88);
static_assert(offsetof(AIndianaAiCharacter, HeadAndBodyTrackingComponent) == 0x0C90);
static_assert(offsetof(AIndianaAiCharacter, PersonalSpaceComponent) == 0x0C98);
static_assert(offsetof(AIndianaAiCharacter, ShoutComponent) == 0x0CA0);
static_assert(offsetof(AIndianaAiCharacter, DefensiveActionsComponent) == 0x0CA8);
static_assert(offsetof(AIndianaAiCharacter, AnimInstance) == 0x0CB0);
static_assert(offsetof(AIndianaAiCharacter, Personality) == 0x0CB8);
static_assert(offsetof(AIndianaAiCharacter, EyeSocketName) == 0x0CC4);
static_assert(offsetof(AIndianaAiCharacter, AimOriginSocketName) == 0x0CCC);
static_assert(offsetof(AIndianaAiCharacter, TrackedSocketOnRagdoll) == 0x0D4C);
static_assert(offsetof(AIndianaAiCharacter, FaceFXAssetNative) == 0x0D88);
static_assert(offsetof(AIndianaAiCharacter, FaceFXAuthoredSkeletonNative) == 0x0D90);
static_assert(offsetof(AIndianaAiCharacter, DefaultMaleEyePoseAsset) == 0x0D98);
static_assert(offsetof(AIndianaAiCharacter, DefaultFemaleEyePoseAsset) == 0x0DA0);
static_assert(offsetof(AIndianaAiCharacter, DefaultMaleFaceFXActor) == 0x0DA8);
static_assert(offsetof(AIndianaAiCharacter, DefaultFemaleFaceFXActor) == 0x0DB0);
static_assert(offsetof(AIndianaAiCharacter, DefaultMaleFaceFXReferenceSkeleton) == 0x0DB8);
static_assert(offsetof(AIndianaAiCharacter, DefaultFemaleFaceFXReferenceSkeleton) == 0x0DC0);
static_assert(offsetof(AIndianaAiCharacter, EmotionData) == 0x0DF0);
static_assert(offsetof(AIndianaAiCharacter, DefaultEmotion) == 0x0DF9);
static_assert(offsetof(AIndianaAiCharacter, GoodReaction) == 0x0DFB);
static_assert(offsetof(AIndianaAiCharacter, NeutralReaction) == 0x0DFC);
static_assert(offsetof(AIndianaAiCharacter, BadReaction) == 0x0DFD);
static_assert(offsetof(AIndianaAiController, BehaviorTreeComponent) == 0x03C0);
static_assert(offsetof(AIndianaAiController, DecisionTreeComponent) == 0x03C8);
static_assert(offsetof(AIndianaAiController, BehaviorStackComponent) == 0x03D0);
static_assert(offsetof(AIndianaAiController, TargetInfoComponent) == 0x03D8);
static_assert(offsetof(AIndianaAiController, InterestComponent) == 0x03E0);
static_assert(offsetof(AIndianaAiController, AIDetectionComponent) == 0x03E8);
static_assert(offsetof(AIndianaAiController, IndianaPerceptionComponent) == 0x03F0);
static_assert(offsetof(AIndianaAiController, IndianaPathFollowingComponent) == 0x03F8);
static_assert(offsetof(AIndianaAiController, DefaultNavigationBehaviorFilterClass) == 0x0410);
static_assert(offsetof(AIndianaAiController, DefaultNavigationEQSFilterClass) == 0x0418);
static_assert(offsetof(AIndianaAiController, CustomUpdateObject) == 0x0490);
static_assert(offsetof(UIndianaAIPerceptionComponent, OutOfCombatInteriorSightConfig) == 0x01E0);
static_assert(offsetof(UIndianaAIPerceptionComponent, OutOfCombatExteriorSightConfig) == 0x01E8);
static_assert(offsetof(UIndianaAIPerceptionComponent, InCombatSightConfig) == 0x01F0);
static_assert(offsetof(FAudioState, StateName) == 0x0000);
static_assert(offsetof(FAudioState, StateValue) == 0x0008);
static_assert(offsetof(AIndianaAkAmbientVolume, AmbientEvents) == 0x0358);
static_assert(offsetof(AIndianaAkAmbientVolume, AudioStates) == 0x0378);
static_assert(offsetof(AIndianaAkAmbientSpatialVolume, SurfaceReflectorSet) == 0x03D8);
static_assert(offsetof(AIndianaAkAmbientSpatialVolume, LateReverb) == 0x03E0);
static_assert(offsetof(AIndianaAkAmbientSpatialVolume, Room) == 0x03E8);
static_assert(offsetof(UIndianaAnimNotify_FootPlace, IKChainName) == 0x0040);
static_assert(offsetof(UIndianaAnimNotify_FootPlace, FootID) == 0x0055);
static_assert(offsetof(UIndianaAttribute, AttributeRpgStatMods) == 0x0030);
static_assert(offsetof(UIndianaAttributes, AttributeImplementations) == 0x0030);
static_assert(offsetof(UIndianaDefaultButtonAudioData, ButtonPressedSound) == 0x0038);
static_assert(offsetof(UIndianaDefaultButtonAudioData, ButtonHoveredSound) == 0x0040);
static_assert(offsetof(UIndianaDefaultButtonAudioData, ButtonFocusedSound) == 0x0048);
static_assert(offsetof(UIndianaDefaultButtonAudioData, ButtonSelectedPressedSound) == 0x0050);
static_assert(offsetof(UIndianaDefaultButtonAudioData, ButtonSelectedHoveredSound) == 0x0058);
static_assert(offsetof(UIndianaDefaultButtonAudioData, ButtonSelectedFocusedSound) == 0x0060);
static_assert(offsetof(UIndianaDefaultButtonAudioData, SliderHoveredSound) == 0x0068);
static_assert(offsetof(UIndianaDefaultButtonAudioData, SliderFocusedSound) == 0x0070);
static_assert(offsetof(UIndianaDefaultButtonAudioData, SliderStepSound) == 0x0078);
static_assert(offsetof(FLandAudioEvent, Event) == 0x0010);
static_assert(offsetof(UIndianaAudioComponent, CreatureType) == 0x00E8);
static_assert(offsetof(UIndianaAudioComponent, CharacterAudioEvents) == 0x00F0);
static_assert(offsetof(UIndianaAudioComponent, CharacterMovementAudioEvents) == 0x0140);
static_assert(offsetof(UIndianaAudioComponent, LandEvents) == 0x0190);
static_assert(offsetof(UIndianaAudioComponent, FootstepEventOverride) == 0x01A0);
static_assert(offsetof(UIndianaAudioComponent, CurrentFootstepAudio) == 0x01A8);
static_assert(offsetof(UIndianaAudioComponent, EventEffectState) == 0x01E8);
static_assert(offsetof(UIndianaAudioComponent, AnimationAudioSet) == 0x0208);
static_assert(offsetof(UIndianaAudioComponent, CurrentHeadStylePostProcess) == 0x0268);
static_assert(offsetof(UIndianaAudioComponent, CurrentExplicitPostProcess) == 0x0274);
static_assert(offsetof(FAutoConsoleCommandProperties, Command) == 0x0010);
static_assert(offsetof(FAutoRandomInputProperties, Key) == 0x0008);
static_assert(offsetof(UIndianaAutoPlayerTestSettings, FixedPlaythroughGuid) == 0x004C);
static_assert(offsetof(UIndianaAutoPlayerTestSettings, SnapRotationAxis) == 0x00E0);
static_assert(offsetof(UIndianaAutoPlayerTestSettings, ScreenshotDirectoryOverride) == 0x0148);
static_assert(offsetof(UIndianaAutoPlayerTestSettings, ConsoleCommandProperties) == 0x0168);
static_assert(offsetof(UIndianaAutoPlayerTestSettings, StatsToTrack) == 0x0190);
static_assert(offsetof(UIndianaAutoPlayerTestSettings, MemoryReportCommands) == 0x01A8);
static_assert(offsetof(UIndianaAutoPlayerTestSettings, RandomInputKeyProperties) == 0x01D8);
static_assert(offsetof(UIndianaBehaviorTreeComponent, GlobalParamsType) == 0x02E8);
static_assert(offsetof(UIndianaBehaviorTreeComponent, GlobalParams) == 0x0308);
static_assert(offsetof(UIndianaBossBar, HealthBarFillName) == 0x0320);
static_assert(offsetof(UIndianaBossBar, StatusEffectTag) == 0x0328);
static_assert(offsetof(UIndianaBossBar, MainVerticalBox) == 0x0330);
static_assert(offsetof(UIndianaBossBar, DamageBar) == 0x0338);
static_assert(offsetof(UIndianaBossBar, HealthBar) == 0x0340);
static_assert(offsetof(UIndianaBossBar, Tip) == 0x0348);
static_assert(offsetof(UIndianaBossBar, BossNameTextBlock) == 0x0350);
static_assert(offsetof(UIndianaBossBar, DamageBarMaterial) == 0x0358);
static_assert(offsetof(UIndianaBossBar, HealthBarMaterial) == 0x0360);
static_assert(offsetof(AIndianaCharacterDummy, DefaultFidgets) == 0x0570);
static_assert(offsetof(AIndianaCharacterDummy, UIDummyAnimData) == 0x0580);
static_assert(offsetof(AIndianaCharacterDummy, GroundOffsetComponent) == 0x05D0);
static_assert(offsetof(AIndianaCharacterDummy, EquipmentComponent) == 0x05D8);
static_assert(offsetof(AIndianaCharacterDummy, AppearanceComponent) == 0x05E0);
static_assert(offsetof(AIndianaCharacterDummy, PendingWeapon) == 0x05E8);
static_assert(offsetof(AIndianaCharacterDummy, UISelectionState) == 0x05F0);
static_assert(offsetof(AIndianaCharacterDummy, Props) == 0x05F8);
static_assert(offsetof(UIndianaDamageType, Type) == 0x0048);
static_assert(offsetof(UIndianaDamageType, Texture) == 0x0050);
static_assert(offsetof(UIndianaDamageType, Name) == 0x0058);
static_assert(offsetof(UIndianaDamageType, Description) == 0x0060);
static_assert(offsetof(UIndianaDamageType, ReceiveDamageStat) == 0x0070);
static_assert(offsetof(UIndianaDamageType, DeathSpellStatusEffect) == 0x0078);
static_assert(offsetof(UIndianaDamageType, DeathSpell) == 0x0080);
static_assert(offsetof(UIndianaDamageType, OnHitSpell) == 0x0088);
static_assert(offsetof(UIndianaDamageType, SpellChanceStat) == 0x0098);
static_assert(offsetof(UIndianaDamageType, DLCFlags) == 0x00A0);
static_assert(offsetof(UIndianaDragDropOperation, DefaultDragVisualClass) == 0x0090);
static_assert(offsetof(FAISoundDetectionSettings, DetectedAlertState) == 0x0000);
static_assert(offsetof(FAISoundDetectionSettings, AwarenessChangeStat) == 0x0010);
static_assert(offsetof(FAISoundDetectionSettings, StimulusType) == 0x0020);
static_assert(offsetof(UIndianaFormulas, SoundDetectionSettingsMap) == 0x0058);
static_assert(offsetof(UIndianaFormulas, MinEffectivenessByDifficulty) == 0x00D8);
static_assert(offsetof(UIndianaFormulas, DisguiseDetectorDrainRateCurve) == 0x0130);
static_assert(offsetof(UWeatherStateContainer, WeatherState) == 0x0030);
static_assert(offsetof(UIndianaGameInstance, PickupBasicBlueprint) == 0x01B0);
static_assert(offsetof(UIndianaGameInstance, Fonts) == 0x01C8);
static_assert(offsetof(UIndianaGameInstance, QuestManager) == 0x02A8);
static_assert(offsetof(UIndianaGameInstance, TelemetryManager) == 0x02B0);
static_assert(offsetof(UIndianaGameInstance, ScriptManager) == 0x02B8);
static_assert(offsetof(UIndianaGameInstance, ChatterManager) == 0x02C0);
static_assert(offsetof(UIndianaGameInstance, GlobalTeamManager) == 0x02C8);
static_assert(offsetof(UIndianaGameInstance, GlobalFactionManager) == 0x02D0);
static_assert(offsetof(UIndianaGameInstance, TalkManager) == 0x02D8);
static_assert(offsetof(UIndianaGameInstance, DifficultyManager) == 0x02E0);
static_assert(offsetof(UIndianaGameInstance, BeaconManager) == 0x02E8);
static_assert(offsetof(UIndianaGameInstance, TutorialManager) == 0x02F0);
static_assert(offsetof(UIndianaGameInstance, TutorialManagerClass) == 0x02F8);
static_assert(offsetof(UIndianaGameInstance, AchievementsManager) == 0x0300);
static_assert(offsetof(UIndianaGameInstance, AudioLogManager) == 0x0308);
static_assert(offsetof(UIndianaGameInstance, AudioLogManagerClass) == 0x0310);
static_assert(offsetof(UIndianaGameInstance, TravelDestinationData) == 0x0320);
static_assert(offsetof(UIndianaGameInstance, SaveGameManager) == 0x0328);
static_assert(offsetof(UIndianaGameInstance, GameCalendar) == 0x0330);
static_assert(offsetof(UIndianaGameInstance, CompanionManager) == 0x0338);
static_assert(offsetof(UIndianaGameInstance, OverridePlayerClass) == 0x0340);
static_assert(offsetof(UIndianaGameInstance, LoadingScreenManager) == 0x0348);
static_assert(offsetof(UIndianaGameInstance, MusicManager) == 0x0350);
static_assert(offsetof(UIndianaGameInstance, DLCManager) == 0x0358);
static_assert(offsetof(UIndianaGameInstance, ParticlePool) == 0x0360);
static_assert(offsetof(UIndianaGameInstance, BossFightManager) == 0x0368);
static_assert(offsetof(UIndianaGameInstance, ActivityManager) == 0x0370);
static_assert(offsetof(UIndianaGameInstance, TexturePoolAdjustments) == 0x0438);
static_assert(offsetof(UIndianaGameInstance, MinScreenRadiusForLightsOverrides) == 0x0488);
static_assert(offsetof(UIndianaGameInstance, MinScreenRadiusForCSMDepthOverrides) == 0x04D8);
static_assert(offsetof(UIndianaGameInstance, MinScreenRadiusForDepthPrepassOverrides) == 0x0528);
static_assert(offsetof(UIndianaGameInstance, LightMaxDrawDistanceScaleOverrides) == 0x0578);
static_assert(offsetof(UIndianaGameInstance, CSMShadowDistanceFadeoutMultiplierOverrides) == 0x05C8);
static_assert(offsetof(UIndianaGameInstance, ShadowRadiusThresholdOverrides) == 0x0618);
static_assert(offsetof(UIndianaGameInstance, RayTracingMaxShadowDistanceOverrides) == 0x0668);
static_assert(offsetof(UIndianaGameInstance, FarShadowDistanceOverrides) == 0x06B8);
static_assert(offsetof(UIndianaGameInstance, ShadowDistanceScaleOverrides) == 0x0708);
static_assert(offsetof(UIndianaGameInstance, FoliageDensityScaleTier0) == 0x0758);
static_assert(offsetof(UIndianaGameInstance, FoliageDensityScaleTier1) == 0x07A8);
static_assert(offsetof(UIndianaGameInstance, FoliageDensityScaleTier2) == 0x07F8);
static_assert(offsetof(UIndianaGameInstance, FoliageMinimumScreenSizeOverrides) == 0x0848);
static_assert(offsetof(UIndianaGameInstance, FarShadowOverrides) == 0x08A0);
static_assert(offsetof(UIndianaGameInstance, AutoPlayer) == 0x08F0);
static_assert(offsetof(UIndianaGameInstance, DevelopmentFunctionality) == 0x08F8);
static_assert(offsetof(UIndianaGameInstance, PreviousWeather) == 0x0D60);
static_assert(offsetof(AIndianaGameMode, CustomPlayerClass) == 0x03D0);
static_assert(offsetof(UIndianaGameUserSettings, AddedActionKeyBinds) == 0x0350);
static_assert(offsetof(UIndianaGameUserSettings, RemovedActionKeyBinds) == 0x0360);
static_assert(offsetof(UIndianaGameUserSettings, AddedAxisKeyBinds) == 0x0370);
static_assert(offsetof(UIndianaGameUserSettings, RemovedAxisKeyBinds) == 0x0380);
static_assert(offsetof(UIndianaGameUserSettings, FSR2Mode) == 0x05F6);
static_assert(offsetof(UIndianaGameUserSettings, LastConfirmedFSR2Mode) == 0x05F7);
static_assert(offsetof(UIndianaGameUserSettings, FPSLimit) == 0x0688);
static_assert(offsetof(UIndianaGameUserSettings, LastConfirmedFPSLimit) == 0x0689);
static_assert(offsetof(UIndianaGameUserSettings, ConversationSubtitleMode) == 0x06E8);
static_assert(offsetof(UIndianaGameUserSettings, PerformanceMode) == 0x071A);
static_assert(offsetof(UIndianaGameUserSettings, LanguageMode) == 0x0730);
static_assert(offsetof(UIndianaGameUserSettings, WeaponTooltipStatMode) == 0x0735);
static_assert(offsetof(UIndianaGameUserSettings, HUDMode) == 0x0760);
static_assert(offsetof(UIndianaGameUserSettings, FPSIndicatorMode) == 0x0778);
static_assert(offsetof(UIndianaGameUserSettings, CompassVisibilityMode) == 0x0779);
static_assert(offsetof(UIndianaGameUserSettings, EnemyHealthBarMode) == 0x07C1);
static_assert(offsetof(UIndianaGameUserSettings, AimingReticleMode) == 0x07D8);
static_assert(offsetof(UIndianaGameUserSettings, ReticleMode) == 0x07D9);
static_assert(offsetof(UIndianaGameUserSettings, QuestUpdateMode) == 0x0820);
static_assert(offsetof(UIndianaGameUserSettings, EnemyAwarenessMeterMode) == 0x0838);
static_assert(offsetof(UIndianaGameUserSettings, PlayerStatusBarMode) == 0x0850);
static_assert(offsetof(UIndianaGameUserSettings, PlayerStatusEffectTextMode) == 0x0869);
static_assert(offsetof(UIndianaGameUserSettings, CompanionAbilityUIMode) == 0x086A);
static_assert(offsetof(UIndianaGameUserSettings, CompanionAbilityBindingMode) == 0x0880);
static_assert(offsetof(UIndianaGameUserSettings, HeldWeaponDisplayMode) == 0x0898);
static_assert(offsetof(UIndianaGameUserSettings, HeldWeaponDisplayTextMode) == 0x08B0);
static_assert(offsetof(UIndianaGameUserSettings, AreaNameMode) == 0x08C8);
static_assert(offsetof(UIndianaGameUserSettings, DirectionalDamageIndicatorMode) == 0x08E0);
static_assert(offsetof(UIndianaGameUserSettings, SurvivalMeterMode) == 0x08E1);
static_assert(offsetof(UIndianaGameUserSettings, MedicalInhalerUIMode) == 0x08F8);
static_assert(offsetof(UIndianaGameUserSettings, AbilityControlUIMode) == 0x0910);
static_assert(offsetof(UIndianaGameUserSettings, TTDDisplayMode) == 0x0928);
static_assert(offsetof(UIndianaGameUserSettings, DodgeDisplayMode) == 0x0940);
static_assert(offsetof(UIndianaGameUserSettings, CompanionStatusUIMode) == 0x0958);
static_assert(offsetof(UIndianaGameUserSettings, CompanionAbilityPassiveCDMode) == 0x0970);
static_assert(offsetof(UIndianaGameUserSettings, CompanionAbilityPassiveNotificationMode) == 0x0971);
static_assert(offsetof(UIndianaGameUserSettings, TTDReticleMeterMode) == 0x09B8);
static_assert(offsetof(UIndianaGameUserSettings, WeaponSelectMode) == 0x0A01);
static_assert(offsetof(UIndianaGameUserSettings, WeaponSelectAxisMode) == 0x0A02);
static_assert(offsetof(UIndianaGameUserSettings, SimplifiedLockpickHackingMode) == 0x0A03);
static_assert(offsetof(UIndianaGameUserSettings, DialogSkillMode) == 0x0A06);
static_assert(offsetof(UIndianaGameUserSettings, CompanionOutlineMode) == 0x0A5A);
static_assert(offsetof(UIndianaGlobals, GlobalWeaponData) == 0x0030);
static_assert(offsetof(UIndianaGlobals, GlobalMeleeData) == 0x0038);
static_assert(offsetof(UIndianaGlobals, GlobalArmorData) == 0x0040);
static_assert(offsetof(UIndianaGlobals, GlobalTeamData) == 0x0048);
static_assert(offsetof(UIndianaGlobals, GlobalFactionData) == 0x0050);
static_assert(offsetof(UIndianaGlobals, GlobalAIData) == 0x0058);
static_assert(offsetof(UIndianaGlobals, GlobalUIData) == 0x0060);
static_assert(offsetof(UIndianaGlobals, GlobalItemData) == 0x0068);
static_assert(offsetof(UIndianaGlobals, GlobalCharacterCreationData) == 0x0070);
static_assert(offsetof(UIndianaGlobals, GlobalRedirectorMap) == 0x0078);
static_assert(offsetof(UIndianaGlobals, GlobalIndianaStatData) == 0x0080);
static_assert(offsetof(UIndianaGlobals, GlobalAchievementData) == 0x0088);
static_assert(offsetof(UIndianaGlobals, GlobalKeybindData) == 0x0090);
static_assert(offsetof(UIndianaGlobals, IndianaFormulas) == 0x0098);
static_assert(offsetof(UIndianaGlobals, IndianaFormulasClass) == 0x00A0);
static_assert(offsetof(UIndianaGlobals, PointOfNoReturnRollback) == 0x00A8);
static_assert(offsetof(UIndianaGlobals, PointOfNoReturnRollbackClass) == 0x00B0);
static_assert(offsetof(UIndianaGlobals, IndianaSkillsClass) == 0x00B8);
static_assert(offsetof(UIndianaGlobals, IndianaAttributesClass) == 0x00C0);
static_assert(offsetof(UIndianaGlobals, CharacterDeathData) == 0x01B0);
static_assert(offsetof(UIndianaGlobals, GlobalAudioData) == 0x01B8);
static_assert(offsetof(UIndianaGlobals, DefaultCurrencyItem) == 0x01C0);
static_assert(offsetof(UIndianaGlobals, ShipTravelData) == 0x01C8);
static_assert(offsetof(UIndianaGlobals, EvidenceProximityEvent) == 0x0218);
static_assert(offsetof(UIndianaGlobals, ConversationManager) == 0x0240);
static_assert(offsetof(FTagToAudio, PrimaryItemSkill) == 0x0000);
static_assert(offsetof(FTagToAudio, AudioEvent) == 0x0008);
static_assert(offsetof(FTagToAudioList, AudioForItems) == 0x0000);
static_assert(offsetof(UIndianaItemAudioData, WeaponAndArmorAudio) == 0x0038);
static_assert(offsetof(FWeightedImageData, Image) == 0x0008);
static_assert(offsetof(FWeightedImageData, ID) == 0x003C);
static_assert(offsetof(FLoadingImageContainer, LoadingImages) == 0x0000);
static_assert(offsetof(FConditionalizedLoadingImageContainer, DebugName) == 0x0000);
static_assert(offsetof(FConditionalizedLoadingImageContainer, Image) == 0x0010);
static_assert(offsetof(FConditionalizedLoadingImageContainer, Conditional) == 0x0060);
static_assert(offsetof(FConditionalizedLoadingTips, Tip) == 0x0000);
static_assert(offsetof(FConditionalizedLoadingTips, Conditional) == 0x0008);
static_assert(offsetof(UIndianaLoadingScreenImageData, EndGameLoadingImages) == 0x0038);
static_assert(offsetof(UIndianaLoadingScreenImageData, RegionSpecificLoadingImages) == 0x00D8);
static_assert(offsetof(UIndianaLoadingScreenImageData, StorySpecificLoadingImages) == 0x0128);
static_assert(offsetof(UIndianaLoadingScreenImageData, GenericLoadingScreenImages) == 0x0138);
static_assert(offsetof(UIndianaLoadingScreenImageData, RegionMapping) == 0x0148);
static_assert(offsetof(UIndianaLoadingScreenImageData, LoadingTips) == 0x0198);
static_assert(offsetof(UIndianaLoadingScreenImageData, ConditionalizedTips) == 0x01A8);
static_assert(offsetof(UIndianaLoadingScreenImageData, LoadingScreenFont) == 0x01B8);
static_assert(offsetof(UIndianaLoadingScreenManager, LoadingScreenImages) == 0x0050);
static_assert(offsetof(UIndianaLoadingScreenManager, LoadingScreenTips) == 0x0060);
static_assert(offsetof(UIndianaLoadingScreenManager, LoadingScreenWidgetRef) == 0x0070);
static_assert(offsetof(FRotatedBox, Box) == 0x0000);
static_assert(offsetof(FRotatedBox, Transform) == 0x0020);
static_assert(offsetof(UIndianaNavModifierComponent, AreaClass) == 0x0110);
static_assert(offsetof(UIndianaNavModifierComponent, CollisionComponent) == 0x0120);
static_assert(offsetof(UIndianaNavModifierComponent, CustomCollision) == 0x0130);
static_assert(offsetof(UIndianaPlayerAudioComponent, PlayerAudioEvents) == 0x0280);
static_assert(offsetof(UIndianaPlayerAudioComponent, RequiredRequestTimes) == 0x02D8);
static_assert(offsetof(AIndianaPlayerCharacter, FPVMesh) == 0x0C88);
static_assert(offsetof(AIndianaPlayerCharacter, FPVCamera) == 0x0C90);
static_assert(offsetof(AIndianaPlayerCharacter, PlayerInfoComponent) == 0x0C98);
static_assert(offsetof(AIndianaPlayerCharacter, TargetingComponent) == 0x0CA0);
static_assert(offsetof(AIndianaPlayerCharacter, StaminaComponent) == 0x0CA8);
static_assert(offsetof(AIndianaPlayerCharacter, RecoilManager) == 0x0CB0);
static_assert(offsetof(AIndianaPlayerCharacter, AimAssistComponent) == 0x0CB8);
static_assert(offsetof(AIndianaPlayerCharacter, StealthComponent) == 0x0CC0);
static_assert(offsetof(AIndianaPlayerCharacter, FPVCameraSocket) == 0x0CC8);
static_assert(offsetof(AIndianaPlayerCharacter, GameInputComponent) == 0x0CD0);
static_assert(offsetof(AIndianaPlayerCharacter, PlayerAudioComponent) == 0x0CD8);
static_assert(offsetof(AIndianaPlayerCharacter, InteractionInputComponent) == 0x0CE0);
static_assert(offsetof(AIndianaPlayerCharacter, HitEffectIndicatorComponent) == 0x0CE8);
static_assert(offsetof(AIndianaPlayerCharacter, PostProcessEffectsComponent) == 0x0CF0);
static_assert(offsetof(AIndianaPlayerCharacter, Default_PP_Settings) == 0x0D00);
static_assert(offsetof(AIndianaPlayerCharacter, InteractionComponent) == 0x1270);
static_assert(offsetof(AIndianaPlayerCharacter, PlayerEnvironmentComponent) == 0x1278);
static_assert(offsetof(AIndianaPlayerCharacter, ConversationCameraComponent) == 0x1280);
static_assert(offsetof(AIndianaPlayerCharacter, CompanionManagerComponent) == 0x1288);
static_assert(offsetof(AIndianaPlayerCharacter, CompanionPositionComponent) == 0x1290);
static_assert(offsetof(AIndianaPlayerCharacter, CompanionCommandComponent) == 0x1298);
static_assert(offsetof(AIndianaPlayerCharacter, PlayerInventory) == 0x12A0);
static_assert(offsetof(AIndianaPlayerCharacter, TimeDilationComponent) == 0x12A8);
static_assert(offsetof(AIndianaPlayerCharacter, TacticalTimeDilationComponent) == 0x12B0);
static_assert(offsetof(AIndianaPlayerCharacter, TimeDilationClass) == 0x12B8);
static_assert(offsetof(AIndianaPlayerCharacter, ConversationLightingClass) == 0x12C0);
static_assert(offsetof(AIndianaPlayerCharacter, LoadingImagesSeen) == 0x14A8);
static_assert(offsetof(AIndianaPlayerCharacter, CurrentShipLocation) == 0x1568);
static_assert(offsetof(AIndianaPlayerCharacter, PresetData) == 0x15E8);
static_assert(offsetof(AIndianaPlayerCharacter, PickPocketStat) == 0x15F0);
static_assert(offsetof(AIndianaPlayerCharacter, HackStat) == 0x15F8);
static_assert(offsetof(AIndianaPlayerCharacter, HackStatusEffect) == 0x1600);
static_assert(offsetof(AIndianaPlayerCharacter, DoubleHackStatusEffect) == 0x1608);
static_assert(offsetof(AIndianaPlayerCharacter, PristineLootChanceStat) == 0x1670);
static_assert(offsetof(AIndianaPlayerCharacter, CompanionsToTrackSKills) == 0x16E8);
static_assert(offsetof(AIndianaPlayerStart, TravelDestinationData) == 0x02E8);
static_assert(offsetof(AIndianaPlayerStart, LeftCompanion) == 0x02F0);
static_assert(offsetof(AIndianaPlayerStart, RightCompanion) == 0x02F8);
static_assert(offsetof(AIndianaPlayerStart, FollowerCompanion) == 0x0300);
static_assert(offsetof(AIndianaPlayerStart, AwareBounds) == 0x0308);
static_assert(offsetof(AIndianaPlayerStart, VisitedBounds) == 0x0310);
static_assert(offsetof(FSkillUnlockEffect, EquippedWeaponSkill) == 0x0000);
static_assert(offsetof(FSkillUnlockEffect, Spell) == 0x0008);
static_assert(offsetof(FSkillUnlockEffect, UnlockTierString) == 0x0010);
static_assert(offsetof(UIndianaSkill, PrimaryAttribute) == 0x0030);
static_assert(offsetof(UIndianaSkill, SecondaryAttribute) == 0x0031);
static_assert(offsetof(UIndianaSkill, SkillStatMods) == 0x0038);
static_assert(offsetof(UIndianaSkill, CompanionSkillStatMods) == 0x0048);
static_assert(offsetof(UIndianaSkill, UnlockEffects) == 0x0058);
static_assert(offsetof(UIndianaSkill, SkillCategory) == 0x0068);
static_assert(offsetof(UIndianaSkill, DescriptionFormat) == 0x0070);
static_assert(offsetof(USneakSkill, UnlockStat) == 0x0078);
static_assert(offsetof(UIndianaSkills, SkillImplementations) == 0x0030);
static_assert(offsetof(FSkillsArray, Skills) == 0x0000);
static_assert(offsetof(FAttributesArray, Attributes) == 0x0000);
static_assert(offsetof(UIndianaStatGlobals, SkillCategoryMap) == 0x0038);
static_assert(offsetof(UIndianaStatGlobals, AttributeGroupMap) == 0x0088);
static_assert(offsetof(UIndianaStatGlobals, SkillChecksByLevel) == 0x0108);
static_assert(offsetof(UIndianaStats, NativeStats) == 0x0030);
static_assert(offsetof(UIndianaStats, AttributeStats) == 0x0040);
static_assert(offsetof(UIndianaStats, SkillStats) == 0x0088);
static_assert(offsetof(AIndianaTargetPoint, IDComponent) == 0x02B8);
static_assert(offsetof(UIndianaTextAnimationData, IndianaTextAnimationData) == 0x0038);
static_assert(offsetof(AIndianaUI, HUDClass) == 0x0420);
static_assert(offsetof(AIndianaUI, LedgerWidgetClass) == 0x0428);
static_assert(offsetof(AIndianaUI, InventoryWidgetClass) == 0x0430);
static_assert(offsetof(AIndianaUI, PauseMenuWidgetClass) == 0x0438);
static_assert(offsetof(AIndianaUI, DeathMenuWidgetClass) == 0x0440);
static_assert(offsetof(AIndianaUI, SettingsMenuWidgetClass) == 0x0448);
static_assert(offsetof(AIndianaUI, ConversationWidgetClass) == 0x0450);
static_assert(offsetof(AIndianaUI, ConversationSubtitleWidgetClass) == 0x0458);
static_assert(offsetof(AIndianaUI, SlideshowWidgetClass) == 0x0460);
static_assert(offsetof(AIndianaUI, ComputerTerminalWidgetClass) == 0x0468);
static_assert(offsetof(AIndianaUI, ItemContainerClass) == 0x0470);
static_assert(offsetof(AIndianaUI, LevelUpNotificationClass) == 0x0478);
static_assert(offsetof(AIndianaUI, DebugOverlayWidgetClass) == 0x0480);
static_assert(offsetof(AIndianaUI, ContextMenuClass) == 0x0488);
static_assert(offsetof(AIndianaUI, ItemInspectorClass) == 0x0490);
static_assert(offsetof(AIndianaUI, WorkbenchClass) == 0x0498);
static_assert(offsetof(AIndianaUI, VendorClass) == 0x04A0);
static_assert(offsetof(AIndianaUI, ItemTransferClass) == 0x04A8);
static_assert(offsetof(AIndianaUI, ToolTipContainerClass) == 0x04B0);
static_assert(offsetof(AIndianaUI, GenericDialogBoxClass) == 0x04B8);
static_assert(offsetof(AIndianaUI, DialogWarningBoxClass) == 0x04C0);
static_assert(offsetof(AIndianaUI, GenericDialogBoxRespecClass) == 0x04C8);
static_assert(offsetof(AIndianaUI, GenericMoviePlayerClass) == 0x04D0);
static_assert(offsetof(AIndianaUI, CinematicPlayerClass) == 0x04D8);
static_assert(offsetof(AIndianaUI, ExaminableClass) == 0x04E0);
static_assert(offsetof(AIndianaUI, GenericItemToolTipClass) == 0x04E8);
static_assert(offsetof(AIndianaUI, HealthKitToolTipClass) == 0x04F0);
static_assert(offsetof(AIndianaUI, WaitTimeWidget) == 0x04F8);
static_assert(offsetof(AIndianaUI, TutorialPopupWidgetClass) == 0x0500);
static_assert(offsetof(AIndianaUI, SubtitleInterfaceClass) == 0x0550);
static_assert(offsetof(AIndianaUI, SaveLoadClass) == 0x0558);
static_assert(offsetof(AIndianaUI, Missing32) == 0x0560);
static_assert(offsetof(AIndianaUI, Missing64) == 0x0568);
static_assert(offsetof(AIndianaUI, Missing128) == 0x0570);
static_assert(offsetof(AIndianaUI, Missing256) == 0x0578);
static_assert(offsetof(AIndianaUI, ToolTipContainerWidget) == 0x05B0);
static_assert(offsetof(AIndianaUI, DamageTypes) == 0x0610);
static_assert(offsetof(AIndianaUI, ArmorComponent) == 0x0620);
static_assert(offsetof(AIndianaUI, UIItemAudioData) == 0x0628);
static_assert(offsetof(AIndianaUI, DebugOverlayWidget) == 0x0650);
static_assert(offsetof(AIndianaUI, DamageTextManager) == 0x0658);
static_assert(offsetof(AIndianaUI, DamageTextManagerClass) == 0x0668);
static_assert(offsetof(AIndianaUI, StatusTagManager) == 0x0670);
static_assert(offsetof(AIndianaUI, StatusTagManagerClass) == 0x0678);
static_assert(offsetof(UIndianaUIAudioData, AudioEvents) == 0x0038);
static_assert(offsetof(UIndianaUIColorsData, IndianaUIColors) == 0x0038);
static_assert(offsetof(UIndianaUIColorsData, IndianaUIOpacitySettings) == 0x0088);
static_assert(offsetof(UIndianaUIControllerIconsData, Icons) == 0x00D8);
static_assert(offsetof(AIndianaWorldSettings, MapInformation) == 0x04A0);
static_assert(offsetof(AIndianaWorldSettings, ShouldLoadLevelLogicConditions) == 0x04A8);
static_assert(offsetof(AIndianaWorldSettings, PresenceData) == 0x04F8);
static_assert(offsetof(AIndianaWorldSettings, GameplayMusicSettings) == 0x0500);
static_assert(offsetof(AIndianaWorldSettings, LevelAssets) == 0x0508);
static_assert(offsetof(AIndianaWorldSettings, LockedCompanionHomeBaseStasisOverrideVariables) == 0x0538);
static_assert(offsetof(AIndianaWorldSettings, ConversationLightingClassOverride) == 0x05A0);
static_assert(offsetof(AIndianaWorldSettings, PreloadAssets) == 0x05A8);
static_assert(offsetof(AIndianaWorldSettings, ChunkIndex) == 0x05B0);
static_assert(offsetof(UInputGuideWidget, HoldWidget) == 0x0300);
static_assert(offsetof(UInputGuideWidget, InputGuide) == 0x0308);
static_assert(offsetof(UInputGuideWidget, InputGuideOptional) == 0x0310);
static_assert(offsetof(UInputGuideWidget, TextContainer) == 0x0318);
static_assert(offsetof(UInputGuideWidget, OptionalTextContainer) == 0x0320);
static_assert(offsetof(UInputGuideWidget, RadialFill) == 0x0328);
static_assert(offsetof(UInputGuideWidget, TextAreaBorder) == 0x0330);
static_assert(offsetof(UInputGuideWidget, OptionalTextAreaBorder) == 0x0338);
static_assert(offsetof(UInputGuideWidget, ModuleImage) == 0x0340);
static_assert(offsetof(UInputGuideWidget, SkillImage) == 0x0348);
static_assert(offsetof(UInputGuideWidget, SkillTextHorizontalBox) == 0x0350);
static_assert(offsetof(UInputGuideWidget, InteractionPlayerSkill) == 0x0358);
static_assert(offsetof(UInputGuideWidget, InteractionSkillRequired) == 0x0360);
static_assert(offsetof(UInputGuideWidget, InteractionTextHorizontalBox) == 0x0368);
static_assert(offsetof(UInputGuideWidget, ItemImage) == 0x0370);
static_assert(offsetof(UInputGuideWidget, ArrowsOverlay) == 0x0378);
static_assert(offsetof(UInputGuideWidget, InteractionPlayerResources) == 0x0380);
static_assert(offsetof(UInputGuideWidget, InteractionResourcesRequired) == 0x0388);
static_assert(offsetof(UInputGuideWidget, HackImpossible) == 0x0390);
static_assert(offsetof(UInputGuideWidget, RotatingRedCircle) == 0x0398);
static_assert(offsetof(UInputGuideWidget, LittleRedCircleOverlay) == 0x03A0);
static_assert(offsetof(UInputGuideWidget, KeycardImage) == 0x03A8);
static_assert(offsetof(UInputGuideWidget, HackImpossibleImage) == 0x03B0);
static_assert(offsetof(UInputGuideWidget, InteractResourceDisplay) == 0x03B8);
static_assert(offsetof(UInputGuideWidget, RadialOverlay) == 0x03C0);
static_assert(offsetof(UInputGuideWidget, TextPromptSizebox) == 0x03C8);
static_assert(offsetof(UInputGuideWidget, LockedComputer) == 0x03D0);
static_assert(offsetof(UInputGuideWidget, UnlockedComputer) == 0x03D8);
static_assert(offsetof(UInputGuideWidget, LockedContainer) == 0x03E0);
static_assert(offsetof(UInputGuideWidget, UnlockedContainer) == 0x03E8);
static_assert(offsetof(UInputGuideWidget, LockedDoor) == 0x03F0);
static_assert(offsetof(UInputGuideWidget, UnlockedDoor) == 0x03F8);
static_assert(offsetof(UInputGuideWidget, LockedPickpocket) == 0x0400);
static_assert(offsetof(UInputGuideWidget, UnlockedPickpocket) == 0x0408);
static_assert(offsetof(UInputGuideWidget, LockedRobot) == 0x0410);
static_assert(offsetof(UInputGuideWidget, UnlockedRobot) == 0x0418);
static_assert(offsetof(UInputGuideWidget, LockedTrap) == 0x0420);
static_assert(offsetof(UInputGuideWidget, UnlockedTrap) == 0x0428);
static_assert(offsetof(UInputGuideWidget, LockedKeycard) == 0x0430);
static_assert(offsetof(UInputGuideWidget, UnlockedKeycard) == 0x0438);
static_assert(offsetof(UInputGuideWidget, SkillHackTexture) == 0x0440);
static_assert(offsetof(UInputGuideWidget, SkillLockpickTexture) == 0x0448);
static_assert(offsetof(UInputGuideWidget, SkillPickpocketTexture) == 0x0450);
static_assert(offsetof(UInputGuideWidget, ItemLockpickTexture) == 0x0458);
static_assert(offsetof(UInputGuideWidget, ItemHackTexture) == 0x0460);
static_assert(offsetof(UInputGuideWidget, FontColorType) == 0x0468);
static_assert(offsetof(UInputLabelGroupWidget, InputLabelClass) == 0x0300);
static_assert(offsetof(UInputLabelGroupWidget, EntryContainer) == 0x0308);
static_assert(offsetof(UInputLabelGroupWidget, SecondRowEntryContainer) == 0x0310);
static_assert(offsetof(UInputLabelGroupWidget, FrameHorizontalBox) == 0x0318);
static_assert(offsetof(UInputLabelGroupWidget, LabelDescriptions) == 0x0320);
static_assert(offsetof(UInputLabelHoldWidget, HoldTextBlock) == 0x0300);
static_assert(offsetof(UInputLabelHoldWidget, KeyInputHoldlessTextBlock) == 0x0308);
static_assert(offsetof(UInputLabelHoldWidget, KeyboardMasterOverlay) == 0x0310);
static_assert(offsetof(UInputLabelHoldWidget, GamepadIcon) == 0x0318);
static_assert(offsetof(UInputLabelHoldWidget, KeyRadialReveal) == 0x0320);
static_assert(offsetof(UInputLabelHoldWidget, GamepadMasterOverlay) == 0x0328);
static_assert(offsetof(UInputLabelHoldWidget, KeyInputSizeBox) == 0x0330);
static_assert(offsetof(UInputLabelHoldWidget, GamepadOverlay) == 0x0338);
static_assert(offsetof(UInputLabelHoldWidget, GamepadRadialReveal) == 0x0340);
static_assert(offsetof(UInputLabelHoldWidget, ButtonOverlay) == 0x0348);
static_assert(offsetof(UInputLabelWidget, TextReference) == 0x0318);
static_assert(offsetof(UInputLabelWidget, IconName) == 0x0328);
static_assert(offsetof(UInputLabelWidget, Icon) == 0x0338);
static_assert(offsetof(UInputLabelWidget, ActionName) == 0x0340);
static_assert(offsetof(UInputLabelWidget, Action) == 0x0350);
static_assert(offsetof(UInputLabelWidget, HoldWidget) == 0x0360);
static_assert(offsetof(UInputLabelWidget, ActionTextBlock) == 0x0368);
static_assert(offsetof(UInputWidget, Action) == 0x0318);
static_assert(offsetof(UInputWidget, KeyboardMasterOverlay) == 0x0328);
static_assert(offsetof(UInputWidget, GamepadIcon) == 0x0330);
static_assert(offsetof(UInputWidget, GamepadMasterOverlay) == 0x0338);
static_assert(offsetof(UInputWidget, KeyInputHoldlessTextBlock) == 0x0340);
static_assert(offsetof(UInputWidget, KeyInputSizeBox) == 0x0348);
static_assert(offsetof(UInputWidget, ButtonOverlay) == 0x0350);
static_assert(offsetof(UInstantHitData, ImpactDataSet) == 0x0038);
static_assert(offsetof(UInstantHitData, TrailFx) == 0x0040);
static_assert(offsetof(UInstantHitData, TrailFxEndParam) == 0x0048);
static_assert(offsetof(FInteractPayload, String) == 0x0008);
static_assert(offsetof(FInteractActorDescription, Actor) == 0x0000);
static_assert(offsetof(FInteractActorDescription, Payload) == 0x0008);
static_assert(offsetof(UInteractableComponent, Payload) == 0x0270);
static_assert(offsetof(UInteractableComponent, InteractTargets) == 0x02A0);
static_assert(offsetof(UInteractableComponent, Events) == 0x02C8);
static_assert(offsetof(UInteractableMapEntry, Button) == 0x0300);
static_assert(offsetof(UScriptingEvent, ScriptEvents) == 0x0030);
static_assert(offsetof(FInterestTypeData, InterestType) == 0x0000);
static_assert(offsetof(UInterestDataPackage, InterestTypeData) == 0x0048);
static_assert(offsetof(UInventoryAmmoData, HandgunAmmoClass) == 0x0038);
static_assert(offsetof(UInventoryAmmoData, RifleAmmoClass) == 0x0040);
static_assert(offsetof(UInventoryAmmoData, EnergyCellAmmoClass) == 0x0048);
static_assert(offsetof(UInventoryPageWidget, Name) == 0x0400);
static_assert(offsetof(UInventoryPageWidget, HeaderTextblock) == 0x0408);
static_assert(offsetof(UInventoryPageWidget, ComparisonTextBlock) == 0x0410);
static_assert(offsetof(UInventoryArmorPageWidget, DragContainer0) == 0x0438);
static_assert(offsetof(UInventoryArmorPageWidget, DragContainer1) == 0x0440);
static_assert(offsetof(UInventoryArmorPageWidget, Button0) == 0x0448);
static_assert(offsetof(UInventoryArmorPageWidget, Button1) == 0x0450);
static_assert(offsetof(UInventoryArmorPageWidget, EquipmentBorder) == 0x0458);
static_assert(offsetof(UInventoryArmorPageWidget, EquipmentOverlay) == 0x0460);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugButtonMain) == 0x0440);
static_assert(offsetof(UInventoryConsumablesPageWidget, ChargeTextBlock) == 0x0448);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugDragContainer0) == 0x0450);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugDragContainer1) == 0x0458);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugDragContainer2) == 0x0460);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugDragContainer3) == 0x0468);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugButton0) == 0x0470);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugButton1) == 0x0478);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugButton2) == 0x0480);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugButton3) == 0x0488);
static_assert(offsetof(UInventoryConsumablesPageWidget, UnavailableImage0) == 0x0490);
static_assert(offsetof(UInventoryConsumablesPageWidget, UnavailableImage1) == 0x0498);
static_assert(offsetof(UInventoryConsumablesPageWidget, UnavailableImage2) == 0x04A0);
static_assert(offsetof(UInventoryConsumablesPageWidget, UnavailableImage3) == 0x04A8);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugCharge0) == 0x04B0);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugCharge1) == 0x04B8);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugCharge2) == 0x04C0);
static_assert(offsetof(UInventoryConsumablesPageWidget, DrugCharge3) == 0x04C8);
static_assert(offsetof(UInventoryConsumablesPageWidget, SlotText0) == 0x04D0);
static_assert(offsetof(UInventoryConsumablesPageWidget, SlotText1) == 0x04D8);
static_assert(offsetof(UInventoryConsumablesPageWidget, SlotText2) == 0x04E0);
static_assert(offsetof(UInventoryConsumablesPageWidget, SlotText3) == 0x04E8);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedicalSkillText1) == 0x04F0);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedicalSkillText2) == 0x04F8);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedicalSkillText3) == 0x0500);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedicalText1) == 0x0508);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedicalText2) == 0x0510);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedicalText3) == 0x0518);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedKitAdrenoSlot) == 0x0520);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedKitDrugSlot1) == 0x0528);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedKitDrugSlot2) == 0x0530);
static_assert(offsetof(UInventoryConsumablesPageWidget, MedKitDrugSlot3) == 0x0538);
static_assert(offsetof(UInventoryConsumablesPageWidget, WidgetClass) == 0x0540);
static_assert(offsetof(UInventoryGadgetsPageWidget, DragContainer0) == 0x0430);
static_assert(offsetof(UInventoryGadgetsPageWidget, DragContainer1) == 0x0438);
static_assert(offsetof(UInventoryGadgetsPageWidget, DragContainer2) == 0x0440);
static_assert(offsetof(UInventoryGadgetsPageWidget, DragContainer3) == 0x0448);
static_assert(offsetof(UInventoryGadgetsPageWidget, DragContainer4) == 0x0450);
static_assert(offsetof(UInventoryGadgetsPageWidget, GadgetButton0) == 0x0458);
static_assert(offsetof(UInventoryGadgetsPageWidget, GadgetButton1) == 0x0460);
static_assert(offsetof(UInventoryGadgetsPageWidget, GadgetButton2) == 0x0468);
static_assert(offsetof(UInventoryGadgetsPageWidget, GadgetButton3) == 0x0470);
static_assert(offsetof(UInventoryGadgetsPageWidget, GadgetButton4) == 0x0478);
static_assert(offsetof(UInventoryGadgetsPageWidget, UnavailableImage0) == 0x0480);
static_assert(offsetof(UInventoryGadgetsPageWidget, UnavailableImage1) == 0x0488);
static_assert(offsetof(UInventoryGadgetsPageWidget, UnavailableImage2) == 0x0490);
static_assert(offsetof(UInventoryGadgetsPageWidget, UnavailableImage3) == 0x0498);
static_assert(offsetof(UInventoryGadgetsPageWidget, UnavailableImage4) == 0x04A0);
static_assert(offsetof(UInventoryGadgetsPageWidget, SlotNumber0) == 0x04A8);
static_assert(offsetof(UInventoryGadgetsPageWidget, SlotNumber1) == 0x04B0);
static_assert(offsetof(UInventoryGadgetsPageWidget, SlotNumber2) == 0x04B8);
static_assert(offsetof(UInventoryGadgetsPageWidget, SlotNumber3) == 0x04C0);
static_assert(offsetof(UInventoryGadgetsPageWidget, SlotNumber4) == 0x04C8);
static_assert(offsetof(UInventoryGadgetsPageWidget, WidgetClass) == 0x04D0);
static_assert(offsetof(UInventoryItemSlotWidget, Button) == 0x0300);
static_assert(offsetof(UItemViewerItemWidget, ItemStack) == 0x0278);
static_assert(offsetof(UInventoryItemWidget, PendingStackOverlay) == 0x0288);
static_assert(offsetof(UInventoryItemWidget, PendingCountTextBlock) == 0x0290);
static_assert(offsetof(UInventoryItemWidget, CountTextBlock) == 0x0298);
static_assert(offsetof(UInventoryItemWidget, RepairProgressBar) == 0x02A0);
static_assert(offsetof(UInventoryItemWidget, PristineProgressBar) == 0x02A8);
static_assert(offsetof(UInventoryItemWidget, LargeRepairImage) == 0x02B0);
static_assert(offsetof(UInventoryItemWidget, QuickComparisonImage) == 0x02B8);
static_assert(offsetof(UInventoryItemWidget, ValueHorizontalBox) == 0x02C0);
static_assert(offsetof(UInventoryItemWidget, ValueTextBlock) == 0x02C8);
static_assert(offsetof(UInventoryItemWidget, IconImage) == 0x02D0);
static_assert(offsetof(UInventoryItemWidget, RestrictedImage) == 0x02D8);
static_assert(offsetof(UInventoryItemWidget, ModContainer) == 0x02E0);
static_assert(offsetof(UInventoryItemWidget, Mod0) == 0x02E8);
static_assert(offsetof(UInventoryItemWidget, Mod1) == 0x02F0);
static_assert(offsetof(UInventoryItemWidget, Mod2) == 0x02F8);
static_assert(offsetof(UInventoryItemWidget, Mod3) == 0x0300);
static_assert(offsetof(UInventoryItemWidget, ElementImage) == 0x0308);
static_assert(offsetof(UInventoryItemWidget, TheftImage) == 0x0310);
static_assert(offsetof(UInventoryItemWidget, PristineConditionImage) == 0x0318);
static_assert(offsetof(UInventoryItemWidget, CompareImage) == 0x0320);
static_assert(offsetof(UInventoryItemWidget, EquippedImage) == 0x0328);
static_assert(offsetof(UInventoryItemWidget, JunkImage) == 0x0330);
static_assert(offsetof(UInventoryItemWidget, SellImage) == 0x0338);
static_assert(offsetof(UInventoryItemWidget, NewItemImage) == 0x0340);
static_assert(offsetof(UInventoryItemWidget, UniqueImage) == 0x0348);
static_assert(offsetof(UInventoryItemWidget, ScienceImage) == 0x0350);
static_assert(offsetof(UInventoryItemWidget, ImprovisedImage) == 0x0358);
static_assert(offsetof(UInventoryItemWidget, CompanionTint) == 0x0360);
static_assert(offsetof(UInventoryWeaponAmmoGroupWidget, AmmoName0) == 0x0300);
static_assert(offsetof(UInventoryWeaponAmmoGroupWidget, Ammo0) == 0x0308);
static_assert(offsetof(UInventoryWeaponAmmoGroupWidget, RelatedAmmoClass) == 0x0310);
static_assert(offsetof(UInventoryWeaponAmmoWidget, Brush) == 0x0278);
static_assert(offsetof(UInventoryWeaponAmmoWidget, Button) == 0x0300);
static_assert(offsetof(UInventoryWeaponAmmoWidget, Image) == 0x0308);
static_assert(offsetof(UInventoryWeaponAmmoWidget, CountTextBlock) == 0x0310);
static_assert(offsetof(UInventoryWeaponsPageWidget, WeaponButton0) == 0x0480);
static_assert(offsetof(UInventoryWeaponsPageWidget, WeaponButton1) == 0x0488);
static_assert(offsetof(UInventoryWeaponsPageWidget, WeaponButton2) == 0x0490);
static_assert(offsetof(UInventoryWeaponsPageWidget, WeaponButton3) == 0x0498);
static_assert(offsetof(UInventoryWeaponsPageWidget, DragContainer0) == 0x04A0);
static_assert(offsetof(UInventoryWeaponsPageWidget, DragContainer1) == 0x04A8);
static_assert(offsetof(UInventoryWeaponsPageWidget, DragContainer2) == 0x04B0);
static_assert(offsetof(UInventoryWeaponsPageWidget, DragContainer3) == 0x04B8);
static_assert(offsetof(UInventoryWeaponsPageWidget, AmmoPanel) == 0x04C0);
static_assert(offsetof(UInventoryWeaponsPageWidget, EquipmentBorder) == 0x04C8);
static_assert(offsetof(UInventoryWeaponsPageWidget, EquipmentOverlay) == 0x04D0);
static_assert(offsetof(UInventoryWeaponsPageWidget, AmmoGroup0) == 0x04D8);
static_assert(offsetof(UInventoryWeaponsPageWidget, AmmoGroup1) == 0x04E0);
static_assert(offsetof(UInventoryWeaponsPageWidget, AmmoGroup2) == 0x04E8);
static_assert(offsetof(UInventoryWidget, WeaponRadialSectionClass) == 0x03A0);
static_assert(offsetof(UInventoryWidget, DrugContextSectionClass) == 0x03A8);
static_assert(offsetof(UInventoryWidget, GadgetContextSectionClass) == 0x03B0);
static_assert(offsetof(UInventoryWidget, MedKitSectionClass) == 0x03B8);
static_assert(offsetof(UInventoryWidget, UnequipIcon) == 0x03C0);
static_assert(offsetof(UInventoryWidget, EquipIcon) == 0x03C8);
static_assert(offsetof(UInventoryWidget, UnloadIcon) == 0x03D0);
static_assert(offsetof(UInventoryWidget, SwapIcon) == 0x03D8);
static_assert(offsetof(UInventoryWidget, DropIcon) == 0x03E0);
static_assert(offsetof(UInventoryWidget, RepairIcon) == 0x03E8);
static_assert(offsetof(UInventoryWidget, BreakdownIcon) == 0x03F0);
static_assert(offsetof(UInventoryWidget, CompareIcon) == 0x03F8);
static_assert(offsetof(UInventoryWidget, StopCompareIcon) == 0x0400);
static_assert(offsetof(UInventoryWidget, UseIcon) == 0x0408);
static_assert(offsetof(UInventoryWidget, JunkIcon) == 0x0410);
static_assert(offsetof(UInventoryWidget, NotJunkIcon) == 0x0418);
static_assert(offsetof(UInventoryWidget, InspectIcon) == 0x0420);
static_assert(offsetof(UInventoryWidget, ItemRetainerBox) == 0x0428);
static_assert(offsetof(UInventoryWidget, Weapons) == 0x0430);
static_assert(offsetof(UInventoryWidget, Armor) == 0x0438);
static_assert(offsetof(UInventoryWidget, Consumables) == 0x0440);
static_assert(offsetof(UInventoryWidget, Modifications) == 0x0448);
static_assert(offsetof(UInventoryWidget, Gadgets) == 0x0450);
static_assert(offsetof(UInventoryWidget, General) == 0x0458);
static_assert(offsetof(UInventoryWidget, Quests) == 0x0460);
static_assert(offsetof(UInventoryWidget, Junk) == 0x0468);
static_assert(offsetof(UInventoryWidget, InputLabelGroup) == 0x0470);
static_assert(offsetof(UInventoryWidget, FlavorTextWidget) == 0x0478);
static_assert(offsetof(UInventoryWidget, StackSplittingClass) == 0x0480);
static_assert(offsetof(UInventoryWidget, LedgerScrollingWidgetGroup) == 0x0488);
static_assert(offsetof(UItemActionButtonContainersWidget, ContainerHorizontalBox) == 0x0300);
static_assert(offsetof(UItemActionButtonContainersWidget, RepairAllEquippedContainer) == 0x0308);
static_assert(offsetof(UItemActionButtonContainersWidget, SellJunkContainer) == 0x0310);
static_assert(offsetof(UItemActionButtonContainersWidget, RepairAllEquippedButton) == 0x0318);
static_assert(offsetof(UItemActionButtonContainersWidget, SellJunkButton) == 0x0320);
static_assert(offsetof(UItemActionDragContainersWidget, ContainerHorizontalBox) == 0x0300);
static_assert(offsetof(UItemActionDragContainersWidget, RepairContainer) == 0x0308);
static_assert(offsetof(UItemActionDragContainersWidget, BreakdownContainer) == 0x0310);
static_assert(offsetof(UItemActionDragContainersWidget, JunkContainer) == 0x0318);
static_assert(offsetof(UItemActionDragContainersWidget, DropContainer) == 0x0320);
static_assert(offsetof(UItemActionDragContainersWidget, RepairDragContainer) == 0x0328);
static_assert(offsetof(UItemActionDragContainersWidget, BreakdownDragContainer) == 0x0330);
static_assert(offsetof(UItemActionDragContainersWidget, JunkDragContainer) == 0x0338);
static_assert(offsetof(UItemActionDragContainersWidget, DropDragContainer) == 0x0340);
static_assert(offsetof(UItemConditionWidget, TextBlock) == 0x0300);
static_assert(offsetof(UItemContainerEntryWidget, MaximumNameSize) == 0x0300);
static_assert(offsetof(UItemContainerEntryWidget, Button) == 0x0308);
static_assert(offsetof(UItemContainerEntryWidget, Icon) == 0x0310);
static_assert(offsetof(UItemContainerEntryWidget, TheftImage) == 0x0318);
static_assert(offsetof(UItemContainerEntryWidget, NameTextBlock) == 0x0320);
static_assert(offsetof(UItemContainerEntryWidget, QuantityOverlay) == 0x0328);
static_assert(offsetof(UItemContainerEntryWidget, QuantityTextBlock) == 0x0330);
static_assert(offsetof(UItemContainerEntryWidget, UniqueImage) == 0x0338);
static_assert(offsetof(UItemContainerEntryWidget, ScienceImage) == 0x0340);
static_assert(offsetof(UItemContainerListWidget, Slider) == 0x03B8);
static_assert(offsetof(UItemContainerListWidget, SliderContainer) == 0x03C0);
static_assert(offsetof(UItemContainerListWidget, Entry0) == 0x03C8);
static_assert(offsetof(UItemContainerListWidget, Entry1) == 0x03D0);
static_assert(offsetof(UItemContainerListWidget, Entry2) == 0x03D8);
static_assert(offsetof(UItemContainerListWidget, Entry3) == 0x03E0);
static_assert(offsetof(UItemContainerWidget, ItemRemovedSound) == 0x0308);
static_assert(offsetof(UItemContainerWidget, List) == 0x0310);
static_assert(offsetof(UItemContainerWidget, HeaderTextblock) == 0x0318);
static_assert(offsetof(UItemContainerWidget, LabelGroup) == 0x0320);
static_assert(offsetof(UItemContainerWidget, ToolTip) == 0x0328);
static_assert(offsetof(UItemContainerWidget, TheftImage) == 0x0330);
static_assert(offsetof(UItemContainerWidget, VerticalContainer) == 0x0338);
static_assert(offsetof(UItemDegradationAlertWidget, MainInvalidationBox) == 0x0300);
static_assert(offsetof(UItemDegradationAlertWidget, WeaponEntry) == 0x0308);
static_assert(offsetof(UItemDegradationAlertWidget, HeadEntry) == 0x0310);
static_assert(offsetof(UItemDegradationAlertWidget, BodyEntry) == 0x0318);
static_assert(offsetof(UItemDegradationEntryWidget, CurrentStateImage) == 0x0300);
static_assert(offsetof(UItemDegradationEntryWidget, DamagedImage) == 0x0308);
static_assert(offsetof(UItemDegradationEntryWidget, DestroyedImage) == 0x0310);
static_assert(offsetof(UItemDrugSectionWidget, Panel) == 0x0290);
static_assert(offsetof(UItemDrugSectionWidget, Image) == 0x0298);
static_assert(offsetof(UItemDrugSectionWidget, UnavailableImage) == 0x02A0);
static_assert(offsetof(UItemDrugSectionWidget, DrugCharges) == 0x02A8);
static_assert(offsetof(UItemDrugSectionWidget, SlotIndexTextBlock) == 0x02B0);
static_assert(offsetof(UItemGadgetSectionWidget, Panel) == 0x0290);
static_assert(offsetof(UItemGadgetSectionWidget, Image) == 0x0298);
static_assert(offsetof(UItemGadgetSectionWidget, UnavailableImage) == 0x02A0);
static_assert(offsetof(UItemGadgetSectionWidget, SlotIndexTextBlock) == 0x02A8);
static_assert(offsetof(UItemInspectorStatWidget, StatTextBlock) == 0x0278);
static_assert(offsetof(UItemInspectorStatWidget, StatValueTextBlock) == 0x0280);
static_assert(offsetof(UItemInspectorWidget, ActorRender) == 0x0330);
static_assert(offsetof(UItemInspectorWidget, NameTextBlock) == 0x0338);
static_assert(offsetof(UItemInspectorWidget, DescriptionScrollBox) == 0x0340);
static_assert(offsetof(UItemInspectorWidget, DescriptionTextBlock) == 0x0348);
static_assert(offsetof(UItemInspectorWidget, InputLabelGroup) == 0x0350);
static_assert(offsetof(UItemInspectorWidget, ItemStats) == 0x0358);
static_assert(offsetof(UItemInspectorWidget, EquipmentMods) == 0x0360);
static_assert(offsetof(UItemInspectorWidget, HiddenButton) == 0x0368);
static_assert(offsetof(UItemInspectorWidget, BackButton) == 0x0370);
static_assert(offsetof(UItemMedKitSectionWidget, Panel) == 0x0288);
static_assert(offsetof(UItemMedKitSectionWidget, Image) == 0x0290);
static_assert(offsetof(UItemModdingWidget, RangedModsInitializer) == 0x03D0);
static_assert(offsetof(UItemModdingWidget, MeleeModsInitializer) == 0x0470);
static_assert(offsetof(UItemModdingWidget, ArmorModsInitializer) == 0x0510);
static_assert(offsetof(UItemModdingWidget, ViewerVerticalBox) == 0x05B8);
static_assert(offsetof(UItemModdingWidget, EquipmentTitleVerticalBox) == 0x05C0);
static_assert(offsetof(UItemModdingWidget, EquipmentNameTextBlock) == 0x05C8);
static_assert(offsetof(UItemModdingWidget, PageNameTextBlock) == 0x05D0);
static_assert(offsetof(UItemModdingWidget, CurrentModTitle) == 0x05D8);
static_assert(offsetof(UItemModdingWidget, NewModTitle) == 0x05E0);
static_assert(offsetof(UItemModdingWidget, CurrentModItemName) == 0x05E8);
static_assert(offsetof(UItemModdingWidget, NewModItemName) == 0x05F0);
static_assert(offsetof(UItemModdingWidget, CurrentModItemStats) == 0x05F8);
static_assert(offsetof(UItemModdingWidget, NewModItemStats) == 0x0600);
static_assert(offsetof(UItemModdingWidget, EquipmentMods) == 0x0608);
static_assert(offsetof(UItemModdingWidget, ActorRender) == 0x0610);
static_assert(offsetof(UItemModdingWidget, InputLabelGroup) == 0x0618);
static_assert(offsetof(UItemModdingWidget, FlavorTextWidget) == 0x0620);
static_assert(offsetof(UItemModdingWidget, CurrentModSpacer) == 0x0628);
static_assert(offsetof(UItemModdingWidget, NewModSpacer) == 0x0630);
static_assert(offsetof(UItemModdingWidget, CurrentModItemNameBox) == 0x0638);
static_assert(offsetof(UItemModdingWidget, NewModItemNameBox) == 0x0640);
static_assert(offsetof(UItemModdingWidget, ActionInputOverlay) == 0x0648);
static_assert(offsetof(UItemModdingWidget, DuplicateModMessage) == 0x0650);
static_assert(offsetof(UItemModdingWidget, PlayerStats) == 0x0658);
static_assert(offsetof(AItemOwnershipVolume, OwningFaction) == 0x0318);
static_assert(offsetof(AItemOwnershipVolume, OwningActor) == 0x0320);
static_assert(offsetof(UItemRepairWidget, ArmorPartRequiredLocString) == 0x0320);
static_assert(offsetof(UItemRepairWidget, WeaponPartRequiredLocString) == 0x0328);
static_assert(offsetof(UItemRepairWidget, ActorRender) == 0x0330);
static_assert(offsetof(UItemRepairWidget, RepairDetailsSizeBox) == 0x0338);
static_assert(offsetof(UItemRepairWidget, PartRequiredTextBlock) == 0x0340);
static_assert(offsetof(UItemRepairWidget, PartCountTextBlock) == 0x0348);
static_assert(offsetof(UItemRepairWidget, NameTextBlock) == 0x0350);
static_assert(offsetof(UItemRepairWidget, DescriptionTextBlock) == 0x0358);
static_assert(offsetof(UItemRepairWidget, ConditionButton) == 0x0360);
static_assert(offsetof(UItemRepairWidget, RepairButton) == 0x0368);
static_assert(offsetof(UItemRepairWidget, BackButton) == 0x0370);
static_assert(offsetof(UItemRepairWidget, HiddenButton) == 0x0378);
static_assert(offsetof(UItemRepairWidget, InputLabelGroup) == 0x0380);
static_assert(offsetof(UItemRepairWidget, FlavorTextWidget) == 0x0388);
static_assert(offsetof(UItemStatEntryWidget, UpgradeTexture) == 0x0300);
static_assert(offsetof(UItemStatEntryWidget, UpgradeDecreaseTexture) == 0x0308);
static_assert(offsetof(UItemStatEntryWidget, DowngradeTexture) == 0x0310);
static_assert(offsetof(UItemStatEntryWidget, DowngradeDecreaseTexture) == 0x0318);
static_assert(offsetof(UItemStatEntryWidget, IconImage) == 0x0320);
static_assert(offsetof(UItemStatEntryWidget, WeightImage) == 0x0328);
static_assert(offsetof(UItemStatEntryWidget, NameTextBlock) == 0x0330);
static_assert(offsetof(UItemStatEntryWidget, ValueTextBlock) == 0x0338);
static_assert(offsetof(UItemStatEntryWidget, DeltaTextBlock) == 0x0340);
static_assert(offsetof(UItemStatsCategoryWidget, DisplayText) == 0x0300);
static_assert(offsetof(UItemStatsCategoryWidget, NameTextBlock) == 0x0308);
static_assert(offsetof(UItemStatsCategoryWidget, StatsVerticalBox) == 0x0310);
static_assert(offsetof(UItemStatsWidget, StatsCategory) == 0x0308);
static_assert(offsetof(UItemStatsWidget, ArmorThresholdCategory) == 0x0310);
static_assert(offsetof(UItemStatsWidget, ArmorStatWidgetClass) == 0x0318);
static_assert(offsetof(UItemStatsWidget, StatWidgetClass) == 0x0320);
static_assert(offsetof(UItemToolTipWidget, NameTextBlock) == 0x0300);
static_assert(offsetof(UItemToolTipWidget, BrandImage) == 0x0308);
static_assert(offsetof(UItemToolTipWidget, ComparisonItemTextBlock) == 0x0310);
static_assert(offsetof(UItemToolTipWidget, BrandTextBlock) == 0x0318);
static_assert(offsetof(UItemToolTipWidget, DescriptionTextBlock) == 0x0320);
static_assert(offsetof(UItemToolTipWidget, LoreTextBlock) == 0x0328);
static_assert(offsetof(UItemToolTipWidget, WeightTextBlock) == 0x0330);
static_assert(offsetof(UItemToolTipWidget, ConditionBox) == 0x0338);
static_assert(offsetof(UItemToolTipWidget, ConditionTextBlock) == 0x0340);
static_assert(offsetof(UItemToolTipWidget, PristineImage) == 0x0348);
static_assert(offsetof(UItemToolTipWidget, ValueTextBlock) == 0x0350);
static_assert(offsetof(UItemToolTipWidget, ItemStats) == 0x0358);
static_assert(offsetof(UItemToolTipWidget, ModificationText) == 0x0360);
static_assert(offsetof(UItemToolTipWidget, Mod0Widget) == 0x0368);
static_assert(offsetof(UItemToolTipWidget, Mod1Widget) == 0x0370);
static_assert(offsetof(UItemToolTipWidget, Mod2Widget) == 0x0378);
static_assert(offsetof(UItemToolTipWidget, Mod3Widget) == 0x0380);
static_assert(offsetof(UItemToolTipWidget, ItemLevelTextBlock) == 0x0388);
static_assert(offsetof(UItemToolTipWidget, StatusEffectsTextBlock) == 0x0390);
static_assert(offsetof(UItemToolTipWidget, ItemPowerTextBlock) == 0x0398);
static_assert(offsetof(UItemToolTipWidget, ItemPowerDescriptor) == 0x03A0);
static_assert(offsetof(UItemToolTipWidget, CurrencyValueTextBlock) == 0x03A8);
static_assert(offsetof(UItemToolTipWidget, WeightValueTextBlock) == 0x03B0);
static_assert(offsetof(UItemToolTipWidget, CurrencyValueBox) == 0x03B8);
static_assert(offsetof(UItemToolTipWidget, WeightValueBox) == 0x03C0);
static_assert(offsetof(UItemToolTipWidget, ConditionValueTextBlock) == 0x03C8);
static_assert(offsetof(UItemToolTipWidget, MainScaleBox) == 0x03D0);
static_assert(offsetof(UItemToolTipWidget, ImageSizeBox) == 0x03D8);
static_assert(offsetof(UItemToolTipWidget, FrameBorder) == 0x03E0);
static_assert(offsetof(UItemToolTipWidget, ItemPowerVerticalBox) == 0x03E8);
static_assert(offsetof(UItemToolTipWidget, DamageTypeImage) == 0x03F0);
static_assert(offsetof(UItemToolTipWidget, CompareInspectContainer) == 0x03F8);
static_assert(offsetof(UItemToolTipWidget, CompareLabel) == 0x0400);
static_assert(offsetof(UItemToolTipWidget, InspectLabel) == 0x0408);
static_assert(offsetof(UItemToolTipWidget, DamageTypeColors) == 0x0428);
static_assert(offsetof(UItemToolTipWidget, DamageTypeIcon) == 0x0478);
static_assert(offsetof(UItemTransferWidget, StackSplittingClass) == 0x0308);
static_assert(offsetof(UItemTransferWidget, HoveredItem) == 0x0310);
static_assert(offsetof(UItemTransferWidget, PlayerStats) == 0x0318);
static_assert(offsetof(UItemTransferWidget, InventoryHeader) == 0x0320);
static_assert(offsetof(UItemTransferWidget, InventoryLabel) == 0x0328);
static_assert(offsetof(UItemTransferWidget, PlayerHeader) == 0x0330);
static_assert(offsetof(UItemTransferWidget, PlayerLabel) == 0x0338);
static_assert(offsetof(UItemTransferWidget, PlayerNavigation) == 0x0340);
static_assert(offsetof(UItemTransferWidget, PlayerViewer) == 0x0348);
static_assert(offsetof(UItemTransferWidget, InventoryNavigation) == 0x0350);
static_assert(offsetof(UItemTransferWidget, InventoryViewer) == 0x0358);
static_assert(offsetof(UItemTransferWidget, LabelGroup) == 0x0360);
static_assert(offsetof(UItemTransferWidget, BackButton) == 0x0368);
static_assert(offsetof(UItemViewerCellWidget, Button) == 0x0278);
static_assert(offsetof(UItemViewerNavigationWidget, PaginatedButtons) == 0x0318);
static_assert(offsetof(UItemViewerNavigationWidget, Images) == 0x0328);
static_assert(offsetof(UItemViewerNavigationWidget, Labels) == 0x0338);
static_assert(offsetof(UItemViewerNavigationWidget, ButtonClass) == 0x0348);
static_assert(offsetof(UItemViewerNavigationWidget, CategoryButtonGroup) == 0x0350);
static_assert(offsetof(UItemViewerNavigationWidget, LeftInputLabel) == 0x0358);
static_assert(offsetof(UItemViewerNavigationWidget, RightInputLabel) == 0x0360);
static_assert(offsetof(UItemViewerNavigationWidget, LeftInputWidget) == 0x0368);
static_assert(offsetof(UItemViewerNavigationWidget, RightInputWidget) == 0x0370);
static_assert(offsetof(UItemViewerNavigationWidget, ButtonContainer) == 0x0378);
static_assert(offsetof(UItemViewerPageWidget, ButtonPadding) == 0x0308);
static_assert(offsetof(UItemViewerPageWidget, PageDragContainer) == 0x0320);
static_assert(offsetof(UItemViewerPageWidget, SizeBox) == 0x0328);
static_assert(offsetof(UItemViewerPageWidget, UniformGrid) == 0x0330);
static_assert(offsetof(UItemViewerPageWidget, DragContainerClass) == 0x0338);
static_assert(offsetof(UItemViewerPageWidget, ButtonClass) == 0x0340);
static_assert(offsetof(UItemViewerPannerWidget, LeftButton) == 0x0320);
static_assert(offsetof(UItemViewerPannerWidget, RightButton) == 0x0328);
static_assert(offsetof(UItemViewerScrollSelector, PageButtonVerticalBox) == 0x0318);
static_assert(offsetof(UItemViewerScrollSelector, ParentVerticalBox) == 0x0320);
static_assert(offsetof(UItemViewerScrollSelector, PageSelectorClass) == 0x0328);
static_assert(offsetof(UItemViewerScrollSelectorEntry, PageSelector) == 0x0300);
static_assert(offsetof(UItemViewerScrollSelectorEntry, SelectedImage) == 0x0308);
static_assert(offsetof(UItemViewerWidget, PageClass) == 0x0448);
static_assert(offsetof(UItemViewerWidget, CellSize) == 0x045C);
static_assert(offsetof(UItemViewerWidget, AllPageDimensions) == 0x0468);
static_assert(offsetof(UItemViewerWidget, PageDimensions) == 0x0498);
static_assert(offsetof(UItemViewerWidget, JunkPageDimensions) == 0x04B0);
static_assert(offsetof(UItemViewerWidget, ItemGenericClass) == 0x04E0);
static_assert(offsetof(UItemViewerWidget, RootSizeBox) == 0x04E8);
static_assert(offsetof(UItemViewerWidget, PageTextBlock) == 0x04F0);
static_assert(offsetof(UItemViewerWidget, ScrollBox) == 0x04F8);
static_assert(offsetof(UItemViewerWidget, PagesHorizontalBox) == 0x0500);
static_assert(offsetof(UItemViewerWidget, ScrollSelector) == 0x0508);
static_assert(offsetof(UItemViewerWidget, SortLabel) == 0x0510);
static_assert(offsetof(UItemViewerWidget, ChangeSortLabel) == 0x0518);
static_assert(offsetof(UItemViewerWidget, SortDirectionImage) == 0x0520);
static_assert(offsetof(UItemViewerWidget, SortingContainer) == 0x0528);
static_assert(offsetof(UItemViewerWidget, BaseInputLabelDesc) == 0x0530);
static_assert(offsetof(UItemViewerWidget, ScrollType) == 0x056C);
static_assert(offsetof(AItemVisualizer, ItemStk) == 0x02B8);
static_assert(offsetof(AItemVisualizer, SceneComponent) == 0x02C8);
static_assert(offsetof(AItemVisualizer, ItemMainAsset) == 0x02D0);
static_assert(offsetof(AItemVisualizer, ItemModVisuals) == 0x02F8);
static_assert(offsetof(AItemVisualizer, ItemRequiredAssets) == 0x0358);
static_assert(offsetof(AItemVisualizer, VisualRootComponent) == 0x0368);
static_assert(offsetof(UItemWeaponSectionWidget, Panel) == 0x0290);
static_assert(offsetof(UItemWeaponSectionWidget, Image) == 0x0298);
static_assert(offsetof(UItemWeaponSectionWidget, OverlayContainer) == 0x02A0);
static_assert(offsetof(UItemWeaponSectionWidget, SlotIndexTextBlock) == 0x02A8);
static_assert(offsetof(UJournalDescriptionPanel, InputLabelGroup) == 0x0320);
static_assert(offsetof(UJournalDescriptionPanel, SymbolVerticalBox) == 0x0328);
static_assert(offsetof(ULedgerJournalWidget, NavigationBar) == 0x0308);
static_assert(offsetof(ULedgerJournalWidget, PageScrollBox) == 0x0310);
static_assert(offsetof(ULedgerJournalWidget, ScrollingWidgetGroup) == 0x0318);
static_assert(offsetof(ULedgerJournalWidget, QuestJournal) == 0x0320);
static_assert(offsetof(ULedgerJournalWidget, CodexJournal) == 0x0328);
static_assert(offsetof(UKeybindDialogBoxWidget, ContentVerticalBox) == 0x0328);
static_assert(offsetof(UKeybindDialogBoxWidget, BackingBotSizeBox) == 0x0330);
static_assert(offsetof(UKeybindDialogBoxWidget, ControlToRebindTextBlock) == 0x0338);
static_assert(offsetof(UKeybindDialogBoxWidget, HowToTextBlock) == 0x0340);
static_assert(offsetof(UKeybindDialogBoxWidget, KeyInputTextBlock) == 0x0348);
static_assert(offsetof(UKeybindDialogBoxWidget, InputIcon) == 0x0350);
static_assert(offsetof(UKeyBindsMenuWidget, MenuScrollBox) == 0x0318);
static_assert(offsetof(UKeyBindsMenuWidget, MenuSwitcher) == 0x0320);
static_assert(offsetof(UKeyBindsMenuWidget, PlatformSwitcher) == 0x0328);
static_assert(offsetof(UKeyBindsMenuWidget, KeyBindVerticalBox) == 0x0330);
static_assert(offsetof(UKeyBindsMenuWidget, Category1VerticalBox) == 0x0338);
static_assert(offsetof(UKeyBindsMenuWidget, PCButtonsHorizontalBox) == 0x0340);
static_assert(offsetof(UKeyBindsMenuWidget, InputLabelsHorizontalBox) == 0x0348);
static_assert(offsetof(UKeyBindsMenuWidget, InputLabelGroup) == 0x0350);
static_assert(offsetof(UKeyBindsMenuWidget, GamePadMenuSlot) == 0x0358);
static_assert(offsetof(UKeyBindsMenuWidget, SticklayoutMenuSlot) == 0x0360);
static_assert(offsetof(UKeyBindsMenuWidget, GamePadLayoutOptions) == 0x0368);
static_assert(offsetof(UKeyBindsMenuWidget, StickLayoutOptions) == 0x0370);
static_assert(offsetof(UKeyBindsMenuWidget, DefaultButton) == 0x0378);
static_assert(offsetof(UKeyBindsMenuWidget, BackButton) == 0x0380);
static_assert(offsetof(UKeyBindsMenuWidget, Background) == 0x0388);
static_assert(offsetof(UKeyBindsMenuWidget, XSXGamepadTexture) == 0x0398);
static_assert(offsetof(UKeyBindsMenuWidget, XBOGamepadTexture) == 0x03C0);
static_assert(offsetof(UKeyBindsMenuWidget, XB_GamepadImage) == 0x03E8);
static_assert(offsetof(UKeyBindsMenuWidget, XB_LeftSpecial) == 0x03F0);
static_assert(offsetof(UKeyBindsMenuWidget, XB_LeftSpecialHold) == 0x03F8);
static_assert(offsetof(UKeyBindsMenuWidget, XB_LTrigger) == 0x0400);
static_assert(offsetof(UKeyBindsMenuWidget, XB_LTriggerHold) == 0x0408);
static_assert(offsetof(UKeyBindsMenuWidget, XB_LBumper) == 0x0410);
static_assert(offsetof(UKeyBindsMenuWidget, XB_LBumperHold) == 0x0418);
static_assert(offsetof(UKeyBindsMenuWidget, XB_LStick) == 0x0420);
static_assert(offsetof(UKeyBindsMenuWidget, XB_LStickButton) == 0x0428);
static_assert(offsetof(UKeyBindsMenuWidget, XB_DUp) == 0x0430);
static_assert(offsetof(UKeyBindsMenuWidget, XB_DLeft) == 0x0438);
static_assert(offsetof(UKeyBindsMenuWidget, XB_DDown) == 0x0440);
static_assert(offsetof(UKeyBindsMenuWidget, XB_DDownHold) == 0x0448);
static_assert(offsetof(UKeyBindsMenuWidget, XB_DRight) == 0x0450);
static_assert(offsetof(UKeyBindsMenuWidget, XB_RightSpecial) == 0x0458);
static_assert(offsetof(UKeyBindsMenuWidget, XB_RightSpecialHold) == 0x0460);
static_assert(offsetof(UKeyBindsMenuWidget, XB_RightTrigger) == 0x0468);
static_assert(offsetof(UKeyBindsMenuWidget, XB_RightTriggerHold) == 0x0470);
static_assert(offsetof(UKeyBindsMenuWidget, XB_RBumper) == 0x0478);
static_assert(offsetof(UKeyBindsMenuWidget, XB_RBumperHold) == 0x0480);
static_assert(offsetof(UKeyBindsMenuWidget, XB_Y) == 0x0488);
static_assert(offsetof(UKeyBindsMenuWidget, XB_YHold) == 0x0490);
static_assert(offsetof(UKeyBindsMenuWidget, XB_B) == 0x0498);
static_assert(offsetof(UKeyBindsMenuWidget, XB_BHold) == 0x04A0);
static_assert(offsetof(UKeyBindsMenuWidget, XB_A) == 0x04A8);
static_assert(offsetof(UKeyBindsMenuWidget, XB_AHold) == 0x04B0);
static_assert(offsetof(UKeyBindsMenuWidget, XB_X) == 0x04B8);
static_assert(offsetof(UKeyBindsMenuWidget, XB_XHold) == 0x04C0);
static_assert(offsetof(UKeyBindsMenuWidget, XB_RStick) == 0x04C8);
static_assert(offsetof(UKeyBindsMenuWidget, XB_RStickButton) == 0x04D0);
static_assert(offsetof(UKeyBindsMenuWidget, PS5GamepadTexture) == 0x05C0);
static_assert(offsetof(UKeyBindsMenuWidget, PS4GamepadTexture) == 0x05E8);
static_assert(offsetof(UKeyBindsMenuWidget, PS_GamepadImage) == 0x0610);
static_assert(offsetof(UKeyBindsMenuWidget, PS_SpecialLeft) == 0x0618);
static_assert(offsetof(UKeyBindsMenuWidget, PS_SpecialLeftHold) == 0x0620);
static_assert(offsetof(UKeyBindsMenuWidget, PS_L2) == 0x0628);
static_assert(offsetof(UKeyBindsMenuWidget, PS_L2Hold) == 0x0630);
static_assert(offsetof(UKeyBindsMenuWidget, PS_L1) == 0x0638);
static_assert(offsetof(UKeyBindsMenuWidget, PS_L1Hold) == 0x0640);
static_assert(offsetof(UKeyBindsMenuWidget, PS_DUp) == 0x0648);
static_assert(offsetof(UKeyBindsMenuWidget, PS_DLeft) == 0x0650);
static_assert(offsetof(UKeyBindsMenuWidget, PS_DDown) == 0x0658);
static_assert(offsetof(UKeyBindsMenuWidget, PS_DDownHold) == 0x0660);
static_assert(offsetof(UKeyBindsMenuWidget, PS_DRight) == 0x0668);
static_assert(offsetof(UKeyBindsMenuWidget, PS_LStick) == 0x0670);
static_assert(offsetof(UKeyBindsMenuWidget, PS_L3) == 0x0678);
static_assert(offsetof(UKeyBindsMenuWidget, PS_SpecialRight) == 0x0680);
static_assert(offsetof(UKeyBindsMenuWidget, PS_SpecialRightHold) == 0x0688);
static_assert(offsetof(UKeyBindsMenuWidget, PS_R2) == 0x0690);
static_assert(offsetof(UKeyBindsMenuWidget, PS_R2Hold) == 0x0698);
static_assert(offsetof(UKeyBindsMenuWidget, PS_R1) == 0x06A0);
static_assert(offsetof(UKeyBindsMenuWidget, PS_R1Hold) == 0x06A8);
static_assert(offsetof(UKeyBindsMenuWidget, PS_Triangle) == 0x06B0);
static_assert(offsetof(UKeyBindsMenuWidget, PS_TriangleHold) == 0x06B8);
static_assert(offsetof(UKeyBindsMenuWidget, PS_Circle) == 0x06C0);
static_assert(offsetof(UKeyBindsMenuWidget, PS_CircleHold) == 0x06C8);
static_assert(offsetof(UKeyBindsMenuWidget, PS_X) == 0x06D0);
static_assert(offsetof(UKeyBindsMenuWidget, PS_XHold) == 0x06D8);
static_assert(offsetof(UKeyBindsMenuWidget, PS_Square) == 0x06E0);
static_assert(offsetof(UKeyBindsMenuWidget, PS_SquareHold) == 0x06E8);
static_assert(offsetof(UKeyBindsMenuWidget, PS_RStick) == 0x06F0);
static_assert(offsetof(UKeyBindsMenuWidget, PS_R3) == 0x06F8);
static_assert(offsetof(UKeyBindsMenuWidget, GPGamepadTexture) == 0x07E8);
static_assert(offsetof(UKeyBindsMenuWidget, GP_GamepadImage) == 0x0810);
static_assert(offsetof(UKeyBindsMenuWidget, GP_SpecialLeft) == 0x0818);
static_assert(offsetof(UKeyBindsMenuWidget, GP_SpecialLeftHold) == 0x0820);
static_assert(offsetof(UKeyBindsMenuWidget, GP_L2) == 0x0828);
static_assert(offsetof(UKeyBindsMenuWidget, GP_L2Hold) == 0x0830);
static_assert(offsetof(UKeyBindsMenuWidget, GP_L1) == 0x0838);
static_assert(offsetof(UKeyBindsMenuWidget, GP_L1Hold) == 0x0840);
static_assert(offsetof(UKeyBindsMenuWidget, GP_DUp) == 0x0848);
static_assert(offsetof(UKeyBindsMenuWidget, GP_DLeft) == 0x0850);
static_assert(offsetof(UKeyBindsMenuWidget, GP_DDown) == 0x0858);
static_assert(offsetof(UKeyBindsMenuWidget, GP_DDownHold) == 0x0860);
static_assert(offsetof(UKeyBindsMenuWidget, GP_DRight) == 0x0868);
static_assert(offsetof(UKeyBindsMenuWidget, GP_LStick) == 0x0870);
static_assert(offsetof(UKeyBindsMenuWidget, GP_L3) == 0x0878);
static_assert(offsetof(UKeyBindsMenuWidget, GP_SpecialRight) == 0x0880);
static_assert(offsetof(UKeyBindsMenuWidget, GP_SpecialRightHold) == 0x0888);
static_assert(offsetof(UKeyBindsMenuWidget, GP_R2) == 0x0890);
static_assert(offsetof(UKeyBindsMenuWidget, GP_R2Hold) == 0x0898);
static_assert(offsetof(UKeyBindsMenuWidget, GP_R1) == 0x08A0);
static_assert(offsetof(UKeyBindsMenuWidget, GP_R1Hold) == 0x08A8);
static_assert(offsetof(UKeyBindsMenuWidget, GP_Triangle) == 0x08B0);
static_assert(offsetof(UKeyBindsMenuWidget, GP_TriangleHold) == 0x08B8);
static_assert(offsetof(UKeyBindsMenuWidget, GP_Circle) == 0x08C0);
static_assert(offsetof(UKeyBindsMenuWidget, GP_CircleHold) == 0x08C8);
static_assert(offsetof(UKeyBindsMenuWidget, GP_X) == 0x08D0);
static_assert(offsetof(UKeyBindsMenuWidget, GP_XHold) == 0x08D8);
static_assert(offsetof(UKeyBindsMenuWidget, GP_Square) == 0x08E0);
static_assert(offsetof(UKeyBindsMenuWidget, GP_SquareHold) == 0x08E8);
static_assert(offsetof(UKeyBindsMenuWidget, GP_RStick) == 0x08F0);
static_assert(offsetof(UKeyBindsMenuWidget, GP_R3) == 0x08F8);
static_assert(offsetof(UKeyBindsMenuWidget, KeyRebindClass) == 0x09E8);
static_assert(offsetof(UKeyBindsMenuWidget, SubcategoryClass) == 0x09F0);
static_assert(offsetof(UKeyBindsMenuWidget, SettingsMenu) == 0x09F8);
static_assert(offsetof(UKeyBindsMenuWidget, IndianaSettings) == 0x0A00);
static_assert(offsetof(UKeyBindsMenuWidget, CurrentGamepadTexture) == 0x0B50);
static_assert(offsetof(UKillCameraComponent, KillCameras) == 0x0150);
static_assert(offsetof(UKillStatusEffect, DamageType) == 0x0188);
static_assert(offsetof(ALadder, SceneComponent) == 0x02E0);
static_assert(offsetof(ALadder, SplineComponent) == 0x02E8);
static_assert(offsetof(ALadder, AkComponent) == 0x02F0);
static_assert(offsetof(ALadder, TopFurnitureComponent) == 0x02F8);
static_assert(offsetof(ALadder, BottomFurnitureComponent) == 0x0300);
static_assert(offsetof(ULedgerCharacterStatsWidget, ScrollingWidgetGroup) == 0x0308);
static_assert(offsetof(ULedgerCharacterStatsWidget, PageScrollBox) == 0x0310);
static_assert(offsetof(ULedgerCharacterStatsWidget, SummaryPage) == 0x0318);
static_assert(offsetof(ULedgerCharacterWidget, NavigationBar) == 0x0308);
static_assert(offsetof(ULedgerCharacterWidget, PageScrollBox) == 0x0310);
static_assert(offsetof(ULedgerCharacterWidget, ScrollingWidgetGroup) == 0x0318);
static_assert(offsetof(ULedgerCharacterWidget, CharacterSummary) == 0x0320);
static_assert(offsetof(ULedgerCharacterWidget, CharacterSkills) == 0x0328);
static_assert(offsetof(ULedgerCharacterWidget, CharacterPerks) == 0x0330);
static_assert(offsetof(ULedgerCharacterWidget, CharacterDetails) == 0x0338);
static_assert(offsetof(ULedgerCharacterWidget, ReputationPage) == 0x0340);
static_assert(offsetof(ULedgerMapQuestSelectionWidget, EntryClass) == 0x0320);
static_assert(offsetof(ULedgerMapQuestSelectionWidget, LastEntryClass) == 0x0328);
static_assert(offsetof(ULedgerMapQuestSelectionWidget, EntryList) == 0x0338);
static_assert(offsetof(ULedgerMapQuestSelectionWidget, InputLabelGroup) == 0x0340);
static_assert(offsetof(ULedgerMapQuestSelectionWidget, CancelButton) == 0x0348);
static_assert(offsetof(ULedgerMapQuestSelectionWidget, EntryPadding) == 0x0350);
static_assert(offsetof(ULedgerMapQuestSelectionWidget, BackgroundSizeBox) == 0x0360);
static_assert(offsetof(ULedgerMapQuestSelectionWidget, ContentSizeBox) == 0x0368);
static_assert(offsetof(UMapBaseWidget, CurrentImageTexture) == 0x0300);
static_assert(offsetof(UMapBaseWidget, MultiQuestMapTracker) == 0x0308);
static_assert(offsetof(UMapBaseWidget, GamepadSelector) == 0x0310);
static_assert(offsetof(UMapBaseWidget, ImageScaleBox) == 0x0318);
static_assert(offsetof(UMapBaseWidget, OuterCanvas) == 0x0320);
static_assert(offsetof(UMapBaseWidget, ContentCanvas) == 0x0328);
static_assert(offsetof(UMapBaseWidget, ImageCanvas) == 0x0330);
static_assert(offsetof(UMapBaseWidget, MapImage) == 0x0338);
static_assert(offsetof(UMapBaseWidget, LoadingImageBlocker) == 0x0340);
static_assert(offsetof(UMapBaseWidget, LoadingThrobber) == 0x0348);
static_assert(offsetof(UMapBaseWidget, MapSizeBox) == 0x0350);
static_assert(offsetof(UMapBaseWidget, InputLabelGroup) == 0x0358);
static_assert(offsetof(UMapBaseWidget, MousePanSensitivity) == 0x0374);
static_assert(offsetof(UMapBaseWidget, GamepadPanDeadzone) == 0x039C);
static_assert(offsetof(UMapBaseWidget, PanDescription) == 0x03A8);
static_assert(offsetof(UMapBaseWidget, ZoomDescription) == 0x03E0);
static_assert(offsetof(UMapBaseWidget, MapTexture) == 0x0418);
static_assert(offsetof(UMapBaseWidget, MapMinBounds) == 0x0440);
static_assert(offsetof(UMapBaseWidget, MapMaxBounds) == 0x0448);
static_assert(offsetof(ULedgerMapWidget, SelectionWidgetClass) == 0x04C0);
static_assert(offsetof(ULedgerMapWidget, QuestSelectionWidgetClass) == 0x04C8);
static_assert(offsetof(ULedgerMapWidget, NavigationBar) == 0x04D0);
static_assert(offsetof(ULedgerMapWidget, RegionNameTextblock) == 0x04D8);
static_assert(offsetof(ULedgerMapWidget, LocalMapNameTextBlock) == 0x04E0);
static_assert(offsetof(ULedgerMapWidget, MissingMapDataTextBlock) == 0x04E8);
static_assert(offsetof(ULedgerMapWidget, MapBorder) == 0x04F0);
static_assert(offsetof(ULedgerMapWidget, FlavorTextWidget) == 0x04F8);
static_assert(offsetof(ULedgerMapWidget, FloorLevelIndicator) == 0x0500);
static_assert(offsetof(ULedgerMapWidget, FastTravelEntryClass) == 0x0508);
static_assert(offsetof(ULedgerMapWidget, PlayerEntryClass) == 0x0510);
static_assert(offsetof(ULedgerMapWidget, BeaconEntryClass) == 0x0518);
static_assert(offsetof(ULedgerMapWidget, BeaconButtonEntryClass) == 0x0528);
static_assert(offsetof(ULedgerMapWidget, FastTravelTooltipClass) == 0x0530);
static_assert(offsetof(ULedgerMapWidget, BeaconTooltipClass) == 0x0538);
static_assert(offsetof(ULedgerMapWidget, AreaBeaconEntryClass) == 0x0540);
static_assert(offsetof(ULedgerMapWidget, TextEntryClass) == 0x0548);
static_assert(offsetof(ULedgerMapWidget, POIClass) == 0x0550);
static_assert(offsetof(ULedgerMapWidget, ChangeFloorDescription) == 0x0558);
static_assert(offsetof(ULedgerMapWidget, LocalMapString) == 0x0590);
static_assert(offsetof(ULedgerMapWidget, RegionMapString) == 0x0598);
static_assert(offsetof(ULedgerMapWidget, POITextureData) == 0x05A0);
static_assert(offsetof(ULedgerWidget, NavigationBar) == 0x0340);
static_assert(offsetof(ULedgerWidget, PageScrollBox) == 0x0348);
static_assert(offsetof(ULedgerWidget, ScrollingWidgetGroup) == 0x0350);
static_assert(offsetof(ULedgerWidget, PlayerStats) == 0x0358);
static_assert(offsetof(ULedgerWidget, Character) == 0x0360);
static_assert(offsetof(ULedgerWidget, Journal) == 0x0368);
static_assert(offsetof(ULedgerWidget, LedgerMap) == 0x0370);
static_assert(offsetof(ULedgerWidget, Inventory) == 0x0378);
static_assert(offsetof(ULedgerWidget, CompanionWidget1) == 0x0380);
static_assert(offsetof(ULedgerWidget, CompanionWidget2) == 0x0388);
static_assert(offsetof(ULedgerWidget, CompanionItemViewer) == 0x0390);
static_assert(offsetof(ULedgerWidget, CharacterStageFront) == 0x0398);
static_assert(offsetof(ULedgerWidget, CharacterStageRear) == 0x03A0);
static_assert(offsetof(ULedgerWidget, AudioLogWidget) == 0x03A8);
static_assert(offsetof(ULedgerWidget, CharacterRender) == 0x03B0);
static_assert(offsetof(ULedgerWidget, CompanionWidgetClass) == 0x03B8);
static_assert(offsetof(ULedgerWidget, CompanionIDsAndSortOrder) == 0x03C0);
static_assert(offsetof(ULegalWidget, LegalScrollBox) == 0x03B8);
static_assert(offsetof(ULegalWidget, EULATextBlock) == 0x03C0);
static_assert(offsetof(ULegalWidget, TOSTextBlock) == 0x03C8);
static_assert(offsetof(ULegalWidget, ActiveVisibility) == 0x03D0);
static_assert(offsetof(ULegalWidget, InactiveVisibility) == 0x03D1);
static_assert(offsetof(ULevelOptionsWidget, EntryVerticalBox) == 0x0310);
static_assert(offsetof(ULevelOptionsWidget, EntryLevelGrid) == 0x0318);
static_assert(offsetof(ULevelOptionsWidget, DisplayTextBlock) == 0x0320);
static_assert(offsetof(ULevelOptionsWidget, TextRef) == 0x032C);
static_assert(offsetof(ULevelUpButtonWidget, TextLocString) == 0x0318);
static_assert(offsetof(ULevelUpButtonWidget, TextBlock) == 0x0320);
static_assert(offsetof(ULevelUpButtonWidget, Button) == 0x0328);
static_assert(offsetof(ULevelUpButtonWidget, EffectContainer) == 0x0330);
static_assert(offsetof(ULevelUpNotificationWidget, MainCanvasPanel) == 0x0308);
static_assert(offsetof(ULevelUpNotificationWidget, FadeInContainer) == 0x0310);
static_assert(offsetof(ULevelUpNotificationWidget, Glow) == 0x0318);
static_assert(offsetof(ULevelUpNotificationWidget, LevelFlowLeft) == 0x0320);
static_assert(offsetof(ULevelUpNotificationWidget, LevelFlowRight) == 0x0328);
static_assert(offsetof(ULevelUpNotificationWidget, DarkBacking) == 0x0330);
static_assert(offsetof(ULevelUpNotificationWidget, LevelUpBacking) == 0x0338);
static_assert(offsetof(ULevelUpNotificationWidget, CongratsTextBlock) == 0x0340);
static_assert(offsetof(ULevelUpNotificationWidget, InputLabelOverlay) == 0x0348);
static_assert(offsetof(ULevelUpNotificationWidget, LevelUpInputLabelGroupSkills) == 0x0350);
static_assert(offsetof(ULevelUpNotificationWidget, LevelUpInputLabelGroupSkillsAndPerks) == 0x0358);
static_assert(offsetof(ULevelUpNotificationWidget, ReminderInputLabel) == 0x0360);
static_assert(offsetof(ULevelUpNotificationWidget, NewLevelTextBlock) == 0x0368);
static_assert(offsetof(ULevelUpNotificationWidget, LevelUpReminderOverlay) == 0x0370);
static_assert(offsetof(ULevelUpNotificationWidget, GlowballTargetPositionViewportMultiplier) == 0x0388);
static_assert(offsetof(ULevelUpNotificationWidget, InputLabelColorOverride) == 0x0390);
static_assert(offsetof(FDeathMontageGroup, List) == 0x0000);
static_assert(offsetof(UDeathMontageSet, DeathMontages) == 0x0038);
static_assert(offsetof(UTPVPersonalityCollection, DefaultPersonality) == 0x0038);
static_assert(offsetof(UTalkingIdleOverrideData, TalkingIdleOptions) == 0x0038);
static_assert(offsetof(UTPVPersonalitySet, LocomotionWalkStart) == 0x0038);
static_assert(offsetof(UTPVPersonalitySet, LocomotionTurnInPlace) == 0x0048);
static_assert(offsetof(UTPVPersonalitySet, GetUpFromFaceDownPose) == 0x0058);
static_assert(offsetof(UTPVPersonalitySet, GetUpFromFaceUpPose) == 0x0068);
static_assert(offsetof(UTPVPersonalitySet, NonCombatAimBlendSpace) == 0x0078);
static_assert(offsetof(UTPVPersonalitySet, WalkForward) == 0x0080);
static_assert(offsetof(UTPVPersonalitySet, WalkBackward) == 0x0088);
static_assert(offsetof(UTPVPersonalitySet, RunForward) == 0x0090);
static_assert(offsetof(UTPVPersonalitySet, RunBackward) == 0x0098);
static_assert(offsetof(UTPVPersonalitySet, LowGravRunForward) == 0x00A0);
static_assert(offsetof(UTPVPersonalitySet, LowGravRunBackward) == 0x00A8);
static_assert(offsetof(UTPVPersonalitySet, HandPose) == 0x00B0);
static_assert(offsetof(UTPVPersonalitySet, WalkArmPose) == 0x00B8);
static_assert(offsetof(UTPVPersonalitySet, RunArmPose) == 0x00C0);
static_assert(offsetof(UTPVPersonalitySet, JumpIntro) == 0x00C8);
static_assert(offsetof(UTPVPersonalitySet, JumpLoop) == 0x00D0);
static_assert(offsetof(UTPVPersonalitySet, JumpLand) == 0x00D8);
static_assert(offsetof(UTPVPersonalitySet, LowGravJumpIntro) == 0x00E0);
static_assert(offsetof(UTPVPersonalitySet, LowGravJumpLoop) == 0x00E8);
static_assert(offsetof(UTPVPersonalitySet, LowGravJumpLand) == 0x00F0);
static_assert(offsetof(UTPVPersonalitySet, CrouchIdleStart) == 0x00F8);
static_assert(offsetof(UTPVPersonalitySet, CrouchIdle) == 0x0100);
static_assert(offsetof(UTPVPersonalitySet, CrouchIdleEnd) == 0x0108);
static_assert(offsetof(UTPVPersonalitySet, CrouchWalkStart) == 0x0110);
static_assert(offsetof(UTPVPersonalitySet, CrouchWalk) == 0x0118);
static_assert(offsetof(UTPVPersonalitySet, CrouchWalkEnd) == 0x0120);
static_assert(offsetof(UTPVPersonalitySet, PersonalityIdleAdditive) == 0x0128);
static_assert(offsetof(UTPVPersonalitySet, BaseIdles) == 0x0130);
static_assert(offsetof(UTPVPersonalitySet, StartLoopEndIdles) == 0x0140);
static_assert(offsetof(UTPVPersonalitySet, TalkingSequences) == 0x0150);
static_assert(offsetof(UTPVPersonalitySet, BarkTalkingSequences) == 0x01A0);
static_assert(offsetof(UTPVPersonalitySet, DialogIdles) == 0x01F0);
static_assert(offsetof(UTPVPersonalitySet, DialogStartLoopEndIdles) == 0x0200);
static_assert(offsetof(UTPVPersonalitySet, HeadAdditiveLayer) == 0x0210);
static_assert(offsetof(UTPVPersonalitySet, DeathMontages) == 0x0228);
static_assert(offsetof(FLocomotionData, AnimSequence) == 0x0000);
static_assert(offsetof(FLocomotionData, AnimSequenceAlt) == 0x0008);
static_assert(offsetof(ULocomotionLogicComponent, AnimInstance) == 0x00E8);
static_assert(offsetof(ULocomotionLogicComponent, MovementComponent) == 0x00F0);
static_assert(offsetof(ULocomotionLogicComponent, NonCombatLocomotion) == 0x00F8);
static_assert(offsetof(ULocomotionLogicComponent, CombatLocomotion) == 0x0108);
static_assert(offsetof(ULootRowBase, Conditional) == 0x0048);
static_assert(offsetof(ULootRowItem, Item) == 0x00C0);
static_assert(offsetof(ULootRowTable, LootTable) == 0x00C0);
static_assert(offsetof(ULootTableData, LootRows) == 0x0048);
static_assert(offsetof(ULootTableData, OverlayFilePath) == 0x0060);
static_assert(offsetof(ALowGravJumpNavLink, LinkDirection) == 0x02E8);
static_assert(offsetof(UMainActionKeyBindDisplay, InputLabel) == 0x0300);
static_assert(offsetof(UMainActionKeyBindDisplay, LabelDescription) == 0x0308);
static_assert(offsetof(UMainMenuDLCManagerWidget, INX01Widget) == 0x0308);
static_assert(offsetof(UMainMenuDLCManagerWidget, INX02Widget) == 0x0310);
static_assert(offsetof(FPlatformSetProductID, ForcedUniversalID) == 0x0000);
static_assert(offsetof(FPlatformSetProductID, PCWindowsStoreID) == 0x0010);
static_assert(offsetof(FPlatformSetProductID, PCGamepassID) == 0x0020);
static_assert(offsetof(FPlatformSetProductID, PCEpicID) == 0x0030);
static_assert(offsetof(FPlatformSetProductID, PCSteamID) == 0x0040);
static_assert(offsetof(FPlatformSetProductID, PCFallbackLink) == 0x0050);
static_assert(offsetof(FPlatformSetProductID, XboxID) == 0x0060);
static_assert(offsetof(FPlatformSetProductID, PS4AmericaTitleID) == 0x0070);
static_assert(offsetof(FPlatformSetProductID, PS4ID_SIEA) == 0x0080);
static_assert(offsetof(FPlatformSetProductID, PS4EuropeTitleID) == 0x0090);
static_assert(offsetof(FPlatformSetProductID, PS4ID_SIEE) == 0x00A0);
static_assert(offsetof(FPlatformSetProductID, SwitchID) == 0x00B0);
static_assert(offsetof(UMainMenuDLCWidget, DLCPackage) == 0x0300);
static_assert(offsetof(UMainMenuDLCWidget, ProductIDs) == 0x0308);
static_assert(offsetof(UMainMenuDLCWidget, OpenLinkBehavior) == 0x03C8);
static_assert(offsetof(UMainMenuDLCWidget, HeaderString) == 0x03CC);
static_assert(offsetof(UMainMenuDLCWidget, AvailabilityString) == 0x03D4);
static_assert(offsetof(UMainMenuDLCWidget, NormalTexture) == 0x03E0);
static_assert(offsetof(UMainMenuDLCWidget, FocusedTexture) == 0x03E8);
static_assert(offsetof(UMainMenuDLCWidget, DLCInfoBrandTexture) == 0x03F0);
static_assert(offsetof(UMainMenuDLCWidget, Button) == 0x0418);
static_assert(offsetof(UMainMenuDLCWidget, InputWidget) == 0x0420);
static_assert(offsetof(UMainMenuDLCWidget, HeaderTextblock) == 0x0428);
static_assert(offsetof(UMainMenuDLCWidget, AvailabilityTextBlock) == 0x0430);
static_assert(offsetof(UMainMenuDLCWidget, DLCImage) == 0x0438);
static_assert(offsetof(UMainMenuDLCWidget, Checkmark) == 0x0440);
static_assert(offsetof(FMainMenuLevelDescription, Level) == 0x0000);
static_assert(offsetof(FMainMenuLevelDescription, TextReference) == 0x0018);
static_assert(offsetof(FMainMenuLevelDescription, TravelDestinationData) == 0x0028);
static_assert(offsetof(UMainMenuLevelsData, LevelDescriptions) == 0x0038);
static_assert(offsetof(UMainMenuWidget, MainMenuLevelsData) == 0x0338);
static_assert(offsetof(UMainMenuWidget, MainOptions) == 0x0340);
static_assert(offsetof(UMainMenuWidget, ExtraOptions) == 0x0348);
static_assert(offsetof(UMainMenuWidget, DeliverablesOptions) == 0x0350);
static_assert(offsetof(UMainMenuWidget, ContentOverlay) == 0x0358);
static_assert(offsetof(UMainMenuWidget, PressKeyPromptOverlay) == 0x0360);
static_assert(offsetof(UMainMenuWidget, AutosaveSplashOverlay) == 0x0368);
static_assert(offsetof(UMainMenuWidget, LogoContainer) == 0x0370);
static_assert(offsetof(UMainMenuWidget, InvisibleButton) == 0x0378);
static_assert(offsetof(UMainMenuWidget, VersionTextBlock) == 0x0380);
static_assert(offsetof(UMainMenuWidget, UserNameTextBlock) == 0x0388);
static_assert(offsetof(UMainMenuWidget, PressKeyPrompt) == 0x0390);
static_assert(offsetof(UMainMenuWidget, AutosaveSplashText) == 0x0398);
static_assert(offsetof(UMainMenuWidget, XboxTextblockContainer) == 0x03A0);
static_assert(offsetof(UMainMenuWidget, ButtonClass) == 0x03A8);
static_assert(offsetof(UMainMenuWidget, SettingsMenuClass) == 0x03B0);
static_assert(offsetof(UMainMenuWidget, CreditsWidget) == 0x03B8);
static_assert(offsetof(UMainMenuWidget, LegalWidget) == 0x03C0);
static_assert(offsetof(UMainMenuWidget, CreditsMusicGlobalVariable) == 0x03C8);
static_assert(offsetof(UMainMenuWidget, GammaSelection) == 0x03E0);
static_assert(offsetof(UMainMenuWidget, MenuDLCManager) == 0x03E8);
static_assert(offsetof(UMainOptionsWidget, MainOptions) == 0x0350);
static_assert(offsetof(UMainOptionsWidget, ContinueButton) == 0x0358);
static_assert(offsetof(UMainOptionsWidget, NewGameButton) == 0x0360);
static_assert(offsetof(UMainOptionsWidget, DeliverablesButton) == 0x0368);
static_assert(offsetof(UMainOptionsWidget, ExtrasButton) == 0x0370);
static_assert(offsetof(UMainOptionsWidget, CreditsButton) == 0x0378);
static_assert(offsetof(UMainOptionsWidget, QuitButton) == 0x0380);
static_assert(offsetof(UMainOptionsWidget, SettingsButton) == 0x0388);
static_assert(offsetof(UMainOptionsWidget, LoadSaveButton) == 0x0390);
static_assert(offsetof(UMainOptionsWidget, ChangeProfileButton) == 0x0398);
static_assert(offsetof(UMainOptionsWidget, SettingsMenuClass) == 0x03A0);
static_assert(offsetof(UMainOptionsWidget, DifficultySelectClass) == 0x03A8);
static_assert(offsetof(UMainOptionsWidget, MainMenuClass) == 0x03B0);
static_assert(offsetof(UMainOptionsWidget, CharacterCustomizationLevel) == 0x03B8);
static_assert(offsetof(UMakeup, MakeupMask) == 0x0038);
static_assert(offsetof(UMakeup, CheekColor) == 0x0040);
static_assert(offsetof(UMakeup, EyeColor) == 0x0058);
static_assert(offsetof(UMakeup, LipColor) == 0x0070);
static_assert(offsetof(FManagerDebuggerPlayerData, InputComponent) == 0x0008);
static_assert(offsetof(UManagerDebugger, PlayerData) == 0x0048);
static_assert(offsetof(UMapAreaBeaconWidget, AreaImage) == 0x0278);
static_assert(offsetof(UMapAreaBeaconWidget, BeaconImage) == 0x0280);
static_assert(offsetof(UMapBeaconData, MapBeaconData) == 0x0038);
static_assert(offsetof(UMapBeaconEntryWidget, ActiveIconImage) == 0x0308);
static_assert(offsetof(UMapBeaconEntryWidget, InactiveIconImage) == 0x0310);
static_assert(offsetof(FMapCompassUIVisuals, Name) == 0x0000);
static_assert(offsetof(FMapCompassUIVisuals, Description) == 0x0008);
static_assert(offsetof(FMapCompassUIVisuals, Texture) == 0x0010);
static_assert(offsetof(UMapCompassUIVisualData, MapCompassNamesAndTextures) == 0x0038);
static_assert(offsetof(UMapFastTravelEntryWidget, IconImage) == 0x0308);
static_assert(offsetof(AMapFloorVolume, FloorName) == 0x0310);
static_assert(offsetof(FConditionalMusicTrack, Condition) == 0x0000);
static_assert(offsetof(FConditionalMusicTrack, MusicTrack) == 0x0078);
static_assert(offsetof(UMapGameplayMusicSettings, DefaultTrack) == 0x0038);
static_assert(offsetof(UMapGameplayMusicSettings, DangerTrack) == 0x0040);
static_assert(offsetof(UMapGameplayMusicSettings, CombatTrack) == 0x0048);
static_assert(offsetof(UMapGameplayMusicSettings, PostCombatTrack) == 0x0050);
static_assert(offsetof(UMapGameplayMusicSettings, ConditionalOverrides) == 0x0060);
static_assert(offsetof(FMapFloorData, FloorName) == 0x0000);
static_assert(offsetof(FMapFloorData, MapImage) == 0x0008);
static_assert(offsetof(FMapFloorData, MapMinBounds) == 0x0030);
static_assert(offsetof(FMapFloorData, MapMaxBounds) == 0x0038);
static_assert(offsetof(UMapInformation, ParentMap) == 0x0038);
static_assert(offsetof(UMapInformation, PresenceData) == 0x0060);
static_assert(offsetof(UMapInformation, RegionData) == 0x0068);
static_assert(offsetof(UMapInformation, TravelLayoutData) == 0x0070);
static_assert(offsetof(UMapInformation, MapDefaultBeacons) == 0x0078);
static_assert(offsetof(UMapInformation, MapTextData) == 0x0080);
static_assert(offsetof(UMapInformation, MapPointsOfInterest) == 0x0088);
static_assert(offsetof(UMapInformation, ParentRegionMapInformation) == 0x0098);
static_assert(offsetof(UMapInformation, DefaultFloor) == 0x00A4);
static_assert(offsetof(UMapInformation, Floors) == 0x00B0);
static_assert(offsetof(UMapLoadingMusicSettings, DefaultTrack) == 0x0038);
static_assert(offsetof(UMapLoadingMusicSettings, ConditionalOverrides) == 0x0040);
static_assert(offsetof(FPointOfInterestLocation, WorldLocation) == 0x0000);
static_assert(offsetof(FPointOfInterestLocation, FloorName) == 0x000C);
static_assert(offsetof(FPointOfInterestLocation, POIData) == 0x0018);
static_assert(offsetof(UMapPointOfInterestData, PointsOfInterest) == 0x0038);
static_assert(offsetof(UMapPointOfInterestWidget, IconImage) == 0x0308);
static_assert(offsetof(UMapQuestSelectionEntryWidget, EntryButton) == 0x0300);
static_assert(offsetof(UMapQuestSelectionEntryWidget, ActiveQuestIcon) == 0x0308);
static_assert(offsetof(UMapQuestSelectionEntryWidget, InactiveQuestIcon) == 0x0310);
static_assert(offsetof(UMapQuestSelectionEntryWidget, EntryTextBlock) == 0x0318);
static_assert(offsetof(UMapRendererFilterData, FilterCategories) == 0x0030);
static_assert(offsetof(AMapRenderer, RenderName) == 0x02B8);
static_assert(offsetof(AMapRenderer, FloorName) == 0x02C8);
static_assert(offsetof(AMapRenderer, OutputResolution) == 0x02D4);
static_assert(offsetof(AMapRenderer, FilteredAssets) == 0x0330);
static_assert(offsetof(AMapRenderer, FilteredActorNames) == 0x0350);
static_assert(offsetof(AMapRenderer, CapturePlane) == 0x0360);
static_assert(offsetof(AMapRenderer, CaptureCamera) == 0x0368);
static_assert(offsetof(AMapRenderer, IncludeBoxes) == 0x0370);
static_assert(offsetof(AMapRenderer, ExcludeBoxes) == 0x0378);
static_assert(offsetof(FMapTextEntryData, DisplayText) == 0x0000);
static_assert(offsetof(FMapTextEntryData, FloorName) == 0x000C);
static_assert(offsetof(FMapTextEntryData, Position) == 0x0014);
static_assert(offsetof(UMapTextData, MapTextEntries) == 0x0038);
static_assert(offsetof(AMapTextEntry, TextEntryData) == 0x02E8);
static_assert(offsetof(UMapTextEntryWidget, MinZoomText) == 0x0300);
static_assert(offsetof(UMapTextEntryWidget, StartingZoomText) == 0x0308);
static_assert(offsetof(UMapTextEntryWidget, MaxZoomText) == 0x0310);
static_assert(offsetof(UMapTransitionNotification, MainOverlay) == 0x0300);
static_assert(offsetof(UMapTransitionNotification, AreaNameTextBlock) == 0x0308);
static_assert(offsetof(FMaterialParamMod, MaterialSlotName) == 0x0000);
static_assert(offsetof(FMaterialParamMod, ParamName) == 0x0008);
static_assert(offsetof(FMaterialParamMod, Type) == 0x0010);
static_assert(offsetof(FMaterialParamMod, VectorParam) == 0x0018);
static_assert(offsetof(FMaterialParamMod, TextureParam) == 0x0028);
static_assert(offsetof(UMaterialParamModVisual, ParamMods) == 0x0068);
static_assert(offsetof(UMaterialParamModVisual, MaterialSlotName) == 0x007C);
static_assert(offsetof(UMaterialParamModVisual, ParamName) == 0x0084);
static_assert(offsetof(UMaterialParamModVisual, Type) == 0x008C);
static_assert(offsetof(UMaterialParamModVisual, VectorParam) == 0x0094);
static_assert(offsetof(UMaterialParamModVisual, TextureParam) == 0x00A8);
static_assert(offsetof(UMedKitAbilityWidget, DrugSlotOne) == 0x0378);
static_assert(offsetof(UMedKitAbilityWidget, DrugSlotTwo) == 0x0380);
static_assert(offsetof(UMedKitAbilityWidget, DrugSlotThree) == 0x0388);
static_assert(offsetof(UMedKitAbilityWidget, DrugSlotFour) == 0x0390);
static_assert(offsetof(UMedKitAbilityWidget, DrugSlotContainer) == 0x0398);
static_assert(offsetof(UMedKitComponent, DisplayName) == 0x0118);
static_assert(offsetof(UMedKitComponent, AbilityIcon) == 0x0120);
static_assert(offsetof(UMedKitComponent, TriggerSound) == 0x0128);
static_assert(offsetof(UMedKitComponent, AbilityMontage) == 0x0130);
static_assert(offsetof(UMedKitDrugSlotWidget, DrugSlotImage) == 0x0300);
static_assert(offsetof(UMedKitDrugSlotWidget, SlotIsFilled) == 0x0308);
static_assert(offsetof(UMedKitDrugSlotWidget, SlotIsEmpty) == 0x0310);
static_assert(offsetof(FMeleeAnimEvent, Anim) == 0x0000);
static_assert(offsetof(UMeleeAnimEventEffect, PreAnims) == 0x0038);
static_assert(offsetof(UMeleeAnimEventEffect, Anims) == 0x0088);
static_assert(offsetof(UMeleeAnimEventEffect, FxRotation) == 0x0098);
static_assert(offsetof(UMeleeAnimEventEffect, TargetMesh) == 0x00A4);
static_assert(offsetof(UMeleeAnimEventEffect, MeleeAction) == 0x00A5);
static_assert(offsetof(UMeleeActionCollisionInfo, CollisionSocket) == 0x0030);
static_assert(offsetof(UMeleeActionCollisionInfo, CollisionShape) == 0x0038);
static_assert(offsetof(UMeleeActionCollisionInfo, CollisionShapeInfo) == 0x0040);
static_assert(offsetof(FBoxShapeData, BoxExtent) == 0x0008);
static_assert(offsetof(FShapeVariant, ShapeType) == 0x0000);
static_assert(offsetof(FShapeVariant, BoxData) == 0x0008);
static_assert(offsetof(FShapeVariant, SphereData) == 0x0020);
static_assert(offsetof(FShapeVariant, CapsuleData) == 0x0030);
static_assert(offsetof(FTransformedShapeVariant, ShapeTransform) == 0x0000);
static_assert(offsetof(FTransformedShapeVariant, Shape) == 0x0030);
static_assert(offsetof(FMeleeCollisionInfo, CollisionSocket) == 0x0004);
static_assert(offsetof(FMeleeCollisionInfo, CollisionShapeInfo) == 0x0010);
static_assert(offsetof(UMeleeMode, DefaultCollision) == 0x0138);
static_assert(offsetof(UMeleeMode, CollisionOverrides) == 0x0140);
static_assert(offsetof(UMeleeMode, DefaultMeleeCollision) == 0x0190);
static_assert(offsetof(UMeleeMode, FartherReachMeleeCollision) == 0x0210);
static_assert(offsetof(UMeleeMode, MeleeCollisionOverrides) == 0x0290);
static_assert(offsetof(UMeleeMode, MeleeCollisionGameplaytagOverrides) == 0x02E0);
static_assert(offsetof(UMeleeMode, ImpactDataSet) == 0x0330);
static_assert(offsetof(UMeleeMode, DefaultHitReactionType) == 0x0338);
static_assert(offsetof(UMeleeMode, SweepHitReactionType) == 0x0339);
static_assert(offsetof(UMeleeMode, PowerHitReactionType) == 0x033A);
static_assert(offsetof(UMeleeMode, SpecialAttackHitReactionType) == 0x033B);
static_assert(offsetof(UMeleeMode, DamageMultipliers) == 0x033C);
static_assert(offsetof(UMeleeMode, MeleeSequencer) == 0x0350);
static_assert(offsetof(UMeleeMode, MeleeActionDurations) == 0x0358);
static_assert(offsetof(UMeleeMode, NPCMeleeActionDamageMultipliers) == 0x03B0);
static_assert(offsetof(UMeleeMode, CritSpell) == 0x0408);
static_assert(offsetof(UMeleeMode, PowerAttackWindUpStat) == 0x0410);
static_assert(offsetof(FDamageTypeRequirement, DamageType) == 0x0008);
static_assert(offsetof(UMeleeMultiDamageTypeMode, Skill) == 0x04C8);
static_assert(offsetof(UMeleeMultiDamageTypeMode, DamageTypes) == 0x04D0);
static_assert(offsetof(UMeleeSlotRequestData, MeleeAction) == 0x0068);
static_assert(offsetof(UWeaponVisuals, WeaponEvents) == 0x0030);
static_assert(offsetof(UWeaponVisuals, WeaponStates) == 0x0080);
static_assert(offsetof(UWeaponVisuals, WeaponCustomEvents) == 0x00D0);
static_assert(offsetof(UWeaponVisuals, WeaponCustomStates) == 0x0120);
static_assert(offsetof(UWeaponVisuals, Target) == 0x0170);
static_assert(offsetof(UWeaponVisuals, Weapon) == 0x0178);
static_assert(offsetof(UWeaponVisuals, WeaponMesh) == 0x0180);
static_assert(offsetof(UWeaponVisuals, CharacterMesh) == 0x0188);
static_assert(offsetof(UWeaponVisuals, NextVisual) == 0x0190);
static_assert(offsetof(UWeaponVisuals, EventEffectState) == 0x01D8);
static_assert(offsetof(UPrimaryWeaponVisuals, ReticleVisuals) == 0x0200);
static_assert(offsetof(UPrimaryWeaponVisuals, OverrideAttachSocket) == 0x0208);
static_assert(offsetof(UPrimaryWeaponVisuals, WeaponFineAimOffset) == 0x0210);
static_assert(offsetof(UPrimaryWeaponVisuals, WeaponNormalAimOffset) == 0x021C);
static_assert(offsetof(UPrimaryWeaponVisuals, WeaponFineAimCenterOffset) == 0x0228);
static_assert(offsetof(UPrimaryWeaponVisuals, WeaponNormalAimCenterOffset) == 0x0234);
static_assert(offsetof(UPrimaryWeaponVisuals, CharacterAnimInstance) == 0x0240);
static_assert(offsetof(UMeshModVisual, AddedComponent) == 0x00B8);
static_assert(offsetof(UMFTSelectionEntryWidget, Button) == 0x0300);
static_assert(offsetof(UMFTSelectionEntryWidget, FastTravelTextBlock) == 0x0308);
static_assert(offsetof(UMFTSelectionWidget, HeaderTextblock) == 0x0320);
static_assert(offsetof(UMFTSelectionWidget, EntryList) == 0x0328);
static_assert(offsetof(UMFTSelectionWidget, CancelEntry) == 0x0330);
static_assert(offsetof(UMFTSelectionWidget, EntryClass) == 0x0338);
static_assert(offsetof(UMicroMod, RpgStatMods) == 0x0030);
static_assert(offsetof(UMicroModTable, MicoModToWeightMap) == 0x0038);
static_assert(offsetof(FModAppearance, ModVisual) == 0x0040);
static_assert(offsetof(UModAppearances, ModAppearances) == 0x0030);
static_assert(offsetof(FAppliedMod, Mod) == 0x0000);
static_assert(offsetof(UAppliedModVisualData, AppliedModData) == 0x0030);
static_assert(offsetof(UModVisuals, Visuals) == 0x0068);
static_assert(offsetof(UMoviePlayerWidget, MovieDisplay) == 0x0318);
static_assert(offsetof(UMoviePlayerWidget, SkipContainer) == 0x0320);
static_assert(offsetof(UMoviePlayerWidget, MovieOverlay) == 0x0328);
static_assert(offsetof(UMoviePlayerWidget, MediaTexture) == 0x0330);
static_assert(offsetof(UMoviePlayerWidget, SubtitleManager) == 0x0338);
static_assert(offsetof(UMoviePlayerWidget, HoldInputLabel) == 0x0340);
static_assert(offsetof(UMoviePlayerWidget, InvisibleButton) == 0x0348);
static_assert(offsetof(UMoviePlayerWidget, MediaSoundComponent) == 0x0350);
static_assert(offsetof(UMovieSubtitleData, SubtitleDataByName) == 0x0088);
static_assert(offsetof(UMultiQuestMapTracker, QuestEntryClass) == 0x0300);
static_assert(offsetof(UMultiQuestMapTracker, MainBorder) == 0x0308);
static_assert(offsetof(UMultiQuestMapTracker, ActiveQuestVBox) == 0x0310);
static_assert(offsetof(UMultiQuestMapTracker, ActiveQuestEntry) == 0x0318);
static_assert(offsetof(UMultiQuestMapTracker, InactiveQuestVBox) == 0x0320);
static_assert(offsetof(UMultiQuestMapTracker, InactiveQuestEntryVBox) == 0x0328);
static_assert(offsetof(UStatusEffectChildData, StatusEffect) == 0x0030);
static_assert(offsetof(UMultiStatusEffect, ChildEffectsData) == 0x0198);
static_assert(offsetof(UMultiStatusEffect, ChildStatusEffects) == 0x01A8);
static_assert(offsetof(UMusicTrackData, WwiseStateName) == 0x0038);
static_assert(offsetof(UMusicManager, ScriptedOverrideTrack) == 0x0030);
static_assert(offsetof(UMusicManager, CurrentTrack) == 0x0038);
static_assert(offsetof(UMusicManager, CurrentMapGameplayMusicSettings) == 0x0040);
static_assert(offsetof(UNavigationGroupWidget, EntryContainer) == 0x0300);
static_assert(offsetof(UNavigationGroupWidget, PreviousInputWidget) == 0x0308);
static_assert(offsetof(UNavigationGroupWidget, NextInputWidget) == 0x0310);
static_assert(offsetof(UNavigationGroupWidget, ContainerSizeBox) == 0x0318);
static_assert(offsetof(UNavigationGroupWidget, ContainerScrollBox) == 0x0320);
static_assert(offsetof(UNavigationGroupWidget, LeftArrowButton) == 0x0328);
static_assert(offsetof(UNavigationGroupWidget, RightArrowButton) == 0x0330);
static_assert(offsetof(UNavigationGroupWidget, ButtonGroup) == 0x0338);
static_assert(offsetof(UNavigationGroupWidget, EntryClass) == 0x0340);
static_assert(offsetof(UNavigationGroupWidget, Entries) == 0x0348);
static_assert(offsetof(UNavigationGroupWidget, PreviousActionName) == 0x0368);
static_assert(offsetof(UNavigationGroupWidget, NextActionName) == 0x0370);
static_assert(offsetof(UNewSaveWidget, Button) == 0x0278);
static_assert(offsetof(UNewSaveWidget, NewSaveText) == 0x0280);
static_assert(offsetof(UNiagaraOptimizationComponent, OptimizedComponents) == 0x00E0);
static_assert(offsetof(UNiagaraOptimizationComponent, OptimizationTag) == 0x00F4);
static_assert(offsetof(UObjectiveListWidget, ObjectiveList) == 0x0300);
static_assert(offsetof(UObjectiveListWidget, ObjectiveListEntry) == 0x0308);
static_assert(offsetof(UObsidianIDComponent, SpecialID) == 0x00E0);
static_assert(offsetof(UObsidianIDComponent, ID) == 0x00E4);
static_assert(offsetof(UOCLAudioComponent, AudioEvents) == 0x0150);
static_assert(offsetof(UOCLComponent, InitialState) == 0x00F0);
static_assert(offsetof(UOCLComponent, KeyItem) == 0x00F8);
static_assert(offsetof(UOCLComponent, LockpickDifficulty) == 0x0103);
static_assert(offsetof(UOCLComponent, LockpickItem) == 0x0108);
static_assert(offsetof(UOCLComponent, CurrentState) == 0x02B8);
static_assert(offsetof(AOctreeHelperActor, RenderComp) == 0x02B8);
static_assert(offsetof(UOnRailsComponent, TurningLoop) == 0x00E8);
static_assert(offsetof(UOnRailsComponent, Spline) == 0x00F0);
static_assert(offsetof(UOnRailsComponent, MovementStart) == 0x0110);
static_assert(offsetof(UOnRailsComponent, MovementEnd) == 0x0118);
static_assert(offsetof(UOnRailsComponent, MovementLoop) == 0x0120);
static_assert(offsetof(UOptionPresenterWidget, Setting) == 0x0330);
static_assert(offsetof(UOptionPresenterWidget, PreviousButton) == 0x0338);
static_assert(offsetof(UOptionPresenterWidget, NextButton) == 0x0340);
static_assert(offsetof(UOptionPresenterWidget, LeftArrowImage) == 0x0348);
static_assert(offsetof(UOptionPresenterWidget, RightArrowImage) == 0x0350);
static_assert(offsetof(UOptionPresenterWidget, OptionTextBlock) == 0x0358);
static_assert(offsetof(UOptionSliderWidget, OptionTitleTextBlock) == 0x0310);
static_assert(offsetof(UOptionSliderWidget, NumEntriesDisplayTextBlock) == 0x0318);
static_assert(offsetof(UOptionSliderWidget, OptionSlider) == 0x0320);
static_assert(offsetof(UOptionSliderWidget, MiddlePointImage) == 0x0328);
static_assert(offsetof(UOptionSliderWidget, GamepadButton) == 0x0330);
static_assert(offsetof(UOptionSliderWidget, PreviousStep) == 0x0338);
static_assert(offsetof(UOptionSliderWidget, NextStep) == 0x0340);
static_assert(offsetof(UOverlayedSystemMapData, Source) == 0x0038);
static_assert(offsetof(UOverlayedSystemMapData, Overlay) == 0x0040);
static_assert(offsetof(UPaginatedButtonWidget, SelectedIcon) == 0x0278);
static_assert(offsetof(UPaginatedButtonWidget, Button) == 0x0280);
static_assert(offsetof(UPooledParticleSystemComponent, OwningPool) == 0x0760);
static_assert(offsetof(FParticleSystemPool, ActiveComponents) == 0x0000);
static_assert(offsetof(FParticleSystemPool, FreeComponents) == 0x0010);
static_assert(offsetof(FPendingParticleSpawnInfo, Template) == 0x0000);
static_assert(offsetof(UParticlePool, Pools) == 0x0030);
static_assert(offsetof(UParticlePool, PendingPrespawns) == 0x0080);
static_assert(offsetof(FActionSet, Action) == 0x0000);
static_assert(offsetof(FActionSet, LookAtOverride) == 0x0008);
static_assert(offsetof(APatrolNode, NextPatrolNode) == 0x02C8);
static_assert(offsetof(APatrolNode, Action) == 0x02D8);
static_assert(offsetof(APatrolNode, ActionSet) == 0x02E0);
static_assert(offsetof(APatrolNode, MovementType) == 0x02F8);
static_assert(offsetof(APatrolNode, IDComponent) == 0x0300);
static_assert(offsetof(APatrolNode, AISettings) == 0x0310);
static_assert(offsetof(UPauseMenuWidget, OptionsVerticalBox) == 0x0310);
static_assert(offsetof(UPauseMenuWidget, ResumeButton) == 0x0318);
static_assert(offsetof(UPauseMenuWidget, SaveGameButton) == 0x0320);
static_assert(offsetof(UPauseMenuWidget, LoadGameButton) == 0x0328);
static_assert(offsetof(UPauseMenuWidget, MainMenuButton) == 0x0330);
static_assert(offsetof(UPauseMenuWidget, SettingsButton) == 0x0338);
static_assert(offsetof(UPauseMenuWidget, IdleCamButton) == 0x0340);
static_assert(offsetof(UPauseMenuWidget, QuitButton) == 0x0348);
static_assert(offsetof(UPauseMenuWidget, VersionTextBlock) == 0x0350);
static_assert(offsetof(UPauseMenuWidget, IdleCamButtonText) == 0x0358);
static_assert(offsetof(UPauseMenuWidget, SettingsMenuClass) == 0x0360);
static_assert(offsetof(UPerceptionRangeScalarStatusEffect, CreatureType) == 0x0188);
static_assert(offsetof(FPerkTextures, Unpurchased) == 0x0000);
static_assert(offsetof(FPerkTextures, Purchased) == 0x0008);
static_assert(offsetof(FPerkTextures, Suppressed) == 0x0010);
static_assert(offsetof(UPerk, Name) == 0x0030);
static_assert(offsetof(UPerk, Description) == 0x0038);
static_assert(offsetof(UPerk, Icons) == 0x0040);
static_assert(offsetof(UPerk, Spells) == 0x0058);
static_assert(offsetof(UPerkReadoutWidget, TextContainer) == 0x0300);
static_assert(offsetof(UPerkReadoutWidget, PerkNameTextBlock) == 0x0308);
static_assert(offsetof(UPerkReadoutWidget, PerkReqsHeaderText) == 0x0310);
static_assert(offsetof(UPerkReadoutWidget, PerkReqsDescText) == 0x0318);
static_assert(offsetof(UPerkReadoutWidget, PerkSynopsisHeaderText) == 0x0320);
static_assert(offsetof(UPerkReadoutWidget, PerkSynopsisDescText) == 0x0328);
static_assert(offsetof(UPerkReadoutWidget, PerkDescHeaderText) == 0x0330);
static_assert(offsetof(UPerkReadoutWidget, PerkDescText) == 0x0338);
static_assert(offsetof(UPerkReadoutWidget, PerkSpecialText) == 0x0340);
static_assert(offsetof(UPerksListEntry, HighlightImage) == 0x0318);
static_assert(offsetof(UPerksListEntry, PendingImage) == 0x0320);
static_assert(offsetof(UPerksListEntry, Button) == 0x0328);
static_assert(offsetof(UPerksListEntry, ButtonHighlightFocused) == 0x0330);
static_assert(offsetof(UPerksListEntry, ButtonHighlightSelected) == 0x0338);
static_assert(offsetof(UPerksListEntry, ButtonHighlightHovered) == 0x0340);
static_assert(offsetof(UPerksListRowWidget, PerkTierTextBlock) == 0x0300);
static_assert(offsetof(UPerksListRowWidget, Perk0) == 0x0308);
static_assert(offsetof(UPerksListRowWidget, Perk1) == 0x0310);
static_assert(offsetof(UPerksListRowWidget, Perk2) == 0x0318);
static_assert(offsetof(UPerksListRowWidget, Perk3) == 0x0320);
static_assert(offsetof(UPerksListRowWidget, Perk4) == 0x0328);
static_assert(offsetof(UPerksListRowWidget, Perk5) == 0x0330);
static_assert(offsetof(UPerksListRowWidget, Perk6) == 0x0338);
static_assert(offsetof(UPerksListRowWidget, Perk7) == 0x0340);
static_assert(offsetof(UPerksListRowWidget, Perk8) == 0x0348);
static_assert(offsetof(UPerksListRowWidget, Perk9) == 0x0350);
static_assert(offsetof(UPerksListRowWidget, Perk10) == 0x0358);
static_assert(offsetof(UPerksListRowWidget, Perk11) == 0x0360);
static_assert(offsetof(UPerksListRowWidget, Perk12) == 0x0368);
static_assert(offsetof(UPerksListRowWidget, Perk13) == 0x0370);
static_assert(offsetof(UPerksListRowWidget, Perk14) == 0x0378);
static_assert(offsetof(UPerksListRowWidget, Perk15) == 0x0380);
static_assert(offsetof(UPerksListRowWidget, RowOneBacking) == 0x0388);
static_assert(offsetof(UPerksListRowWidget, RowTwoBacking) == 0x0390);
static_assert(offsetof(UPerksListWidget, RowOne) == 0x0300);
static_assert(offsetof(UPerksListWidget, RowTwo) == 0x0308);
static_assert(offsetof(UPerksListWidget, RowThree) == 0x0310);
static_assert(offsetof(UPerksListWidget, RowFour) == 0x0318);
static_assert(offsetof(UPerksListWidget, RowFive) == 0x0320);
static_assert(offsetof(UPerksListWidget, TextReference) == 0x0328);
static_assert(offsetof(UPerksTierWidget, ImageContainer) == 0x0300);
static_assert(offsetof(UPerksTierWidget, TierImage) == 0x0308);
static_assert(offsetof(UPerksTierWidget, TierImage2) == 0x0310);
static_assert(offsetof(UPerksTierWidget, TierImage3) == 0x0318);
static_assert(offsetof(UPerksTierWidget, TierImageBacking) == 0x0320);
static_assert(offsetof(UPerksTierWidget, TierTextBlock) == 0x0328);
static_assert(offsetof(UPerksTierWidget, Silhouettes) == 0x0330);
static_assert(offsetof(UPerkSummaryEntryWidget, Button) == 0x0300);
static_assert(offsetof(UPerkSummaryEntryWidget, PerkNameText) == 0x0308);
static_assert(offsetof(FPerkTier, Perks) == 0x0008);
static_assert(offsetof(FPerkTiers, PerkTiers) == 0x0000);
static_assert(offsetof(UPerkTree, PerkTrees) == 0x0038);
static_assert(offsetof(UPerkTree, NonTreePerks) == 0x0088);
static_assert(offsetof(UPerkTree, DLCPerkTree) == 0x0098);
static_assert(offsetof(UPerkTreeCollection, Sources) == 0x0038);
static_assert(offsetof(UPerkTreeCollection, PerkTrees) == 0x0048);
static_assert(offsetof(UPerkTreeCollection, NonTreePerks) == 0x0098);
static_assert(offsetof(UPersonalSpaceComponent, ChatterPersonalSpaceZone) == 0x0160);
static_assert(offsetof(UPersuadeBehaviorStateInfo, DisableStatusEffect) == 0x0120);
static_assert(offsetof(UPetableComponent, AnimationMontages) == 0x00E0);
static_assert(offsetof(APickup, DefaultItemStack) == 0x03F0);
static_assert(offsetof(APickup, InteractableComponent) == 0x05E8);
static_assert(offsetof(APickup, IDComponent) == 0x05F0);
static_assert(offsetof(APickup, OwningFaction) == 0x05F8);
static_assert(offsetof(APickup, OwningActor) == 0x0600);
static_assert(offsetof(UAkPlaySoundEventEffect, Sound) == 0x0030);
static_assert(offsetof(UAkPlaySoundEventEffect, SoundLoop) == 0x0040);
static_assert(offsetof(UAkPlaySoundEventEffect, StopEvent) == 0x0050);
static_assert(offsetof(UPlayAnimationAction, Animation) == 0x0038);
static_assert(offsetof(UPlayAnimEventEffect, Anim) == 0x0040);
static_assert(offsetof(UPlayAnimStateEventEffect, MovementModifierState) == 0x0030);
static_assert(offsetof(UPlayDirectionalAnimEventEffect, Anims) == 0x0040);
static_assert(offsetof(UPlayerDeathComponent, DeathAnimation) == 0x02B8);
static_assert(offsetof(UPlayerDeathComponent, CrouchingAnimation) == 0x02C0);
static_assert(offsetof(UPlayerDeathComponent, FallingDeathAnimation) == 0x02C8);
static_assert(offsetof(UPlayerDeathComponent, FallingDeathEndSectionName) == 0x02D0);
static_assert(offsetof(UPlayerEnvironmentInteractionComponent, EquippedDisguise) == 0x0380);
static_assert(offsetof(FAddictionTimer, AddictionTag) == 0x0000);
static_assert(offsetof(FAddictionTimer, FlawClass) == 0x0010);
static_assert(offsetof(FSurvivalTier, Spell) == 0x0000);
static_assert(offsetof(FCurveData, ScalerName) == 0x0000);
static_assert(offsetof(FCurveData, Parameter) == 0x0008);
static_assert(offsetof(UPlayerHealthComponent, SmokeAddictionTimer) == 0x01F8);
static_assert(offsetof(UPlayerHealthComponent, FoodAddictionTimer) == 0x0238);
static_assert(offsetof(UPlayerHealthComponent, DrugsAddictionTimer) == 0x0278);
static_assert(offsetof(UPlayerHealthComponent, AlcoholAddictionTimer) == 0x02B8);
static_assert(offsetof(UPlayerHealthComponent, HungerTiers) == 0x02F8);
static_assert(offsetof(UPlayerHealthComponent, ThirstTiers) == 0x0308);
static_assert(offsetof(UPlayerHealthComponent, ExhaustionTiers) == 0x0318);
static_assert(offsetof(UPlayerHealthComponent, PlayerDiedSound) == 0x0328);
static_assert(offsetof(UPlayerHealthComponent, Material) == 0x0338);
static_assert(offsetof(UPlayerHealthComponent, ParamData) == 0x0350);
static_assert(offsetof(UPlayerInfoComponent, PlayerXPTable) == 0x0450);
static_assert(offsetof(UPlayerInfoComponent, SkillCheckDifficultyXP) == 0x0460);
static_assert(offsetof(UPlayerInfoComponent, SkillCheckValueXP) == 0x04B0);
static_assert(offsetof(UPlayerInfoComponent, CreatueXPTypeMap) == 0x04C0);
static_assert(offsetof(UPlayerInfoComponent, EnemyXPLevelDiffScalar) == 0x0510);
static_assert(offsetof(UPlayerInfoComponent, PointOfInterestXPMap) == 0x0520);
static_assert(offsetof(UPlayerInfoComponent, QuestTypeXPMap) == 0x0570);
static_assert(offsetof(UPlayerInfoComponent, FlawTree) == 0x05E0);
static_assert(offsetof(UPlayerInfoComponent, MaxFlawLimit) == 0x05E8);
static_assert(offsetof(UPlayerInfoComponent, FlawPtrs) == 0x0638);
static_assert(offsetof(UPlayerInfoComponent, LoadedFlawCounts) == 0x0648);
static_assert(offsetof(UPlayerInfoComponent, PendingOfferFlaw) == 0x0738);
static_assert(offsetof(UPlayerInfoComponent, Aptitude) == 0x07B8);
static_assert(offsetof(UPlayerInteractionComponent, InteractablesInRange) == 0x0158);
static_assert(offsetof(FLootOnBreakdown, Skill) == 0x0000);
static_assert(offsetof(FLootOnBreakdown, LootTable) == 0x0008);
static_assert(offsetof(UPlayerInventoryComponent, LootOnWeaponBreakdown) == 0x0268);
static_assert(offsetof(UPlayerInventoryComponent, LootOnArmorBreakdown) == 0x0278);
static_assert(offsetof(UPlayerInventoryComponent, LootOnBreakdownChanceStat) == 0x0290);
static_assert(offsetof(UPlayerInventoryComponent, ModFinderFieldRepairStat) == 0x0298);
static_assert(offsetof(UPlayerInventoryComponent, ScavengeMaxItemLevelStat) == 0x02A0);
static_assert(offsetof(FDodgeProperties, RelativeDirection) == 0x0000);
static_assert(offsetof(UPlayerMovementComponent, LookStickRampCurve) == 0x0E98);
static_assert(offsetof(UPlayerMovementComponent, LookStickInputYawCurve) == 0x0F20);
static_assert(offsetof(UPlayerMovementComponent, LookStickInputPitchCurve) == 0x0FA8);
static_assert(offsetof(UPlayerMovementComponent, LookStickPitchAdjustmentCurve) == 0x1030);
static_assert(offsetof(UPlayerMovementComponent, LookStickAccelerationCurve) == 0x10B8);
static_assert(offsetof(UPlayerMovementComponent, DodgeVelocityStat) == 0x1148);
static_assert(offsetof(UPlayerMovementComponent, PlayerMovementParams) == 0x1160);
static_assert(offsetof(UPlayerMovementComponent, FallingDamageSpell) == 0x1168);
static_assert(offsetof(UPlayerMovementComponent, ForceFeedbackFallingDamage) == 0x1170);
static_assert(offsetof(UPlayerMovementComponent, DodgeInputRanges) == 0x11E8);
static_assert(offsetof(UPlayerMovementComponent, DodgeProperties) == 0x1238);
static_assert(offsetof(UPlayerMovementComponent, DefaultDodgeDirection) == 0x12A4);
static_assert(offsetof(UPlayerPresetData, PerkMap) == 0x0040);
static_assert(offsetof(UPlayerStatsWidget, CurrencyValueTextBlock) == 0x0300);
static_assert(offsetof(UPlayerStatsWidget, WeightValueTextBlock) == 0x0308);
static_assert(offsetof(UPlayerStatsWidget, WeaponPartsTextBlock) == 0x0310);
static_assert(offsetof(UPlayerStatsWidget, ArmorPartsTextBlock) == 0x0318);
static_assert(offsetof(UPlayerStatsWidget, NameTextBlock) == 0x0320);
static_assert(offsetof(UPlayerStatsWidget, LevelTextBlock) == 0x0328);
static_assert(offsetof(UPlayFxEventEffect, Fx) == 0x0030);
static_assert(offsetof(UPlayFxEventEffect, TargetMesh) == 0x003D);
static_assert(offsetof(UPlayFxEventEffect, AttachSocketName) == 0x0040);
static_assert(offsetof(APointOfInterest, PointOfInterestData) == 0x02E8);
static_assert(offsetof(APointOfInterest, DiscoveryBounds) == 0x02F0);
static_assert(offsetof(UPointOfInterestData, LocationType) == 0x0038);
static_assert(offsetof(UPointOfInterestData, XPType) == 0x0039);
static_assert(offsetof(UPointOfInterestData, InitialState) == 0x003A);
static_assert(offsetof(UPointOfInterestData, Name) == 0x003C);
static_assert(offsetof(FInterestStateTextures, DiscoveredTexture) == 0x0000);
static_assert(offsetof(FInterestStateTextures, UnknownTexture) == 0x0008);
static_assert(offsetof(FInterestStateTextures, MentionedTexture) == 0x0010);
static_assert(offsetof(UPointOfInterestTextureData, POITextureMap) == 0x0038);
static_assert(offsetof(UPointOfInterestTooltipWidget, PointOfInterestTextBlock) == 0x0300);
static_assert(offsetof(FPONRQuest, QuestName) == 0x0000);
static_assert(offsetof(FPONRQuest, QuestEventIDs) == 0x0010);
static_assert(offsetof(FConversationReference, ID) == 0x0000);
static_assert(offsetof(FConversationPoNR, Filename) == 0x0000);
static_assert(offsetof(FConversationPoNR, Conversation) == 0x0008);
static_assert(offsetof(FConversationPoNR, GlobalVariables) == 0x0018);
static_assert(offsetof(FNodeSet, Conversation) == 0x0000);
static_assert(offsetof(FNodeSet, NodeIDs) == 0x0010);
static_assert(offsetof(FNodeVarConditionalVarReset, ConversationName) == 0x0000);
static_assert(offsetof(FNodeVarConditionalVarReset, Conversation) == 0x0008);
static_assert(offsetof(FNodeVarConditionalVarReset, TestGlobalVar) == 0x0020);
static_assert(offsetof(FNodeVarConditionalVarReset, TargetGlobalVar) == 0x0038);
static_assert(offsetof(UPointOfNoReturnRollbackData, GlobalVariables) == 0x0030);
static_assert(offsetof(UPointOfNoReturnRollbackData, Quests) == 0x0080);
static_assert(offsetof(UPointOfNoReturnRollbackData, ItemsToRemove) == 0x0090);
static_assert(offsetof(UPointOfNoReturnRollbackData, ConversationsToClear) == 0x00A0);
static_assert(offsetof(UPointOfNoReturnRollbackData, ConversationNodesToClear) == 0x00B0);
static_assert(offsetof(UPointOfNoReturnRollbackData, LevelsToReset) == 0x00C0);
static_assert(offsetof(UPointOfNoReturnRollbackData, PlayerShipLevelName) == 0x00D4);
static_assert(offsetof(UPointOfNoReturnRollbackData, EVShipDestination) == 0x00E0);
static_assert(offsetof(UPointOfNoReturnRollbackData, NodeVarConditionalResets) == 0x00F0);
static_assert(offsetof(UPointOfNoReturnRollbackData, DesiredPlayerLocation) == 0x0100);
static_assert(offsetof(UPoseableMeshModVisual, Mesh) == 0x00C0);
static_assert(offsetof(UPoseableMeshModVisual, AttachSocket) == 0x00E8);
static_assert(offsetof(UPoseableMeshModVisual, BonePoseSockets) == 0x00F0);
static_assert(offsetof(UPosedSkeletalMeshModVisual, Mesh) == 0x00C0);
static_assert(offsetof(UPostProcessEventEffect, Material) == 0x0030);
static_assert(offsetof(UPostProcessEventEffect, CurveParams) == 0x0038);
static_assert(offsetof(FPostProcessFX, Material) == 0x0000);
static_assert(offsetof(FPostProcessFX, Particle) == 0x0008);
static_assert(offsetof(FPostProcessFX, Params) == 0x0018);
static_assert(offsetof(FPostProcessFX, DynamicMaterial) == 0x0068);
static_assert(offsetof(FPostProcessFX, ActiveParticleSystem) == 0x0070);
static_assert(offsetof(UPostProcessStatusEffect, PostProcessData) == 0x0188);
static_assert(offsetof(UPreloadAssetList, PreloadAssets) == 0x0038);
static_assert(offsetof(UPresenceData, PresenceTag) == 0x0038);
static_assert(offsetof(UPresenceData, PresenceString) == 0x0048);
static_assert(offsetof(UPreviewCharacterAnimInstance, PreviewCharacter) == 0x04A0);
static_assert(offsetof(UPreviewCharacterAnimInstance, PreviewAnimations) == 0x04A8);
static_assert(offsetof(UPreviewCharacterAnimInstance, DefaultFidgets) == 0x04B0);
static_assert(offsetof(UPreviewCharacterAnimInstance, UIDummyAnimData) == 0x04C0);
static_assert(offsetof(UPreviewCharacterAnimInstance, UISelectionState) == 0x0510);
static_assert(offsetof(UPreviewCharacterAnimInstance, HipOffset) == 0x0518);
static_assert(offsetof(UPreviewCharacterAnimInstance, HipRotation) == 0x052C);
static_assert(offsetof(UPreviewCharacterAnimInstance, SpineCounterRotation) == 0x0538);
static_assert(offsetof(UPreviewCharacterAnimInstance, FigetEntry0) == 0x0548);
static_assert(offsetof(UPreviewCharacterAnimInstance, FigetEntry1) == 0x0558);
static_assert(offsetof(UPreviewWeaponAnimations, Fidgets) == 0x0200);
static_assert(offsetof(AProjectile, ProjectileMovement) == 0x02B8);
static_assert(offsetof(AProjectile, MainCollisionComponent) == 0x02C0);
static_assert(offsetof(AProjectile, DamageCollisionComponent) == 0x02C8);
static_assert(offsetof(AProjectile, VisualRoot) == 0x02D0);
static_assert(offsetof(AProjectile, ImpactEffects) == 0x02F8);
static_assert(offsetof(AProjectile, ImpactDataSet) == 0x0300);
static_assert(offsetof(AProjectile, BounceDataSet) == 0x0308);
static_assert(offsetof(AProjectile, ProjectileDamage) == 0x0310);
static_assert(offsetof(AProjectile, TracerSound) == 0x0440);
static_assert(offsetof(AProjectile, EventEffectState) == 0x0568);
static_assert(offsetof(AProjectile, AmbientNoiseEvent) == 0x0588);
static_assert(offsetof(AProjectileLauncher, ProjectileClass) == 0x0478);
static_assert(offsetof(AProjectileLauncher, ProjectileDamageLevelScaler) == 0x0480);
static_assert(offsetof(AProjectileLauncher, ArrowComponent) == 0x0510);
static_assert(offsetof(AProjectileLauncher, LaunchSocketName) == 0x0518);
static_assert(offsetof(UQuadrupedAnimInstance, PelvisAdjust) == 0x0950);
static_assert(offsetof(UQuadrupedAnimInstance, PelvisRotate) == 0x0968);
static_assert(offsetof(UQuadrupedAnimInstance, LocomotionTurnInPlace) == 0x09B8);
static_assert(offsetof(UQuadrupedAnimInstance, CombatTurnInPlace) == 0x09C8);
static_assert(offsetof(UQuestAddendumWidget, AddendumTextBlock) == 0x0300);
static_assert(offsetof(UQuestDataAsset, SortingData) == 0x0088);
static_assert(offsetof(UQuestJournalWidget, ButtonGroup) == 0x0358);
static_assert(offsetof(UQuestJournalWidget, OptionPresenter) == 0x0360);
static_assert(offsetof(UQuestJournalWidget, QuestNameTextBlock) == 0x0368);
static_assert(offsetof(UQuestJournalWidget, QuestResolutionTextBlock) == 0x0370);
static_assert(offsetof(UQuestJournalWidget, QuestListScrollBox) == 0x0378);
static_assert(offsetof(UQuestJournalWidget, QuestDescriptionScrollBox) == 0x0380);
static_assert(offsetof(UQuestJournalWidget, FlavorTextWidget) == 0x0388);
static_assert(offsetof(UQuestJournalWidget, QuestListVerticalBox) == 0x0390);
static_assert(offsetof(UQuestJournalWidget, CompletedQuestList) == 0x0398);
static_assert(offsetof(UQuestJournalWidget, BotchedQuestList) == 0x03A0);
static_assert(offsetof(UQuestJournalWidget, DLCPrefixTextBlock) == 0x03A8);
static_assert(offsetof(UQuestJournalWidget, QuestDescriptionTextBlock) == 0x03B0);
static_assert(offsetof(UQuestJournalWidget, DLCLogoImage) == 0x03B8);
static_assert(offsetof(UQuestJournalWidget, ObjectiveList) == 0x03C0);
static_assert(offsetof(UQuestJournalWidget, QuestTypeImage) == 0x03C8);
static_assert(offsetof(UQuestJournalWidget, InputLabelGroup) == 0x03D0);
static_assert(offsetof(UQuestJournalWidget, InvisibleButton) == 0x03D8);
static_assert(offsetof(UQuestJournalWidget, MakeActiveDescription_Gamepad) == 0x03E0);
static_assert(offsetof(UQuestJournalWidget, MakeActiveDescription_Keyboard) == 0x0418);
static_assert(offsetof(UQuestJournalWidget, QuestListWidgetClass) == 0x0450);
static_assert(offsetof(UQuestJournalWidget, INX1LogoImage) == 0x0458);
static_assert(offsetof(UQuestJournalWidget, INX2LogoImage) == 0x0460);
static_assert(offsetof(UQuestJournalWidget, SortingData) == 0x0480);
static_assert(offsetof(UQuestListEntryWidget, BaseGameCritPathTexture) == 0x02B8);
static_assert(offsetof(UQuestListEntryWidget, INX01CritPathTexture) == 0x02C0);
static_assert(offsetof(UQuestListEntryWidget, INX01NonCritPathTexture) == 0x02C8);
static_assert(offsetof(UQuestListEntryWidget, INX02CritPathTexture) == 0x02D0);
static_assert(offsetof(UQuestListEntryWidget, INX02NonCritPathTexture) == 0x02D8);
static_assert(offsetof(UQuestListEntryWidget, CritPathImage) == 0x02E0);
static_assert(offsetof(UQuestLogComboBoxWidget, ComboBox) == 0x0278);
static_assert(offsetof(UQuestLogEntryWidget, ContentBorder) == 0x0300);
static_assert(offsetof(UQuestLogEntryWidget, QuestStateTextBlock) == 0x0308);
static_assert(offsetof(UQuestLogEntryWidget, QuestTitleTextBlock) == 0x0310);
static_assert(offsetof(UQuestLogEntryWidget, ObjectiveVerticalBox) == 0x0318);
static_assert(offsetof(UQuestLogEntryWidget, ObjectiveClass) == 0x0320);
static_assert(offsetof(UQuestLogWidget, AnimationBorder) == 0x0300);
static_assert(offsetof(UQuestLogWidget, QuestBacking) == 0x0308);
static_assert(offsetof(UQuestLogWidget, ContentSizeBox) == 0x0310);
static_assert(offsetof(UQuestLogWidget, QuestEntry) == 0x0318);
static_assert(offsetof(UQuestLogWidget, MainInvalidationBox) == 0x0320);
static_assert(offsetof(UQuestManager, LoadedQuests) == 0x0158);
static_assert(offsetof(UQuestObjectiveEntryWidget, ContentContainer) == 0x0300);
static_assert(offsetof(UQuestObjectiveEntryWidget, ObjectiveStatusOverlay) == 0x0308);
static_assert(offsetof(UQuestObjectiveEntryWidget, ObjectiveCompletedImage) == 0x0310);
static_assert(offsetof(UQuestObjectiveEntryWidget, TitleTextBlock) == 0x0318);
static_assert(offsetof(UQuestObjectiveTitleWidget, ObjectiveTitleTextBlock) == 0x0278);
static_assert(offsetof(UQuestObjectiveTitleWidget, QuestObjective) == 0x0280);
static_assert(offsetof(UQuestObjectiveTitleWidget, ObjectiveStateImage) == 0x0288);
static_assert(offsetof(UQuestObjectiveTitleWidget, CompletedObjective) == 0x0290);
static_assert(offsetof(UQuestObjectiveTitleWidget, FailedObjective) == 0x0298);
static_assert(offsetof(UQuestObjectiveWidget, ObjectiveTextBlock) == 0x0278);
static_assert(offsetof(UQuestObjectiveWidget, AddendumList) == 0x0280);
static_assert(offsetof(UQuestObjectiveWidget, ObjectiveAddendum) == 0x0288);
static_assert(offsetof(FQuestSubTypeGroup, AcceptedSubTypes) == 0x0000);
static_assert(offsetof(UQuestSortingData, QuestSortingOrder) == 0x0038);
static_assert(offsetof(UQuestSortingData, SimplifiedQuestSortingOrder) == 0x0050);
static_assert(offsetof(UQuestSortingData, QuestSubgroups) == 0x0060);
static_assert(offsetof(UQuestSortingData, QuestSupergroups) == 0x00B0);
static_assert(offsetof(UQuestSortingData, QuestContentTypeStringIDs) == 0x0100);
static_assert(offsetof(UQuestSortingData, QuestTypeStringIDs) == 0x0150);
static_assert(offsetof(UQuestSortingData, QuestLocationStringIDs) == 0x01A0);
static_assert(offsetof(UQuestSortingData, QuestDifficultyStringIDs) == 0x01F0);
static_assert(offsetof(UQuestSortingData, QuestDifficultyRanges) == 0x0240);
static_assert(offsetof(UQuestSortingData, MostRecentQuestListTitle) == 0x0290);
static_assert(offsetof(UQuestSortingData, AlphabeticalQuestListTitle) == 0x0298);
static_assert(offsetof(UQuickMeleeData, WeaponEvent) == 0x0038);
static_assert(offsetof(UQuickMeleeData, StatusEffect) == 0x0048);
static_assert(offsetof(UQuickMeleeData, DamageType) == 0x0058);
static_assert(offsetof(UQuickMeleeData, ImpactDataSet) == 0x0060);
static_assert(offsetof(URadialBackgroundSectionWidget, BackgroundImage) == 0x0300);
static_assert(offsetof(URadialBackgroundSectionWidget, HighlightImage) == 0x0308);
static_assert(offsetof(URadialBackgroundSectionWidget, EquippedImage) == 0x0310);
static_assert(offsetof(URadialBackgroundSectionWidget, OutlineImage) == 0x0318);
static_assert(offsetof(URadialContainerWidget, TextRadialSectionClass) == 0x0300);
static_assert(offsetof(URadialContainerWidget, ImageRadialSectionClass) == 0x0308);
static_assert(offsetof(URadialContainerWidget, SectionsCanvas) == 0x0310);
static_assert(offsetof(URadialContainerWidget, Radial) == 0x0318);
static_assert(offsetof(URadialContextMenuWidget, RadialOverlay) == 0x0308);
static_assert(offsetof(URadialContextMenuWidget, SectionTextBorder) == 0x0310);
static_assert(offsetof(URadialContextMenuWidget, SectionText) == 0x0318);
static_assert(offsetof(URadialContextMenuWidget, RadialContainerClass) == 0x0320);
static_assert(offsetof(URadialContextMenuWidget, RadialBorder) == 0x0328);
static_assert(offsetof(URadialWidget, DynamicMaterial) == 0x03B8);
static_assert(offsetof(URadialWidget, ContentOverlay) == 0x03C0);
static_assert(offsetof(URadialWidget, ContentSlot) == 0x03C8);
static_assert(offsetof(URadialWidget, OrientatorCanvas) == 0x03D0);
static_assert(offsetof(URadialWidget, MaterialImage) == 0x03D8);
static_assert(offsetof(URadialWidget, OrientatorImage) == 0x03E0);
static_assert(offsetof(URadialWidget, ConfirmSectionSound) == 0x03E8);
static_assert(offsetof(URadialWidget, SelectSectionSound) == 0x03F0);
static_assert(offsetof(URagdollDisable, OverrideDirection) == 0x01AC);
static_assert(offsetof(URagdollDisable, RandomVariance) == 0x01B8);
static_assert(offsetof(URagdollDisable, MinVarianceClamp) == 0x01C4);
static_assert(offsetof(FRandomActionSetPair, Action) == 0x0000);
static_assert(offsetof(URandomActionSet, PotentialActions) == 0x0038);
static_assert(offsetof(URandomActionSet, ChosenAction) == 0x0048);
static_assert(offsetof(FWeightedEffect, Effect) == 0x0000);
static_assert(offsetof(URandomEventEffects, Effects) == 0x0030);
static_assert(offsetof(FQueryPair, EQSRequest) == 0x0000);
static_assert(offsetof(URandomQuerySet, QueryCostPairs) == 0x0038);
static_assert(offsetof(FPriorityCreatureSpawn, CreaturesTypeTags) == 0x0000);
static_assert(offsetof(FPriorityCreatureSpawn, CreatureRoleTags) == 0x0020);
static_assert(offsetof(ARandomSpawnNode, PriorityCreatureSpawns) == 0x0538);
static_assert(offsetof(FHitReaction, StatusEffect) == 0x0000);
static_assert(offsetof(UReactionComponent, HitReactions) == 0x00E8);
static_assert(offsetof(UReactionComponent, PlayerHitReactionCameraShake) == 0x0138);
static_assert(offsetof(UReactionComponent, DebugCameraShake) == 0x0140);
static_assert(offsetof(UReactionComponent, CameraShakeAngleCurve) == 0x0190);
static_assert(offsetof(AReactiveEnvironmentActor, Mesh) == 0x02B8);
static_assert(offsetof(URecoilData, RandomOffset) == 0x0038);
static_assert(offsetof(URecoilData, YawOffsetCurve) == 0x0048);
static_assert(offsetof(URecoilData, PitchOffsetCurve) == 0x00D0);
static_assert(offsetof(URedirectorMap, RedirectorMap) == 0x0038);
static_assert(offsetof(URenderThreadAnimationWidget, AnimationImage) == 0x0278);
static_assert(offsetof(URepairUpgradeInfoWidget, ItemNameTextBlock) == 0x0300);
static_assert(offsetof(URepairUpgradeInfoWidget, RepairStatusHorizontalBox) == 0x0308);
static_assert(offsetof(URepairUpgradeInfoWidget, CurrentRepairStatusSizeBox) == 0x0310);
static_assert(offsetof(URepairUpgradeInfoWidget, CurrentRepairStatusBar) == 0x0318);
static_assert(offsetof(URepairUpgradeInfoWidget, CurrentRepairPristineStatusSizeBox) == 0x0320);
static_assert(offsetof(URepairUpgradeInfoWidget, CurrentRepairPristineStatusBar) == 0x0328);
static_assert(offsetof(URepairUpgradeInfoWidget, CurrentRepairStatusTextBlock) == 0x0330);
static_assert(offsetof(URepairUpgradeInfoWidget, RepairedStatusSizeBox) == 0x0338);
static_assert(offsetof(URepairUpgradeInfoWidget, RepairedStatusBar) == 0x0340);
static_assert(offsetof(URepairUpgradeInfoWidget, RepairedPristineSizeBox) == 0x0348);
static_assert(offsetof(URepairUpgradeInfoWidget, RepairedPristineStatusBar) == 0x0350);
static_assert(offsetof(URepairUpgradeInfoWidget, RepairedPristineStatusTextBlock) == 0x0358);
static_assert(offsetof(URepairUpgradeInfoWidget, StatChangeName) == 0x0360);
static_assert(offsetof(URepairUpgradeInfoWidget, PreItemStat) == 0x0368);
static_assert(offsetof(URepairUpgradeInfoWidget, PostItemStat) == 0x0370);
static_assert(offsetof(UReputationData, RankType) == 0x0038);
static_assert(offsetof(UReputationData, Name) == 0x0048);
static_assert(offsetof(UReputationData, Reaction) == 0x0050);
static_assert(offsetof(UReputationDetailsWidget, NameTextBlock) == 0x0300);
static_assert(offsetof(UReputationDetailsWidget, NegativeProgress) == 0x0308);
static_assert(offsetof(UReputationDetailsWidget, PositiveProgress) == 0x0310);
static_assert(offsetof(UReputationDetailsWidget, StatusTextBlock) == 0x0318);
static_assert(offsetof(UReputationDetailsWidget, StatusBodyTextBlock) == 0x0320);
static_assert(offsetof(UReputationDetailsWidget, DescriptionBodyTextBlock) == 0x0328);
static_assert(offsetof(UReputationDetailsWidget, EffectsBodyTextBlock) == 0x0330);
static_assert(offsetof(UReputationDetailsWidget, VendorPriceTextBlock) == 0x0338);
static_assert(offsetof(UReputationDetailsWidget, BackgroundPanelWidget) == 0x0340);
static_assert(offsetof(UReputationEntryWidget, Button) == 0x0300);
static_assert(offsetof(UReputationEntryWidget, NameTextBlock) == 0x0308);
static_assert(offsetof(UReputationEntryWidget, StatusTextBlock) == 0x0310);
static_assert(offsetof(UReputationEntryWidget, Data) == 0x0318);
static_assert(offsetof(UReputationListWidget, Name) == 0x0300);
static_assert(offsetof(UReputationListWidget, NameTextBlock) == 0x0308);
static_assert(offsetof(UReputationListWidget, EntryContainer) == 0x0310);
static_assert(offsetof(UReputationProgressWidget, ProgressCategory) == 0x0278);
static_assert(offsetof(UReputationProgressWidget, ProgressBar) == 0x0280);
static_assert(offsetof(UReputationProgressWidget, NameTextBlock) == 0x0288);
static_assert(offsetof(UReputationProgressWidget, ValueTextBlock) == 0x0290);
static_assert(offsetof(UReputationSummaryWidget, EntryClass) == 0x0300);
static_assert(offsetof(UReputationSummaryWidget, PrimaryList) == 0x0308);
static_assert(offsetof(UReputationSummaryWidget, RegionalList) == 0x0310);
static_assert(offsetof(UReputationSummaryWidget, Details) == 0x0318);
static_assert(offsetof(UReputationSummaryWidget, InputLabelGroup) == 0x0320);
static_assert(offsetof(UReputationSummaryWidget, FlavorTextWidget) == 0x0328);
static_assert(offsetof(UReputationSummaryWidget, ButtonGroup) == 0x0330);
static_assert(offsetof(UResetSpellCooldownStatusEffect, Spell) == 0x0188);
static_assert(offsetof(ARespecMachine, InteractableComponent) == 0x02C0);
static_assert(offsetof(ARestrictedArea, IDComponent) == 0x02B8);
static_assert(offsetof(ARestrictedArea, Disguise) == 0x02C0);
static_assert(offsetof(ARestrictedArea, EnabledGlobalVariableExpression) == 0x02C8);
static_assert(offsetof(ARestrictedArea, Teams) == 0x0330);
static_assert(offsetof(ARestrictedAreaVolume, RestrictedArea) == 0x0310);
static_assert(offsetof(FCrosshairVisuals, Left) == 0x0000);
static_assert(offsetof(FCrosshairVisuals, Top) == 0x0008);
static_assert(offsetof(FCrosshairVisuals, Center) == 0x0010);
static_assert(offsetof(FCrosshairVisuals, Minimal) == 0x0018);
static_assert(offsetof(FCrosshairVisuals, StaticImage) == 0x0020);
static_assert(offsetof(FCrosshairVisuals, StaticImagePositionOffset) == 0x0028);
static_assert(offsetof(FCrosshairStates, Default) == 0x0000);
static_assert(offsetof(FCrosshairStates, Hostile) == 0x0030);
static_assert(offsetof(FCrosshairStates, Neutral) == 0x0060);
static_assert(offsetof(UReticleVisualsDataAsset, States) == 0x0038);
static_assert(offsetof(UReticleWidget, RootCanvas) == 0x0300);
static_assert(offsetof(UReticleWidget, ReticuleInteract) == 0x0308);
static_assert(offsetof(UReticleWidget, TTDRotators) == 0x0310);
static_assert(offsetof(UReticleWidget, Crosshair) == 0x0318);
static_assert(offsetof(UReticleWidget, CauseDamageWidget) == 0x0320);
static_assert(offsetof(UReticleWidget, TTDOverlay) == 0x0328);
static_assert(offsetof(UReticleWidget, TTDDTOverlay) == 0x0330);
static_assert(offsetof(UReticleWidget, DTImageOverlay) == 0x0338);
static_assert(offsetof(UReticleWidget, DTImage) == 0x0340);
static_assert(offsetof(UReticleWidget, DTTextBlock) == 0x0348);
static_assert(offsetof(UReticleWidget, StealthOverlay) == 0x0350);
static_assert(offsetof(UReticleWidget, CompanionCommandComponent) == 0x0358);
static_assert(offsetof(UReticleWidget, MedKitComponent) == 0x0360);
static_assert(offsetof(URpgStat, StatClampingMethod) == 0x0038);
static_assert(offsetof(URpgStat, CustomClampingData) == 0x003C);
static_assert(offsetof(URpgStat, CombineStats) == 0x0050);
static_assert(offsetof(URpgStat, CombineChildrenStats) == 0x0060);
static_assert(offsetof(URpgStat, Format) == 0x0070);
static_assert(offsetof(URpgStatComponent, InternalRpgStatCollection) == 0x00F8);
static_assert(offsetof(URpgStatComponent, OverrideClampingData) == 0x0170);
static_assert(offsetof(FCachedGameState, PreloadedObjects) == 0x0020);
static_assert(offsetof(FCachedGameState, PendingDeferredSpawns) == 0x00A0);
static_assert(offsetof(FCachedGameState, DeferredSpawnActorStateDataOffsets) == 0x00B0);
static_assert(offsetof(FCachedGameState, DeferredSpawnsByGUID) == 0x0100);
static_assert(offsetof(USaveGameManager, CachedGameStates) == 0x03A0);
static_assert(offsetof(USaveGameManager, AutosaveIconFilePath) == 0x0450);
static_assert(offsetof(USaveLoadDetailWidget, StringBetweenPlayerNameAndLevel) == 0x0278);
static_assert(offsetof(USaveLoadDetailWidget, Button) == 0x0288);
static_assert(offsetof(USaveLoadDetailWidget, SaveScreenshot) == 0x0290);
static_assert(offsetof(USaveLoadDetailWidget, InvalidSave) == 0x0298);
static_assert(offsetof(USaveLoadDetailWidget, PONRSave) == 0x02A0);
static_assert(offsetof(USaveLoadDetailWidget, SaveTypeText) == 0x02A8);
static_assert(offsetof(USaveLoadDetailWidget, CharacterInfoText) == 0x02B0);
static_assert(offsetof(USaveLoadDetailWidget, CurrentQuestText) == 0x02B8);
static_assert(offsetof(USaveLoadDetailWidget, DifficultyText) == 0x02C0);
static_assert(offsetof(USaveLoadDetailWidget, SaveDateText) == 0x02C8);
static_assert(offsetof(USaveLoadDetailWidget, PlaytimeText) == 0x02D0);
static_assert(offsetof(USaveLoadMenuWidget, InvisibleButton) == 0x0318);
static_assert(offsetof(USaveLoadMenuWidget, SaveGameBlocker) == 0x0320);
static_assert(offsetof(USaveLoadMenuWidget, InterfaceTitleText) == 0x0328);
static_assert(offsetof(USaveLoadMenuWidget, SaveGamesText) == 0x0330);
static_assert(offsetof(USaveLoadMenuWidget, ContentScrollBox) == 0x0338);
static_assert(offsetof(USaveLoadMenuWidget, ContentVerticalBox) == 0x0340);
static_assert(offsetof(USaveLoadMenuWidget, InputLabelGroup) == 0x0348);
static_assert(offsetof(USaveLoadMenuWidget, FlavorTextWidget) == 0x0350);
static_assert(offsetof(USaveLoadMenuWidget, Background) == 0x0358);
static_assert(offsetof(USaveLoadMenuWidget, CompatWidget) == 0x0360);
static_assert(offsetof(USaveLoadMenuWidget, CompatCurVersion) == 0x0368);
static_assert(offsetof(USaveLoadMenuWidget, CompatSaveVersion) == 0x0370);
static_assert(offsetof(USaveLoadMenuWidget, CompatDLC1Status) == 0x0378);
static_assert(offsetof(USaveLoadMenuWidget, CompatDLC2Status) == 0x0380);
static_assert(offsetof(USaveLoadMenuWidget, SaveLoadDetail) == 0x0388);
static_assert(offsetof(USaveLoadMenuWidget, NewSaveClass) == 0x0390);
static_assert(offsetof(USaveLoadMenuWidget, PONRSaveTexture) == 0x0398);
static_assert(offsetof(USavingWidget, MainInvalidationBox) == 0x0308);
static_assert(offsetof(UScalableImage, MainSizeBox) == 0x0300);
static_assert(offsetof(UScalableImage, MainImage) == 0x0308);
static_assert(offsetof(UScalableImage, OriginalSize) == 0x0310);
static_assert(offsetof(UScalableImage, MaximumSize) == 0x0318);
static_assert(offsetof(UScalableImage, DesiredTexture) == 0x0320);
static_assert(offsetof(FScaledActorEntry, ActorClass) == 0x0008);
static_assert(offsetof(UScaledActorTable, PossibleActors) == 0x0038);
static_assert(offsetof(AScaledSpawnNode, ScaledActorTable) == 0x0538);
static_assert(offsetof(UScaleStatusEffect, ScaleStat) == 0x0190);
static_assert(offsetof(UScalingData, HealthScalars) == 0x0038);
static_assert(offsetof(UScalingData, DamageScalars) == 0x0048);
static_assert(offsetof(UScalingData, ArmorScalars) == 0x0058);
static_assert(offsetof(AScalingOverrideBox, BoxShape) == 0x02C8);
static_assert(offsetof(UScannerFlavorTextData, FlavorStrings) == 0x0038);
static_assert(offsetof(UScar, ScarsNormalMap) == 0x0038);
static_assert(offsetof(UScopeData, PostProcessMaterial) == 0x0038);
static_assert(offsetof(UScopeData, ReticleVisuals) == 0x0040);
static_assert(offsetof(UScopeData, TransitionInFadeCurve) == 0x0060);
static_assert(offsetof(UScopeData, TransitionOutFadeCurve) == 0x00E8);
static_assert(offsetof(UClearBehaviorStatesOfTypeRequestData, BehaviorState) == 0x0068);
static_assert(offsetof(URequestTargetRequestData, TargetRequestType) == 0x0068);
static_assert(offsetof(USetWeaponPreferenceRequestData, WeaponPreference) == 0x0068);
static_assert(offsetof(USetGlobalValueEvent, GlobalVariable) == 0x0030);
static_assert(offsetof(USetGlobalIfGlobalEvent, GlobalVariable) == 0x0030);
static_assert(offsetof(USetGlobalIfGlobalEvent, ConditionGlobalVariable) == 0x0048);
static_assert(offsetof(UIncrementGlobalValueEvent, GlobalVariable) == 0x0030);
static_assert(offsetof(URandomizeGlobalValueEvent, GlobalVariable) == 0x0030);
static_assert(offsetof(UStartQuestEvent, Quest) == 0x0030);
static_assert(offsetof(UTriggerQuestAddendumEvent, Quest) == 0x0030);
static_assert(offsetof(UAdvanceQuestEvent, Quest) == 0x0030);
static_assert(offsetof(URemoteEvent, EventName) == 0x0030);
static_assert(offsetof(UScriptManager, Scripts) == 0x0030);
static_assert(offsetof(UScriptManager, Conditionals) == 0x0038);
static_assert(offsetof(USearchBehaviorStateInfo, QueuedDecisionTreeRequest) == 0x0120);
static_assert(offsetof(USelectedNotificationWidget, TextBlock) == 0x0300);
static_assert(offsetof(FHUDSetting, CompassVisibility) == 0x0000);
static_assert(offsetof(FHUDSetting, DialogSkillMode) == 0x0001);
static_assert(offsetof(FHUDSetting, EnemyHealthBarMode) == 0x000F);
static_assert(offsetof(FHUDSetting, ReticleMode) == 0x0010);
static_assert(offsetof(FHUDSetting, QuestUpdateMode) == 0x0012);
static_assert(offsetof(FHUDSetting, StatusBarMode) == 0x0014);
static_assert(offsetof(FHUDSetting, PlayerStatusEffectTextMode) == 0x0016);
static_assert(offsetof(FHUDSetting, CompanionAbilityUI) == 0x0017);
static_assert(offsetof(FHUDSetting, CompanionAbilityBindings) == 0x0018);
static_assert(offsetof(FHUDSetting, HeldWeaponDisplay) == 0x0019);
static_assert(offsetof(FHUDSetting, HeldWeaponTextDisplay) == 0x001A);
static_assert(offsetof(FHUDSetting, AreaNameMode) == 0x001B);
static_assert(offsetof(FHUDSetting, DirectionalDamageIndicatorMode) == 0x001C);
static_assert(offsetof(FHUDSetting, FPSIndicator) == 0x001D);
static_assert(offsetof(FHUDSetting, InhalerMode) == 0x001F);
static_assert(offsetof(FHUDSetting, AbilityControlMode) == 0x0020);
static_assert(offsetof(FHUDSetting, CompanionStatusMode) == 0x0021);
static_assert(offsetof(FHUDSetting, CompanionAbilityPassiveCooldowns) == 0x0022);
static_assert(offsetof(FHUDSetting, CompanionAbilityPassiveNotifications) == 0x0023);
static_assert(offsetof(FHUDSetting, TTDReticleMeterMode) == 0x0028);
static_assert(offsetof(FHUDSetting, WeaponSelectMode) == 0x002C);
static_assert(offsetof(FHUDSetting, WeaponSelectAxisMode) == 0x002D);
static_assert(offsetof(USettingsHUDMode, MinimalSettings) == 0x0038);
static_assert(offsetof(USettingsHUDMode, DefaultSettings) == 0x006C);
static_assert(offsetof(USettingsHUDMode, MaximumSettings) == 0x00A0);
static_assert(offsetof(USettingsHUDMode, HudSettings) == 0x00D8);
static_assert(offsetof(USettingsMenuButtonSlotWidget, ChildButton) == 0x0310);
static_assert(offsetof(USettingsMenuButtonSlotWidget, ButtonTextBlock) == 0x0318);
static_assert(offsetof(USettingsMenuButtonSlotWidget, SettingsMenu) == 0x0320);
static_assert(offsetof(USettingsMenuCheckBoxWidget, CheckBox) == 0x0300);
static_assert(offsetof(USettingsMenuCheckBoxWidget, UserSetting) == 0x0308);
static_assert(offsetof(USettingsMenuCheckBoxWidget, SettingsMenu) == 0x0310);
static_assert(offsetof(USettingsMenuComboBoxWidget, ComboBox) == 0x0278);
static_assert(offsetof(USettingsMenuComboBoxWidget, UserSetting) == 0x0280);
static_assert(offsetof(USettingsMenuComboBoxWidget, SettingsMenu) == 0x0288);
static_assert(offsetof(FSettingPlatformStringContainer, Name) == 0x0000);
static_assert(offsetof(FSettingPlatformStringContainer, Description) == 0x0008);
static_assert(offsetof(FSettingDescription, Name) == 0x0000);
static_assert(offsetof(FSettingDescription, Description) == 0x0008);
static_assert(offsetof(FSettingDescription, Subcategory) == 0x0010);
static_assert(offsetof(FSettingDescription, PlatformOverrides) == 0x0018);
static_assert(offsetof(FSubcategoryDescription, Name) == 0x0000);
static_assert(offsetof(FSubcategoryDescription, Description) == 0x0008);
static_assert(offsetof(FSubcategoryDescription, PlatformOverrides) == 0x0010);
static_assert(offsetof(FGamepadLayout, Name) == 0x0000);
static_assert(offsetof(FGamepadLayout, Description) == 0x0008);
static_assert(offsetof(FGamepadLayout, PlatformOverrides) == 0x0010);
static_assert(offsetof(FGamepadLayout, ButtonNames) == 0x0060);
static_assert(offsetof(FDynamicOverrides, AutoSprintName) == 0x0000);
static_assert(offsetof(USettingsMenuData, SettingMap) == 0x0038);
static_assert(offsetof(USettingsMenuData, SubcategoryMap) == 0x0088);
static_assert(offsetof(USettingsMenuData, GamepadLayouts) == 0x00D8);
static_assert(offsetof(USettingsMenuData, DynamicOverrides) == 0x00E8);
static_assert(offsetof(USettingsMenuInputKeySelector, NoKeySpecifiedText) == 0x0320);
static_assert(offsetof(USettingsMenuInputKeySelector, KeyInputTextBlock) == 0x0330);
static_assert(offsetof(USettingsMenuInputKeySelector, InputIcon) == 0x0338);
static_assert(offsetof(USettingsMenuInputKeySelector, Button) == 0x0340);
static_assert(offsetof(USettingsMenuInputKeySelector, KeybindDialogBoxClass) == 0x0348);
static_assert(offsetof(USettingsMenuKeyRebindWidget, SettingName) == 0x0300);
static_assert(offsetof(USettingsMenuKeyRebindWidget, PrimaryKeySelector) == 0x0308);
static_assert(offsetof(USettingsMenuKeyRebindWidget, SecondaryKeySelector) == 0x0310);
static_assert(offsetof(USettingsMenuKeyRebindWidget, GameplayButton) == 0x0318);
static_assert(offsetof(USettingsMenuKeyRebindWidget, UserSetting) == 0x0330);
static_assert(offsetof(USettingsMenuKeyRebindWidget, SettingsMenu) == 0x0338);
static_assert(offsetof(USettingsMenuKeyRebindWidget, ParentWidget) == 0x0340);
static_assert(offsetof(USettingsMenuKeyRebindWidget, SettingNameString) == 0x0348);
static_assert(offsetof(USettingsMenuOptionPresenterWdgt, ButtonContents) == 0x0300);
static_assert(offsetof(USettingsMenuOptionPresenterWdgt, OptionPresenter) == 0x0308);
static_assert(offsetof(USettingsMenuOptionPresenterWdgt, UserSetting) == 0x0310);
static_assert(offsetof(USettingsMenuOptionPresenterWdgt, SettingsMenu) == 0x0318);
static_assert(offsetof(USettingsMenuSliderWidget, Slider) == 0x0300);
static_assert(offsetof(USettingsMenuSliderWidget, ValueTextBlock) == 0x0308);
static_assert(offsetof(USettingsMenuSliderWidget, UserSetting) == 0x0310);
static_assert(offsetof(USettingsMenuSliderWidget, SettingsMenu) == 0x0318);
static_assert(offsetof(USettingsMenuSliderWidget, DifficultySelect) == 0x0320);
static_assert(offsetof(USettingsMenuSliderWidget, ParentMenu) == 0x0328);
static_assert(offsetof(USettingsMenuSlotWidget, GamepadButton) == 0x0320);
static_assert(offsetof(USettingsMenuSlotWidget, SettingName) == 0x0328);
static_assert(offsetof(USettingsMenuSlotWidget, NamedSlot) == 0x0330);
static_assert(offsetof(USettingsMenuSlotWidget, OptionTypeSizeBox) == 0x0338);
static_assert(offsetof(USettingsMenuSlotWidget, OptionNameSizeBox) == 0x0340);
static_assert(offsetof(USettingsMenuSubcategoryWidget, ApplyButton) == 0x0278);
static_assert(offsetof(USettingsMenuSubcategoryWidget, CategoryNameText) == 0x0280);
static_assert(offsetof(USettingsMenuSubcategoryWidget, SlotsVerticalBox) == 0x0288);
static_assert(offsetof(USettingsMenuSubcategoryWidget, SubcategorySlotClass) == 0x0290);
static_assert(offsetof(UUserSetting, Control) == 0x0050);
static_assert(offsetof(USettingsMenuWidget, SubcategorySlotClass) == 0x0318);
static_assert(offsetof(USettingsMenuWidget, SubcategoryClass) == 0x0320);
static_assert(offsetof(USettingsMenuWidget, SliderClass) == 0x0328);
static_assert(offsetof(USettingsMenuWidget, CheckBoxClass) == 0x0330);
static_assert(offsetof(USettingsMenuWidget, OptionPresenterClass) == 0x0338);
static_assert(offsetof(USettingsMenuWidget, ButtonClass) == 0x0340);
static_assert(offsetof(USettingsMenuWidget, KeyBindInterfaceClass) == 0x0348);
static_assert(offsetof(USettingsMenuWidget, HUDSettingsAsset) == 0x0350);
static_assert(offsetof(USettingsMenuWidget, MenuScrollBox) == 0x0368);
static_assert(offsetof(USettingsMenuWidget, DescriptionScrollBox) == 0x0370);
static_assert(offsetof(USettingsMenuWidget, Category0VerticalBox) == 0x0378);
static_assert(offsetof(USettingsMenuWidget, Category1VerticalBox) == 0x0380);
static_assert(offsetof(USettingsMenuWidget, Category2VerticalBox) == 0x0388);
static_assert(offsetof(USettingsMenuWidget, Category3VerticalBox) == 0x0390);
static_assert(offsetof(USettingsMenuWidget, Category4VerticalBox) == 0x0398);
static_assert(offsetof(USettingsMenuWidget, Category5VerticalBox) == 0x03A0);
static_assert(offsetof(USettingsMenuWidget, DisplaySubcategory) == 0x03D8);
static_assert(offsetof(USettingsMenuWidget, MenuSwitcher) == 0x03E0);
static_assert(offsetof(USettingsMenuWidget, PCButtonsHorizontalBox) == 0x03E8);
static_assert(offsetof(USettingsMenuWidget, InputLabelsHorizontalBox) == 0x03F0);
static_assert(offsetof(USettingsMenuWidget, DescriptionTextBlock) == 0x03F8);
static_assert(offsetof(USettingsMenuWidget, NameTextBlock) == 0x0400);
static_assert(offsetof(USettingsMenuWidget, Background) == 0x0408);
static_assert(offsetof(USettingsMenuWidget, DescriptionImage) == 0x0410);
static_assert(offsetof(USettingsMenuWidget, DescriptionBackgroundPanel) == 0x0418);
static_assert(offsetof(USettingsMenuWidget, InputLabelGroup) == 0x0420);
static_assert(offsetof(USettingsMenuWidget, DefaultsButton) == 0x0428);
static_assert(offsetof(USettingsMenuWidget, ApplyButton) == 0x0430);
static_assert(offsetof(USettingsMenuWidget, UserSettings) == 0x0438);
static_assert(offsetof(USettingsMenuWidget, DisplayUserSettings) == 0x0448);
static_assert(offsetof(USettingsMenuWidget, NavBarCategories) == 0x0458);
static_assert(offsetof(USettingsMenuWidget, SettingsData) == 0x04A8);
static_assert(offsetof(USettingsMenuWidget, NavigationBar) == 0x04B0);
static_assert(offsetof(UBoxShape, BoxShape) == 0x0030);
static_assert(offsetof(USphereShape, SphereShape) == 0x0030);
static_assert(offsetof(UCapsuleShape, CapsuleShape) == 0x0030);
static_assert(offsetof(AShipDoor, CompanionSelectionClass) == 0x02F0);
static_assert(offsetof(AShipDoor, InteractableComponent) == 0x02F8);
static_assert(offsetof(AShipDoor, TravelSound) == 0x0300);
static_assert(offsetof(AShipDoor, BeaconComponent) == 0x0308);
static_assert(offsetof(AShipDoor, ObsidianID) == 0x0310);
static_assert(offsetof(AShipFastTravelPoint, ShipDestinationData) == 0x02E8);
static_assert(offsetof(AShipLocation, InteractableComponent) == 0x02F0);
static_assert(offsetof(AShipLocation, BeaconComponent) == 0x02F8);
static_assert(offsetof(AShipLocation, NavModifierComponent) == 0x0300);
static_assert(offsetof(AShipLocation, ObsidianID) == 0x0308);
static_assert(offsetof(AShipLocation, ShipDestinationTravelTrigger) == 0x0310);
static_assert(offsetof(AShipLocation, TravelSound) == 0x0318);
static_assert(offsetof(AShipLocation, ShipLocationData) == 0x0320);
static_assert(offsetof(AShipTerminal, SystemMapClass) == 0x02F0);
static_assert(offsetof(AShipTerminal, SystemMapAmbientMusic) == 0x02F8);
static_assert(offsetof(AShipTerminal, InteractableComponent) == 0x0310);
static_assert(offsetof(AShipTerminal, BeaconComponent) == 0x0318);
static_assert(offsetof(AShipTerminal, ObsidianID) == 0x0320);
static_assert(offsetof(AShipTerminal, SystemMapData) == 0x0328);
static_assert(offsetof(FMapShipDestinations, Destinations) == 0x0000);
static_assert(offsetof(UShipTravelData, ShipMapInformation) == 0x0038);
static_assert(offsetof(UShipTravelDataCollection, Sources) == 0x0038);
static_assert(offsetof(USkeletalMeshModVisual, Mesh) == 0x00C0);
static_assert(offsetof(USkeletalMeshModVisual, AttachSocket) == 0x00E8);
static_assert(offsetof(USkillAdjustment, AdjustmentTypeImage) == 0x0300);
static_assert(offsetof(USkillAdjustment, AdjustmentValue) == 0x0308);
static_assert(offsetof(USkillAdjustment, AdjustmentDescription) == 0x0310);
static_assert(offsetof(USkillButtonEntryWidget, SkillUnlockedAnim) == 0x0488);
static_assert(offsetof(USkillGroupDetailWidget, TwoSkillsBackground) == 0x0278);
static_assert(offsetof(USkillGroupDetailWidget, ThreeSkillsBackground) == 0x0280);
static_assert(offsetof(USkillGroupDetailWidget, SkillGroupCategory) == 0x0288);
static_assert(offsetof(USkillGroupDetailWidget, ChildSkills) == 0x0290);
static_assert(offsetof(USkillGroupDetailWidget, SkillEntryClass) == 0x0298);
static_assert(offsetof(USkillStatusEffect, SkillToCheck) == 0x0188);
static_assert(offsetof(USkillStatusEffect, SkillEffects) == 0x0190);
static_assert(offsetof(USkillSummaryEntryWidget, Button) == 0x0278);
static_assert(offsetof(USkillSummaryEntryWidget, SkillNameText) == 0x0280);
static_assert(offsetof(USkillSummaryEntryWidget, SkillLevelText) == 0x0288);
static_assert(offsetof(USkillUnlockEntryWidget, Meter) == 0x0300);
static_assert(offsetof(USkillUnlockEntryWidget, SkillUnlockedImage) == 0x0308);
static_assert(offsetof(USkillUnlockEntryWidget, SkillFadedLine) == 0x0310);
static_assert(offsetof(USkillUnlockEntryWidget, SkillUnlockAnim) == 0x0318);
static_assert(offsetof(USkillUnlockEntryWidget, HalfMeterLine) == 0x0320);
static_assert(offsetof(USkillUnlockEntryWidget, SkillUnlockTextBlock) == 0x0328);
static_assert(offsetof(USkillUnlockPanelMeter, MeterBase) == 0x0308);
static_assert(offsetof(USkillUnlockPanelMeter, MeterOld) == 0x0310);
static_assert(offsetof(USkillUnlockPanelMeter, MeterNew) == 0x0318);
static_assert(offsetof(USkillUnlockPanelWidget, InitialMeter) == 0x0300);
static_assert(offsetof(USkillUnlockPanelWidget, SkillsOverlay) == 0x0308);
static_assert(offsetof(USkillUnlockPanelWidget, SkillUnlocksVerticalBox) == 0x0310);
static_assert(offsetof(FIndianaSliderStyle, NormalBarBrush) == 0x0008);
static_assert(offsetof(FIndianaSliderStyle, FocusedBarBrush) == 0x0098);
static_assert(offsetof(FIndianaSliderStyle, DisabledBarBrush) == 0x0128);
static_assert(offsetof(FIndianaSliderStyle, NormalThumbBrush) == 0x01B8);
static_assert(offsetof(FIndianaSliderStyle, FocusedThumbBrush) == 0x0248);
static_assert(offsetof(FIndianaSliderStyle, DisabledThumbBrush) == 0x02D8);
static_assert(offsetof(FIndianaSliderStyle, HoveredSoundOverride) == 0x0370);
static_assert(offsetof(FIndianaSliderStyle, FocusedSoundOverride) == 0x0378);
static_assert(offsetof(FIndianaSliderStyle, StepSoundOverride) == 0x0380);
static_assert(offsetof(USliderBase, Orientation) == 0x0134);
static_assert(offsetof(USliderBase, WidgetStyle) == 0x0190);
static_assert(offsetof(UIndianaSliderWidgetStyle, SliderStyle) == 0x0038);
static_assert(offsetof(USlideshowImageSet, TextureMapping) == 0x0038);
static_assert(offsetof(USlideshowWidget, BodyText) == 0x0368);
static_assert(offsetof(USlideshowWidget, MainOverlay) == 0x0370);
static_assert(offsetof(USlideshowWidget, BodyBorder) == 0x0378);
static_assert(offsetof(USlideshowWidget, PrimaryImage) == 0x0380);
static_assert(offsetof(USlideshowWidget, InputLabelBack) == 0x0388);
static_assert(offsetof(USlideshowWidget, InputLabelForward) == 0x0390);
static_assert(offsetof(USlideshowWidget, MissingImageTextBlock) == 0x0398);
static_assert(offsetof(USlideshowWidget, Textures) == 0x03A0);
static_assert(offsetof(USpawnActorRequestData, AnimationTag) == 0x0080);
static_assert(offsetof(USpawnActorRequestData, ActorToSpawn) == 0x0088);
static_assert(offsetof(USpawnActorEventEffect, SpawnActorClass) == 0x0030);
static_assert(offsetof(USpawnActorEventEffect, LocationSetting) == 0x0038);
static_assert(offsetof(USpawnActorEventEffect, RotationSetting) == 0x0039);
static_assert(offsetof(USpawnActorStatusEffect, CharacterClass) == 0x0188);
static_assert(offsetof(USpawnActorStatusEffect, CharacterScale) == 0x0194);
static_assert(offsetof(USpawnActorStatusEffect, SpawnLocationOffset) == 0x01A0);
static_assert(offsetof(USpawnActorStatusEffect, EQSRequest) == 0x01B0);
static_assert(offsetof(USpawnHazardStatusEffect, HazardClass) == 0x0188);
static_assert(offsetof(USpawnHazardStatusEffect, HazardScale) == 0x0198);
static_assert(offsetof(FAreaOfEffect, CollisionShapeInfo) == 0x0000);
static_assert(offsetof(FAreaOfEffect, CollisionSizeStat) == 0x0040);
static_assert(offsetof(FAreaOfEffect, SourceType) == 0x0048);
static_assert(offsetof(FAreaOfEffect, CollisionSocket) == 0x004C);
static_assert(offsetof(FAreaOfEffect, MeshTarget) == 0x0054);
static_assert(offsetof(FTargetCone, CollisionSizeStat) == 0x0000);
static_assert(offsetof(FTargetCone, ConeAxis) == 0x000C);
static_assert(offsetof(FTargetCone, SocketOffset) == 0x0014);
static_assert(offsetof(FTargetCone, SourceType) == 0x0020);
static_assert(offsetof(FTargetCone, CollisionSocket) == 0x0024);
static_assert(offsetof(FTargetCone, MeshTarget) == 0x002C);
static_assert(offsetof(FTargetEffect, SpellEffectTarget) == 0x0000);
static_assert(offsetof(FTargetEffect, StatusEffects) == 0x0008);
static_assert(offsetof(FTargetEffect, EffectTargetConditionals) == 0x0018);
static_assert(offsetof(FTargetEffect, EffectDirectionType) == 0x0028);
static_assert(offsetof(FTargetEffect, AreaOfEffect) == 0x0040);
static_assert(offsetof(FTargetEffect, TargetCone) == 0x00A0);
static_assert(offsetof(FSpellEffectByEvent, ApplyEvent) == 0x0000);
static_assert(offsetof(FSpellEffectByEvent, RemoveEvent) == 0x0008);
static_assert(offsetof(FSpellEffectByEvent, TargetEffects) == 0x0010);
static_assert(offsetof(USpell, DisplayName) == 0x0030);
static_assert(offsetof(USpell, DisplayDescription) == 0x0038);
static_assert(offsetof(USpell, CooldownRpgStat) == 0x0048);
static_assert(offsetof(USpell, EventCooldownRpgStat) == 0x0058);
static_assert(offsetof(USpell, TargetConditionals) == 0x0060);
static_assert(offsetof(USpell, OnCastEffects) == 0x0070);
static_assert(offsetof(USpell, OnCastEffectsArray) == 0x0140);
static_assert(offsetof(USpell, OnEventEffects) == 0x0150);
static_assert(offsetof(USpell, ApplyChanceRpgStat) == 0x0178);
static_assert(offsetof(USpell, ReceiveChanceRpgStat) == 0x0180);
static_assert(offsetof(USpellConditional_CreatureType, CreatureTypes) == 0x0038);
static_assert(offsetof(USpellConditional_Health, Operator) == 0x003D);
static_assert(offsetof(USpellConditional_Encumbrance, Operator) == 0x003D);
static_assert(offsetof(USpellConditional_MeleeWeaponCategory, WeaponCategory) == 0x0038);
static_assert(offsetof(USpellConditional_NumCompanions, Operator) == 0x003C);
static_assert(offsetof(USpellConditional_RandomChance, ChanceStat) == 0x0040);
static_assert(offsetof(USpellConditional_MinSkill, Skill) == 0x0038);
static_assert(offsetof(USpellConditional_MinSkill, MinSkillStat) == 0x0040);
static_assert(offsetof(USpellConditional_HasStatusEffect, StatusEffect) == 0x0038);
static_assert(offsetof(USpellConditional_HasStatusEffect, Operator) == 0x0044);
static_assert(offsetof(USpellConditional_HasSpell, CastSpell) == 0x0038);
static_assert(offsetof(USpellConditional_IsDifficulty, AllowedDifficulties) == 0x0038);
static_assert(offsetof(USpellConditional_TTDMeter, Operator) == 0x003C);
static_assert(offsetof(USpellConditional_RosterSize, Operator) == 0x003C);
static_assert(offsetof(USpellConditional_FlawCount, Operator) == 0x003C);
static_assert(offsetof(USpellConditional_IsAmmoTypeEquipped, AmmoClass) == 0x0040);
static_assert(offsetof(USpellConditional_CheckGlobalVariable, GlobalVariable) == 0x0038);
static_assert(offsetof(USpellConditional_CheckGlobalVariable, Operator) == 0x004C);
static_assert(offsetof(FSpellInstance, ApplyEvent) == 0x0008);
static_assert(offsetof(FSpellInstance, RemoveEvent) == 0x0010);
static_assert(offsetof(USpellManagerComponent, PersistentSpells) == 0x00F8);
static_assert(offsetof(USpellManagerComponent, PassiveSpellSet) == 0x01A0);
static_assert(offsetof(USpellRemoveStatusEffect, Spell) == 0x0188);
static_assert(offsetof(USpellTargetRequestData, Spell) == 0x0090);
static_assert(offsetof(UStackSplittingWidget, TextBlock) == 0x0360);
static_assert(offsetof(UStackSplittingWidget, SubTextBlock) == 0x0368);
static_assert(offsetof(UStackSplittingWidget, ValueTextBlock) == 0x0370);
static_assert(offsetof(UStackSplittingWidget, FullStackValue) == 0x0378);
static_assert(offsetof(UStackSplittingWidget, ConfirmButton) == 0x0380);
static_assert(offsetof(UStackSplittingWidget, CancelButton) == 0x0388);
static_assert(offsetof(UStackSplittingWidget, ConfirmLabel) == 0x0390);
static_assert(offsetof(UStackSplittingWidget, BackLabel) == 0x0398);
static_assert(offsetof(UStackSplittingWidget, MinButton) == 0x03A0);
static_assert(offsetof(UStackSplittingWidget, MaxButton) == 0x03A8);
static_assert(offsetof(UStackSplittingWidget, InputLabelMin) == 0x03B0);
static_assert(offsetof(UStackSplittingWidget, InputLabelMax) == 0x03B8);
static_assert(offsetof(UStackSplittingWidget, BackingBotSizeBox) == 0x03C0);
static_assert(offsetof(UStackSplittingWidget, ContentVerticalBox) == 0x03C8);
static_assert(offsetof(UStackSplittingWidget, KeyboardInputBox) == 0x03D0);
static_assert(offsetof(UStackSplittingWidget, GamepadInputBox) == 0x03D8);
static_assert(offsetof(UStackSplittingWidget, ValueSlider) == 0x03E0);
static_assert(offsetof(UStackSplittingWidget, ContentSizeBox) == 0x03E8);
static_assert(offsetof(UStackSplittingWidget, BackgroundWidget) == 0x03F0);
static_assert(offsetof(UStackSplittingWidget, StyleMinimums) == 0x03F8);
static_assert(offsetof(UStackSplittingWidget, StyleMaximums) == 0x0448);
static_assert(offsetof(UStackSplittingWidget, ItemToSplit) == 0x04A8);
static_assert(offsetof(UStaminaComponent, OutOfStaminaEvent) == 0x00F0);
static_assert(offsetof(UStandardAmmoPool, AmmoType) == 0x0084);
static_assert(offsetof(UStandardAmmoPool, AmmoTypeTag) == 0x0088);
static_assert(offsetof(UStandardAmmoPool, DefaultAmmoClass) == 0x0090);
static_assert(offsetof(UStandardAmmoPool, CurrentAmmo) == 0x0098);
static_assert(offsetof(UStandardAmmoPool, PendingAmmoClass) == 0x00A0);
static_assert(offsetof(UStandardAmmoPool, LoadingAmmoClass) == 0x00A8);
static_assert(offsetof(UStasisLogicDataAsset, Comment) == 0x0038);
static_assert(offsetof(UStasisLogicDataAsset, StasisConditions) == 0x0050);
static_assert(offsetof(UStaticMeshModVisual, Mesh) == 0x00C0);
static_assert(offsetof(UStaticMeshModVisual, AttachSocket) == 0x00E8);
static_assert(offsetof(UStatModifierStatusEffect, StatModifier) == 0x0198);
static_assert(offsetof(UStatModifierStatusEffect, SkillScalarCurve) == 0x01B8);
static_assert(offsetof(UStatsFlawSummaryWidget, VerticalBox) == 0x0300);
static_assert(offsetof(UStatsFlawSummaryWidget, EntryClass) == 0x0308);
static_assert(offsetof(UStatsPerksPageWidget, TierHeights) == 0x0348);
static_assert(offsetof(UStatsPerksPageWidget, PerksIgnoringArrowAdjustment) == 0x0358);
static_assert(offsetof(UStatsPerksPageWidget, DescriptionPanel) == 0x0368);
static_assert(offsetof(UStatsPerksPageWidget, PointsAvailableTextBlock) == 0x0370);
static_assert(offsetof(UStatsPerksPageWidget, PerkTotalTextBlock) == 0x0378);
static_assert(offsetof(UStatsPerksPageWidget, PerkTotalValueTextBlock) == 0x0380);
static_assert(offsetof(UStatsPerksPageWidget, PlayerPerkList) == 0x0388);
static_assert(offsetof(UStatsPerksPageWidget, InputLabelGroup) == 0x0390);
static_assert(offsetof(UStatsPerksPageWidget, TierBottomImage) == 0x0398);
static_assert(offsetof(UStatsPerksPageWidget, DynamicSizeBox) == 0x03A0);
static_assert(offsetof(UStatsPerksPageWidget, FlavorTextWidget) == 0x03A8);
static_assert(offsetof(UStatsPerkSummaryWidget, VerticalBox) == 0x0300);
static_assert(offsetof(UStatsPerkSummaryWidget, EntryClass) == 0x0308);
static_assert(offsetof(UStatsSkillsPageWidget, SkillsHeaderTextBlock) == 0x0460);
static_assert(offsetof(UStatsSkillsPageWidget, SkillPointsTitle) == 0x0468);
static_assert(offsetof(UStatsSkillsPageWidget, InputLabelGroup) == 0x0470);
static_assert(offsetof(UStatsSkillsPageWidget, SkillPointDisplayHorizontalBox) == 0x0478);
static_assert(offsetof(UStatsSkillsPageWidget, FlavorTextWidget) == 0x0480);
static_assert(offsetof(UStatsSkillSummaryWidget, SkillVerticalBox) == 0x0300);
static_assert(offsetof(UStatsSkillSummaryWidget, SkillDisplayOrder) == 0x0308);
static_assert(offsetof(UStatsSkillSummaryWidget, SkillEntryClass) == 0x0318);
static_assert(offsetof(UStatsSummaryPageWidget, AttributeSummary) == 0x0308);
static_assert(offsetof(UStatsSummaryPageWidget, AptitudeSummary) == 0x0310);
static_assert(offsetof(UStatsSummaryPageWidget, InputLabelGroup) == 0x0318);
static_assert(offsetof(UStatsSummaryPageWidget, FlavorTextWidget) == 0x0320);
static_assert(offsetof(UStatsSummaryPageWidget, DescriptionPanel) == 0x0328);
static_assert(offsetof(UStatusEffectApplier, OwnerFireEffect) == 0x0038);
static_assert(offsetof(UStatusEffectApplier, OwnerHitTargetEffect) == 0x0040);
static_assert(offsetof(UStatusEffectBarEntryWidget, StatusEffectImage) == 0x0300);
static_assert(offsetof(UStatusEffectBarEntryWidget, BulbImage) == 0x0308);
static_assert(offsetof(UStatusEffectBarWidget, StatusEffectEntryOne) == 0x0300);
static_assert(offsetof(UStatusEffectBarWidget, StatusEffectEntryTwo) == 0x0308);
static_assert(offsetof(UStatusEffectBarWidget, StatusEffectEntryThree) == 0x0310);
static_assert(offsetof(UStatusEffectBarWidget, StatusEffectEntryFour) == 0x0318);
static_assert(offsetof(UStatusEffectBarWidget, StatusEffectEntryFive) == 0x0320);
static_assert(offsetof(UStatusEffectBarWidget, StatusEffectEntrySix) == 0x0328);
static_assert(offsetof(UStatusEffectEntryWidget, Button) == 0x0300);
static_assert(offsetof(UStatusEffectEntryWidget, NameTextBlock) == 0x0308);
static_assert(offsetof(UStatusEffectEntryWidget, TimeRemainingTextBlock) == 0x0310);
static_assert(offsetof(UStatusEffectEntryWidget, Icon) == 0x0318);
static_assert(offsetof(UStatusEffectManagerComponent, StatusEffects) == 0x00F0);
static_assert(offsetof(UStatusEffectManagerComponent, StatusEffectsToClear) == 0x0100);
static_assert(offsetof(UStatusEffectManagerComponent, StatusEffectImmunities) == 0x0150);
static_assert(offsetof(UStatusEffectRemove, StatusEffect) == 0x0188);
static_assert(offsetof(UStatusEffectTagEntryWidget, StatusEffectImage) == 0x0300);
static_assert(offsetof(UStatusEffectTagEntryWidget, StackQuantityTextBlock) == 0x0308);
static_assert(offsetof(UStatusEffectTagWidget, StatusEffectEntryOne) == 0x0300);
static_assert(offsetof(UStatusEffectTagWidget, StatusEffectEntryTwo) == 0x0308);
static_assert(offsetof(UStatusEffectTagWidget, StatusEffectEntryThree) == 0x0310);
static_assert(offsetof(UStatusEffectTagWidget, StatusEffectEntryFour) == 0x0318);
static_assert(offsetof(UStatusEffectTagWidget, StatusEffectEntryFive) == 0x0320);
static_assert(offsetof(UStatusEffectUIVisualsData, SymbolType) == 0x0038);
static_assert(offsetof(UStatusEffectUIVisualsData, StatusEffectName) == 0x003C);
static_assert(offsetof(UStatusEffectUIVisualsData, StatusEffectDescription) == 0x0044);
static_assert(offsetof(UStatusEffectUIVisualsData, Icon) == 0x0050);
static_assert(offsetof(UStatusEffectUIVisualsData, IconLarge) == 0x0058);
static_assert(offsetof(UStatusEffectUIVisualsData, IconHUD) == 0x0060);
static_assert(offsetof(UStatusEffectUIVisualsData, DLCFlags) == 0x0068);
static_assert(offsetof(AStatusTagActor, StatusTagComponent) == 0x02C0);
static_assert(offsetof(AStatusTagActor, SceneComponent) == 0x02C8);
static_assert(offsetof(FAlertStateImageSet, BackingTexture) == 0x0000);
static_assert(offsetof(FAlertStateImageSet, FillTexture) == 0x0008);
static_assert(offsetof(FAwarenessImageSet, ImageSetUnaware) == 0x0000);
static_assert(offsetof(FAwarenessImageSet, ImageSetSuspicious) == 0x0010);
static_assert(offsetof(FAwarenessImageSet, ImageSetInvestigating) == 0x0020);
static_assert(offsetof(FAwarenessImageSet, ImageSetAlerted) == 0x0030);
static_assert(offsetof(FAwarenessImageSet, ImageSetDisguise) == 0x0040);
static_assert(offsetof(FAwarenessImageSet, ImageSetDisguiseAlert) == 0x0050);
static_assert(offsetof(FAwarenessTalkImageSet, DisguiseUnalerted) == 0x0000);
static_assert(offsetof(FAwarenessTalkImageSet, DisguiseAlerted) == 0x0008);
static_assert(offsetof(FAwarenessTalkImageSet, NonDisguiseUnalerted) == 0x0010);
static_assert(offsetof(FAwarenessTalkImageSet, NonDisguiseAlerted) == 0x0018);
static_assert(offsetof(UStatusTagAwarenessWidget, BackingTextureParamName) == 0x0300);
static_assert(offsetof(UStatusTagAwarenessWidget, FillTextureParamName) == 0x0308);
static_assert(offsetof(UStatusTagAwarenessWidget, FillParamName) == 0x0310);
static_assert(offsetof(UStatusTagAwarenessWidget, AwarenessImageSet) == 0x0318);
static_assert(offsetof(UStatusTagAwarenessWidget, AwarenessTalkImageSet) == 0x0378);
static_assert(offsetof(UStatusTagAwarenessWidget, MaterialImage) == 0x0398);
static_assert(offsetof(UStatusTagAwarenessWidget, AlertImage) == 0x03A0);
static_assert(offsetof(UStatusTagAwarenessWidget, TalkImage) == 0x03A8);
static_assert(offsetof(UStatusTagAwarenessWidget, MaterialInstance) == 0x03B0);
static_assert(offsetof(UStatusTagGenerator, StatusTagPool) == 0x0030);
static_assert(offsetof(UStatusTagGenerator, StatusTagSubclass) == 0x0038);
static_assert(offsetof(UStatusTagWidget, NameTextBlock) == 0x0300);
static_assert(offsetof(UStatusTagWidget, BarkTextBlock) == 0x0308);
static_assert(offsetof(UStatusTagWidget, RootPanel) == 0x0310);
static_assert(offsetof(UStatusTagWidget, SneakBlip) == 0x0318);
static_assert(offsetof(UStatusTagWidget, HostileImage) == 0x0320);
static_assert(offsetof(UStatusTagWidget, TargetMarked) == 0x0328);
static_assert(offsetof(UStatusTagWidget, FactionImage) == 0x0330);
static_assert(offsetof(UStatusTagWidget, HealthBar) == 0x0338);
static_assert(offsetof(UStatusTagWidget, RecentDamage) == 0x0340);
static_assert(offsetof(UStatusTagWidget, DisguiseEmblemContainer) == 0x0348);
static_assert(offsetof(UStatusTagWidget, RootBorder) == 0x0350);
static_assert(offsetof(UStatusTagWidget, TargetBorder) == 0x0358);
static_assert(offsetof(UStatusTagWidget, HealthOverlay) == 0x0360);
static_assert(offsetof(UStatusTagWidget, HealthVerticalBox) == 0x0368);
static_assert(offsetof(UStatusTagWidget, StatusEffectDisplay) == 0x0370);
static_assert(offsetof(UStatusTagWidget, InterrogationAlerted) == 0x0378);
static_assert(offsetof(UStatusTagWidget, AwarenessWidget) == 0x0380);
static_assert(offsetof(UStatusTagWidget, AwarenessOverlay) == 0x0388);
static_assert(offsetof(FOEIStringEntry, DefaultText) == 0x0008);
static_assert(offsetof(FOEIStringEntry, FemaleText) == 0x0018);
static_assert(offsetof(FOEIStringEntry, AlternateXboxText) == 0x0028);
static_assert(offsetof(FOEIStringEntry, AlternatePS5Text) == 0x0038);
static_assert(offsetof(FOEIStringTable, Name) == 0x0000);
static_assert(offsetof(FOEIStringTable, StringsWithFemaleVO) == 0x0060);
static_assert(offsetof(FOEIStringTable, Entries) == 0x00B0);
static_assert(offsetof(UStringTableBundleSet, StringTables) == 0x0038);
static_assert(offsetof(FSubtitleEntry, DebugName) == 0x0000);
static_assert(offsetof(FSubtitleEntry, StartTime) == 0x0010);
static_assert(offsetof(FSubtitleEntry, EndTime) == 0x001C);
static_assert(offsetof(FSubtitleEntry, NameString) == 0x0028);
static_assert(offsetof(FSubtitleEntry, Gender) == 0x0034);
static_assert(offsetof(USubtitleData, ConversationFile) == 0x0038);
static_assert(offsetof(USubtitleData, SubtitleEntries) == 0x0048);
static_assert(offsetof(USubtitleEntryWidget, EntryTextBlock) == 0x0300);
static_assert(offsetof(USubtitleManagerWidget, SubtitleVerticalBox) == 0x0308);
static_assert(offsetof(USubtitleManagerWidget, MasterSubtitleData) == 0x0310);
static_assert(offsetof(USubtitleManagerWidget, SubtitleEntryClass) == 0x0318);
static_assert(offsetof(USubtitleManagerWidget, CurrentSubtitleData) == 0x0320);
static_assert(offsetof(USubtitlesWidget, SpeakerTextBlock) == 0x0300);
static_assert(offsetof(USubtitlesWidget, MessageTextBlock) == 0x0308);
static_assert(offsetof(USubtitlesWidget, TextSizeBox) == 0x0310);
static_assert(offsetof(USurvivalBarGroupWidget, HungerBar) == 0x0310);
static_assert(offsetof(USurvivalBarGroupWidget, ThirstBar) == 0x0318);
static_assert(offsetof(USurvivalBarGroupWidget, SleepBar) == 0x0320);
static_assert(offsetof(USurvivalBarWidget, SurvivalMode) == 0x0310);
static_assert(offsetof(USurvivalBarWidget, SurvivalIcon) == 0x0318);
static_assert(offsetof(USurvivalBarWidget, SurvivalProgressBar) == 0x0320);
static_assert(offsetof(ASwitch, SceneComponent) == 0x0310);
static_assert(offsetof(ASwitch, InteractableComponent) == 0x0318);
static_assert(offsetof(ASwitch, IDComponent) == 0x0320);
static_assert(offsetof(ASwitch, AkComponent) == 0x0328);
static_assert(offsetof(ASwitch, TravelTriggerComponent) == 0x0330);
static_assert(offsetof(ASwitch, CyclingType) == 0x0338);
static_assert(offsetof(USwitchAudioComponent, AudioEvents) == 0x0150);
static_assert(offsetof(USwitchContextRequestData, Context) == 0x0068);
static_assert(offsetof(USwitchWeaponRequestData, WeaponSwitchType) == 0x0069);
static_assert(offsetof(USwitchWeaponRequestData, WeaponType) == 0x006C);
static_assert(offsetof(USymbolDescriptionPanelEntry, ScalableSymbol) == 0x0300);
static_assert(offsetof(USymbolDescriptionPanelEntry, SymbolName) == 0x0308);
static_assert(offsetof(USymbolDescriptionPanelEntry, SymbolDescription) == 0x0310);
static_assert(offsetof(USymbolList, SymbolEntryNames) == 0x0358);
static_assert(offsetof(USymbolList, StatusEffectVisuals) == 0x03A8);
static_assert(offsetof(USymbolList, SymbolEntryClass) == 0x0428);
static_assert(offsetof(USymbolList, MapCompassVisualData) == 0x0430);
static_assert(offsetof(USymbolList, DamageTypesData) == 0x0438);
static_assert(offsetof(FAlternateBrushSet, HiddenBrush) == 0x0000);
static_assert(offsetof(FAlternateBrushSet, LockedBrush) == 0x0088);
static_assert(offsetof(FAlternateBrushSet, LockedHoverFocused) == 0x0110);
static_assert(offsetof(FAlternateBrushSet, LockedSelected) == 0x0198);
static_assert(offsetof(FAlternateBrushSet, UnlockedBrush) == 0x0220);
static_assert(offsetof(FAlternateBrushSet, UnlockedHoverFocused) == 0x02A8);
static_assert(offsetof(FAlternateBrushSet, UnlockedSelected) == 0x0330);
static_assert(offsetof(FSystemMapEntryData, DebugName) == 0x0000);
static_assert(offsetof(FSystemMapEntryData, Position) == 0x0010);
static_assert(offsetof(FSystemMapEntryData, NameString) == 0x0018);
static_assert(offsetof(FSystemMapEntryData, DescString) == 0x0020);
static_assert(offsetof(FSystemMapEntryData, TextPadding) == 0x0028);
static_assert(offsetof(FSystemMapEntryData, TextAlignment) == 0x0030);
static_assert(offsetof(FSystemMapEntryData, QuestIconPadding) == 0x0038);
static_assert(offsetof(FSystemMapEntryData, PlayerIconPadding) == 0x0040);
static_assert(offsetof(FSystemMapEntryData, HiddenBrush) == 0x0060);
static_assert(offsetof(FSystemMapEntryData, HiddenPosition) == 0x00E8);
static_assert(offsetof(FSystemMapEntryData, LockedBrush) == 0x00F0);
static_assert(offsetof(FSystemMapEntryData, LockedHoverFocused) == 0x0178);
static_assert(offsetof(FSystemMapEntryData, LockedSelected) == 0x0200);
static_assert(offsetof(FSystemMapEntryData, UnlockedBrush) == 0x0288);
static_assert(offsetof(FSystemMapEntryData, UnlockedHoverFocused) == 0x0310);
static_assert(offsetof(FSystemMapEntryData, UnlockedSelected) == 0x0398);
static_assert(offsetof(FSystemMapEntryData, INX1BrushSet) == 0x0428);
static_assert(offsetof(FSystemMapEntryData, INX2BrushSet) == 0x07E8);
static_assert(offsetof(FSystemMapEntryData, Destinations) == 0x0BA0);
static_assert(offsetof(FSystemMapEntryData, DestinationImages) == 0x0BB0);
static_assert(offsetof(USystemMapData, SystemEntries) == 0x0038);
static_assert(offsetof(USystemMapData, DLC1SystemMapData) == 0x0048);
static_assert(offsetof(USystemMapData, DLC2SystemMapData) == 0x0070);
static_assert(offsetof(FSystemMapEntryHelper, NameString) == 0x0000);
static_assert(offsetof(FSystemMapEntryHelper, DescString) == 0x0008);
static_assert(offsetof(USystemMapEntryWidget, EntryCanvasPanel) == 0x0308);
static_assert(offsetof(USystemMapEntryWidget, Button) == 0x0310);
static_assert(offsetof(USystemMapEntryWidget, NameTextBlock) == 0x0318);
static_assert(offsetof(USystemMapEntryWidget, ActiveQuestIcon) == 0x0320);
static_assert(offsetof(USystemMapEntryWidget, InactiveQuestIcon) == 0x0328);
static_assert(offsetof(USystemMapEntryWidget, PlayerIcon) == 0x0330);
static_assert(offsetof(USystemMapEntryWidget, ValidDestinations) == 0x0338);
static_assert(offsetof(USystemMapEntryWidget, SystemMapEntryData) == 0x0348);
static_assert(offsetof(USystemMapEntryWidget, EntryHelper) == 0x0F48);
static_assert(offsetof(USystemMapInfoWidget, NameTextBlock) == 0x0300);
static_assert(offsetof(USystemMapInfoWidget, DescriptionTextBlock) == 0x0308);
static_assert(offsetof(USystemMapInfoWidget, ObjectiveVBox) == 0x0310);
static_assert(offsetof(USystemMapInfoWidget, ObjectiveClass) == 0x0318);
static_assert(offsetof(USystemMapInterfaceWidget, SystemMapWidget) == 0x0308);
static_assert(offsetof(USystemMapObjectiveWidget, HorizontalBox) == 0x0300);
static_assert(offsetof(USystemMapObjectiveWidget, TextBlock) == 0x0308);
static_assert(offsetof(USystemMapPlayerShipWidget, PlayerShipImage) == 0x0310);
static_assert(offsetof(USystemMapPlayerShipWidget, ScaleCurve) == 0x0318);
static_assert(offsetof(USystemMapPlayerShipWidget, DistanceCurve) == 0x0320);
static_assert(offsetof(USystemMapSelectionEntryWidget, EntryButton) == 0x0308);
static_assert(offsetof(USystemMapSelectionEntryWidget, ActiveQuestIcon) == 0x0310);
static_assert(offsetof(USystemMapSelectionEntryWidget, InactiveQuestIcon) == 0x0318);
static_assert(offsetof(USystemMapSelectionEntryWidget, EntryTextBlock) == 0x0320);
static_assert(offsetof(USystemMapSelectionEntryWidget, ShipDestination) == 0x0328);
static_assert(offsetof(USystemMapSelectionEntryWidget, DestinationImage) == 0x0330);
static_assert(offsetof(USystemMapSelectionEntryWidget, ParentSelectionWidget) == 0x0338);
static_assert(offsetof(USystemMapSelectionWidget, EntryClass) == 0x0320);
static_assert(offsetof(USystemMapSelectionWidget, MultiQuestMapTracker) == 0x0328);
static_assert(offsetof(USystemMapSelectionWidget, HeaderTextblock) == 0x0330);
static_assert(offsetof(USystemMapSelectionWidget, MapPreview) == 0x0338);
static_assert(offsetof(USystemMapSelectionWidget, EntryList) == 0x0340);
static_assert(offsetof(USystemMapSelectionWidget, InputLabelGroup) == 0x0348);
static_assert(offsetof(USystemMapSelectionWidget, CancelButton) == 0x0350);
static_assert(offsetof(USystemMapSelectionWidget, EntryPadding) == 0x0358);
static_assert(offsetof(USystemMapSelectionWidget, BackgroundSizeBox) == 0x0368);
static_assert(offsetof(USystemMapSelectionWidget, ContentSizeBox) == 0x0370);
static_assert(offsetof(USystemMapWidget, SelectionWidgetClass) == 0x04B8);
static_assert(offsetof(USystemMapWidget, PlayerShipWidget) == 0x04C0);
static_assert(offsetof(USystemMapWidget, InfoWidget) == 0x04C8);
static_assert(offsetof(USystemMapWidget, EntryWidgetClass) == 0x04D0);
static_assert(offsetof(USystemMapWidget, SystemMapData) == 0x04D8);
static_assert(offsetof(USystemMapWidget, MinGamepadBounds) == 0x04E0);
static_assert(offsetof(USystemMapWidget, MaxGamepadBounds) == 0x04E8);
static_assert(offsetof(UTacticalTimeDilationComponent, TimeDilationStat) == 0x0198);
static_assert(offsetof(UTacticalTimeDilationComponent, TTDMeterDepleted) == 0x01A8);
static_assert(offsetof(UTacticalTimeDilationComponent, TTDDeactivated) == 0x01B0);
static_assert(offsetof(UTacticalTimeDilationComponent, TTDUsuable) == 0x01B8);
static_assert(offsetof(UTacticalTimeDilationComponent, TTDMeterFull) == 0x01C0);
static_assert(offsetof(UTacticalTimeDilationComponent, FasterTTDDrainCurve) == 0x01D0);
static_assert(offsetof(FWwiseVOEvent, AudioEvent) == 0x0010);
static_assert(offsetof(UTalkManager, SourceChatterWiseEvents) == 0x00D0);
static_assert(offsetof(UTalkManager, AudioEventObjectLibrary) == 0x1ED0);
static_assert(offsetof(UTargetInfoComponent, PrimaryTarget) == 0x0108);
static_assert(offsetof(UTargetInfoComponent, QueuedTarget) == 0x0110);
static_assert(offsetof(UTargetInfoComponent, OverrideTarget) == 0x0118);
static_assert(offsetof(UTeamComponent, TeamData) == 0x00F8);
static_assert(offsetof(UTeamData, Faction) == 0x0080);
static_assert(offsetof(UTeamData, DefaultRelationship) == 0x0088);
static_assert(offsetof(UTeamData, TeamRelationships) == 0x0180);
static_assert(offsetof(UTeamManager, TeamMap) == 0x0030);
static_assert(offsetof(UTeleportBehaviorStateInfo, EQSRequest) == 0x0120);
static_assert(offsetof(UTeleportRequestData, EQSRequest) == 0x0068);
static_assert(offsetof(UTextBlockBase, TextReference) == 0x0140);
static_assert(offsetof(UTextBlockBase, Text) == 0x0148);
static_assert(offsetof(UTextBlockBase, WidgetStyle) == 0x0170);
static_assert(offsetof(UIndianaTextBlockWidgetStyle, TextBlockStyle) == 0x0038);
static_assert(offsetof(UTextEntryWidget, EditableTextField) == 0x0348);
static_assert(offsetof(UTextEntryWidget, CapacityTextBlock) == 0x0350);
static_assert(offsetof(UTextEntryWidget, BadNameWarning) == 0x0358);
static_assert(offsetof(UTextEntryWidget, HintText) == 0x0368);
static_assert(offsetof(UTextEntryWidget, HintTextColor) == 0x0370);
static_assert(offsetof(UTextSectionWidget, Panel) == 0x0288);
static_assert(offsetof(UTextSectionWidget, TextBlock) == 0x0290);
static_assert(offsetof(UTimeDilationComponent, Material) == 0x0108);
static_assert(offsetof(UTimeDilationComponent, Params) == 0x0118);
static_assert(offsetof(UTinkeringWidget, ConfirmLabel) == 0x0328);
static_assert(offsetof(UTinkeringWidget, BackLabel) == 0x0330);
static_assert(offsetof(UTinkeringWidget, ContentVerticalBox) == 0x0338);
static_assert(offsetof(UTinkeringWidget, KeyboardInputBox) == 0x0340);
static_assert(offsetof(UTinkeringWidget, GamepadInputBox) == 0x0348);
static_assert(offsetof(UTinkeringWidget, BackingBotSizeBox) == 0x0350);
static_assert(offsetof(UTinkeringWidget, ItemNameTextBlock) == 0x0358);
static_assert(offsetof(UTinkeringWidget, DescTextBlock) == 0x0360);
static_assert(offsetof(UTinkeringWidget, BaseValueTextBlock) == 0x0368);
static_assert(offsetof(UTinkeringWidget, UpgradeTextBlock) == 0x0370);
static_assert(offsetof(UTinkeringWidget, ConfirmButton) == 0x0378);
static_assert(offsetof(UTinkeringWidget, CancelButton) == 0x0380);
static_assert(offsetof(UTinkeringWidget, CachedItem) == 0x0398);
static_assert(offsetof(UToggleActionStatusEffect, Action) == 0x0188);
static_assert(offsetof(UToolTipContainerWidget, AdjacencyPadding) == 0x0318);
static_assert(offsetof(UToolTipContainerWidget, ContentHorizontalBox) == 0x0328);
static_assert(offsetof(UTracerSoundData, ProjectileSound) == 0x0038);
static_assert(offsetof(ATrap, InitialState) == 0x03D8);
static_assert(offsetof(ATrap, TrapDifficulty) == 0x03DB);
static_assert(offsetof(ATrap, StatusEffectType) == 0x03F0);
static_assert(offsetof(ATrap, DamageDescription) == 0x03F8);
static_assert(offsetof(ATrap, DamageLevelScaler) == 0x0470);
static_assert(offsetof(ATrap, ImpactDataSet) == 0x0500);
static_assert(offsetof(ATrap, AttackFxShotOrigin) == 0x0508);
static_assert(offsetof(ATrap, AttackFxShotEnd) == 0x0510);
static_assert(offsetof(ATrap, AttackFxBeam) == 0x0518);
static_assert(offsetof(ATrap, AttackFxBeamEndParam) == 0x0520);
static_assert(offsetof(ATrap, SceneComponent) == 0x0538);
static_assert(offsetof(ATrap, IDComponent) == 0x0540);
static_assert(offsetof(ATrap, AkComponent) == 0x0548);
static_assert(offsetof(ATrap, ActivationShapeComponent) == 0x0560);
static_assert(offsetof(ATrap, ActivatorTrackingShapeComponent) == 0x0568);
static_assert(offsetof(UTrapAudioComponent, AudioEvents) == 0x0150);
static_assert(offsetof(ATrapTerminal, ConnectedTrapTriggers) == 0x0430);
static_assert(offsetof(ATrapTerminal, ConnectedHazards) == 0x0440);
static_assert(offsetof(ATrapTrigger, InitialState) == 0x02B8);
static_assert(offsetof(ATrapTrigger, TeamClass) == 0x0360);
static_assert(offsetof(ATrapTrigger, SceneComponent) == 0x0368);
static_assert(offsetof(ATrapTrigger, IDComponent) == 0x0370);
static_assert(offsetof(ATrapTrigger, ActivationShapeComponent) == 0x0388);
static_assert(offsetof(ATrapTrigger, ActivatorTrackingShapeComponent) == 0x0390);
static_assert(offsetof(ATrapTrigger, ArmedNavAreaClass) == 0x03C8);
static_assert(offsetof(ATrapTrigger, NavModifierComponent) == 0x03D0);
static_assert(offsetof(UTravelDestinationData, DestinationMap) == 0x0038);
static_assert(offsetof(UTravelDestinationData, OwningRegion) == 0x0060);
static_assert(offsetof(UTravelDestinationData, ParentRegion) == 0x0068);
static_assert(offsetof(UTravelDestinationData, MapPreview) == 0x0070);
static_assert(offsetof(UTravelDestinationData, RegionsToMarkAware) == 0x0098);
static_assert(offsetof(UTravelDestinationData, Name) == 0x00A8);
static_assert(offsetof(UTravelDestinationData, Description) == 0x00B0);
static_assert(offsetof(UTravelDestinationData, PointOfInterestType) == 0x00BC);
static_assert(offsetof(UTravelDestinationData, PointOfInterestXP) == 0x00BD);
static_assert(offsetof(UShipDestinationData, RegionMapInformation) == 0x00D8);
static_assert(offsetof(FTravelMapPosition, Name) == 0x0000);
static_assert(offsetof(FTravelMapPosition, TravelDestinations) == 0x0008);
static_assert(offsetof(FTravelMapPosition, WorldCoordinate) == 0x001C);
static_assert(offsetof(FTravelMapPosition, VisibilityConditions) == 0x0028);
static_assert(offsetof(FTravelShipMapPosition, ShipDestination) == 0x0000);
static_assert(offsetof(FTravelShipMapPosition, Conditional) == 0x0010);
static_assert(offsetof(FTravelShipMapPosition, WorldCoordinate) == 0x0078);
static_assert(offsetof(FTravelShipData, Name) == 0x0000);
static_assert(offsetof(FTravelShipData, PlayerShipDestinationData) == 0x0008);
static_assert(offsetof(FTravelShipData, ShipLocations) == 0x0010);
static_assert(offsetof(UTravelMapLayoutData, AssociatedPersistentMap) == 0x0038);
static_assert(offsetof(UTravelMapLayoutData, TravelMapPositions) == 0x0068);
static_assert(offsetof(UTravelMapLayoutData, ShipTravelData) == 0x0078);
static_assert(offsetof(UTravelRegionData, Name) == 0x0038);
static_assert(offsetof(UTravelRegionData, Description) == 0x0040);
static_assert(offsetof(UTravelRegionData, AssociatedFactions) == 0x0048);
static_assert(offsetof(UTravelTriggerComponent, TravelDestinationData) == 0x00E0);
static_assert(offsetof(UTTDEnemyScanner, MainInvalidationBox) == 0x0300);
static_assert(offsetof(UTTDEnemyScanner, ContentOverlay) == 0x0308);
static_assert(offsetof(UTTDEnemyScanner, EnemyName) == 0x0310);
static_assert(offsetof(UTTDEnemyScanner, FactionLabel) == 0x0318);
static_assert(offsetof(UTTDEnemyScanner, FactionName) == 0x0320);
static_assert(offsetof(UTTDEnemyScanner, HealthTextBlock) == 0x0328);
static_assert(offsetof(UTTDEnemyScanner, ArmorTextBlock) == 0x0330);
static_assert(offsetof(UTTDEnemyScanner, AnalysisText) == 0x0338);
static_assert(offsetof(UTTDEnemyScanner, FlavorText) == 0x0340);
static_assert(offsetof(UTTDEnemyScanner, AnalysisHeaderTextBlock) == 0x0348);
static_assert(offsetof(UTTDEnemyScanner, StatusHeaderTextBlock) == 0x0350);
static_assert(offsetof(UTTDEnemyScanner, FactionIcon) == 0x0358);
static_assert(offsetof(UTTDEnemyScanner, EnemyDifficulty) == 0x0360);
static_assert(offsetof(UTTDEnemyScanner, StatusEffects) == 0x0368);
static_assert(offsetof(UTTDStatusEffectsWidget, StatusEffectsHorizontalBox) == 0x0300);
static_assert(offsetof(UTTDStatusEffectsWidget, StatusEffectEntryClass) == 0x0308);
static_assert(offsetof(FTutorialBaseEventData, MouseAndKeyboardTutorialEvent) == 0x0001);
static_assert(offsetof(FTutorialBaseEventData, GamepadTutorialEvent) == 0x0002);
static_assert(offsetof(FTutorialBaseEventData, Conditional) == 0x0008);
static_assert(offsetof(FTutorialBaseEventData, Category) == 0x0070);
static_assert(offsetof(FTutorialPlatformStringContainer, Name) == 0x0000);
static_assert(offsetof(FTutorialPlatformStringContainer, Description) == 0x0008);
static_assert(offsetof(FTutorialEventDataContainer, TutorialNameString) == 0x0078);
static_assert(offsetof(FTutorialEventDataContainer, TutorialEventString) == 0x0080);
static_assert(offsetof(FTutorialEventDataContainer, PlatformOverrides) == 0x0088);
static_assert(offsetof(FTutorialEventDataContainer, ActionName) == 0x00E0);
static_assert(offsetof(FTutorialEventDataContainer, ActionNameList) == 0x00F0);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, DisplayType) == 0x0078);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, Padding) == 0x007C);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, HorizontalAlignment) == 0x008C);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, VerticalAlignment) == 0x008D);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, PreFlavorString) == 0x0094);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, TutorialNameString) == 0x009C);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, TutorialBodyString) == 0x00A4);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, PlatformOverrides) == 0x00B0);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, SubHeaderString) == 0x0100);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, SubDescriptionString) == 0x0108);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, SubPlatformOverrides) == 0x0110);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, ColoredString) == 0x0160);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, PrimaryDescription) == 0x0168);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, SecondaryDescription) == 0x01A0);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, BindingDescriptionOne) == 0x01D8);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, BindingDescriptionTwo) == 0x0210);
static_assert(offsetof(FTutorialFullScreenEventDataContainer, BrandType) == 0x0248);
static_assert(offsetof(UTutorialDataAsset, TutorialEventData) == 0x0038);
static_assert(offsetof(UTutorialDataAsset, FullScreenTutorialEventData) == 0x0088);
static_assert(offsetof(UTutorialDataAsset, DefaultDescription) == 0x00D8);
static_assert(offsetof(UTutorialDataAsset, FlawPrimaryDescription) == 0x0110);
static_assert(offsetof(UTutorialDataAsset, FlawSecondaryDescription) == 0x0148);
static_assert(offsetof(UTutorialDataAsset, PointOfNoReturnPrimaryDescription) == 0x0180);
static_assert(offsetof(UTutorialDataAsset, PointOfNoReturnSecondaryDescription) == 0x01B8);
static_assert(offsetof(UTutorialDataAsset, DLCInfoPopupPrimaryDescription) == 0x01F0);
static_assert(offsetof(UTutorialDataAsset, TutorialCategoryStrings) == 0x0228);
static_assert(offsetof(UTutorialManager, ShroudItem) == 0x0208);
static_assert(offsetof(UTutorialManager, DeviceSpecificActions) == 0x0230);
static_assert(offsetof(UTutorialPopupStyleWidget, DisplayType) == 0x0300);
static_assert(offsetof(UTutorialPopupStyleWidget, ContentVerticalBox) == 0x0318);
static_assert(offsetof(UTutorialPopupStyleWidget, TutorialTagBox) == 0x0320);
static_assert(offsetof(UTutorialPopupStyleWidget, PreFlavorTextBlock) == 0x0328);
static_assert(offsetof(UTutorialPopupStyleWidget, NameTextBlock) == 0x0330);
static_assert(offsetof(UTutorialPopupStyleWidget, DescriptionTextBlock) == 0x0338);
static_assert(offsetof(UTutorialPopupStyleWidget, SubheaderTextblock) == 0x0340);
static_assert(offsetof(UTutorialPopupStyleWidget, SubDescriptionTextBlock) == 0x0348);
static_assert(offsetof(UTutorialPopupStyleWidget, ColoredOverlay) == 0x0350);
static_assert(offsetof(UTutorialPopupStyleWidget, ColoredTextBlock) == 0x0358);
static_assert(offsetof(UTutorialPopupStyleWidget, ColoredImage) == 0x0360);
static_assert(offsetof(UTutorialPopupStyleWidget, MascotImage) == 0x0368);
static_assert(offsetof(UTutorialPopupStyleWidget, OptionalBindings) == 0x0370);
static_assert(offsetof(UTutorialPopupStyleWidget, OptionalBindingOne) == 0x0378);
static_assert(offsetof(UTutorialPopupStyleWidget, OptionalBindingTwo) == 0x0380);
static_assert(offsetof(UTutorialPopupStyleWidget, PrimaryInputLabel) == 0x0388);
static_assert(offsetof(UTutorialPopupStyleWidget, SecondaryInputLabel) == 0x0390);
static_assert(offsetof(UTutorialPopupStyleWidget, PrimaryButton) == 0x0398);
static_assert(offsetof(UTutorialPopupStyleWidget, SecondaryButton) == 0x03A0);
static_assert(offsetof(UTutorialPopupStyleWidget, BackingBotSizeBox) == 0x03A8);
static_assert(offsetof(UTutorialPopupStyleWidget, BackingBot) == 0x03B0);
static_assert(offsetof(UTutorialPopupWidget, BGAlpha) == 0x0328);
static_assert(offsetof(UTutorialPopupWidget, StyleContainerOverlay) == 0x0330);
static_assert(offsetof(UTutorialPopupWidget, CachedCurrentTutorialWidget) == 0x0338);
static_assert(offsetof(ATutorialTriggerVolume, TutorialEvent) == 0x0358);
static_assert(offsetof(UUglyStickStatusEffect, OriginalBoneModPreset) == 0x0188);
static_assert(offsetof(UUglyStickStatusEffect, UglyStickBoneModPreset) == 0x0190);
static_assert(offsetof(UUglyStickStatusEffect, DuplicatePreset) == 0x0198);
static_assert(offsetof(UUIFlipBookData, FlipbookTexture) == 0x0048);
static_assert(offsetof(UUnlockAbilityStatusEffect, UnlockedAbility) == 0x0188);
static_assert(offsetof(FResolutionFontSizeData, DebugName) == 0x0000);
static_assert(offsetof(FResolutionFontSizeData, Resolution) == 0x0010);
static_assert(offsetof(URenderThreadLoadingScreenWidget, LoadingImages) == 0x0290);
static_assert(offsetof(URenderThreadLoadingScreenWidget, LoadingTips) == 0x02A0);
static_assert(offsetof(URenderThreadLoadingScreenWidget, LoadingImage) == 0x02C0);
static_assert(offsetof(URenderThreadLoadingScreenWidget, BlockerImage) == 0x02C8);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock) == 0x02D0);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock0) == 0x02D8);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock1) == 0x02E0);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock2) == 0x02E8);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock3) == 0x02F0);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock4) == 0x02F8);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock5) == 0x0300);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock6) == 0x0308);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock7) == 0x0310);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock8) == 0x0318);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipTextBlock9) == 0x0320);
static_assert(offsetof(URenderThreadLoadingScreenWidget, TipArrayInvalidationBox) == 0x0328);
static_assert(offsetof(URenderThreadLoadingScreenWidget, AnimatingMascot) == 0x0330);
static_assert(offsetof(URenderThreadLoadingScreenWidget, ResolutionFontSizes) == 0x0338);
static_assert(offsetof(URenderThreadLoadingScreenWidget, MascotFBTexture) == 0x0348);
static_assert(offsetof(URenderThreadLoadingScreenWidget, MascotFBMaterial) == 0x0370);
static_assert(offsetof(URenderThreadLoadingScreenWidget, MascotFBInstance) == 0x0398);
static_assert(offsetof(URenderThreadLoadingScreenWidget, MascotFBTexturePtr) == 0x03C0);
static_assert(offsetof(URenderThreadLoadingScreenWidget, MascotFBMaterialPtr) == 0x03C8);
static_assert(offsetof(URenderThreadLoadingScreenWidget, MascotFBInstancePtr) == 0x03D0);
static_assert(offsetof(FVendorStockDescriptor, LootTable) == 0x0000);
static_assert(offsetof(FVendorStockDescriptor, GenerationConditionsDataAsset) == 0x0010);
static_assert(offsetof(FVendorStockDescriptor, DescriptorGuid) == 0x0018);
static_assert(offsetof(FPerkCostModifier, Perk) == 0x0000);
static_assert(offsetof(UVendorComponent, VendorName) == 0x00E0);
static_assert(offsetof(UVendorComponent, VendorContainer) == 0x00E8);
static_assert(offsetof(UVendorComponent, VendorStockDescriptors) == 0x0110);
static_assert(offsetof(UVendorComponent, VendorLootTables) == 0x0120);
static_assert(offsetof(UVendorComponent, OneOffLootTables) == 0x0130);
static_assert(offsetof(UVendorComponent, RestrictedLootTables) == 0x0140);
static_assert(offsetof(UVendorComponent, OwningFaction) == 0x0158);
static_assert(offsetof(UVendorComponent, CostModifierPerks) == 0x0160);
static_assert(offsetof(UVendorComponent, TransactionCompleteAudioEvent) == 0x0170);
static_assert(offsetof(UVendorComponent, VendorCloseAudioEvent) == 0x0178);
static_assert(offsetof(UVendorWidget, RestrictedLockedTexture) == 0x0310);
static_assert(offsetof(UVendorWidget, RestrictedUnlockedTexture) == 0x0318);
static_assert(offsetof(UVendorWidget, PerkAdditionalStock) == 0x0320);
static_assert(offsetof(UVendorWidget, PerkBuyingPrice) == 0x0328);
static_assert(offsetof(UVendorWidget, PerkSurcharge) == 0x0330);
static_assert(offsetof(UVendorWidget, HoveredItem) == 0x0338);
static_assert(offsetof(UVendorWidget, VendorNameTextBlock) == 0x0340);
static_assert(offsetof(UVendorWidget, FactionImage) == 0x0348);
static_assert(offsetof(UVendorWidget, ActionHBox) == 0x0350);
static_assert(offsetof(UVendorWidget, ActionValueTextBlock) == 0x0358);
static_assert(offsetof(UVendorWidget, SellDisabledMessage) == 0x0360);
static_assert(offsetof(UVendorWidget, RestrictedVerticalBox) == 0x0368);
static_assert(offsetof(UVendorWidget, RestrictedIcon) == 0x0370);
static_assert(offsetof(UVendorWidget, RestrictedHeaderTextBlock) == 0x0378);
static_assert(offsetof(UVendorWidget, RestrictedDescTextBlock) == 0x0380);
static_assert(offsetof(UVendorWidget, BuySellItemDetailsVerticalBox) == 0x0388);
static_assert(offsetof(UVendorWidget, ItemNameTextBlock) == 0x0390);
static_assert(offsetof(UVendorWidget, ItemDescTextBlock) == 0x0398);
static_assert(offsetof(UVendorWidget, ItemModdingVerticalBox) == 0x03A0);
static_assert(offsetof(UVendorWidget, InstalledModificationsTextBlock) == 0x03A8);
static_assert(offsetof(UVendorWidget, InstalledModsVerticalBox) == 0x03B0);
static_assert(offsetof(UVendorWidget, ModWidget) == 0x03B8);
static_assert(offsetof(UVendorWidget, RepairItemDetailsVerticalBox) == 0x03C0);
static_assert(offsetof(UVendorWidget, CurrentRepairStatusSizeBox) == 0x03C8);
static_assert(offsetof(UVendorWidget, CurrentRepairStatusBar) == 0x03D0);
static_assert(offsetof(UVendorWidget, CurrentRepairPristineStatusSizeBox) == 0x03D8);
static_assert(offsetof(UVendorWidget, CurrentRepairPristineStatusBar) == 0x03E0);
static_assert(offsetof(UVendorWidget, CurrentRepairStatusTextBlock) == 0x03E8);
static_assert(offsetof(UVendorWidget, RepairedStatusSizeBox) == 0x03F0);
static_assert(offsetof(UVendorWidget, RepairedStatusBar) == 0x03F8);
static_assert(offsetof(UVendorWidget, RepairedPristineSizeBox) == 0x0400);
static_assert(offsetof(UVendorWidget, RepairedPristineStatusBar) == 0x0408);
static_assert(offsetof(UVendorWidget, RepairedPristineStatusTextBlock) == 0x0410);
static_assert(offsetof(UVendorWidget, PreItemStat) == 0x0418);
static_assert(offsetof(UVendorWidget, PostItemStat) == 0x0420);
static_assert(offsetof(UVendorWidget, DiscountSurchargeTextBlock) == 0x0428);
static_assert(offsetof(UVendorWidget, CartInfoWidget) == 0x0430);
static_assert(offsetof(UVendorWidget, PlayerStats) == 0x0438);
static_assert(offsetof(UVendorWidget, LabelGroup) == 0x0440);
static_assert(offsetof(UVendorWidget, ActionInputLabelBuy) == 0x0448);
static_assert(offsetof(UVendorWidget, ActionInputLabelSell) == 0x0450);
static_assert(offsetof(UVendorWidget, ActionInputLabelRepair) == 0x0458);
static_assert(offsetof(UVendorWidget, NavigationGroupWidget) == 0x0460);
static_assert(offsetof(UVendorWidget, ScrollingWidgetGroup) == 0x0468);
static_assert(offsetof(UVendorWidget, PageScrollBox) == 0x0470);
static_assert(offsetof(UVendorWidget, PerkStockHBox) == 0x0478);
static_assert(offsetof(UVendorWidget, PerkStockDesc) == 0x0480);
static_assert(offsetof(UVendorWidget, PerkPriceHBox) == 0x0488);
static_assert(offsetof(UVendorWidget, PerkPriceDesc) == 0x0490);
static_assert(offsetof(UVendorWidget, PerkSurchargeHBox) == 0x0498);
static_assert(offsetof(UVendorWidget, PerkSurchargeDesc) == 0x04A0);
static_assert(offsetof(UVendorWidget, VendorViewer) == 0x04A8);
static_assert(offsetof(UVendorWidget, VendorSubNavigationWidget) == 0x04B0);
static_assert(offsetof(UVendorWidget, VendorFilterType) == 0x04B8);
static_assert(offsetof(UVendorWidget, PlayerSellViewer) == 0x04C0);
static_assert(offsetof(UVendorWidget, PlayerSellSubNavigationWidget) == 0x04C8);
static_assert(offsetof(UVendorWidget, PlayerSellFilterType) == 0x04D0);
static_assert(offsetof(UVendorWidget, PlayerRepairViewer) == 0x04D8);
static_assert(offsetof(UVendorWidget, PlayerRepairSubNavigationWidget) == 0x04E0);
static_assert(offsetof(UVendorWidget, PlayerRepairFilterType) == 0x04E8);
static_assert(offsetof(UVendorWidget, ItemRepairClass) == 0x04F0);
static_assert(offsetof(UVendorWidget, StackSplittingClass) == 0x04F8);
static_assert(offsetof(UVendorWidget, VendorNiceSequence) == 0x0500);
static_assert(offsetof(UWaitTimeSliderWidget, LeftButton) == 0x0310);
static_assert(offsetof(UWaitTimeSliderWidget, RightButton) == 0x0318);
static_assert(offsetof(UWaitTimeSliderWidget, Slider) == 0x0320);
static_assert(offsetof(UWaitTimeSliderWidget, GamepadNextAudio) == 0x0328);
static_assert(offsetof(FWaitData, LocString) == 0x0004);
static_assert(offsetof(UWaitTimeWidget, WaitDurationTextBlock) == 0x0308);
static_assert(offsetof(UWaitTimeWidget, ConfirmButton) == 0x0310);
static_assert(offsetof(UWaitTimeWidget, CancelButton) == 0x0318);
static_assert(offsetof(UWaitTimeWidget, LabelGroup) == 0x0320);
static_assert(offsetof(UWaitTimeWidget, RestSlider) == 0x0328);
static_assert(offsetof(UWaitTimeWidget, MinTimeTextBlock) == 0x0330);
static_assert(offsetof(UWaitTimeWidget, MaxTimeTextBlock) == 0x0338);
static_assert(offsetof(UWaitTimeWidget, WaitTypeData) == 0x0340);
static_assert(offsetof(UWorkbenchPageWidget, Weapons) == 0x03C0);
static_assert(offsetof(UWorkbenchPageWidget, Armor) == 0x03C8);
static_assert(offsetof(UWorkbenchPageWidget, InputLabelGroup) == 0x03D0);
static_assert(offsetof(UWorkbenchPageWidget, FlavorTextWidget) == 0x03D8);
static_assert(offsetof(UWorkbenchPageWidget, DisabledMessage) == 0x03E0);
static_assert(offsetof(UWBBreakdownPageWidget, CartInfoWidget) == 0x0400);
static_assert(offsetof(UWBModificationPageWidget, ItemModdingClass) == 0x0400);
static_assert(offsetof(UWBModificationPageWidget, ItemNameTextBlock) == 0x0408);
static_assert(offsetof(UWBModificationPageWidget, ItemDescTextBlock) == 0x0410);
static_assert(offsetof(UWBModificationPageWidget, ItemDetailsContainer) == 0x0418);
static_assert(offsetof(UWBModificationPageWidget, EquipmentMods) == 0x0420);
static_assert(offsetof(UWBRepairPageWidget, RepairInfoWidget) == 0x0418);
static_assert(offsetof(UWBRepairPageWidget, CartInfoWidget) == 0x0420);
static_assert(offsetof(UWBRepairPageWidget, InfoVerticalBox) == 0x0428);
static_assert(offsetof(UWBUpgradePageWidget, RepairInfoWidget) == 0x0400);
static_assert(offsetof(UWBUpgradePageWidget, CartInfoWidget) == 0x0408);
static_assert(offsetof(UWBUpgradePageWidget, TinkeringClass) == 0x0410);
static_assert(offsetof(FOnHitStatusEffects, Skill) == 0x0000);
static_assert(offsetof(FOnHitStatusEffects, SkillModifierStat) == 0x0008);
static_assert(offsetof(FOnHitStatusEffects, StatusEffect) == 0x0018);
static_assert(offsetof(UWeapon, SkeletalMeshComponent) == 0x0200);
static_assert(offsetof(UWeapon, StatComponent) == 0x0208);
static_assert(offsetof(UWeapon, OwnerStatComponent) == 0x0210);
static_assert(offsetof(UWeapon, CharacterInfoComponent) == 0x0218);
static_assert(offsetof(UWeapon, TTDComponent) == 0x0220);
static_assert(offsetof(UWeapon, PrimaryMode) == 0x0228);
static_assert(offsetof(UWeapon, AmmoPool) == 0x0230);
static_assert(offsetof(UWeapon, WeaponModContainer) == 0x0238);
static_assert(offsetof(UWeapon, WeaponLocationSpellAsset) == 0x0240);
static_assert(offsetof(UWeapon, WeaponMesh) == 0x0248);
static_assert(offsetof(UWeapon, WeaponAnimInstance) == 0x0270);
static_assert(offsetof(UWeapon, FPVVisualsClass) == 0x02B0);
static_assert(offsetof(UWeapon, TriggerEffectPS5) == 0x02D8);
static_assert(offsetof(UWeapon, TPVVisualsClass) == 0x02E0);
static_assert(offsetof(UWeapon, FPAnimationsClass) == 0x0308);
static_assert(offsetof(UWeapon, CreatureTPAnimationsClass) == 0x0330);
static_assert(offsetof(UWeapon, SharedVisualsClass) == 0x0358);
static_assert(offsetof(UWeapon, SoundEffectsClass) == 0x0380);
static_assert(offsetof(UWeapon, PreviewAnimationsClass) == 0x03A8);
static_assert(offsetof(UWeapon, RpgStatCollection) == 0x03D0);
static_assert(offsetof(UWeapon, MicroModTables) == 0x0438);
static_assert(offsetof(UWeapon, EquippedMicroMod) == 0x0448);
static_assert(offsetof(UWeapon, Skill) == 0x0450);
static_assert(offsetof(UWeapon, SkillSecondary) == 0x0451);
static_assert(offsetof(UWeapon, WeaponCategory) == 0x045C);
static_assert(offsetof(UWeapon, AISettings) == 0x0468);
static_assert(offsetof(UWeapon, CompanionOverrideAISettings) == 0x0470);
static_assert(offsetof(UWeapon, AssetCollection) == 0x0478);
static_assert(offsetof(UWeapon, OnHitStatusEffects) == 0x0480);
static_assert(offsetof(UWeapon, WeaponSpellSet) == 0x0490);
static_assert(offsetof(UWeapon, CritSpell) == 0x04F0);
static_assert(offsetof(UWeapon, OnHitSpell) == 0x04F8);
static_assert(offsetof(UWeapon, CurrentVisuals) == 0x0550);
static_assert(offsetof(UWeapon, ActiveWorldNames) == 0x05C0);
static_assert(offsetof(FAnimEventGameplayTagData, GameplayTag) == 0x0000);
static_assert(offsetof(FAnimEventGameplayTagData, AnimEventEffect) == 0x0008);
static_assert(offsetof(FAnimEventGameplayTagContainer, AnimationData) == 0x0000);
static_assert(offsetof(UWeaponAnimations, JumpSequence) == 0x0208);
static_assert(offsetof(UWeaponAnimations, FallSequence) == 0x0210);
static_assert(offsetof(UWeaponAnimations, LandSequence) == 0x0218);
static_assert(offsetof(UWeaponAnimations, LowGravJumpSequence) == 0x0220);
static_assert(offsetof(UWeaponAnimations, LowGravFallSequence) == 0x0228);
static_assert(offsetof(UWeaponAnimations, LowGravLandSequence) == 0x0230);
static_assert(offsetof(UWeaponAnimations, DeathMontages) == 0x0238);
static_assert(offsetof(UWeaponAnimations, CowerMontage) == 0x0240);
static_assert(offsetof(UWeaponAnimations, DodgeLeftMontage) == 0x0248);
static_assert(offsetof(UWeaponAnimations, DodgeRightMontage) == 0x0250);
static_assert(offsetof(UWeaponAnimations, DodgeBackMontage) == 0x0258);
static_assert(offsetof(UWeaponAnimations, DodgeForwardMontage) == 0x0260);
static_assert(offsetof(UWeaponAnimations, TeleportEnterMontage) == 0x0268);
static_assert(offsetof(UWeaponAnimations, TeleportEmergingMontage) == 0x0270);
static_assert(offsetof(UWeaponAnimations, TeleportExitMontage) == 0x0278);
static_assert(offsetof(UWeaponAnimations, Disables) == 0x0280);
static_assert(offsetof(UWeaponAnimations, OptionalAnimations) == 0x0290);
static_assert(offsetof(FHitFlinchAnim, BodyParts) == 0x0000);
static_assert(offsetof(FHitFlinchAnim, Anim) == 0x0020);
static_assert(offsetof(UWeaponAnimationsCreature, HitFlinches) == 0x02A0);
static_assert(offsetof(UWeaponAnimationsCreature, BlockingHitFlinches) == 0x02B0);
static_assert(offsetof(UWeaponAnimationSet, DeathMontages) == 0x0038);
static_assert(offsetof(UWeaponAnimationSet, DodgeLeftMontage) == 0x0040);
static_assert(offsetof(UWeaponAnimationSet, DodgeRightMontage) == 0x0048);
static_assert(offsetof(UWeaponAnimationSet, DodgeBackMontage) == 0x0050);
static_assert(offsetof(UWeaponAnimationSet, Disables) == 0x0060);
static_assert(offsetof(UWeaponAnimationsFPV, RunSequence) == 0x02A0);
static_assert(offsetof(UWeaponAnimationsFPV, RunDirectionAimOffset) == 0x02A8);
static_assert(offsetof(UWeaponAnimationsFPV, IdleSequence) == 0x02B0);
static_assert(offsetof(UWeaponAnimationsFPV, LocomotionBlendSpace) == 0x02B8);
static_assert(offsetof(UWeaponAnimationsFPV, LookAimOffset) == 0x02C0);
static_assert(offsetof(UWeaponAnimationsFPV, StartCrouch) == 0x02C8);
static_assert(offsetof(UWeaponAnimationsFPV, StopCrouch) == 0x02D0);
static_assert(offsetof(UWeaponAnimationsFPV, WeaponCharge) == 0x02D8);
static_assert(offsetof(UWeaponAnimationsFPV, HitReact) == 0x02E0);
static_assert(offsetof(UWeaponAnimationsFPV, BlockStart) == 0x02E8);
static_assert(offsetof(UWeaponAnimationsFPV, BlockIdle) == 0x02F0);
static_assert(offsetof(UWeaponAnimationsFPV, BlockEnd) == 0x02F8);
static_assert(offsetof(UWeaponAnimationsFPV, BlockHit) == 0x0300);
static_assert(offsetof(UWeaponAnimationsFPV, BlockRunSequence) == 0x0308);
static_assert(offsetof(UWeaponAnimationsFPV, BlockRunDirectionAimOffset) == 0x0310);
static_assert(offsetof(UWeaponAnimationsFPV, BlockLocomotionBlendSpace) == 0x0318);
static_assert(offsetof(UWeaponAnimationsFPV, BlockLookAimOffset) == 0x0320);
static_assert(offsetof(UWeaponAnimationsFPV, DodgeLeftBlockMontage) == 0x0328);
static_assert(offsetof(UWeaponAnimationsFPV, DodgeRightBlockMontage) == 0x0330);
static_assert(offsetof(UWeaponAnimationsFPV, DodgeBackBlockMontage) == 0x0338);
static_assert(offsetof(UWeaponAnimationsFPV, DodgeForwardBlockMontage) == 0x0340);
static_assert(offsetof(UWeaponAnimationsFPV, BlockJumpSequence) == 0x0348);
static_assert(offsetof(UWeaponAnimationsFPV, BlockFallSequence) == 0x0350);
static_assert(offsetof(UWeaponAnimationsFPV, BlockLandSequence) == 0x0358);
static_assert(offsetof(UWeaponAnimationsFPV, LowGravBlockJumpSequence) == 0x0368);
static_assert(offsetof(UWeaponAnimationsFPV, LowGravBlockFallSequence) == 0x0370);
static_assert(offsetof(UWeaponAnimationsFPV, LowGravBlockLandSequence) == 0x0378);
static_assert(offsetof(UWeaponAnimationsFPV, StartCrouchBlock) == 0x0380);
static_assert(offsetof(UWeaponAnimationsFPV, StopCrouchBlock) == 0x0388);
static_assert(offsetof(UWeaponAnimationsFPV, SprintSequence) == 0x0390);
static_assert(offsetof(UWeaponAnimationsFPV, SprintStartSequence) == 0x0398);
static_assert(offsetof(UWeaponAnimationsFPV, SprintEndSequence) == 0x03A0);
static_assert(offsetof(UWeaponAnimationsFPV, LowGravSprintSequence) == 0x03A8);
static_assert(offsetof(UWeaponAnimationsFPV, LowGravSprintStartSequence) == 0x03B0);
static_assert(offsetof(UWeaponAnimationsFPV, LowGravSprintEndSequence) == 0x03B8);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimRunSequence) == 0x03C0);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimRunDirectionAimOffset) == 0x03C8);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimIdleSequence) == 0x03D0);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimLocomotionBlendSpace) == 0x03D8);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimLookAimOffset) == 0x03E0);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimJumpSequence) == 0x03E8);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimFallSequence) == 0x03F0);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimLandSequence) == 0x03F8);
static_assert(offsetof(UWeaponAnimationsFPV, LowGravFineAimJumpSequence) == 0x0408);
static_assert(offsetof(UWeaponAnimationsFPV, LowGravFineAimFallSequence) == 0x0410);
static_assert(offsetof(UWeaponAnimationsFPV, LowGravFineAimLandSequence) == 0x0418);
static_assert(offsetof(UWeaponAnimationsFPV, StartCrouchFineAim) == 0x0420);
static_assert(offsetof(UWeaponAnimationsFPV, StopCrouchFineAim) == 0x0428);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimWeaponCharge) == 0x0430);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimDodgeForwardMontage) == 0x0438);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimDodgeLeftMontage) == 0x0440);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimDodgeRightMontage) == 0x0448);
static_assert(offsetof(UWeaponAnimationsFPV, FineAimDodgeBackMontage) == 0x0450);
static_assert(offsetof(UWeaponAnimationsTPV, CombatAimBlendSpace) == 0x02D0);
static_assert(offsetof(UWeaponAnimationsTPV, CombatIdleSequences) == 0x02D8);
static_assert(offsetof(UWeaponAnimationsTPV, CombatIdle) == 0x02E8);
static_assert(offsetof(UWeaponAnimationsTPV, HobbledWalkForward) == 0x02F0);
static_assert(offsetof(UWeaponAnimationsTPV, CombatWalkForward) == 0x0300);
static_assert(offsetof(UWeaponAnimationsTPV, CombatRunForward) == 0x0310);
static_assert(offsetof(UWeaponAnimationsTPV, ForwardBlendSpace) == 0x0320);
static_assert(offsetof(UWeaponAnimationsTPV, RunForwardBlendSpace) == 0x0328);
static_assert(offsetof(UWeaponAnimationsTPV, CombatWalkBackward) == 0x0338);
static_assert(offsetof(UWeaponAnimationsTPV, CombatRunBackward) == 0x0348);
static_assert(offsetof(UWeaponAnimationsTPV, BackwardBlendSpace) == 0x0358);
static_assert(offsetof(UWeaponAnimationsTPV, RunBackwardBlendSpace) == 0x0360);
static_assert(offsetof(UWeaponAnimationsTPV, CombatWalkLeft) == 0x0370);
static_assert(offsetof(UWeaponAnimationsTPV, CombatRunLeft) == 0x0380);
static_assert(offsetof(UWeaponAnimationsTPV, LeftBlendSpace) == 0x0390);
static_assert(offsetof(UWeaponAnimationsTPV, RunLeftBlendSpace) == 0x0398);
static_assert(offsetof(UWeaponAnimationsTPV, CombatWalkRight) == 0x03A8);
static_assert(offsetof(UWeaponAnimationsTPV, CombatRunRight) == 0x03B8);
static_assert(offsetof(UWeaponAnimationsTPV, RightBlendSpace) == 0x03C8);
static_assert(offsetof(UWeaponAnimationsTPV, RunRightBlendSpace) == 0x03D0);
static_assert(offsetof(UWeaponAnimationsTPV, CombatTurnInPlace) == 0x03E0);
static_assert(offsetof(UWeaponAnimationsTPV, CombatCrouchStartSequence) == 0x03F0);
static_assert(offsetof(UWeaponAnimationsTPV, CombatCrouchIdleSequence) == 0x03F8);
static_assert(offsetof(UWeaponAnimationsTPV, CombatCrouchEndSequence) == 0x0400);
static_assert(offsetof(UWeaponAnimationsTPV, ReadyFireArmPose) == 0x0408);
static_assert(offsetof(UWeaponAnimationsTPV, IdleFireArmPose) == 0x0410);
static_assert(offsetof(UWeaponAnimationsTPV, WeaponDownWalkArm) == 0x0418);
static_assert(offsetof(UWeaponAnimationsTPV, WeaponDownRunArm) == 0x0420);
static_assert(offsetof(UWeaponAnimationsTPV, BlockStartSequence) == 0x0430);
static_assert(offsetof(UWeaponAnimationsTPV, BlockIdleSequence) == 0x0438);
static_assert(offsetof(UWeaponAnimationsTPV, SearchingStartSequence) == 0x0440);
static_assert(offsetof(UWeaponAnimationsTPV, SearchingIdleSequences) == 0x0448);
static_assert(offsetof(UWeaponAnimationsTPV, DeadBodySearchSequences) == 0x0458);
static_assert(offsetof(UWeaponAnimationsTPV, GetUpFromFaceDownPose) == 0x0468);
static_assert(offsetof(UWeaponAnimationsTPV, GetUpFromFaceUpPose) == 0x0478);
static_assert(offsetof(UWeaponAnimInstance, Weapon) == 0x02C8);
static_assert(offsetof(UWeaponAnimInstance, PrimaryDamageType) == 0x02D8);
static_assert(offsetof(UWeaponAnimInstance, SecondaryDamageType) == 0x02D9);
static_assert(offsetof(UWeaponAnimInstance, WeaponOffset) == 0x02E8);
static_assert(offsetof(UWeaponAnimInstance, WeaponRotation) == 0x02F4);
static_assert(offsetof(UWeaponAnimInstance, WeaponScale) == 0x0300);
static_assert(offsetof(FWeaponModDefaultVisuals, WeaponCategories) == 0x0000);
static_assert(offsetof(FWeaponModDefaultVisuals, DefaultVisuals) == 0x0020);
static_assert(offsetof(UWeaponMod, PickupMesh) == 0x0118);
static_assert(offsetof(UWeaponMod, EquippableCategories) == 0x0150);
static_assert(offsetof(UWeaponMod, ModificationSlot) == 0x0170);
static_assert(offsetof(UWeaponMod, DamageTypeOverride) == 0x0178);
static_assert(offsetof(UWeaponMod, ScopeData) == 0x0180);
static_assert(offsetof(UWeaponMod, WeaponStatModifiers) == 0x01A8);
static_assert(offsetof(UWeaponMod, DefaultWeaponVisuals) == 0x01B8);
static_assert(offsetof(UWeaponMod, Spell) == 0x01C8);
static_assert(offsetof(FWeaponModSlot, SlotDefaultVisuals) == 0x0008);
static_assert(offsetof(FWeaponModSlot, DefaultMod) == 0x0018);
static_assert(offsetof(FWeaponModSlot, CurrentMod) == 0x0020);
static_assert(offsetof(FWeaponModSlot, CurrentVisuals) == 0x0038);
static_assert(offsetof(FWeaponModSlot, PendingRemovalVisuals) == 0x0040);
static_assert(offsetof(FWeaponModVisualOverride, VisualOverride) == 0x0010);
static_assert(offsetof(FWeaponModProjectileOverride, OverrideProjectileClass) == 0x0010);
static_assert(offsetof(FWeaponModProjectileOverride, OverrideInstantHitData) == 0x0038);
static_assert(offsetof(UWeaponModContainer, ModSlots) == 0x0030);
static_assert(offsetof(UWeaponModContainer, ModVisualOverrides) == 0x0080);
static_assert(offsetof(UWeaponModContainer, ProjectileOverrides) == 0x0090);
static_assert(offsetof(UWeaponRadialSectionWidget, VerticalBox) == 0x0288);
static_assert(offsetof(UWeaponRadialSectionWidget, Image) == 0x0290);
static_assert(offsetof(UWeaponSelectWidget, Radial) == 0x0320);
static_assert(offsetof(UWeaponSelectWidget, WeaponSection0) == 0x0328);
static_assert(offsetof(UWeaponSelectWidget, WeaponSection1) == 0x0330);
static_assert(offsetof(UWeaponSelectWidget, WeaponSection2) == 0x0338);
static_assert(offsetof(UWeaponSelectWidget, WeaponSection3) == 0x0340);
static_assert(offsetof(UWeaponSelectWidget, AmmoSection0) == 0x0348);
static_assert(offsetof(UWeaponSelectWidget, AmmoSection1) == 0x0350);
static_assert(offsetof(UWeaponSelectWidget, AmmoSection2) == 0x0358);
static_assert(offsetof(UWeaponSelectWidget, Section0) == 0x0360);
static_assert(offsetof(UWeaponSelectWidget, Section1) == 0x0368);
static_assert(offsetof(UWeaponSelectWidget, Section2) == 0x0370);
static_assert(offsetof(UWeaponSelectWidget, Section3) == 0x0378);
static_assert(offsetof(UWeaponSelectWidget, Section4) == 0x0380);
static_assert(offsetof(UWeaponSelectWidget, Section5) == 0x0388);
static_assert(offsetof(UWeaponSelectWidget, Section6) == 0x0390);
static_assert(offsetof(UWeaponStateWidget, WeaponValueTextBlock) == 0x0308);
static_assert(offsetof(UWeaponStateWidget, WeaponValueMaxTextBlock) == 0x0310);
static_assert(offsetof(UWeaponStateWidget, MaxAmmoContainer) == 0x0318);
static_assert(offsetof(UWeaponStatusEffectApplier, WeaponFireEffect) == 0x0050);
static_assert(offsetof(UWeaponStatusEffectApplier, WeaponHitTargetEffect) == 0x0058);
static_assert(offsetof(UWeaponVisualStateModVisual, Event) == 0x0068);
static_assert(offsetof(AWorkbench, InteractableComponent) == 0x02C0);
static_assert(offsetof(UWorkbenchWidget, ModificationPage) == 0x0310);
static_assert(offsetof(UWorkbenchWidget, UpgradePage) == 0x0318);
static_assert(offsetof(UWorkbenchWidget, RepairPage) == 0x0320);
static_assert(offsetof(UWorkbenchWidget, BreakdownPage) == 0x0328);
static_assert(offsetof(UWorkbenchWidget, NavigationBar) == 0x0330);
static_assert(offsetof(UWorkbenchWidget, PageScrollBox) == 0x0338);
static_assert(offsetof(UWorkbenchWidget, ScrollingWidgetGroup) == 0x0340);
static_assert(offsetof(UWorkbenchWidget, PlayerStats) == 0x0348);
static_assert(offsetof(FHitTypeData, Curve) == 0x0000);
static_assert(offsetof(FHitTypeData, TextMovementDirectionType) == 0x001C);
static_assert(offsetof(FDamageTypeColors, TextColor) == 0x0000);
static_assert(offsetof(FDamageTypeColors, OutlineColor) == 0x0001);
static_assert(offsetof(UWorldSpaceDamageTextGenerator, WeakspotHits) == 0x0030);
static_assert(offsetof(UWorldSpaceDamageTextGenerator, StandardHits) == 0x0050);
static_assert(offsetof(UWorldSpaceDamageTextGenerator, GrazeHits) == 0x0070);
static_assert(offsetof(UWorldSpaceDamageTextGenerator, DamageTypeColors) == 0x0090);
static_assert(offsetof(UWorldSpaceDamageTextGenerator, HealingColor) == 0x00E0);
static_assert(offsetof(UWorldSpaceDamageTextGenerator, DamageTextSubclass) == 0x00F0);
static_assert(offsetof(UWorldSpaceDamageTextGenerator, DamageTextPool) == 0x00F8);
static_assert(offsetof(UWormAnimInstance, HipOffset) == 0x0964);
static_assert(offsetof(UWormAnimInstance, LocomotionTurnInPlace) == 0x0970);
static_assert(offsetof(UWormAnimInstance, CombatTurnInPlace) == 0x0980);
static_assert(offsetof(UWormAnimInstance, TeleportIdleAnim) == 0x0998);
static_assert(offsetof(FCauseDamageInfo, InstigatorController) == 0x0000);
static_assert(offsetof(FCauseDamageInfo, SourceActor) == 0x0008);
static_assert(offsetof(FCauseDamageInfo, Target) == 0x0010);
static_assert(offsetof(FCauseDamageInfo, DamageEventType) == 0x0018);
static_assert(offsetof(FCauseDamageInfo, ImpactLocation) == 0x0028);
static_assert(offsetof(FCauseDamageInfo, ImpactDirection) == 0x0034);
static_assert(offsetof(FCauseDamageInfo, HitBone) == 0x0040);
static_assert(offsetof(FCauseDamageInfo, HitPhysMaterial) == 0x0048);
static_assert(offsetof(FCauseDamageInfo, BodyPartHit) == 0x0050);
static_assert(offsetof(FCauseDamageInfo, DamageType) == 0x0058);
static_assert(offsetof(FCauseDamageInfo, WeaponCategory) == 0x0060);
static_assert(offsetof(FItemStackSplit, ItemStack) == 0x0000);
static_assert(offsetof(FInteractionDescription, Interactee) == 0x0000);
static_assert(offsetof(FInteractionDescription, Initiator) == 0x0008);
static_assert(offsetof(FInteractionDescription, Interaction) == 0x0010);
static_assert(offsetof(FInteractionDescription, Interactable) == 0x0014);
static_assert(offsetof(FComponentEvent, Dispatcher) == 0x0000);
static_assert(offsetof(FAISoundDetectionData, SoundType) == 0x0018);
static_assert(offsetof(FAISoundDetectionData, ShoutTarget) == 0x001C);
static_assert(offsetof(FJointDriverData, IKChainName) == 0x0000);
static_assert(offsetof(FJointDriverData, FootID) == 0x0008);
static_assert(offsetof(FJointDriverData, BoneThatWillBeIKed) == 0x0014);
static_assert(offsetof(FJointDriverData, BoneToModify) == 0x0024);
static_assert(offsetof(FJointDriverData, UpperLegJoint) == 0x0034);
static_assert(offsetof(FJointDriverData, HipBoneToUseForHeightCalculation) == 0x0044);
static_assert(offsetof(FAnimNode_BatchJointDriver, Legs) == 0x00C8);
static_assert(offsetof(FAnimNode_BatchJointDriver, BackLeftName) == 0x00E4);
static_assert(offsetof(FAnimNode_BatchJointDriver, BackRightName) == 0x00EC);
static_assert(offsetof(FAnimNode_BatchJointDriver, FrontLeftName) == 0x00F4);
static_assert(offsetof(FAnimNode_BatchJointDriver, FrontRightName) == 0x00FC);
static_assert(offsetof(FAnimNode_BatchJointDriver, HipBoneToModify) == 0x0110);
static_assert(offsetof(FAnimNode_BatchJointDriver, BipedHipCounterBone) == 0x0120);
static_assert(offsetof(FAnimNode_BatchJointDriver, ConversationCameraBone) == 0x0130);
static_assert(offsetof(FAnimNode_BoneMatch, SourceBone) == 0x00C8);
static_assert(offsetof(FAnimNode_BoneMatch, TargetBone) == 0x00D8);
static_assert(offsetof(FAnimNode_CurveSlot, Source) == 0x0010);
static_assert(offsetof(FAnimNode_CurveSlot, SlotName) == 0x0020);
static_assert(offsetof(FAnimNode_EyeLidLimitEntry, UpperEyelidBone) == 0x0000);
static_assert(offsetof(FAnimNode_EyeLidLimitEntry, UpperEyelidMidBone) == 0x0010);
static_assert(offsetof(FAnimNode_EyeLidLimitEntry, LowerEyelidBone) == 0x0020);
static_assert(offsetof(FAnimNode_EyeLidLimitEntry, LowerEyelidMidBone) == 0x0030);
static_assert(offsetof(FAnimNode_EyeLidLimits, EyeLidEntries) == 0x00D0);
static_assert(offsetof(FAnimNode_EyeLookAt, BoneToModify) == 0x00C8);
static_assert(offsetof(FAnimNode_EyeLookAt, LookAtBone) == 0x00D8);
static_assert(offsetof(FAnimNode_EyeLookAt, LookAtSocket) == 0x00E8);
static_assert(offsetof(FAnimNode_EyeLookAt, LookAtLocation) == 0x00F0);
static_assert(offsetof(FAnimNode_EyeLookAt, LookAtAxis) == 0x00FC);
static_assert(offsetof(FAnimNode_EyeLookAt, LookUpAxis) == 0x00FE);
static_assert(offsetof(FAnimNode_JointDriver, IKChainName) == 0x00C8);
static_assert(offsetof(FAnimNode_JointDriver, FootID) == 0x00D0);
static_assert(offsetof(FAnimNode_JointDriver, BoneThatWillBeIKed) == 0x00DC);
static_assert(offsetof(FAnimNode_JointDriver, BoneToModify) == 0x00EC);
static_assert(offsetof(FAnimNode_JointDriver, UpperLegJoint) == 0x00FC);
static_assert(offsetof(FAnimNode_JointDriver, HipBoneToUseForHeightCalculation) == 0x010C);
static_assert(offsetof(FAnimNode_RandomSequenceNamed, ListName) == 0x001C);
static_assert(offsetof(FAnimNode_RandomSequenceNamed, SetUpdateName) == 0x0024);
static_assert(offsetof(FAnimNode_RotateBoneAboutBone, SourceBone) == 0x00C8);
static_assert(offsetof(FAnimNode_RotateBoneAboutBone, TargetBone) == 0x00D8);
static_assert(offsetof(FAnimNode_RotateBoneAboutBone, Rotation) == 0x00E8);
static_assert(offsetof(FBodyTrackingRegion, LocomotionLogic) == 0x0108);
static_assert(offsetof(FCharacterCreationAttributeData, AttributeValues) == 0x0000);
static_assert(offsetof(FCharacterCreationSkillData, StartingSkillCategories) == 0x0000);
static_assert(offsetof(FCharacterCreationPerkData, SelectedPerks) == 0x0000);
static_assert(offsetof(FCreationTemplate, TitleTextReference) == 0x0000);
static_assert(offsetof(FCreationTemplate, BodyTextReference) == 0x0008);
static_assert(offsetof(FCreationTemplate, Aptitude) == 0x0010);
static_assert(offsetof(FCreationTemplate, AttributeData) == 0x0018);
static_assert(offsetof(FCreationTemplate, SkillData) == 0x0068);
static_assert(offsetof(FCreationTemplate, PerkData) == 0x0088);
static_assert(offsetof(FCreationTemplate, AppearancePreset) == 0x0098);
static_assert(offsetof(FAddictionModifier, AddictionTag) == 0x0000);
static_assert(offsetof(FNodeConfig, CameraProperties) == 0x0008);
static_assert(offsetof(FBlockedActorData, LocationStatus) == 0x0004);
static_assert(offsetof(FMeleeAnim, WeaponEvent) == 0x0000);
static_assert(offsetof(FNavigationCategory, Name) == 0x0000);
static_assert(offsetof(FNavigationCategory, Brush) == 0x0008);
static_assert(offsetof(FDynamicEffectProperties, EffectDirection) == 0x0004);
static_assert(offsetof(FDynamicEffectProperties, EffectBone) == 0x0010);
static_assert(offsetof(FIKChainConfig, FootID) == 0x0000);
