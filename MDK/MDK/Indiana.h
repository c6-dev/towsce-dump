
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

/// dependency: BasicType
/// dependency: AIModule
/// dependency: AkAudio
/// dependency: AnimGraphRuntime
/// dependency: CinematicCamera
/// dependency: CoreUObject
/// dependency: DeveloperSettings
/// dependency: Engine
/// dependency: FaceFX
/// dependency: Foliage
/// dependency: GameplayTags
/// dependency: InputCore
/// dependency: LevelSequence
/// dependency: MediaAssets
/// dependency: MovieScene
/// dependency: NavigationSystem
/// dependency: Niagara
/// dependency: PhysicsCore
/// dependency: Slate
/// dependency: SlateCore
/// dependency: UMG

/// Class /Script/Indiana.IndianaUserWidget
/// Size: 0x0088 (0x000278 - 0x000300)
class UIndianaUserWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	SMember(FName)                                     AssetKey                                                    OFFSET(getStruct<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bStopOnlyGameInput                                          OFFSET(get<bool>, {0x298, 1, 0, 0})
	DMember(bool)                                      bRecordFocusHistory                                         OFFSET(get<bool>, {0x29A, 1, 0, 0})
	CMember(class UIndianaWidgetComponent*)            OwnerWidgetComponent                                        OFFSET(get<T>, {0x2A8, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaUserWidget.StartMinimize
	// void StartMinimize();                                                                                                    // [0x1866970] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.StartMaximize
	// void StartMaximize();                                                                                                    // [0x1866950] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.StartIntro
	// void StartIntro();                                                                                                       // [0x1866930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.SetDefaultUserFocus
	// void SetDefaultUserFocus();                                                                                              // [0x1866910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.RestoreOrSetDefaultUserFocus
	// void RestoreOrSetDefaultUserFocus();                                                                                     // [0x18668f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUserWidget.OnStartOutroCb
	// void OnStartOutroCb();                                                                                                   // [0x18668d0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnStartMinimizeCb
	// void OnStartMinimizeCb();                                                                                                // [0x18668b0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnStartMaximizeCb
	// void OnStartMaximizeCb();                                                                                                // [0x1866890] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnStartIntroCb
	// void OnStartIntroCb();                                                                                                   // [0x1866870] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnOutro
	// bool OnOutro(FDelegateProperty& AnimationCompleteCallback);                                                              // [0x18667b0] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnMinimize
	// bool OnMinimize(FDelegateProperty& AnimationCompleteCallback);                                                           // [0x18666f0] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnMaximize
	// bool OnMaximize(FDelegateProperty& AnimationCompleteCallback);                                                           // [0x1866630] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnIntro
	// bool OnIntro(FDelegateProperty& AnimationCompleteCallback);                                                              // [0x1866570] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnInputDeviceChanged
	// void OnInputDeviceChanged(bool bUsingGamepad);                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeOutroCb
	// void OnFinalizeOutroCb();                                                                                                // [0x1866550] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeMinimizeCb
	// void OnFinalizeMinimizeCb();                                                                                             // [0x1866530] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeMinimize
	// void OnFinalizeMinimize();                                                                                               // [0x1866510] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeMaximizeCb
	// void OnFinalizeMaximizeCb();                                                                                             // [0x18664f0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeMaximize
	// void OnFinalizeMaximize();                                                                                               // [0x18664d0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnFinalizeIntroCb
	// void OnFinalizeIntroCb();                                                                                                // [0x18664b0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaUserWidget.OnCounterZero
	// void OnCounterZero();                                                                                                    // [0x1866490] Native|Public        
	// Function /Script/Indiana.IndianaUserWidget.OnCounterNonZero
	// void OnCounterNonZero();                                                                                                 // [0x1866470] Native|Public        
	// Function /Script/Indiana.IndianaUserWidget.OnCancelShutdown
	// void OnCancelShutdown();                                                                                                 // [0x1866450] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.OnCancelMinimize
	// void OnCancelMinimize();                                                                                                 // [0x1866430] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaUserWidget.ObjectRefHasReferencers
	// bool ObjectRefHasReferencers();                                                                                          // [0x1866400] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.IsShuttingDown
	// bool IsShuttingDown(bool bIncludeTransitioning);                                                                         // [0x18662d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.IsMinimized
	// bool IsMinimized(bool bIncludeTransitioning);                                                                            // [0x1866230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.IsMaximized
	// bool IsMaximized(bool bIncludeTransitioning);                                                                            // [0x1866190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.GetOpenState
	// EWidgetOpenState GetOpenState();                                                                                         // [0x1866170] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUserWidget.GetIndianaUI
	// class AIndianaUI* GetIndianaUI();                                                                                        // [0x18660c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.AbilityOverviewChildWidget
/// Size: 0x0070 (0x000300 - 0x000370)
class UAbilityOverviewChildWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UProgressBar*)                       AbilityProgressBar                                          OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(float)                                     PulseDuration                                               OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     PulseInterpExponent                                         OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     FadeOutThreshold                                            OFFSET(get<float>, {0x360, 4, 0, 0})
	CMember(EAbilityPosition)                          AbilityPosition                                             OFFSET(get<T>, {0x364, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.AbilityOverviewChildWidget.OnAbilityCooldownComplete
	// void OnAbilityCooldownComplete();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewChildWidget.ModifyPulseScale
	// void ModifyPulseScale(float PulseScale);                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.AbilityOverviewDetailWidget
/// Size: 0x0090 (0x000370 - 0x000400)
class UAbilityOverviewDetailWidget : public UAbilityOverviewChildWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	DMember(bool)                                      bRegroupCommand                                             OFFSET(get<bool>, {0x370, 1, 0, 0})
	DMember(bool)                                      bGamepadAbility                                             OFFSET(get<bool>, {0x371, 1, 0, 0})
	CMember(class UTexture2D*)                         CompanionAttackBackgroundTexture                            OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UTexture2D*)                         CompanionAttackFillTexture                                  OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UTexture2D*)                         CompanionMoveToBackgroundTexture                            OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UTexture2D*)                         CompanionMoveToFillTexture                                  OFFSET(get<T>, {0x390, 8, 0, 0})
	DMember(float)                                     HoldFillRatio                                               OFFSET(get<float>, {0x398, 4, 0, 0})
	CMember(class UVerticalBox*)                       HoldPCBox                                                   OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UImage*)                             HoldRingPC                                                  OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UHorizontalBox*)                     HoldGamepadBox                                              OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UImage*)                             HoldRingGamepad                                             OFFSET(get<T>, {0x3B8, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.AbilityOverviewDetailWidget.OnAbilityUnlockChange
	// void OnAbilityUnlockChange(EUnlockAbility Ability);                                                                      // [0x177f780] Final|Native|Public  
};

/// Class /Script/Indiana.AbilityOverviewWidget
/// Size: 0x02A0 (0x000300 - 0x0005A0)
class UAbilityOverviewWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1440;

public:
	CMember(class UOverlay*)                           GamepadPanelOverlay                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             CommandOneLightImage                                        OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             CommandTwoLightImage                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             CommandThreeLightImage                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             CommandFourLightImage                                       OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             CommandOneButtonImage                                       OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             CommandTwoButtonImage                                       OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             CommandThreeButtonImage                                     OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UImage*)                             CommandFourButtonImage                                      OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UImage*)                             CommandOneButtonPress                                       OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UImage*)                             CommandTwoButtonPress                                       OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UImage*)                             CommandThreeButtonPress                                     OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UImage*)                             CommandFourButtonPress                                      OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UAbilityOverviewDetailWidget*)       CompanionCommandOne                                         OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UAbilityOverviewDetailWidget*)       CompanionCommandTwo                                         OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UAbilityOverviewDetailWidget*)       CompanionCommandThree                                       OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UAbilityOverviewDetailWidget*)       CompanionCommandFour                                        OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  CompanionInputLabelOne                                      OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  CompanionInputLabelTwo                                      OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  CompanionInputLabelThree                                    OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  CompanionInputLabelFour                                     OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UInputWidget*)                       CompanionInputWidgetOne                                     OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UInputWidget*)                       CompanionInputWidgetTwo                                     OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UInputWidget*)                       CompanionInputWidgetThree                                   OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UInputWidget*)                       CompanionInputWidgetFour                                    OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UTexture2D*)                         AbilityIcon                                                 OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UTexture2D*)                         ButtonUnavailableTexture                                    OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UTexture2D*)                         ButtonAvailableTexture                                      OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UTexture2D*)                         ButtonPressedTexture                                        OFFSET(get<T>, {0x3E8, 8, 0, 0})
	DMember(bool)                                      bShowGamepad                                                OFFSET(get<bool>, {0x3F0, 1, 0, 0})
	DMember(bool)                                      bShowPC                                                     OFFSET(get<bool>, {0x3F1, 1, 0, 0})
	DMember(float)                                     FadeInThreshold                                             OFFSET(get<float>, {0x3F4, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.AbilityOverviewWidget.OnPlayerCombatStateChange
	// void OnPlayerCombatStateChange(bool IsPlayerInCombat, bool bRestoring);                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x177fdd0] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnHUDModeChanged
	// void OnHUDModeChanged(int32_t ModeIn);                                                                                   // [0x177fd40] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnCompanionAbilityModeChanged
	// void OnCompanionAbilityModeChanged(int32_t ModeIn);                                                                      // [0x177fbc0] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnCompanionAbilityBindingModeChanged
	// void OnCompanionAbilityBindingModeChanged(int32_t ModeIn);                                                               // [0x177fb30] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnCommandButtonPressed
	// void OnCommandButtonPressed(EAbilityPosition AbillityPosition);                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityUsed
	// void OnAbilityUsed(class UAbilityOverviewDetailWidget* Widget, EAbilityPosition AbilityPosition);                        // [0x177f800] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityCooldownTriggered
	// void OnAbilityCooldownTriggered(EAbilityPosition AbilityPosition);                                                       // [0x177f700] Final|Native|Protected 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityCooldownStarted
	// void OnAbilityCooldownStarted(EAbilityPosition AbilityPosition);                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityCooldownFinished
	// void OnAbilityCooldownFinished(EAbilityPosition AbillityPosition);                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AbilityOverviewWidget.OnAbilityCooldownEnded
	// void OnAbilityCooldownEnded(EAbilityPosition AbilityPosition);                                                           // [0x177f680] Final|Native|Protected 
};

/// Class /Script/Indiana.AchievementDataAsset
/// Size: 0x0028 (0x000038 - 0x000060)
class UAchievementDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UEventListener*)                     EventListener                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   AchievementID                                               OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	SMember(FName)                                     SteamName                                                   OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     PS4Name                                                     OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FName)                                     XboxName                                                    OFFSET(getStruct<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Indiana.AchievementsManager
/// Size: 0x0130 (0x000030 - 0x000160)
class UAchievementsManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(class UPresenceData*)                      CurrentPresenceData                                         OFFSET(get<T>, {0x108, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.AchievementsManager.ResetAchievements
	// void ResetAchievements();                                                                                                // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.AchievementsManager.OnWeaponSlotted
	// void OnWeaponSlotted(class UItem* Item);                                                                                 // [0x177fe60] Final|Native|Protected 
	// Function /Script/Indiana.AchievementsManager.OnKillPreDeath
	// void OnKillPreDeath(class AActor* Victim);                                                                               // [0x177fef0] Final|Native|Protected 
	// Function /Script/Indiana.AchievementsManager.OnItemEquipped
	// void OnItemEquipped(class UItem* Item);                                                                                  // [0x177fe60] Final|Native|Protected 
	// Function /Script/Indiana.AchievementsManager.OnActiveUserChanged
	// void OnActiveUserChanged(EActiveUserChangeType ChangeType);                                                              // [0x177f8d0] Final|Native|Protected 
	// Function /Script/Indiana.AchievementsManager.IncrementAchievement
	// void IncrementAchievement(FName& AchievementBPName, int32_t Count);                                                      // [0x177f5b0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.AchievementsManager.GameOver
	// void GameOver();                                                                                                         // [0x177f590] Final|Exec|Native|Public 
	// Function /Script/Indiana.AchievementsManager.CompleteAchievementBP
	// void CompleteAchievementBP(class UAchievementDataAsset* Achievement);                                                    // [0x177f510] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.AchievementsManager.CompleteAchievement
	// void CompleteAchievement(FName& AchievementBPName);                                                                      // [0x177f480] Final|Exec|Native|Public|HasOutParms 
};

/// Class /Script/Indiana.AIAction
/// Size: 0x0008 (0x000030 - 0x000038)
class UAIAction : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.ActionSequence
/// Size: 0x0020 (0x000038 - 0x000058)
class UActionSequence : public UAIAction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<class UAIAction*>)                  Actions                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UAIAction*)                          ConstructedAction                                           OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Indiana.BehaviorStateInfo
/// Size: 0x00F0 (0x000030 - 0x000120)
class UBehaviorStateInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/Indiana.Empty_BehaviorStateInfo
/// Size: 0x0000 (0x000120 - 0x000120)
class UEmpty_BehaviorStateInfo : public UBehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/Indiana.ActivatedBehaviorStateInfo
/// Size: 0x0000 (0x000120 - 0x000120)
class UActivatedBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/Indiana.DecisionTreeRequestData
/// Size: 0x0000 (0x000038 - 0x000038)
class UDecisionTreeRequestData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Indiana.AISelector_FValue
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_FValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AIFValue                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BehaviorStateRequestData
/// Size: 0x0028 (0x000038 - 0x000060)
class UBehaviorStateRequestData : public UDecisionTreeRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bRequiresRange                                              OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bSkipRequiresRangeIfUnreachable                             OFFSET(get<bool>, {0x39, 1, 0, 0})
	SMember(FAISelector_FValue)                        MinRange                                                    OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FAISelector_FValue)                        PreferredRange                                              OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           RequiresRangeRequest                                        OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(bool)                                      bInitiatesCooldown                                          OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/Indiana.DecisionTreeEmptyRequestData
/// Size: 0x0008 (0x000060 - 0x000068)
class UDecisionTreeEmptyRequestData : public UBehaviorStateRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UClass*)                             InfoType                                                    OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Class /Script/Indiana.ActivatedRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UActivatedRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.ActivityManager
/// Size: 0x0000 (0x000030 - 0x000030)
class UActivityManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.PooledActor
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class APooledActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(class UActorPool*)                         OwningPool                                                  OFFSET(get<T>, {0x2B8, 8, 0, 0})
};

/// Struct /Script/Indiana.ActorPoolConfiguration
/// Size: 0x0018 (0x000000 - 0x000018)
class FActorPoolConfiguration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EActorPoolingMethod)                       PoolingMethod                                               OFFSET(get<T>, {0x0, 4, 0, 0})
	CMember(class UClass*)                             ActorClass                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   MaxActorsToRetain                                           OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(bool)                                      bCanSpawnMoreThanMaxActors                                  OFFSET(get<bool>, {0x14, 1, 0, 0})
	DMember(bool)                                      bReuseOldestActorsWhenExhausted                             OFFSET(get<bool>, {0x15, 1, 0, 0})
	DMember(bool)                                      bDeferSpawnRequests                                         OFFSET(get<bool>, {0x16, 1, 0, 0})
};

/// Class /Script/Indiana.ActorPool
/// Size: 0x0050 (0x000030 - 0x000080)
class UActorPool : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FActorPoolConfiguration)                   PoolConfiguration                                           OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	CMember(TArray<class APooledActor*>)               ActiveActors                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<class APooledActor*>)               FreeActors                                                  OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Indiana.ActorRenderWidget
/// Size: 0x0098 (0x000300 - 0x000398)
class UActorRenderWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	CMember(class UClass*)                             ActorStageClass                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bRouteAnalogInput                                           OFFSET(get<bool>, {0x320, 1, 0, 0})
	DMember(bool)                                      bSetupInConstruction                                        OFFSET(get<bool>, {0x321, 1, 0, 0})
	DMember(bool)                                      bFlipHorizontally                                           OFFSET(get<bool>, {0x322, 1, 0, 0})
	DMember(bool)                                      bEnableZoomAction                                           OFFSET(get<bool>, {0x323, 1, 0, 0})
	DMember(float)                                     ZoomFull                                                    OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     ZoomReduced                                                 OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(bool)                                      bZoomReduced                                                OFFSET(get<bool>, {0x32C, 1, 0, 0})
	SMember(FVector2D)                                 MouseSensitivity                                            OFFSET(getStruct<T>, {0x330, 8, 0, 0})
	SMember(FVector2D)                                 GamepadSensitivity                                          OFFSET(getStruct<T>, {0x338, 8, 0, 0})
	CMember(class UMaterialInterface*)                 ImageMaterial                                               OFFSET(get<T>, {0x340, 8, 0, 0})
	DMember(bool)                                      bResizeRenderTargetWithResolution                           OFFSET(get<bool>, {0x348, 1, 0, 0})
	DMember(int32_t)                                   RenderTargetSizeX                                           OFFSET(get<int32_t>, {0x34C, 4, 0, 0})
	DMember(int32_t)                                   RenderTargetSizeY                                           OFFSET(get<int32_t>, {0x350, 4, 0, 0})
	CMember(TEnumAsByte<ETextureRenderTargetFormat>)   RenderTargetFormat                                          OFFSET(get<T>, {0x354, 1, 0, 0})
	CMember(class UBorder*)                            Border                                                      OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x360, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ActorRenderWidget.OnMouseZoomOut
	// void OnMouseZoomOut();                                                                                                   // [0x177ffa0] Final|Native|Protected 
	// Function /Script/Indiana.ActorRenderWidget.OnMouseZoomIn
	// void OnMouseZoomIn();                                                                                                    // [0x177ff80] Final|Native|Protected 
	// Function /Script/Indiana.ActorRenderWidget.OnGamepadToggleFullZoom
	// void OnGamepadToggleFullZoom();                                                                                          // [0x177fd20] Final|Native|Protected 
	// Function /Script/Indiana.ActorRenderWidget.OnBorderMouseDown
	// FEventReply OnBorderMouseDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                          // [0x177f950] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ActorRenderWidget.CanZoom
	// bool CanZoom();                                                                                                          // [0x177f450] Final|Native|Protected|Const 
};

/// Class /Script/Indiana.ActorStage
/// Size: 0x00C8 (0x0002B8 - 0x000380)
class AActorStage : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(class USceneComponent*)                    AttachPointSceneComponent                                   OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class USceneCaptureComponent2D*)           FinalColorCaptureComponent                                  OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class USceneCaptureComponent2D*)           AlphaCaptureComponent                                       OFFSET(get<T>, {0x2D0, 8, 0, 0})
	DMember(bool)                                      bEnableManualRotation                                       OFFSET(get<bool>, {0x2D8, 1, 0, 0})
	DMember(float)                                     IdleResetSeconds                                            OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     IdleTransitionSeconds                                       OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(bool)                                      bLimitPitch                                                 OFFSET(get<bool>, {0x2E4, 1, 0, 0})
	DMember(float)                                     MaxPitch                                                    OFFSET(get<float>, {0x2E8, 4, 0, 0})
	SMember(FRotator)                                  IdleRotationSpeed                                           OFFSET(getStruct<T>, {0x2EC, 12, 0, 0})
	SMember(FRotator)                                  IdleRotationStart                                           OFFSET(getStruct<T>, {0x2F8, 12, 0, 0})
	DMember(bool)                                      bShowWeapon                                                 OFFSET(get<bool>, {0x304, 1, 0, 0})
	CMember(class AActor*)                             ActiveVisuals                                               OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Struct /Script/Indiana.AkPlaySoundState
/// Size: 0x0018 (0x000000 - 0x000018)
class FAkPlaySoundState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.AkPlaySoundStatePair
/// Size: 0x0020 (0x000000 - 0x000020)
class FAkPlaySoundStatePair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TWeakObjectPtr<class UAkPlaySoundEventEffect*>) EventEffect                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FAkPlaySoundState)                         State                                                       OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/Indiana.PlayFxState
/// Size: 0x0008 (0x000000 - 0x000008)
class FPlayFxState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Indiana.PlayFxPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FPlayFxPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TWeakObjectPtr<class UPlayFxEventEffect*>) EventEffect                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FPlayFxState)                              State                                                       OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.EventEffectState
/// Size: 0x0020 (0x000000 - 0x000020)
class FEventEffectState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FAkPlaySoundStatePair>)             PlayAkSoundStateMap                                         OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FPlayFxPair>)                       PlayFxStateMap                                              OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Indiana.LocString
/// Size: 0x0008 (0x000000 - 0x000008)
class FLocString : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   StringID                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EStringTableType)                          TableType                                                   OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Class /Script/Indiana.StatusEffect
/// Size: 0x0158 (0x000030 - 0x000188)
class UStatusEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FEventEffectState)                         EventEffectState                                            OFFSET(getStruct<T>, {0x80, 32, 0, 0})
	CMember(class UClass*)                             ParentSpell                                                 OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(EStatusEffectInitialApplicationType)       InitialApplicationType                                      OFFSET(get<T>, {0xFE, 1, 0, 0})
	CMember(EStatusEffectDurationType)                 DurationType                                                OFFSET(get<T>, {0xFF, 1, 0, 0})
	CMember(ESkill)                                    OriginOffensiveSkill                                        OFFSET(get<T>, {0x100, 1, 0, 0})
	CMember(EAttribute)                                TargetDefensiveAttribute                                    OFFSET(get<T>, {0x101, 1, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     MaxDuration                                                 OFFSET(get<float>, {0x108, 4, 0, 0})
	CMember(class URpgStat*)                           DurationStat                                                OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(bool)                                      bDurationIgnoresTimeDilation                                OFFSET(get<bool>, {0x118, 1, 0, 0})
	CMember(EStatusEffectApplicationType)              ApplicationType                                             OFFSET(get<T>, {0x119, 1, 0, 0})
	DMember(float)                                     Interval                                                    OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(bool)                                      bIsHostile                                                  OFFSET(get<bool>, {0x120, 1, 0, 0})
	DMember(bool)                                      bProhibitsConversations                                     OFFSET(get<bool>, {0x121, 1, 0, 0})
	DMember(bool)                                      bDurationAlwaysAffected                                     OFFSET(get<bool>, {0x122, 1, 0, 0})
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x123, 1, 0, 0})
	DMember(float)                                     MaxSkillValue                                               OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(bool)                                      bSkillFromCaster                                            OFFSET(get<bool>, {0x128, 1, 0, 0})
	DMember(bool)                                      bRemoveWithSpell                                            OFFSET(get<bool>, {0x129, 1, 0, 0})
	DMember(bool)                                      bAllowOnDead                                                OFFSET(get<bool>, {0x12A, 1, 0, 0})
	DMember(bool)                                      bRestoreSpellReference                                      OFFSET(get<bool>, {0x12B, 1, 0, 0})
	DMember(bool)                                      bSavePermanentStatusEffect                                  OFFSET(get<bool>, {0x12C, 1, 0, 0})
	SMember(FLocString)                                EffectName                                                  OFFSET(getStruct<T>, {0x130, 8, 0, 0})
	SMember(FLocString)                                EffectDescription                                           OFFSET(getStruct<T>, {0x138, 8, 0, 0})
	CMember(class UEventEffects*)                      StartEventEffects                                           OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UEventEffects*)                      ApplyEventEffects                                           OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UEventEffects*)                      EndEventEffects                                             OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class UStatusEffectUIVisualsData*)         UIVisualsData                                               OFFSET(get<T>, {0x158, 8, 0, 0})
	SMember(FLocString)                                DescriptionFormat                                           OFFSET(getStruct<T>, {0x160, 8, 0, 0})
	DMember(bool)                                      bDontDisplayDescription                                     OFFSET(get<bool>, {0x168, 1, 0, 0})
	DMember(bool)                                      bDontDisplayNameInDescription                               OFFSET(get<bool>, {0x169, 1, 0, 0})
	DMember(bool)                                      bAppendDescriptionToPrevious                                OFFSET(get<bool>, {0x16A, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnClearStatusEffect                                         OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	DMember(bool)                                      bUseXFHSkillScaling                                         OFFSET(get<bool>, {0x180, 1, 0, 0})
	DMember(bool)                                      bForceApplyOnStart                                          OFFSET(get<bool>, {0x181, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatusEffect.ReceiveClearEffect
	// void ReceiveClearEffect(class AActor* Target);                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusEffect.ReceiveApplyEffect
	// void ReceiveApplyEffect(class AActor* Target, float Ratio, bool bRestoredFromSave);                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusEffect.GetStatusEffectOriginActor
	// class AActor* GetStatusEffectOriginActor();                                                                              // [0x18c8310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.AdjustCCCooldownStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UAdjustCCCooldownStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(ECompanionCommand)                         Command                                                     OFFSET(get<T>, {0x188, 1, 0, 0})
	DMember(float)                                     CooldownScalar                                              OFFSET(get<float>, {0x18C, 4, 0, 0})
};

/// Class /Script/Indiana.AdjustDurationStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UAdjustDurationStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     Modifier                                                    OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(bool)                                      bHostileOnly                                                OFFSET(get<bool>, {0x18C, 1, 0, 0})
};

/// Class /Script/Indiana.AICastSpell_AnimNotify
/// Size: 0x0008 (0x000040 - 0x000048)
class UAICastSpell_AnimNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UClass*)                             SpellType                                                   OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.AICastSpell_AnimNotifyState
/// Size: 0x0008 (0x000038 - 0x000040)
class UAICastSpell_AnimNotifyState : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTag)                              TriggerEvent                                                OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.SpawnBehavior_AnimNotify
/// Size: 0x0000 (0x000040 - 0x000040)
class USpawnBehavior_AnimNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AIDecisionUpdate
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIDecisionUpdate : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIDecisionUpdate_Mantisaur
/// Size: 0x0008 (0x000030 - 0x000038)
class UAIDecisionUpdate_Mantisaur : public UAIDecisionUpdate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     DistanceToBlock                                             OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     DistanceToUnblock                                           OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Class /Script/Indiana.AIDecisionUpdate_Mantiqueen
/// Size: 0x0008 (0x000030 - 0x000038)
class UAIDecisionUpdate_Mantiqueen : public UAIDecisionUpdate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     FireBreathCooldown                                          OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/Indiana.AIDecisionUpdate_HealDrone
/// Size: 0x0008 (0x000030 - 0x000038)
class UAIDecisionUpdate_HealDrone : public UAIDecisionUpdate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     ReevaulateHealCooldown                                      OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/Indiana.AIDecisionUpdate_CanidHowl
/// Size: 0x0018 (0x000030 - 0x000048)
class UAIDecisionUpdate_CanidHowl : public UAIDecisionUpdate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     HowlCooldown                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     PercentChanceToHowl                                         OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   HowlCount                                                   OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(bool)                                      bHowlOnEnter                                                OFFSET(get<bool>, {0x3C, 1, 0, 0})
};

/// Class /Script/Indiana.AIDecisionUpdate_ShieldBot
/// Size: 0x0010 (0x000030 - 0x000040)
class UAIDecisionUpdate_ShieldBot : public UAIDecisionUpdate
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     ChargeCooldown                                              OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     MinDistanceToTarget                                         OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     JumpCooldown                                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     JumpDistanceToTarget                                        OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/Indiana.AIDefensiveActionsComponent
/// Size: 0x0040 (0x0000E0 - 0x000120)
class UAIDefensiveActionsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:


	/// Functions
	// Function /Script/Indiana.AIDefensiveActionsComponent.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x1780240] Final|Native|Public|HasOutParms 
};

/// Class /Script/Indiana.AIDetectionComponent
/// Size: 0x0138 (0x0000E0 - 0x000218)
class UAIDetectionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	SMember(FMulticastInlineDelegate)                  OnAlertStateChange                                          OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerProximityChange                                     OFFSET(getStruct<T>, {0x108, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.AIDetectionComponent.OnPlayerKill
	// void OnPlayerKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                              // [0x1780150] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.AIDetectionComponent.OnPerceptionUpdate
	// void OnPerceptionUpdate(class AActor* Actor, FAIStimulus Stimulus);                                                      // [0x177ffc0] Final|Native|Private 
	// Function /Script/Indiana.AIDetectionComponent.OnDetectedNonHostileCombatStateChange
	// void OnDetectedNonHostileCombatStateChange(bool bIsInCombat, bool bRestoring);                                           // [0x177fc50] Final|Native|Private 
};

/// Class /Script/Indiana.AIEventInfo
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIEventInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIEventInfo_Location
/// Size: 0x0010 (0x000030 - 0x000040)
class UAIEventInfo_Location : public UAIEventInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AIEventInfo_Direction
/// Size: 0x0010 (0x000030 - 0x000040)
class UAIEventInfo_Direction : public UAIEventInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AIEventInfo_Actor
/// Size: 0x0008 (0x000030 - 0x000038)
class UAIEventInfo_Actor : public UAIEventInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AIEventInfo_StatusEffect
/// Size: 0x0008 (0x000030 - 0x000038)
class UAIEventInfo_StatusEffect : public UAIEventInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UStatusEffect*)                      StatusEffect                                                OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Indiana.AIEventInfo_Spell
/// Size: 0x0018 (0x000030 - 0x000048)
class UAIEventInfo_Spell : public UAIEventInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Indiana.AIEventInfo_CalledShot
/// Size: 0x0018 (0x000030 - 0x000048)
class UAIEventInfo_CalledShot : public UAIEventInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/Indiana.AIEventInfo_Behavior
/// Size: 0x0010 (0x000030 - 0x000040)
class UAIEventInfo_Behavior : public UAIEventInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AIEventInfo_Float
/// Size: 0x0008 (0x000030 - 0x000038)
class UAIEventInfo_Float : public UAIEventInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AIEventInfo_Transform
/// Size: 0x0030 (0x000030 - 0x000060)
class UAIEventInfo_Transform : public UAIEventInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/Indiana.InteractionComponent
/// Size: 0x0010 (0x0000E0 - 0x0000F0)
class UInteractionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	DMember(float)                                     MaxInteractRange                                            OFFSET(get<float>, {0xE0, 4, 0, 0})
};

/// Class /Script/Indiana.AIInteractionComponent
/// Size: 0x0050 (0x0000F0 - 0x000140)
class UAIInteractionComponent : public UInteractionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:


	/// Functions
	// Function /Script/Indiana.AIInteractionComponent.OnNavigationPathUpdate
	// void OnNavigationPathUpdate();                                                                                           // [0x1783ff0] Final|Native|Private 
};

/// Struct /Script/Indiana.AimAssistConfig
/// Size: 0x01C0 (0x000000 - 0x0001C0)
class FAimAssistConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	DMember(float)                                     TargetLockHorizontalRate                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TargetLockStrength                                          OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     TargetLockNoTouchDuration                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     TargetLockNoTouchFadeTime                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     TrackQuickTargetInputThreshold                              OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     TrackQuickTargetIdleTime                                    OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     TrackQuickTargetDuration                                    OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     TrackQuickTargetMinVelocity                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     TrackQuickTargetHorizontalRate                              OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     TrackQuickTargetVerticalRate                                OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        FrictionInputCurve                                          OFFSET(getStruct<T>, {0x28, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        FrictionStrengthTowardsTargetCurve                          OFFSET(getStruct<T>, {0xB0, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        FrictionStrengthAwayFromTargetCurve                         OFFSET(getStruct<T>, {0x138, 136, 0, 0})
};

/// Class /Script/Indiana.AimAssistComponent
/// Size: 0x0500 (0x0000E0 - 0x0005E0)
class UAimAssistComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1504;

public:
	CMember(TArray<float>)                             DifficultyBulletScalars                                     OFFSET(get<T>, {0xE8, 16, 0, 0})
	DMember(bool)                                      bAimAssistEnabled                                           OFFSET(get<bool>, {0x40D, 1, 0, 0})
	DMember(bool)                                      bFrictionEnabled                                            OFFSET(get<bool>, {0x40E, 1, 0, 0})
	DMember(bool)                                      bTargetStrafeLockEnabled                                    OFFSET(get<bool>, {0x40F, 1, 0, 0})
	DMember(bool)                                      bBulletMagnetismEnabled                                     OFFSET(get<bool>, {0x410, 1, 0, 0})
	DMember(bool)                                      bBulletMagnetIgnoreSpread                                   OFFSET(get<bool>, {0x411, 1, 0, 0})
	DMember(bool)                                      bTrackQuickTargetEnabled                                    OFFSET(get<bool>, {0x412, 1, 0, 0})
	DMember(float)                                     TrackForcedTargetDivisor                                    OFFSET(get<float>, {0x414, 4, 0, 0})
	DMember(float)                                     FrictionInTime                                              OFFSET(get<float>, {0x418, 4, 0, 0})
	DMember(float)                                     FrictionOutTime                                             OFFSET(get<float>, {0x41C, 4, 0, 0})
	SMember(FAimAssistConfig)                          DefaultAimAssistConfig                                      OFFSET(getStruct<T>, {0x420, 448, 0, 0})


	/// Functions
	// Function /Script/Indiana.AimAssistComponent.ToggleTrackQuickTarget
	// void ToggleTrackQuickTarget();                                                                                           // [0x1784220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.ToggleTargetStrafeLock
	// void ToggleTargetStrafeLock();                                                                                           // [0x17841f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.ToggleFriction
	// void ToggleFriction();                                                                                                   // [0x17841c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.ToggleBulletMagnetism
	// void ToggleBulletMagnetism();                                                                                            // [0x1784190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.ToggleAimAssist
	// void ToggleAimAssist();                                                                                                  // [0x1784160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty NewDifficulty);                                                                 // [0x1783c00] Final|Native|Protected 
	// Function /Script/Indiana.AimAssistComponent.EnableAimAssist
	// void EnableAimAssist(bool Enabled);                                                                                      // [0x1783b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AimAssistComponent.AimAssistVisualSpread
	// void AimAssistVisualSpread(bool bEnable);                                                                                // [0x1783ae0] Final|Exec|Native|Public 
	// Function /Script/Indiana.AimAssistComponent.AimAssistVisualFriction
	// void AimAssistVisualFriction(bool bEnable);                                                                              // [0x1783a50] Final|Exec|Native|Public 
	// Function /Script/Indiana.AimAssistComponent.AimAssistVisualBulletMagnetism
	// void AimAssistVisualBulletMagnetism(bool bEnable);                                                                       // [0x17839c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.AimAssistComponent.AimAssistVisualAdhesion
	// void AimAssistVisualAdhesion(bool bEnable);                                                                              // [0x1783930] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.AimAssistData
/// Size: 0x0030 (0x000038 - 0x000068)
class UAimAssistData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(float)                                     AimAssistScalar                                             OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     RangeTooCloseMin                                            OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     RangeTooCloseMax                                            OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     RangeTooFarMin                                              OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     RangeTooFarMax                                              OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bBulletMagnetism                                            OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(bool)                                      bBulletMagnetIgnoreSpread                                   OFFSET(get<bool>, {0x4D, 1, 0, 0})
	DMember(float)                                     BulletMagnetismPercent                                      OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     FrictionConeDegrees                                         OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     AdhesionConeDegrees                                         OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     FrictionPercent                                             OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     AdhesionPercent                                             OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(bool)                                      bAllSockets                                                 OFFSET(get<bool>, {0x64, 1, 0, 0})
	DMember(bool)                                      bStrictCursorOver                                           OFFSET(get<bool>, {0x65, 1, 0, 0})
};

/// Class /Script/Indiana.IndianaCharMovementComponent
/// Size: 0x02A0 (0x000B60 - 0x000E00)
class UIndianaCharMovementComponent : public UCharacterMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3584;

public:
	SMember(FMulticastInlineDelegate)                  OnJumped                                                    OFFSET(getStruct<T>, {0xB70, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLanded                                                    OFFSET(getStruct<T>, {0xB80, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLandedExtended                                            OFFSET(getStruct<T>, {0xB90, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStartCrouch                                               OFFSET(getStruct<T>, {0xBA0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStopCrouch                                                OFFSET(getStruct<T>, {0xBB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCrouchComplete                                            OFFSET(getStruct<T>, {0xBC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStartSprint                                               OFFSET(getStruct<T>, {0xBD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStopSprint                                                OFFSET(getStruct<T>, {0xBE0, 16, 0, 0})
	DMember(float)                                     SprintSpeed                                                 OFFSET(get<float>, {0xBF0, 4, 0, 0})
	DMember(float)                                     CrouchTime                                                  OFFSET(get<float>, {0xC48, 4, 0, 0})
	DMember(float)                                     UncrouchTime                                                OFFSET(get<float>, {0xC4C, 4, 0, 0})
	DMember(float)                                     FineAimSpeedMultiplier                                      OFFSET(get<float>, {0xC50, 4, 0, 0})
	DMember(float)                                     BlockSpeedMultiplier                                        OFFSET(get<float>, {0xC54, 4, 0, 0})
	CMember(class URpgStat*)                           BlockSpeedMultStat                                          OFFSET(get<T>, {0xC58, 8, 0, 0})
	DMember(float)                                     SprintTurnRateMultiplier                                    OFFSET(get<float>, {0xC60, 4, 0, 0})
	DMember(float)                                     SprintStrafeRateMultiplier                                  OFFSET(get<float>, {0xC64, 4, 0, 0})
	DMember(float)                                     SprintStaminaDrainRate                                      OFFSET(get<float>, {0xC68, 4, 0, 0})
	CMember(class UClass*)                             FallingDamageType                                           OFFSET(get<T>, {0xC70, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDodged                                                    OFFSET(getStruct<T>, {0xC98, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStartClimb                                                OFFSET(getStruct<T>, {0xCA8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStopClimb                                                 OFFSET(getStruct<T>, {0xCB8, 16, 0, 0})
	DMember(float)                                     ClimbSpeed                                                  OFFSET(get<float>, {0xCC8, 4, 0, 0})
	DMember(bool)                                      bCanClimb                                                   OFFSET(get<bool>, {0xCCC, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOccupiedNavAreaChanged                                    OFFSET(getStruct<T>, {0xCD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnNewFootstepData                                           OFFSET(getStruct<T>, {0xD80, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFootstep                                                  OFFSET(getStruct<T>, {0xD90, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSpecialMovementEvent                                      OFFSET(getStruct<T>, {0xDA0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDodgedExt                                                 OFFSET(getStruct<T>, {0xDB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLandedExt                                                 OFFSET(getStruct<T>, {0xDC0, 16, 0, 0})
	CMember(class UFootstepData*)                      DefaultFootstepData                                         OFFSET(get<T>, {0xDD0, 8, 0, 0})
	CMember(class UFootstepData*)                      OverrideFootstepData                                        OFFSET(get<T>, {0xDD8, 8, 0, 0})
	DMember(float)                                     ControllerSprintToggleDoubleClickWindow                     OFFSET(get<float>, {0xDE8, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaCharMovementComponent.OnBumped
	// void OnBumped(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);                // [0x18469c0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Struct /Script/Indiana.ExtremaOverlap
/// Size: 0x0020 (0x000000 - 0x000020)
class FExtremaOverlap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TWeakObjectPtr<class AIndianaCharacter*>)  Overlapper                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.AIMovementComponent
/// Size: 0x0150 (0x000E00 - 0x000F50)
class UAIMovementComponent : public UIndianaCharMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3920;

public:
	DMember(float)                                     WalkSpeed                                                   OFFSET(get<float>, {0xE30, 4, 0, 0})
	DMember(float)                                     CombatWalkSpeed                                             OFFSET(get<float>, {0xE34, 4, 0, 0})
	DMember(float)                                     RunSpeed                                                    OFFSET(get<float>, {0xE38, 4, 0, 0})
	DMember(float)                                     CrouchWalkSpeed                                             OFFSET(get<float>, {0xE3C, 4, 0, 0})
	DMember(bool)                                      bAllowNavWalkingOptimizations                               OFFSET(get<bool>, {0xE40, 1, 0, 0})
	DMember(bool)                                      bElongated                                                  OFFSET(get<bool>, {0xE58, 1, 0, 0})
	DMember(float)                                     ElongatedCapsuleLength                                      OFFSET(get<float>, {0xE5C, 4, 0, 0})
	DMember(float)                                     ElongatedCapsuleHeight                                      OFFSET(get<float>, {0xE60, 4, 0, 0})
	DMember(float)                                     ElongatedCapsuleOverlapPadding                              OFFSET(get<float>, {0xE64, 4, 0, 0})
	DMember(float)                                     ElongatedCapsuleHorizontalOffset                            OFFSET(get<float>, {0xE68, 4, 0, 0})
	DMember(float)                                     ElongatedCapsuleVerticalOffset                              OFFSET(get<float>, {0xE6C, 4, 0, 0})
	DMember(float)                                     ElongatedBumpFallingLateralFriction                         OFFSET(get<float>, {0xE70, 4, 0, 0})
	CMember(class USceneComponent*)                    ExtremaSceneComponent                                       OFFSET(get<T>, {0xE80, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  ExtremaOverlapper                                           OFFSET(get<T>, {0xE88, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  ExtremaBlocker                                              OFFSET(get<T>, {0xE90, 8, 0, 0})
	CMember(TArray<FExtremaOverlap>)                   ExtremaOverlaps                                             OFFSET(get<T>, {0xE98, 16, 0, 0})
	DMember(float)                                     JumpDownClearance                                           OFFSET(get<float>, {0xEAC, 4, 0, 0})
	DMember(float)                                     JumpUpClearance                                             OFFSET(get<float>, {0xEB0, 4, 0, 0})
	DMember(float)                                     JumpAcrossClearance                                         OFFSET(get<float>, {0xEB4, 4, 0, 0})
	DMember(float)                                     JumpMaxXYSpeed                                              OFFSET(get<float>, {0xEB8, 4, 0, 0})
	DMember(float)                                     JumpGravityScalar                                           OFFSET(get<float>, {0xEBC, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAIStartTraverse                                           OFFSET(getStruct<T>, {0xEC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStationaryRotateEnd                                       OFFSET(getStruct<T>, {0xEF8, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.AIMovementComponent.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x17840e0] Final|Native|Protected 
	// Function /Script/Indiana.AIMovementComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x1784010] Final|Native|Protected 
	// Function /Script/Indiana.AIMovementComponent.OnExtremaEndOverlap
	// void OnExtremaEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1783ea0] Native|Protected     
	// Function /Script/Indiana.AIMovementComponent.OnExtremaBeginOverlap
	// void OnExtremaBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1783c80] Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.AIPossessable
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIPossessable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_AIAction
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_AIAction : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeAction
/// Size: 0x0000 (0x000030 - 0x000030)
class UPatrol_PatrolNodeAction : public UAI_AIAction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIActor
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIActor : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIActorWritable
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIActorWritable : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_Player
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_Player : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTarget : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_DecisionTreeActor
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_DecisionTreeActor : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_Self
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_Self : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Patrol_PatrolNode
/// Size: 0x0000 (0x000030 - 0x000030)
class UPatrol_PatrolNode : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Patrol_PatrolNode_LookAtOverride
/// Size: 0x0000 (0x000030 - 0x000030)
class UPatrol_PatrolNode_LookAtOverride : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Furniture_LookAtOverride
/// Size: 0x0000 (0x000030 - 0x000030)
class UFurniture_LookAtOverride : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Cover_CurrentCoverNode
/// Size: 0x0000 (0x000030 - 0x000030)
class UCover_CurrentCoverNode : public UAIActorWritable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionFollow_Target
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionFollow_Target : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionFollow_Position
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionFollow_Position : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Follow_Target
/// Size: 0x0000 (0x000030 - 0x000030)
class UFollow_Target : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_HealTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_HealTarget : public UAIActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIBool
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIBool : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIBoolWriteable
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIBoolWriteable : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_True
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_True : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MovingFireEnabled
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MovingFireEnabled : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_WalkingFireEnabled
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_WalkingFireEnabled : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_ShouldServiceExitTask
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_ShouldServiceExitTask : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_ShouldFaceTargetWhileMoving
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_ShouldFaceTargetWhileMoving : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_IsWeaponRanged
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_IsWeaponRanged : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_ShouldScope
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_ShouldScope : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_IsFullyCrouched
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_IsFullyCrouched : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_IsFullyUncrouched
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_IsFullyUncrouched : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_IsMoveToSuccessful
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_IsMoveToSuccessful : public UAIBoolWriteable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeOrientOnArrival
/// Size: 0x0000 (0x000030 - 0x000030)
class UPatrol_PatrolNodeOrientOnArrival : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeLookAtWhileWalking
/// Size: 0x0000 (0x000030 - 0x000030)
class UPatrol_PatrolNodeLookAtWhileWalking : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Patrol_PatrolRunMovementStateEnabled
/// Size: 0x0000 (0x000030 - 0x000030)
class UPatrol_PatrolRunMovementStateEnabled : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeActionInfiniteDuration
/// Size: 0x0000 (0x000030 - 0x000030)
class UPatrol_PatrolNodeActionInfiniteDuration : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Follow_ClearTargetDetection
/// Size: 0x0000 (0x000030 - 0x000030)
class UFollow_ClearTargetDetection : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Follow_Retreating
/// Size: 0x0000 (0x000030 - 0x000030)
class UFollow_Retreating : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Follow_IsCompanionCommandOrClearTargetDetection
/// Size: 0x0000 (0x000030 - 0x000030)
class UFollow_IsCompanionCommandOrClearTargetDetection : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CalledShot_IsTargetReactionComplete
/// Size: 0x0000 (0x000030 - 0x000030)
class UCalledShot_IsTargetReactionComplete : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CalledShot_IsAttackAnimationComplete
/// Size: 0x0000 (0x000030 - 0x000030)
class UCalledShot_IsAttackAnimationComplete : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.SwitchWeapon_IsInstant
/// Size: 0x0000 (0x000030 - 0x000030)
class USwitchWeapon_IsInstant : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Jump_ShouldRotateToFaceTargetMidAir
/// Size: 0x0000 (0x000030 - 0x000030)
class UJump_ShouldRotateToFaceTargetMidAir : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_ShouldFire
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_ShouldFire : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_ShouldStationaryFire
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_ShouldStationaryFire : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_HasNoQueuedDecisionTreeRequest
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_HasNoQueuedDecisionTreeRequest : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_RequiresReachable
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_RequiresReachable : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_ShouldIgnoreCollisionDuringTargetApproach
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_ShouldIgnoreCollisionDuringTargetApproach : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_ShouldBumpDuringTargetApproach
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_ShouldBumpDuringTargetApproach : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_ShouldSprintDuringTargetApproach
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_ShouldSprintDuringTargetApproach : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.OnRails_ShouldChase
/// Size: 0x0000 (0x000030 - 0x000030)
class UOnRails_ShouldChase : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.OnRails_IsOnRails
/// Size: 0x0000 (0x000030 - 0x000030)
class UOnRails_IsOnRails : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Melee_UseAdaptiveRootMotion
/// Size: 0x0000 (0x000030 - 0x000030)
class UMelee_UseAdaptiveRootMotion : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Melee_IsPatternComplete
/// Size: 0x0000 (0x000030 - 0x000030)
class UMelee_IsPatternComplete : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Melee_ShouldLookAtTargetDuringRecovery
/// Size: 0x0000 (0x000030 - 0x000030)
class UMelee_ShouldLookAtTargetDuringRecovery : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Melee_ShouldIgnoreCollisionDuringApproach
/// Size: 0x0000 (0x000030 - 0x000030)
class UMelee_ShouldIgnoreCollisionDuringApproach : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Melee_ShouldBumpDuringApproach
/// Size: 0x0000 (0x000030 - 0x000030)
class UMelee_ShouldBumpDuringApproach : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Melee_ShouldSprintDuringApproach
/// Size: 0x0000 (0x000030 - 0x000030)
class UMelee_ShouldSprintDuringApproach : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Furniture_ShouldComplete
/// Size: 0x0000 (0x000030 - 0x000030)
class UFurniture_ShouldComplete : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionCommandMoveTo_StationaryAttackEnabled
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionCommandMoveTo_StationaryAttackEnabled : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionCommandMoveTo_MovingAttackEnabled
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionCommandMoveTo_MovingAttackEnabled : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Cower_ShouldCower
/// Size: 0x0000 (0x000030 - 0x000030)
class UCower_ShouldCower : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.MoveTo_ShouldFaceTargetWhileWaiting
/// Size: 0x0000 (0x000030 - 0x000030)
class UMoveTo_ShouldFaceTargetWhileWaiting : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Spawn_IsFinishedSpawning
/// Size: 0x0000 (0x000030 - 0x000030)
class USpawn_IsFinishedSpawning : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Conversation_ShouldTeleport
/// Size: 0x0000 (0x000030 - 0x000030)
class UConversation_ShouldTeleport : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_CanSeeHealTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_CanSeeHealTarget : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_IsFinishedWatchingKilledTeammate
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_IsFinishedWatchingKilledTeammate : public UAIBool
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIEQSParameter
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIEQSParameter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionFollow_DefaultRadius
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionFollow_DefaultRadius : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionFollow_InnerRadius
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionFollow_InnerRadius : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionFollow_InnerPointAmount
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionFollow_InnerPointAmount : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionFollow_DefaultIdealAngle
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionFollow_DefaultIdealAngle : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionFollow_DefaultMinAngle
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionFollow_DefaultMinAngle : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionMoveTo_DefaultRadius
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionMoveTo_DefaultRadius : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionMoveTo_DefaultIdealAngle
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionMoveTo_DefaultIdealAngle : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionMoveTo_DefaultMinAngle
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionMoveTo_DefaultMinAngle : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MinMoveDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MinMoveDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MaxMoveDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MaxMoveDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MaxMoveDistanceThreshold
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MaxMoveDistanceThreshold : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MinPreferredRange
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MinPreferredRange : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MaxPreferredRange
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MaxPreferredRange : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_AllowedCoverTypes
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_AllowedCoverTypes : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_FullHeight
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_FullHeight : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_RepositionType
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_RepositionType : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MeleeRecoveryMoveMinDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MeleeRecoveryMoveMinDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MeleeRecoveryMoveMaxDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MeleeRecoveryMoveMaxDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.MeleeSlot_NumRings
/// Size: 0x0000 (0x000030 - 0x000030)
class UMeleeSlot_NumRings : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.MeleeSlot_PointsPerRing
/// Size: 0x0000 (0x000030 - 0x000030)
class UMeleeSlot_PointsPerRing : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Wander_Radius
/// Size: 0x0000 (0x000030 - 0x000030)
class UWander_Radius : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Wander_MinMoveDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UWander_MinMoveDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Wander_MaxMoveDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UWander_MaxMoveDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Wander_MaxPathDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UWander_MaxPathDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.RangedRepositionType_Stationary
/// Size: 0x0000 (0x000030 - 0x000030)
class URangedRepositionType_Stationary : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.RangedRepositionType_Strafe
/// Size: 0x0000 (0x000030 - 0x000030)
class URangedRepositionType_Strafe : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.RangedRepositionType_Forward
/// Size: 0x0000 (0x000030 - 0x000030)
class URangedRepositionType_Forward : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionCalledShot_MinMeleeRange
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionCalledShot_MinMeleeRange : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionCalledShot_MaxMeleeRange
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionCalledShot_MaxMeleeRange : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionCalledShot_MinLimitedRange
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionCalledShot_MinLimitedRange : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionCalledShot_MaxLimitedRange
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionCalledShot_MaxLimitedRange : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Townie_MaxFleeDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UTownie_MaxFleeDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MaxUnmarkedFleeDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MaxUnmarkedFleeDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MaxUnmarkedFleePathDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MaxUnmarkedFleePathDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderRadius
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_DeadBodyWanderRadius : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderMinMoveDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_DeadBodyWanderMinMoveDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderMaxMoveDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_DeadBodyWanderMaxMoveDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderMaxPathDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_DeadBodyWanderMaxPathDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_WanderRadius
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_WanderRadius : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_WanderMinMoveDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_WanderMinMoveDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_WanderMaxMoveDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_WanderMaxMoveDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_WanderMaxPathDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_WanderMaxPathDistance : public UAIEQSParameter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIFiringPattern
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIFiringPattern : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_StationaryFiringPattern
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_StationaryFiringPattern : public UAIFiringPattern
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_CoverFiringPattern
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_CoverFiringPattern : public UAIFiringPattern
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MovingFiringPattern
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MovingFiringPattern : public UAIFiringPattern
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_CalledShotRangeFiringPattern
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_CalledShotRangeFiringPattern : public UAIFiringPattern
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIFValue
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIFValue : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Weapon_MinMeleeRange
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeapon_MinMeleeRange : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Weapon_MaxMeleeRange
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeapon_MaxMeleeRange : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Weapon_MaxMeleeRangeWithPadding
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeapon_MaxMeleeRangeWithPadding : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Weapon_MeleeRecoveryMoveRandomChance
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeapon_MeleeRecoveryMoveRandomChance : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Weapon_MeleeRecoveryDodgeRandomChance
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeapon_MeleeRecoveryDodgeRandomChance : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Weapon_MeleeRecoveryMaxTargetDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeapon_MeleeRecoveryMaxTargetDistance : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Weapon_MeleeAdapativeRootmotionStopDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeapon_MeleeAdapativeRootmotionStopDistance : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Weapon_CalledShotMeleeAdapativeRootmotionStopDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeapon_CalledShotMeleeAdapativeRootmotionStopDistance : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MovingFirePrePauseTime
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MovingFirePrePauseTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MaxPreferredRangeF
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MaxPreferredRangeF : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MaxAbsoluteRange
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MaxAbsoluteRange : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_PreferredRange
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_PreferredRange : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_CoverWalkingDistanceThreshold
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_CoverWalkingDistanceThreshold : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_RangedRepositionWalkingDistanceThreshold
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_RangedRepositionWalkingDistanceThreshold : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_TargetLostTimeInitiallySeenRanged
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_TargetLostTimeInitiallySeenRanged : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_TargetLostTimeInitiallyUnseenRanged
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_TargetLostTimeInitiallyUnseenRanged : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_TargetLostTimeInitiallySeenCover
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_TargetLostTimeInitiallySeenCover : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_TargetLostTimeInitiallyUnseenCover
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_TargetLostTimeInitiallyUnseenCover : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_SuppressingFireTime
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_SuppressingFireTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MinMeleeActionDelay
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MinMeleeActionDelay : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MeleeRecoveryDelay
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MeleeRecoveryDelay : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_MeleeWaitDistance
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_MeleeWaitDistance : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_WanderIdleTime
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_WanderIdleTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_WeaponPauseTimeFuzz
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_WeaponPauseTimeFuzz : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_CompanionCommandHunkerDownDuration
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_CompanionCommandHunkerDownDuration : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_CompanionCommandFlankDuration
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_CompanionCommandFlankDuration : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_CompanionCommandSuppressDuration
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_CompanionCommandSuppressDuration : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_DelayDodge
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_DelayDodge : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_DelayMeleeBlock
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_DelayMeleeBlock : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_CompanionCommandSuppressLostTargetTime
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_CompanionCommandSuppressLostTargetTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Settings_CompanionCommandFlankLostTargetTime
/// Size: 0x0000 (0x000030 - 0x000030)
class USettings_CompanionCommandFlankLostTargetTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Follow_TeleportRotation
/// Size: 0x0000 (0x000030 - 0x000030)
class UFollow_TeleportRotation : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Conversation_TeleportRotation
/// Size: 0x0000 (0x000030 - 0x000030)
class UConversation_TeleportRotation : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Wander_WanderRadius
/// Size: 0x0000 (0x000030 - 0x000030)
class UWander_WanderRadius : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_UnreachableWaitTime
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_UnreachableWaitTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Search_WanderIdleTime
/// Size: 0x0000 (0x000030 - 0x000030)
class USearch_WanderIdleTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Teleport_TeleportDuration
/// Size: 0x0000 (0x000030 - 0x000030)
class UTeleport_TeleportDuration : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Teleport_TeleportTargetRotation
/// Size: 0x0000 (0x000030 - 0x000030)
class UTeleport_TeleportTargetRotation : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Follow_MinRange
/// Size: 0x0000 (0x000030 - 0x000030)
class UFollow_MinRange : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Follow_MaxRange
/// Size: 0x0000 (0x000030 - 0x000030)
class UFollow_MaxRange : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.SpellTarget_MaxRange
/// Size: 0x0000 (0x000030 - 0x000030)
class USpellTarget_MaxRange : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.SpellTarget_MinRange
/// Size: 0x0000 (0x000030 - 0x000030)
class USpellTarget_MinRange : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_PreMoveWaitTime
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_PreMoveWaitTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_ArrivalRadius
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_ArrivalRadius : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_DeadBodyWanderIdleTime
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_DeadBodyWanderIdleTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_SeeKilledTeammateTime
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_SeeKilledTeammateTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_EndWaitTime
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_EndWaitTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_StimulusUpdateMinDuration
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_StimulusUpdateMinDuration : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Investigate_ExitChatterTriggerTime
/// Size: 0x0000 (0x000030 - 0x000030)
class UInvestigate_ExitChatterTriggerTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Furniture_EntryAcceptanceRadius
/// Size: 0x0000 (0x000030 - 0x000030)
class UFurniture_EntryAcceptanceRadius : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.MoveTo_ArrivalWaitTime
/// Size: 0x0000 (0x000030 - 0x000030)
class UMoveTo_ArrivalWaitTime : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CalledShot_CameraCutDelay
/// Size: 0x0000 (0x000030 - 0x000030)
class UCalledShot_CameraCutDelay : public UAIFValue
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AIInt
/// Size: 0x0000 (0x000030 - 0x000030)
class UAIInt : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CalledShot_FireIndex
/// Size: 0x0000 (0x000030 - 0x000030)
class UCalledShot_FireIndex : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.FiringPatternComplete_FinishBehavior
/// Size: 0x0000 (0x000030 - 0x000030)
class UFiringPatternComplete_FinishBehavior : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.FiringPatternComplete_FinishTask
/// Size: 0x0000 (0x000030 - 0x000030)
class UFiringPatternComplete_FinishTask : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.FiringPatternComplete_Repeat
/// Size: 0x0000 (0x000030 - 0x000030)
class UFiringPatternComplete_Repeat : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.FiringPatternComplete_Cover
/// Size: 0x0000 (0x000030 - 0x000030)
class UFiringPatternComplete_Cover : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.MeleeAction_CurrentRequest
/// Size: 0x0000 (0x000030 - 0x000030)
class UMeleeAction_CurrentRequest : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.MeleeAction_RecoveryDodgeDirection
/// Size: 0x0000 (0x000030 - 0x000030)
class UMeleeAction_RecoveryDodgeDirection : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.WeaponSlot_CurrentRequest
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeaponSlot_CurrentRequest : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Context_CurrentRequest
/// Size: 0x0000 (0x000030 - 0x000030)
class UContext_CurrentRequest : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Dodge_Direction
/// Size: 0x0000 (0x000030 - 0x000030)
class UDodge_Direction : public UAIInt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AILocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UAILocation : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AILocationWritable
/// Size: 0x0000 (0x000030 - 0x000030)
class UAILocationWritable : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_MoveLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_MoveLocation : public UAILocationWritable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_DecisionTreeLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_DecisionTreeLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_DecisionTreeActorLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_DecisionTreeActorLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_CurrentLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_CurrentLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetStimulusLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetStimulusLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetAimLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetAimLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetHeadLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetHeadLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetCheatAimLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetCheatAimLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetCheatHeadLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetCheatHeadLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetMovingAimLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetMovingAimLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetMovingHeadLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetMovingHeadLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetSphereCheatLocaiton
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetSphereCheatLocaiton : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetStimulusSourceActorLocaiton
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetStimulusSourceActorLocaiton : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_PrimaryTargetProjectedStimulusLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_PrimaryTargetProjectedStimulusLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_RandomNearbyLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_RandomNearbyLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_VantageLocationForPrimaryTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_VantageLocationForPrimaryTarget : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_FurthestLocationOnSpline
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_FurthestLocationOnSpline : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Cover_CoverFiringLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UCover_CoverFiringLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Cover_CoverFiringAimLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UCover_CoverFiringAimLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Cover_CoverIntoCoverFiringAim
/// Size: 0x0000 (0x000030 - 0x000030)
class UCover_CoverIntoCoverFiringAim : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Cover_CoverLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UCover_CoverLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Cover_CoverWallLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UCover_CoverWallLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Melee_BodyAttackingTargetLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UMelee_BodyAttackingTargetLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Patrol_PatrolNodeOrientationLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UPatrol_PatrolNodeOrientationLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Follow_TeleportLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UFollow_TeleportLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Conversation_TeleportLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UConversation_TeleportLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Follow_FollowTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UFollow_FollowTarget : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Wander_Origin
/// Size: 0x0000 (0x000030 - 0x000030)
class UWander_Origin : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Idle_Origin
/// Size: 0x0000 (0x000030 - 0x000030)
class UIdle_Origin : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Idle_OrientationLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UIdle_OrientationLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Furniture_EntryLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UFurniture_EntryLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Furniture_ProjectedEntryLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UFurniture_ProjectedEntryLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Furniture_ExitLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UFurniture_ExitLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Furniture_RotationLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UFurniture_RotationLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Jump_StartLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UJump_StartLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Jump_EndLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UJump_EndLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Crouch_StartLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UCrouch_StartLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Crouch_EndLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UCrouch_EndLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Walk_StartLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UWalk_StartLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Walk_EndLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UWalk_EndLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CompanionCommand_MoveTo
/// Size: 0x0000 (0x000030 - 0x000030)
class UCompanionCommand_MoveTo : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.General_HealTargetLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UGeneral_HealTargetLocation : public UAILocation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_UObject
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_UObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_DisableStatusEffect
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_DisableStatusEffect : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_FleeStatusEffect
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_FleeStatusEffect : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_PersuadeStatusEffect
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_PersuadeStatusEffect : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_TeleportStartAnimation
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_TeleportStartAnimation : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_TeleportEmergingAnimation
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_TeleportEmergingAnimation : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_TeleportExitAnimation
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_TeleportExitAnimation : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_TeleportEQS
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_TeleportEQS : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_SpawnActorAnimation
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_SpawnActorAnimation : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_CowerAnimation
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_CowerAnimation : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AI_AnimationStateAnimation
/// Size: 0x0000 (0x000030 - 0x000030)
class UAI_AnimationStateAnimation : public UAI_UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AISettings_Behavior
/// Size: 0x0000 (0x000030 - 0x000030)
class UAISettings_Behavior : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Indiana.DefensiveActionElement
/// Size: 0x0004 (0x000000 - 0x000004)
class FDefensiveActionElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     Probability                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Struct /Script/Indiana.ReactiveToMeleeElement
/// Size: 0x005C (0x000004 - 0x000060)
class FReactiveToMeleeElement : public FDefensiveActionElement
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     PerMeleeHitModifier                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxProbability                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TMap<EMeleeAction, float>)                 MeleeActionProbabilityOverrides                             OFFSET(get<T>, {0x10, 80, 0, 0})
};

/// Struct /Script/Indiana.ReactiveToRangeElement
/// Size: 0x0014 (0x000000 - 0x000014)
class FReactiveToRangeElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     MinSustainFireDuration                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxSustainFireDuration                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     SustainFirePauseDuration                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     DodgeProbability                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     BlockProbability                                            OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Class /Script/Indiana.AISettings_DefensiveAction
/// Size: 0x0078 (0x000038 - 0x0000B0)
class UAISettings_DefensiveAction : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TMap<EDefensiveActionType, FReactiveToMeleeElement>) ReactiveToMeleeActions                            OFFSET(get<T>, {0x38, 80, 0, 0})
	SMember(FReactiveToRangeElement)                   ReactiveToRangeActions                                      OFFSET(getStruct<T>, {0x88, 20, 0, 0})
	DMember(float)                                     PreEmptiveActionProbability                                 OFFSET(get<float>, {0x9C, 4, 0, 0})
	CMember(TArray<EDefensiveActionType>)              PreemptiveMeleeActions                                      OFFSET(get<T>, {0xA0, 16, 0, 0})
};

/// Class /Script/Indiana.AISettings_Follow
/// Size: 0x0058 (0x000030 - 0x000088)
class UAISettings_Follow : public UAISettings_Behavior
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TWeakObjectPtr<class AIndianaCharacter*>)  FollowTarget                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TWeakObjectPtr<class ASpawnNodeBase*>)     FollowTargetSpawnNode                                       OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(float)                                     MinRange                                                    OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Indiana.AISettings_FollowPlayer
/// Size: 0x0000 (0x000030 - 0x000030)
class UAISettings_FollowPlayer : public UAISettings_Behavior
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AISettings_Furniture
/// Size: 0x0028 (0x000030 - 0x000058)
class UAISettings_Furniture : public UAISettings_Behavior
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class AFurnitureActor*)                    Furniture                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bTeleport                                                   OFFSET(get<bool>, {0x38, 1, 0, 0})
	CMember(class AActor*)                             FurnitureActor                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UFurnitureComponent*)                FurnitureComponent                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(bool)                                      bInfiniteDuration                                           OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Class /Script/Indiana.AISettings_Idle
/// Size: 0x0000 (0x000030 - 0x000030)
class UAISettings_Idle : public UAISettings_Behavior
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.AISettings_Patrol
/// Size: 0x0010 (0x000030 - 0x000040)
class UAISettings_Patrol : public UAISettings_Behavior
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class APatrolNode*)                        PatrolNode                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(EPatrolType)                               PatrolType                                                  OFFSET(get<T>, {0x38, 1, 0, 0})
	DMember(bool)                                      bTeleport                                                   OFFSET(get<bool>, {0x39, 1, 0, 0})
};

/// Class /Script/Indiana.AISettings_Traverse
/// Size: 0x0020 (0x000030 - 0x000050)
class UAISettings_Traverse : public UAISettings_Behavior
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.AISettings_Wander
/// Size: 0x0018 (0x000030 - 0x000048)
class UAISettings_Wander : public UAISettings_Behavior
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     MinMoveDistance                                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     MaxMoveDistance                                             OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     MinIdleTime                                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     MaxIdleTime                                                 OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_RecoveryBackupBehavior
/// Size: 0x0020 (0x000000 - 0x000020)
class FAISettings_RecoveryBackupBehavior : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EMeleeRecoveryType)                        RecoveryType                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     BackupChance                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxBackupDistance                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinBackupDistance                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DodgeChance                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(EDodgeDirection)                           DodgeDirection                                              OFFSET(get<T>, {0x14, 1, 0, 0})
	DMember(bool)                                      bDodgeRequiresClearPath                                     OFFSET(get<bool>, {0x15, 1, 0, 0})
	DMember(float)                                     MaxValidTargetDistance                                      OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bShouldLookAtTarget                                         OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Indiana.AISettings_MeleeActionBase
/// Size: 0x003C (0x000000 - 0x00003C)
class FAISettings_MeleeActionBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	DMember(float)                                     RecoveryDelay                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(bool)                                      bUseAdaptiveRootMotion                                      OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(float)                                     AdaptiveRootMotionStopDistance                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bOverrideBackupBehavior                                     OFFSET(get<bool>, {0xC, 1, 0, 0})
	SMember(FAISettings_RecoveryBackupBehavior)        BackupBehavior                                              OFFSET(getStruct<T>, {0x10, 32, 0, 0})
	DMember(float)                                     AttackingRotationThreshold                                  OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     PreferredAttackDistance                                     OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_MeleeAction
/// Size: 0x001C (0x00003C - 0x000058)
class FAISettings_MeleeAction : public FAISettings_MeleeActionBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
	CMember(EMeleeActionUseCase)                       UseCase                                                     OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(float)                                     UseRange                                                    OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bOverrideNumMeleeSlotsRequired                              OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(int32_t)                                   NumMeleeSlotsRequired                                       OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(bool)                                      bIgnoreCollisionDuringApproach                              OFFSET(get<bool>, {0x54, 1, 0, 0})
	DMember(bool)                                      bBumpDuringApproach                                         OFFSET(get<bool>, {0x55, 1, 0, 0})
	DMember(bool)                                      bSprintDuringApproach                                       OFFSET(get<bool>, {0x56, 1, 0, 0})
};

/// Struct /Script/Indiana.AISettings_MeleePatternEntry
/// Size: 0x0048 (0x000000 - 0x000048)
class FAISettings_MeleePatternEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UMeleeSlotRequestData*)              MeleeAction                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FAISettings_MeleeActionBase)               Settings                                                    OFFSET(getStruct<T>, {0x8, 60, 0, 0})
};

/// Struct /Script/Indiana.AISettings_MeleePattern
/// Size: 0x0020 (0x000000 - 0x000020)
class FAISettings_MeleePattern : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     MaxValidTargetDistance                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(TArray<FAISettings_MeleePatternEntry>)     AttackPattern                                               OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Indiana.AISettings_Melee
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FAISettings_Melee : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     MinDelayBetweenActions                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LostTargetTime                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     LostTargetRangeScalar                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MeleeWaitDistance                                           OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FAISettings_RecoveryBackupBehavior)        MainBackupBehavior                                          OFFSET(getStruct<T>, {0x14, 32, 0, 0})
	CMember(TMap<class UMeleeSlotRequestData*, FAISettings_MeleeAction>) MeleeActions                              OFFSET(get<T>, {0x38, 80, 0, 0})
	DMember(bool)                                      bUseAttackPattern                                           OFFSET(get<bool>, {0x88, 1, 0, 0})
	CMember(TMap<class UMeleeSlotPatternRequestData*, FAISettings_MeleePattern>) AttackPatterns                    OFFSET(get<T>, {0x90, 80, 0, 0})
};

/// Struct /Script/Indiana.AISettings_FiringPattern
/// Size: 0x0018 (0x000000 - 0x000018)
class FAISettings_FiringPattern : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     StartPauseTime                                              OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   BurstRounds                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     BurstTime                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   BurstCount                                                  OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(float)                                     BurstPauseTime                                              OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     EndPauseTime                                                OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_StationaryFire
/// Size: 0x001C (0x000000 - 0x00001C)
class FAISettings_StationaryFire : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FAISettings_FiringPattern)                 FiringPattern                                               OFFSET(getStruct<T>, {0x4, 24, 0, 0})
};

/// Struct /Script/Indiana.AISettings_CoverFire
/// Size: 0x002C (0x000000 - 0x00002C)
class FAISettings_CoverFire : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(EUsableCoverTypes)                         CoverTypes                                                  OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(int32_t)                                   MaxCoverUses                                                OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FAISettings_FiringPattern)                 FiringPattern                                               OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   CoverUseCount                                               OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(float)                                     CoverTime                                                   OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     CoverTimeFuzz                                               OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_MovingFire
/// Size: 0x002C (0x000000 - 0x00002C)
class FAISettings_MovingFire : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     PrePauseTime                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FAISettings_FiringPattern)                 FiringPattern                                               OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(bool)                                      bCanFireWhileRunning                                        OFFSET(get<bool>, {0x20, 1, 0, 0})
	DMember(bool)                                      bFireWhileMovingToPreferredRange                            OFFSET(get<bool>, {0x21, 1, 0, 0})
	DMember(float)                                     MovingToPreferredRangeNoFireTime                            OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     MovingToPreferredRangeFireTime                              OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_SuppressingFire
/// Size: 0x0001 (0x000000 - 0x000001)
class FAISettings_SuppressingFire : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	CMember(ESuppressingFireDuration)                  Duration                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
};

/// Struct /Script/Indiana.AISettings_LostTarget
/// Size: 0x000C (0x000000 - 0x00000C)
class FAISettings_LostTarget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(ELostTargetWaitTime)                       WaitTime                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   ReenterCoverCount                                           OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(ELostTargetSearchMode)                     SearchMode                                                  OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Indiana.AISettings_RangedBehavior_Set
/// Size: 0x0010 (0x000000 - 0x000010)
class FAISettings_RangedBehavior_Set : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     CoverWeight                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     RangeWeight                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_RangedBehavior_TooFar_Set
/// Size: 0x0008 (0x000010 - 0x000018)
class FAISettings_RangedBehavior_TooFar_Set : public FAISettings_RangedBehavior_Set
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     PreferredRangeWeight                                        OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_RangePositioning_Set
/// Size: 0x0010 (0x000000 - 0x000010)
class FAISettings_RangePositioning_Set : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     StationaryWeight                                            OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     BackwardWeight                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     ForwardWeight                                               OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     StrafeWeight                                                OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_RangedPositioning
/// Size: 0x0030 (0x000000 - 0x000030)
class FAISettings_RangedPositioning : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FAISettings_RangePositioning_Set)          TooNear                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FAISettings_RangePositioning_Set)          PreferredRange                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FAISettings_RangePositioning_Set)          TooFar                                                      OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Indiana.AISettings_RangedBehavior
/// Size: 0x0080 (0x000000 - 0x000080)
class FAISettings_RangedBehavior : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EOnEnterCombatBehavior)                    OnEnterCombatBehavior                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      bLimitedRange                                               OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bShootAtFeet                                                OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      bArcingWeapon                                               OFFSET(get<bool>, {0x3, 1, 0, 0})
	DMember(float)                                     MinMoveDistance                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxMoveDistance                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FAISettings_RangedBehavior_Set)            Near                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FAISettings_RangedBehavior_Set)            PreferedRange                                               OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FAISettings_RangedBehavior_TooFar_Set)     ToFar                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	DMember(bool)                                      bOverrideRangeReposition                                    OFFSET(get<bool>, {0x48, 1, 0, 0})
	SMember(FAISettings_RangedPositioning)             OverrideRangeRepositionData                                 OFFSET(getStruct<T>, {0x4C, 48, 0, 0})
};

/// Struct /Script/Indiana.AISettings_Block
/// Size: 0x0014 (0x000000 - 0x000014)
class FAISettings_Block : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MaxBlockTime                                                OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     BlockAttemptTimeWindow                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_Dodge
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISettings_Dodge : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Indiana.AISettings_Positioning
/// Size: 0x000C (0x000000 - 0x00000C)
class FAISettings_Positioning : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     PreferredMinRange                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PreferredMaxRange                                           OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     AbsoluteRangeBuffer                                         OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Indiana.AISettings_Weapon
/// Size: 0x0228 (0x000038 - 0x000260)
class UAISettings_Weapon : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(EWeaponFireType)                           WeaponFireType                                              OFFSET(get<T>, {0x38, 1, 0, 0})
	SMember(FAISettings_Melee)                         Melee                                                       OFFSET(getStruct<T>, {0x40, 224, 0, 0})
	DMember(float)                                     PauseTimeFuzz                                               OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(bool)                                      ScopeWhileShooting                                          OFFSET(get<bool>, {0x124, 1, 0, 0})
	SMember(FAISettings_StationaryFire)                StationaryFire                                              OFFSET(getStruct<T>, {0x128, 28, 0, 0})
	SMember(FAISettings_CoverFire)                     CoverFire                                                   OFFSET(getStruct<T>, {0x144, 44, 0, 0})
	SMember(FAISettings_MovingFire)                    MovingFire                                                  OFFSET(getStruct<T>, {0x170, 44, 0, 0})
	SMember(FAISettings_SuppressingFire)               SuppressingFire                                             OFFSET(getStruct<T>, {0x19C, 1, 0, 0})
	SMember(FAISettings_LostTarget)                    LostTarget                                                  OFFSET(getStruct<T>, {0x1A0, 12, 0, 0})
	SMember(FAISettings_RangedBehavior)                RangeBehavior                                               OFFSET(getStruct<T>, {0x1B0, 128, 0, 0})
	CMember(class UAISettings_DefensiveAction*)        AI_SettingsDefensiveActions                                 OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FAISettings_Block)                         Block                                                       OFFSET(getStruct<T>, {0x238, 20, 0, 0})
	SMember(FAISettings_Dodge)                         Dodge                                                       OFFSET(getStruct<T>, {0x24C, 8, 0, 0})
	SMember(FAISettings_Positioning)                   Positioning                                                 OFFSET(getStruct<T>, {0x254, 12, 0, 0})
};

/// Struct /Script/Indiana.AISettingsWander
/// Size: 0x0014 (0x000000 - 0x000014)
class FAISettingsWander : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MinMoveDistance                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxMoveDistance                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinIdleTime                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxIdleTime                                                 OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Indiana.BehaviorSettings_Set
/// Size: 0x0010 (0x000000 - 0x000010)
class FBehaviorSettings_Set : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UAISettings_Behavior*)               DefaultBehavior                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UInterestDataPackage*)               InterestData                                                OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.GlobalVariable
/// Size: 0x0010 (0x000000 - 0x000010)
class FGlobalVariable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.GlobalVariableConditional
/// Size: 0x0030 (0x000000 - 0x000030)
class FGlobalVariableConditional : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGlobalVariable)                           GlobalVariable                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(EGlobalVariableComparison)                 Operator                                                    OFFSET(get<T>, {0x10, 1, 0, 0})
	SMember(FGlobalVariable)                           OtherGlobalVariable                                         OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      bDefault                                                    OFFSET(get<bool>, {0x2C, 1, 0, 0})
};

/// Struct /Script/Indiana.QuestReference
/// Size: 0x0010 (0x000000 - 0x000010)
class FQuestReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.QuestStateConditional
/// Size: 0x0014 (0x000000 - 0x000014)
class FQuestStateConditional : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FQuestReference)                           QuestReference                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(EEqualityComparison)                       Operator                                                    OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(EQuestState)                               ComparisonState                                             OFFSET(get<T>, {0x11, 1, 0, 0})
	DMember(bool)                                      bDefault                                                    OFFSET(get<bool>, {0x12, 1, 0, 0})
};

/// Struct /Script/Indiana.CompanionStateConditional
/// Size: 0x0004 (0x000000 - 0x000004)
class FCompanionStateConditional : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	CMember(ESpecialObsidianID)                        CompanionToCheck                                            OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EEqualityComparison)                       Operator                                                    OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(ECompanionState)                           ComparisonState                                             OFFSET(get<T>, {0x2, 1, 0, 0})
	DMember(bool)                                      bDefault                                                    OFFSET(get<bool>, {0x3, 1, 0, 0})
};

/// Struct /Script/Indiana.PCGenderConditional
/// Size: 0x0003 (0x000000 - 0x000003)
class FPCGenderConditional : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 3;

public:
	CMember(EEqualityComparison)                       Operator                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EGender)                                   ComparisonGender                                            OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(bool)                                      bDefault                                                    OFFSET(get<bool>, {0x2, 1, 0, 0})
};

/// Struct /Script/Indiana.DLCInstalledConditional
/// Size: 0x0002 (0x000000 - 0x000002)
class FDLCInstalledConditional : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(EDLCType)                                  DLCToCheck                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      bDefault                                                    OFFSET(get<bool>, {0x1, 1, 0, 0})
};

/// Struct /Script/Indiana.LogicalStatement
/// Size: 0x0058 (0x000000 - 0x000058)
class FLogicalStatement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(ELogicalOperator)                          Operator                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EConditionalType)                          ConditionalType                                             OFFSET(get<T>, {0x1, 1, 0, 0})
	SMember(FGlobalVariableConditional)                Condition                                                   OFFSET(getStruct<T>, {0x8, 48, 0, 0})
	SMember(FQuestStateConditional)                    QuestStateCondition                                         OFFSET(getStruct<T>, {0x38, 20, 0, 0})
	SMember(FCompanionStateConditional)                CompanionStateCondition                                     OFFSET(getStruct<T>, {0x4C, 4, 0, 0})
	SMember(FPCGenderConditional)                      PCGenderCondition                                           OFFSET(getStruct<T>, {0x50, 3, 0, 0})
	SMember(FDLCInstalledConditional)                  DLCInstalledCondition                                       OFFSET(getStruct<T>, {0x53, 2, 0, 0})
};

/// Struct /Script/Indiana.LogicalExpression
/// Size: 0x0068 (0x000000 - 0x000068)
class FLogicalExpression : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(EConditionalType)                          ConditionalType                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FGlobalVariableConditional)                BaseCondition                                               OFFSET(getStruct<T>, {0x8, 48, 0, 0})
	SMember(FQuestStateConditional)                    BaseQuestStateCondition                                     OFFSET(getStruct<T>, {0x38, 20, 0, 0})
	SMember(FCompanionStateConditional)                BaseCompanionStateCondition                                 OFFSET(getStruct<T>, {0x4C, 4, 0, 0})
	SMember(FPCGenderConditional)                      BasePCGenderCondition                                       OFFSET(getStruct<T>, {0x50, 3, 0, 0})
	SMember(FDLCInstalledConditional)                  BaseDLCInstalledCondition                                   OFFSET(getStruct<T>, {0x53, 2, 0, 0})
	CMember(TArray<FLogicalStatement>)                 AdditionalConditions                                        OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Struct /Script/Indiana.ScriptedBehavior_Set
/// Size: 0x0068 (0x000010 - 0x000078)
class FScriptedBehavior_Set : public FBehaviorSettings_Set
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FLogicalExpression)                        GlobalVariableExpression                                    OFFSET(getStruct<T>, {0x10, 104, 0, 0})
};

/// Struct /Script/Indiana.BehaviorPackage
/// Size: 0x0098 (0x000000 - 0x000098)
class FBehaviorPackage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FBehaviorSettings_Set)                     DefaultBehaviorData                                         OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TMap<EPhaseOfDay, FBehaviorSettings_Set>)  TimeOfDayData                                               OFFSET(get<T>, {0x10, 80, 0, 0})
	CMember(TArray<FScriptedBehavior_Set>)             ScriptedBehaviors                                           OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(float)                                     InterestRadius                                              OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Struct /Script/Indiana.BehaviorPhases
/// Size: 0x0030 (0x000000 - 0x000030)
class FBehaviorPhases : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<class UEventListener*>)             PhaseListeners                                              OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Indiana.SaveGameDataBehaviorStack
/// Size: 0x0010 (0x000000 - 0x000010)
class FSaveGameDataBehaviorStack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UBehaviorStateInfo*>)         SavedStateInfos                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.SaveGameDataDetection
/// Size: 0x0030 (0x000000 - 0x000030)
class FSaveGameDataDetection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Indiana.SaveGameDataTargetInfo
/// Size: 0x0014 (0x000000 - 0x000014)
class FSaveGameDataTargetInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
};

/// Struct /Script/Indiana.SaveGameDataDecisionTree
/// Size: 0x0008 (0x000000 - 0x000008)
class FSaveGameDataDecisionTree : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Indiana.SaveGameDataInterest
/// Size: 0x0050 (0x000000 - 0x000050)
class FSaveGameDataInterest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Indiana.SaveGameDataAIController
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FSaveGameDataAIController : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FSaveGameDataBehaviorStack)                BehaviorStackData                                           OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FSaveGameDataDetection)                    DetectionData                                               OFFSET(getStruct<T>, {0x20, 48, 0, 0})
	SMember(FSaveGameDataTargetInfo)                   TargetInfoData                                              OFFSET(getStruct<T>, {0x50, 20, 0, 0})
	SMember(FSaveGameDataDecisionTree)                 DecisionTreeData                                            OFFSET(getStruct<T>, {0x64, 8, 0, 0})
	SMember(FSaveGameDataInterest)                     InterestData                                                OFFSET(getStruct<T>, {0x70, 80, 0, 0})
};

/// Class /Script/Indiana.AISettingsComponent
/// Size: 0x02C8 (0x0000E0 - 0x0003A8)
class UAISettingsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	CMember(TArray<FString>)                           LevelsToWaitForLoad                                         OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(class UDecisionTreeDesignerDataBundle*)    OverrideDecisionTreeData                                    OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UDecisionTreeDesignerDataBundle*)    SecondaryOverrideDecisionTreeData                           OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UClass*)                             CustomAIUpdate                                              OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UClass*)                             DebugDecisionTree                                           OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UBehaviorStateRequestData*)          DebugDecisionTreeRequest                                    OFFSET(get<T>, {0x118, 8, 0, 0})
	DMember(bool)                                      bCanOpenDoors                                               OFFSET(get<bool>, {0x120, 1, 0, 0})
	DMember(bool)                                      bCanPathThroughHazards                                      OFFSET(get<bool>, {0x121, 1, 0, 0})
	DMember(bool)                                      bCanPathThroughTraps                                        OFFSET(get<bool>, {0x122, 1, 0, 0})
	DMember(bool)                                      bCanPathThroughMines                                        OFFSET(get<bool>, {0x123, 1, 0, 0})
	DMember(bool)                                      bCanJump                                                    OFFSET(get<bool>, {0x124, 1, 0, 0})
	DMember(bool)                                      bCanCrouch                                                  OFFSET(get<bool>, {0x125, 1, 0, 0})
	DMember(bool)                                      bCanUseLadders                                              OFFSET(get<bool>, {0x126, 1, 0, 0})
	CMember(EDetectionMode)                            DetectionMode                                               OFFSET(get<T>, {0x158, 1, 0, 0})
	DMember(bool)                                      bGodVision                                                  OFFSET(get<bool>, {0x159, 1, 0, 0})
	DMember(bool)                                      bVisionAnimationDrivenPreCombat                             OFFSET(get<bool>, {0x15B, 1, 0, 0})
	CMember(ECombatReaction)                           CombatReaction                                              OFFSET(get<T>, {0x170, 1, 0, 0})
	CMember(EWeaponPreference)                         WeaponPreference                                            OFFSET(get<T>, {0x171, 1, 0, 0})
	DMember(float)                                     MeleePreferenceRange                                        OFFSET(get<float>, {0x174, 4, 0, 0})
	DMember(int32_t)                                   NumMeleeSlotsRequired                                       OFFSET(get<int32_t>, {0x178, 4, 0, 0})
	CMember(ESlotPriority)                             SlotPriority                                                OFFSET(get<T>, {0x17C, 1, 0, 0})
	DMember(float)                                     PlayerProximityDistanceThreshold                            OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     CowerMinTime                                                OFFSET(get<float>, {0x184, 4, 0, 0})
	CMember(class AFleeNode*)                          OverrideFleeNode                                            OFFSET(get<T>, {0x188, 8, 0, 0})
	DMember(bool)                                      bCanFleeToUnmarkedLocations                                 OFFSET(get<bool>, {0x190, 1, 0, 0})
	DMember(float)                                     MaxUnmarkedFleeDistance                                     OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(bool)                                      bTetherEnabled                                              OFFSET(get<bool>, {0x198, 1, 0, 0})
	DMember(bool)                                      bUseTetherOverrideRadius                                    OFFSET(get<bool>, {0x199, 1, 0, 0})
	DMember(float)                                     TetherOverrideRadius                                        OFFSET(get<float>, {0x19C, 4, 0, 0})
	CMember(EDefaultBehaviorType)                      DefaultBehaviorType                                         OFFSET(get<T>, {0x1A1, 1, 0, 0})
	CMember(class APatrolNode*)                        PatrolNode                                                  OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(class UInterestDataPackage*)               InterestData                                                OFFSET(get<T>, {0x1B0, 8, 0, 0})
	CMember(EParentDefaultBehaviorType)                ParentDefaultBehaviorType                                   OFFSET(get<T>, {0x1B8, 1, 0, 0})
	DMember(bool)                                      bParentOverrideWanderSettings                               OFFSET(get<bool>, {0x1B9, 1, 0, 0})
	SMember(FAISettingsWander)                         ParentOverrideWanderSettings                                OFFSET(getStruct<T>, {0x1BC, 20, 0, 0})
	CMember(class UInterestDataPackage*)               ParentInterestData                                          OFFSET(get<T>, {0x1D0, 8, 0, 0})
	SMember(FBehaviorPackage)                          OutOfCombatData                                             OFFSET(getStruct<T>, {0x1D8, 152, 0, 0})
	CMember(class UAISettings_Behavior*)               ParentDefaultBehavior                                       OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UAISettings_Behavior*)               OverrideDefaultBehavior                                     OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UAISettings_Weapon*)                 AISettings                                                  OFFSET(get<T>, {0x290, 8, 0, 0})
	SMember(FBehaviorPhases)                           PhaseInfo                                                   OFFSET(getStruct<T>, {0x2A0, 48, 0, 0})
	SMember(FSaveGameDataAIController)                 ControllerSaveData                                          OFFSET(getStruct<T>, {0x2D0, 192, 0, 0})
	CMember(class UAISenseConfig_Sight*)               OutOfCombatSightConfigOverride                              OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(EPseudoGodMode)                            PseudoGodMode                                               OFFSET(get<T>, {0x3A0, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.AISettingsComponent.OnUnequipWeapon
	// void OnUnequipWeapon(class UWeapon* Weapon);                                                                             // [0x179c170] Final|Native|Private 
	// Function /Script/Indiana.AISettingsComponent.OnEquipWeapon
	// void OnEquipWeapon(class UWeapon* Weapon);                                                                               // [0x179bd50] Final|Native|Private 
};

/// Class /Script/Indiana.TargetingComponent
/// Size: 0x0008 (0x0000E0 - 0x0000E8)
class UTargetingComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
};

/// Class /Script/Indiana.AiTargetingComponent
/// Size: 0x0010 (0x0000E8 - 0x0000F8)
class UAiTargetingComponent : public UTargetingComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
};

/// Class /Script/Indiana.Alarm
/// Size: 0x0010 (0x0002B8 - 0x0002C8)
class AAlarm : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(TWeakObjectPtr<class ARestrictedArea*>)    RestrictedArea                                              OFFSET(get<T>, {0x2C0, 8, 0, 0})
};

/// Class /Script/Indiana.AlarmComponent
/// Size: 0x0018 (0x0000E0 - 0x0000F8)
class UAlarmComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FMulticastInlineDelegate)                  OnAlarmStateChange                                          OFFSET(getStruct<T>, {0xE0, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.AlarmComponent.GetAlarmState
	// EAlarmState GetAlarmState();                                                                                             // [0x179bc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.ExaminableStringSet
/// Size: 0x0020 (0x000000 - 0x000020)
class FExaminableStringSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FLocString)                                OverrideLabel                                               OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     RemoteEventOnExaminationEnd                                 OFFSET(getStruct<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Indiana.ItemTutorialSet
/// Size: 0x0006 (0x000000 - 0x000006)
class FItemTutorialSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 6;

public:
	CMember(ETutorialEvent)                            OnItemAddedTutorial                                         OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ETutorialEvent)                            OnItemEquippedTutorial                                      OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(ETutorialEvent)                            OnItemLostTutorial                                          OFFSET(get<T>, {0x2, 1, 0, 0})
	CMember(ETutorialEvent)                            OnItemBreakDownTutorial                                     OFFSET(get<T>, {0x3, 1, 0, 0})
	CMember(ETutorialEvent)                            OnItemDroppedTutorial                                       OFFSET(get<T>, {0x4, 1, 0, 0})
	CMember(ETutorialEvent)                            OnItemSoldTutorial                                          OFFSET(get<T>, {0x5, 1, 0, 0})
};

/// Struct /Script/Indiana.GameDateTime
/// Size: 0x0008 (0x000000 - 0x000008)
class FGameDateTime : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Class /Script/Indiana.Item
/// Size: 0x00E8 (0x000030 - 0x000118)
class UItem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FLocString)                                Brand                                                       OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      bHideDescriptionFromTooltip                                 OFFSET(get<bool>, {0x48, 1, 0, 0})
	SMember(FLocString)                                Lore                                                        OFFSET(getStruct<T>, {0x4C, 8, 0, 0})
	CMember(class UTexture2D*)                         UIImage                                                     OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(bool)                                      bIsExaminable                                               OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(bool)                                      bRequiresUIPromptOnAcquire                                  OFFSET(get<bool>, {0x61, 1, 0, 0})
	SMember(FExaminableStringSet)                      ExaminableStringSet                                         OFFSET(getStruct<T>, {0x64, 32, 0, 0})
	CMember(class UBrandDataAsset*)                    BrandData                                                   OFFSET(get<T>, {0x88, 8, 0, 0})
	DMember(bool)                                      bUnique                                                     OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(bool)                                      bPristine                                                   OFFSET(get<bool>, {0x91, 1, 0, 0})
	DMember(bool)                                      bCanBeScavenged                                             OFFSET(get<bool>, {0x92, 1, 0, 0})
	DMember(bool)                                      bAutoJunk                                                   OFFSET(get<bool>, {0x93, 1, 0, 0})
	DMember(int32_t)                                   ItemLevel                                                   OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(int32_t)                                   BaseValue                                                   OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x9C, 4, 0, 0})
	SMember(FRotator)                                  PaperdollOriginRotation                                     OFFSET(getStruct<T>, {0xA0, 12, 0, 0})
	CMember(class UAkAudioEvent*)                      OnUseEvent                                                  OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UClass*)                             OwningFaction                                               OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             OwningActor                                                 OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(bool)                                      bPlayerOwned                                                OFFSET(get<bool>, {0xF0, 1, 0, 0})
	SMember(FGameplayTag)                              GameplayTag                                                 OFFSET(getStruct<T>, {0xF4, 8, 0, 0})
	SMember(FItemTutorialSet)                          Tutorials                                                   OFFSET(getStruct<T>, {0xFC, 6, 0, 0})
	DMember(uint32_t)                                  ItemFlags                                                   OFFSET(get<uint32_t>, {0x104, 4, 0, 0})
	DMember(uint32_t)                                  AmountOfSaleByPlayer                                        OFFSET(get<uint32_t>, {0x108, 4, 0, 0})
	SMember(FGameDateTime)                             TimeOfSaleByPlayer                                          OFFSET(getStruct<T>, {0x110, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.Item.SetPlayerOwnership
	// void SetPlayerOwnership(bool bRemoveNonPlayerOwnership);                                                                 // [0x186ea60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.SetOwnership
	// void SetOwnership(class UClass* Faction, TWeakObjectPtr<AActor*> Actor, bool bInPlayerOwned);                            // [0x186e8b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.SetNonPlayerOwnership
	// void SetNonPlayerOwnership(class UClass* Faction, TWeakObjectPtr<AActor*> Actor, bool bRemovePlayerOwnership);           // [0x186e700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.IsPlayerOwned
	// bool IsPlayerOwned();                                                                                                    // [0x179bc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Item.GetOwningFaction
	// class UClass* GetOwningFaction();                                                                                        // [0x186dae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Item.GetOwningActor
	// TWeakObjectPtr<AActor*> GetOwningActor();                                                                                // [0x186da90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Item.ClearPlayerOwnership
	// void ClearPlayerOwnership();                                                                                             // [0x186da30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.ClearNonPlayerOwnership
	// void ClearNonPlayerOwnership();                                                                                          // [0x186da10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.ClearAllOwnership
	// void ClearAllOwnership();                                                                                                // [0x186d9f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Item.CanPlayerSafelyTake
	// bool CanPlayerSafelyTake();                                                                                              // [0x186d9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.DamageMultipliers
/// Size: 0x0010 (0x000000 - 0x000010)
class FDamageMultipliers : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     BaseDamageMultiplier                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DamageThresholdMultiplier                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     DamageResistanceMultiplier                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     PostArmorDamageMultiplier                                   OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/Indiana.Ammo
/// Size: 0x0088 (0x000118 - 0x0001A0)
class UAmmo : public UItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(EAmmoType)                                 AmmoType                                                    OFFSET(get<T>, {0x118, 1, 0, 0})
	SMember(FDamageMultipliers)                        DamageMultipliers                                           OFFSET(getStruct<T>, {0x11C, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         AmmoIcon                                                    OFFSET(get<T>, {0x130, 8, 0, 0})
	SMember(FGameplayTag)                              AmmoTypeTag                                                 OFFSET(getStruct<T>, {0x158, 8, 0, 0})
	DMember(bool)                                      bCanPenetrate                                               OFFSET(get<bool>, {0x160, 1, 0, 0})
	DMember(bool)                                      bForceRadialDamage                                          OFFSET(get<bool>, {0x161, 1, 0, 0})
	CMember(class UClass*)                             OnHitSpell                                                  OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class UClass*)                             PassiveSpell                                                OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(TWeakObjectPtr<class UStaticMesh*>)        PickupMesh                                                  OFFSET(get<T>, {0x178, 8, 0, 0})
};

/// Class /Script/Indiana.AmmoPoolBase
/// Size: 0x0050 (0x000030 - 0x000080)
class UAmmoPoolBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(float)                                     ReloadTime                                                  OFFSET(get<float>, {0x30, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.AmmoPoolBase.UsesConsumables
	// bool UsesConsumables();                                                                                                  // [0x179c2c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.UsesAmmo
	// bool UsesAmmo();                                                                                                         // [0x179c290] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.OnTacticalTimeDilationEnd
	// void OnTacticalTimeDilationEnd(float Duration);                                                                          // [0x179c0f0] Final|Native|Protected 
	// Function /Script/Indiana.AmmoPoolBase.IsReloading
	// bool IsReloading();                                                                                                      // [0x179bd20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.GetCurrentPoolSize
	// int32_t GetCurrentPoolSize();                                                                                            // [0x179bcf0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.GetCurrentConsumableClass
	// class UClass* GetCurrentConsumableClass();                                                                               // [0x179bcb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.GetCurrentAmmoClass
	// class UClass* GetCurrentAmmoClass();                                                                                     // [0x179bc70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AmmoPoolBase.GetBaseReloadTime
	// float GetBaseReloadTime();                                                                                               // [0x179bc50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.RadialSectionWidget
/// Size: 0x0010 (0x000278 - 0x000288)
class URadialSectionWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	DMember(bool)                                      bAdjustOpacityOnUnusableChanged                             OFFSET(get<bool>, {0x278, 1, 0, 0})
};

/// Class /Script/Indiana.AmmoRadialSectionWidget
/// Size: 0x0020 (0x000288 - 0x0002A8)
class UAmmoRadialSectionWidget : public URadialSectionWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(class UVerticalBox*)                       VerticalBox                                                 OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CountTextBlock                                              OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x2A0, 8, 0, 0})
};

/// Class /Script/Indiana.AmmoReadoutWidget
/// Size: 0x00B0 (0x000300 - 0x0003B0)
class UAmmoReadoutWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(class UInvalidationBox*)                   InvalidationWrapper                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UOverlay*)                           AmmoReadout                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             AmmoTypeImage                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             AmmoBrandImage                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LoadedAmmoTextBlock                                         OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     RemainingAmmoTextBlock                                      OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LoadedConsumeableTextBlock                                  OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             LoadedConsumeableIcon                                       OFFSET(get<T>, {0x338, 8, 0, 0})
	DMember(float)                                     LowAmmoWarningPercent                                       OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     TimedFadeActivityTimer                                      OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(bool)                                      bWasInfiniteAmmo                                            OFFSET(get<bool>, {0x348, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.AmmoReadoutWidget.OnWeaponSwitch
	// void OnWeaponSwitch(class UWeapon* EquippedWeapon);                                                                      // [0x179c200] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnReloadComplete
	// void OnReloadComplete(class UWeapon* EquippedWeapon);                                                                    // [0x179bf90] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnPlayerCombatStateChange
	// void OnPlayerCombatStateChange(bool bCombatIn, bool bRestoring);                                                         // [0x179c020] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnInterruptReload
	// void OnInterruptReload(class UWeapon* EquippedWeapon);                                                                   // [0x179bf90] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x179bde0] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnHeldWeaponTextDisplayModeChanged
	// void OnHeldWeaponTextDisplayModeChanged(int32_t ModeIn);                                                                 // [0x179bf00] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.OnHeldWeaponDisplayModeChanged
	// void OnHeldWeaponDisplayModeChanged(int32_t ModeIn);                                                                     // [0x179be70] Final|Native|Protected 
	// Function /Script/Indiana.AmmoReadoutWidget.EvaluateLowAmmoWarning
	// void EvaluateLowAmmoWarning(int32_t MaxClipSize, int32_t CurrentClipSize, int32_t RemainingAmmo);                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.AnimationAudioSet
/// Size: 0x0050 (0x000038 - 0x000088)
class UAnimationAudioSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<FGameplayTag, class UAkAudioEvent*>)  Events                                                      OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.AnimationBehaviorStateInfo
/// Size: 0x0000 (0x000120 - 0x000120)
class UAnimationBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/Indiana.AnimationRequestData
/// Size: 0x0010 (0x000068 - 0x000078)
class UAnimationRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FGameplayTag)                              AnimationTag                                                OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	DMember(bool)                                      bFaceTargetBeforePlayback                                   OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(float)                                     AllowedYawForFacing                                         OFFSET(get<float>, {0x74, 4, 0, 0})
};

/// Class /Script/Indiana.AnimationCurveUtils
/// Size: 0x0000 (0x000030 - 0x000030)
class UAnimationCurveUtils : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.DisableStatusEffect
/// Size: 0x0010 (0x000188 - 0x000198)
class UDisableStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	SMember(FGameplayTag)                              DisableType                                                 OFFSET(getStruct<T>, {0x188, 8, 0, 0})
	DMember(bool)                                      bRotateToFace                                               OFFSET(get<bool>, {0x190, 1, 0, 0})
	DMember(bool)                                      bHeadTrackToCaster                                          OFFSET(get<bool>, {0x191, 1, 0, 0})
	DMember(bool)                                      bClearAwareness                                             OFFSET(get<bool>, {0x192, 1, 0, 0})
};

/// Class /Script/Indiana.AnimDisableStatusEffect
/// Size: 0x0008 (0x000198 - 0x0001A0)
class UAnimDisableStatusEffect : public UDisableStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(bool)                                      bLoopForDuration                                            OFFSET(get<bool>, {0x198, 1, 0, 0})
	DMember(bool)                                      bInvalidIfNoAnimation                                       OFFSET(get<bool>, {0x199, 1, 0, 0})
};

/// Struct /Script/Indiana.BoneMod
/// Size: 0x0040 (0x000000 - 0x000040)
class FBoneMod : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	DMember(bool)                                      ApplyTranslation                                            OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      ApplyRotation                                               OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      ApplyScale                                                  OFFSET(get<bool>, {0x32, 1, 0, 0})
};

/// Class /Script/Indiana.BoneModifications
/// Size: 0x0068 (0x000038 - 0x0000A0)
class UBoneModifications : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TMap<FName, FBoneMod>)                     BoneMods                                                    OFFSET(get<T>, {0x38, 80, 0, 0})
	DMember(float)                                     MinStrength                                                 OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(float)                                     MaxStrength                                                 OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(float)                                     StrengthStep                                                OFFSET(get<float>, {0x90, 4, 0, 0})
	SMember(FLocString)                                UIDisplayText                                               OFFSET(getStruct<T>, {0x94, 8, 0, 0})
};

/// Class /Script/Indiana.BoneModificationsPreset
/// Size: 0x0050 (0x000038 - 0x000088)
class UBoneModificationsPreset : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<class UBoneModifications*, float>)    BoneSettings                                                OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_AttachWeapon
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_AttachWeapon : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_AudioEvent
/// Size: 0x0010 (0x000040 - 0x000050)
class UAnimNotify_AudioEvent : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTag)                              Event                                                       OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(EAnimationAudioLoopType)                   LoopType                                                    OFFSET(get<T>, {0x48, 1, 0, 0})
	DMember(bool)                                      bStop                                                       OFFSET(get<bool>, {0x49, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_Despawn
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_Despawn : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_DetachWeapon
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_DetachWeapon : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_EventEffects
/// Size: 0x0008 (0x000040 - 0x000048)
class UAnimNotify_EventEffects : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UEventEffects*)                      EventEffects                                                OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_Finished
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_Finished : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_FootStep
/// Size: 0x0008 (0x000040 - 0x000048)
class UAnimNotify_FootStep : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(EFootID)                                   FootID                                                      OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(bool)                                      bIsSpecialEvent                                             OFFSET(get<bool>, {0x41, 1, 0, 0})
	CMember(ESpecialMovementEvent)                     SpecialEvent                                                OFFSET(get<T>, {0x42, 1, 0, 0})
	DMember(bool)                                      bIsLadder                                                   OFFSET(get<bool>, {0x43, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_IndianaAkEvent
/// Size: 0x0010 (0x000040 - 0x000050)
class UAnimNotify_IndianaAkEvent : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UAkAudioEvent*)                      Event                                                       OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      Follow                                                      OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_MedkitEnd
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_MedkitEnd : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_MeleeActionFinished
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_MeleeActionFinished : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_MeleeAllowInput
/// Size: 0x0008 (0x000040 - 0x000048)
class UAnimNotify_MeleeAllowInput : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bEnableInput                                                OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_MeleeCanSwing
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_MeleeCanSwing : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_MeleeCheckInput
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_MeleeCheckInput : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_MeleeRecoil
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_MeleeRecoil : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_ParamsEvent
/// Size: 0x0008 (0x000040 - 0x000048)
class UAnimNotify_ParamsEvent : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(EAnimNotify)                               Event                                                       OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_PlayChatter
/// Size: 0x0008 (0x000040 - 0x000048)
class UAnimNotify_PlayChatter : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(ENotifyChatterEventType)                   NotifyChatterEvent                                          OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_PropDespawn
/// Size: 0x0010 (0x000040 - 0x000050)
class UAnimNotify_PropDespawn : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTag)                              PropToDespawn                                               OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(class UNewPropData*)                       PropDataToDespawn                                           OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/Indiana.PropEntry
/// Size: 0x0068 (0x000000 - 0x000068)
class FPropEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FGameplayTag)                              PropTag                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class USkeletalMesh*)                      SkeletalMeshToSpawn                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UStaticMesh*)                        StaticMeshToSpawn                                           OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     SocketToAttachTo                                            OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FVector)                                   SocketOffset                                                OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FRotator)                                  SocketRotation                                              OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
	CMember(class UParticleSystem*)                    ParticleSystemToSpawn                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     ParticleSocketToAttachTo                                    OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FVector)                                   ParticleSocketOffset                                        OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FRotator)                                  ParticleSocketRotation                                      OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	CMember(EDespawnRules)                             DespawnRule                                                 OFFSET(get<T>, {0x60, 1, 0, 0})
	DMember(bool)                                      bSkeletalMeshUsesParentPose                                 OFFSET(get<bool>, {0x61, 1, 0, 0})
};

/// Class /Script/Indiana.PropData
/// Size: 0x0010 (0x000038 - 0x000048)
class UPropData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FPropEntry>)                        Props                                                       OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.NewPropData
/// Size: 0x0068 (0x000038 - 0x0000A0)
class UNewPropData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FPropEntry)                                PropInfo                                                    OFFSET(getStruct<T>, {0x38, 104, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_PropSpawn
/// Size: 0x0010 (0x000040 - 0x000050)
class UAnimNotify_PropSpawn : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTag)                              PropToSpawn                                                 OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(class UNewPropData*)                       PropDataToSpawn                                             OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_RagDoll
/// Size: 0x0020 (0x000040 - 0x000060)
class UAnimNotify_RagDoll : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bAlwaysRagdoll                                              OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotify_UpdateCanisterVisual
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_UpdateCanisterVisual : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_UseMedKit
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_UseMedKit : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_WeaponFire
/// Size: 0x0000 (0x000040 - 0x000040)
class UAnimNotify_WeaponFire : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.AnimNotify_WeaponVisualEvent
/// Size: 0x0010 (0x000040 - 0x000050)
class UAnimNotify_WeaponVisualEvent : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     Event                                                       OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      bCustomState                                                OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      bStop                                                       OFFSET(get<bool>, {0x49, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotifyState_AltIKToggle
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotifyState_AltIKToggle : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bUseRight                                                   OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bUseLeft                                                    OFFSET(get<bool>, {0x39, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotifyState_AudioEventLoop
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotifyState_AudioEventLoop : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTag)                              Event                                                       OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.AnimNotifyState_DisableAutoStep
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_DisableAutoStep : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_DisableDetection
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_DisableDetection : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_DisableHipPoses
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_DisableHipPoses : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_DisableVision
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_DisableVision : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_HideWeapon
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_HideWeapon : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_InspectEnd
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_InspectEnd : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_Invulnerable
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotifyState_Invulnerable : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bMeleeDamageOnly                                            OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotifyState_PreventInterrupts
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_PreventInterrupts : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_FurnitureInterrupt
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotifyState_FurnitureInterrupt : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(EFurnitureAnimationInterrupt)              InterruptType                                               OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotifyState_MeleeAllowInput
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotifyState_MeleeAllowInput : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bEnableInput                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotifyState_MeleeCanSwing
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_MeleeCanSwing : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_MeleeCheckInput
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_MeleeCheckInput : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_MeleeDamage
/// Size: 0x0010 (0x000038 - 0x000048)
class UAnimNotifyState_MeleeDamage : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGameplayTag)                              MeleeCollisionTrigger                                       OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bSpellAttack                                                OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Class /Script/Indiana.AnimNotifyState_Prop
/// Size: 0x0018 (0x000038 - 0x000050)
class UAnimNotifyState_Prop : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTag)                              PropToSpawn                                                 OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(class UNewPropData*)                       PropDataToSpawn                                             OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     PropDespawnTime                                             OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      bProjectile                                                 OFFSET(get<bool>, {0x4C, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.AnimNotifyState_Prop.OnMontageEnded
	// void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted, class USkeletalMeshComponent* MeshComp);             // [0x17a5180] Final|Native|Protected|Const 
};

/// Class /Script/Indiana.AnimNotifyState_SuppressFire
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_SuppressFire : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_ToggleArmPose
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotifyState_ToggleArmPose : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.AnimNotifyState_ToggleTracking
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotifyState_ToggleTracking : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bDisableHeadTracking                                        OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bDisableEyeTracking                                         OFFSET(get<bool>, {0x39, 1, 0, 0})
	DMember(bool)                                      bDisableTrackingWhenTalking                                 OFFSET(get<bool>, {0x3A, 1, 0, 0})
	DMember(bool)                                      bDisableBodyTracking                                        OFFSET(get<bool>, {0x3B, 1, 0, 0})
};

/// Struct /Script/Indiana.TransformedShape
/// Size: 0x0040 (0x000000 - 0x000040)
class FTransformedShape : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UShape*)                             Shape                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                ShapeTransform                                              OFFSET(getStruct<T>, {0x10, 48, 0, 0})
};

/// Class /Script/Indiana.AoEStatusEffect
/// Size: 0x0058 (0x000188 - 0x0001E0)
class UAoEStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	SMember(FTransformedShape)                         CollisionShape                                              OFFSET(getStruct<T>, {0x190, 64, 0, 0})
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x1D0, 8, 0, 0})
	DMember(bool)                                      bOnlyFriendlyTargets                                        OFFSET(get<bool>, {0x1D8, 1, 0, 0})
	DMember(bool)                                      bOnlyHostileTargets                                         OFFSET(get<bool>, {0x1D9, 1, 0, 0})
};

/// Struct /Script/Indiana.AppearanceCustomizations
/// Size: 0x0078 (0x000000 - 0x000078)
class FAppearanceCustomizations : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(float)                                     Age                                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(class UEyeColor*)                          EyeColor                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UHairAppearances*)                   Hair                                                        OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UHairColor*)                         HairColor                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UBrows*)                             Brows                                                       OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UBeardAppearances*)                  Beard                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UBeardColor*)                        BeardColor                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class USkinTone*)                          SkinTone                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UScar*)                              Scar                                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDirt*)                              Dirt                                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UMakeup*)                            Makeup                                                      OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UTexture*)                           DetailMask                                                  OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FLinearColor)                              DetailColor                                                 OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	DMember(float)                                     DetailRoughness                                             OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Struct /Script/Indiana.AppearanceMatch
/// Size: 0x0040 (0x000000 - 0x000040)
class FAppearanceMatch : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTagContainer)                     Genders                                                     OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     Views                                                       OFFSET(getStruct<T>, {0x20, 32, 0, 0})
};

/// Struct /Script/Indiana.MainAppearances
/// Size: 0x0028 (0x000000 - 0x000028)
class FMainAppearances : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Indiana.AppliedAppearanceMod
/// Size: 0x0058 (0x000000 - 0x000058)
class FAppliedAppearanceMod : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UModAppearances*)                    ModAppearances                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UModVisual*)                         SourceMod                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UModVisual*)                         Mod                                                         OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(TArray<FName>)                             ComponentTags                                               OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FName>)                             RequiredTags                                                OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Indiana.HeadAppearanceMods
/// Size: 0x0038 (0x000058 - 0x000090)
class FHeadAppearanceMods : public FAppliedAppearanceMod
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(EHeadStyle)                                HeadStyle                                                   OFFSET(get<T>, {0x58, 1, 0, 0})
	SMember(FName)                                     HairMorphTarget                                             OFFSET(getStruct<T>, {0x5C, 8, 0, 0})
	DMember(bool)                                      bHelmetVisible                                              OFFSET(get<bool>, {0x64, 1, 0, 0})
	CMember(class UPosedSkeletalMeshModVisual*)        HairMeshMod                                                 OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UPosedSkeletalMeshModVisual*)        BeardMeshMod                                                OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UMaterialParamModVisual*)            MaterialParamMods                                           OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Struct /Script/Indiana.AppearanceInstance
/// Size: 0x02C8 (0x000000 - 0x0002C8)
class FAppearanceInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	SMember(FName)                                     TargetMeshName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FAppearanceMatch)                          AppearanceMatch                                             OFFSET(getStruct<T>, {0x10, 64, 0, 0})
	DMember(bool)                                      bUseHeadAsBaseSkeleton                                      OFFSET(get<bool>, {0x50, 1, 0, 0})
	CMember(class UPosedSkeletalMeshModVisual*)        SecondaryAppearanceMesh                                     OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UMaterialParamModVisual*)            AppearanceModVisual                                         OFFSET(get<T>, {0x60, 8, 0, 0})
	SMember(FMainAppearances)                          CurrentAppearances                                          OFFSET(getStruct<T>, {0x68, 40, 0, 0})
	SMember(FMainAppearances)                          PendingAppearances                                          OFFSET(getStruct<T>, {0x90, 40, 0, 0})
	SMember(FHeadAppearanceMods)                       CurrentHeadAppearanceMods                                   OFFSET(getStruct<T>, {0xB8, 144, 0, 0})
	SMember(FHeadAppearanceMods)                       PendingHeadAppearanceMods                                   OFFSET(getStruct<T>, {0x148, 144, 0, 0})
	CMember(TMap<class UClass*, FAppliedAppearanceMod>) CurrentMods                                                OFFSET(get<T>, {0x1D8, 80, 0, 0})
	CMember(TMap<class UClass*, FAppliedAppearanceMod>) PendingMods                                                OFFSET(get<T>, {0x228, 80, 0, 0})
	CMember(TArray<FName>)                             CurrentBaseMeshComponentTags                                OFFSET(get<T>, {0x278, 16, 0, 0})
	CMember(class UFootstepData*)                      CurrentFootstepData                                         OFFSET(get<T>, {0x288, 8, 0, 0})
	DMember(bool)                                      bActive                                                     OFFSET(get<bool>, {0x290, 1, 0, 0})
};

/// Struct /Script/Indiana.MaterialParamDescription
/// Size: 0x0010 (0x000000 - 0x000010)
class FMaterialParamDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     MaterialSlot                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     MaterialParam                                               OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.FadeSettings
/// Size: 0x0038 (0x000000 - 0x000038)
class FFadeSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector)                                   RevealEmissiveColor                                         OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     LeadingEdgeBlend                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     EmissiveLevel                                               OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     LeadingEdgeAmount                                           OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     RevealEdgeTightness                                         OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     EmissiveBaseValue                                           OFFSET(get<float>, {0x1C, 4, 0, 0})
	CMember(class UTexture*)                           RevealRMEA                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UTexture*)                           RevealNormal                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UTexture*)                           RevealBaseColor                                             OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Indiana.AppearanceComponent
/// Size: 0x03A0 (0x0000E0 - 0x000480)
class UAppearanceComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(class UAppearancePreset*)                  AppearancePreset                                            OFFSET(get<T>, {0xF8, 8, 0, 0})
	SMember(FGameplayTag)                              AppearanceGender                                            OFFSET(getStruct<T>, {0x100, 8, 0, 0})
	CMember(class UHeadAppearances*)                   DefaultHead                                                 OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UBodyAppearances*)                   DefaultBody                                                 OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(bool)                                      bEnableCustomization                                        OFFSET(get<bool>, {0x118, 1, 0, 0})
	SMember(FAppearanceCustomizations)                 Customization                                               OFFSET(getStruct<T>, {0x120, 120, 0, 0})
	DMember(bool)                                      bAllowUnlimitedBoneMods                                     OFFSET(get<bool>, {0x198, 1, 0, 0})
	CMember(class UBoneModificationsPreset*)           BoneModPreset                                               OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(class UBoneModificationsPreset*)           UglyStickBoneModPreset                                      OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(TMap<class UBoneModifications*, float>)    BoneModifications                                           OFFSET(get<T>, {0x1B0, 80, 0, 0})
	SMember(FName)                                     AppearanceTransitionParam                                   OFFSET(getStruct<T>, {0x200, 8, 0, 0})
	CMember(class UBodyAppearances*)                   CurrentBody                                                 OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(TArray<FName>)                             BodyComponentTags                                           OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(TArray<FAppearanceInstance>)               AppearanceInstances                                         OFFSET(get<T>, {0x220, 16, 0, 0})
	DMember(bool)                                      bShouldCacheAssets                                          OFFSET(get<bool>, {0x230, 1, 0, 0})
	DMember(bool)                                      bShouldCacheEquipmentAssets                                 OFFSET(get<bool>, {0x231, 1, 0, 0})
	CMember(TSet<UObject*>)                            CachedAssetSet                                              OFFSET(get<T>, {0x238, 80, 0, 0})
	DMember(bool)                                      bHelmetVisible                                              OFFSET(get<bool>, {0x288, 1, 0, 0})
	CMember(TMap<FMaterialParamDescription, float>)    RuntimeSetScalars                                           OFFSET(get<T>, {0x290, 80, 0, 0})
	CMember(TMap<FMaterialParamDescription, FVector>)  RuntimeSetVectors                                           OFFSET(get<T>, {0x2E0, 80, 0, 0})
	CMember(TMap<FMaterialParamDescription, TWeakObjectPtr<UTexture*>>) RuntimeSetTextures                         OFFSET(get<T>, {0x330, 80, 0, 0})
	CMember(class UBodyPartData*)                      BodyPartData                                                OFFSET(get<T>, {0x388, 8, 0, 0})
	DMember(bool)                                      bHasLimbBreakConstraintSetup                                OFFSET(get<bool>, {0x390, 1, 0, 0})
	DMember(bool)                                      bDoesntNeedGorecaps                                         OFFSET(get<bool>, {0x391, 1, 0, 0})
	CMember(TArray<class UMeshComponent*>)             AttachedGoreCaps                                            OFFSET(get<T>, {0x398, 16, 0, 0})
	SMember(FFadeSettings)                             FadeSettings                                                OFFSET(getStruct<T>, {0x448, 56, 0, 0})


	/// Functions
	// Function /Script/Indiana.AppearanceComponent.SetVectorParameter
	// void SetVectorParameter(FName Parameter, FVector& Vector);                                                               // [0x17a6090] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetSlotVectorParameter
	// void SetSlotVectorParameter(FName SlotName, FName Parameter, FVector& Vector);                                           // [0x17a5f70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetSlotTextureParameter
	// void SetSlotTextureParameter(FName SlotName, FName Parameter, class UTexture* Texture);                                  // [0x17a5e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetSlotScalarParameter
	// void SetSlotScalarParameter(FName SlotName, FName Parameter, float Scalar);                                              // [0x17a5d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetSkinTone
	// void SetSkinTone(class USkinTone* NewSkinTone);                                                                          // [0x17a5cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetScar
	// void SetScar(class UScar* NewScar);                                                                                      // [0x17a5c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetScalarParameter
	// void SetScalarParameter(FName Parameter, float Scalar);                                                                  // [0x17a5b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetMakeup
	// void SetMakeup(class UMakeup* NewMakeup);                                                                                // [0x17a5ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetHairColor
	// void SetHairColor(class UHairColor* NewColor);                                                                           // [0x17a5a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetHair
	// void SetHair(class UHairAppearances* NewHair);                                                                           // [0x17a59a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetGender
	// void SetGender(FGameplayTag& Gender);                                                                                    // [0x17a5910] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetEyeColor
	// void SetEyeColor(class UEyeColor* NewColor);                                                                             // [0x17a5880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetDirt
	// void SetDirt(class UDirt* NewDirt);                                                                                      // [0x17a57f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetDefaultHead
	// void SetDefaultHead(class UHeadAppearances* Head);                                                                       // [0x17a5760] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetDefaultBody
	// void SetDefaultBody(class UBodyAppearances* Body);                                                                       // [0x17a56d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBrows
	// void SetBrows(class UBrows* NewBrows);                                                                                   // [0x17a5640] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBoneModificationPresets
	// void SetBoneModificationPresets(class UBoneModificationsPreset* Presets);                                                // [0x17a55b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBoneModification
	// void SetBoneModification(class UBoneModifications* Modifications, float Value);                                          // [0x17a54e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBeardColor
	// void SetBeardColor(class UBeardColor* NewColor);                                                                         // [0x17a5450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetBeard
	// void SetBeard(class UBeardAppearances* NewBeard);                                                                        // [0x17a53c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.SetAge
	// void SetAge(float NewAge);                                                                                               // [0x17a5340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.RemoveBoneModification
	// void RemoveBoneModification(class UBoneModifications* Modifications);                                                    // [0x17a52b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.RefreshFullAppearance
	// void RefreshFullAppearance();                                                                                            // [0x17a5290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AppearanceComponent.InvalidateOldBoneModifications
	// void InvalidateOldBoneModifications();                                                                                   // [0x17a5160] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBreakBoneName
	// bool GetBreakBoneName(FGameplayTag BodyPartTag, FName& BoneName);                                                        // [0x17a4f90] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBreakBoneAndSocketNames
	// bool GetBreakBoneAndSocketNames(FGameplayTag BodyPartTag, FName& BoneName, FName& AttachedSocket, FName& DetachedSocket); // [0x17a4df0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBreakableBoneNames
	// TSet<FName> GetBreakableBoneNames();                                                                                     // [0x17a5070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBodyPartTags
	// TSet<FGameplayTag> GetBodyPartTags();                                                                                    // [0x17a4b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBodyPartsArray
	// TArray<FBodyPart> GetBodyPartsArray();                                                                                   // [0x17a4c80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.GetBodyPart
	// FGameplayTag GetBodyPart(FName& BoneName, FVector& ImpactLocation);                                                      // [0x17a4aa0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AppearanceComponent.DebugTargetVertexColors
	// void DebugTargetVertexColors();                                                                                          // [0x17a4a80] Final|Exec|Native|Protected 
	// Function /Script/Indiana.AppearanceComponent.ApplyAppearancePreset
	// void ApplyAppearancePreset(class UAppearancePreset* Preset);                                                             // [0x17a49f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.AppearancePreset
/// Size: 0x00F0 (0x000038 - 0x000128)
class UAppearancePreset : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(class UHeadAppearances*)                   Head                                                        OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UBodyAppearances*)                   Body                                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FGameplayTag)                              Gender                                                      OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FAppearanceCustomizations)                 Customizations                                              OFFSET(getStruct<T>, {0x50, 120, 0, 0})
	DMember(bool)                                      bAllowUnlimitedBoneMods                                     OFFSET(get<bool>, {0xC8, 1, 0, 0})
	CMember(class UBoneModificationsPreset*)           BoneModPreset                                               OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(TMap<class UBoneModifications*, float>)    BoneModifications                                           OFFSET(get<T>, {0xD8, 80, 0, 0})
};

/// Class /Script/Indiana.ApplyRosterSkillBonusesStatusEffect
/// Size: 0x0038 (0x000188 - 0x0001C0)
class UApplyRosterSkillBonusesStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	DMember(float)                                     Scalar                                                      OFFSET(get<float>, {0x188, 4, 0, 0})
};

/// Class /Script/Indiana.ApproachBehaviorStateInfo
/// Size: 0x0040 (0x000120 - 0x000160)
class UApproachBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
};

/// Class /Script/Indiana.ApproachRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UApproachRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Indiana.AptitudeTextures
/// Size: 0x0078 (0x000000 - 0x000078)
class FAptitudeTextures : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TWeakObjectPtr<class UTexture*>)           Uninteractable                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture*>)           Highlighted                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture*>)           Icon                                                        OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/Indiana.Aptitude
/// Size: 0x00A0 (0x000030 - 0x0000D0)
class UAptitude : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(TArray<class UClass*>)                     Spells                                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FAptitudeTextures)                         Icons                                                       OFFSET(getStruct<T>, {0x50, 120, 0, 0})
	CMember(EAptitudeType)                             Aptitude                                                    OFFSET(get<T>, {0xC8, 1, 0, 0})
};

/// Class /Script/Indiana.AptitudeReadoutWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class UAptitudeReadoutWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UVerticalBox*)                       TextContainer                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AptitudeNameTextBlock                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AptitudeSynopsisTextBlock                                   OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AptitudeDescriptionTextBlock                                OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.AptitudeSummaryWidget
/// Size: 0x0018 (0x000278 - 0x000290)
class UAptitudeSummaryWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AptitudeTitleTextBlock                                      OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AptitudeDescTextBlock                                       OFFSET(get<T>, {0x288, 8, 0, 0})
};

/// Class /Script/Indiana.DegradableItem
/// Size: 0x0010 (0x000118 - 0x000128)
class UDegradableItem : public UItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	DMember(float)                                     ItemMaxHealth                                               OFFSET(get<float>, {0x11C, 4, 0, 0})
	CMember(EItemDegradationState)                     DegradationState                                            OFFSET(get<T>, {0x120, 1, 0, 0})
};

/// Class /Script/Indiana.ArmorBase
/// Size: 0x0090 (0x000128 - 0x0001B8)
class UArmorBase : public UDegradableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	CMember(TWeakObjectPtr<class UStaticMesh*>)        PickupMesh                                                  OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(TMap<FName, TWeakObjectPtr<UMaterialInterface*>>) PickupMaterialOverrides                              OFFSET(get<T>, {0x150, 80, 0, 0})
	CMember(class UModAppearances*)                    Dummy                                                       OFFSET(get<T>, {0x1A8, 8, 0, 0})
};

/// Struct /Script/Indiana.ArmorData
/// Size: 0x0048 (0x000000 - 0x000048)
class FArmorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   PhysicalDT                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PhysicalDR                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   ThermalDT                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   ThermalDR                                                   OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   EnergyDT                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   EnergyDR                                                    OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   ShockDT                                                     OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   ShockDR                                                     OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   CorrosionDT                                                 OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   CorrosionDR                                                 OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   NRayDT                                                      OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   NRayDR                                                      OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   ColdDT                                                      OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   ColdDR                                                      OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   DamageThreshold                                             OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   DamageResistance                                            OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	SMember(FGameplayTag)                              ArmorType                                                   OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/Indiana.ArmorPiece
/// Size: 0x0068 (0x000000 - 0x000068)
class FArmorPiece : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FGameplayTagContainer)                     BodyParts                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FArmorData)                                ArmorData                                                   OFFSET(getStruct<T>, {0x20, 72, 0, 0})
};

/// Struct /Script/Indiana.ArmorModifier
/// Size: 0x0040 (0x000000 - 0x000040)
class FArmorModifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTagContainer)                     EffectedBodyParts                                           OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TArray<class UClass*>)                     DamageTypes                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(int32_t)                                   DamageThreshold                                             OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(float)                                     DamageThresholdPercent                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   DamageResistance                                            OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(float)                                     DamageResistancePercent                                     OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Struct /Script/Indiana.ArmorPieceEntry
/// Size: 0x0070 (0x000000 - 0x000070)
class FArmorPieceEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Struct /Script/Indiana.ArmorModifierEntry
/// Size: 0x0050 (0x000000 - 0x000050)
class FArmorModifierEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.ArmorComponent
/// Size: 0x0070 (0x0000E0 - 0x000150)
class UArmorComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TArray<FArmorPiece>)                       InnateArmorValues                                           OFFSET(get<T>, {0xE8, 16, 0, 0})
	SMember(FGameplayTag)                              UnarmoredArmorType                                          OFFSET(getStruct<T>, {0xF8, 8, 0, 0})
	CMember(TArray<FArmorModifier>)                    InnateArmorModifiers                                        OFFSET(get<T>, {0x100, 16, 0, 0})
	DMember(bool)                                      bSwarm                                                      OFFSET(get<bool>, {0x110, 1, 0, 0})
	CMember(TArray<FArmorPieceEntry>)                  EquippedArmor                                               OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<FArmorModifierEntry>)               ArmorModifiers                                              OFFSET(get<T>, {0x128, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.ArmorComponent.TinkerAdvanceArmor
	// void TinkerAdvanceArmor(bool bIgnoreCost);                                                                               // [0x17ab350] Final|Exec|Native|Public 
};

/// Struct /Script/Indiana.StatModifierDescriptionBase
/// Size: 0x0010 (0x000000 - 0x000010)
class FStatModifierDescriptionBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class URpgStat*)                           RpgStat                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(ERpgStatGroup)                             Group                                                       OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(EStatModifierType)                         ModifierType                                                OFFSET(get<T>, {0x9, 1, 0, 0})
};

/// Struct /Script/Indiana.StatModifierDescription
/// Size: 0x0008 (0x000010 - 0x000018)
class FStatModifierDescription : public FStatModifierDescriptionBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(bool)                                      bIgnoreScalingBonus                                         OFFSET(get<bool>, {0x14, 1, 0, 0})
};

/// Class /Script/Indiana.ArmorItem
/// Size: 0x0040 (0x0001B8 - 0x0001F8)
class UArmorItem : public UArmorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	DMember(bool)                                      bSealed                                                     OFFSET(get<bool>, {0x1B8, 1, 0, 0})
	DMember(bool)                                      bCanGenerateLootOnBreakdown                                 OFFSET(get<bool>, {0x1B9, 1, 0, 0})
	CMember(TArray<FArmorModifier>)                    ArmorModifiers                                              OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(TArray<FStatModifierDescription>)          StatModifiers                                               OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(EArmorSlot)                                ArmorSlot                                                   OFFSET(get<T>, {0x1E0, 1, 0, 0})
};

/// Struct /Script/Indiana.NewArmorModVisual
/// Size: 0x0020 (0x000000 - 0x000020)
class FNewArmorModVisual : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UModAppearances*)                    ModAppearances                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bAppliesToAllArmorSets                                      OFFSET(get<bool>, {0x8, 1, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ArmorSets                                                   OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Indiana.ArmorVisualProperties
/// Size: 0x0058 (0x000000 - 0x000058)
class FArmorVisualProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      bModdableByArmorSet                                         OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bModdableByHelmet                                           OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bModdableByModsDefault                                      OFFSET(get<bool>, {0x2, 1, 0, 0})
	CMember(TMap<EArmorModSlot, bool>)                 ModdablePerMod                                              OFFSET(get<T>, {0x8, 80, 0, 0})
};

/// Class /Script/Indiana.ArmorModItem
/// Size: 0x00A8 (0x0001B8 - 0x000260)
class UArmorModItem : public UArmorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(TArray<FNewArmorModVisual>)                NewVisuals                                                  OFFSET(get<T>, {0x1B8, 16, 0, 0})
	SMember(FArmorVisualProperties)                    VisualProperties                                            OFFSET(getStruct<T>, {0x1C8, 88, 0, 0})
	CMember(TArray<FArmorModifier>)                    ArmorModifiers                                              OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(TArray<FStatModifierDescription>)          StatModifiers                                               OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x240, 8, 0, 0})
};

/// Class /Script/Indiana.ArmorModArmoring
/// Size: 0x0000 (0x000260 - 0x000260)
class UArmorModArmoring : public UArmorModItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
};

/// Class /Script/Indiana.ArmorModUtility
/// Size: 0x0000 (0x000260 - 0x000260)
class UArmorModUtility : public UArmorModItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
};

/// Class /Script/Indiana.ArmorModResistance
/// Size: 0x0000 (0x000260 - 0x000260)
class UArmorModResistance : public UArmorModItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
};

/// Class /Script/Indiana.ArmorModDampening
/// Size: 0x0000 (0x000260 - 0x000260)
class UArmorModDampening : public UArmorModItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
};

/// Struct /Script/Indiana.NewArmorSetModVisual
/// Size: 0x0018 (0x000000 - 0x000018)
class FNewArmorSetModVisual : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UModAppearances*)                    ModAppearances                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ArmorMods                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Indiana.ArmorSetModSlot
/// Size: 0x0018 (0x000000 - 0x000018)
class FArmorSetModSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EArmorModSlot)                             ModSlot                                                     OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      bModdable                                                   OFFSET(get<bool>, {0x1, 1, 0, 0})
	CMember(class UClass*)                             CurrentModClass                                             OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UArmorModItem*)                      EquippedMod                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Indiana.StatModifierInstance
/// Size: 0x0028 (0x000000 - 0x000028)
class FStatModifierInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TWeakObjectPtr<class UObject*>)            SourceObject                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FStatModifierDescription)                  StatModifier                                                OFFSET(getStruct<T>, {0x10, 24, 0, 0})
};

/// Struct /Script/Indiana.StatInstance
/// Size: 0x0038 (0x000000 - 0x000038)
class FStatInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     InherentValue                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     InherentMultiplier                                          OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(TArray<FStatModifierInstance>)             Modifiers                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Indiana.RpgStatCollection
/// Size: 0x0068 (0x000000 - 0x000068)
class FRpgStatCollection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TMap<class URpgStat*, FStatInstance>)      StatMap                                                     OFFSET(get<T>, {0x10, 80, 0, 0})
};

/// Class /Script/Indiana.ArmorSet
/// Size: 0x0178 (0x0001F8 - 0x000370)
class UArmorSet : public UArmorItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UBodyAppearances*)                   BodyAppearances                                             OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(TArray<FNewArmorSetModVisual>)             NewArmorModVisuals                                          OFFSET(get<T>, {0x200, 16, 0, 0})
	SMember(FArmorVisualProperties)                    VisualProperties                                            OFFSET(getStruct<T>, {0x210, 88, 0, 0})
	CMember(TArray<FArmorPiece>)                       Armor                                                       OFFSET(get<T>, {0x268, 16, 0, 0})
	SMember(FArmorSetModSlot)                          ArmorModSlots                                               OFFSET(getStruct<T>, {0x278, 96, 0, 0})
	SMember(FName)                                     ArmorSetAudio                                               OFFSET(getStruct<T>, {0x2D8, 8, 0, 0})
	CMember(TEnumAsByte<EPhysicalSurface>)             AudioPlayerSurfaceType                                      OFFSET(get<T>, {0x2E0, 1, 0, 0})
	SMember(FRpgStatCollection)                        RpgStatCollection                                           OFFSET(getStruct<T>, {0x2E8, 104, 0, 0})
	CMember(TArray<class UMicroModTable*>)             MicroModTables                                              OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(class UClass*)                             EquippedMicroMod                                            OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(TWeakObjectPtr<class URpgStatComponent*>)  WearerRpgStatComponent                                      OFFSET(get<T>, {0x368, 8, 0, 0})
};

/// Class /Script/Indiana.ArmorStatusEffect
/// Size: 0x0020 (0x000188 - 0x0001A8)
class UArmorStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	CMember(TArray<FArmorModifier>)                    Modifiers                                                   OFFSET(get<T>, {0x188, 16, 0, 0})
	DMember(bool)                                      bPrependValue                                               OFFSET(get<bool>, {0x198, 1, 0, 0})
	DMember(bool)                                      bAppendSignToValue                                          OFFSET(get<bool>, {0x199, 1, 0, 0})
};

/// Struct /Script/Indiana.AssetInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FAssetInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UObject*)                            Asset                                                       OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Class /Script/Indiana.AssetCollection
/// Size: 0x00A8 (0x000030 - 0x0000D8)
class UAssetCollection : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TMap<uint32_t, FAssetInfo>)                AssetInfos                                                  OFFSET(get<T>, {0x30, 80, 0, 0})
};

/// Class /Script/Indiana.AssetList
/// Size: 0x0050 (0x000038 - 0x000088)
class UAssetList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TSet<FString>)                             Assets                                                      OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.ModVisual
/// Size: 0x0038 (0x000030 - 0x000068)
class UModVisual : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FName>)                             NewComponentTags                                            OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FName>)                             RequiredComponentTags                                       OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/Indiana.AttachFxModVisual
/// Size: 0x0038 (0x000068 - 0x0000A0)
class UAttachFxModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TWeakObjectPtr<class UParticleSystem*>)    ParticleSystem                                              OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           AddedComponent                                              OFFSET(get<T>, {0x98, 8, 0, 0})
};

/// Class /Script/Indiana.AttachNiagaraFxModVisual
/// Size: 0x0038 (0x000068 - 0x0000A0)
class UAttachNiagaraFxModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TWeakObjectPtr<class UNiagaraSystem*>)     ParticleSystem                                              OFFSET(get<T>, {0x68, 8, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  AddedComponent                                              OFFSET(get<T>, {0x98, 8, 0, 0})
};

/// Class /Script/Indiana.AttackInfo
/// Size: 0x0020 (0x000030 - 0x000050)
class UAttackInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.MeleeAttackInfo
/// Size: 0x0008 (0x000050 - 0x000058)
class UMeleeAttackInfo : public UAttackInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/Indiana.AttributeSliderGroupWidget
/// Size: 0x00D0 (0x000300 - 0x0003D0)
class UAttributeSliderGroupWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(class UTextBlockBase*)                     TitleTextBlock                                              OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UCompanionBehaviorOptionWidget*)     OptionSelector1                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UCompanionBehaviorOptionWidget*)     OptionSelector2                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             Option1ValueImage                                           OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             Option2ValueImage                                           OFFSET(get<T>, {0x340, 8, 0, 0})
	SMember(FLocString)                                OptionOneNameLocString                                      OFFSET(getStruct<T>, {0x348, 8, 0, 0})
	SMember(FLocString)                                OptionOneDescriptionLocString                               OFFSET(getStruct<T>, {0x350, 8, 0, 0})
	SMember(FLocString)                                OptionTwoNameLocString                                      OFFSET(getStruct<T>, {0x358, 8, 0, 0})
	SMember(FLocString)                                OptionTwoDescriptionLocString                               OFFSET(getStruct<T>, {0x360, 8, 0, 0})
	CMember(TMap<int32_t, class UTexture2D*>)          AttributeValueImages                                        OFFSET(get<T>, {0x368, 80, 0, 0})
};

/// Class /Script/Indiana.AttributeSliderPageWidget
/// Size: 0x0088 (0x000300 - 0x000388)
class UAttributeSliderPageWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	CMember(class UVerticalBox*)                       SliderContainer                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UAttributeSliderGroupWidget*)        AttributeSliderGroup1                                       OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UAttributeSliderGroupWidget*)        AttributeSliderGroup2                                       OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UAttributeSliderGroupWidget*)        AttributeSliderGroup3                                       OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PointsRemainingTextBlock                                    OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UCharacterDescriptionPanel*)         DescriptionPanel                                            OFFSET(get<T>, {0x358, 8, 0, 0})
};

/// Class /Script/Indiana.AttributeSummaryEntryWidget
/// Size: 0x0038 (0x000278 - 0x0002B0)
class UAttributeSummaryEntryWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AttributeNameText                                           OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AttributeLevelText                                          OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(TArray<class UTexture2D*>)                 AttributeValueImages                                        OFFSET(get<T>, {0x290, 16, 0, 0})
	CMember(class UImage*)                             ValueImage                                                  OFFSET(get<T>, {0x2A0, 8, 0, 0})
};

/// Class /Script/Indiana.AttributeSummaryGroupWidget
/// Size: 0x0018 (0x000278 - 0x000290)
class UAttributeSummaryGroupWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class UAttributeSummaryEntryWidget*)       AttributeOne                                                OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UAttributeSummaryEntryWidget*)       AttributeTwo                                                OFFSET(get<T>, {0x280, 8, 0, 0})
};

/// Class /Script/Indiana.AttributeSummaryWidget
/// Size: 0x0068 (0x000278 - 0x0002E0)
class UAttributeSummaryWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(class UAttributeSummaryGroupWidget*)       MindEntry                                                   OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UAttributeSummaryGroupWidget*)       BodyEntry                                                   OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UAttributeSummaryGroupWidget*)       PersonalityEntry                                            OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(TMap<int32_t, class UTexture2D*>)          AttributeValueImages                                        OFFSET(get<T>, {0x290, 80, 0, 0})
};

/// Class /Script/Indiana.AudioHelpers
/// Size: 0x0000 (0x000030 - 0x000030)
class UAudioHelpers : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.AudioHelpers.LoadAkAudioEventReference
	// class UAkAudioEvent* LoadAkAudioEventReference(FString Path);                                                            // [0x17ab2a0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InteractableActor
/// Size: 0x0050 (0x0002B8 - 0x000308)
class AInteractableActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	SMember(FMulticastInlineDelegate)                  OnInteract                                                  OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})
	CMember(class UInteractableComponent*)             Interactable                                                OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x2D8, 8, 0, 0})
	SMember(FVector)                                   Floats                                                      OFFSET(getStruct<T>, {0x2E0, 12, 0, 0})
	SMember(FIntVector)                                Ints                                                        OFFSET(getStruct<T>, {0x2EC, 12, 0, 0})
	DMember(bool)                                      bUseInteractHoldTime                                        OFFSET(get<bool>, {0x2F8, 1, 0, 0})
	SMember(FGameplayTag)                              GameplayTag                                                 OFFSET(getStruct<T>, {0x2FC, 8, 0, 0})
};

/// Class /Script/Indiana.AudioLogActor
/// Size: 0x0050 (0x000308 - 0x000358)
class AAudioLogActor : public AInteractableActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(class UAudioLogDataAsset*)                 AudioLogData                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(TArray<class UScriptEvent*>)               ScriptEvents                                                OFFSET(get<T>, {0x340, 16, 0, 0})
	DMember(bool)                                      bPlayOnPickup                                               OFFSET(get<bool>, {0x350, 1, 0, 0})
};

/// Struct /Script/Indiana.AudioLogDefinition
/// Size: 0x0010 (0x000000 - 0x000010)
class FAudioLogDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UConversationData*)                  ConversationData                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   StartNode                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Class /Script/Indiana.AudioLogDataAsset
/// Size: 0x0020 (0x000038 - 0x000058)
class UAudioLogDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FLocString)                                DescriptionText                                             OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FAudioLogDefinition)                       AudioLogDefinition                                          OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Indiana.AudioLogLibraryDataAsset
/// Size: 0x0040 (0x000038 - 0x000078)
class UAudioLogLibraryDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<class UAudioLogDataAsset*>)         BaseGameAudioLogs                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<class UAudioLogDataAsset*>)         INX01AudioLogs                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<class UAudioLogDataAsset*>)         INX02AudioLogs                                              OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Indiana.GenericCollapsableList
/// Size: 0x0058 (0x000300 - 0x000358)
class UGenericCollapsableList : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(class UImage*)                             UnseenImage                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UExpandableAreaBase*)                ExpandableArea                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TitleTextBlock                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UVerticalBox*)                       EntryContainer                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	SMember(FLocString)                                ListTitle                                                   OFFSET(getStruct<T>, {0x340, 8, 0, 0})
	CMember(class UClass*)                             ListEntryClass                                              OFFSET(get<T>, {0x348, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.GenericCollapsableList.ExpandableAreaExpansionChanged
	// void ExpandableAreaExpansionChanged(class UExpandableAreaBase* Area, bool bIsExpanded);                                  // [0x182ca00] Final|Native|Protected 
};

/// Class /Script/Indiana.AudioLogList
/// Size: 0x00A0 (0x000358 - 0x0003F8)
class UAudioLogList : public UGenericCollapsableList
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	CMember(EAudioLogPackageType)                      PackageType                                                 OFFSET(get<T>, {0x368, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.AudioLogList.OnAudioLogViewedCB
	// void OnAudioLogViewedCB(class UGenericCollapsableListEntry* ListEntry);                                                  // [0x17b0260] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogList.OnAudioLogSelectedCB
	// void OnAudioLogSelectedCB(class UGenericCollapsableListEntry* ListEntry);                                                // [0x17b01d0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogList.OnAudioLogLibraryLoaded
	// void OnAudioLogLibraryLoaded(class UAudioLogLibraryDataAsset* LoadedAudioLogLibrary);                                    // [0x17affa0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogList.AddOldAudioLog
	// void AddOldAudioLog(class UAudioLogDataAsset* AudioLogDataAsset);                                                        // [0x17afc90] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogList.AddNewAudioLog
	// void AddNewAudioLog(class UAudioLogDataAsset* AudioLogDataAsset);                                                        // [0x17afc00] Final|Native|Protected 
};

/// Class /Script/Indiana.GenericCollapsableListEntry
/// Size: 0x0028 (0x000278 - 0x0002A0)
class UGenericCollapsableListEntry : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(class UImage*)                             ActiveImage                                                 OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UImage*)                             UnseenImage                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Indiana.AudioLogListEntryWidget
/// Size: 0x0000 (0x0002A0 - 0x0002A0)
class UAudioLogListEntryWidget : public UGenericCollapsableListEntry
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
};

/// Class /Script/Indiana.AudioLogManager
/// Size: 0x0148 (0x000030 - 0x000178)
class UAudioLogManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(TWeakObjectPtr<class UAudioLogLibraryDataAsset*>) SoftAudioLogLibrary                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UAudioLogLibraryDataAsset*)          AudioLogLibrary                                             OFFSET(get<T>, {0x98, 8, 0, 0})
	SMember(FLocString)                                InvalidAudioLogName                                         OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      PauseEvent                                                  OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      ResumeEvent                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})
	SMember(FLocString)                                TempAudioLogName                                            OFFSET(getStruct<T>, {0xC8, 8, 0, 0})
	DMember(float)                                     PostCombatTime                                              OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     PostConversationTime                                        OFFSET(get<float>, {0xD4, 4, 0, 0})
	CMember(EAudioLogPlayState)                        CurrentAudioLogPlayState                                    OFFSET(get<T>, {0xD8, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.AudioLogManager.StopCurrentAudioLog
	// void StopCurrentAudioLog(bool bForce);                                                                                   // [0x17b0e50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AudioLogManager.ResumeCurrentAudioLog
	// void ResumeCurrentAudioLog(bool bForce, bool bFromPlay);                                                                 // [0x17b0d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AudioLogManager.PlayAudioLog
	// void PlayAudioLog(int32_t AudioLogIndex);                                                                                // [0x17b0bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AudioLogManager.PauseCurrentAudioLog
	// void PauseCurrentAudioLog(bool bForce, bool bFromStop);                                                                  // [0x17b0b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.AudioLogManager.OnPreMapLoad
	// void OnPreMapLoad(FString MapName);                                                                                      // [0x17b0930] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnPostMapLoad
	// void OnPostMapLoad(class UWorld* World);                                                                                 // [0x17b08a0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x17b07b0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnConversationEnded
	// void OnConversationEnded(class UConversationInstance* ConversationInstance);                                             // [0x17b03c0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnCombatStateChanged
	// void OnCombatStateChanged(bool bInCombat, bool bRestoring);                                                              // [0x17b02f0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.OnAudioLogLibraryLoaded
	// void OnAudioLogLibraryLoaded(TWeakObjectPtr<UAudioLogLibraryDataAsset*> LibraryDataAsset);                               // [0x17b0030] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogManager.IsPlayingAudioLog
	// bool IsPlayingAudioLog();                                                                                                // [0x17aff70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AudioLogManager.GetCurrentAudioLogPlayState
	// EAudioLogPlayState GetCurrentAudioLogPlayState();                                                                        // [0x17aff30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AudioLogManager.CanStopCurrentAudioLog
	// bool CanStopCurrentAudioLog(bool bExclusive);                                                                            // [0x17afe90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AudioLogManager.CanResumeCurrentAudioLog
	// bool CanResumeCurrentAudioLog(bool bExclusive);                                                                          // [0x17afdc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.AudioLogManager.CanPauseCurrentAudioLog
	// bool CanPauseCurrentAudioLog(bool bExclusive);                                                                           // [0x17afd20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaInterfaceUserWidget
/// Size: 0x0008 (0x000300 - 0x000308)
class UIndianaInterfaceUserWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:


	/// Functions
	// Function /Script/Indiana.IndianaInterfaceUserWidget.SetInterfaceUserFocus
	// void SetInterfaceUserFocus();                                                                                            // [0x185b730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaInterfaceUserWidget.SetCursorVisible
	// void SetCursorVisible(bool bVisible);                                                                                    // [0x185b6a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.AudioLogWidget
/// Size: 0x0090 (0x000308 - 0x000398)
class UAudioLogWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	DMember(float)                                     TimeToFadeIn                                                OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     TimeToFadeOut                                               OFFSET(get<float>, {0x30C, 4, 0, 0})
	CMember(class UAudioLogLibraryDataAsset*)          AudioLogLibrary                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	DMember(bool)                                      bExclusiveMini                                              OFFSET(get<bool>, {0x318, 1, 0, 0})
	CMember(class UTextBlockBase*)                     LogNameTextBlock                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UOverlay*)                           IconOverlay                                                 OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             StopImage                                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TimerText                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UProgressBar*)                       TrackProgressBar                                            OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UImage*)                             BackgroundImage                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SpeakerTextBlock                                            OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MessageTextBlock                                            OFFSET(get<T>, {0x360, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.AudioLogWidget.TacticalTimeDilationStart
	// void TacticalTimeDilationStart();                                                                                        // [0x17b0f60] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogWidget.TacticalTimeDilationEnd
	// void TacticalTimeDilationEnd(float Delta);                                                                               // [0x17b0ee0] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogWidget.ShowAudioLog
	// void ShowAudioLog(bool bShow, float CurrentRenderOpacity);                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.AudioLogWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x17b0690] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogWidget.OnAudioLogPlayStateChanged
	// void OnAudioLogPlayStateChanged(EAudioLogPlayState NewPlayState);                                                        // [0x17b0150] Final|Native|Protected 
	// Function /Script/Indiana.AudioLogWidget.CanStopAudioLog
	// bool CanStopAudioLog();                                                                                                  // [0x17afe60] Final|Native|Public|Const 
};

/// Class /Script/Indiana.AudioParamModVisual
/// Size: 0x0020 (0x000068 - 0x000088)
class UAudioParamModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FName)                                     RTPCName                                                    OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	DMember(float)                                     RTPCValue                                                   OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(int32_t)                                   InterpolationTime                                           OFFSET(get<int32_t>, {0x74, 4, 0, 0})
};

/// Class /Script/Indiana.AudioSwitchModVisual
/// Size: 0x0020 (0x000068 - 0x000088)
class UAudioSwitchModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FName)                                     SwitchGroupName                                             OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FName)                                     SwitchStateName                                             OFFSET(getStruct<T>, {0x70, 8, 0, 0})
};

/// Class /Script/Indiana.AutoSneakAttackStatusEffect
/// Size: 0x0000 (0x000188 - 0x000188)
class UAutoSneakAttackStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.AutoStasisTriggerComponent
/// Size: 0x0008 (0x000268 - 0x000270)
class UAutoStasisTriggerComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/Indiana.AutoStasisTrigger
/// Size: 0x0028 (0x000310 - 0x000338)
class AAutoStasisTrigger : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(TArray<TWeakObjectPtr<AActor*>>)           StasisActors                                                OFFSET(get<T>, {0x310, 16, 0, 0})
};

/// Class /Script/Indiana.BackgroundPanelWidget
/// Size: 0x0088 (0x000278 - 0x000300)
class UBackgroundPanelWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(class UBorder*)                            Border                                                      OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UBorder*)                            BorderInner                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         OuterTexture                                                OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         InnerTexture                                                OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(float)                                     InnerDefaultOpacity                                         OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(bool)                                      bZeroOpacityIfNoTexture                                     OFFSET(get<bool>, {0x2DC, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.BackgroundPanelWidget.SetBackgroundFocused
	// void SetBackgroundFocused(bool bFocused);                                                                                // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.BackgroundPanelWidget.RegisterButtons
	// void RegisterButtons(TArray<UButtonBase*> Buttons);                                                                      // [0x17b0c60] Final|Native|Public  
	// Function /Script/Indiana.BackgroundPanelWidget.OnOuterTextureLoaded
	// void OnOuterTextureLoaded(class UTexture2D* Texture);                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.BackgroundPanelWidget.OnInnerTextureLoaded
	// void OnInnerTextureLoaded(class UTexture2D* Texture);                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.BackgroundSplitPanelWidget
/// Size: 0x00E8 (0x000278 - 0x000360)
class UBackgroundSplitPanelWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(TWeakObjectPtr<class UTexture2D*>)         OuterTextureTop                                             OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         OuterTextureBottom                                          OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         InnerTextureTop                                             OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         InnerTextureBottom                                          OFFSET(get<T>, {0x2F0, 8, 0, 0})
	DMember(float)                                     InnerDefaultOpacity                                         OFFSET(get<float>, {0x318, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.BackgroundSplitPanelWidget.OnOuterTopTextureLoaded
	// void OnOuterTopTextureLoaded(class UTexture2D* Texture);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.BackgroundSplitPanelWidget.OnOuterBottomTextureLoaded
	// void OnOuterBottomTextureLoaded(class UTexture2D* Texture);                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.BackgroundSplitPanelWidget.OnInnerTopTextureLoaded
	// void OnInnerTopTextureLoaded(class UTexture2D* Texture);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.BackgroundSplitPanelWidget.OnInnerBottomTextureLoaded
	// void OnInnerBottomTextureLoaded(class UTexture2D* Texture);                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.BaseInventoryItemManagement
/// Size: 0x0098 (0x000308 - 0x0003A0)
class UBaseInventoryItemManagement : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(class UItemViewerWidget*)                  ItemViewer                                                  OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UItemViewerNavigationWidget*)        ItemViewerNavigation                                        OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UClass*)                             ItemRepairClass                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UScrollBox*)                         PageScrollBox                                               OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UBreakdownPopupWidget*)              BreakdownPopup                                              OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UScrollingWidgetGroup*)              ScrollingWidgetGroup                                        OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            HoveredItem                                                 OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UActorRenderWidget*)                 CharacterRenderer                                           OFFSET(get<T>, {0x370, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.BaseInventoryItemManagement.OnDragDrop_SetArmorSlot
	// void OnDragDrop_SetArmorSlot(class UIndianaDragDropOperation* Operation);                                                // [0x17b0600] Native|Protected     
	// Function /Script/Indiana.BaseInventoryItemManagement.OnDragDrop_JunkItem
	// void OnDragDrop_JunkItem(class UIndianaDragDropOperation* Operation);                                                    // [0x17b0570] Native|Protected     
	// Function /Script/Indiana.BaseInventoryItemManagement.OnDragDrop_ClearWeaponSlot
	// void OnDragDrop_ClearWeaponSlot(class UIndianaDragDropOperation* Operation);                                             // [0x17b04e0] Native|Protected     
	// Function /Script/Indiana.BaseInventoryItemManagement.OnDragDrop_BreakDownItem
	// void OnDragDrop_BreakDownItem(class UIndianaDragDropOperation* Operation);                                               // [0x17b0450] Native|Protected     
};

/// Class /Script/Indiana.BaseMapEntryWidget
/// Size: 0x0000 (0x000300 - 0x000300)
class UBaseMapEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
};

/// Class /Script/Indiana.EventEffect
/// Size: 0x0000 (0x000030 - 0x000030)
class UEventEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.BasePlayAnimEventEffect
/// Size: 0x0010 (0x000030 - 0x000040)
class UBasePlayAnimEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(EMeshTarget)                               TargetMesh                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(float)                                     DelayTimeMin                                                OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DelayTimeMax                                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      bComputeBlendOutTimeInDurationCalculation                   OFFSET(get<bool>, {0x3C, 1, 0, 0})
};

/// Class /Script/Indiana.BaseTeamData
/// Size: 0x0050 (0x000030 - 0x000080)
class UBaseTeamData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TSet<UClass*>)                             Teams                                                       OFFSET(get<T>, {0x30, 80, 0, 0})
};

/// Class /Script/Indiana.BasicMapFloorTrackedActor
/// Size: 0x0030 (0x0002B8 - 0x0002E8)
class ABasicMapFloorTrackedActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
};

/// Struct /Script/Indiana.BeaconProperties
/// Size: 0x0020 (0x000000 - 0x000020)
class FBeaconProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FLocString)                                DisplayText                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(EBeaconType)                               BeaconType                                                  OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(class UClass*)                             BeaconTagWidgetClass                                        OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bAreaBeacon                                                 OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     AreaBeaconRadius                                            OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Class /Script/Indiana.NewBeacon
/// Size: 0x0080 (0x0002B8 - 0x000338)
class ANewBeacon : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	SMember(FBeaconProperties)                         BeaconProperties                                            OFFSET(getStruct<T>, {0x2E8, 32, 0, 0})
};

/// Class /Script/Indiana.BeaconComponent
/// Size: 0x0038 (0x000268 - 0x0002A0)
class UBeaconComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	SMember(FBeaconProperties)                         BeaconProperties                                            OFFSET(getStruct<T>, {0x268, 32, 0, 0})


	/// Functions
	// Function /Script/Indiana.BeaconComponent.Show
	// void Show();                                                                                                             // [0x17b0e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.BeaconComponent.Hide
	// void Hide();                                                                                                             // [0x17aff50] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.BeaconData
/// Size: 0x0040 (0x000000 - 0x000040)
class FBeaconData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FName)                                     CurrentFloor                                                OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	CMember(ESpecialBeaconType)                        SpecialType                                                 OFFSET(get<T>, {0x14, 1, 0, 0})
	CMember(class UShipDestinationData*)               ShipDestinationData                                         OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FBeaconProperties)                         BeaconProperties                                            OFFSET(getStruct<T>, {0x20, 32, 0, 0})
};

/// Struct /Script/Indiana.MapBeaconCache
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FMapBeaconCache : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TMap<FGuid, FBeaconData>)                  BeaconData                                                  OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Class /Script/Indiana.BeaconManager
/// Size: 0x0118 (0x000030 - 0x000148)
class UBeaconManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(TMap<FString, FMapBeaconCache>)            BeaconCaches                                                OFFSET(get<T>, {0x30, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.BeaconManager.OnShipChangedLocation
	// void OnShipChangedLocation(class UShipDestinationData* NewShipLocation);                                                 // [0x17b09e0] Final|Native|Protected 
};

/// Class /Script/Indiana.BeaconMapEntryWidget
/// Size: 0x0058 (0x000300 - 0x000358)
class UBeaconMapEntryWidget : public UBaseMapEntryWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(class UTexture2D*)                         ActiveQuestIcon                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTexture2D*)                         InactiveQuestIcon                                           OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             Icon                                                        OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UHorizontalBox*)                     QuestNameHBox                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     QuestNameTextBlock                                          OFFSET(get<T>, {0x320, 8, 0, 0})
};

/// Class /Script/Indiana.BeaconTagWidget
/// Size: 0x0070 (0x000300 - 0x000370)
class UBeaconTagWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UCanvasPanel*)                       MainCanvasPanel                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UVerticalBox*)                       RootBox                                                     OFFSET(get<T>, {0x308, 8, 0, 0})
	SMember(FString)                                   BeaconDisplayText                                           OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	CMember(class UTextBlockBase*)                     DistanceTextBlock                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             BeaconImage                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(ESlateVisibility)                          HiddenNameTextBlockVisibility                               OFFSET(get<T>, {0x338, 1, 0, 0})
	CMember(class UTexture2D*)                         OnScreenBeaconTexture                                       OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTexture2D*)                         OffScreenBeaconTexture                                      OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTexture2D*)                         OnScreenAreaBeaconTexture                                   OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTexture2D*)                         OffScreenAreaBeaconTexture                                  OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(EUIMarkerType)                             LastMarkerType                                              OFFSET(get<T>, {0x360, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.BeaconTagWidget.OnWaypointMarkerVisibilityChanged
	// void OnWaypointMarkerVisibilityChanged(bool bVisible);                                                                   // [0x17b0a70] Final|Native|Protected 
	// Function /Script/Indiana.BeaconTagWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x17b0720] Final|Native|Protected 
};

/// Class /Script/Indiana.IndianaWidgetComponent
/// Size: 0x0020 (0x000650 - 0x000670)
class UIndianaWidgetComponent : public UWidgetComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
};

/// Class /Script/Indiana.BeaconTagWidgetComponent
/// Size: 0x0010 (0x000670 - 0x000680)
class UBeaconTagWidgetComponent : public UIndianaWidgetComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
};

/// Struct /Script/Indiana.DeathClassOverride
/// Size: 0x0010 (0x000000 - 0x000010)
class FDeathClassOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             DeathClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGameplayTag)                              CreatureType                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.DamageDescription
/// Size: 0x0078 (0x000000 - 0x000078)
class FDamageDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(EDamageEventType)                          DamageEventType                                             OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UClass*)                             SecondaryDamageType                                         OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(TArray<class UClass*>)                     GuaranteedStatusEffects                                     OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(EMeleeAttackType)                          MeleeAttackType                                             OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(EHitReactType)                             HitReactionType                                             OFFSET(get<T>, {0x29, 1, 0, 0})
	DMember(float)                                     BaseDamage                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     DamageRange                                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     BaseCritChance                                              OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     CritMultiplier                                              OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     StealthMultiplier                                           OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     GrazeChanceModifier                                         OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     GrazeMultiplier                                             OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     DamageResistanceMultiplier                                  OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     DamageThresholdMultiplier                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     PostArmorDamageMultiplier                                   OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     ImpulseOverride                                             OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     MinimumDamage                                               OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     InnerRadius                                                 OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     OuterRadius                                                 OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     DamageFalloff                                               OFFSET(get<float>, {0x64, 4, 0, 0})
	CMember(TArray<FDeathClassOverride>)               DeathClassOverrides                                         OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Struct /Script/Indiana.DamageLevelScaler
/// Size: 0x0090 (0x000000 - 0x000090)
class FDamageLevelScaler : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bScaleBaseDamage                                            OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FRuntimeFloatCurve)                        BaseDamageCurve                                             OFFSET(getStruct<T>, {0x8, 136, 0, 0})
};

/// Class /Script/Indiana.Destructible
/// Size: 0x01C0 (0x0002B8 - 0x000478)
class ADestructible : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1144;

public:
	SMember(FMulticastInlineDelegate)                  OnDestructiblePristine                                      OFFSET(getStruct<T>, {0x2D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDestructibleDamaged                                       OFFSET(getStruct<T>, {0x2E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDestructibleDestroyed                                     OFFSET(getStruct<T>, {0x2F0, 16, 0, 0})
	CMember(EDestructibleState)                        InitialState                                                OFFSET(get<T>, {0x300, 1, 0, 0})
	CMember(class UStaticMesh*)                        PristineStaticMesh                                          OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UStaticMesh*)                        DamagedStaticMesh                                           OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UStaticMesh*)                        DestroyedStaticMesh                                         OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImpactDataSet*)                     ImpactDataSet                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	SMember(FDamageDescription)                        DamageDescription                                           OFFSET(getStruct<T>, {0x328, 120, 0, 0})
	SMember(FDamageLevelScaler)                        DamageLevelScaler                                           OFFSET(getStruct<T>, {0x3A0, 144, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               StaticMeshComponent                                         OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UHealthComponent*)                   HealthComponent                                             OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class USceneComponent*)                    DetonationPoint                                             OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UTargetableComponent*)               TargetableComponent                                         OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UDestructibleShoutComponent*)        ShoutComponent                                              OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UIndianaNavModifierComponent*)       NavModComponent                                             OFFSET(get<T>, {0x468, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.Destructible.SetDestructibleState
	// void SetDestructibleState(EDestructibleState NewState);                                                                  // [0x17fe5f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.Destructible.ReceiveTriggerUntripped
	// void ReceiveTriggerUntripped();                                                                                          // [0x17fe5c0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceiveTriggerTripped
	// void ReceiveTriggerTripped();                                                                                            // [0x17fe590] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceiveTriggerDisarmed
	// void ReceiveTriggerDisarmed();                                                                                           // [0x17fe560] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceiveTriggerArmed
	// void ReceiveTriggerArmed();                                                                                              // [0x17fe530] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceivePreDeploy
	// void ReceivePreDeploy();                                                                                                 // [0x17fe500] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.ReceiveDeployOrder
	// void ReceiveDeployOrder();                                                                                               // [0x17fe4d0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.Destructible.OnHealthChanged
	// void OnHealthChanged(float HealthChange, class AActor* InInstigator);                                                    // [0x17fdbb0] Final|Native|Protected 
};

/// Class /Script/Indiana.BeamLauncher
/// Size: 0x0130 (0x000478 - 0x0005A8)
class ABeamLauncher : public ADestructible
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1448;

public:
	SMember(FDamageDescription)                        BeamDamageDescription                                       OFFSET(getStruct<T>, {0x478, 120, 0, 0})
	SMember(FDamageLevelScaler)                        BeamDamageLevelScaler                                       OFFSET(getStruct<T>, {0x4F0, 144, 0, 0})
	CMember(class UImpactDataSet*)                     BeamImpactDataSet                                           OFFSET(get<T>, {0x580, 8, 0, 0})
	CMember(class UParticleSystem*)                    AttackFxShotOrigin                                          OFFSET(get<T>, {0x588, 8, 0, 0})
	CMember(class UParticleSystem*)                    AttackFxShotEnd                                             OFFSET(get<T>, {0x590, 8, 0, 0})
	CMember(class UParticleSystem*)                    AttackFxBeam                                                OFFSET(get<T>, {0x598, 8, 0, 0})
	SMember(FName)                                     AttackFxBeamEndParam                                        OFFSET(getStruct<T>, {0x5A0, 8, 0, 0})
};

/// Struct /Script/Indiana.WeaponInputBuffer
/// Size: 0x000C (0x000000 - 0x00000C)
class FWeaponInputBuffer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     WindowTime                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     InputTimeStamp                                              OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Class /Script/Indiana.WeaponMode
/// Size: 0x0100 (0x000030 - 0x000130)
class UWeaponMode : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FMulticastInlineDelegate)                  OnAttack                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FDamageDescription)                        DamageDescription                                           OFFSET(getStruct<T>, {0x70, 120, 0, 0})
	DMember(float)                                     StealthCritMultiplier                                       OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     SoundRadius                                                 OFFSET(get<float>, {0xEC, 4, 0, 0})
	DMember(float)                                     ImpactSoundRadiusOverride                                   OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     AIBaseDamageOverride                                        OFFSET(get<float>, {0xF4, 4, 0, 0})
	CMember(class URpgStat*)                           DamageModStat                                               OFFSET(get<T>, {0xF8, 8, 0, 0})
	DMember(float)                                     AttackTTDScalar                                             OFFSET(get<float>, {0x100, 4, 0, 0})
	CMember(class UClass*)                             DamageTypeOverride                                          OFFSET(get<T>, {0x108, 8, 0, 0})
	SMember(FWeaponInputBuffer)                        PrimaryTriggerQueue                                         OFFSET(getStruct<T>, {0x110, 12, 0, 0})
	SMember(FWeaponInputBuffer)                        QuickMeleeQueue                                             OFFSET(getStruct<T>, {0x11C, 12, 0, 0})


	/// Functions
	// Function /Script/Indiana.WeaponMode.IsIdle
	// bool IsIdle();                                                                                                           // [0x18e9700] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponMode.IsFullyAimed
	// bool IsFullyAimed();                                                                                                     // [0x18e96d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponMode.IsCharging
	// bool IsCharging();                                                                                                       // [0x18e96a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponMode.GetPrimaryDamageTypeEnum
	// EIndianaDamageType GetPrimaryDamageTypeEnum();                                                                           // [0x18e95a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.DepthOfFieldSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FDepthOfFieldSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bUseSettings                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     FocalDistance                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     NearTransition                                              OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     NearBlur                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     FarBlur                                                     OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Indiana.CustomShotAngles
/// Size: 0x0008 (0x000000 - 0x000008)
class FCustomShotAngles : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Yaw                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Class /Script/Indiana.RangedMode
/// Size: 0x0488 (0x000130 - 0x0005B8)
class URangedMode : public UWeaponMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1464;

public:
	DMember(float)                                     MinEffectiveRange                                           OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     MaxEffectiveRange                                           OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x150, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        MaxRangeFalloutCurve                                        OFFSET(getStruct<T>, {0x158, 136, 0, 0})
	DMember(float)                                     PerShotCalledShotScalar                                     OFFSET(get<float>, {0x1E0, 4, 0, 0})
	DMember(float)                                     PerShotDamageCalledShotScalar                               OFFSET(get<float>, {0x1E4, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CalledShotChargeTooCloseCurve                               OFFSET(getStruct<T>, {0x1E8, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        CalledShotChargeTooFarCurve                                 OFFSET(getStruct<T>, {0x270, 136, 0, 0})
	DMember(bool)                                      bUseTargeting                                               OFFSET(get<bool>, {0x2F8, 1, 0, 0})
	DMember(bool)                                      bDisableCustomFire                                          OFFSET(get<bool>, {0x2F9, 1, 0, 0})
	SMember(FName)                                     OverrideShootSocket                                         OFFSET(getStruct<T>, {0x2FC, 8, 0, 0})
	DMember(float)                                     AnimShotTimeScalar                                          OFFSET(get<float>, {0x304, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        SpreadCurve                                                 OFFSET(getStruct<T>, {0x308, 136, 0, 0})
	DMember(float)                                     Spread                                                      OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     AISpread                                                    OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     SpreadMovementScalar                                        OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(float)                                     MoveSpreadPenalty                                           OFFSET(get<float>, {0x39C, 4, 0, 0})
	DMember(float)                                     TTDSpreadScalar                                             OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(float)                                     AimAssistSpread                                             OFFSET(get<float>, {0x3A4, 4, 0, 0})
	DMember(float)                                     BloomPerShotPercent                                         OFFSET(get<float>, {0x3A8, 4, 0, 0})
	DMember(float)                                     MaxBloom                                                    OFFSET(get<float>, {0x3AC, 4, 0, 0})
	DMember(float)                                     BloomDecayTime                                              OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(float)                                     BloomReturnDelay                                            OFFSET(get<float>, {0x3B4, 4, 0, 0})
	DMember(float)                                     FineAimSpreadReduction                                      OFFSET(get<float>, {0x3B8, 4, 0, 0})
	DMember(float)                                     FineAimFovAdjustment                                        OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(float)                                     FineAimLookStickRateMultiplier                              OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(bool)                                      bCanSprintWhileAiming                                       OFFSET(get<bool>, {0x3C4, 1, 0, 0})
	CMember(class UAimAssistData*)                     AimAssistData                                               OFFSET(get<T>, {0x3C8, 8, 0, 0})
	SMember(FDepthOfFieldSettings)                     FineAnimDoFSettings                                         OFFSET(getStruct<T>, {0x3D0, 20, 0, 0})
	CMember(TWeakObjectPtr<class UScopeData*>)         ScopeData                                                   OFFSET(get<T>, {0x3E8, 8, 0, 0})
	DMember(float)                                     Sway                                                        OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     SwayMovement                                                OFFSET(get<float>, {0x43C, 4, 0, 0})
	DMember(float)                                     SwayChangeTime                                              OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(float)                                     SwayChangeLaziness                                          OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(float)                                     TTDSwayScalar                                               OFFSET(get<float>, {0x448, 4, 0, 0})
	DMember(float)                                     FullyAimedRecoilScalar                                      OFFSET(get<float>, {0x44C, 4, 0, 0})
	DMember(float)                                     HipFireRecoilScalar                                         OFFSET(get<float>, {0x450, 4, 0, 0})
	CMember(class URecoilData*)                        Recoil                                                      OFFSET(get<T>, {0x458, 8, 0, 0})
	DMember(bool)                                      bRecoilReturnToZero                                         OFFSET(get<bool>, {0x460, 1, 0, 0})
	DMember(float)                                     MovedYawTolerance                                           OFFSET(get<float>, {0x464, 4, 0, 0})
	DMember(float)                                     MovedPitchTolerance                                         OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     ReturnToZeroRecoilSpeed                                     OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     ZoomPerShotPercent                                          OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     MaxZoom                                                     OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     ZoomDecayTime                                               OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     ZoomReturnDelay                                             OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(float)                                     ZoomAimedScaler                                             OFFSET(get<float>, {0x480, 4, 0, 0})
	CMember(TArray<FCustomShotAngles>)                 CustomProjectileAngles                                      OFFSET(get<T>, {0x488, 16, 0, 0})
	CMember(class UQuickMeleeData*)                    NonStealthMeleeData                                         OFFSET(get<T>, {0x568, 8, 0, 0})
	CMember(class UQuickMeleeData*)                    StealthMeleeData                                            OFFSET(get<T>, {0x570, 8, 0, 0})
	DMember(float)                                     QuickMeleeTTDScalar                                         OFFSET(get<float>, {0x5B0, 4, 0, 0})
	DMember(bool)                                      bSpellOnly                                                  OFFSET(get<bool>, {0x5B4, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.RangedMode.OnMontageBlendingOut
	// void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);                                               // [0x189ff60] Final|Native|Protected 
	// Function /Script/Indiana.RangedMode.HasScope
	// bool HasScope();                                                                                                         // [0x189ff00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetWeaponCurrentAmmoGaugeAlpha
	// float GetWeaponCurrentAmmoGaugeAlpha();                                                                                  // [0x189fec0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetShotOrigin
	// FVector GetShotOrigin();                                                                                                 // [0x189fe80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetMuzzleRotation
	// FRotator GetMuzzleRotation();                                                                                            // [0x189fe40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetMuzzleLocationAndRotation
	// bool GetMuzzleLocationAndRotation(FVector& Location, FRotator& Rotation);                                                // [0x189fd40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetMuzzleLocation
	// FVector GetMuzzleLocation();                                                                                             // [0x189fd00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetAimingUpDirection
	// FVector GetAimingUpDirection();                                                                                          // [0x189fcc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.RangedMode.GetAimingDirection
	// FVector GetAimingDirection();                                                                                            // [0x189fc80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.BeamMode
/// Size: 0x00E8 (0x0005B8 - 0x0006A0)
class UBeamMode : public URangedMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1696;

public:
	DMember(float)                                     TickDamageTime                                              OFFSET(get<float>, {0x5B8, 4, 0, 0})
	DMember(float)                                     TickRecoilTime                                              OFFSET(get<float>, {0x5BC, 4, 0, 0})
	DMember(float)                                     TargetLockTime                                              OFFSET(get<float>, {0x5C0, 4, 0, 0})
	DMember(float)                                     TargetingBoundsScale                                        OFFSET(get<float>, {0x5C4, 4, 0, 0})
	DMember(float)                                     TickAmmoTime                                                OFFSET(get<float>, {0x5C8, 4, 0, 0})
	DMember(char)                                      AmmoPerTick                                                 OFFSET(get<char>, {0x5CC, 1, 0, 0})
	DMember(bool)                                      bOnlyConsumeAmmoIfLocked                                    OFFSET(get<bool>, {0x5CD, 1, 0, 0})
	DMember(float)                                     NonHostileTargetTime                                        OFFSET(get<float>, {0x5D0, 4, 0, 0})
	SMember(FName)                                     BeamLockedRTPCName                                          OFFSET(getStruct<T>, {0x5D4, 8, 0, 0})
	SMember(FName)                                     TargetHealthPercentageRTPCName                              OFFSET(getStruct<T>, {0x5DC, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      EmployeeBenefitsRezFailedEvent                              OFFSET(get<T>, {0x5E8, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.BeamMode.IsTargetingPlayer
	// bool IsTargetingPlayer();                                                                                                // [0x17b4cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.BeamMode.HasLockedTarget
	// bool HasLockedTarget();                                                                                                  // [0x17b4cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.BeamMode.GetTargetLocation
	// FVector GetTargetLocation();                                                                                             // [0x17b4c70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.BeardAppearance
/// Size: 0x0050 (0x000040 - 0x000090)
class FBeardAppearance : public FAppearanceMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture*>)           BeardTexture                                                OFFSET(get<T>, {0x68, 8, 0, 0})
};

/// Class /Script/Indiana.BeardAppearances
/// Size: 0x0010 (0x000038 - 0x000048)
class UBeardAppearances : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FBeardAppearance>)                  BeardAppearances                                            OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.BeardColor
/// Size: 0x0020 (0x000038 - 0x000058)
class UBeardColor : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FLinearColor)                              BeardRootColor                                              OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FLinearColor)                              BeardTipColor                                               OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Indiana.FurnitureActor
/// Size: 0x0010 (0x0002B8 - 0x0002C8)
class AFurnitureActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UFurnitureComponent*)                FurnitureComponent                                          OFFSET(get<T>, {0x2C0, 8, 0, 0})
};

/// Class /Script/Indiana.Bed
/// Size: 0x0038 (0x0002C8 - 0x000300)
class ABed : public AFurnitureActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UClass*)                             RestSpell                                                   OFFSET(get<T>, {0x2E0, 8, 0, 0})
	DMember(float)                                     CameraFadeDuration                                          OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(int32_t)                                   MinHours                                                    OFFSET(get<int32_t>, {0x2EC, 4, 0, 0})
	DMember(int32_t)                                   MaxHours                                                    OFFSET(get<int32_t>, {0x2F0, 4, 0, 0})
};

/// Struct /Script/Indiana.AIStateHistory
/// Size: 0x0010 (0x000000 - 0x000010)
class FAIStateHistory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Class /Script/Indiana.BehaviorStackComponent
/// Size: 0x0150 (0x0000E0 - 0x000230)
class UBehaviorStackComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UBehaviorStateInfo*)                 CurrentStateInfo                                            OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(TArray<class UBehaviorStateInfo*>)         QueuedStateInfos                                            OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(TArray<FAIStateHistory>)                   BehaviorStateHistories                                      OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(TMap<class UDecisionTreeRequestData*, FAIStateHistory>) DecisionTreeRequestHistories                   OFFSET(get<T>, {0x1D0, 80, 0, 0})
	CMember(TArray<class UBehaviorStateInfo*>)         PastStateInfos                                              OFFSET(get<T>, {0x220, 16, 0, 0})
};

/// Class /Script/Indiana.EQS_BehaviorStateInfo
/// Size: 0x0058 (0x000120 - 0x000178)
class UEQS_BehaviorStateInfo : public UBehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
};

/// Class /Script/Indiana.BehaviorTreeGlobalParams
/// Size: 0x0018 (0x000030 - 0x000048)
class UBehaviorTreeGlobalParams : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/Indiana.BreakBoneInfo
/// Size: 0x0060 (0x000000 - 0x000060)
class FBreakBoneInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     Target                                                      OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     Source                                                      OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     BoneBreakName                                               OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bIsBroke                                                    OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Class /Script/Indiana.IndianaAnimInstance
/// Size: 0x01D8 (0x0002C8 - 0x0004A0)
class UIndianaAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	DMember(bool)                                      bSpeedIsRun                                                 OFFSET(get<bool>, {0x2C8, 1, 0, 0})
	CMember(TArray<FBreakBoneInfo>)                    BreakBoneConfig                                             OFFSET(get<T>, {0x2D0, 16, 0, 0})
	DMember(int32_t)                                   ForcedLODWhenBroken                                         OFFSET(get<int32_t>, {0x2E0, 4, 0, 0})
	DMember(bool)                                      bJustTeleported                                             OFFSET(get<bool>, {0x2FC, 1, 0, 0})
	DMember(float)                                     IKLeftHandAlpha                                             OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     IKRightHandAlpha                                            OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     AltHandIKLeftAlpha                                          OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(float)                                     AltHandIKRightAlpha                                         OFFSET(get<float>, {0x39C, 4, 0, 0})
	DMember(float)                                     IKBlendTime                                                 OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(bool)                                      bFootIKEnabled                                              OFFSET(get<bool>, {0x428, 1, 0, 0})
	DMember(bool)                                      bFootIKState                                                OFFSET(get<bool>, {0x429, 1, 0, 0})
	DMember(float)                                     IKInterpSpeed                                               OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(float)                                     FootRayUp                                                   OFFSET(get<float>, {0x430, 4, 0, 0})
	DMember(float)                                     FootRayDown                                                 OFFSET(get<float>, {0x434, 4, 0, 0})
	DMember(float)                                     IKHipRange                                                  OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     IKHipMaxAdjust                                              OFFSET(get<float>, {0x43C, 4, 0, 0})
	DMember(float)                                     HipSpeedAdjust                                              OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(float)                                     RunHipSpeedAdjust                                           OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(float)                                     HipAdjustMinRange                                           OFFSET(get<float>, {0x448, 4, 0, 0})
	DMember(float)                                     JointDriverBlendSpeed                                       OFFSET(get<float>, {0x44C, 4, 0, 0})
	DMember(float)                                     JointDriverRollBlendSpeed                                   OFFSET(get<float>, {0x450, 4, 0, 0})
	SMember(FVector)                                   IKBoxExtent                                                 OFFSET(getStruct<T>, {0x454, 12, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            IKCollisionChannel                                          OFFSET(get<T>, {0x460, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaAnimInstance.Montage_SkipToEnd
	// float Montage_SkipToEnd(class UAnimMontage* MontageToPlay);                                                              // [0x183e560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAnimInstance.AnimNotify_ToggleFootIK
	// void AnimNotify_ToggleFootIK();                                                                                          // [0x183e500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAnimInstance.AnimNotify_EnableFootIK
	// void AnimNotify_EnableFootIK();                                                                                          // [0x183e4e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAnimInstance.AnimNotify_DisableFootIK
	// void AnimNotify_DisableFootIK();                                                                                         // [0x183e4c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterAnimInstance
/// Size: 0x00C0 (0x0004A0 - 0x000560)
class UCharacterAnimInstance : public UIndianaAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1376;

public:
	CMember(class UClass*)                             DefaultWeaponAnimationsTemplate                             OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UWeaponAnimations*)                  DefaultWeaponAnimations                                     OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UWeaponAnimations*)                  WeaponAnimations                                            OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class ULocomotionAnimationSet*)            LocomotionAnimationSet                                      OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(EAnimMovementState)                        MovementState                                               OFFSET(get<T>, {0x4C0, 1, 0, 0})
	CMember(EAnimMovementModifierState)                MovementModifierState                                       OFFSET(get<T>, {0x4C1, 1, 0, 0})
	DMember(float)                                     LastFallDistance                                            OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(bool)                                      bIsEquipping                                                OFFSET(get<bool>, {0x4CD, 1, 0, 0})
	DMember(bool)                                      bIsUnequipping                                              OFFSET(get<bool>, {0x4CE, 1, 0, 0})
	DMember(bool)                                      bIsBlocking                                                 OFFSET(get<bool>, {0x4CF, 1, 0, 0})
	DMember(bool)                                      bIsBeingBumped                                              OFFSET(get<bool>, {0x4D0, 1, 0, 0})
	DMember(bool)                                      bIsHitReacting                                              OFFSET(get<bool>, {0x4D1, 1, 0, 0})
	DMember(float)                                     HitReactStrength                                            OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     HitReactX                                                   OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     HitReactY                                                   OFFSET(get<float>, {0x4DC, 4, 0, 0})
	DMember(float)                                     NormalizedSpeedBlendTime                                    OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     NormalizedSpeed                                             OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     NormalizedForwardSpeed                                      OFFSET(get<float>, {0x4EC, 4, 0, 0})
	DMember(float)                                     ForwardSpeed                                                OFFSET(get<float>, {0x4F0, 4, 0, 0})
	DMember(float)                                     NormalizedStrafeSpeed                                       OFFSET(get<float>, {0x4F4, 4, 0, 0})
	DMember(float)                                     StrafeSpeed                                                 OFFSET(get<float>, {0x4F8, 4, 0, 0})
	DMember(bool)                                      bIsCrouching                                                OFFSET(get<bool>, {0x4FC, 1, 0, 0})
	DMember(bool)                                      bWeaponIsHolstered                                          OFFSET(get<bool>, {0x4FD, 1, 0, 0})
	CMember(EHolsterState)                             CurrentHolsterState                                         OFFSET(get<T>, {0x4FE, 1, 0, 0})
	DMember(bool)                                      bHelmetIsVisible                                            OFFSET(get<bool>, {0x4FF, 1, 0, 0})
	DMember(float)                                     WeaponCharge                                                OFFSET(get<float>, {0x500, 4, 0, 0})
	SMember(FVector)                                   WeaponFineAimOffset                                         OFFSET(getStruct<T>, {0x504, 12, 0, 0})
	SMember(FVector)                                   WeaponNormalAimOffset                                       OFFSET(getStruct<T>, {0x510, 12, 0, 0})


	/// Functions
	// Function /Script/Indiana.CharacterAnimInstance.SetDisabledAnimation
	// void SetDisabledAnimation(FAnimEventGameplayTagContainer Container);                                                     // [0x17cade0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterAnimInstance.OnRebuildAnimationSetData
	// void OnRebuildAnimationSetData();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterAnimInstance.OnNewWeaponAnimations
	// void OnNewWeaponAnimations(class UWeaponAnimations* NewWeaponAnimations);                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterAnimInstance.OnNewLocomotionAnimationSet
	// void OnNewLocomotionAnimationSet(class ULocomotionAnimationSet* NewLocomtionAnimationSet);                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterAnimInstance.OnMovementLanded
	// void OnMovementLanded(float Distance);                                                                                   // [0x17cac80] Final|Native|Protected 
	// Function /Script/Indiana.CharacterAnimInstance.IsMontagePlayingOnSlot
	// bool IsMontagePlayingOnSlot(FName SlotNodeName);                                                                         // [0x17ca870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.BodyRotationProperties
/// Size: 0x0008 (0x000000 - 0x000008)
class FBodyRotationProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     RotationInitiateThreshold                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     RotationCompleteTolerance                                   OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Indiana.RandomPlayerSequenceEntryNamed
/// Size: 0x0058 (0x000000 - 0x000058)
class FRandomPlayerSequenceEntryNamed : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UAnimSequence*)                      Sequence                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     ChanceToPlay                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MinLoopCount                                                OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   MaxLoopCount                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     MinPlayRate                                                 OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MaxPlayRate                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
	SMember(FAlphaBlend)                               BlendIn                                                     OFFSET(getStruct<T>, {0x20, 48, 0, 0})
	DMember(bool)                                      bMustPlayFromBeginning                                      OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(bool)                                      bIgnoreForInitialAnimation                                  OFFSET(get<bool>, {0x51, 1, 0, 0})
	DMember(bool)                                      bIgnoreIfHelmetIsVisible                                    OFFSET(get<bool>, {0x52, 1, 0, 0})
	DMember(bool)                                      bIgnoreIfWithinTalkRange                                    OFFSET(get<bool>, {0x53, 1, 0, 0})
	DMember(bool)                                      bIgnoreIfOutsideOfTalkRange                                 OFFSET(get<bool>, {0x54, 1, 0, 0})
};

/// Struct /Script/Indiana.LocomotionNode
/// Size: 0x0018 (0x000000 - 0x000018)
class FLocomotionNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UAnimSequence*)                      Node0Sequence                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAnimSequence*)                      Node1Sequence                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      EnterNode0                                                  OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      EnterNode1                                                  OFFSET(get<bool>, {0x11, 1, 0, 0})
};

/// Class /Script/Indiana.TPVAnimInstance
/// Size: 0x03F8 (0x000558 - 0x000950)
class UTPVAnimInstance : public UCharacterAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2384;

public:
	DMember(bool)                                      bDisableArmPoses                                            OFFSET(get<bool>, {0x57C, 1, 0, 0})
	DMember(float)                                     StationaryRotationSpeed                                     OFFSET(get<float>, {0x594, 4, 0, 0})
	DMember(float)                                     MovingRotationSpeed                                         OFFSET(get<float>, {0x598, 4, 0, 0})
	DMember(float)                                     MovingRotationSpeedNoTracking                               OFFSET(get<float>, {0x59C, 4, 0, 0})
	DMember(float)                                     MaxMovingShuffleAngle                                       OFFSET(get<float>, {0x5A0, 4, 0, 0})
	SMember(FBodyRotationProperties)                   DefaultRotationProperties                                   OFFSET(getStruct<T>, {0x5A4, 8, 0, 0})
	SMember(FBodyRotationProperties)                   CombatRotationProperties                                    OFFSET(getStruct<T>, {0x5AC, 8, 0, 0})
	SMember(FBodyRotationProperties)                   CombatMeleeRotationProperties                               OFFSET(getStruct<T>, {0x5B4, 8, 0, 0})
	SMember(FBodyRotationProperties)                   MovingRotationProperties                                    OFFSET(getStruct<T>, {0x5BC, 8, 0, 0})
	CMember(EStationaryRotationType)                   StationaryRotationType                                      OFFSET(get<T>, {0x5C4, 1, 0, 0})
	DMember(bool)                                      bAlwaysFaceTargetWhileStationary                            OFFSET(get<bool>, {0x5C5, 1, 0, 0})
	DMember(float)                                     SmoothedDirectionInterpSpeed                                OFFSET(get<float>, {0x5C8, 4, 0, 0})
	SMember(FVector)                                   AimLocation                                                 OFFSET(getStruct<T>, {0x5CC, 12, 0, 0})
	DMember(float)                                     AimPitch                                                    OFFSET(get<float>, {0x5D8, 4, 0, 0})
	DMember(float)                                     AimYaw                                                      OFFSET(get<float>, {0x5DC, 4, 0, 0})
	DMember(float)                                     SmoothedAimPitch                                            OFFSET(get<float>, {0x5E0, 4, 0, 0})
	DMember(float)                                     SmoothedAimYaw                                              OFFSET(get<float>, {0x5E4, 4, 0, 0})
	DMember(float)                                     HeadPitch                                                   OFFSET(get<float>, {0x5E8, 4, 0, 0})
	DMember(float)                                     HeadYaw                                                     OFFSET(get<float>, {0x5EC, 4, 0, 0})
	SMember(FVector)                                   EyeLocation                                                 OFFSET(getStruct<T>, {0x5F0, 12, 0, 0})
	DMember(float)                                     EyeStrength                                                 OFFSET(get<float>, {0x5FC, 4, 0, 0})
	DMember(float)                                     EyeRotationComfortAngle                                     OFFSET(get<float>, {0x600, 4, 0, 0})
	DMember(float)                                     HeadStrength                                                OFFSET(get<float>, {0x604, 4, 0, 0})
	DMember(float)                                     EyeSpeed                                                    OFFSET(get<float>, {0x608, 4, 0, 0})
	DMember(float)                                     HeadSpeed                                                   OFFSET(get<float>, {0x60C, 4, 0, 0})
	DMember(float)                                     TurnDelta                                                   OFFSET(get<float>, {0x610, 4, 0, 0})
	DMember(bool)                                      IsTurning                                                   OFFSET(get<bool>, {0x614, 1, 0, 0})
	DMember(bool)                                      IsTracking                                                  OFFSET(get<bool>, {0x615, 1, 0, 0})
	DMember(bool)                                      IsEyeTracking                                               OFFSET(get<bool>, {0x616, 1, 0, 0})
	DMember(bool)                                      InCover                                                     OFFSET(get<bool>, {0x617, 1, 0, 0})
	DMember(bool)                                      bIsRagdolling                                               OFFSET(get<bool>, {0x618, 1, 0, 0})
	DMember(float)                                     IsGibbing                                                   OFFSET(get<float>, {0x61C, 4, 0, 0})
	DMember(bool)                                      bIsLocomotionActive                                         OFFSET(get<bool>, {0x620, 1, 0, 0})
	DMember(bool)                                      bInvestigatingDeadBody                                      OFFSET(get<bool>, {0x621, 1, 0, 0})
	DMember(bool)                                      bCombatEnumIsCombat                                         OFFSET(get<bool>, {0x622, 1, 0, 0})
	DMember(bool)                                      bCombatEnumIsPreCombat                                      OFFSET(get<bool>, {0x623, 1, 0, 0})
	DMember(bool)                                      bCombatEnumIsNonCombat                                      OFFSET(get<bool>, {0x624, 1, 0, 0})
	DMember(bool)                                      bSpeedIsIdle                                                OFFSET(get<bool>, {0x625, 1, 0, 0})
	DMember(bool)                                      bSpeedIsWalk                                                OFFSET(get<bool>, {0x626, 1, 0, 0})
	DMember(bool)                                      bIsTurningAndSpeedIsIdle                                    OFFSET(get<bool>, {0x627, 1, 0, 0})
	DMember(bool)                                      bTalking                                                    OFFSET(get<bool>, {0x628, 1, 0, 0})
	DMember(bool)                                      bAngleToFutureDirectionChanging                             OFFSET(get<bool>, {0x62B, 1, 0, 0})
	DMember(bool)                                      bWantsToStartMoving                                         OFFSET(get<bool>, {0x62C, 1, 0, 0})
	DMember(float)                                     Direction                                                   OFFSET(get<float>, {0x630, 4, 0, 0})
	DMember(float)                                     SmoothedDirection                                           OFFSET(get<float>, {0x634, 4, 0, 0})
	DMember(float)                                     SmoothedSpeed                                               OFFSET(get<float>, {0x638, 4, 0, 0})
	DMember(float)                                     FaceFXStrengthSpeed                                         OFFSET(get<float>, {0x63C, 4, 0, 0})
	DMember(float)                                     FaceFXStrength                                              OFFSET(get<float>, {0x640, 4, 0, 0})
	DMember(float)                                     ChatterStrengthSpeed                                        OFFSET(get<float>, {0x644, 4, 0, 0})
	DMember(float)                                     ChatterStrength                                             OFFSET(get<float>, {0x648, 4, 0, 0})
	SMember(FVector)                                   FutureLocation                                              OFFSET(getStruct<T>, {0x64C, 12, 0, 0})
	DMember(float)                                     AngleToFutureDirection                                      OFFSET(get<float>, {0x658, 4, 0, 0})
	DMember(float)                                     LocomotionPlayRate                                          OFFSET(get<float>, {0x65C, 4, 0, 0})
	DMember(float)                                     HitFlinchAlpha                                              OFFSET(get<float>, {0x660, 4, 0, 0})
	DMember(float)                                     WeakPointHitFlinchPercentMultiplier                         OFFSET(get<float>, {0x664, 4, 0, 0})
	DMember(float)                                     HeavyHitFlinchPercent                                       OFFSET(get<float>, {0x668, 4, 0, 0})
	DMember(float)                                     LightHitFlinchPercent                                       OFFSET(get<float>, {0x66C, 4, 0, 0})
	CMember(class UTPVPersonalitySet*)                 DefaultPersonality                                          OFFSET(get<T>, {0x670, 8, 0, 0})
	CMember(class UTPVPersonalitySet*)                 CurrentPersonality                                          OFFSET(get<T>, {0x678, 8, 0, 0})
	CMember(class UEmotionData*)                       EmotionData                                                 OFFSET(get<T>, {0x680, 8, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               OverrideHeadBlendSpace                                      OFFSET(get<T>, {0x690, 8, 0, 0})
	DMember(bool)                                      bHasCustomHeadBlendSpace                                    OFFSET(get<bool>, {0x69C, 1, 0, 0})
	DMember(bool)                                      bIsEmotionActive                                            OFFSET(get<bool>, {0x69D, 1, 0, 0})
	DMember(bool)                                      bInConversation                                             OFFSET(get<bool>, {0x69F, 1, 0, 0})
	DMember(int32_t)                                   EmotionIndex                                                OFFSET(get<int32_t>, {0x6A0, 4, 0, 0})
	CMember(class UAnimSequence*)                      WalkForward                                                 OFFSET(get<T>, {0x6B8, 8, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   Emotion0BaseIdle                                            OFFSET(get<T>, {0x6C0, 16, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   Emotion1BaseIdle                                            OFFSET(get<T>, {0x6D0, 16, 0, 0})
	DMember(bool)                                      bIsEmotion0Active                                           OFFSET(get<bool>, {0x6E0, 1, 0, 0})
	DMember(bool)                                      bIsEmotion0ActiveCut                                        OFFSET(get<bool>, {0x6E1, 1, 0, 0})
	DMember(bool)                                      bIsEmotion1Active                                           OFFSET(get<bool>, {0x6E2, 1, 0, 0})
	DMember(bool)                                      bIsEmotion1ActiveCut                                        OFFSET(get<bool>, {0x6E3, 1, 0, 0})
	DMember(float)                                     WalkPlayRate                                                OFFSET(get<float>, {0x738, 4, 0, 0})
	DMember(float)                                     RunPlayRate                                                 OFFSET(get<float>, {0x73C, 4, 0, 0})
	DMember(float)                                     CombatWalkPlayRate                                          OFFSET(get<float>, {0x740, 4, 0, 0})
	DMember(float)                                     CombatRunPlayRate                                           OFFSET(get<float>, {0x744, 4, 0, 0})
	DMember(float)                                     CombatHobbledPlayRate                                       OFFSET(get<float>, {0x748, 4, 0, 0})
	DMember(float)                                     SyncRaycastDistances                                        OFFSET(get<float>, {0x74C, 4, 0, 0})
	DMember(float)                                     ShapeCastDistance                                           OFFSET(get<float>, {0x750, 4, 0, 0})
	DMember(bool)                                      bWalkSpeedAdjustmentsEnabled                                OFFSET(get<bool>, {0x754, 1, 0, 0})
	DMember(float)                                     AdditionalHipAdjustment                                     OFFSET(get<float>, {0x758, 4, 0, 0})
	DMember(float)                                     WalkSpeed                                                   OFFSET(get<float>, {0x75C, 4, 0, 0})
	DMember(float)                                     RunSpeed                                                    OFFSET(get<float>, {0x760, 4, 0, 0})
	DMember(float)                                     RunSpeedRate                                                OFFSET(get<float>, {0x764, 4, 0, 0})
	DMember(float)                                     CombatWalkSpeedAuthored                                     OFFSET(get<float>, {0x768, 4, 0, 0})
	DMember(float)                                     CombatRunSpeedAuthored                                      OFFSET(get<float>, {0x76C, 4, 0, 0})
	DMember(float)                                     CombatHobbledSpeedAuthored                                  OFFSET(get<float>, {0x770, 4, 0, 0})
	DMember(float)                                     MinPlayrateSpeed                                            OFFSET(get<float>, {0x774, 4, 0, 0})
	DMember(bool)                                      bHasLocomotionLogicComponent                                OFFSET(get<bool>, {0x7B6, 1, 0, 0})
	DMember(bool)                                      bForceToIdle                                                OFFSET(get<bool>, {0x7C0, 1, 0, 0})
	SMember(FLocomotionNode)                           NCWalkStart                                                 OFFSET(getStruct<T>, {0x7C8, 24, 0, 0})
	SMember(FLocomotionNode)                           NCWalkStop                                                  OFFSET(getStruct<T>, {0x7E0, 24, 0, 0})
	SMember(FLocomotionNode)                           NCTurnInPlace                                               OFFSET(getStruct<T>, {0x7F8, 24, 0, 0})
	SMember(FLocomotionNode)                           CTurnInPlace                                                OFFSET(getStruct<T>, {0x810, 24, 0, 0})
	SMember(FLocomotionNode)                           NCWalkTurn                                                  OFFSET(getStruct<T>, {0x828, 24, 0, 0})
	DMember(bool)                                      bHasJumpStateMachine                                        OFFSET(get<bool>, {0x860, 1, 0, 0})
	DMember(bool)                                      bRunningJumpStateMachine                                    OFFSET(get<bool>, {0x861, 1, 0, 0})
	DMember(bool)                                      bMovementStateIsInAir                                       OFFSET(get<bool>, {0x862, 1, 0, 0})
	DMember(bool)                                      IsJumping                                                   OFFSET(get<bool>, {0x863, 1, 0, 0})
	DMember(int32_t)                                   JumpDirection                                               OFFSET(get<int32_t>, {0x864, 4, 0, 0})
	DMember(bool)                                      bOnMovingPlatform                                           OFFSET(get<bool>, {0x868, 1, 0, 0})
	CMember(TArray<float>)                             UpdateRateThresholds                                        OFFSET(get<T>, {0x870, 16, 0, 0})
	DMember(float)                                     CurrentHipPoseStrength                                      OFFSET(get<float>, {0x884, 4, 0, 0})
	DMember(bool)                                      bUseLowGravAnimation                                        OFFSET(get<bool>, {0x889, 1, 0, 0})
	DMember(bool)                                      bRagdollSnapshotActive                                      OFFSET(get<bool>, {0x8A0, 1, 0, 0})
	SMember(FPoseSnapshot)                             RagdollSnapshot                                             OFFSET(getStruct<T>, {0x8D0, 56, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        GetUpAxis                                                   OFFSET(get<T>, {0x908, 1, 0, 0})
	CMember(TEnumAsByte<EAxis>)                        ForwardAxis                                                 OFFSET(get<T>, {0x909, 1, 0, 0})
	SMember(FName)                                     ChestBone                                                   OFFSET(getStruct<T>, {0x90C, 8, 0, 0})
	SMember(FName)                                     HipBone                                                     OFFSET(getStruct<T>, {0x914, 8, 0, 0})
	DMember(bool)                                      bFlipFaceDownForwardVector                                  OFFSET(get<bool>, {0x91C, 1, 0, 0})
	DMember(bool)                                      bFlipFaceUpForwardVector                                    OFFSET(get<bool>, {0x91D, 1, 0, 0})
	DMember(bool)                                      bConsiderActorForward                                       OFFSET(get<bool>, {0x91E, 1, 0, 0})
	DMember(bool)                                      bShouldHideWeapon                                           OFFSET(get<bool>, {0x91F, 1, 0, 0})
	DMember(bool)                                      bUseGetUpAnimation                                          OFFSET(get<bool>, {0x920, 1, 0, 0})
	CMember(TArray<class UAnimMontage*>)               GetUpFromFaceDownPose                                       OFFSET(get<T>, {0x928, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               GetUpFromFaceUpPose                                         OFFSET(get<T>, {0x938, 16, 0, 0})
	DMember(bool)                                      bPathFinished                                               OFFSET(get<bool>, {0x948, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.TPVAnimInstance.UpdateAnimationSetUpdate
	// void UpdateAnimationSetUpdate();                                                                                         // [0x18da320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.SetStateTransitioned
	// void SetStateTransitioned(EAnimTreeState State, bool Transitioned);                                                      // [0x18da150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.SetPersonality
	// void SetPersonality(class UTPVPersonalitySet* Personality);                                                              // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Indiana.TPVAnimInstance.SetNextEmotion
	// bool SetNextEmotion(EEmotion Emotion, float Duration, bool Persist, bool ForceNextEmotion);                              // [0x18d9fe0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.ResetEmotionToDefault
	// void ResetEmotionToDefault();                                                                                            // [0x18d9fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.OnMontageStart
	// void OnMontageStart(class UAnimMontage* Montage);                                                                        // [0x18d9bd0] Final|Native|Public  
	// Function /Script/Indiana.TPVAnimInstance.OnMontageEnd
	// void OnMontageEnd(class UAnimMontage* Montage, bool bInterrupted);                                                       // [0x18d9b00] Final|Native|Public  
	// Function /Script/Indiana.TPVAnimInstance.GetUpFromRagdoll
	// void GetUpFromRagdoll(float GetUpSpeed);                                                                                 // [0x18d9310] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.GetAnimationSetUpdate
	// int32_t GetAnimationSetUpdate();                                                                                         // [0x18d92b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.ClearCurrentEmotion
	// void ClearCurrentEmotion();                                                                                              // [0x18d9090] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_ResetLocomotionState
	// void AnimNotify_ResetLocomotionState();                                                                                  // [0x18d8fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_OnLandEnd
	// void AnimNotify_OnLandEnd();                                                                                             // [0x18d8f70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_OnJumpIntroEnd
	// void AnimNotify_OnJumpIntroEnd();                                                                                        // [0x18d8f40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCWalkStartEntered
	// void AnimNotify_NCWalkStartEntered();                                                                                    // [0x18d8f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCWalkEntered
	// void AnimNotify_NCWalkEntered();                                                                                         // [0x18d8f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCTurnEntered
	// void AnimNotify_NCTurnEntered();                                                                                         // [0x18d8ee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCRunEntered
	// void AnimNotify_NCRunEntered();                                                                                          // [0x18d8ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_NCIdleEntered
	// void AnimNotify_NCIdleEntered();                                                                                         // [0x18d8ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_JumpStateMachineComplete
	// void AnimNotify_JumpStateMachineComplete();                                                                              // [0x18d8e80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_IdleStateLeft
	// void AnimNotify_IdleStateLeft();                                                                                         // [0x18d8e60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_CTurnEntered
	// void AnimNotify_CTurnEntered();                                                                                          // [0x18d8e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_CombatStateEntered
	// void AnimNotify_CombatStateEntered();                                                                                    // [0x18d8e40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TPVAnimInstance.AnimNotify_ClearFurnitureFlag
	// void AnimNotify_ClearFurnitureFlag();                                                                                    // [0x18d8e20] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.BipedWeaponAnims
/// Size: 0x0158 (0x000000 - 0x000158)
class FBipedWeaponAnims : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	CMember(class UAimOffsetBlendSpace*)               CombatAimBlendSpace                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAnimSequence*)                      HobbledWalkForward                                          OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatWalkForward                                           OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatRunForward                                            OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      ForwardBlendSpace                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RunForwardBlendSpace                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatWalkBackward                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatRunBackward                                           OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      BackwardBlendSpace                                          OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RunBackwardBlendSpace                                       OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatWalkLeft                                              OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatRunLeft                                               OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      LeftBlendSpace                                              OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RunLeftBlendSpace                                           OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatWalkRight                                             OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatRunRight                                              OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RightBlendSpace                                             OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RunRightBlendSpace                                          OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatCrouchStartSequence                                   OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatCrouchIdleSequence                                    OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatCrouchEndSequence                                     OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UAnimSequence*)                      ReadyFireArmPose                                            OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UAnimSequence*)                      IdleFireArmPose                                             OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UAnimSequence*)                      WeaponDownWalkArm                                           OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UAnimSequence*)                      WeaponDownRunArm                                            OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UAnimSequence*)                      BlockStartSequence                                          OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UAnimSequence*)                      BlockIdleSequence                                           OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UAnimSequence*)                      JumpSequence                                                OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UAnimSequence*)                      FallSequence                                                OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class UAnimSequence*)                      LandSequence                                                OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravJumpSequence                                         OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravFallSequence                                         OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravLandSequence                                         OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UAnimSequence*)                      SearchingStartSequence                                      OFFSET(get<T>, {0x150, 8, 0, 0})
};

/// Struct /Script/Indiana.BipedPersonalityAnims
/// Size: 0x00B8 (0x000000 - 0x0000B8)
class FBipedPersonalityAnims : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class UAimOffsetBlendSpace*)               NonCombatAimBlendSpace                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAnimSequence*)                      WalkForward                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UAnimSequence*)                      WalkBackward                                                OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UAnimSequence*)                      RunForward                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UAnimSequence*)                      RunBackward                                                 OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravRunForward                                           OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravRunBackward                                          OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UAnimSequence*)                      HandPose                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UAnimSequence*)                      WalkArmPose                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UAnimSequence*)                      RunArmPose                                                  OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UAnimSequence*)                      JumpIntro                                                   OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UAnimSequence*)                      JumpLoop                                                    OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UAnimSequence*)                      JumpLand                                                    OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravJumpIntro                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravJumpLoop                                             OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravJumpLand                                             OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchIdleStart                                             OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchIdle                                                  OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchIdleEnd                                               OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchWalkStart                                             OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchWalk                                                  OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchWalkEnd                                               OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UAnimSequence*)                      HeadAdditiveLayer                                           OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Struct /Script/Indiana.LoopRandomSequence
/// Size: 0x0028 (0x000000 - 0x000028)
class FLoopRandomSequence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   LoopSequences                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(class UAnimSequence*)                      StartSequence                                               OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UAnimSequence*)                      StopSequence                                                OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(float)                                     ChanceToPlay                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(bool)                                      bIgnoreBarkWhileInBLEBranch                                 OFFSET(get<bool>, {0x24, 1, 0, 0})
};

/// Struct /Script/Indiana.DiscoveredAnims
/// Size: 0x0090 (0x000000 - 0x000090)
class FDiscoveredAnims : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TMap<FName, FLoopRandomSequence>)          TalkingSequences                                            OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   BaseIdle                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   DialogIdles                                                 OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FLoopRandomSequence>)               IdleStates                                                  OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(class UAnimSequence*)                      StartSequence                                               OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UAnimSequence*)                      WalkForwardSequence                                         OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Struct /Script/Indiana.TalkingIdleEntry
/// Size: 0x0090 (0x000000 - 0x000090)
class FTalkingIdleEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UAnimSequence*)                      StartSequence                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TMap<FName, FLoopRandomSequence>)          TalkingSequences                                            OFFSET(get<T>, {0x10, 80, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   Idle                                                        OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   DialogIdle                                                  OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FLoopRandomSequence>)               IdleStates                                                  OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/Indiana.BipedAnimInstance
/// Size: 0x0990 (0x000950 - 0x0012E0)
class UBipedAnimInstance : public UTPVAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4832;

public:
	DMember(float)                                     IKStrengthWhileMoving                                       OFFSET(get<float>, {0x950, 4, 0, 0})
	CMember(class UPoseAsset*)                         EyePoseAsset                                                OFFSET(get<T>, {0x958, 8, 0, 0})
	DMember(float)                                     LegIKStrength                                               OFFSET(get<float>, {0x960, 4, 0, 0})
	SMember(FVector)                                   HipOffset                                                   OFFSET(getStruct<T>, {0x964, 12, 0, 0})
	SMember(FRotator)                                  HipRotation                                                 OFFSET(getStruct<T>, {0x970, 12, 0, 0})
	SMember(FRotator)                                  SpineCounterRotation                                        OFFSET(getStruct<T>, {0x97C, 12, 0, 0})
	DMember(bool)                                      bIkLeftHand                                                 OFFSET(get<bool>, {0x988, 1, 0, 0})
	DMember(bool)                                      bDelayedReadyFireRequested                                  OFFSET(get<bool>, {0x989, 1, 0, 0})
	DMember(float)                                     DelayedReadyFireTime                                        OFFSET(get<float>, {0x98C, 4, 0, 0})
	DMember(float)                                     ArmPoseStrength                                             OFFSET(get<float>, {0x990, 4, 0, 0})
	DMember(float)                                     CombatArmPoseStrength                                       OFFSET(get<float>, {0x994, 4, 0, 0})
	DMember(float)                                     FootAngledAmountForSlopes                                   OFFSET(get<float>, {0x998, 4, 0, 0})
	DMember(bool)                                      bLocoForwardActive                                          OFFSET(get<bool>, {0x9A0, 1, 0, 0})
	DMember(bool)                                      bLocoLeftActive                                             OFFSET(get<bool>, {0x9A1, 1, 0, 0})
	DMember(bool)                                      bLocoRightActive                                            OFFSET(get<bool>, {0x9A2, 1, 0, 0})
	DMember(bool)                                      bLocoBackwardActive                                         OFFSET(get<bool>, {0x9A3, 1, 0, 0})
	DMember(bool)                                      bUpperBodyIsolated                                          OFFSET(get<bool>, {0x9A4, 1, 0, 0})
	DMember(bool)                                      bUseSearchingLayer                                          OFFSET(get<bool>, {0x9A5, 1, 0, 0})
	DMember(float)                                     CombatDirection                                             OFFSET(get<float>, {0xA40, 4, 0, 0})
	DMember(float)                                     BackwardAngle                                               OFFSET(get<float>, {0xA44, 4, 0, 0})
	DMember(float)                                     WalkStartPlaySpeed                                          OFFSET(get<float>, {0xA48, 4, 0, 0})
	DMember(float)                                     HobbledWalkForwardSpeed                                     OFFSET(get<float>, {0xA4C, 4, 0, 0})
	DMember(float)                                     CombatWalkForwardSpeed                                      OFFSET(get<float>, {0xA50, 4, 0, 0})
	DMember(float)                                     CombatRunForwardSpeed                                       OFFSET(get<float>, {0xA54, 4, 0, 0})
	DMember(float)                                     CombatWalkBackwardSpeed                                     OFFSET(get<float>, {0xA58, 4, 0, 0})
	DMember(float)                                     CombatRunBackwardSpeed                                      OFFSET(get<float>, {0xA5C, 4, 0, 0})
	DMember(float)                                     CombatWalkLeftSpeed                                         OFFSET(get<float>, {0xA60, 4, 0, 0})
	DMember(float)                                     CombatRunLeftSpeed                                          OFFSET(get<float>, {0xA64, 4, 0, 0})
	DMember(float)                                     CombatWalkRightSpeed                                        OFFSET(get<float>, {0xA68, 4, 0, 0})
	DMember(float)                                     CombatRunRightSpeed                                         OFFSET(get<float>, {0xA6C, 4, 0, 0})
	SMember(FBipedWeaponAnims)                         BipedWeaponAnims                                            OFFSET(getStruct<T>, {0xA70, 344, 0, 0})
	CMember(class UAnimSequence*)                      WalkForwardWithEmotion                                      OFFSET(get<T>, {0xBC8, 8, 0, 0})
	CMember(class UAnimSequence*)                      PersonalityIdleAdditive                                     OFFSET(get<T>, {0xBD0, 8, 0, 0})
	DMember(float)                                     PersonalityIdleStrength                                     OFFSET(get<float>, {0xBD8, 4, 0, 0})
	DMember(float)                                     MinimumHillDetectionDistance                                OFFSET(get<float>, {0xBDC, 4, 0, 0})
	DMember(float)                                     CurrentHillAngle                                            OFFSET(get<float>, {0xBE0, 4, 0, 0})
	DMember(float)                                     HillAngleBlendSpeed                                         OFFSET(get<float>, {0xBE4, 4, 0, 0})
	SMember(FBipedPersonalityAnims)                    BipedPersonalityAnim                                        OFFSET(getStruct<T>, {0xBE8, 184, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   SearchingIdleSequences                                      OFFSET(get<T>, {0xCA0, 16, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   DeadBodySearchSequences                                     OFFSET(get<T>, {0xCB0, 16, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   CombatIdleSequences                                         OFFSET(get<T>, {0xCC0, 16, 0, 0})
	SMember(FDiscoveredAnims)                          DiscoveredPersonality                                       OFFSET(getStruct<T>, {0xCE0, 144, 0, 0})
	SMember(FDiscoveredAnims)                          DiscoveredDialog                                            OFFSET(getStruct<T>, {0xD70, 144, 0, 0})
	SMember(FDiscoveredAnims)                          DiscoveredEmotion0                                          OFFSET(getStruct<T>, {0xE00, 144, 0, 0})
	SMember(FDiscoveredAnims)                          DiscoveredEmotion1                                          OFFSET(getStruct<T>, {0xE90, 144, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   CurrentBaseIdle                                             OFFSET(get<T>, {0xF88, 16, 0, 0})
	SMember(FLoopRandomSequence)                       CurrentIdleLoopSequence                                     OFFSET(getStruct<T>, {0xF98, 40, 0, 0})
	SMember(FLoopRandomSequence)                       CurrentBarkTalkSequence                                     OFFSET(getStruct<T>, {0xFC0, 40, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   CurrentDialogIdle                                           OFFSET(get<T>, {0xFE8, 16, 0, 0})
	SMember(FLoopRandomSequence)                       CurrentDialogIdleLoopSequence                               OFFSET(getStruct<T>, {0xFF8, 40, 0, 0})
	SMember(FLoopRandomSequence)                       CurrentTalkSequence                                         OFFSET(getStruct<T>, {0x1020, 40, 0, 0})
	SMember(FLoopRandomSequence)                       CurrentEmotion0IdleSequences                                OFFSET(getStruct<T>, {0x1048, 40, 0, 0})
	SMember(FLoopRandomSequence)                       CurrentEmotion0TalkSequence                                 OFFSET(getStruct<T>, {0x1070, 40, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   Emotion0DialogIdle                                          OFFSET(get<T>, {0x1098, 16, 0, 0})
	CMember(class UAnimSequence*)                      CurrentEmotion0StartSequence                                OFFSET(get<T>, {0x10A8, 8, 0, 0})
	SMember(FLoopRandomSequence)                       CurrentEmotion1IdleSequences                                OFFSET(getStruct<T>, {0x10B0, 40, 0, 0})
	SMember(FLoopRandomSequence)                       CurrentEmotion1TalkSequence                                 OFFSET(getStruct<T>, {0x10D8, 40, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   Emotion1DialogIdle                                          OFFSET(get<T>, {0x1100, 16, 0, 0})
	CMember(class UAnimSequence*)                      CurrentEmotion1StartSequence                                OFFSET(get<T>, {0x1110, 8, 0, 0})
	DMember(bool)                                      bIsHeadEmotionActive                                        OFFSET(get<bool>, {0x1118, 1, 0, 0})
	DMember(bool)                                      bCurrentTalkHasStartEndSequence                             OFFSET(get<bool>, {0x1119, 1, 0, 0})
	DMember(bool)                                      bCurrentBarkTalkHasStartEndSequences                        OFFSET(get<bool>, {0x111A, 1, 0, 0})
	DMember(bool)                                      bCurrentEmotion0TalkHasStartEndSequences                    OFFSET(get<bool>, {0x111B, 1, 0, 0})
	DMember(bool)                                      bCurrentEmotion1TalkHasStartEndSequences                    OFFSET(get<bool>, {0x111C, 1, 0, 0})
	DMember(bool)                                      bCurrentEmotion0HasStartSequence                            OFFSET(get<bool>, {0x1120, 1, 0, 0})
	DMember(bool)                                      bCurrentEmotion1HasStartSequence                            OFFSET(get<bool>, {0x1121, 1, 0, 0})
	DMember(bool)                                      bIsNeutralIdleSequenceValid                                 OFFSET(get<bool>, {0x1122, 1, 0, 0})
	DMember(bool)                                      bIsDialogIdleSequenceValid                                  OFFSET(get<bool>, {0x1123, 1, 0, 0})
	DMember(bool)                                      bIsEmotion0IdleSequenceValid                                OFFSET(get<bool>, {0x1124, 1, 0, 0})
	DMember(bool)                                      bIsEmotion1IdleSequenceValid                                OFFSET(get<bool>, {0x1125, 1, 0, 0})
	DMember(bool)                                      bConversationIdleStateActive                                OFFSET(get<bool>, {0x1126, 1, 0, 0})
	DMember(bool)                                      bBaseIdleStateActive                                        OFFSET(get<bool>, {0x1127, 1, 0, 0})
	DMember(bool)                                      bBaseIdleStateActiveCut                                     OFFSET(get<bool>, {0x1128, 1, 0, 0})
	DMember(bool)                                      bEmotion0IdleStateActive                                    OFFSET(get<bool>, {0x1129, 1, 0, 0})
	DMember(bool)                                      bEmotion0IdleStateActiveCut                                 OFFSET(get<bool>, {0x112A, 1, 0, 0})
	DMember(bool)                                      bEmotion1IdleStateActive                                    OFFSET(get<bool>, {0x112B, 1, 0, 0})
	DMember(bool)                                      bEmotion1IdleStateActiveCut                                 OFFSET(get<bool>, {0x112C, 1, 0, 0})
	DMember(bool)                                      bUseTalkingAnimations                                       OFFSET(get<bool>, {0x112E, 1, 0, 0})
	DMember(float)                                     IKLeftHandStrength                                          OFFSET(get<float>, {0x1130, 4, 0, 0})
	DMember(float)                                     HandPoseStrength                                            OFFSET(get<float>, {0x1134, 4, 0, 0})
	DMember(float)                                     WalkArmPosesStrength                                        OFFSET(get<float>, {0x1138, 4, 0, 0})
	DMember(float)                                     RunArmPosesStrength                                         OFFSET(get<float>, {0x113C, 4, 0, 0})
	DMember(float)                                     ArmPoseSpeed                                                OFFSET(get<float>, {0x1140, 4, 0, 0})
	CMember(TArray<class UAnimMontage*>)               GetUpFromFaceDownPoseWeapon                                 OFFSET(get<T>, {0x1148, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               GetUpFromFaceUpPoseWeapon                                   OFFSET(get<T>, {0x1158, 16, 0, 0})
	DMember(int32_t)                                   EmotionLayerInvalidate0                                     OFFSET(get<int32_t>, {0x1168, 4, 0, 0})
	DMember(int32_t)                                   EmotionLayerInvalidate1                                     OFFSET(get<int32_t>, {0x116C, 4, 0, 0})
	CMember(class UAnimSequence*)                      HeadAdditiveLayer                                           OFFSET(get<T>, {0x1170, 8, 0, 0})
	CMember(class UAnimSequence*)                      HeadAdditiveLayerEmotion0                                   OFFSET(get<T>, {0x1178, 8, 0, 0})
	CMember(class UAnimSequence*)                      HeadAdditiveLayerEmotion1                                   OFFSET(get<T>, {0x1180, 8, 0, 0})
	CMember(class UAnimSequence*)                      HeadAdditiveLayerEmotionStart0                              OFFSET(get<T>, {0x1188, 8, 0, 0})
	CMember(class UAnimSequence*)                      HeadAdditiveLayerEmotionStart1                              OFFSET(get<T>, {0x1190, 8, 0, 0})
	DMember(float)                                     HeadStrengthSpeed                                           OFFSET(get<float>, {0x1198, 4, 0, 0})
	DMember(float)                                     CurrentHeadStrength                                         OFFSET(get<float>, {0x119C, 4, 0, 0})
	DMember(bool)                                      bIsEmotion0AdditveStartValid                                OFFSET(get<bool>, {0x11A0, 1, 0, 0})
	DMember(bool)                                      bIsEmotion1AdditveStartValid                                OFFSET(get<bool>, {0x11A1, 1, 0, 0})
	DMember(bool)                                      bCutFromIdleLoop                                            OFFSET(get<bool>, {0x11A8, 1, 0, 0})
	DMember(bool)                                      RandomIdle                                                  OFFSET(get<bool>, {0x11A9, 1, 0, 0})
	SMember(FTalkingIdleEntry)                         TalkingOverride                                             OFFSET(getStruct<T>, {0x11B0, 144, 0, 0})
	SMember(FTalkingIdleEntry)                         PendingTalkingOverride                                      OFFSET(getStruct<T>, {0x1248, 144, 0, 0})


	/// Functions
	// Function /Script/Indiana.BipedAnimInstance.UpdatePersonalityAnims
	// void UpdatePersonalityAnims();                                                                                           // [0x17b4d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.BipedAnimInstance.PickRandomIdle
	// void PickRandomIdle();                                                                                                   // [0x17b4d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.BipedAnimInstance.AnimNotify_SafeToReevaluateTalking
	// void AnimNotify_SafeToReevaluateTalking();                                                                               // [0x17b4c50] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.BlockProperties
/// Size: 0x0004 (0x000000 - 0x000004)
class FBlockProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     AttackDamageMultiplier                                      OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Class /Script/Indiana.BlockComponent
/// Size: 0x0180 (0x0000E0 - 0x000260)
class UBlockComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	SMember(FMulticastInlineDelegate)                  OnBlockStart                                                OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBlockStop                                                 OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBlockHit                                                  OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	CMember(TMap<EMeleeAttackType, FBlockProperties>)  BlockProperties                                             OFFSET(get<T>, {0x128, 80, 0, 0})
	SMember(FName)                                     BlockingParameterName                                       OFFSET(getStruct<T>, {0x178, 8, 0, 0})
	DMember(float)                                     VFXRampInSpeed                                              OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     VFXRampOutSpeed                                             OFFSET(get<float>, {0x184, 4, 0, 0})
	SMember(FName)                                     BlockingHitParameterName                                    OFFSET(getStruct<T>, {0x188, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        BlockingHitCurve                                            OFFSET(getStruct<T>, {0x190, 136, 0, 0})
	DMember(bool)                                      bBlocking                                                   OFFSET(get<bool>, {0x218, 1, 0, 0})
};

/// Class /Script/Indiana.BlockInventoryVolume
/// Size: 0x0000 (0x000310 - 0x000310)
class ABlockInventoryVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
};

/// Struct /Script/Indiana.AppearanceGoreCap
/// Size: 0x0098 (0x000000 - 0x000098)
class FAppearanceGoreCap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FGameplayTagContainer)                     BodyParts                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TWeakObjectPtr<class UStaticMesh*>)        UpperCap                                                    OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(TWeakObjectPtr<class UStaticMesh*>)        LowerCap                                                    OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      SkinnedCap                                                  OFFSET(get<T>, {0x70, 8, 0, 0})
};

/// Struct /Script/Indiana.BodyAppearance
/// Size: 0x00B0 (0x000040 - 0x0000F0)
class FBodyAppearance : public FAppearanceMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      BodyMesh                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TMap<FName, TWeakObjectPtr<UMaterialInterface*>>) MaterialOverrides                                    OFFSET(get<T>, {0x68, 80, 0, 0})
	CMember(TArray<FAppearanceGoreCap>)                GoreCaps                                                    OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TWeakObjectPtr<class UFootstepData*>)      Footsteps                                                   OFFSET(get<T>, {0xC8, 8, 0, 0})
};

/// Class /Script/Indiana.BodyAppearances
/// Size: 0x0020 (0x000038 - 0x000058)
class UBodyAppearances : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FBodyAppearance>)                   BodyAppearances                                             OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FGameplayTag)                              BodyType                                                    OFFSET(getStruct<T>, {0x50, 8, 0, 0})
};

/// Struct /Script/Indiana.SpellEffectApplyChance
/// Size: 0x0070 (0x000000 - 0x000070)
class FSpellEffectApplyChance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGameplayTagContainer)                     BodyParts                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(TMap<class UClass*, float>)                SpellApplyChances                                           OFFSET(get<T>, {0x20, 80, 0, 0})
};

/// Class /Script/Indiana.BodyLocationSpellAsset
/// Size: 0x0040 (0x000038 - 0x000078)
class UBodyLocationSpellAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<FSpellEffectApplyChance>)           LocationSpellChanceMap                                      OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FGameplayTag)                              WeaponHitBodyPartTTD                                        OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FGameplayTagContainer)                     ImmuneCreatures                                             OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	DMember(float)                                     TTDChance                                                   OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(bool)                                      bApplyAllInTTD                                              OFFSET(get<bool>, {0x74, 1, 0, 0})
};

/// Struct /Script/Indiana.BodyPart
/// Size: 0x0050 (0x000000 - 0x000050)
class FBodyPart : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     PhATBodySetupBoneName                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bRepresentsMultipleBodyParts                                OFFSET(get<bool>, {0x8, 1, 0, 0})
	SMember(FGameplayTag)                              BodyPartTag                                                 OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FName)                                     TransformSocketName                                         OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	DMember(float)                                     DirectionalBodyPartsOffset                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	CMember(TArray<FGameplayTag>)                      DirectionalBodyParts                                        OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      bCanBeSevered                                               OFFSET(get<bool>, {0x30, 1, 0, 0})
	SMember(FName)                                     SeverBoneNameOverride                                       OFFSET(getStruct<T>, {0x34, 8, 0, 0})
	SMember(FName)                                     AttachedSocket                                              OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
	SMember(FName)                                     DetachedSocket                                              OFFSET(getStruct<T>, {0x44, 8, 0, 0})
	DMember(bool)                                      bBulletMagnetism                                            OFFSET(get<bool>, {0x4C, 1, 0, 0})
};

/// Class /Script/Indiana.BodyPartData
/// Size: 0x0010 (0x000038 - 0x000048)
class UBodyPartData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FBodyPart>)                         BodyParts                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.BodyPartsComponent
/// Size: 0x0000 (0x0000E0 - 0x0000E0)
class UBodyPartsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
};

/// Class /Script/Indiana.BoneModStatusEffect
/// Size: 0x0010 (0x000188 - 0x000198)
class UBoneModStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	CMember(TArray<class UBoneModifications*>)         BoneMods                                                    OFFSET(get<T>, {0x188, 16, 0, 0})
};

/// Class /Script/Indiana.BossComponent
/// Size: 0x0030 (0x0000E0 - 0x000110)
class UBossComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:


	/// Functions
	// Function /Script/Indiana.BossComponent.OnHealthChanged
	// void OnHealthChanged(float HealthChange, class AActor* InInstigator);                                                    // [0x17ba520] Final|Native|Private 
	// Function /Script/Indiana.BossComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bIsInCombat, bool bRestoring);                                                            // [0x17ba450] Final|Native|Private 
};

/// Class /Script/Indiana.BossFightManager
/// Size: 0x0030 (0x000030 - 0x000060)
class UBossFightManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FMulticastInlineDelegate)                  OnBossHealthChanged                                         OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.BotAnimInstance
/// Size: 0x0150 (0x000950 - 0x000AA0)
class UBotAnimInstance : public UTPVAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2720;

public:
	CMember(TArray<class UAnimSequence*>)              LocomotionTurnInPlace                                       OFFSET(get<T>, {0x950, 16, 0, 0})
	CMember(TArray<class UAnimSequence*>)              CombatTurnInPlace                                           OFFSET(get<T>, {0x960, 16, 0, 0})
	CMember(class UBlendSpace1D*)                      ForwardBlendSpace                                           OFFSET(get<T>, {0x970, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      LeftBlendSpace                                              OFFSET(get<T>, {0x978, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RightBlendSpace                                             OFFSET(get<T>, {0x980, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      BackBlendSpace                                              OFFSET(get<T>, {0x988, 8, 0, 0})
	DMember(float)                                     ForwardBlendMin                                             OFFSET(get<float>, {0x990, 4, 0, 0})
	DMember(float)                                     ForwardBlendMax                                             OFFSET(get<float>, {0x994, 4, 0, 0})
	DMember(float)                                     LeftBlendMin                                                OFFSET(get<float>, {0x998, 4, 0, 0})
	DMember(float)                                     LeftBlendMax                                                OFFSET(get<float>, {0x99C, 4, 0, 0})
	DMember(float)                                     RightBlendMin                                               OFFSET(get<float>, {0x9A0, 4, 0, 0})
	DMember(float)                                     RightBlendMax                                               OFFSET(get<float>, {0x9A4, 4, 0, 0})
	DMember(float)                                     BackwardBlendMin                                            OFFSET(get<float>, {0x9A8, 4, 0, 0})
	DMember(float)                                     BackwardBlendMax                                            OFFSET(get<float>, {0x9AC, 4, 0, 0})
	DMember(float)                                     IKHipBlendSpeed                                             OFFSET(get<float>, {0xA30, 4, 0, 0})
	DMember(float)                                     LegIKStrength                                               OFFSET(get<float>, {0xA34, 4, 0, 0})
	SMember(FVector)                                   HipOffset                                                   OFFSET(getStruct<T>, {0xA38, 12, 0, 0})
	DMember(bool)                                      bLocoForwardActive                                          OFFSET(get<bool>, {0xA44, 1, 0, 0})
	DMember(bool)                                      bLocoLeftActive                                             OFFSET(get<bool>, {0xA45, 1, 0, 0})
	DMember(bool)                                      bLocoRightActive                                            OFFSET(get<bool>, {0xA46, 1, 0, 0})
	DMember(bool)                                      bLocoBackwardActive                                         OFFSET(get<bool>, {0xA47, 1, 0, 0})
	DMember(float)                                     CombatDirection                                             OFFSET(get<float>, {0xA64, 4, 0, 0})
	DMember(float)                                     BackwardAngle                                               OFFSET(get<float>, {0xA68, 4, 0, 0})
	DMember(float)                                     RightAngle                                                  OFFSET(get<float>, {0xA6C, 4, 0, 0})
	DMember(float)                                     LeftAngle                                                   OFFSET(get<float>, {0xA70, 4, 0, 0})
	DMember(float)                                     FootAngledAmountForSlopes                                   OFFSET(get<float>, {0xA74, 4, 0, 0})
	DMember(float)                                     CombatWalkForwardSpeed                                      OFFSET(get<float>, {0xA78, 4, 0, 0})
	DMember(float)                                     CombatWalkForwardDistance                                   OFFSET(get<float>, {0xA7C, 4, 0, 0})
	DMember(float)                                     CombatWalkBackwardSpeed                                     OFFSET(get<float>, {0xA80, 4, 0, 0})
	DMember(float)                                     CombatWalkBackwardDistance                                  OFFSET(get<float>, {0xA84, 4, 0, 0})
	DMember(float)                                     CombatWalkLeftSpeed                                         OFFSET(get<float>, {0xA88, 4, 0, 0})
	DMember(float)                                     CombatWalkLeftDistance                                      OFFSET(get<float>, {0xA8C, 4, 0, 0})
	DMember(float)                                     CombatWalkRightSpeed                                        OFFSET(get<float>, {0xA90, 4, 0, 0})
	DMember(float)                                     CombatWalkRightDistance                                     OFFSET(get<float>, {0xA94, 4, 0, 0})
};

/// Class /Script/Indiana.BrandDataAsset
/// Size: 0x00A8 (0x000038 - 0x0000E0)
class UBrandDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Image                                                       OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SmallBrandImage                                             OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         LargeTutorialImage                                          OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SmallTutorialImage                                          OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Class /Script/Indiana.BreakdownPopupWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UBreakdownPopupWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UTextBlockBase*)                     BreakdownItemsTextBox                                       OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             PartsImage                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTexture2D*)                         WeaponPartTexture                                           OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTexture2D*)                         ArmorPartTexture                                            OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.Brows
/// Size: 0x0018 (0x000038 - 0x000050)
class UBrows : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UTexture*)                           BrowsMask                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UTexture*)                           BrowsNormal                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     NormalIntensity                                             OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/Indiana.BTDecorator_IndianaConditional
/// Size: 0x0008 (0x000070 - 0x000078)
class UBTDecorator_IndianaConditional : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(EFlowAbortMode)                            AbortMode                                                   OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(EFlowAbortCondition)                       AbortCondition                                              OFFSET(get<T>, {0x71, 1, 0, 0})
};

/// Struct /Script/Indiana.CompositeConditionalElement
/// Size: 0x0010 (0x000000 - 0x000010)
class FCompositeConditionalElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UBTDecorator_IndianaConditional*)    Conditional                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(LogicalOperator)                           LogicalOperator                                             OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Con_Composite
/// Size: 0x0010 (0x000078 - 0x000088)
class UBT_Con_Composite : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FCompositeConditionalElement>)      Conditionals                                                OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Struct /Script/Indiana.AISelector_Location
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_Location : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AILocation                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsLocationValid
/// Size: 0x0010 (0x000078 - 0x000088)
class UBT_Con_General_IsLocationValid : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FAISelector_Location)                      LocationSelector                                            OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	DMember(float)                                     AbortDistanceThreshold                                      OFFSET(get<float>, {0x80, 4, 0, 0})
};

/// Class /Script/Indiana.BT_Con_Animation_ShouldFaceTargetBeforePlayback
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Animation_ShouldFaceTargetBeforePlayback : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Approach_IsTargetInConversation
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Approach_IsTargetInConversation : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Approach_IsInInterrogationRange
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Approach_IsInInterrogationRange : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_CompanionFollow_ShouldWait
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_CompanionFollow_ShouldWait : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(float)                                     TargetDistanceThreshold                                     OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     PlayerDistanceThreshold                                     OFFSET(get<float>, {0x7C, 4, 0, 0})
};

/// Class /Script/Indiana.BT_Con_CompanionFollow_IsFollowLocationValid
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_CompanionFollow_IsFollowLocationValid : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Cover_IsCoverType
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_Cover_IsCoverType : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(ECoverTypes)                               CoverType                                                   OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Con_Cover_WasInterrupted
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Cover_WasInterrupted : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Crouch_IsCrouchInPlace
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Crouch_IsCrouchInPlace : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Furniture_IsCurrentBehaviorState
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_Furniture_IsCurrentBehaviorState : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EFurnitureBehaviorState)                   FurnitureState                                              OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Con_Furniture_ShouldOrientToFurniture
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Furniture_ShouldOrientToFurniture : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Furniture_IsReserved
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Furniture_IsReserved : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Furniture_IsValid
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Furniture_IsValid : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/Indiana.AISelector_Actor
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_Actor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AIActor                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsSeen
/// Size: 0x0010 (0x000078 - 0x000088)
class UBT_Con_General_IsSeen : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	DMember(float)                                     SeenTime                                                    OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(bool)                                      bAllowGodVision                                             OFFSET(get<bool>, {0x84, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsAimingPossible
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_IsAimingPossible : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsFollowTargetValid
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_IsFollowTargetValid : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsFollower
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_IsFollower : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsOnRails
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_IsOnRails : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_HasEquippedWeapon
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_HasEquippedWeapon : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsInRange
/// Size: 0x0038 (0x000078 - 0x0000B0)
class UBT_Con_General_IsInRange : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FAISelector_Location)                      LocationSelector                                            OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(float)                                     MinRange                                                    OFFSET(get<float>, {0x88, 4, 0, 0})
	SMember(FAISelector_FValue)                        MinRangeSelector                                            OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x98, 4, 0, 0})
	SMember(FAISelector_FValue)                        MaxRangeSelector                                            OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	DMember(float)                                     AcceptableHalfHeightDifference                              OFFSET(get<float>, {0xA8, 4, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_CanMoveCloserOnRails
/// Size: 0x0018 (0x000078 - 0x000090)
class UBT_Con_General_CanMoveCloserOnRails : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FAISelector_Location)                      LocationSelector                                            OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(float)                                     MinTravelDistance                                           OFFSET(get<float>, {0x88, 4, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_ClosestVantageIsInRange
/// Size: 0x0030 (0x000078 - 0x0000A8)
class UBT_Con_General_ClosestVantageIsInRange : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FAISelector_Location)                      LocationSelector                                            OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(float)                                     MinRange                                                    OFFSET(get<float>, {0x88, 4, 0, 0})
	SMember(FAISelector_FValue)                        MinRangeSelector                                            OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x98, 4, 0, 0})
	SMember(FAISelector_FValue)                        MaxRangeSelector                                            OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsFacingTarget
/// Size: 0x0018 (0x000078 - 0x000090)
class UBT_Con_General_IsFacingTarget : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(float)                                     MaxAngle                                                    OFFSET(get<float>, {0x78, 4, 0, 0})
	SMember(FAISelector_FValue)                        MaxAngleSelector                                            OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(bool)                                      bClampMaxAngleToInitiationThreshold                         OFFSET(get<bool>, {0x88, 1, 0, 0})
};

/// Struct /Script/Indiana.AISelector_Bool
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_Bool : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AIBool                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_CheckBooleanSelector
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_CheckBooleanSelector : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Bool)                          BooleanSelector                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsTimeSinceBehaviorState
/// Size: 0x0010 (0x000078 - 0x000088)
class UBT_Con_General_IsTimeSinceBehaviorState : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(EBehaviorState)                            BehaviorState                                               OFFSET(get<T>, {0x78, 1, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x79, 1, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x7C, 4, 0, 0})
	SMember(FAISelector_FValue)                        TimeSelector                                                OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_TestContinuousSeenTime
/// Size: 0x0010 (0x000078 - 0x000088)
class UBT_Con_General_TestContinuousSeenTime : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	DMember(float)                                     Threshold                                                   OFFSET(get<float>, {0x80, 4, 0, 0})
	CMember(ComparisonOperator)                        ComparisonOp                                                OFFSET(get<T>, {0x84, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsBehaviorStateComplete
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_IsBehaviorStateComplete : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EBehaviorStateCompletionType)              CompletionType                                              OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_WithInDistance
/// Size: 0x0018 (0x000078 - 0x000090)
class UBT_Con_General_WithInDistance : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FAISelector_Location)                      StartLocation                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FAISelector_Location)                      EndLocation                                                 OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0x88, 4, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsInPlayerConversation
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_General_IsInPlayerConversation : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_General_IsValidHealTarget
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_IsValidHealTarget : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsPrimaryTargetStimulusType
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_IsPrimaryTargetStimulusType : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EStimulusType)                             StimulusType                                                OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_Random
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_Random : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_FValue)                        RandomValueSelector                                         OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsAlertStateTimeRemainingEstimateGreaterThan
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_IsAlertStateTimeRemainingEstimateGreaterThan : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_FValue)                        TimeRemainingThresholdSelector                              OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_WantsNonBehaviorCrouch
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_General_WantsNonBehaviorCrouch : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_General_Dot
/// Size: 0x0028 (0x000078 - 0x0000A0)
class UBT_Con_General_Dot : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FAISelector_Location)                      StartLinePointA                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FAISelector_Location)                      EndLinePointA                                               OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FAISelector_Location)                      StartLinePointB                                             OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	SMember(FAISelector_Location)                      EndLinePointB                                               OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	DMember(float)                                     Dot                                                         OFFSET(get<float>, {0x98, 4, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_HasVantageOnActor
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_HasVantageOnActor : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_SimpleIsSeen
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_General_SimpleIsSeen : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Con_General_IsCreatureType
/// Size: 0x0028 (0x000078 - 0x0000A0)
class UBT_Con_General_IsCreatureType : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FGameplayTagContainer)                     CreatureTypes                                               OFFSET(getStruct<T>, {0x80, 32, 0, 0})
};

/// Class /Script/Indiana.BT_Con_Jump_ShouldRotateToFaceJumpDirection
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Jump_ShouldRotateToFaceJumpDirection : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Jump_IsJumpInPlace
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Jump_IsJumpInPlace : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Jump_IsIntroAnimationComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Jump_IsIntroAnimationComplete : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Jump_IsOutroAnimationComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Jump_IsOutroAnimationComplete : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Melee_IsSlottingState
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_Melee_IsSlottingState : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EAttackerSlottingState)                    State                                                       OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Con_Melee_IsRecoveryType
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Con_Melee_IsRecoveryType : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EMeleeRecoveryType)                        RecoveryType                                                OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Con_Melee_IsDodgeRecoveryPossible
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Melee_IsDodgeRecoveryPossible : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_MoveTo_ShouldWaitAfterArrival
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_MoveTo_ShouldWaitAfterArrival : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Patrol_IsPatrolNodeValid
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Patrol_IsPatrolNodeValid : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Patrol_HasPatrolNodeAction
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Patrol_HasPatrolNodeAction : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Patrol_IsBeyondRotate
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Patrol_IsBeyondRotate : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Patrol_OrientOnArrival
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Patrol_OrientOnArrival : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Con_Search_ShouldMoveDirectlyToTarget
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Con_Search_ShouldMoveDirectlyToTarget : public UBTDecorator_IndianaConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTDecorator_IndianaScript
/// Size: 0x0008 (0x000070 - 0x000078)
class UBTDecorator_IndianaScript : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(EAIScriptExecutionType)                    ScriptExecutionType                                         OFFSET(get<T>, {0x70, 1, 0, 0})
};

/// Class /Script/Indiana.BTDecorator_IndianaToggleScript
/// Size: 0x0000 (0x000070 - 0x000070)
class UBTDecorator_IndianaToggleScript : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_SetMovementState
/// Size: 0x0010 (0x000070 - 0x000080)
class UBT_Scr_SetMovementState : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	CMember(EAIMovementState)                          MovementState                                               OFFSET(get<T>, {0x78, 1, 0, 0})
	DMember(bool)                                      bUseDisabledMovementState                                   OFFSET(get<bool>, {0x79, 1, 0, 0})
	CMember(EAIMovementState)                          DisabledMovementState                                       OFFSET(get<T>, {0x7A, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_SetMovementState_Distance
/// Size: 0x0018 (0x000080 - 0x000098)
class UBT_Scr_SetMovementState_Distance : public UBT_Scr_SetMovementState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FAISelector_Location)                      LocationSelector                                            OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	SMember(FAISelector_FValue)                        DistanceThresholdSelector                                   OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_Approach_Interrogate
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Approach_Interrogate : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Approach_SetApproaching
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_Approach_SetApproaching : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_CalledShot_CameraStep
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Scr_CalledShot_CameraStep : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(ECalledShotCameraStep)                     CameraStep                                                  OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_CalledShot_Teleport
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_CalledShot_Teleport : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Cover_IncrementCoverUseCounter
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Cover_IncrementCoverUseCounter : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Cover_SetCoverType
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_Cover_SetCoverType : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_Cover_ClearInterrupted
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Cover_ClearInterrupted : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Crouch_UpdatePrematureExit
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Crouch_UpdatePrematureExit : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Flank_ForceTargetOverride
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Flank_ForceTargetOverride : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Follow_ClearTeleportFlag
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Follow_ClearTeleportFlag : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_SetFurniture
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_Furniture_SetFurniture : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_SetConversationWaitState
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_Furniture_SetConversationWaitState : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_TransitionState
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Furniture_TransitionState : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_AttemptToReserve
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Furniture_AttemptToReserve : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Furniture_ForceInterest
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Furniture_ForceInterest : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_General_SetAnimationParameter
/// Size: 0x0008 (0x000070 - 0x000078)
class UBT_Scr_General_SetAnimationParameter : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(EAIAnimationParameter)                     Parameter                                                   OFFSET(get<T>, {0x70, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_LockAIState
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_LockAIState : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_RequestPrimaryTarget
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Scr_General_RequestPrimaryTarget : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(ETargetRequestType)                        RequestType                                                 OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_PromoteQueuedToPrimaryTarget
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_General_PromoteQueuedToPrimaryTarget : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_General_ClearStimulus
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_General_ClearStimulus : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_General_SetBehaviorStateComplete
/// Size: 0x0010 (0x000078 - 0x000088)
class UBT_Scr_General_SetBehaviorStateComplete : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	CMember(EBehaviorStateCompletionType)              CompletionType                                              OFFSET(get<T>, {0x80, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_TriggerChatterEvent
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Scr_General_TriggerChatterEvent : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EChatterEventType)                         Event                                                       OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_ClearTargetDetection
/// Size: 0x0010 (0x000078 - 0x000088)
class UBT_Scr_General_ClearTargetDetection : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	DMember(bool)                                      bClearDetectionOfCompanionAndPlayer                         OFFSET(get<bool>, {0x80, 1, 0, 0})
	DMember(float)                                     MinDistanceToPlayer                                         OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_CancelCompanionCommandAttack
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Scr_General_CancelCompanionCommandAttack : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_ChangeCapsuleRadius
/// Size: 0x0008 (0x000070 - 0x000078)
class UBT_Scr_General_ChangeCapsuleRadius : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(float)                                     RadiusScalar                                                OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_SetCanBump
/// Size: 0x0008 (0x000070 - 0x000078)
class UBT_Scr_General_SetCanBump : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x70, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_LockAllRotations
/// Size: 0x0008 (0x000070 - 0x000078)
class UBT_Scr_General_LockAllRotations : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x70, 8, 0, 0})
};

/// Struct /Script/Indiana.AISelector_Int
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_Int : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AIInt                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_SwitchContext
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Scr_General_SwitchContext : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Int)                           ContextSelector                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_Crouch
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_Crouch : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_StartBehaviorStateCountdown
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Scr_General_StartBehaviorStateCountdown : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_FValue)                        CountDownTimeSelector                                       OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_TurnOffCharacterCollisionToggle
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_TurnOffCharacterCollisionToggle : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_TurnOffMesh
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_TurnOffMesh : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_EnableContinousMovement
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_EnableContinousMovement : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_Teleport
/// Size: 0x0010 (0x000078 - 0x000088)
class UBT_Scr_General_Teleport : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FAISelector_Location)                      TeleportLocationSelector                                    OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FAISelector_FValue)                        TeleportRotationSelector                                    OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_EnableGodVision
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_EnableGodVision : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_SetAlertStateMinDuration
/// Size: 0x0008 (0x000078 - 0x000080)
class UBT_Scr_General_SetAlertStateMinDuration : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_FValue)                        MinDurationSelector                                         OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_RegisterAreaRange
/// Size: 0x0008 (0x000070 - 0x000078)
class UBT_Scr_General_RegisterAreaRange : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FAISelector_Location)                      LocationSelector                                            OFFSET(getStruct<T>, {0x70, 8, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_SetBehaviorNavigationSettings
/// Size: 0x0010 (0x000070 - 0x000080)
class UBT_Scr_General_SetBehaviorNavigationSettings : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	DMember(bool)                                      bCanOpenDoors                                               OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bCanPathThroughHazards                                      OFFSET(get<bool>, {0x79, 1, 0, 0})
	DMember(bool)                                      bCanPathThroughTraps                                        OFFSET(get<bool>, {0x7A, 1, 0, 0})
	DMember(bool)                                      bCanPathThroughMines                                        OFFSET(get<bool>, {0x7B, 1, 0, 0})
	DMember(bool)                                      bCanJump                                                    OFFSET(get<bool>, {0x7C, 1, 0, 0})
	DMember(bool)                                      bCanCrouch                                                  OFFSET(get<bool>, {0x7D, 1, 0, 0})
	DMember(bool)                                      bCanUseLadders                                              OFFSET(get<bool>, {0x7E, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_SetOverrideBehaviorAnimation
/// Size: 0x0008 (0x000070 - 0x000078)
class UBT_Scr_General_SetOverrideBehaviorAnimation : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(EAnimTreeState)                            AnimState                                                   OFFSET(get<T>, {0x70, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_SetArcing
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_SetArcing : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_SetTogglableAction
/// Size: 0x0010 (0x000070 - 0x000080)
class UBT_Scr_General_SetTogglableAction : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	CMember(ETogglableAction)                          TogglableAction                                             OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BT_Scr_General_ToggleMovementOptimizations
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_ToggleMovementOptimizations : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_DisableNavWalking
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_DisableNavWalking : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_SetCowering
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_SetCowering : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_Mute
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_Mute : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_General_DisableRelavancy
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_General_DisableRelavancy : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_Investigate_NotifyPreMoveWaitCompleted
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Investigate_NotifyPreMoveWaitCompleted : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Investigate_EndWaitExit
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Investigate_EndWaitExit : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Jump_SetAnimationJumpFlag
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_Jump_SetAnimationJumpFlag : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_Jump_LaunchJump
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Jump_LaunchJump : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Jump_SetJumpGravity
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_Jump_SetJumpGravity : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_Melee_IncrementPattern
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Melee_IncrementPattern : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BT_Scr_Melee_SetIsAttacking
/// Size: 0x0000 (0x000070 - 0x000070)
class UBT_Scr_Melee_SetIsAttacking : public UBTDecorator_IndianaToggleScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.BT_Scr_Patrol_SetBehaviorStateComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBT_Scr_Patrol_SetBehaviorStateComplete : public UBTDecorator_IndianaScript
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_IndianaBase
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_IndianaBase : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_Chatter
/// Size: 0x0008 (0x000078 - 0x000080)
class UBTService_Chatter : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EChatterEventType)                         ChatterEventType                                            OFFSET(get<T>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BTService_EventFirer_TargetLostCover
/// Size: 0x0010 (0x000078 - 0x000088)
class UBTService_EventFirer_TargetLostCover : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FAISelector_FValue)                        InitiallySeenTargetLostTimeSelector                         OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FAISelector_FValue)                        InitiallyUnseenTargetLostTimeSelector                       OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Class /Script/Indiana.BTService_EventFirer_TargetLostRanged
/// Size: 0x0020 (0x000078 - 0x000098)
class UBTService_EventFirer_TargetLostRanged : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FAISelector_FValue)                        InitiallySeenTargetLostTimeSelector                         OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FAISelector_FValue)                        InitiallyUnseenTargetLostTimeSelector                       OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	CMember(ETargetLostResponse)                       TargetLostResponse                                          OFFSET(get<T>, {0x90, 1, 0, 0})
	DMember(bool)                                      bDynamicEnabled                                             OFFSET(get<bool>, {0x91, 1, 0, 0})
};

/// Class /Script/Indiana.BTService_EventFirer_UnsafeCover
/// Size: 0x0020 (0x000078 - 0x000098)
class UBTService_EventFirer_UnsafeCover : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(float)                                     RequiredUnsafeTime                                          OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(bool)                                      bCheckFireAngle                                             OFFSET(get<bool>, {0x7C, 1, 0, 0})
	SMember(FAISelector_Location)                      LocationSelector                                            OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(float)                                     UnsafeRadius                                                OFFSET(get<float>, {0x88, 4, 0, 0})
	SMember(FAISelector_Location)                      UnsafeRadiusTarget                                          OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Indiana.BTService_EventFirer_UnsafeOccupiedCover
/// Size: 0x0008 (0x000078 - 0x000080)
class UBTService_EventFirer_UnsafeOccupiedCover : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(float)                                     RequiredUnsafeTime                                          OFFSET(get<float>, {0x78, 4, 0, 0})
};

/// Class /Script/Indiana.BTService_EventFirer_SuspiciousComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_SuspiciousComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_InvestigateComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_InvestigateComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_DeactivatedComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_DeactivatedComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_ApproachComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_ApproachComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_RetreatComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_RetreatComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_CompanionFollowComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_CompanionFollowComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/Indiana.AISelector_UObject
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_UObject : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             Object                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BTService_EventFirer_SEComplete
/// Size: 0x0008 (0x000078 - 0x000080)
class UBTService_EventFirer_SEComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_UObject)                       DisableStatusEffectSelector                                 OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BTService_EventFirer_InvalidSearch
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_InvalidSearch : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_SearchComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_SearchComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_SearchTargetLost
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_SearchTargetLost : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_ConversationComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_ConversationComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_InvalidMelee
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_InvalidMelee : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_MeleeWait
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_MeleeWait : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_BlockedLOS
/// Size: 0x0008 (0x000078 - 0x000080)
class UBTService_EventFirer_BlockedLOS : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(bool)                                      bUsingCover                                                 OFFSET(get<bool>, {0x78, 1, 0, 0})
};

/// Class /Script/Indiana.BTService_EventFirer_IsNotSeen
/// Size: 0x0008 (0x000078 - 0x000080)
class UBTService_EventFirer_IsNotSeen : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BTService_EventFirer_TargetOutsideMaxAbsoluteRange
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_TargetOutsideMaxAbsoluteRange : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_CCMoveToEnterCombatMode
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_CCMoveToEnterCombatMode : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_CowerComplete
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventFirer_CowerComplete : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_EventFirer_Generic
/// Size: 0x0008 (0x000078 - 0x000080)
class UBTService_EventFirer_Generic : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FGameplayTag)                              GameplayTag                                                 OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BTService_EventReload_InCover
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_EventReload_InCover : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_TeammateKilled_InCombat
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_TeammateKilled_InCombat : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_WatchKilledTeammate_InCombat
/// Size: 0x0008 (0x000078 - 0x000080)
class UBTService_WatchKilledTeammate_InCombat : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Struct /Script/Indiana.AISelector_FiringPattern
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_FiringPattern : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AIFiringPattern                                             OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BTService_General_FiringPattern
/// Size: 0x0048 (0x000078 - 0x0000C0)
class UBTService_General_FiringPattern : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FAISelector_FiringPattern)                 FiringPatternSelector                                       OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FAISelector_Bool)                          ScopedEnabled                                               OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	SMember(FAISelector_FValue)                        PrePauseTimeSelector                                        OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FAISelector_FValue)                        SuppressionTimeSelector                                     OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FAISelector_FValue)                        PauseTimeFuzzSelector                                       OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	SMember(FAISelector_Int)                           CompleteTypeSelector                                        OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	DMember(bool)                                      bDynamicEnabled                                             OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(bool)                                      bForceFire                                                  OFFSET(get<bool>, {0xB1, 1, 0, 0})
	DMember(bool)                                      bSaveProgress                                               OFFSET(get<bool>, {0xB2, 1, 0, 0})
	DMember(bool)                                      bCalledShot                                                 OFFSET(get<bool>, {0xB3, 1, 0, 0})
	SMember(FAISelector_Int)                           CalledShotFireIndexSelector                                 OFFSET(getStruct<T>, {0xB8, 8, 0, 0})
};

/// Class /Script/Indiana.BTService_General_FocusAt
/// Size: 0x0060 (0x000078 - 0x0000D8)
class UBTService_General_FocusAt : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(bool)                                      bIsMoving                                                   OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bAutoComputeMoving                                          OFFSET(get<bool>, {0x79, 1, 0, 0})
	DMember(bool)                                      bForceBodyRotation                                          OFFSET(get<bool>, {0x7A, 1, 0, 0})
	SMember(FAISelector_Location)                      HeadTargetSelector                                          OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FAISelector_Actor)                         HeadTargetActorSelector                                     OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	SMember(FAISelector_Location)                      BodyTargetSelector                                          OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FAISelector_Actor)                         BodyTargetActorSelector                                     OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FAISelector_Location)                      EyesTargetSelector                                          OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	SMember(FAISelector_Actor)                         EyesTargetActorSelector                                     OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	SMember(FAISelector_Location)                      WeaponAimTargetSelector                                     OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	SMember(FAISelector_Actor)                         WeaponAimTargetActorSelector                                OFFSET(getStruct<T>, {0xB8, 8, 0, 0})
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0xC0, 8, 0, 0})
	SMember(FAISelector_Bool)                          ShouldExitCondition                                         OFFSET(getStruct<T>, {0xC8, 8, 0, 0})
	DMember(bool)                                      bSetShouldExitRegion                                        OFFSET(get<bool>, {0xD0, 1, 0, 0})
};

/// Class /Script/Indiana.BTService_RequestPrimaryTarget
/// Size: 0x0010 (0x000078 - 0x000088)
class UBTService_RequestPrimaryTarget : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FAISelector_Bool)                          EnabledSelector                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	CMember(ETargetRequestType)                        RequestType                                                 OFFSET(get<T>, {0x80, 1, 0, 0})
	DMember(float)                                     RequestInterval                                             OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Class /Script/Indiana.BTService_Search_Chatter
/// Size: 0x0000 (0x000080 - 0x000080)
class UBTService_Search_Chatter : public UBTService_Chatter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.BTService_Search_UpdateFire
/// Size: 0x0000 (0x000078 - 0x000078)
class UBTService_Search_UpdateFire : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BTService_SpellTargetService
/// Size: 0x0008 (0x000078 - 0x000080)
class UBTService_SpellTargetService : public UBTService_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FAISelector_Actor)                         Target                                                      OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_IndianaBase
/// Size: 0x0018 (0x000078 - 0x000090)
class UBTTask_IndianaBase : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bInstant                                                    OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bNotifyRestore                                              OFFSET(get<bool>, {0x7C, 1, 1, 0})
	SMember(FGuid)                                     SaveGameTaskGuid                                            OFFSET(getStruct<T>, {0x80, 16, 0, 0})
};

/// Class /Script/Indiana.BTTask_Block
/// Size: 0x0010 (0x000090 - 0x0000A0)
class UBTTask_Block : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(float)                                     DefaultBlockTime                                            OFFSET(get<float>, {0x90, 4, 0, 0})
	SMember(FAISelector_FValue)                        Delay                                                       OFFSET(getStruct<T>, {0x98, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_Death
/// Size: 0x0000 (0x000090 - 0x000090)
class UBTTask_Death : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/Indiana.BTTask_Disable
/// Size: 0x0078 (0x000090 - 0x000108)
class UBTTask_Disable : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FAISelector_UObject)                       DisableStatusEffectSelector                                 OFFSET(getStruct<T>, {0xE0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.BTTask_Disable.OnRagdollComplete
	// void OnRagdollComplete(class UStatusEffect* StatusEffect);                                                               // [0x17c4fe0] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnPushComplete
	// void OnPushComplete(class UStatusEffect* StatusEffect);                                                                  // [0x17c4f50] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnMontageBlendingOut
	// void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);                                               // [0x17c4e80] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnIdleFinished
	// void OnIdleFinished(class UStatusEffect* StatusEffect);                                                                  // [0x17c4df0] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnFreezeComplete
	// void OnFreezeComplete(class UStatusEffect* StatusEffect);                                                                // [0x17c4d60] Final|Native|Protected 
	// Function /Script/Indiana.BTTask_Disable.OnDisableFinished
	// void OnDisableFinished(class UStatusEffect* StatusEffect);                                                               // [0x17c4cd0] Final|Native|Protected 
};

/// Class /Script/Indiana.BTTask_Dodge
/// Size: 0x0008 (0x000090 - 0x000098)
class UBTTask_Dodge : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FAISelector_Int)                           DodgeDirection                                              OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_Indiana_PlayAnimation
/// Size: 0x0028 (0x000090 - 0x0000B8)
class UBTTask_Indiana_PlayAnimation : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FAISelector_UObject)                       AnimationToPlay                                             OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x98, 1, 0, 0})
	SMember(FAISelector_Bool)                          LoopCondition                                               OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	DMember(bool)                                      bAnimationOptional                                          OFFSET(get<bool>, {0xA8, 1, 0, 0})
	DMember(float)                                     MinPlayRate                                                 OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     MaxPlayRate                                                 OFFSET(get<float>, {0xB0, 4, 0, 0})
};

/// Struct /Script/Indiana.AISelector_BoolWriteable
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_BoolWriteable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AIBool                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_IndianaMoveTo
/// Size: 0x0038 (0x000090 - 0x0000C8)
class UBTTask_IndianaMoveTo : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FAISelector_Location)                      LocationSelector                                            OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	CMember(EMoveToResultResponse)                     BlockedResponse                                             OFFSET(get<T>, {0xA0, 1, 0, 0})
	CMember(EMoveToResultResponse)                     FailResponse                                                OFFSET(get<T>, {0xA1, 1, 0, 0})
	CMember(EMoveToResultResponse)                     PartialPathResponse                                         OFFSET(get<T>, {0xA2, 1, 0, 0})
	DMember(float)                                     AcceptableRadius                                            OFFSET(get<float>, {0xA4, 4, 0, 0})
	SMember(FAISelector_FValue)                        AcceptableRadiusSelector                                    OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	SMember(FAISelector_BoolWriteable)                 IsMoveToSuccessful                                          OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	CMember(class UClass*)                             FilterClass                                                 OFFSET(get<T>, {0xB8, 8, 0, 0})
	DMember(bool)                                      bAllowStrafe                                                OFFSET(get<bool>, {0xC0, 1, 1, 0})
	DMember(bool)                                      bAllowPartialPath                                           OFFSET(get<bool>, {0xC0, 1, 1, 1})
	DMember(bool)                                      bTrackMovingGoal                                            OFFSET(get<bool>, {0xC0, 1, 1, 2})
	DMember(bool)                                      bProjectGoalLocation                                        OFFSET(get<bool>, {0xC0, 1, 1, 3})
	DMember(bool)                                      bStopOnOverlap                                              OFFSET(get<bool>, {0xC0, 1, 1, 4})
	DMember(bool)                                      bUsePathfinding                                             OFFSET(get<bool>, {0xC0, 1, 1, 5})
	DMember(bool)                                      bCompletionRequiresDirectPath                               OFFSET(get<bool>, {0xC0, 1, 1, 6})
	DMember(bool)                                      bThrowPartialPathError                                      OFFSET(get<bool>, {0xC0, 1, 1, 7})
};

/// Class /Script/Indiana.BTTask_IndianaDirectMoveTo
/// Size: 0x0008 (0x0000C8 - 0x0000D0)
class UBTTask_IndianaDirectMoveTo : public UBTTask_IndianaMoveTo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	DMember(bool)                                      bAcceptOvershoot                                            OFFSET(get<bool>, {0xC8, 1, 1, 0})
	DMember(float)                                     OvershootAcceptableRadius                                   OFFSET(get<float>, {0xCC, 4, 0, 0})
};

/// Struct /Script/Indiana.AISelector_ActorWritable
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_ActorWritable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AIActor                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Indiana.AISelector_LocationWritable
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_LocationWritable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AILocation                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_IndianaRunEQSQuery
/// Size: 0x0030 (0x000090 - 0x0000C0)
class UBTTask_IndianaRunEQSQuery : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UEQSRequest_IndianaBase*)            EQSRequest                                                  OFFSET(get<T>, {0x90, 8, 0, 0})
	SMember(FAISelector_ActorWritable)                 ActorSelector                                               OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FAISelector_LocationWritable)              LocationSelector                                            OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	SMember(FAISelector_UObject)                       EQSSelector                                                 OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_IndianaWait
/// Size: 0x0018 (0x000090 - 0x0000A8)
class UBTTask_IndianaWait : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(float)                                     WaitTime                                                    OFFSET(get<float>, {0x90, 4, 0, 0})
	SMember(FAISelector_FValue)                        WaitTimeSelector                                            OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FAISelector_Bool)                          WaitExitConditionSelector                                   OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_MeleeAttack
/// Size: 0x0030 (0x000090 - 0x0000C0)
class UBTTask_MeleeAttack : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FAISelector_Int)                           MeleeActionSelector                                         OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FAISelector_Bool)                          UseAdaptiveRootMotionSelector                               OFFSET(getStruct<T>, {0x98, 8, 0, 0})
	SMember(FAISelector_FValue)                        AdapativeRootMotionMinDistanceSelector                      OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	DMember(bool)                                      bAdaptiveRootMotionLimitRangeOnly                           OFFSET(get<bool>, {0xA8, 1, 0, 0})
	SMember(FAISelector_FValue)                        RecoveryTimeSelector                                        OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	DMember(bool)                                      bCalledShot                                                 OFFSET(get<bool>, {0xB8, 1, 0, 0})
};

/// Struct /Script/Indiana.AISelector_Action
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_Action : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             AIAction                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_RunActions
/// Size: 0x0010 (0x000090 - 0x0000A0)
class UBTTask_RunActions : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FAISelector_Action)                        ActionSelector                                              OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FAISelector_Bool)                          InfiniteDurationSelector                                    OFFSET(getStruct<T>, {0x98, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_RunRandomEQSQuery
/// Size: 0x0008 (0x0000C0 - 0x0000C8)
class UBTTask_RunRandomEQSQuery : public UBTTask_IndianaRunEQSQuery
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(class URandomQuerySet*)                    RandomQuerySet                                              OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_Script
/// Size: 0x0000 (0x000090 - 0x000090)
class UBTTask_Script : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/Indiana.BTTask_SwitchWeapon
/// Size: 0x0010 (0x000090 - 0x0000A0)
class UBTTask_SwitchWeapon : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FAISelector_Bool)                          InstantSelector                                             OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	SMember(FAISelector_Int)                           WeaponSlotSelector                                          OFFSET(getStruct<T>, {0x98, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_TriggerPatrolNodeEvent
/// Size: 0x0008 (0x000090 - 0x000098)
class UBTTask_TriggerPatrolNodeEvent : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FAISelector_Actor)                         ActorSelector                                               OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Indiana.BTTask_UseCover
/// Size: 0x0000 (0x000090 - 0x000090)
class UBTTask_UseCover : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/Indiana.BTTask_UseFurniture
/// Size: 0x0000 (0x000090 - 0x000090)
class UBTTask_UseFurniture : public UBTTask_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Struct /Script/Indiana.SlateBrushContainer
/// Size: 0x0090 (0x000000 - 0x000090)
class FSlateBrushContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class USlateBrushAsset*)                   BrushAsset                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x8, 136, 0, 0})
};

/// Struct /Script/Indiana.SizeConstraint
/// Size: 0x0014 (0x000000 - 0x000014)
class FSizeConstraint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bUseBrushAsMinSize                                          OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bUseSnap                                                    OFFSET(get<bool>, {0x2, 1, 0, 0})
	SMember(FVector2D)                                 Minimum                                                     OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	SMember(FVector2D)                                 Snap                                                        OFFSET(getStruct<T>, {0xC, 8, 0, 0})
};

/// Struct /Script/Indiana.IndianaTextBlockStyle
/// Size: 0x0010 (0x000278 - 0x000288)
class FIndianaTextBlockStyle : public FTextBlockStyle
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(class USlateWidgetStyleAsset*)             ImportAsset                                                 OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(EIndianaUIColorType)                       ColorOverride                                               OFFSET(get<T>, {0x280, 1, 0, 0})
};

/// Struct /Script/Indiana.IndianaButtonStyle
/// Size: 0x0820 (0x000008 - 0x000828)
class FIndianaButtonStyle : public FSlateWidgetStyle
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2088;

public:
	SMember(FSlateBrushContainer)                      NormalBrush                                                 OFFSET(getStruct<T>, {0x8, 144, 0, 0})
	SMember(FSlateBrushContainer)                      HoveredBrush                                                OFFSET(getStruct<T>, {0x98, 144, 0, 0})
	SMember(FSlateBrushContainer)                      PressedBrush                                                OFFSET(getStruct<T>, {0x128, 144, 0, 0})
	SMember(FSlateBrushContainer)                      FocusedBrush                                                OFFSET(getStruct<T>, {0x1B8, 144, 0, 0})
	SMember(FSlateBrushContainer)                      SelectedNormalBrush                                         OFFSET(getStruct<T>, {0x248, 144, 0, 0})
	SMember(FSlateBrushContainer)                      SelectedHoveredBrush                                        OFFSET(getStruct<T>, {0x2D8, 144, 0, 0})
	SMember(FSlateBrushContainer)                      SelectedPressedBrush                                        OFFSET(getStruct<T>, {0x368, 144, 0, 0})
	SMember(FSlateBrushContainer)                      SelectedFocusedBrush                                        OFFSET(getStruct<T>, {0x3F8, 144, 0, 0})
	SMember(FSlateBrushContainer)                      DisabledBrush                                               OFFSET(getStruct<T>, {0x488, 144, 0, 0})
	SMember(FLinearColor)                              ContentColor                                                OFFSET(getStruct<T>, {0x518, 16, 0, 0})
	SMember(FLinearColor)                              ButtonColor                                                 OFFSET(getStruct<T>, {0x528, 16, 0, 0})
	SMember(FMargin)                                   NormalPadding                                               OFFSET(getStruct<T>, {0x538, 16, 0, 0})
	SMember(FMargin)                                   PressedPadding                                              OFFSET(getStruct<T>, {0x548, 16, 0, 0})
	SMember(FSizeConstraint)                           SizeConstraints                                             OFFSET(getStruct<T>, {0x558, 20, 0, 0})
	SMember(FIndianaTextBlockStyle)                    TextBlockStyle                                              OFFSET(getStruct<T>, {0x570, 648, 0, 0})
	CMember(class UAkAudioEvent*)                      PressedSoundOverride                                        OFFSET(get<T>, {0x7F8, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      HoveredSoundOverride                                        OFFSET(get<T>, {0x800, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      FocusedSoundOverride                                        OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      SelectedPressedSoundOverride                                OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      SelectedHoveredSoundOverride                                OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      SelectedFocusedSoundOverride                                OFFSET(get<T>, {0x820, 8, 0, 0})
};

/// Class /Script/Indiana.ButtonBase
/// Size: 0x0A60 (0x000138 - 0x000B98)
class UButtonBase : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2968;

public:
	CMember(class UClass*)                             ToolTipClass                                                OFFSET(get<T>, {0x158, 8, 0, 0})
	SMember(FLocString)                                TextReference                                               OFFSET(getStruct<T>, {0x160, 8, 0, 0})
	CMember(EButtonType)                               ButtonType                                                  OFFSET(get<T>, {0x168, 1, 0, 0})
	DMember(bool)                                      bClickEnabled                                               OFFSET(get<bool>, {0x169, 1, 0, 0})
	DMember(bool)                                      bSelected                                                   OFFSET(get<bool>, {0x16A, 1, 0, 0})
	DMember(bool)                                      IsFocusable                                                 OFFSET(get<bool>, {0x16B, 1, 0, 0})
	DMember(bool)                                      bAllowSelectionStateChange                                  OFFSET(get<bool>, {0x16C, 1, 0, 0})
	DMember(bool)                                      bCanActivateByKey                                           OFFSET(get<bool>, {0x16D, 1, 0, 0})
	DMember(bool)                                      bProcessDoubleClickAsClick                                  OFFSET(get<bool>, {0x16E, 1, 0, 0})
	CMember(TEnumAsByte<EButtonClickMethod>)           ClickMethod                                                 OFFSET(get<T>, {0x16F, 1, 0, 0})
	CMember(TEnumAsByte<EButtonTouchMethod>)           TouchMethod                                                 OFFSET(get<T>, {0x170, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHoveredMCD                                                OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPressedMCD                                                OFFSET(getStruct<T>, {0x188, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReleasedMCD                                               OFFSET(getStruct<T>, {0x198, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnClickedMCD                                                OFFSET(getStruct<T>, {0x1A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDoubleClickedMCD                                          OFFSET(getStruct<T>, {0x1B8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUnhoveredMCD                                              OFFSET(getStruct<T>, {0x1C8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFocusLostMCD                                              OFFSET(getStruct<T>, {0x1D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFocusReceivedMCD                                          OFFSET(getStruct<T>, {0x1E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSelectedMCD                                               OFFSET(getStruct<T>, {0x1F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUnselectedMCD                                             OFFSET(getStruct<T>, {0x208, 16, 0, 0})
	SMember(FIndianaButtonStyle)                       WidgetStyle                                                 OFFSET(getStruct<T>, {0x218, 2088, 0, 0})
	SMember(FMargin)                                   HitTestMargin                                               OFFSET(getStruct<T>, {0xA40, 16, 0, 0})
	DMember(bool)                                      bCenterSweepHitTest                                         OFFSET(get<bool>, {0xA50, 1, 0, 0})
	CMember(class UTexture2D*)                         AdvancedHitTexture                                          OFFSET(get<T>, {0xA58, 8, 0, 0})
	DMember(int32_t)                                   AdvancedHitAlpha                                            OFFSET(get<int32_t>, {0xA60, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.ButtonBase.SetSelectedPressedBrush
	// void SetSelectedPressedBrush(FSlateBrush& InBrush);                                                                      // [0x17c5d90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetSelectedNormalBrush
	// void SetSelectedNormalBrush(FSlateBrush& InBrush);                                                                       // [0x17c5c70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetSelectedHoveredBrush
	// void SetSelectedHoveredBrush(FSlateBrush& InBrush);                                                                      // [0x17c5b50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetSelectedFocusedBrush
	// void SetSelectedFocusedBrush(FSlateBrush& InBrush);                                                                      // [0x17c5a30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetSelected
	// void SetSelected(bool bSelected, EFocusCause Cause);                                                                     // [0x17c5960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetPressedBrush
	// void SetPressedBrush(FSlateBrush& InBrush);                                                                              // [0x17c5840] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetNormalBrush
	// void SetNormalBrush(FSlateBrush& InBrush);                                                                               // [0x17c5720] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetHoveredBrush
	// void SetHoveredBrush(FSlateBrush& InBrush);                                                                              // [0x17c5600] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetFocusedBrush
	// void SetFocusedBrush(FSlateBrush& InBrush);                                                                              // [0x17c54e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetFocusable
	// void SetFocusable(bool bFocused);                                                                                        // [0x17c5450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetEnabled
	// void SetEnabled(bool bInEnabled);                                                                                        // [0x17c53c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetContentColor
	// void SetContentColor(FLinearColor InColorAndOpacity);                                                                    // [0x17c5330] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetButtonType
	// void SetButtonType(EButtonType TypeIn);                                                                                  // [0x17c52b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetButtonColor
	// void SetButtonColor(FLinearColor InBackgroundColor);                                                                     // [0x17c5220] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetAllowSelectionStateChange
	// void SetAllowSelectionStateChange(bool bAllowChange);                                                                    // [0x17c5190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetAdvancedHitTexture
	// void SetAdvancedHitTexture(class UTexture2D* InTexture);                                                                 // [0x17c5100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.SetAdvancedHitAlpha
	// void SetAdvancedHitAlpha(int32_t InAlpha);                                                                               // [0x17c5070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.IsSelected
	// bool IsSelected();                                                                                                       // [0x17c4ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ButtonBase.IsPressed
	// bool IsPressed();                                                                                                        // [0x17c4c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ButtonBase.GetSelectedPressedBrush
	// FSlateBrush GetSelectedPressedBrush();                                                                                   // [0x17c4c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetSelectedNormalBrush
	// FSlateBrush GetSelectedNormalBrush();                                                                                    // [0x17c4bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetSelectedHoveredBrush
	// FSlateBrush GetSelectedHoveredBrush();                                                                                   // [0x17c4bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetSelectedFocusedBrush
	// FSlateBrush GetSelectedFocusedBrush();                                                                                   // [0x17c4b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetPressedBrush
	// FSlateBrush GetPressedBrush();                                                                                           // [0x17c4b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetNormalBrush
	// FSlateBrush GetNormalBrush();                                                                                            // [0x17c4af0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetHoveredBrush
	// FSlateBrush GetHoveredBrush();                                                                                           // [0x17c4ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetFocusedBrush
	// FSlateBrush GetFocusedBrush();                                                                                           // [0x17c4a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBase.GetButtonType
	// EButtonType GetButtonType();                                                                                             // [0x17c4a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ButtonBase.AllowsSelectionStateChange
	// bool AllowsSelectionStateChange();                                                                                       // [0x17c4a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ButtonBaseContainerWidget
/// Size: 0x0038 (0x000278 - 0x0002B0)
class UButtonBaseContainerWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TextBlock                                                   OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UImage*)                             InterestIcon                                                OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class USizeBox*)                           ButtonSizeBox                                               OFFSET(get<T>, {0x290, 8, 0, 0})
	SMember(FLocString)                                TextReference                                               OFFSET(getStruct<T>, {0x298, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ButtonBaseContainerWidget.OnActivatableChange
	// void OnActivatableChange(bool bActivatable);                                                                             // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.ButtonBaseSlot
/// Size: 0x0028 (0x000040 - 0x000068)
class UButtonBaseSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x50, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x51, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.ButtonBaseSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x17caff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBaseSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x17caf60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ButtonBaseSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x17caee0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ButtonLedgerHeader
/// Size: 0x0000 (0x000B98 - 0x000B98)
class UButtonLedgerHeader : public UButtonBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2968;

public:
};

/// Class /Script/Indiana.IndianaButtonWidgetStyle
/// Size: 0x0828 (0x000038 - 0x000860)
class UIndianaButtonWidgetStyle : public USlateWidgetStyleContainerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2144;

public:
	SMember(FIndianaButtonStyle)                       ButtonStyle                                                 OFFSET(getStruct<T>, {0x38, 2088, 0, 0})
};

/// Class /Script/Indiana.CalledShotBehaviorStateInfo
/// Size: 0x00C8 (0x000178 - 0x000240)
class UCalledShotBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UEventListener*)                     ApplyEventListener                                          OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class UCalledShotData*)                    CalledShotData                                              OFFSET(get<T>, {0x180, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTreeEQSRequestData
/// Size: 0x0020 (0x000060 - 0x000080)
class UDecisionTreeEQSRequestData : public UBehaviorStateRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UEQSRequest_IndianaBase*)            EQSRequest                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<class UEQSRequest_IndianaBase*>)    BackupEQSRequests                                           OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(class UClass*)                             InfoType                                                    OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.CalledShotRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UCalledShotRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.CombatCameraComponent
/// Size: 0x0040 (0x0000E0 - 0x000120)
class UCombatCameraComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FMulticastInlineDelegate)                  OnCameraStarted                                             OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCameraEnded                                               OFFSET(getStruct<T>, {0xF8, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.CombatCameraComponent.EndCamera
	// void EndCamera();                                                                                                        // [0x17d8c60] Final|Native|Protected 
};

/// Class /Script/Indiana.CalledShotCameraComponent
/// Size: 0x0098 (0x000120 - 0x0001B8)
class UCalledShotCameraComponent : public UCombatCameraComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	DMember(float)                                     CloseRangeDistanceThreshold                                 OFFSET(get<float>, {0x134, 4, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           AttackerFarCameraAnimationClasses                           OFFSET(get<T>, {0x138, 16, 0, 0})
	DMember(float)                                     SmallTargetHalfHeightThreshold                              OFFSET(get<float>, {0x148, 4, 0, 0})
	CMember(TArray<class UCineCombatCameraParams*>)    AttackerAndTargetCloseCameras                               OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(TArray<class UCineCombatCameraParams*>)    AttackerAndTargetFarCameras                                 OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(TArray<class UCineCombatCameraParams*>)    AttackerCloseCameras                                        OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(TArray<class UCineCombatCameraParams*>)    AttackerFarCameras                                          OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(TArray<class UCineCombatCameraParams*>)    TargetCloseCameras                                          OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(TArray<class UCineCombatCameraParams*>)    TargetFarCameras                                            OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(class UClass*)                             ImpactCameraShake                                           OFFSET(get<T>, {0x1B0, 8, 0, 0})
};

/// Struct /Script/Indiana.TimeDilationData
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FTimeDilationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(ETimeDilationPriority)                     Priority                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ETimeDilationType)                         Type                                                        OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(float)                                     BlendTimeIn                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     BlendTimeOut                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     TimeDilationStatic                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        TimeDilationCurve                                           OFFSET(getStruct<T>, {0x10, 136, 0, 0})
};

/// Class /Script/Indiana.CalledShotData
/// Size: 0x0198 (0x000038 - 0x0001D0)
class UCalledShotData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(class UClass*)                             WeaponClass                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(EThirdPersonSocket)                        SocketToTarget                                              OFFSET(get<T>, {0x48, 1, 0, 0})
	DMember(float)                                     DamageScalar                                                OFFSET(get<float>, {0x4C, 4, 0, 0})
	CMember(class UTexture2D*)                         UIBackgroundAbilityIcon                                     OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UTexture2D*)                         UIAbilityIcon                                               OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(float)                                     TargetReactionTime                                          OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     TimeDilationDuration                                        OFFSET(get<float>, {0x64, 4, 0, 0})
	SMember(FTimeDilationData)                         TimeDilationData                                            OFFSET(getStruct<T>, {0x68, 168, 0, 0})
	CMember(class UClass*)                             AlternativeSpell                                            OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(EThirdPersonSocket)                        AlternativeSocketToTarget                                   OFFSET(get<T>, {0x118, 1, 0, 0})
	DMember(float)                                     AlternativeSpellProbability                                 OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     MaxMeleeDistance                                            OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(int32_t)                                   ShotCountBeforeCameraCut                                    OFFSET(get<int32_t>, {0x124, 4, 0, 0})
	DMember(float)                                     CameraCutDelay                                              OFFSET(get<float>, {0x128, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        SpreadRadiusVsDistanceCurve                                 OFFSET(getStruct<T>, {0x130, 136, 0, 0})
	SMember(FAISettings_FiringPattern)                 FiringPattern                                               OFFSET(getStruct<T>, {0x1B8, 24, 0, 0})
};

/// Class /Script/Indiana.CartInfoWidget
/// Size: 0x00B0 (0x000300 - 0x0003B0)
class UCartInfoWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(class UHorizontalBox*)                     HBoxYourCurrency                                            OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     YourCurrencyTextBlock                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     YourCurrencyValueTextBlock                                  OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UHorizontalBox*)                     HBoxItemValue                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ItemValueTextBlock                                          OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UHorizontalBox*)                     HBoxDivider                                                 OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UHorizontalBox*)                     BindingLabelHorizontalBox                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UHorizontalBox*)                     HBoxPostTransaction                                         OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PostTransactionValueTextBlock                               OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ActionValueTextBlock                                        OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ErrorMessage                                                OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UImage*)                             TotalCurrencyImage                                          OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UImage*)                             PurchaseCurrencyImage                                       OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UOverlay*)                           InputLabelRepairOverlay                                     OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UOverlay*)                           InputLabelTinkerOverlay                                     OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UOverlay*)                           InputLabelBreakdownOverlay                                  OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UTexture2D*)                         BitTexture                                                  OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UTexture2D*)                         WeaponPartTexture                                           OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UTexture2D*)                         ArmorPartTexture                                            OFFSET(get<T>, {0x390, 8, 0, 0})
};

/// Class /Script/Indiana.CastSpellEventEffect
/// Size: 0x0008 (0x000030 - 0x000038)
class UCastSpellEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Indiana.CastSpellStatusEffect
/// Size: 0x0010 (0x000188 - 0x000198)
class UCastSpellStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x188, 8, 0, 0})
	DMember(bool)                                      bAddTarget                                                  OFFSET(get<bool>, {0x190, 1, 0, 0})
	DMember(bool)                                      bForcePlayerCast                                            OFFSET(get<bool>, {0x191, 1, 0, 0})
};

/// Class /Script/Indiana.StatsSkillButtonEntryBase
/// Size: 0x0170 (0x000300 - 0x000470)
class UStatsSkillButtonEntryBase : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	SMember(FSlateBrush)                               AvailablePressedBrush                                       OFFSET(getStruct<T>, {0x300, 136, 0, 0})
	SMember(FSlateBrush)                               UnavailablePressedBrush                                     OFFSET(getStruct<T>, {0x388, 136, 0, 0})
	CMember(class UImage*)                             IconImage                                                   OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SkillLevelText                                              OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AdjustedSkillLevelText                                      OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SkillNameText                                               OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class USelectedNotificationWidget*)        NotificationWidget                                          OFFSET(get<T>, {0x438, 8, 0, 0})
	DMember(bool)                                      bIsButtonEnabled                                            OFFSET(get<bool>, {0x440, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatsSkillButtonEntryBase.UpdateButtonBrush
	// void UpdateButtonBrush();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.CategoryButtonEntryWidget
/// Size: 0x0028 (0x000470 - 0x000498)
class UCategoryButtonEntryWidget : public UStatsSkillButtonEntryBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1176;

public:


	/// Functions
	// Function /Script/Indiana.CategoryButtonEntryWidget.OnCategoryUnhoveredUnfocused
	// void OnCategoryUnhoveredUnfocused();                                                                                     // [0x17caaf0] Final|Native|Protected 
};

/// Class /Script/Indiana.CauseDamageReticleWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class UCauseDamageReticleWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	DMember(bool)                                      bUseAnims                                                   OFFSET(get<bool>, {0x300, 1, 0, 0})
	DMember(bool)                                      bExclusiveHitVisuals                                        OFFSET(get<bool>, {0x301, 1, 0, 0})
	DMember(float)                                     ShowHitTime                                                 OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     ShowWeakspotTime                                            OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     ShowKillTime                                                OFFSET(get<float>, {0x30C, 4, 0, 0})
	CMember(class UImage*)                             HitCrosshair                                                OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             WeakspotCrosshair                                           OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             KillCrosshair                                               OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CauseDamageReticleWidget.ShowWeakAnim
	// void ShowWeakAnim();                                                                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CauseDamageReticleWidget.ShowKillAnim
	// void ShowKillAnim();                                                                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CauseDamageReticleWidget.ShowHitAnim
	// void ShowHitAnim();                                                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CauseDamageReticleWidget.OnCauseDamage
	// void OnCauseDamage(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x17cab10] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.CCAppearancePageWidget
/// Size: 0x0108 (0x000300 - 0x000408)
class UCCAppearancePageWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1032;

public:
	CMember(class UExpandableAreaBase*)                GenderArea                                                  OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UExpandableAreaBase*)                FaceArea                                                    OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UExpandableAreaBase*)                HairArea                                                    OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UExpandableAreaBase*)                FeaturesArea                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UCCGenderSelectionWidget*)           GenderSelection                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UCCCharacterCustomizationBaseWdgt*)  FacialCustomization                                         OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UCCCharacterCustomizationBaseWdgt*)  HairCustomization                                           OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UCCCharacterCustomizationBaseWdgt*)  FeaturesCustomization                                       OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UBorder*)                            CharacterRotationBorder                                     OFFSET(get<T>, {0x378, 8, 0, 0})
	SMember(FVector2D)                                 MouseSensitivity                                            OFFSET(getStruct<T>, {0x380, 8, 0, 0})
	SMember(FVector2D)                                 GamepadSensitivity                                          OFFSET(getStruct<T>, {0x388, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CCAppearancePageWidget.SetCharacterDefaults
	// void SetCharacterDefaults();                                                                                             // [0x17cadc0] Final|Native|Protected 
	// Function /Script/Indiana.CCAppearancePageWidget.RandomizeCharacter
	// void RandomizeCharacter();                                                                                               // [0x17cada0] Final|Native|Protected 
	// Function /Script/Indiana.CCAppearancePageWidget.OnProgressToNextPage
	// void OnProgressToNextPage();                                                                                             // [0x17cad00] Final|Native|Protected 
	// Function /Script/Indiana.CCAppearancePageWidget.OnExpandableAreaChanged
	// void OnExpandableAreaChanged(class UExpandableAreaBase* AreaBaseWidget, bool bIsExpanded);                               // [0x17cabb0] Final|Native|Protected 
	// Function /Script/Indiana.CCAppearancePageWidget.OnBorderMouseDown
	// FEventReply OnBorderMouseDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                          // [0x17ca910] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.CCAptitudeListEntry
/// Size: 0x0040 (0x000300 - 0x000340)
class UCCAptitudeListEntry : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class UImage*)                             SelectedPipImage                                            OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AptitudeNameTextBlock                                       OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x338, 8, 0, 0})
};

/// Class /Script/Indiana.CCAptitudeListWidget
/// Size: 0x0028 (0x000300 - 0x000328)
class UCCAptitudeListWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(class UButtonGroup*)                       ButtonGroup                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UScrollBox*)                         DetailContainer                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UClass*)                             EntryClass                                                  OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.CCAptitudePageWidget
/// Size: 0x0088 (0x000300 - 0x000388)
class UCCAptitudePageWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	CMember(class UTextBlockBase*)                     AptitudeTitle                                               OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AptitudeDescription                                         OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AptitudeBenefits                                            OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UCCAptitudeListWidget*)              AptitudesList                                               OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x360, 8, 0, 0})
};

/// Class /Script/Indiana.CCAptitudeSummaryWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UCCAptitudeSummaryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UTextBlockBase*)                     AptitudeNameTextBlock                                       OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AptitudeEffectTextBlock                                     OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.CCAttributeSummaryWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UCCAttributeSummaryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UAttributeSliderGroupWidget*)        AttributeSliderGroup1                                       OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UAttributeSliderGroupWidget*)        AttributeSliderGroup2                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UAttributeSliderGroupWidget*)        AttributeSliderGroup3                                       OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Struct /Script/Indiana.UIAppearanceData
/// Size: 0x0018 (0x000000 - 0x000018)
class FUIAppearanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     AssetName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                CustomizationName                                           OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     StepSize                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Class /Script/Indiana.CCCharacterCustomizationBaseWdgt
/// Size: 0x0098 (0x000300 - 0x000398)
class UCCCharacterCustomizationBaseWdgt : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	CMember(class UVerticalBox*)                       EntryContainer                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UClass*)                             SliderClass                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(TArray<FUIAppearanceData>)                 AssetData                                                   OFFSET(get<T>, {0x310, 16, 0, 0})
	DMember(bool)                                      bRoundSliderToWhole                                         OFFSET(get<bool>, {0x320, 1, 0, 0})
};

/// Class /Script/Indiana.CCCharacterSummaryPageWidget
/// Size: 0x0160 (0x000300 - 0x000460)
class UCCCharacterSummaryPageWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(class UCCAptitudeSummaryWidget*)           AptitudeSummary                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UCCAttributeSummaryWidget*)          AttributeSummary                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UCCSkillsSummaryListWidget*)         SkillSummary                                                OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UCharacterSkillsDescriptionPanel*)   DescriptionPanel                                            OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(float)                                     GamepadScrollMultiplier                                     OFFSET(get<float>, {0x358, 4, 0, 0})
};

/// Struct /Script/Indiana.BoneModificationUIWrapper
/// Size: 0x0010 (0x000000 - 0x000010)
class FBoneModificationUIWrapper : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UBoneModifications*)                 Modification                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bRequiredInverseValue                                       OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Class /Script/Indiana.CCFacialCustomizationWidget
/// Size: 0x0060 (0x000398 - 0x0003F8)
class UCCFacialCustomizationWidget : public UCCCharacterCustomizationBaseWdgt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	CMember(TArray<class UBoneModifications*>)         BoneModifications                                           OFFSET(get<T>, {0x398, 16, 0, 0})
	CMember(TMap<class UBoneModifications*, FBoneModificationUIWrapper>) BoneMappings                              OFFSET(get<T>, {0x3A8, 80, 0, 0})
};

/// Class /Script/Indiana.CCFeaturesCustomizationWidget
/// Size: 0x0000 (0x000398 - 0x000398)
class UCCFeaturesCustomizationWidget : public UCCCharacterCustomizationBaseWdgt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
};

/// Class /Script/Indiana.CCGenderSelectionWidget
/// Size: 0x0040 (0x000300 - 0x000340)
class UCCGenderSelectionWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class UOptionPresenterWidget*)             GenderSelector                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UButtonBase*)                        GamepadButton                                               OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.CCNameSelectionWidget
/// Size: 0x0050 (0x000300 - 0x000350)
class UCCNameSelectionWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class UTextEntryWidget*)                   TextEntry                                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UButtonBase*)                        InvisibleButton                                             OFFSET(get<T>, {0x340, 8, 0, 0})
};

/// Class /Script/Indiana.CCPerksPageWidget
/// Size: 0x0178 (0x000300 - 0x000478)
class UCCPerksPageWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1144;

public:
	CMember(class UPerkReadoutWidget*)                 PerkReadout                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UPerksListWidget*)                   MilitaryPerks                                               OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UPerksListWidget*)                   AdventurerPerks                                             OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UPerksListWidget*)                   LeadershipPerks                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UButtonBase*)                        PreviousStepButton                                          OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UButtonBase*)                        NextStepButton                                              OFFSET(get<T>, {0x358, 8, 0, 0})
};

/// Struct /Script/Indiana.SkillCategoryDetail
/// Size: 0x0040 (0x000000 - 0x000040)
class FSkillCategoryDetail : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(ESkillCategory)                            Category                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Icon                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<ESkill>)                            AssociatedSkills                                            OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.CharacterSkillsBasePage
/// Size: 0x0130 (0x000300 - 0x000430)
class UCharacterSkillsBasePage : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(TArray<FSkillCategoryDetail>)              CategoryInformation                                         OFFSET(get<T>, {0x300, 16, 0, 0})
	CMember(class UClass*)                             SkillGroupClass                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UScrollBox*)                         SkillGroupScrollBox                                         OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SkillPointsRemainingTextBlock                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UCharacterSkillsDescriptionPanel*)   DescriptionPanel                                            OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.CCSkillsPageWidget
/// Size: 0x0080 (0x000430 - 0x0004B0)
class UCCSkillsPageWidget : public UCharacterSkillsBasePage
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
	DMember(float)                                     GamepadScrollMultiplier                                     OFFSET(get<float>, {0x470, 4, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UImage*)                             ScrollIndicator                                             OFFSET(get<T>, {0x480, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CCSkillsPageWidget.OnUserScrolled
	// void OnUserScrolled(float ScrollAmount);                                                                                 // [0x17cad20] Final|Native|Protected 
};

/// Class /Script/Indiana.CCSkillsSummaryCategoryWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UCCSkillsSummaryCategoryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UVerticalBox*)                       SkillContainer                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UClass*)                             SkillClass                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.CCSkillsSummaryListWidget
/// Size: 0x0010 (0x000300 - 0x000310)
class UCCSkillsSummaryListWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UVerticalBox*)                       GroupContainer                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UClass*)                             CategoryClass                                               OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.CCSkillSummaryDetailWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class UCCSkillSummaryDetailWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SkillNameTextBlock                                          OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SkillValueTextBlock                                         OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.CCSkillSummaryWidget
/// Size: 0x0008 (0x000300 - 0x000308)
class UCCSkillSummaryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class UCCSkillsSummaryListWidget*)         SkillsList                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
};

/// Class /Script/Indiana.Chair
/// Size: 0x0038 (0x0002C8 - 0x000300)
class AChair : public AFurnitureActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UClass*)                             WaitSpell                                                   OFFSET(get<T>, {0x2E0, 8, 0, 0})
	DMember(float)                                     CameraFadeDuration                                          OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(int32_t)                                   MinHours                                                    OFFSET(get<int32_t>, {0x2EC, 4, 0, 0})
	DMember(int32_t)                                   MaxHours                                                    OFFSET(get<int32_t>, {0x2F0, 4, 0, 0})
};

/// Class /Script/Indiana.CharacterCreationData
/// Size: 0x0020 (0x000038 - 0x000058)
class UCharacterCreationData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<class UClass*>)                     Aptitudes                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   NumStartingAttributePoints                                  OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   NumStartingSkillCategories                                  OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   NumSkillSpecializationPoints                                OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   NumStartingPerks                                            OFFSET(get<int32_t>, {0x54, 4, 0, 0})
};

/// Class /Script/Indiana.CharacterCreationMasterWidget
/// Size: 0x0118 (0x000308 - 0x000420)
class UCharacterCreationMasterWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	SMember(FMulticastInlineDelegate)                  OnPageChange                                                OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnNewSkillCategorySelected                                  OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnNewAptitudeSelected                                       OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAttributeChanged                                          OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	CMember(class UScrollBox*)                         PageScrollBox                                               OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UButtonGroup*)                       PageButtonGroup                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UScrollingWidgetGroup*)              ScrollingWidgetGroup                                        OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UAttributeSliderPageWidget*)         AttributeSliderPage                                         OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UCCSkillsPageWidget*)                SkillPage                                                   OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UCCAptitudePageWidget*)              AptitudePage                                                OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UCCCharacterSummaryPageWidget*)      SummaryPage                                                 OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UCCAppearancePageWidget*)            AppearancePage                                              OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UCCNameSelectionWidget*)             NamePage                                                    OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UOverlay*)                           ContentContainer                                            OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UNavigationGroupWidget*)             NavigationBar                                               OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UOverlay*)                           FramingOverlay                                              OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PlayerNameTextBlock                                         OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UWidget*)                            BackgroundEffect                                            OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UDataTable*)                         BannedNames                                                 OFFSET(get<T>, {0x3B8, 8, 0, 0})
	SMember(FSoftObjectPath)                           NewGameLevel                                                OFFSET(getStruct<T>, {0x3C0, 24, 0, 0})
	SMember(FSoftObjectPath)                           MainMenuLevel                                               OFFSET(getStruct<T>, {0x3D8, 24, 0, 0})
	CMember(class UFileMediaSource*)                   IntroMovie                                                  OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UFileMediaSource*)                   OutroMoviePartOne                                           OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UFileMediaSource*)                   OutroMoviePartTwo                                           OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UFileMediaSource*)                   IntroMovieXSX                                               OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UFileMediaSource*)                   OutroMoviePartOneXSX                                        OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UFileMediaSource*)                   OutroMoviePartTwoXSX                                        OFFSET(get<T>, {0x418, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CharacterCreationMasterWidget.PlayPartTwoOutroMovie
	// void PlayPartTwoOutroMovie(bool bWasSkipped);                                                                            // [0x17ceeb0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnPageBack
	// void OnPageBack();                                                                                                       // [0x17ceb80] Final|Native|Protected 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnOutroMovieTwoComplete
	// void OnOutroMovieTwoComplete(bool bWasSkipped);                                                                          // [0x17ceaf0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnOutroMovieStarted
	// void OnOutroMovieStarted();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnOutroMoviePartTwoComplete
	// void OnOutroMoviePartTwoComplete(bool bWasSkipped);                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnOutroMoviePartOneComplete
	// void OnOutroMoviePartOneComplete(bool bWasSkipped);                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnIntroMovieCompleteImpl
	// void OnIntroMovieCompleteImpl(bool bWasSkipped);                                                                         // [0x17ce990] Final|Native|Protected 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnIntroMovieComplete
	// void OnIntroMovieComplete(bool bWasSkipped);                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnIntroAnimSequenceComplete
	// void OnIntroAnimSequenceComplete();                                                                                      // [0x17ce970] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnFadeOutContents
	// void OnFadeOutContents();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnFadeInContents
	// void OnFadeInContents();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterCreationMasterWidget.OnCharacterCreationUIStart
	// void OnCharacterCreationUIStart();                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Struct /Script/Indiana.DeathClassRow
/// Size: 0x0020 (0x000000 - 0x000020)
class FDeathClassRow : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             DeathClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDeathBodyTypeParticleSystems*)      ParticleSystemData                                          OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UDeathBodyTypeAudioEvents*)          AudioEventData                                              OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bExagerateVerticalImpulse                                   OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     ExageratedStrength                                          OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Class /Script/Indiana.DeathClass
/// Size: 0x00F0 (0x000030 - 0x000120)
class UDeathClass : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FLinearColor)                              RevealEmissiveColor                                         OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(float)                                     FadeOut                                                     OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     LeadingEdgeBlend                                            OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     RevealAmount                                                OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     EmissiveLevel                                               OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     LeadingEdgeAmount                                           OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     RevealEdgeTightness                                         OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     EmissiveBaseValue                                           OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(EDeathType)                                DeathType                                                   OFFSET(get<T>, {0x5C, 1, 0, 0})
	DMember(bool)                                      bHideWeapon                                                 OFFSET(get<bool>, {0x5D, 1, 0, 0})
	CMember(class UTexture*)                           Reveal_RMEA                                                 OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UTexture*)                           Reveal_Normal                                               OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UTexture*)                           Reveal_Base_Color                                           OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TArray<class UMaterialInstanceDynamic*>)   MIDs                                                        OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(class UCharacterDeathComponent*)           DeathComponent                                              OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class AActor*)                             OwningActor                                                 OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             SkeletalMesh                                                OFFSET(get<T>, {0x98, 8, 0, 0})
	SMember(FGameplayTag)                              BodyType                                                    OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
	SMember(FGameplayTag)                              BodyPartHit                                                 OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	SMember(FDeathClassRow)                            DeathClassRow                                               OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	SMember(FVector)                                   ImpactLocation                                              OFFSET(getStruct<T>, {0xD0, 12, 0, 0})
	SMember(FVector)                                   ImpactDirection                                             OFFSET(getStruct<T>, {0xDC, 12, 0, 0})
	SMember(FName)                                     BoneHit                                                     OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	SMember(FName)                                     BreakBoneName                                               OFFSET(getStruct<T>, {0xF0, 8, 0, 0})
	SMember(FName)                                     BreakAttachedSocket                                         OFFSET(getStruct<T>, {0xF8, 8, 0, 0})
	SMember(FName)                                     BreakDetachedSocket                                         OFFSET(getStruct<T>, {0x100, 8, 0, 0})
	DMember(bool)                                      bTransitionStarted                                          OFFSET(get<bool>, {0x108, 1, 0, 0})
	DMember(float)                                     TransitionTimePrimary                                       OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     TransitionTimeSecondary                                     OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     TransitionRevealAmount                                      OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     TransitionEmissiveLevel                                     OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     TransitionCompletionDelay                                   OFFSET(get<float>, {0x11C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.DeathClass.Tick
	// void Tick(float Delta);                                                                                                  // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DeathClass.FindAudioEvent
	// class UAkAudioEvent* FindAudioEvent(FGameplayTag& DeathAudioEvent);                                                      // [0x17ce620] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.DeathClass.FindAndPostAudioEvent
	// void FindAndPostAudioEvent(FGameplayTag& DeathAudioEvent);                                                               // [0x17ce590] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.DeathClass.ExecuteOnReload
	// void ExecuteOnReload(class UCharacterDeathComponent* InDeathComponent);                                                  // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DeathClass.Execute
	// void Execute(class UCharacterDeathComponent* InDeathComponent);                                                          // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.DeathComponent
/// Size: 0x0018 (0x0000E0 - 0x0000F8)
class UDeathComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FMulticastInlineDelegate)                  OnDeathComplete                                             OFFSET(getStruct<T>, {0xE0, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.DeathComponent.DeathComplete
	// void DeathComplete();                                                                                                    // [0x17f9560] Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.CharacterDeathDamageInfo
/// Size: 0x0070 (0x000000 - 0x000070)
class FCharacterDeathDamageInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UClass*)                             DmgType                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGameplayTag)                              WeaponCategory                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bCalledShot                                                 OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bCritical                                                   OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(float)                                     ImpulseOverride                                             OFFSET(get<float>, {0x14, 4, 0, 0})
	SMember(FGameplayTag)                              BodyPartHit                                                 OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     BoneHit                                                     OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FVector)                                   ImpactLocation                                              OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FVector)                                   ImpactDirection                                             OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	SMember(FName)                                     BreakBoneHit                                                OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     BreakAttachedSocket                                         OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     BreakDetachedSocket                                         OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	DMember(bool)                                      bIsGibbing                                                  OFFSET(get<bool>, {0x58, 1, 0, 0})
	DMember(bool)                                      bAllBonesBroken                                             OFFSET(get<bool>, {0x59, 1, 0, 0})
	DMember(bool)                                      bBreakBoneRemoved                                           OFFSET(get<bool>, {0x5A, 1, 0, 0})
	CMember(TArray<FDeathClassOverride>)               DeathClassOverrides                                         OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Indiana.CharacterDeathComponent
/// Size: 0x01C0 (0x0000F8 - 0x0002B8)
class UCharacterDeathComponent : public UDeathComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	SMember(FCharacterDeathDamageInfo)                 DeathDamageInfo                                             OFFSET(getStruct<T>, {0xF8, 112, 0, 0})
	DMember(bool)                                      bAutoHideWeaponOnDeath                                      OFFSET(get<bool>, {0x168, 1, 0, 0})
	CMember(TMap<class UClass*, class UClass*>)        DeathClassOverrideByDamageType                              OFFSET(get<T>, {0x170, 80, 0, 0})
	CMember(class UDeathClass*)                        DeathClass                                                  OFFSET(get<T>, {0x1C8, 8, 0, 0})
	CMember(class UClass*)                             DeathClassOverride                                          OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(class UDeathClassData*)                    DeathClassData                                              OFFSET(get<T>, {0x1D8, 8, 0, 0})
	DMember(bool)                                      bApplyDeathMaterials                                        OFFSET(get<bool>, {0x1E0, 1, 0, 0})
	CMember(class UCharacterDeathImpulse*)             DeathImpulse                                                OFFSET(get<T>, {0x1F0, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             OwnerMesh                                                   OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(class UAppearanceComponent*)               AppearanceComponent                                         OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(class UClass*)                             ChosenDeathUClass                                           OFFSET(get<T>, {0x238, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CharacterDeathComponent.StoreDeathImpact
	// void StoreDeathImpact(FVector Impulse, FVector Location, FName BoneName);                                                // [0x17cf130] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.SpawnAshPile
	// class UMaterialInstanceDynamic* SpawnAshPile(class UStaticMesh* Mesh, class UMaterialInterface* LootablePileMaterial);   // [0x17cf060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.RagdollCharacter
	// void RagdollCharacter(bool bIgnoreDeathMontages);                                                                        // [0x17cef40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.OnMontageEnded
	// void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);                                                     // [0x17cea20] Final|Native|Protected 
	// Function /Script/Indiana.CharacterDeathComponent.HideProps
	// void HideProps();                                                                                                        // [0x17ce880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.HideAppearanceMeshes
	// void HideAppearanceMeshes();                                                                                             // [0x17ce860] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.GibCharacter
	// void GibCharacter();                                                                                                     // [0x17ce840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.DetachImpactFx
	// void DetachImpactFx();                                                                                                   // [0x17ce570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.CalcImpactVector
	// FVector CalcImpactVector();                                                                                              // [0x17ce530] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.BreakBone
	// void BreakBone();                                                                                                        // [0x17ce510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.BreakAllBones
	// void BreakAllBones();                                                                                                    // [0x17ce4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.AttachGoreCaps
	// void AttachGoreCaps();                                                                                                   // [0x17ce4d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterDeathComponent.AttachAllGoreCaps
	// void AttachAllGoreCaps();                                                                                                // [0x17ce4b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterDeathImpulse
/// Size: 0x0008 (0x000038 - 0x000040)
class UCharacterDeathImpulse : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Struct /Script/Indiana.CharacterDeathDataRow
/// Size: 0x0030 (0x000000 - 0x000030)
class FCharacterDeathDataRow : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UClass*)                             DmgType                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FGameplayTag)                              WeaponCategory                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(ECharacterDeathTriBool)                    CalledShot                                                  OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(ECharacterDeathTriBool)                    CriticalHit                                                 OFFSET(get<T>, {0x11, 1, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	CMember(class UCharacterDeathImpulse*)             Impulse                                                     OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(float)                                     EffectChance                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	CMember(class UClass*)                             DeathClass                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Indiana.CharacterDeathData
/// Size: 0x0030 (0x000038 - 0x000068)
class UCharacterDeathData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FCharacterDeathDataRow>)            DeathData                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UClass*)                             DefaultDeathClass                                           OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UCharacterDeathImpulse*)             DefaultImpulse                                              OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(int32_t)                                   PriorityRange                                               OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	SMember(FGameplayTag)                              AshPileCreatureType                                         OFFSET(getStruct<T>, {0x5C, 8, 0, 0})
};

/// Class /Script/Indiana.CharacterDerivedStatsWidget
/// Size: 0x0078 (0x000300 - 0x000378)
class UCharacterDerivedStatsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	CMember(class UDerivedStatWidget*)                 Level                                                       OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 CurrentExperience                                           OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 ExperienceNeededToLevel                                     OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 CurrentHealth                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 HealthRegen                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 HeadArmor                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 BodyArmor                                                   OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 SprintSpeed                                                 OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 CrouchSpeed                                                 OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 TacticalTimeDilation                                        OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UDerivedStatWidget*)                 MerchantSkill                                               OFFSET(get<T>, {0x360, 8, 0, 0})
};

/// Class /Script/Indiana.LedgerDescriptionPanel
/// Size: 0x0020 (0x000300 - 0x000320)
class ULedgerDescriptionPanel : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UScrollBox*)                         DetailsScrollBox                                            OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     HeaderText                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     HeaderBodyText                                              OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MinorHeaderBodyText                                         OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.CharacterDescriptionPanel
/// Size: 0x0048 (0x000320 - 0x000368)
class UCharacterDescriptionPanel : public ULedgerDescriptionPanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UVerticalBox*)                       PrimaryAdjustmentsVerticalBox                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UVerticalBox*)                       SecondaryAdjustmentsVerticalBox                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AdjustedSkillValueText                                      OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AdjustedSkillDescText                                       OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class USizeBox*)                           HeaderBodySizeBox                                           OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UHorizontalBox*)                     BelowAverageWarningContainer                                OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AttributeEffectTextBlock                                    OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UClass*)                             AdjustmentClass                                             OFFSET(get<T>, {0x358, 8, 0, 0})
};

/// Class /Script/Indiana.CharacterDetailsWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class UCharacterDetailsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UCharacterDerivedStatsWidget*)       DerivedStats                                                OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UCharacterStatusEffectsWidget*)      StatusEffects                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UStatsFlawSummaryWidget*)            FlawSummary                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UCharacterDescriptionPanel*)         DescriptionPanel                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Struct /Script/Indiana.GameDataReferenceID
/// Size: 0x0018 (0x000000 - 0x000018)
class FGameDataReferenceID : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Indiana.SpeakerGameDataReferenceID
/// Size: 0x0000 (0x000018 - 0x000018)
class FSpeakerGameDataReferenceID : public FGameDataReferenceID
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.ScannerAbility
/// Size: 0x0010 (0x000000 - 0x000010)
class FScannerAbility : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   AbilityName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.RangedStatModifierDescription
/// Size: 0x00A0 (0x000010 - 0x0000B0)
class FRangedStatModifierDescription : public FStatModifierDescriptionBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(bool)                                      bUseCurve                                                   OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bNormalizeCurveValue                                        OFFSET(get<bool>, {0x11, 1, 0, 0})
	SMember(FRuntimeFloatCurve)                        RangedCurve                                                 OFFSET(getStruct<T>, {0x18, 136, 0, 0})
	DMember(float)                                     MinRpgStatValue                                             OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     MaxRpgStatValue                                             OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(bool)                                      bRequiresDLC                                                OFFSET(get<bool>, {0xA8, 1, 0, 0})
	DMember(bool)                                      bRequiresMinSkill                                           OFFSET(get<bool>, {0xA9, 1, 0, 0})
	DMember(int32_t)                                   MinSkill                                                    OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
};

/// Struct /Script/Indiana.PerkSubclassArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FPerkSubclassArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UClass*>)                     Perks                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Indiana.CharacterInfoComponent
/// Size: 0x02C0 (0x0000E0 - 0x0003A0)
class UCharacterInfoComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x190, 8, 0, 0})
	CMember(EGender)                                   Gender                                                      OFFSET(get<T>, {0x198, 1, 0, 0})
	CMember(ECreatureXPType)                           CreatureXPType                                              OFFSET(get<T>, {0x199, 1, 0, 0})
	SMember(FSpeakerGameDataReferenceID)               Reference                                                   OFFSET(getStruct<T>, {0x1A0, 24, 0, 0})
	DMember(bool)                                      bOverrideSpeakerName                                        OFFSET(get<bool>, {0x1B8, 1, 0, 0})
	DMember(bool)                                      bAddToScriptManager                                         OFFSET(get<bool>, {0x1B9, 1, 0, 0})
	CMember(TArray<FScannerAbility>)                   ScannerAbilities                                            OFFSET(get<T>, {0x1C0, 16, 0, 0})
	SMember(FLocString)                                ScannerAnalysisString                                       OFFSET(getStruct<T>, {0x1D0, 8, 0, 0})
	CMember(class UScannerFlavorTextData*)             FlavorTextAsset                                             OFFSET(get<T>, {0x1D8, 8, 0, 0})
	SMember(FLocString)                                FlavorTextString                                            OFFSET(getStruct<T>, {0x1E0, 8, 0, 0})
	DMember(int32_t)                                   MinLevel                                                    OFFSET(get<int32_t>, {0x1E8, 4, 0, 0})
	DMember(int32_t)                                   MaxLevel                                                    OFFSET(get<int32_t>, {0x1EC, 4, 0, 0})
	DMember(int32_t)                                   LevelOffset                                                 OFFSET(get<int32_t>, {0x1F0, 4, 0, 0})
	CMember(TArray<FRangedStatModifierDescription>)    RangedLevelStatModifiers                                    OFFSET(get<T>, {0x1F8, 16, 0, 0})
	DMember(int32_t)                                   InherentAttributeValues                                     OFFSET(get<int32_t>, {0x208, 36, 0, 0})
	DMember(int32_t)                                   InherentSkillValues                                         OFFSET(get<int32_t>, {0x22C, 72, 0, 0})
	CMember(class UPerkTree*)                          PerkTree                                                    OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(TArray<class UClass*>)                     PostLoadPerks                                               OFFSET(get<T>, {0x280, 16, 0, 0})
	DMember(int32_t)                                   LevelsPerPerk                                               OFFSET(get<int32_t>, {0x290, 4, 0, 0})
	CMember(TMap<int32_t, FPerkSubclassArray>)         Perks                                                       OFFSET(get<T>, {0x2E0, 80, 0, 0})
	CMember(TMap<int32_t, FPerkSubclassArray>)         PerkTransactions                                            OFFSET(get<T>, {0x330, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.CharacterInfoComponent.UnlockPerksWithRandomLevels_Debug
	// void UnlockPerksWithRandomLevels_Debug();                                                                                // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.CharacterInfoComponent.SetLevel
	// void SetLevel(int32_t NewLevel);                                                                                         // [0x17cefd0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterInfoComponent.PerkRemove
	// void PerkRemove(FString PerkName);                                                                                       // [0x17cee00] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.PerkPurchase
	// void PerkPurchase(FString PerkName);                                                                                     // [0x17ced50] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.PerkPointsAdd
	// void PerkPointsAdd(int32_t Value);                                                                                       // [0x17cecc0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.OnWeaponEndUnequip
	// void OnWeaponEndUnequip(class UWeapon* Weapon);                                                                          // [0x17cec30] Final|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.OnWeaponEndEquip
	// void OnWeaponEndEquip(class UWeapon* Weapon);                                                                            // [0x17cec30] Final|Native|Protected 
	// Function /Script/Indiana.CharacterInfoComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x17ceba0] Final|Native|Public  
	// Function /Script/Indiana.CharacterInfoComponent.OnCompanionRegistered
	// void OnCompanionRegistered(class AIndianaAiCharacter* Companion, bool bRegister);                                        // [0x17ce8a0] Final|Native|Public  
	// Function /Script/Indiana.CharacterInfoComponent.GetName
	// FString GetName();                                                                                                       // [0x17ce800] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetLevelScaledByWorld
	// int32_t GetLevelScaledByWorld();                                                                                         // [0x17ce7d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetLevelScaledAtLocation
	// int32_t GetLevelScaledAtLocation(FVector& Location);                                                                     // [0x17ce730] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetLevel
	// int32_t GetLevel();                                                                                                      // [0x17ce710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetGender
	// EGender GetGender();                                                                                                     // [0x17ce6e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CharacterInfoComponent.GetCreatureXPType
	// ECreatureXPType GetCreatureXPType();                                                                                     // [0x17ce6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.BaseItemDefinition
/// Size: 0x0010 (0x000000 - 0x000010)
class FBaseItemDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bPristine                                                   OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Struct /Script/Indiana.DegradableItemDefinition
/// Size: 0x0008 (0x000010 - 0x000018)
class FDegradableItemDefinition : public FBaseItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Condition                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Indiana.WeaponItemDefinition
/// Size: 0x0040 (0x000018 - 0x000058)
class FWeaponItemDefinition : public FDegradableItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UClass*)                             WeaponClass                                                 OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UClass*)                             AmmoClass                                                   OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UClass*)                             AmmoConsumableClass                                         OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   AmmoPoolSize                                                OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TArray<class UClass*>)                     EquippedMods                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bGenerateRandomMicroMod                                     OFFSET(get<bool>, {0x48, 1, 0, 0})
	CMember(class UClass*)                             EquippedMicroMod                                            OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Struct /Script/Indiana.ArmorItemDefinition
/// Size: 0x0000 (0x000018 - 0x000018)
class FArmorItemDefinition : public FDegradableItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.ArmorSetItemDefinition
/// Size: 0x0038 (0x000018 - 0x000050)
class FArmorSetItemDefinition : public FArmorItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UClass*)                             ArmorSetClass                                               OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UClass*)                             ArmoringModClass                                            OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UClass*)                             UtilityModClass                                             OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UClass*)                             ResistanceModClass                                          OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             DampeningModClass                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bGenerateRandomMicroMod                                     OFFSET(get<bool>, {0x40, 1, 0, 0})
	CMember(class UClass*)                             EquippedMicroMod                                            OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/Indiana.AmmoItemDefinition
/// Size: 0x0008 (0x000010 - 0x000018)
class FAmmoItemDefinition : public FBaseItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UClass*)                             AmmoClass                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Indiana.CurrencyItmDefinition
/// Size: 0x0008 (0x000010 - 0x000018)
class FCurrencyItmDefinition : public FBaseItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UClass*)                             CurrencyItemClass                                           OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Indiana.ResourceItmDefinition
/// Size: 0x0008 (0x000010 - 0x000018)
class FResourceItmDefinition : public FBaseItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UClass*)                             ResourceItemClass                                           OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Indiana.QuestItmDefinition
/// Size: 0x0008 (0x000010 - 0x000018)
class FQuestItmDefinition : public FBaseItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UClass*)                             QuestItemClass                                              OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Indiana.WeaponModItemDefinition
/// Size: 0x0008 (0x000010 - 0x000018)
class FWeaponModItemDefinition : public FBaseItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UClass*)                             WeaponModClass                                              OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Indiana.HelmetItemDefinition
/// Size: 0x0008 (0x000018 - 0x000020)
class FHelmetItemDefinition : public FArmorItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             HelmetClass                                                 OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Indiana.ArmorModArmoringItemDefinition
/// Size: 0x0008 (0x000018 - 0x000020)
class FArmorModArmoringItemDefinition : public FArmorItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             ArmoringModClass                                            OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Indiana.ArmorModUtilityItemDefinition
/// Size: 0x0008 (0x000018 - 0x000020)
class FArmorModUtilityItemDefinition : public FArmorItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             UtilityModClass                                             OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Indiana.ArmorModResistanceItemDefinition
/// Size: 0x0008 (0x000018 - 0x000020)
class FArmorModResistanceItemDefinition : public FArmorItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             ResistanceModClass                                          OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Indiana.ArmorModDampeningItemDefinition
/// Size: 0x0008 (0x000018 - 0x000020)
class FArmorModDampeningItemDefinition : public FArmorItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             DampeningModClass                                           OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Indiana.GadgetItemDefinition
/// Size: 0x0008 (0x000010 - 0x000018)
class FGadgetItemDefinition : public FBaseItemDefinition
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UClass*)                             GadgetClass                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Indiana.ItemDefinitionVariant
/// Size: 0x01F0 (0x000000 - 0x0001F0)
class FItemDefinitionVariant : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	CMember(EItemType)                                 ItemType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FWeaponItemDefinition)                     WeaponItemDefinition                                        OFFSET(getStruct<T>, {0x8, 88, 0, 0})
	SMember(FArmorSetItemDefinition)                   ArmorSetItemDefinition                                      OFFSET(getStruct<T>, {0x60, 80, 0, 0})
	SMember(FAmmoItemDefinition)                       AmmoItemDefinition                                          OFFSET(getStruct<T>, {0xB0, 24, 0, 0})
	SMember(FCurrencyItmDefinition)                    CurrencyItemDefinition                                      OFFSET(getStruct<T>, {0xC8, 24, 0, 0})
	SMember(FResourceItmDefinition)                    ResourceItemDefinition                                      OFFSET(getStruct<T>, {0xE0, 24, 0, 0})
	SMember(FQuestItmDefinition)                       QuestItemDefinition                                         OFFSET(getStruct<T>, {0xF8, 24, 0, 0})
	SMember(FWeaponModItemDefinition)                  WeaponModItemDefinition                                     OFFSET(getStruct<T>, {0x110, 24, 0, 0})
	SMember(FHelmetItemDefinition)                     HelmetItemDefinition                                        OFFSET(getStruct<T>, {0x128, 32, 0, 0})
	SMember(FArmorModArmoringItemDefinition)           ArmorModArmoringItemDefinition                              OFFSET(getStruct<T>, {0x148, 32, 0, 0})
	SMember(FArmorModUtilityItemDefinition)            ArmorModUtilityItemDefinition                               OFFSET(getStruct<T>, {0x168, 32, 0, 0})
	SMember(FArmorModResistanceItemDefinition)         ArmorModResistanceItemDefinition                            OFFSET(getStruct<T>, {0x188, 32, 0, 0})
	SMember(FArmorModDampeningItemDefinition)          ArmorModDampeningItemDefinition                             OFFSET(getStruct<T>, {0x1A8, 32, 0, 0})
	SMember(FBaseItemDefinition)                       MedKitItemDefinitionDeprecated                              OFFSET(getStruct<T>, {0x1C8, 16, 0, 0})
	SMember(FGadgetItemDefinition)                     GadgetItemDefinition                                        OFFSET(getStruct<T>, {0x1D8, 24, 0, 0})
};

/// Struct /Script/Indiana.DefaultItemStack
/// Size: 0x01F8 (0x000000 - 0x0001F8)
class FDefaultItemStack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	SMember(FItemDefinitionVariant)                    Item                                                        OFFSET(getStruct<T>, {0x0, 496, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x1F0, 4, 0, 0})
	DMember(bool)                                      bLootable                                                   OFFSET(get<bool>, {0x1F4, 1, 0, 0})
};

/// Struct /Script/Indiana.ItemStack
/// Size: 0x0010 (0x000000 - 0x000010)
class FItemStack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UItem*)                              Item                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bLootable                                                   OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Class /Script/Indiana.InventoryComponent
/// Size: 0x0120 (0x0000E0 - 0x000200)
class UInventoryComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	SMember(FMulticastInlineDelegate)                  ItemStacksChangedDelegate                                   OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ItemAddedDelegate                                           OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ItemCountChangedDelegate                                    OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ItemRemovedDelegate                                         OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ItemJunkStatusChangedDelegate                               OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	CMember(TArray<FDefaultItemStack>)                 DefaultItemStacks                                           OFFSET(get<T>, {0x160, 16, 0, 0})
	DMember(bool)                                      bCanLoot                                                    OFFSET(get<bool>, {0x170, 1, 0, 0})
	CMember(TArray<FItemStack>)                        Items                                                       OFFSET(get<T>, {0x178, 16, 0, 0})
	CMember(class ULootTableData*)                     BaseLootTable                                               OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class ULootTableData*)                     SecondaryTable                                              OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(TArray<class ULootTableData*>)             AdditionalLoot                                              OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(class UClass*)                             OwningFaction                                               OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             OwningActor                                                 OFFSET(get<T>, {0x1C0, 8, 0, 0})
	DMember(bool)                                      bPlayerOwned                                                OFFSET(get<bool>, {0x1E8, 1, 0, 0})
	DMember(bool)                                      bUseContainerTagForMedKit                                   OFFSET(get<bool>, {0x1E9, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.InventoryComponent.TransferItemsBetweenActorsByTag
	// bool TransferItemsBetweenActorsByTag(class AActor* SourceActor, class AActor* DestinationActor, FGameplayTagContainer MatchTags, int32_t Count, bool bPotentialTheft); // [0x186af80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.ShowItemRemovedNotification
	// void ShowItemRemovedNotification(class UClass* ItemType, int32_t Count);                                                 // [0x186ae30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.ShowItemGainedNotification
	// void ShowItemGainedNotification(class UClass* ItemType, int32_t Count);                                                  // [0x186ad70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.RemoveItemsFromActorByTag
	// bool RemoveItemsFromActorByTag(class AActor* Actor, FGameplayTagContainer MatchTags, int32_t Count);                     // [0x186ab90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.RemoveItemFromActor
	// bool RemoveItemFromActor(class AActor* Actor, class UClass* ItemType, int32_t Count);                                    // [0x186aa90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.RemoveCurrency
	// void RemoveCurrency(int32_t Amount, bool bVendorInteraction);                                                            // [0x186a9c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.IsEmpty
	// bool IsEmpty();                                                                                                          // [0x186a900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.InventoryComponent.HasItemCountOnActorByTag
	// bool HasItemCountOnActorByTag(class AActor* Actor, FGameplayTagContainer MatchTags, int32_t Count);                      // [0x186a7a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.HasItemCountOnActor
	// bool HasItemCountOnActor(class AActor* Actor, class UClass* ItemType, int32_t Count);                                    // [0x186a6a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.GetItemCountOnActor
	// int32_t GetItemCountOnActor(class AActor* Actor, class UClass* ItemType);                                                // [0x186a5d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.DebugCreateInventory
	// void DebugCreateInventory(int32_t NumToAddPerItem, int32_t Skip);                                                        // [0x186a2f0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.InventoryComponent.ContainsLoot
	// bool ContainsLoot();                                                                                                     // [0x186a2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.InventoryComponent.AddLootFromTable
	// void AddLootFromTable(class ULootTableData* LootTable);                                                                  // [0x186a120] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.AddItemToActor
	// void AddItemToActor(class AActor* Actor, class UClass* ItemType, int32_t Count, bool bLootable);                         // [0x1869fd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.InventoryComponent.AddItemDebug
	// void AddItemDebug(FName& ItemName, uint32_t Count);                                                                      // [0x1869f00] Final|Exec|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryComponent.AddCurrency
	// void AddCurrency(int32_t Amount, bool bLootable);                                                                        // [0x1869e30] Final|Exec|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterInventoryComponent
/// Size: 0x0038 (0x000200 - 0x000238)
class UCharacterInventoryComponent : public UInventoryComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	DMember(bool)                                      bCanBePickPocketed                                          OFFSET(get<bool>, {0x230, 1, 0, 0})
	DMember(bool)                                      bCanBeHacked                                                OFFSET(get<bool>, {0x234, 1, 0, 0})
};

/// Class /Script/Indiana.CharacterMedKitWidget
/// Size: 0x00D0 (0x000300 - 0x0003D0)
class UCharacterMedKitWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UProgressBar*)                       MedKitProgressBar                                           OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              DrugSlotOne                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              DrugSlotTwo                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              DrugSlotThree                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              DrugSlotFour                                                OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UHorizontalBox*)                     DrugSlotContainer                                           OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UInputWidget*)                       InputLabel                                                  OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MedKitUsageTextBlock                                        OFFSET(get<T>, {0x340, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CharacterMedKitWidget.UpdateDrugSlots
	// void UpdateDrugSlots(int32_t ConsumablesUsed);                                                                           // [0x17d4ce0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterMedKitWidget.OnInventoryItemAddedRemoved
	// void OnInventoryItemAddedRemoved(FItemStack& ItemStack);                                                                 // [0x17d4710] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.CharacterMedKitWidget.OnHealthChanged
	// void OnHealthChanged(float HealthChange, class AActor* InInstigator);                                                    // [0x17d45b0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterMedKitWidget.InhalerModeChanged
	// void InhalerModeChanged(int32_t NewSetting);                                                                             // [0x17d3be0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterMedKitWidget.AbilityControlModeChanged
	// void AbilityControlModeChanged(int32_t NewSetting);                                                                      // [0x17d3be0] Final|Native|Protected 
};

/// Class /Script/Indiana.CharacterNameplateWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UCharacterNameplateWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LevelTextBlock                                              OFFSET(get<T>, {0x308, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CharacterNameplateWidget.OnLevelChanged
	// void OnLevelChanged(int32_t NewLevel);                                                                                   // [0x17d47b0] Final|Native|Protected 
};

/// Class /Script/Indiana.CharacterOverviewWidget
/// Size: 0x01F8 (0x000300 - 0x0004F8)
class UCharacterOverviewWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1272;

public:
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UCanvasPanel*)                       MainCanvasPanel                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UCharacterMedKitWidget*)             CharacterMedKit                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UHorizontalBox*)                     AbilityHorizontalBox                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class USurvivalBarGroupWidget*)            SurvivalBar                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LevelTextBlock                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             HealthProgressBar                                           OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             HealthBarTip                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             HealthBarTipAnim                                            OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UOverlay*)                           HealthOverlay                                               OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UImage*)                             TTDProgressBar                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UImage*)                             TTDThresholdFill                                            OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UImage*)                             TTDThresholdBar                                             OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UImage*)                             VentGlow                                                    OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UImage*)                             XPFill                                                      OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UImage*)                             XPGlow                                                      OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UImage*)                             GlowBall                                                    OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UImage*)                             TTDBarTip                                                   OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UOverlay*)                           TTDOverlay                                                  OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UOverlay*)                           StatusEffectBarOverlay                                      OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UStatusEffectBarWidget*)             StatusEffectBar                                             OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class USizeBox*)                           TTDSizeBox                                                  OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UHorizontalBox*)                     TTDHBox                                                     OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UInputWidget*)                       TTDInputWidget                                              OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UProgressBar*)                       TTDIconProgressBar                                          OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UHorizontalBox*)                     DashHBox                                                    OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UInputWidget*)                       DashInputWidget                                             OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UProgressBar*)                       DashProgressBar                                             OFFSET(get<T>, {0x3D8, 8, 0, 0})
	DMember(float)                                     InhalerActivePadding                                        OFFSET(get<float>, {0x3E0, 4, 0, 0})
	DMember(float)                                     InhalerInactivePadding                                      OFFSET(get<float>, {0x3E4, 4, 0, 0})
	DMember(float)                                     SurvivalBarBindingsInactivePadding                          OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     SurvivalBarBindingsActivePadding                            OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(int32_t)                                   HealthMeterTipStartHeight                                   OFFSET(get<int32_t>, {0x3F0, 4, 0, 0})
	DMember(int32_t)                                   HealthMeterTipEndHeight                                     OFFSET(get<int32_t>, {0x3F4, 4, 0, 0})
	DMember(int32_t)                                   HealthMeterTipAnimStartHeight                               OFFSET(get<int32_t>, {0x3F8, 4, 0, 0})
	DMember(int32_t)                                   HealthMeterTipAnimEndHeight                                 OFFSET(get<int32_t>, {0x3FC, 4, 0, 0})
	DMember(float)                                     HealthMeterExpandPercent                                    OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     MeterInnerAnimTime                                          OFFSET(get<float>, {0x404, 4, 0, 0})
	DMember(int32_t)                                   HealthMeterInnerAnimNumFrames                               OFFSET(get<int32_t>, {0x408, 4, 0, 0})
	DMember(int32_t)                                   TTDMeterInnerAnimNumFrames                                  OFFSET(get<int32_t>, {0x40C, 4, 0, 0})
	DMember(float)                                     TTDMeterOffsetPercent                                       OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     DefaultXPBarPauseTime                                       OFFSET(get<float>, {0x414, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.CharacterOverviewWidget.OnTTDDisplayModeChanged
	// void OnTTDDisplayModeChanged(int32_t TTDDisplayModeIn);                                                                  // [0x17d4b90] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnSurvivalModeChanged
	// void OnSurvivalModeChanged(bool bSurvivalBarVisibilityIn);                                                               // [0x17d4b00] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnSkillUpdated
	// void OnSkillUpdated(ESkill Skill, int32_t NewValue);                                                                     // [0x17d4a30] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnPreventTTDChanged
	// void OnPreventTTDChanged(bool bPreventTTD);                                                                              // [0x17d48d0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnPlayerStatusBarModeChanged
	// void OnPlayerStatusBarModeChanged(int32_t ModeIn);                                                                       // [0x17d4840] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnPlayerCombatStateChange
	// void OnPlayerCombatStateChange(bool IsPlayerInCombat);                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CharacterOverviewWidget.OnInhalerModeChanged
	// void OnInhalerModeChanged(int32_t InhalerModeIn);                                                                        // [0x17d4680] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bHUDVisibility);                                                                        // [0x17d4520] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnDodgeDisplayModeChanged
	// void OnDodgeDisplayModeChanged(int32_t DodgeDisplayModeIn);                                                              // [0x17d4410] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnDodged
	// void OnDodged(EDodgeDirection EDodgeDirection);                                                                          // [0x17d44a0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty DifficultyIn);                                                                  // [0x17d4390] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnCombatStateChange
	// void OnCombatStateChange(bool bCombatIn, bool bRestoring);                                                               // [0x17d41f0] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.OnAbilityControlModeChanged
	// void OnAbilityControlModeChanged(int32_t AbilityControlModeIn);                                                          // [0x17d3e90] Final|Native|Protected 
	// Function /Script/Indiana.CharacterOverviewWidget.HideTTDMeter
	// void HideTTDMeter(bool bHide);                                                                                           // [0x17d3e00] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterLibrary
/// Size: 0x0000 (0x000030 - 0x000030)
class UCharacterLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.CharacterLibrary.GetSkillValue
	// int32_t GetSkillValue(class AActor* Actor, ESkill Skill);                                                                // [0x17d3d30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CharacterLibrary.GetAttributeValue
	// int32_t GetAttributeValue(class AActor* Actor, EAttribute Attribute);                                                    // [0x17d3c60] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CharacterScalingComponent
/// Size: 0x0000 (0x0000E0 - 0x0000E0)
class UCharacterScalingComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
};

/// Class /Script/Indiana.ShoutComponent
/// Size: 0x0020 (0x0000E0 - 0x000100)
class UShoutComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(float)                                     ShoutRadius                                                 OFFSET(get<float>, {0xE8, 4, 0, 0})
	CMember(class UStaticMeshComponent*)               ShoutBounds                                                 OFFSET(get<T>, {0xF0, 8, 0, 0})
};

/// Class /Script/Indiana.CharacterShoutComponent
/// Size: 0x0060 (0x000100 - 0x000160)
class UCharacterShoutComponent : public UShoutComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(bool)                                      bOnEnterCombat                                              OFFSET(get<bool>, {0x108, 1, 0, 0})
	DMember(bool)                                      bCombatIntermittent                                         OFFSET(get<bool>, {0x109, 1, 0, 0})
	DMember(bool)                                      bOnDeath                                                    OFFSET(get<bool>, {0x10A, 1, 0, 0})
	DMember(bool)                                      bOnOneShotDeath                                             OFFSET(get<bool>, {0x10B, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.CharacterShoutComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x17d42c0] Final|Native|Private 
	// Function /Script/Indiana.CharacterShoutComponent.OnCharacterDeath
	// void OnCharacterDeath(FCauseDamageInfo& CDI);                                                                            // [0x17d4150] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.CharacterShoutComponent.OnAlertStateChange
	// void OnAlertStateChange(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x17d3ff0] Final|Native|Private 
};

/// Class /Script/Indiana.CharacterSkillsDescriptionPanel
/// Size: 0x0010 (0x000368 - 0x000378)
class UCharacterSkillsDescriptionPanel : public UCharacterDescriptionPanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	CMember(class USkillUnlockPanelWidget*)            SkillUnlockPanel                                            OFFSET(get<T>, {0x368, 8, 0, 0})
};

/// Class /Script/Indiana.CharacterStatusEffectsWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class UCharacterStatusEffectsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UClass*)                             EntryClass                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UScrollBox*)                         ContentScrollBox                                            OFFSET(get<T>, {0x308, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CharacterStatusEffectsWidget.OnRemoveStatusEffect
	// void OnRemoveStatusEffect(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);               // [0x17d4960] Final|Native|Protected 
	// Function /Script/Indiana.CharacterStatusEffectsWidget.OnAddStatusEffect
	// void OnAddStatusEffect(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                  // [0x17d3f20] Final|Native|Protected 
};

/// Class /Script/Indiana.FlowChart
/// Size: 0x0088 (0x000030 - 0x0000B8)
class UFlowChart : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
};

/// Class /Script/Indiana.Chatter
/// Size: 0x0070 (0x0000B8 - 0x000128)
class UChatter : public UFlowChart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Struct /Script/Indiana.ExpressionComponentAsset
/// Size: 0x0010 (0x000000 - 0x000010)
class FExpressionComponentAsset : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(LogicalOperator)                           Operator                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Indiana.ConditionalExpressionAsset
/// Size: 0x0020 (0x000010 - 0x000030)
class FConditionalExpressionAsset : public FExpressionComponentAsset
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<ExpressionComponentType>)           ComponentTypes                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<int32_t>)                           ComponentIndices                                            OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Indiana.ConditionalCallAsset
/// Size: 0x0048 (0x000010 - 0x000058)
class FConditionalCallAsset : public FExpressionComponentAsset
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      Not                                                         OFFSET(get<bool>, {0x10, 1, 0, 0})
	SMember(FString)                                   ScriptCall                                                  OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FString)                                   FullName                                                    OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   Flags                                                       OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TArray<FString>)                           Parameters                                                  OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Struct /Script/Indiana.ConditionalAsset
/// Size: 0x0050 (0x000000 - 0x000050)
class FConditionalAsset : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FConditionalExpressionAsset>)       ExpressionComponents                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FConditionalCallAsset>)             CallComponents                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FConditionalExpressionAsset)               Root                                                        OFFSET(getStruct<T>, {0x20, 48, 0, 0})
};

/// Struct /Script/Indiana.ChatterLinkAsset
/// Size: 0x0060 (0x000000 - 0x000060)
class FChatterLinkAsset : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   FromNodeID                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ToNodeID                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FConditionalAsset)                         Conditional                                                 OFFSET(getStruct<T>, {0x8, 80, 0, 0})
	DMember(int32_t)                                   RandomWeight                                                OFFSET(get<int32_t>, {0x58, 4, 0, 0})
};

/// Struct /Script/Indiana.ScriptCallAsset
/// Size: 0x0070 (0x000000 - 0x000070)
class FScriptCallAsset : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FString)                                   Script                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Flags                                                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FConditionalAsset)                         Conditional                                                 OFFSET(getStruct<T>, {0x20, 80, 0, 0})
};

/// Struct /Script/Indiana.DialogueNodeAsset
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FDialogueNodeAsset : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(int32_t)                                   NodeID                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ContainerNodeID                                             OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FlowChartNodeType)                         NodeType                                                    OFFSET(getStruct<T>, {0x8, 1, 0, 0})
	CMember(TArray<FChatterLinkAsset>)                 Links                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FConditionalAsset)                         Conditional                                                 OFFSET(getStruct<T>, {0x20, 80, 0, 0})
	CMember(TArray<FScriptCallAsset>)                  OnEnterScripts                                              OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FScriptCallAsset>)                  OnExitScripts                                               OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FScriptCallAsset>)                  OnUpdateScripts                                             OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(bool)                                      NotSkippable                                                OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      IsQuestionNode                                              OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(bool)                                      HideSpeaker                                                 OFFSET(get<bool>, {0xA2, 1, 0, 0})
	CMember(NodePlayType)                              PlayType                                                    OFFSET(get<T>, {0xA3, 1, 0, 0})
	CMember(PersistenceType)                           Persistence                                                 OFFSET(get<T>, {0xA4, 1, 0, 0})
	DMember(int32_t)                                   NoPlayRandomWeight                                          OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	CMember(NodeDisplayType)                           DisplayType                                                 OFFSET(get<T>, {0xAC, 1, 0, 0})
	CMember(EVOPositioning)                            VOPositioning                                               OFFSET(get<T>, {0xAD, 1, 0, 0})
};

/// Struct /Script/Indiana.TalkNodeAsset
/// Size: 0x0050 (0x0000B0 - 0x000100)
class FTalkNodeAsset : public FDialogueNodeAsset
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FGuid)                                     SpeakerGameDataID                                           OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FGuid)                                     ListenerGameDataID                                          OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FString)                                   EmotionType                                                 OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	DMember(float)                                     EmotionStrength                                             OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     EmotionDelay                                                OFFSET(get<float>, {0xE4, 4, 0, 0})
	SMember(FString)                                   ExternalVO                                                  OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	DMember(float)                                     VODelayOverride                                             OFFSET(get<float>, {0xF8, 4, 0, 0})
	CMember(ETalkNodeVOAttenuationType)                VOAttenuationType                                           OFFSET(get<T>, {0xFC, 1, 0, 0})
	DMember(bool)                                      bOmitFromUIHistory                                          OFFSET(get<bool>, {0xFD, 1, 0, 0})
	DMember(bool)                                      HasVO                                                       OFFSET(get<bool>, {0xFE, 1, 0, 0})
	DMember(bool)                                      bPersistEmotion                                             OFFSET(get<bool>, {0xFF, 1, 0, 0})
};

/// Struct /Script/Indiana.ScriptNodeAsset
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class FScriptNodeAsset : public FDialogueNodeAsset
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(bool)                                      RequiresValidChildNode                                      OFFSET(get<bool>, {0xB0, 1, 0, 0})
};

/// Struct /Script/Indiana.ChatterNodeAsset
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class FChatterNodeAsset : public FDialogueNodeAsset
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   VariantCount                                                OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
};

/// Struct /Script/Indiana.ChatterBranchNodeAsset
/// Size: 0x0020 (0x0000B8 - 0x0000D8)
class FChatterBranchNodeAsset : public FScriptNodeAsset
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FGuid)                                     ParentID                                                    OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FGuid)                                     EventID                                                     OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
};

/// Struct /Script/Indiana.GameDataStructure
/// Size: 0x0008 (0x000000 - 0x000008)
class FGameDataStructure : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Indiana.ChatterEvent
/// Size: 0x0028 (0x000008 - 0x000030)
class FChatterEvent : public FGameDataStructure
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EChatterEventType)                         EventType                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(EInterruptType)                            OnInterrupt                                                 OFFSET(get<T>, {0x14, 1, 0, 0})
	CMember(EChatterLevel)                             InterruptionLevel                                           OFFSET(get<T>, {0x15, 1, 0, 0})
	CMember(EQueueType)                                OnQueued                                                    OFFSET(get<T>, {0x16, 1, 0, 0})
	DMember(float)                                     MaxWaitTime                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
	SMember(FString)                                   ChatterPrefix                                               OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Indiana.ChatterEventNodeAsset
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class FChatterEventNodeAsset : public FDialogueNodeAsset
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FChatterEvent)                             EventData                                                   OFFSET(getStruct<T>, {0xB0, 48, 0, 0})
};

/// Struct /Script/Indiana.SoundEffectNodeAsset
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class FSoundEffectNodeAsset : public FDialogueNodeAsset
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FString)                                   AudioEvent                                                  OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(float)                                     FadeOutDuration                                             OFFSET(get<float>, {0xC0, 4, 0, 0})
};

/// Struct /Script/Indiana.ChatterBundle
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FChatterBundle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FString)                                   LoadedFilename                                              OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(TMap<int32_t, FString>)                    AudioLookup                                                 OFFSET(get<T>, {0x20, 80, 0, 0})
	CMember(TArray<FString>)                           StringTableFilenames                                        OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FTalkNodeAsset>)                    TalkNodes                                                   OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FScriptNodeAsset>)                  ScriptNodes                                                 OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FChatterNodeAsset>)                 ChatterNodes                                                OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FChatterBranchNodeAsset>)           ChatterBranchNodes                                          OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FChatterEventNodeAsset>)            ChatterEventNodes                                           OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FSoundEffectNodeAsset>)             SoundEffectNodes                                            OFFSET(get<T>, {0xD0, 16, 0, 0})
};

/// Class /Script/Indiana.ChatterBundleSet
/// Size: 0x0018 (0x000038 - 0x000050)
class UChatterBundleSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   Hash                                                        OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(TArray<FChatterBundle>)                    ChatterBundles                                              OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Indiana.ChatterEventEffect
/// Size: 0x0008 (0x000030 - 0x000038)
class UChatterEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(EChatterEventType)                         ChatterEvent                                                OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Class /Script/Indiana.GameDataReference
/// Size: 0x0018 (0x000038 - 0x000050)
class UGameDataReference : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x3C, 16, 0, 0})
};

/// Class /Script/Indiana.ChatterEventsGameDataReference
/// Size: 0x0000 (0x000050 - 0x000050)
class UChatterEventsGameDataReference : public UGameDataReference
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.ChatterGameHelpers
/// Size: 0x0000 (0x000030 - 0x000030)
class UChatterGameHelpers : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.ChatterGameHelpers.PlayChatterEvent
	// void PlayChatterEvent(class AActor* Speaker, EChatterEventType ChatterEvent);                                            // [0x17d4c20] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ChatterManager
/// Size: 0x6FD98 (0x000030 - 0x06FDC8)
class UChatterManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 458184;

public:
	CMember(TMap<FGuid, class UChatter*>)              LoadedChatter                                               OFFSET(get<T>, {0x50, 80, 0, 0})
	CMember(TArray<class UChatterPlayer*>)             ChatterPlayerPool                                           OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(class UChatterPlayer*)                     PreviewPlayer                                               OFFSET(get<T>, {0x6FCD0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ChatterManager.OnConversationBegin
	// void OnConversationBegin(class UConversationInstance* ConversationInstance);                                             // [0x17d9490] Final|Native|Private 
};

/// Class /Script/Indiana.FlowChartPlayer
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UFlowChartPlayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/Indiana.ChatterPlayer
/// Size: 0x00A8 (0x0000C0 - 0x000168)
class UChatterPlayer : public UFlowChartPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(class UFaceFXAnim*)                        FaceFXAnim                                                  OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      SoundEffectEvent                                            OFFSET(get<T>, {0x160, 8, 0, 0})
};

/// Class /Script/Indiana.CheckBoxWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UCheckBoxWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	SMember(FVector2D)                                 ImageDimensions                                             OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	SMember(FVector2D)                                 MaxImageDimensions                                          OFFSET(getStruct<T>, {0x308, 8, 0, 0})
	CMember(class USizeBox*)                           CheckBoxSizeBox                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UButtonBase*)                        CheckBoxButton                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             CheckedImage                                                OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CheckBoxWidget.UpdateCheckBoxSize
	// void UpdateCheckBoxSize(int32_t FontSizeModifier);                                                                       // [0x17d9a30] Final|Native|Protected 
};

/// Class /Script/Indiana.CineCombatCameraParams
/// Size: 0x0140 (0x000030 - 0x000170)
class UCineCombatCameraParams : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0x34, 8, 0, 0})
	SMember(FVector)                                   AttachRelativePosition                                      OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FName)                                     LookAtSocket                                                OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x50, 12, 0, 0})
	CMember(class ULevelSequence*)                     LevelSequence                                               OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(bool)                                      bAttachToActor                                              OFFSET(get<bool>, {0x68, 1, 0, 0})
	SMember(FTransformedShape)                         ValidLocationCollisionInfo                                  OFFSET(getStruct<T>, {0x70, 64, 0, 0})
	DMember(bool)                                      bUseTimeDilationData                                        OFFSET(get<bool>, {0xB0, 1, 0, 0})
	SMember(FTimeDilationData)                         TimeDilationData                                            OFFSET(getStruct<T>, {0xB8, 168, 0, 0})
	DMember(bool)                                      bAllowTimeDilationEdit                                      OFFSET(get<bool>, {0x160, 1, 0, 0})
};

/// Class /Script/Indiana.CineCombatCamera
/// Size: 0x0050 (0x0002B8 - 0x000308)
class ACineCombatCamera : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	SMember(FMulticastInlineDelegate)                  CineCombatCameraStartDelegate                               OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  CineCombatCameraEndDelegate                                 OFFSET(getStruct<T>, {0x2D0, 16, 0, 0})
	CMember(class UCineCombatCameraParams*)            CameraParams                                                OFFSET(get<T>, {0x300, 8, 0, 0})
};

/// Class /Script/Indiana.CineCombatSequenceActor
/// Size: 0x0010 (0x000340 - 0x000350)
class ACineCombatSequenceActor : public ALevelSequenceActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class UCineCombatCameraParams*)            CameraParams                                                OFFSET(get<T>, {0x348, 8, 0, 0})
};

/// Class /Script/Indiana.CineCombatSequencePlayer
/// Size: 0x0040 (0x000608 - 0x000648)
class UCineCombatSequencePlayer : public ULevelSequencePlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1608;

public:
};

/// Class /Script/Indiana.CinematicPlayerWidget
/// Size: 0x0040 (0x000308 - 0x000348)
class UCinematicPlayerWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	SMember(FMulticastInlineDelegate)                  OnCinematicEnd                                              OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	CMember(class UInputLabelWidget*)                  HoldInputLabel                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UBackgroundBlur*)                    SkipContainer                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UOverlay*)                           CinematicOverlay                                            OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(float)                                     MaxTimeBetweenInputs                                        OFFSET(get<float>, {0x330, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.CinematicPlayerWidget.SkipCinematic
	// void SkipCinematic();                                                                                                    // [0x17d9a10] Final|Native|Protected 
	// Function /Script/Indiana.CinematicPlayerWidget.PlayerInputDetected
	// void PlayerInputDetected();                                                                                              // [0x17d9780] Final|Native|Protected 
	// Function /Script/Indiana.CinematicPlayerWidget.PlayCinematic
	// void PlayCinematic(class UMovieSceneSequencePlayer* Cinematic);                                                          // [0x17d96f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CinematicPlayerWidget.PauseCinematic
	// void PauseCinematic();                                                                                                   // [0x17d96d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CinematicPlayerWidget.InitiateFadeOut
	// void InitiateFadeOut();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CinematicPlayerWidget.InitiateFadeIn
	// void InitiateFadeIn();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CinematicPlayerWidget.FinishCinematic
	// void FinishCinematic();                                                                                                  // [0x17d8d70] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ClearThreatStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UClearThreatStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(EClearThreatTarget)                        ClearTarget                                                 OFFSET(get<T>, {0x188, 4, 0, 0})
};

/// Class /Script/Indiana.CodexDataAsset
/// Size: 0x0010 (0x000038 - 0x000048)
class UCodexDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/Indiana.InputLabelDescription
/// Size: 0x0038 (0x000000 - 0x000038)
class FInputLabelDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     IconName                                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FLocString)                                TextReference                                               OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bDisplayKeyboardMouse                                       OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bDisplayGamepad                                             OFFSET(get<bool>, {0x19, 1, 0, 0})
	DMember(bool)                                      bBoundToActionName                                          OFFSET(get<bool>, {0x1A, 1, 0, 0})
	DMember(bool)                                      bRequiresConstantTicking                                    OFFSET(get<bool>, {0x1B, 1, 0, 0})
};

/// Class /Script/Indiana.CodexJournal
/// Size: 0x00C8 (0x000300 - 0x0003C8)
class UCodexJournal : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 968;

public:
	CMember(class UButtonGroup*)                       ButtonGroup                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	SMember(FInputLabelDescription)                    PlayAudioLogDescription_Gamepad                             OFFSET(getStruct<T>, {0x308, 56, 0, 0})
	SMember(FInputLabelDescription)                    PlayAudioLogDescription_Keyboard                            OFFSET(getStruct<T>, {0x340, 56, 0, 0})
	CMember(class UScrollBox*)                         ListScrollBox                                               OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UAudioLogList*)                      AudioLogList_BaseGame                                       OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UAudioLogList*)                      AudioLogList_INX01                                          OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UAudioLogList*)                      AudioLogList_INX02                                          OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UTutorialListContainer*)             TutorialListContainer                                       OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class USymbolList*)                        SymbolList                                                  OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class ULogList*)                           LogList                                                     OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UJournalDescriptionPanel*)           DescriptionPanel                                            OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x3B8, 8, 0, 0})
	DMember(float)                                     GamepadZoomMultiplier                                       OFFSET(get<float>, {0x3C0, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.CodexJournal.OnAudioLogUnhoveredCB
	// void OnAudioLogUnhoveredCB(class UButtonBase* ButtonUnhovered);                                                          // [0x17d91d0] Final|Native|Protected 
	// Function /Script/Indiana.CodexJournal.OnAudioLogUnfocusedCB
	// void OnAudioLogUnfocusedCB(class UButtonBase* ButtonUnfocused);                                                          // [0x17d9140] Final|Native|Protected 
	// Function /Script/Indiana.CodexJournal.OnAudioLogListEntryAdded
	// void OnAudioLogListEntryAdded(class UGenericCollapsableListEntry* ListEntry, class UAudioLogDataAsset* DataAsset);       // [0x17d9070] Final|Native|Protected 
	// Function /Script/Indiana.CodexJournal.OnAudioLogHoveredCB
	// void OnAudioLogHoveredCB(class UButtonBase* ButtonHovered);                                                              // [0x17d8fe0] Final|Native|Protected 
	// Function /Script/Indiana.CodexJournal.OnAudioLogFocusedCB
	// void OnAudioLogFocusedCB(class UButtonBase* ButtonFocused);                                                              // [0x17d8f50] Final|Native|Protected 
};

/// Struct /Script/Indiana.IndianaComboButtonStyle
/// Size: 0x0958 (0x000008 - 0x000960)
class FIndianaComboButtonStyle : public FSlateWidgetStyle
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2400;

public:
	SMember(FIndianaButtonStyle)                       ButtonStyle                                                 OFFSET(getStruct<T>, {0x8, 2088, 0, 0})
	SMember(FSlateBrushContainer)                      DownArrowImage                                              OFFSET(getStruct<T>, {0x830, 144, 0, 0})
	SMember(FSlateBrushContainer)                      MenuBorderBrush                                             OFFSET(getStruct<T>, {0x8C0, 144, 0, 0})
	SMember(FMargin)                                   MenuBorderPadding                                           OFFSET(getStruct<T>, {0x950, 16, 0, 0})
};

/// Struct /Script/Indiana.IndianaComboBoxStyle
/// Size: 0x0960 (0x000008 - 0x000968)
class FIndianaComboBoxStyle : public FSlateWidgetStyle
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2408;

public:
	SMember(FIndianaComboButtonStyle)                  ComboButtonStyle                                            OFFSET(getStruct<T>, {0x8, 2400, 0, 0})
};

/// Class /Script/Indiana.ComboBoxStringBase
/// Size: 0x0B20 (0x000120 - 0x000C40)
class UComboBoxStringBase : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3136;

public:
	CMember(TArray<FString>)                           DefaultOptions                                              OFFSET(get<T>, {0x120, 16, 0, 0})
	SMember(FString)                                   SelectedOption                                              OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FIndianaComboBoxStyle)                     WidgetStyle                                                 OFFSET(getStruct<T>, {0x140, 2408, 0, 0})
	SMember(FMargin)                                   ContentPadding                                              OFFSET(getStruct<T>, {0xAA8, 16, 0, 0})
	DMember(float)                                     MaxListHeight                                               OFFSET(get<float>, {0xAB8, 4, 0, 0})
	DMember(bool)                                      HasDownArrow                                                OFFSET(get<bool>, {0xABC, 1, 0, 0})
	DMember(bool)                                      EnableGamepadNavigationMode                                 OFFSET(get<bool>, {0xABD, 1, 0, 0})
	SMember(FSlateColor)                               ForegroundColor                                             OFFSET(getStruct<T>, {0xB18, 40, 0, 0})
	DMember(bool)                                      bIsFocusable                                                OFFSET(get<bool>, {0xB40, 1, 0, 0})
	SMember(FDelegateProperty)                         OnGenerateWidgetEvent                                       OFFSET(getStruct<T>, {0xB44, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSelectionChanged                                          OFFSET(getStruct<T>, {0xB58, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOpening                                                   OFFSET(getStruct<T>, {0xB68, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHoveredMCD                                                OFFSET(getStruct<T>, {0xB78, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUnhoveredMCD                                              OFFSET(getStruct<T>, {0xB88, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFocusReceivedMCD                                          OFFSET(getStruct<T>, {0xB98, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFocusLostMCD                                              OFFSET(getStruct<T>, {0xBA8, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.ComboBoxStringBase.SetSelectedOption
	// void SetSelectedOption(FString Option);                                                                                  // [0x17d9910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.RemoveOption
	// bool RemoveOption(FString Option);                                                                                       // [0x17d97c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.RefreshOptions
	// void RefreshOptions();                                                                                                   // [0x17d97a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.OnSelectionChangedEvent__DelegateSignature
	// void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);           // [0x1c5deb0] MulticastDelegate|Public|Delegate 
	// Function /Script/Indiana.ComboBoxStringBase.OnOpeningEvent__DelegateSignature
	// void OnOpeningEvent__DelegateSignature();                                                                                // [0x1c5deb0] MulticastDelegate|Public|Delegate 
	// Function /Script/Indiana.ComboBoxStringBase.GetSelectedOptionIndex
	// int32_t GetSelectedOptionIndex();                                                                                        // [0x17d8f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.GetSelectedOption
	// FString GetSelectedOption();                                                                                             // [0x17d8ea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.GetOptionCount
	// int32_t GetOptionCount();                                                                                                // [0x17d8e70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.GetOptionAtIndex
	// FString GetOptionAtIndex(int32_t Index);                                                                                 // [0x17d8d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.FindOptionIndex
	// int32_t FindOptionIndex(FString Option);                                                                                 // [0x17d8cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComboBoxStringBase.ClearSelection
	// void ClearSelection();                                                                                                   // [0x17d8c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.ClearOptions
	// void ClearOptions();                                                                                                     // [0x17d8be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComboBoxStringBase.AddOption
	// void AddOption(FString Option);                                                                                          // [0x17d8b30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaComboBoxWidgetStyle
/// Size: 0x0968 (0x000038 - 0x0009A0)
class UIndianaComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2464;

public:
	SMember(FIndianaComboBoxStyle)                     ComboBoxStyle                                               OFFSET(getStruct<T>, {0x38, 2408, 0, 0})
};

/// Class /Script/Indiana.CommandPointWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UCommandPointWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UImage*)                             PipBulbImage                                                OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             FillImage                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTexture2D*)                         LockedBulbTexture                                           OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTexture2D*)                         UnlockedBulbTexture                                         OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTexture2D*)                         AvailablePipTexture                                         OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTexture2D*)                         UnavailablePipTexture                                       OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.CompanionBehaviorOptionWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UCompanionBehaviorOptionWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	SMember(FLocString)                                NameLocString                                               OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	SMember(FLocString)                                DescriptionLocString                                        OFFSET(getStruct<T>, {0x308, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      GamepadNextAudio                                            OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UOptionPresenterWidget*)             Option                                                      OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.CompanionBehaviorsWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class UCompanionBehaviorsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UCompanionBehaviorOptionWidget*)     FollowDistanceWidget                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UCompanionBehaviorOptionWidget*)     WeaponPreferenceWidget                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UCompanionBehaviorOptionWidget*)     CombatModeWidget                                            OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Struct /Script/Indiana.MoveToQueryInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FMoveToQueryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector)                                   Extent                                                      OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     ZOffset                                                     OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/Indiana.CompanionCommandComponent
/// Size: 0x02D8 (0x0000E0 - 0x0003B8)
class UCompanionCommandComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	DMember(float)                                     CalledShotTargetDegrees                                     OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     TargetRange                                                 OFFSET(get<float>, {0x104, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  CompanionCommandTimeDilationStarted                         OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  CompanionCommandTimeDilationEnded                           OFFSET(getStruct<T>, {0x148, 16, 0, 0})
	DMember(float)                                     TimeDilation                                                OFFSET(get<float>, {0x158, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  MeterChangedDelegate                                        OFFSET(getStruct<T>, {0x168, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  MeterMaxChangedDelegate                                     OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	DMember(float)                                     PerShotMeterChargePerSecond                                 OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     PerShotDamageMeterChargePerSecond                           OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(int32_t)                                   MaxChargeAmount                                             OFFSET(get<int32_t>, {0x198, 4, 0, 0})
	DMember(int32_t)                                   MaxAutoFillMoraleCharges                                    OFFSET(get<int32_t>, {0x19C, 4, 0, 0})
	DMember(float)                                     AutoFillRate                                                OFFSET(get<float>, {0x1A0, 4, 0, 0})
	CMember(TMap<ECompanionCommand, int32_t>)          CommandChargeCosts                                          OFFSET(get<T>, {0x1A8, 80, 0, 0})
	CMember(TMap<ECompanionCommand, float>)            CommandCooldowns                                            OFFSET(get<T>, {0x218, 80, 0, 0})
	DMember(float)                                     MoveToMaxRange                                              OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     MoveToQueryImpactRayPullback                                OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     MoveToQueryProjectionRange                                  OFFSET(get<float>, {0x300, 4, 0, 0})
	SMember(FMoveToQueryInfo)                          InitialMoveToQuery                                          OFFSET(getStruct<T>, {0x304, 16, 0, 0})
	SMember(FMoveToQueryInfo)                          SecondaryMoveToQuery                                        OFFSET(getStruct<T>, {0x314, 16, 0, 0})
	SMember(FMoveToQueryInfo)                          ProjectedMoveToQuery                                        OFFSET(getStruct<T>, {0x324, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompanionCommandComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x17d9640] Final|Native|Protected 
	// Function /Script/Indiana.CompanionCommandComponent.OnCalledShotCameraStep
	// void OnCalledShotCameraStep(class AActor* Attacker, ECalledShotCameraStep OldCameraStep, ECalledShotCameraStep NewCameraStep, bool bCloseRange); // [0x17d9260] Final|Native|Protected 
	// Function /Script/Indiana.CompanionCommandComponent.FillMeter
	// void FillMeter();                                                                                                        // [0x17d8c80] Final|Exec|Native|Public 
	// Function /Script/Indiana.CompanionCommandComponent.CompanionCommandInfinite
	// void CompanionCommandInfinite();                                                                                         // [0x17d8c20] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.TimedBehaviorStateInfo
/// Size: 0x0008 (0x000120 - 0x000128)
class UTimedBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.CompanionCommandTimedBehaviorStateInfo
/// Size: 0x0000 (0x000128 - 0x000128)
class UCompanionCommandTimedBehaviorStateInfo : public UTimedBehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.CompanionCommandFlankBehaviorStateInfo
/// Size: 0x0000 (0x000128 - 0x000128)
class UCompanionCommandFlankBehaviorStateInfo : public UCompanionCommandTimedBehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.CompanionCommandFlankRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UCompanionCommandFlankRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.CompanionCommandMoveToBehaviorStateInfo
/// Size: 0x0008 (0x000178 - 0x000180)
class UCompanionCommandMoveToBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
};

/// Class /Script/Indiana.CompanionCommandMoveToRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UCompanionCommandMoveToRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.CompanionCommandSuppressBehaviorStateInfo
/// Size: 0x0000 (0x000128 - 0x000128)
class UCompanionCommandSuppressBehaviorStateInfo : public UCompanionCommandTimedBehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.CompanionCommandSuppressRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UCompanionCommandSuppressRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Indiana.BotchableQuestInfo
/// Size: 0x001C (0x000000 - 0x00001C)
class FBotchableQuestInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   DeathEventID                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   DeathEndStateID                                             OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(bool)                                      bKeepDescription                                            OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Class /Script/Indiana.CompanionComponent
/// Size: 0x0150 (0x0000E0 - 0x000230)
class UCompanionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UTexture2D*)                         CompanionPortrait                                           OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(bool)                                      bAlwaysMatchWeaponsAndArmorToCharacterLevel                 OFFSET(get<bool>, {0xF8, 1, 0, 0})
	SMember(FString)                                   DeathGlobalVariableName                                     OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	CMember(TArray<FBotchableQuestInfo>)               BotchableQuestsOnDeath                                      OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(class UCalledShotData*)                    CalledShot                                                  OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(TSet<ESkill>)                              TaggedSkills                                                OFFSET(get<T>, {0x170, 80, 0, 0})
	DMember(float)                                     SkillCheckPercentToPlayer                                   OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(int32_t)                                   LevelsPerSkillIncrease                                      OFFSET(get<int32_t>, {0x1C4, 4, 0, 0})
	DMember(int32_t)                                   SkillIncreaseAmount                                         OFFSET(get<int32_t>, {0x1C8, 4, 0, 0})
	CMember(TArray<class UCompanionMoraleEvent*>)      MoraleEvents                                                OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               InterruptionMontages                                        OFFSET(get<T>, {0x1E0, 16, 0, 0})
	CMember(TArray<EWeaponPreference>)                 PotentialWeaponPreferences                                  OFFSET(get<T>, {0x1F8, 16, 0, 0})
	SMember(FLocString)                                WeaponPreferenceDescText                                    OFFSET(getStruct<T>, {0x208, 8, 0, 0})
	DMember(bool)                                      IsFollower                                                  OFFSET(get<bool>, {0x218, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompanionComponent.UpdateCompanionState
	// void UpdateCompanionState();                                                                                             // [0x17d9ac0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionComponent.SetOffering
	// void SetOffering(class UClass* PickupClass);                                                                             // [0x17d9880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionComponent.OnPlayerExitedAcknowledgeZone
	// void OnPlayerExitedAcknowledgeZone(class AActor* ZoneOwner);                                                             // [0x17d95b0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionComponent.OnPlayerEnteredAcknowledgeZone
	// void OnPlayerEnteredAcknowledgeZone(class AActor* ZoneOwner);                                                            // [0x17d9520] Final|Native|Protected 
	// Function /Script/Indiana.CompanionComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x17d93c0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionComponent.DropOffering
	// void DropOffering();                                                                                                     // [0x17d8c40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CompanionDetails
/// Size: 0x0018 (0x000300 - 0x000318)
class UCompanionDetails : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UTextBlockBase*)                     TitleTextBlock                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TopBodyTextBlock                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     BottomBodyTextBlock                                         OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.CompanionEntryWidget
/// Size: 0x0040 (0x000300 - 0x000340)
class UCompanionEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class UActorRenderWidget*)                 CharacterRender                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UButtonBase*)                        CharacterButton                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             LockedCharacterImage                                        OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UButtonBase*)                        CustomizeButton                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UVerticalBox*)                       DetailsVerticalBox                                          OFFSET(get<T>, {0x338, 8, 0, 0})
};

/// Class /Script/Indiana.CompanionEquipmentBarWidget
/// Size: 0x0170 (0x000300 - 0x000470)
class UCompanionEquipmentBarWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	CMember(class UItemViewerButtonWidget*)            Button0                                                     OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            Button1                                                     OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            Button2                                                     OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            Button3                                                     OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer0                                              OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer1                                              OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer2                                              OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer3                                              OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UVerticalBox*)                       WeaponsVerticalBox                                          OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UVerticalBox*)                       ArmorVerticalBox                                            OFFSET(get<T>, {0x3E8, 8, 0, 0})
};

/// Struct /Script/Indiana.PageDimensions
/// Size: 0x0030 (0x000000 - 0x000030)
class FPageDimensions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   VerticalIndent                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Rows                                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(TArray<class UClass*>)                     SupportedClasses                                            OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<EItemSorting>)                      SupportedSortingOptions                                     OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/Indiana.ItemViewerInitializer
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FItemViewerInitializer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(bool)                                      bShowAllCategory                                            OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FPageDimensions)                           AllDimensions                                               OFFSET(getStruct<T>, {0x8, 48, 0, 0})
	CMember(TArray<FPageDimensions>)                   PageDimensions                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bShowJunkCategory                                           OFFSET(get<bool>, {0x48, 1, 0, 0})
	SMember(FPageDimensions)                           JunkDimensions                                              OFFSET(getStruct<T>, {0x50, 48, 0, 0})
	CMember(TArray<class UTexture2D*>)                 Images                                                      OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FLocString>)                        PageHeaderText                                              OFFSET(get<T>, {0x90, 16, 0, 0})
};

/// Class /Script/Indiana.CompanionEquipmentWidget
/// Size: 0x01A8 (0x0003A0 - 0x000548)
class UCompanionEquipmentWidget : public UBaseInventoryItemManagement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1352;

public:
	CMember(class UCompanionEquipmentBarWidget*)       EquipmentBar                                                OFFSET(get<T>, {0x3A0, 8, 0, 0})
	SMember(FItemViewerInitializer)                    WeaponsInitializer                                          OFFSET(getStruct<T>, {0x3A8, 160, 0, 0})
	SMember(FItemViewerInitializer)                    ArmorInitializer                                            OFFSET(getStruct<T>, {0x448, 160, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ProhibitedCharacterClasses                                  OFFSET(get<T>, {0x4E8, 16, 0, 0})
	DMember(bool)                                      bIsArmor                                                    OFFSET(get<bool>, {0x4F8, 1, 0, 0})
	CMember(class UTextBlockBase*)                     NoInventoryReasonText                                       OFFSET(get<T>, {0x500, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompanionEquipmentWidget.OnItemRemovedFromPlayerInventory
	// void OnItemRemovedFromPlayerInventory(FItemStack& ItemStack);                                                            // [0x17dd770] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.CompanionEquipmentWidget.OnItemAddedToPlayerInventory
	// void OnItemAddedToPlayerInventory(FItemStack& ItemStack);                                                                // [0x17dd6d0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.CompanionEquipmentWidget.OnDragDrop_EquipItem
	// void OnDragDrop_EquipItem(class UIndianaDragDropOperation* Operation);                                                   // [0x17dd5b0] Final|Native|Protected 
};

/// Class /Script/Indiana.CompanionFollowBehaviorStateInfo
/// Size: 0x0018 (0x000120 - 0x000138)
class UCompanionFollowBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
};

/// Class /Script/Indiana.CompanionFollowRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class UCompanionFollowRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bClearDistantTargets                                        OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(bool)                                      bIsCompanionCommand                                         OFFSET(get<bool>, {0x69, 1, 0, 0})
	DMember(bool)                                      bRetreating                                                 OFFSET(get<bool>, {0x6A, 1, 0, 0})
};

/// Class /Script/Indiana.CompanionManager
/// Size: 0x0200 (0x000030 - 0x000230)
class UCompanionManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:


	/// Functions
	// Function /Script/Indiana.CompanionManager.SetCompanionWantsToTalk
	// void SetCompanionWantsToTalk(ESpecialObsidianID Companion, bool bWantsToTalk);                                           // [0x17de1b0] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.IsCompanionUnlocked
	// bool IsCompanionUnlocked(ESpecialObsidianID Companion);                                                                  // [0x17dd1e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.IsCompanionInRequestedParty
	// bool IsCompanionInRequestedParty(ESpecialObsidianID Companion);                                                          // [0x17dd160] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.IsCompanionInActiveParty
	// bool IsCompanionInActiveParty(ESpecialObsidianID Companion);                                                             // [0x17dd0e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.IsCompanionDismissed
	// bool IsCompanionDismissed(ESpecialObsidianID Companion);                                                                 // [0x17dd060] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.HasPlayerUnlockedCompanions
	// bool HasPlayerUnlockedCompanions();                                                                                      // [0x17dd030] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.GetCompanionWantsToTalk
	// bool GetCompanionWantsToTalk(ESpecialObsidianID Companion);                                                              // [0x17dcfb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.GetCompanionMorale
	// float GetCompanionMorale(ESpecialObsidianID Companion);                                                                  // [0x17dcf30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.GetCompanionGuid
	// FGuid GetCompanionGuid(ESpecialObsidianID SpecialID);                                                                    // [0x17dcea0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.CompanionManager.DebugUnlockCompanion
	// void DebugUnlockCompanion(ESpecialObsidianID Companion);                                                                 // [0x17dcd10] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManager.DebugAddCompanionMorale
	// void DebugAddCompanionMorale(char Companion, float MoraleAmount, bool bPositiveMorale);                                  // [0x17dcbf0] Final|Exec|Native|Public 
	// Function /Script/Indiana.CompanionManager.ChangeCompanionMorale
	// void ChangeCompanionMorale(ESpecialObsidianID Companion, EMoraleContribution Contribution, float MoraleAmount, bool bPositiveMorale, bool bOnlyActivePartyMembers); // [0x17dca40] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.CompanionManagerComponent
/// Size: 0x00B0 (0x0000E0 - 0x000190)
class UCompanionManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(TWeakObjectPtr<class AIndianaAiCharacter*>) ActiveFollower                                             OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<AIndianaAiCharacter*>>) ActiveCompanions                                         OFFSET(get<T>, {0xF0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDynamicRegisterCompanion                                  OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	CMember(TArray<class UClass*>)                     StartingCompanionList                                       OFFSET(get<T>, {0x150, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStealthChanged                                            OFFSET(getStruct<T>, {0x178, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompanionManagerComponent.SetCompanionOutlineMode
	// void SetCompanionOutlineMode(ECompanionOutlineMode OutlineMode);                                                         // [0x17de130] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.SendCharacterToShip
	// void SendCharacterToShip(class AIndianaAiCharacter* Companion);                                                          // [0x17de0a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManagerComponent.ScriptRemoveCompanionFromParty
	// void ScriptRemoveCompanionFromParty(class AIndianaAiCharacter* Companion);                                               // [0x17de020] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManagerComponent.ScriptAddCompanionToParty
	// void ScriptAddCompanionToParty(class AIndianaAiCharacter* Companion);                                                    // [0x17ddfa0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.CompanionManagerComponent.OnRestartController
	// void OnRestartController(class AIndianaAiCharacter* Character);                                                          // [0x17dddb0] Final|Native|Private 
	// Function /Script/Indiana.CompanionManagerComponent.OnPlayerLevelChanged
	// void OnPlayerLevelChanged(int32_t PlayerLevel);                                                                          // [0x17ddd20] Final|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.OnPlayerIndividualDetected
	// void OnPlayerIndividualDetected(class AIndianaAiCharacter* Detector);                                                    // [0x17ddc90] Final|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.OnPlayerCinematicModeChanged
	// void OnPlayerCinematicModeChanged(bool bCinematicModeEnabled);                                                           // [0x17ddb30] Final|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x17dd900] Final|Native|Private 
	// Function /Script/Indiana.CompanionManagerComponent.OnKill
	// void OnKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                    // [0x17dd810] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.CompanionManagerComponent.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty NewDifficulty);                                                                 // [0x17dd530] Final|Native|Private 
	// Function /Script/Indiana.CompanionManagerComponent.OnDeath
	// void OnDeath(FCauseDamageInfo& DamageInfo);                                                                              // [0x17dd490] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.CompanionManagerComponent.OnCauseDamage
	// void OnCauseDamage(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x17dd290] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.CompanionManagerComponent.IsPartyFull
	// bool IsPartyFull();                                                                                                      // [0x17dd260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CompanionManagerComponent.GetCompanionFromSlot
	// class AIndianaAiCharacter* GetCompanionFromSlot(ECompanionSlot Slot);                                                    // [0x17dce10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CompanionManagerComponent.GetActiveCompanionWithSpecialID
	// class AIndianaAiCharacter* GetActiveCompanionWithSpecialID(ESpecialObsidianID SpecialID);                                // [0x17dcd80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.CompanionManagerComponent.DebugKillCompanions
	// void DebugKillCompanions();                                                                                              // [0xbb4890] Final|Exec|Native|Protected 
	// Function /Script/Indiana.CompanionManagerComponent.AddPerkPointsToCompanions
	// void AddPerkPointsToCompanions(int32_t Points);                                                                          // [0x17dc9b0] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.CompanionMeterStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UCompanionMeterStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     Adjustment                                                  OFFSET(get<float>, {0x188, 4, 0, 0})
};

/// Class /Script/Indiana.CompanionMoraleEvent
/// Size: 0x0028 (0x000030 - 0x000058)
class UCompanionMoraleEvent : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(EMoraleContribution)                       Contribution                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(float)                                     MoraleAmount                                                OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(bool)                                      bPositiveMoral                                              OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bTriggerOnPlayer                                            OFFSET(get<bool>, {0x39, 1, 0, 0})
	CMember(class UEventListener*)                     EventListener                                               OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.CompanionMoraleStatusEffect
/// Size: 0x0010 (0x000188 - 0x000198)
class UCompanionMoraleStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	CMember(EMoraleContribution)                       Contribution                                                OFFSET(get<T>, {0x188, 1, 0, 0})
	DMember(float)                                     MoraleAmount                                                OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(bool)                                      bPositiveMoral                                              OFFSET(get<bool>, {0x190, 1, 0, 0})
};

/// Class /Script/Indiana.CompanionMoveToWidget
/// Size: 0x0008 (0x000300 - 0x000308)
class UCompanionMoveToWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class UBorder*)                            RootBorder                                                  OFFSET(get<T>, {0x300, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompanionMoveToWidget.OnNewLocation
	// void OnNewLocation();                                                                                                    // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.CompanionMoveToWidget.OnMoveToCancelled
	// void OnMoveToCancelled();                                                                                                // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.CompanionMoveToWidgetComponent
/// Size: 0x0020 (0x000670 - 0x000690)
class UCompanionMoveToWidgetComponent : public UIndianaWidgetComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1680;

public:
};

/// Class /Script/Indiana.CompanionOverviewWidget
/// Size: 0x00C0 (0x000300 - 0x0003C0)
class UCompanionOverviewWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	CMember(class UOverlay*)                           PortraitInfo                                                OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             CompanionPortraitImage                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             CompanionBulbImage                                          OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             CompanionActionImage                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             CompanionTalkImage                                          OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             HealthBarImage                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UOverlay*)                           ContentContainerOverlay                                     OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CompanionName                                               OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UStatusEffectBarWidget*)             StatusEffectBar                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTexture2D*)                         MoveToImage                                                 OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTexture2D*)                         FollowImage                                                 OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(float)                                     MeterInnerAnimTime                                          OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(int32_t)                                   MeterInnerAnimNumFrames                                     OFFSET(get<int32_t>, {0x364, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompanionOverviewWidget.OnNoStatusEffect
	// void OnNoStatusEffect();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionOverviewWidget.OnMadeInactive
	// void OnMadeInactive();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionOverviewWidget.OnMadeActive
	// void OnMadeActive();                                                                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionOverviewWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x17dd640] Final|Native|Protected 
	// Function /Script/Indiana.CompanionOverviewWidget.OnFirstStatusEffect
	// void OnFirstStatusEffect();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionOverviewWidget.OnCompanionStatusModeChanged
	// void OnCompanionStatusModeChanged(int32_t ModeIn);                                                                       // [0x17dd400] Final|Native|Protected 
	// Function /Script/Indiana.CompanionOverviewWidget.OnCombatStateChanged
	// void OnCombatStateChanged(bool bCombatIn, bool bRestoring);                                                              // [0x17dd330] Final|Native|Protected 
};

/// Class /Script/Indiana.CompanionPerksWidget
/// Size: 0x00B8 (0x000300 - 0x0003B8)
class UCompanionPerksWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	CMember(TArray<float>)                             TierHeights                                                 OFFSET(get<T>, {0x330, 16, 0, 0})
	DMember(float)                                     NormalPerkOverlayHeight                                     OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     ExtendedPerkOverlayHeight                                   OFFSET(get<float>, {0x344, 4, 0, 0})
	CMember(class UImage*)                             PerkOverlay                                                 OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PointsAvailableTextBlock                                    OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkTotalTextBlock                                          OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkTotalValueTextBlock                                     OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UPerksListWidget*)                   List                                                        OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UCharacterDescriptionPanel*)         DescriptionPanel                                            OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UImage*)                             TierBottomImage                                             OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class USizeBox*)                           DynamicSizeBox                                              OFFSET(get<T>, {0x380, 8, 0, 0})
};

/// Struct /Script/Indiana.CompanionEQSRequest
/// Size: 0x0028 (0x000000 - 0x000028)
class FCompanionEQSRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UEQSRequest_IndianaBase*)            EQSRequest                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     CloseRadius                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     FarRadius                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     IdealAngle                                                  OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MinAngle                                                    OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MovementDistanceThreshold                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/Indiana.ConversationCompanionConfig
/// Size: 0x0018 (0x000000 - 0x000018)
class FConversationCompanionConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector)                                   Companion1IdealLocation                                     OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   Companion2IdealLocation                                     OFFSET(getStruct<T>, {0xC, 12, 0, 0})
};

/// Class /Script/Indiana.CompanionPositionComponent
/// Size: 0x0178 (0x0000E0 - 0x000258)
class UCompanionPositionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(TArray<class UCompanionPositionData*>)     CompanionPositions                                          OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(class UCompanionPositionData*)             FollowerPositionData                                        OFFSET(get<T>, {0x100, 8, 0, 0})
	DMember(float)                                     CompanionMovementDistanceThreshold                          OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     InvalidPathTeleportTime                                     OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     MaxPathDistanceThreshold                                    OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     MaxLinearDistanceThreshold                                  OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     MinLinearDistanceToAllowTeleport                            OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     MinLinearDistanceToIgnorePlayerFacingCurrentLocation        OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     MinLinearDistanceToIgnorePlayerFacingTeleportLocation       OFFSET(get<float>, {0x130, 4, 0, 0})
	SMember(FCompanionEQSRequest)                      DefaultEQS                                                  OFFSET(getStruct<T>, {0x168, 40, 0, 0})
	SMember(FCompanionEQSRequest)                      StealthEQS                                                  OFFSET(getStruct<T>, {0x190, 40, 0, 0})
	SMember(FCompanionEQSRequest)                      ElevatorEQS                                                 OFFSET(getStruct<T>, {0x1B8, 40, 0, 0})
	DMember(float)                                     PostFallMovementDistanceThreshold                           OFFSET(get<float>, {0x1E0, 4, 0, 0})
	CMember(TArray<FConversationCompanionConfig>)      ConversationConfigs                                         OFFSET(get<T>, {0x1E8, 16, 0, 0})
	SMember(FCompanionEQSRequest)                      MoveToEQS                                                   OFFSET(getStruct<T>, {0x208, 40, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompanionPositionComponent.RequestForceTeleportCompanions
	// void RequestForceTeleportCompanions(FVector& Position1, FVector& Position2);                                             // [0x17dded0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CompanionPositionComponent.OnStealthChange
	// void OnStealthChange(bool bStealthed);                                                                                   // [0x17dde40] Final|Native|Protected 
	// Function /Script/Indiana.CompanionPositionComponent.OnPlayerConversationChange
	// void OnPlayerConversationChange(class UConversationInstance* Instance, bool bEntered);                                   // [0x17ddbc0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionPositionComponent.OnOccupiedElevatorMove
	// void OnOccupiedElevatorMove(class AElevator* Elevator);                                                                  // [0x17ddaa0] Final|Native|Protected 
	// Function /Script/Indiana.CompanionPositionComponent.OnOccupiedElevatorChange
	// void OnOccupiedElevatorChange(class AElevator* Elevator, bool bOccupied);                                                // [0x17dd9d0] Final|Native|Protected 
};

/// Class /Script/Indiana.CompanionPositionData
/// Size: 0x0048 (0x000030 - 0x000078)
class UCompanionPositionData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class AActor*)                             PositionActor                                               OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Indiana.CompanionScreenWrapperWidget
/// Size: 0x0040 (0x000308 - 0x000348)
class UCompanionScreenWrapperWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	CMember(class UCompanionsWidget*)                  Companions                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UActorRenderWidget*)                 ActorRender                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UItemViewerWidget*)                  CompanionItemViewer                                         OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(TArray<FPageDimensions>)                   PageDimensions                                              OFFSET(get<T>, {0x330, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompanionScreenWrapperWidget.FadeInSharedItemViewer
	// void FadeInSharedItemViewer();                                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionScreenWrapperWidget.AddItemToItemViewer
	// void AddItemToItemViewer(FItemStack& ItemStack);                                                                         // [0x17e1520] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.CompanionSelectionWidget
/// Size: 0x00A8 (0x000308 - 0x0003B0)
class UCompanionSelectionWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	SMember(FMulticastInlineDelegate)                  OnCompanionSelectionConfirmed                               OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UCompanionEntryWidget*)              CompanionEntry0                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UCompanionEntryWidget*)              CompanionEntry1                                             OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UCompanionEntryWidget*)              CompanionEntry2                                             OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UCompanionEntryWidget*)              CompanionEntry3                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UCompanionEntryWidget*)              CompanionEntry4                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UCompanionEntryWidget*)              CompanionEntry5                                             OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UTextBlockBase*)                     EncumberedWarningText                                       OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTextBlockBase*)                     EncumberenceValueText                                       OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(TArray<class UCompanionEntryWidget*>)      CompanionWidgets                                            OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(TArray<ESpecialObsidianID>)                DisplayOrder                                                OFFSET(get<T>, {0x380, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompanionSelectionWidget.SetCharacterSelected
	// void SetCharacterSelected(int32_t CharacterIndex, bool bSelected);                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionSelectionWidget.SetCharacterAvailable
	// void SetCharacterAvailable(int32_t CharacterIndex, bool bUsable);                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CompanionSelectionWidget.SelectionFailed
	// void SelectionFailed(int32_t CharacterIndex);                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.CompanionSkillSummary
/// Size: 0x0058 (0x000300 - 0x000358)
class UCompanionSkillSummary : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(class UGenericListEntryWidget*)            Skill0                                                      OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            Skill1                                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            Skill2                                                      OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            Ability0                                                    OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            Ability1                                                    OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            Ability2                                                    OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UStatsPerkSummaryWidget*)            StatsPerkSummary                                            OFFSET(get<T>, {0x348, 8, 0, 0})
};

/// Class /Script/Indiana.CompanionStatSummary
/// Size: 0x0048 (0x000300 - 0x000348)
class UCompanionStatSummary : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	CMember(class UGenericListEntryWidget*)            Level                                                       OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            Health                                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            HelmetArmor                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            BodyArmor                                                   OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            MeleeDamage                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UGenericListEntryWidget*)            RangedDamage                                                OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UCompanionBehaviorsWidget*)          CompanionBehaviors                                          OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UCharacterStatusEffectsWidget*)      CompanionStatusEffects                                      OFFSET(get<T>, {0x338, 8, 0, 0})
};

/// Class /Script/Indiana.CompanionStatsWidget
/// Size: 0x00B0 (0x000300 - 0x0003B0)
class UCompanionStatsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(class UCompanionDetails*)                  CompanionDetails                                            OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UCompanionStatSummary*)              CompanionStatSummary                                        OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UCompanionSkillSummary*)             CompanionSkillSummary                                       OFFSET(get<T>, {0x388, 8, 0, 0})
};

/// Class /Script/Indiana.CompanionsWidget
/// Size: 0x00B0 (0x000300 - 0x0003B0)
class UCompanionsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(class UCompanionStatsWidget*)              StatsWidget                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UCompanionPerksWidget*)              PerksWidget                                                 OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UCompanionEquipmentWidget*)          WeaponsEquipmentWidget                                      OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UCompanionEquipmentWidget*)          ArmorEquipmentWidget                                        OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UNavigationGroupWidget*)             NavigationBar                                               OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UScrollBox*)                         PageScrollBox                                               OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelWidget                                            OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UScrollingWidgetGroup*)              ScrollingTransitionGroup                                    OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(bool)                                      bFillEmptyNames                                             OFFSET(get<bool>, {0x378, 1, 0, 0})
	DMember(bool)                                      bShowBackPrompt                                             OFFSET(get<bool>, {0x379, 1, 0, 0})
	DMember(bool)                                      bIsLedger                                                   OFFSET(get<bool>, {0x37A, 1, 0, 0})
	CMember(TArray<class UTexture2D*>)                 CategoryImages                                              OFFSET(get<T>, {0x380, 16, 0, 0})
};

/// Struct /Script/Indiana.EntryData
/// Size: 0x0010 (0x000000 - 0x000010)
class FEntryData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UMaterialInstance*)                  MaterialInstance                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTexture2D*)                         InWorldBeaconImage                                          OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.CompassEntryData
/// Size: 0x0050 (0x000038 - 0x000088)
class UCompassEntryData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<EUIMarkerType, FEntryData>)           EntryDataMap                                                OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.CompassEntryWidget
/// Size: 0x0028 (0x000278 - 0x0002A0)
class UCompassEntryWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	DMember(float)                                     Orientation                                                 OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(bool)                                      bIsPlayerFacingEntry                                        OFFSET(get<bool>, {0x27C, 1, 0, 0})
	DMember(float)                                     EntryDistance                                               OFFSET(get<float>, {0x280, 4, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           ImageMaterial                                               OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x290, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompassEntryWidget.InitProperties
	// void InitProperties(FEntryData& EntryData);                                                                              // [0x1c5deb0] Event|Public|HasOutParms|BlueprintEvent 
};

/// Struct /Script/Indiana.CompassAreaBeaconEaseSetting
/// Size: 0x0008 (0x000000 - 0x000008)
class FCompassAreaBeaconEaseSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(EEaseType)                                 EaseType                                                    OFFSET(get<T>, {0x0, 4, 0, 0})
	DMember(float)                                     EaseExponent                                                OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Indiana.DistanceRatioToSpeedPair
/// Size: 0x0008 (0x000000 - 0x000008)
class FDistanceRatioToSpeedPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     DistanceRatio                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Class /Script/Indiana.CompassWidget
/// Size: 0x0DF0 (0x000300 - 0x0010F0)
class UCompassWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4336;

public:
	DMember(float)                                     Orientation                                                 OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     HostileInDistance                                           OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     HostileOutDistance                                          OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     HostilePacifistInDistance                                   OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     HostilePacifistOutDistance                                  OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(float)                                     NonHostileInDistance                                        OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     NonHostileOutDistance                                       OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     UpdateHostileProximitySetTime                               OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     POIInDistance                                               OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     POIOutDistance                                              OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     UpdatePOIMapTime                                            OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(uint32_t)                                  NumPooledEntries                                            OFFSET(get<uint32_t>, {0x330, 4, 0, 0})
	CMember(class UCanvasPanel*)                       BeaconCanvas                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class USizeBox*)                           ContentAnimationSizeBox                                     OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UBorder*)                            AnimationBorder                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UImage*)                             EnemiesLeftImage                                            OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UImage*)                             EnemiesRightImage                                           OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UClass*)                             BeaconWidgetClass                                           OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(TArray<class UCompassEntryWidget*>)        AvailableCompassWidgets                                     OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UImage*)                             AreaBeaconLight                                             OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(TMap<class AIndianaAiCharacter*, EUIMarkerType>) CompassStateMap                                       OFFSET(get<T>, {0x388, 80, 0, 0})
	CMember(TMap<class UPointOfInterestData*, EPointOfInterestState>) PointOfInterestStateMap                      OFFSET(get<T>, {0x3D8, 80, 0, 0})
	CMember(TMap<class UPointOfInterestData*, class APointOfInterest*>) PointOfInterestActorMap                    OFFSET(get<T>, {0x428, 80, 0, 0})
	SMember(FCompassAreaBeaconEaseSetting)             AreaBeaconFadeIn                                            OFFSET(getStruct<T>, {0x478, 8, 0, 0})
	SMember(FCompassAreaBeaconEaseSetting)             AreaBeaconFadeOut                                           OFFSET(getStruct<T>, {0x480, 8, 0, 0})
	DMember(float)                                     AreaBeaconFadeDuration                                      OFFSET(get<float>, {0x488, 4, 0, 0})
	SMember(FCompassAreaBeaconEaseSetting)             AreaBeaconMovement                                          OFFSET(getStruct<T>, {0x48C, 8, 0, 0})
	SMember(FVector2D)                                 AreaBeaconLightClamp                                        OFFSET(getStruct<T>, {0x494, 8, 0, 0})
	CMember(TArray<FDistanceRatioToSpeedPair>)         AreaBeaconDistanceRatioToSpeed                              OFFSET(get<T>, {0x4A0, 16, 0, 0})
	DMember(float)                                     AreaBeaconFallbackAnimationDuration                         OFFSET(get<float>, {0x4B0, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.CompassWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bHUDVisible);                                                                           // [0x17e1a50] Final|Native|Protected 
	// Function /Script/Indiana.CompassWidget.OnEnemyRemoved
	// void OnEnemyRemoved(class AIndianaAiCharacter* Detector);                                                                // [0x17e19c0] Final|Native|Public  
	// Function /Script/Indiana.CompassWidget.OnEnemyAdded
	// void OnEnemyAdded(class AIndianaAiCharacter* Detector);                                                                  // [0x17e1930] Final|Native|Public  
	// Function /Script/Indiana.CompassWidget.OnCompassSettingChanged
	// void OnCompassSettingChanged(int32_t CompassVisibilityModeIn);                                                           // [0x17e1810] Final|Native|Protected 
};

/// Class /Script/Indiana.CompensateForTTDStatusEffect
/// Size: 0x0018 (0x000188 - 0x0001A0)
class UCompensateForTTDStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
};

/// Class /Script/Indiana.ComponentDebugInterface
/// Size: 0x0000 (0x000030 - 0x000030)
class UComponentDebugInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.ComputerTerminal
/// Size: 0x0178 (0x0002B8 - 0x000430)
class AComputerTerminal : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	DMember(bool)                                      bSkipAutomaticConversation                                  OFFSET(get<bool>, {0x2F8, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerStateChange                                       OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerUse                                               OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerUnlockAttemptedLocked                             OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerInsufficientSkill                                 OFFSET(getStruct<T>, {0x330, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerUnlocked                                          OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerLocked                                            OFFSET(getStruct<T>, {0x350, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerHackStart                                         OFFSET(getStruct<T>, {0x360, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerHackSuccess                                       OFFSET(getStruct<T>, {0x370, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerHackInterrupted                                   OFFSET(getStruct<T>, {0x380, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnComputerHackLoopStop                                      OFFSET(getStruct<T>, {0x390, 16, 0, 0})
	CMember(EComputerLockState)                        InitialState                                                OFFSET(get<T>, {0x3A0, 1, 0, 0})
	DMember(bool)                                      bCanHack                                                    OFFSET(get<bool>, {0x3A1, 1, 0, 0})
	CMember(EOCLDifficulty)                            HackDifficulty                                              OFFSET(get<T>, {0x3A2, 1, 0, 0})
	CMember(class UClass*)                             HackItem                                                    OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UClass*)                             KeyItem                                                     OFFSET(get<T>, {0x3B0, 8, 0, 0})
	DMember(bool)                                      bRemoveKeyAfterUse                                          OFFSET(get<bool>, {0x3B8, 1, 0, 0})
	DMember(bool)                                      bIgnoreForCrime                                             OFFSET(get<bool>, {0x3B9, 1, 0, 0})
	SMember(FSpeakerGameDataReferenceID)               SpeakerReference                                            OFFSET(getStruct<T>, {0x3C0, 24, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UAkComponent*)                       AkComponent                                                 OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UConversationRegisterComponent*)     ConversationComponent                                       OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UComputerTerminalWidgetComponent*)   TerminalWidgetComponent                                     OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ComputerTerminal.UnlockComputer
	// void UnlockComputer(bool bFireComputerUnlockedEvent);                                                                    // [0x17e1be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminal.LockComputer
	// void LockComputer(bool bFireComputerLockedEvent);                                                                        // [0x17e1780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminal.GetExactHackDifficulty
	// char GetExactHackDifficulty();                                                                                           // [0x17e1760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ComputerTerminal.GetCurrentState
	// EComputerLockState GetCurrentState();                                                                                    // [0x17e1740] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminal.AttemptUse
	// EComputerTerminalResult AttemptUse(class AActor* Initiator, bool bForce);                                                // [0x17e1660] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminal.AttemptUnlock
	// EComputerTerminalResult AttemptUnlock(class AActor* Initiator);                                                          // [0x17e15c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InteractableAudioComponent
/// Size: 0x0070 (0x0000E0 - 0x000150)
class UInteractableAudioComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TMap<FName, class UAkPlaySoundEventEffect*>) NamedEvents                                               OFFSET(get<T>, {0xE0, 80, 0, 0})
	SMember(FEventEffectState)                         EventEffectState                                            OFFSET(getStruct<T>, {0x130, 32, 0, 0})


	/// Functions
	// Function /Script/Indiana.InteractableAudioComponent.StopCustomEventEffect
	// void StopCustomEventEffect(FName& Name);                                                                                 // [0x186aef0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.InteractableAudioComponent.PlayCustomEventEffect
	// void PlayCustomEventEffect(FName& Name);                                                                                 // [0x186a930] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.ComputerTerminalAudioComponent
/// Size: 0x0050 (0x000150 - 0x0001A0)
class UComputerTerminalAudioComponent : public UInteractableAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TMap<EComputerTerminalEventType, class UAkPlaySoundEventEffect*>) AudioEvents                          OFFSET(get<T>, {0x150, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.ComputerTerminalAudioComponent.Stop
	// void Stop(EComputerTerminalEventType Type);                                                                              // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ComputerTerminalAudioComponent.Play
	// void Play(EComputerTerminalEventType Type);                                                                              // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ComputerTerminalContainerWidget
/// Size: 0x0028 (0x000300 - 0x000328)
class UComputerTerminalContainerWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(class UImage*)                             ComputerLockedImage                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             ComputerUnlockedImage                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UBorder*)                            ContentContainer                                            OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UClass*)                             ConversationWidgetClass                                     OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UComputerTerminalWidget*)            ContentWidget                                               OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ComputerTerminalContainerWidget.OnConversationStateChange
	// void OnConversationStateChange(bool bHasStarted);                                                                        // [0x17e18a0] Final|Native|Protected 
};

/// Struct /Script/Indiana.ComputerBrandData
/// Size: 0x0040 (0x000000 - 0x000040)
class FComputerBrandData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FLocString>)                        BrandSlogans                                                OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         BrandIcon                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FLocString)                                BrandName                                                   OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.ComputerTerminalHeaderData
/// Size: 0x0080 (0x000038 - 0x0000B8)
class UComputerTerminalHeaderData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TMap<EComputerType, FComputerBrandData>)   Brands                                                      OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TWeakObjectPtr<class UComputerTerminalHeaderData*>) DLCComputerTerminalHeaderData                      OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/Indiana.ComputerTerminalHeaderWidget
/// Size: 0x00E0 (0x000300 - 0x0003E0)
class UComputerTerminalHeaderWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(class UTextBlockBase*)                     HeaderTextblock                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SubheaderTextblock                                          OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             LogoImage                                                   OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UHorizontalBox*)                     HeaderHBox                                                  OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UVerticalBox*)                       TextVerticalBox                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class USizeBox*)                           ImageSizeBox                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTexture2D*)                         CurrentImageTexture                                         OFFSET(get<T>, {0x340, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ComputerTerminalHeaderWidget.FadeInLogoImage
	// void FadeInLogoImage();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.ConversationBaseWidget
/// Size: 0x0058 (0x000308 - 0x000360)
class UConversationBaseWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(class UVerticalBox*)                       ResponsesContainer                                          OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(float)                                     MinSkipThreshold                                            OFFSET(get<float>, {0x348, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.ConversationBaseWidget.OnSkipInputAction
	// void OnSkipInputAction();                                                                                                // [0x17eb5d0] Native|Protected     
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse9InputAction
	// void OnResponse9InputAction();                                                                                           // [0x17eb5b0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse8InputAction
	// void OnResponse8InputAction();                                                                                           // [0x17eb590] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse7InputAction
	// void OnResponse7InputAction();                                                                                           // [0x17eb570] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse6InputAction
	// void OnResponse6InputAction();                                                                                           // [0x17eb550] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse5InputAction
	// void OnResponse5InputAction();                                                                                           // [0x17eb530] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse4InputAction
	// void OnResponse4InputAction();                                                                                           // [0x17eb510] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse3InputAction
	// void OnResponse3InputAction();                                                                                           // [0x17eb4f0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse2InputAction
	// void OnResponse2InputAction();                                                                                           // [0x17eb4d0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnResponse1InputAction
	// void OnResponse1InputAction();                                                                                           // [0x17eb4b0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationBaseWidget.OnPauseInputAction
	// void OnPauseInputAction();                                                                                               // [0x17eb490] Native|Protected     
};

/// Class /Script/Indiana.ComputerTerminalWidget
/// Size: 0x00B8 (0x000360 - 0x000418)
class UComputerTerminalWidget : public UConversationBaseWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
	CMember(class UNamedSlot*)                         HeaderSlot                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTextBlockBase*)                     BodyTextblock                                               OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  SelectLabel                                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  ExitLabel                                                   OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  ContinueLabel                                               OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UScrollBox*)                         ConversationTextScrollBox                                   OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(TArray<class UConversationResponseWidget*>) ResponseWidgets                                            OFFSET(get<T>, {0x390, 16, 0, 0})
	CMember(class UClass*)                             ResponseWidgetClass                                         OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UClass*)                             DefaultTerminalHeaderClass                                  OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UComputerTerminalHeaderWidget*)      HeaderWidget                                                OFFSET(get<T>, {0x3B0, 8, 0, 0})
	DMember(float)                                     BodyTextAnimationDuration                                   OFFSET(get<float>, {0x3B8, 4, 0, 0})
	DMember(float)                                     GamepadZoomMultiplier                                       OFFSET(get<float>, {0x3BC, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.ComputerTerminalWidget.OnExitInputAction
	// void OnExitInputAction();                                                                                                // [0x17e77e0] Final|Native|Protected 
	// Function /Script/Indiana.ComputerTerminalWidget.OnConversationEnded
	// void OnConversationEnded();                                                                                              // [0x17e77c0] Final|Native|Protected 
};

/// Class /Script/Indiana.ComputerTerminalWidgetComponent
/// Size: 0x0010 (0x000670 - 0x000680)
class UComputerTerminalWidgetComponent : public UIndianaWidgetComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:


	/// Functions
	// Function /Script/Indiana.ComputerTerminalWidgetComponent.OnOwnerStateChange
	// void OnOwnerStateChange(EComputerLockState PreviousState, EComputerLockState CurrentState);                              // [0x17e7800] Final|Native|Protected 
};

/// Class /Script/Indiana.Conditionals
/// Size: 0x0000 (0x000030 - 0x000030)
class UConditionals : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.Conditionals.PlayerHasPerk
	// bool PlayerHasPerk(FString Perk);                                                                                        // [0x17e7980] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.PlayerHasFlaw
	// bool PlayerHasFlaw(FString Flaw);                                                                                        // [0x17e78d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsWeaponEquipped
	// bool IsWeaponEquipped(FString Weapon, bool bIncludeDerivedClasses);                                                      // [0x17e76d0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsTrapStateEqual
	// bool IsTrapStateEqual(FGuid TrapObjectID, ETrapTriggerState State);                                                      // [0x17e75f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsTimeSlice
	// bool IsTimeSlice(int32_t StartHour, int32_t EndHour);                                                                    // [0x17e7520] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsSpeakerGender
	// bool IsSpeakerGender(EGender Gender);                                                                                    // [0x17e74a0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsSpeaker
	// bool IsSpeaker(FGuid& SpeakerID);                                                                                        // [0x17e7400] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Conditionals.IsRestrictedAreaEnabled
	// bool IsRestrictedAreaEnabled(FGuid RestrictedAreaID);                                                                    // [0x17e7360] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Conditionals.IsQuestTracked
	// bool IsQuestTracked(FGuid QuestID);                                                                                      // [0x17e71f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestStateVisited
	// bool IsQuestStateVisited(FGuid QuestID, int32_t NodeID);                                                                 // [0x17e7110] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestStateActive
	// bool IsQuestStateActive(FGuid QuestID, int32_t NodeID);                                                                  // [0x17e7030] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestStarted
	// bool IsQuestStarted(FGuid QuestID);                                                                                      // [0x17e6f90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestMentioned
	// bool IsQuestMentioned(FGuid QuestID);                                                                                    // [0x17e6ef0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestionNodeOnResponseBranch
	// bool IsQuestionNodeOnResponseBranch(int32_t QuestionNodeID, int32_t PlayerResponseNodeID);                               // [0x17e7290] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestEventTriggered
	// bool IsQuestEventTriggered(FGuid QuestID, int32_t QuestEventID);                                                         // [0x17e6e10] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestEndStateTriggered
	// bool IsQuestEndStateTriggered(FGuid QuestID, int32_t EndStateID);                                                        // [0x17e6d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestComplete
	// bool IsQuestComplete(FGuid QuestID);                                                                                     // [0x17e6c90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestAddendumTriggered
	// bool IsQuestAddendumTriggered(FGuid QuestID, int32_t AddendumID);                                                        // [0x17e6bb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsQuestActive
	// bool IsQuestActive(FGuid QuestID);                                                                                       // [0x17e6b10] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPlayerTravelDestinationLocked
	// bool IsPlayerTravelDestinationLocked(FString TravelDestination);                                                         // [0x17e6a60] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerTravelDestinationHidden
	// bool IsPlayerTravelDestinationHidden(FString TravelDestination);                                                         // [0x17e69b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerSkillValue
	// bool IsPlayerSkillValue(ESkill Skill, ComparisonOperator Operator, int32_t SkillValue, bool bUseCompanionInterjection, bool bPermanentOnly); // [0x17e6810] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerSkillLevelScaled
	// bool IsPlayerSkillLevelScaled(ESkill Skill, ComparisonOperator Operator, ECharacterSkillRange SkillRange, int32_t LevelOverride, bool bUseCompanionInterjection); // [0x17e6680] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerSkill
	// bool IsPlayerSkill(ESkill Skill, ComparisonOperator Operator, ECharacterSkillRange SkillRange, bool bUseCompanionInterjection); // [0x17e6530] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerShipCurrentAt
	// bool IsPlayerShipCurrentAt(FString ShipDestination);                                                                     // [0x17e6480] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerInStealth
	// bool IsPlayerInStealth();                                                                                                // [0x17e6450] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPlayerInCombat
	// bool IsPlayerInCombat();                                                                                                 // [0x17e6420] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPlayerDisguisedAs
	// bool IsPlayerDisguisedAs(FString Faction);                                                                               // [0x17e6370] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPlayerAwareOfTravelDestination
	// bool IsPlayerAwareOfTravelDestination(FString TravelDestination);                                                        // [0x17e62c0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerAwareOfRegion
	// bool IsPlayerAwareOfRegion(FString TravelRegion);                                                                        // [0x17e6210] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerAwareOfPointOfInterest
	// bool IsPlayerAwareOfPointOfInterest(FString PointOfInterestData);                                                        // [0x17e6160] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPlayerAttribute
	// bool IsPlayerAttribute(EAttribute Attribute, ComparisonOperator Operator, ECharacterAttributeRange AttributeRange);      // [0x17e6050] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsPhaseOfDay
	// bool IsPhaseOfDay(EPhaseOfDay Phase);                                                                                    // [0x17e5fd0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsPartyFull
	// bool IsPartyFull();                                                                                                      // [0x17e5fa0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsOCLStateEqual
	// bool IsOCLStateEqual(FGuid OCLObjectID, EOCLState State);                                                                // [0x17e5ec0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsItemQuantity
	// bool IsItemQuantity(FString Item, ComparisonOperator Operator, int32_t Quantity);                                        // [0x17e5d90] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInterrogationsPassedCount
	// bool IsInterrogationsPassedCount(ComparisonOperator Operator, int32_t Count);                                            // [0x17e5cc0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInterrogationInRestrictedArea
	// bool IsInterrogationInRestrictedArea();                                                                                  // [0x17e5c90] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInterrogationDisguised
	// bool IsInterrogationDisguised();                                                                                         // [0x17e5c60] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInterrogationCrime
	// bool IsInterrogationCrime(ECrimeType Crime);                                                                             // [0x17e5be0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsInMap
	// bool IsInMap(FString MapID);                                                                                             // [0x17e5b30] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsGlobalValue
	// bool IsGlobalValue(FString VariableName, ComparisonOperator Operator, int32_t Value);                                    // [0x17e59d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsFactionReputationRankType
	// bool IsFactionReputationRankType(FString Faction, EReputationRankType ReputationRankType, ComparisonOperator Operator);  // [0x17e58a0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsFactionReputationRank
	// bool IsFactionReputationRank(FString Faction, EReputationRankType ReputationRankType, int32_t Rank, ComparisonOperator Operator); // [0x17e5730] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsFactionRelationship
	// bool IsFactionRelationship(FString Faction, TEnumAsByte<ETeamAttitude> AttitudeType);                                    // [0x17e5640] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCurrentActiveCompanionAmount
	// bool IsCurrentActiveCompanionAmount(ComparisonOperator Operator, int32_t Quantity);                                      // [0x17e5570] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCompanionUnlocked
	// bool IsCompanionUnlocked(ESpecialObsidianID CompanionID);                                                                // [0x17e54f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCompanionMoral
	// bool IsCompanionMoral(ESpecialObsidianID CompanionID, ComparisonOperator Operator, float MoralAmount);                   // [0x17e53e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCompanionDismissed
	// bool IsCompanionDismissed(ESpecialObsidianID CompanionID);                                                               // [0x17e5360] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCompanionActiveInParty
	// bool IsCompanionActiveInParty(FGuid CompanionID);                                                                        // [0x17e52c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.IsCharacterGrouping
	// bool IsCharacterGrouping(ECharacterGrouping CharacterGrouping);                                                          // [0x17e5240] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsArmorEquipped
	// bool IsArmorEquipped(FString ArmorItem, bool bIncludeDerivedClasses);                                                    // [0x17e5150] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.IsAnyArmorEquipped
	// bool IsAnyArmorEquipped();                                                                                               // [0x17e5120] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HaveMinutesElapsedSinceNamedTimestamp
	// bool HaveMinutesElapsedSinceNamedTimestamp(FString TimestampName, int32_t Minutes);                                      // [0x17e5030] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HaveHoursElapsedSinceNamedTimestamp
	// bool HaveHoursElapsedSinceNamedTimestamp(FString TimestampName, int32_t Hours);                                          // [0x17e4f40] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HaveDaysElapsedSinceNamedTimestamp
	// bool HaveDaysElapsedSinceNamedTimestamp(FString TimestampName, int32_t Days);                                            // [0x17e4e50] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasQuestStateFailed
	// bool HasQuestStateFailed(FGuid QuestID, int32_t NodeID);                                                                 // [0x17e4d70] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.HasQuestFailed
	// bool HasQuestFailed(FGuid QuestID);                                                                                      // [0x17e4cd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.HasPlayerVisitedTravelDestination
	// bool HasPlayerVisitedTravelDestination(FString TravelDestination);                                                       // [0x17e4c20] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasPlayerVisitedRegion
	// bool HasPlayerVisitedRegion(FString TravelRegion);                                                                       // [0x17e4b70] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasPlayerOnlyHeardAboutPointOfInterest
	// bool HasPlayerOnlyHeardAboutPointOfInterest(FString PointOfInterestData);                                                // [0x17e4ac0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasPlayerDiscoveredPointOfInterest
	// bool HasPlayerDiscoveredPointOfInterest(FString PointOfInterestData);                                                    // [0x17e4a10] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasItemValue
	// bool HasItemValue(FString VariableName, FString Item);                                                                   // [0x17e47d0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasItemsByTag
	// bool HasItemsByTag(FString GameplayTag, ComparisonOperator Operator, int32_t Quantity);                                  // [0x17e48e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasItem
	// bool HasItem(FString Item);                                                                                              // [0x17e4720] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasDLC
	// bool HasDLC(EDownLoadableContent DLC);                                                                                   // [0x17e46a0] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.HasConversationNodeBeenVisited
	// bool HasConversationNodeBeenVisited(FGuid ConversationID, int32_t NodeID);                                               // [0x17e45c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.GetOCLState
	// void GetOCLState(FGuid OCLObjectID, EOCLState& State, EBoolResult& Result);                                              // [0x17e4490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.GetGlobalValue
	// int32_t GetGlobalValue(FString VariableName);                                                                            // [0x17e4390] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.DoesConversationNodePass
	// bool DoesConversationNodePass(FGuid ConversationID, int32_t NodeID);                                                     // [0x17e42b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.CompareGlobals
	// bool CompareGlobals(FString VariableName1, ComparisonOperator Operator, FString VariableName2);                          // [0x17e40f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.CompanionWantsToTalk
	// bool CompanionWantsToTalk(ESpecialObsidianID CompanionID);                                                               // [0x17e4070] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.CompanionHasPerk
	// bool CompanionHasPerk(FGuid CompanionID, FString Perk);                                                                  // [0x17e3f70] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.CanPlayerSafelyTakePickup
	// bool CanPlayerSafelyTakePickup(FGuid& PickupID);                                                                         // [0x17e3ed0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Conditionals.CanPlayerSafelyTakeItemTypeInContainer
	// bool CanPlayerSafelyTakeItemTypeInContainer(FGuid& ContainerID, FString Item);                                           // [0x17e3dc0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Conditionals.CanPlayerReadRedactions
	// bool CanPlayerReadRedactions();                                                                                          // [0x11e1370] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.CanPlayerDiscoverPointOfInterest
	// bool CanPlayerDiscoverPointOfInterest(FString PointOfInterestData);                                                      // [0x17e3d10] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.CanPlayerAccessTravelDestination
	// bool CanPlayerAccessTravelDestination(FString TravelDestination);                                                        // [0x17e3c60] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.CanBribe
	// bool CanBribe(FString VariableName, EBribeDifficulty BribeDifficulty, int32_t LevelOverride);                            // [0x17e3b30] Final|Native|Static|Public 
	// Function /Script/Indiana.Conditionals.CallGlobalConditional
	// bool CallGlobalConditional(FGuid GlobalScriptID);                                                                        // [0x17e3a90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Conditionals.AlwaysFalse
	// bool AlwaysFalse();                                                                                                      // [0x11e1370] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ConsumableAmmoPool
/// Size: 0x0028 (0x000080 - 0x0000A8)
class UConsumableAmmoPool : public UAmmoPoolBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<class UClass*>)                     IntrinsicConsumableClasses                                  OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(float)                                     DoubleReloadWindow                                          OFFSET(get<float>, {0x90, 4, 0, 0})
	CMember(class UConsumableItem*)                    CurrentConsumable                                           OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(int32_t)                                   CurrentConsumableIndex                                      OFFSET(get<int32_t>, {0xA0, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.ConsumableAmmoPool.GetNextConsumableClass
	// class UClass* GetNextConsumableClass();                                                                                  // [0x17eab50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ResourceItem
/// Size: 0x0028 (0x000118 - 0x000140)
class UResourceItem : public UItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TWeakObjectPtr<class UObject*>)            ItemMesh                                                    OFFSET(get<T>, {0x118, 8, 0, 0})
};

/// Class /Script/Indiana.ConsumableItem
/// Size: 0x00F0 (0x000140 - 0x000230)
class UConsumableItem : public UResourceItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(TArray<class UClass*>)                     SpellList                                                   OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TSet<FAddictionModifier>)                  AddictionModifiers                                          OFFSET(get<T>, {0x158, 80, 0, 0})
	DMember(bool)                                      bCanBeUsedAsAmmo                                            OFFSET(get<bool>, {0x1A8, 1, 0, 0})
	DMember(int32_t)                                   NumShotsAsAmmo                                              OFFSET(get<int32_t>, {0x1AC, 4, 0, 0})
	DMember(bool)                                      bCanBeUsedInMedKit                                          OFFSET(get<bool>, {0x1B0, 1, 0, 0})
	DMember(int32_t)                                   NumChargesInMedKit                                          OFFSET(get<int32_t>, {0x1B4, 4, 0, 0})
	DMember(float)                                     ItemDuration                                                OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(float)                                     HungerGained                                                OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     ThirstGained                                                OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(float)                                     ExhaustionGained                                            OFFSET(get<float>, {0x1C4, 4, 0, 0})
	SMember(FGameplayTagContainer)                     TagContainer                                                OFFSET(getStruct<T>, {0x1C8, 32, 0, 0})
	SMember(FGameplayTagContainer)                     ConsumableTagContainer                                      OFFSET(getStruct<T>, {0x1E8, 32, 0, 0})
	CMember(class URpgStatComponent*)                  OwnerStatComponent                                          OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(class URpgStat*)                           MedKitDurationStat                                          OFFSET(get<T>, {0x210, 8, 0, 0})
	SMember(FLocString)                                AmmoName                                                    OFFSET(getStruct<T>, {0x218, 8, 0, 0})
	CMember(class UTexture2D*)                         AmmoIcon                                                    OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ConsumableItem.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x17eb5f0] Final|Native|Protected 
};

/// Class /Script/Indiana.Container
/// Size: 0x0190 (0x0002B8 - 0x000448)
class AContainer : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1096;

public:
	SMember(FMulticastInlineDelegate)                  OnOCLOpenStart                                              OFFSET(getStruct<T>, {0x2F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenEnd                                                OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLCloseStart                                             OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLCloseEnd                                               OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenAttemptedLocked                                    OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenAttemptedBarred                                    OFFSET(getStruct<T>, {0x348, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLocked                                                 OFFSET(getStruct<T>, {0x358, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLUnlocked                                               OFFSET(getStruct<T>, {0x368, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLBarred                                                 OFFSET(getStruct<T>, {0x378, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLUnbarred                                               OFFSET(getStruct<T>, {0x388, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickStart                                          OFFSET(getStruct<T>, {0x398, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickSuccess                                        OFFSET(getStruct<T>, {0x3A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickInterrupted                                    OFFSET(getStruct<T>, {0x3B8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickLoopStop                                       OFFSET(getStruct<T>, {0x3C8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemAdded                                                 OFFSET(getStruct<T>, {0x3D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemRemoved                                               OFFSET(getStruct<T>, {0x3E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerOpenedContainer                                     OFFSET(getStruct<T>, {0x3F8, 16, 0, 0})
	SMember(FLocString)                                DisplayName                                                 OFFSET(getStruct<T>, {0x408, 8, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UOCLComponent*)                      OCLComponent                                                OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UInventoryComponent*)                InventoryComponent                                          OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x430, 8, 0, 0})
	SMember(FGameplayTag)                              GameplayTag                                                 OFFSET(getStruct<T>, {0x438, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.Container.IsLightEnabled
	// bool IsLightEnabled();                                                                                                   // [0x17eb060] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Container.HandleItemRemoved
	// void HandleItemRemoved(FItemStack& ItemStack);                                                                           // [0x17eaf10] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Container.HandleItemCountChanged
	// void HandleItemCountChanged(FItemStack& ItemStack);                                                                      // [0x17eae70] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Container.HandleItemAdded
	// void HandleItemAdded(FItemStack& ItemStack);                                                                             // [0x17eadd0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Container.GetItemsInContainer
	// void GetItemsInContainer(TArray<UItem*>& OutItems);                                                                      // [0x17eaaa0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.Conversation
/// Size: 0x00D0 (0x0000B8 - 0x000188)
class UConversation : public UFlowChart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.ConversationActorInterface
/// Size: 0x0000 (0x000030 - 0x000030)
class UConversationActorInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.ConversationActorInterface.GetSpeakerGameDataID
	// FGuid GetSpeakerGameDataID();                                                                                            // [0x17eac70] Native|Event|Public|HasDefaults|BlueprintEvent|Const 
	// Function /Script/Indiana.ConversationActorInterface.GetConversationDescription
	// FConversationDescription GetConversationDescription();                                                                   // [0x17ea9f0] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Indiana.ConversationBehaviorStateInfo
/// Size: 0x0018 (0x000120 - 0x000138)
class UConversationBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
};

/// Class /Script/Indiana.ConversationRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UConversationRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.ConversationBlueprintLibrary
/// Size: 0x0000 (0x000030 - 0x000030)
class UConversationBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartSlideshow
	// bool StartSlideshow(class UConversationData* Conversation, int32_t& InstanceId);                                         // [0x17ec0c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartPlayerControllerConversation
	// bool StartPlayerControllerConversation(ECheckBranches& Branches, int32_t& InstanceId, class UConversationData* ConversationData, int32_t StartNode, TArray<FCharacterDescription> OverrideCharacters, bool bAllowedDuringCombat); // [0x17ebe10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartConversationWithActorInterface
	// bool StartConversationWithActorInterface(ECheckBranches& Branches, TScriptInterface<Class> Actor, int32_t StartNode, int32_t& InstanceId); // [0x17ebc90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartConversationByDescriptionAtNode
	// bool StartConversationByDescriptionAtNode(ECheckBranches& Branches, FConversationDescription Description, int32_t StartNode, int32_t& InstanceId); // [0x17ebac0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartConversationByDescription
	// bool StartConversationByDescription(ECheckBranches& Branches, FConversationDescription Description, int32_t& InstanceId); // [0x17eb930] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.StartConversation
	// bool StartConversation(ECheckBranches& Branches, int32_t& InstanceId, class UConversationData* Conversation, int32_t StartNode, TArray<FCharacterDescription> OverrideCharacters, bool bAllowedDuringCombat); // [0x17eb680] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.MakeCharacterDescription
	// FCharacterDescription MakeCharacterDescription(class AActor* Actor);                                                     // [0x17eb090] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.ConversationBlueprintLibrary.GetSpeakerGameDataReferences
	// TArray<FSpeakerGameDataReferenceID> GetSpeakerGameDataReferences(class UConversationData* ConversationData);             // [0x17eacb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.EndConversation
	// int32_t EndConversation(int32_t ConversationInstanceID);                                                                 // [0x17ea960] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.CanStartConversationByDescription
	// bool CanStartConversationByDescription(ECheckBranches& Branches, FConversationDescription& Description);                 // [0x17ea840] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.CanStartConversation
	// bool CanStartConversation(ECheckBranches& Branches, class UConversationData* Conversation, int32_t StartNode, TArray<FCharacterDescription> OverrideCharacters, bool bAllowedDuringCombat); // [0x17ea5f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.AssignAllParticipantsAsOverrides
	// void AssignAllParticipantsAsOverrides(FConversationDescription& Description, class AActor* OverrideActor);               // [0x17ea4e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationBlueprintLibrary.AddConversationEndedDelegate
	// void AddConversationEndedDelegate(int32_t InstanceId, FDelegateProperty& Event);                                         // [0x17ea400] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.ConversationCamera
/// Size: 0x0118 (0x0000E0 - 0x0001F8)
class UConversationCamera : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	CMember(class UCineCameraComponent*)               CameraComponent                                             OFFSET(get<T>, {0xF8, 8, 0, 0})
	DMember(float)                                     CameraSphere                                                OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     CameraSphereSweepDistance                                   OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     NearDistance                                                OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     NearFocalLength                                             OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     FarDistance                                                 OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     FarFocalLength                                              OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     ConversationCameraHeight                                    OFFSET(get<float>, {0x118, 4, 0, 0})
	SMember(FVector)                                   EyeTargetOffsetAbove                                        OFFSET(getStruct<T>, {0x11C, 12, 0, 0})
	SMember(FVector)                                   EyeTargetOffsetBelow                                        OFFSET(getStruct<T>, {0x128, 12, 0, 0})
	SMember(FVector)                                   EyeTargetOffsetNormal                                       OFFSET(getStruct<T>, {0x134, 12, 0, 0})
	DMember(float)                                     EyeAboveThreshold                                           OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     EyeBelowThreshold                                           OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     ConversationLocationInterpSpeed                             OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     ConversationRotationInterpSpeed                             OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     ComputerTerminalLocationInterpSpeed                         OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     ComputerTerminalRotationInterpSpeed                         OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     RotationOffset                                              OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     TimeForEyesToStayOnLastSpeaker                              OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     TimeForHeadToStayOnLastSpeaker                              OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     ProximityCheckTime                                          OFFSET(get<float>, {0x1E8, 4, 0, 0})
	DMember(float)                                     IndividualProximityCheckDistance                            OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     CompanionProximityCheckDistance                             OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     ProximityCheckDistanceCap                                   OFFSET(get<float>, {0x1F4, 4, 0, 0})
};

/// Class /Script/Indiana.ConversationCroppingComponent
/// Size: 0x0000 (0x000520 - 0x000520)
class UConversationCroppingComponent : public UBoxComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1312;

public:
};

/// Class /Script/Indiana.ConversationData
/// Size: 0x0050 (0x000030 - 0x000080)
class UConversationData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FGuid)                                     ObsidianID                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   ConversationFile                                            OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TArray<class UConversationData*>)          TriggeredConversations                                      OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<class UObject*>)                    ReferencedItems                                             OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<char>)                              SerializedConversationData                                  OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Class /Script/Indiana.ConversationFramingComponent
/// Size: 0x0008 (0x000268 - 0x000270)
class UConversationFramingComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	DMember(float)                                     ConversationFocalLength                                     OFFSET(get<float>, {0x268, 4, 0, 0})
};

/// Class /Script/Indiana.ConversationHistoryWidget
/// Size: 0x0028 (0x000278 - 0x0002A0)
class UConversationHistoryWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(class UClass*)                             SpeakerClass                                                OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class USizeBox*)                           SizeBox                                                     OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UScrollBox*)                         ScrollBox                                                   OFFSET(get<T>, {0x288, 8, 0, 0})
	DMember(float)                                     GamepadScrollMultiplier                                     OFFSET(get<float>, {0x290, 4, 0, 0})
};

/// Struct /Script/Indiana.CharacterDescription
/// Size: 0x0020 (0x000000 - 0x000020)
class FCharacterDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FSpeakerGameDataReferenceID)               CharacterReferenceID                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Struct /Script/Indiana.CameraProperties
/// Size: 0x0010 (0x000000 - 0x000010)
class FCameraProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(ECameraFramingOffset)                      CameraOffset                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(bool)                                      bCameraTracksMovement                                       OFFSET(get<bool>, {0x1, 1, 0, 0})
	CMember(class AActor*)                             FixedCameraTarget                                           OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.ConversationDescription
/// Size: 0x01F8 (0x000000 - 0x0001F8)
class FConversationDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	CMember(class UConversationData*)                  ConversationData                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   StartNode                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<FCharacterDescription>)             Characters                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TMap<FSpeakerGameDataReferenceID, FCameraProperties>) SpeakerCameraOverrides                           OFFSET(get<T>, {0x20, 80, 0, 0})
	CMember(TMap<FSpeakerGameDataReferenceID, class AActor*>) SpeakerAudioOverrides                                OFFSET(get<T>, {0x70, 80, 0, 0})
	CMember(class UClass*)                             InstanceClass                                               OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(TMap<EPayloadID, class AActor*>)           InstancePayloadActors                                       OFFSET(get<T>, {0xC8, 80, 0, 0})
	SMember(FCameraProperties)                         BaseCameraProperties                                        OFFSET(getStruct<T>, {0x118, 16, 0, 0})
	DMember(bool)                                      bAllowBarkConversationDuringCombat                          OFFSET(get<bool>, {0x128, 1, 0, 0})
	CMember(class ACineCameraActor*)                   OverrideCamera                                              OFFSET(get<T>, {0x130, 8, 0, 0})
	SMember(FLogicalExpression)                        TeleportCondition                                           OFFSET(getStruct<T>, {0x138, 104, 0, 0})
	CMember(class AIndianaTargetPoint*)                PlayerTeleport                                              OFFSET(get<T>, {0x1A0, 8, 0, 0})
	DMember(bool)                                      bCompanionCutscene                                          OFFSET(get<bool>, {0x1A8, 1, 0, 0})
	CMember(class AIndianaTargetPoint*)                CompanionOneTeleport                                        OFFSET(get<T>, {0x1B0, 8, 0, 0})
	CMember(ESpecialObsidianID)                        CompanionOnePreference                                      OFFSET(get<T>, {0x1B8, 1, 0, 0})
	CMember(class AIndianaTargetPoint*)                CompanionTwoTeleport                                        OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(ESpecialObsidianID)                        CompanionTwoPreference                                      OFFSET(get<T>, {0x1C8, 1, 0, 0})
	CMember(class AIndianaTargetPoint*)                OwnerTeleport                                               OFFSET(get<T>, {0x1D0, 8, 0, 0})
};

/// Struct /Script/Indiana.TalkDependencies
/// Size: 0x0090 (0x000000 - 0x000090)
class FTalkDependencies : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UAnimMontage*)                       AnimMontage                                                 OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UFaceFXAnim*)                        AnimFaceFX                                                  OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/Indiana.ConversationInstance
/// Size: 0x03B0 (0x000030 - 0x0003E0)
class UConversationInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	SMember(FConversationDescription)                  Description                                                 OFFSET(getStruct<T>, {0x80, 504, 0, 0})
	CMember(class UConversationPlayer*)                ConversationPlayer                                          OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(TMap<FGuid, FTalkDependencies>)            TalkDependencies                                            OFFSET(get<T>, {0x358, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.ConversationInstance.OnParticipantEndPlay
	// void OnParticipantEndPlay(class AActor* Actor, TEnumAsByte<EEndPlayReason> Reason);                                      // [0x17eb3c0] Final|Native|Public  
	// Function /Script/Indiana.ConversationInstance.OnCharacterDeath
	// void OnCharacterDeath(class AActor* Instigator, FCauseDamageInfo& CauseDamageInfo);                                      // [0x17eb2d0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ConversationInstance.OnCharacterCombatStateChange
	// void OnCharacterCombatStateChange(bool bInCombat, bool bRestoring);                                                      // [0x17eb200] Final|Native|Protected 
	// Function /Script/Indiana.ConversationInstance.IsCurrentSpeakerGameDataReferenceID
	// bool IsCurrentSpeakerGameDataReferenceID(FSpeakerGameDataReferenceID& SpeakerGameData);                                  // [0x17eafb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ConversationInstance.GetPayloadActorChecked
	// class AActor* GetPayloadActorChecked(EPayloadID Key, ECheckBranches& Branches);                                          // [0x17eab90] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationInstance.GetCurrentSpeakerGameDataReferenceID
	// FSpeakerGameDataReferenceID GetCurrentSpeakerGameDataReferenceID();                                                      // [0x17eaa60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ConversationInterface
/// Size: 0x0000 (0x000030 - 0x000030)
class UConversationInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.ConversationInterface.ConversationStarted
	// bool ConversationStarted(class AActor* Speaker, FGuid& Guid, int32_t NodeID);                                            // [0x1c5deb0] Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Script/Indiana.ConversationInterface.ConversationNodeChanged
	// bool ConversationNodeChanged(class AActor* Character, class AActor* Camera, class AActor* Audio, int32_t NodeID);        // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Indiana.ConversationInterface.ConversationEnded
	// bool ConversationEnded(FGuid& Guid);                                                                                     // [0x1c5deb0] Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/Indiana.SkillCheckInterruption
/// Size: 0x0070 (0x000030 - 0x0000A0)
class USkillCheckInterruption : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:


	/// Functions
	// Function /Script/Indiana.SkillCheckInterruption.MontageFinished
	// void MontageFinished(class UAnimMontage* Montage, bool bInterrupted);                                                    // [0x17eb130] Final|Native|Private 
};

/// Class /Script/Indiana.ConversationLighting
/// Size: 0x00A8 (0x0002B8 - 0x000360)
class AConversationLighting : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(TMap<FName, FComponentReference>)          SocketLightReferenceMapping                                 OFFSET(get<T>, {0x2B8, 80, 0, 0})
	CMember(TMap<FName, class ULightComponent*>)       SocketLightComponentMapping                                 OFFSET(get<T>, {0x308, 80, 0, 0})
};

/// Class /Script/Indiana.ConversationManager
/// Size: 0x0470 (0x000030 - 0x0004A0)
class UConversationManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(class UConversation*)                      CachedConversation                                          OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UConversationPlayer*)                PreviewPlayer                                               OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(TMap<int32_t, class UConversationInstance*>) ActiveConversations                                       OFFSET(get<T>, {0x88, 80, 0, 0})
	CMember(TMap<FGuid, class UConversation*>)         LoadedConversations                                         OFFSET(get<T>, {0xD8, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.ConversationManager.MarkConversationNodeAsRead
	// void MarkConversationNodeAsRead(class UConversationData* Conversation, int32_t NodeID);                                  // [0x17ef900] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.ConversationManager.HasConversationNodeBeenVisited
	// bool HasConversationNodeBeenVisited(class UConversationData* Conversation, int32_t NodeID, ECheckBranches& Branches);    // [0x17ef7c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationManager.ClearConversationNodeAsRead
	// void ClearConversationNodeAsRead(class UConversationData* Conversation, int32_t NodeID);                                 // [0x17ef490] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ConversationMessageWidget
/// Size: 0x0050 (0x000278 - 0x0002C8)
class UConversationMessageWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(EIndianaUIColorType)                       SpeakerTextColor                                            OFFSET(get<T>, {0x278, 1, 0, 0})
	CMember(EIndianaUIColorType)                       DialogueTextColor                                           OFFSET(get<T>, {0x279, 1, 0, 0})
	DMember(bool)                                      bShouldLerpSizing                                           OFFSET(get<bool>, {0x27A, 1, 0, 0})
	DMember(float)                                     LerpTime                                                    OFFSET(get<float>, {0x27C, 4, 0, 0})
	CMember(class UTextBlockBase*)                     SpeakerTextBlock                                            OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MessageTextBlock                                            OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class USizeBox*)                           ContentSizeBox                                              OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UVerticalBox*)                       ContentVerticalBox                                          OFFSET(get<T>, {0x298, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ConversationMessageWidget.ContentLerpTick
	// void ContentLerpTick(float DeltaTime);                                                                                   // [0x17ef550] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.ConversationPlayer
/// Size: 0x02F8 (0x0000C0 - 0x0003B8)
class UConversationPlayer : public UFlowChartPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
};

/// Class /Script/Indiana.ConversationRegisterComponent
/// Size: 0x07F8 (0x0000E0 - 0x0008D8)
class UConversationRegisterComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2264;

public:
	SMember(FConversationDescription)                  Description                                                 OFFSET(getStruct<T>, {0xE0, 504, 0, 0})
	DMember(bool)                                      bCanInterrogate                                             OFFSET(get<bool>, {0x2D8, 1, 0, 0})
	SMember(FConversationDescription)                  BasicInterrogationDescription                               OFFSET(getStruct<T>, {0x2E0, 504, 0, 0})
	SMember(FConversationDescription)                  InterrogationDescription                                    OFFSET(getStruct<T>, {0x4D8, 504, 0, 0})
	DMember(bool)                                      bCanResumeConversation                                      OFFSET(get<bool>, {0x6D0, 1, 0, 0})
	SMember(FConversationDescription)                  ResumeDescription                                           OFFSET(getStruct<T>, {0x6D8, 504, 0, 0})


	/// Functions
	// Function /Script/Indiana.ConversationRegisterComponent.StartConversationByComponent
	// bool StartConversationByComponent(ECheckBranches& Branches, class AActor* ComponentOwner);                               // [0x17efd30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.ConversationRegisterComponent.OnResumeConversationTimerComplete
	// void OnResumeConversationTimerComplete();                                                                                // [0x17efcb0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationRegisterComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x17efbe0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationRegisterComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bInCombat, bool bRestoring);                                                               // [0x17efa50] Final|Native|Protected 
	// Function /Script/Indiana.ConversationRegisterComponent.OnChatterComplete
	// void OnChatterComplete(class UChatterPlayer* ChatterPlayer);                                                             // [0x17ef9c0] Final|Native|Protected 
};

/// Class /Script/Indiana.ConversationResponseWidget
/// Size: 0x0058 (0x000278 - 0x0002D0)
class UConversationResponseWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(class UImage*)                             ResponsePressedImage                                        OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ResponseNumberTextBlock                                     OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MessageTextBlock                                            OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      NormalPressedSound                                          OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      SkillCheckPressedSound                                      OFFSET(get<T>, {0x2A0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ConversationResponseWidget.OnSetSkillCheckRequiredCompanion
	// void OnSetSkillCheckRequiredCompanion(bool bSelectable);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationResponseWidget.OnSetSelectableOption
	// void OnSetSelectableOption(bool bSelectable);                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationResponseWidget.OnResponseSkillsChanged
	// void OnResponseSkillsChanged(bool bContainsSkillCheck);                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationResponseWidget.IsSelectable
	// bool IsSelectable();                                                                                                     // [0x17ef8d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ConversationSubtitleWidget
/// Size: 0x0008 (0x000308 - 0x000310)
class UConversationSubtitleWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class USubtitlesWidget*)                   Subtitle                                                    OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.ConversationWidget
/// Size: 0x01C0 (0x000360 - 0x000520)
class UConversationWidget : public UConversationBaseWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1312;

public:
	CMember(class UHorizontalBox*)                     InputLabelContainer                                         OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UConversationMessageWidget*)         ConversationMessage                                         OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UConversationHistoryWidget*)         History                                                     OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UVerticalBox*)                       DottedBGVerticalBox                                         OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UVerticalBox*)                       DottedHistoryBGVerticalBox                                  OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UButtonBase*)                        HistoryButton                                               OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  SelectLabel                                                 OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  HistoryToggleLabel                                          OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  ScrollLabel                                                 OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  ExitLabel                                                   OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UOverlay*)                           CanvasOverlay                                               OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UOverlay*)                           ConversationOverlay                                         OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SpeakerTextBlock                                            OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UOverlay*)                           HistoryOverlay                                              OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UOverlay*)                           InputOverlay                                                OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UOverlay*)                           ConversationSizeOverlay                                     OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UOverlay*)                           ResponseOverlay                                             OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class USizeBox*)                           HistorySizeBox                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class USizeBox*)                           DialogueSizeBox                                             OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class USizeBox*)                           ResponseSizeBox                                             OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class USizeBox*)                           BGGPSizeBox                                                 OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class USizeBox*)                           BGPCSizeBox                                                 OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UBorder*)                            DialogueBorder                                              OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UBorder*)                            ResponsesBorder                                             OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UClass*)                             ResponseWidgetClass                                         OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(TArray<class UConversationResponseWidget*>) ResponseWidgets                                            OFFSET(get<T>, {0x428, 16, 0, 0})
	SMember(FVector2D)                                 ConversationBackingSourceImageSize                          OFFSET(getStruct<T>, {0x438, 8, 0, 0})
	DMember(float)                                     ConversationDottedBGOffset                                  OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(float)                                     HistoryDottedBGOffset                                       OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(float)                                     ConversationHistoryActivePadding                            OFFSET(get<float>, {0x448, 4, 0, 0})
	DMember(float)                                     ConversationHistoryInactivePadding                          OFFSET(get<float>, {0x44C, 4, 0, 0})
	DMember(float)                                     ConversationUIAlphaLerpTransitionTime                       OFFSET(get<float>, {0x450, 4, 0, 0})
	DMember(float)                                     ConversationUIAlphaLerpInterpExponent                       OFFSET(get<float>, {0x454, 4, 0, 0})
	DMember(float)                                     ResponsesLerpTransitionTime                                 OFFSET(get<float>, {0x458, 4, 0, 0})
	DMember(float)                                     ResponsesLerpInterpExponent                                 OFFSET(get<float>, {0x45C, 4, 0, 0})
	DMember(float)                                     ResponsesAlphaTransitionTime                                OFFSET(get<float>, {0x460, 4, 0, 0})
	DMember(float)                                     ResponsesAlphaInterpExponent                                OFFSET(get<float>, {0x464, 4, 0, 0})
	DMember(float)                                     DialoguePanelLerpTransitionTime                             OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     DialoguePanelLerpInterpExponent                             OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     BackgroundWidthLerpTransitionTime                           OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     BackgroundWidthLerpInterpExponent                           OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     ConversationHistoryActiveBGWidth                            OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     ConversationHistoryInactiveBGWidth                          OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(float)                                     HistoryAlphaTransitionTime                                  OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     HistoryAlphaInterpExponent                                  OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     HistoryButtonAlphaTransitionTime                            OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     HistoryButtonAlphaInterpExponent                            OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     ConversationBlackBGOffset                                   OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     HistoryPanelOffset                                          OFFSET(get<float>, {0x494, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.ConversationWidget.ShouldShowResponseLine
	// bool ShouldShowResponseLine();                                                                                           // [0x17efd00] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.ConversationWidget.ShouldShowInputLabelLine
	// bool ShouldShowInputLabelLine();                                                                                         // [0x17efcd0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.ConversationWidget.SetHistoryBackingFillRatio
	// void SetHistoryBackingFillRatio(float DesiredHistoryHeight);                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationWidget.SetConversationBackingFillRatio
	// void SetConversationBackingFillRatio(float DesiredOverlayHeight);                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ConversationWidget.OnHistoryToggleInputAction
	// void OnHistoryToggleInputAction();                                                                                       // [0x17efbc0] Final|Native|Protected 
	// Function /Script/Indiana.ConversationWidget.OnHistoryScroll
	// void OnHistoryScroll(float InputDelta);                                                                                  // [0x17efb40] Final|Native|Protected 
	// Function /Script/Indiana.ConversationWidget.OnConversationEnded
	// void OnConversationEnded();                                                                                              // [0x17efb20] Final|Native|Protected 
};

/// Class /Script/Indiana.Corpse
/// Size: 0x00D8 (0x0002B8 - 0x000390)
class ACorpse : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	SMember(FMulticastInlineDelegate)                  OnItemAdded                                                 OFFSET(getStruct<T>, {0x2F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemRemoved                                               OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	SMember(FGameplayTagContainer)                     PreSeveredLimbsContainer                                    OFFSET(getStruct<T>, {0x318, 32, 0, 0})
	SMember(FLocString)                                DisplayName                                                 OFFSET(getStruct<T>, {0x338, 8, 0, 0})
	CMember(EGender)                                   Gender                                                      OFFSET(get<T>, {0x340, 1, 0, 0})
	CMember(class UCapsuleComponent*)                  CapsuleComponent                                            OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             SkeletalMeshComponent                                       OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UAppearanceComponent*)               AppearanceComponent                                         OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UInventoryComponent*)                InventoryComponent                                          OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UEquipmentComponent*)                EquipmentComponent                                          OFFSET(get<T>, {0x378, 8, 0, 0})
	SMember(FGameplayTag)                              CreatureType                                                OFFSET(getStruct<T>, {0x380, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.Corpse.HandleItemRemoved
	// void HandleItemRemoved(FItemStack& ItemStack);                                                                           // [0x17ef720] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Corpse.HandleItemAdded
	// void HandleItemAdded(FItemStack& ItemStack);                                                                             // [0x17ef680] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Corpse.GetItemsOnCorpse
	// void GetItemsOnCorpse(TArray<UItem*>& OutItems);                                                                         // [0x17ef5d0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.CoverBehaviorStateInfo
/// Size: 0x0028 (0x000178 - 0x0001A0)
class UCoverBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
};

/// Class /Script/Indiana.CoverRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UCoverRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.QuickCoverStateInfo
/// Size: 0x0000 (0x0001A0 - 0x0001A0)
class UQuickCoverStateInfo : public UCoverBehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
};

/// Class /Script/Indiana.QuickCoverRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UQuickCoverRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Struct /Script/Indiana.CoverAssetCollisionData
/// Size: 0x0040 (0x000000 - 0x000040)
class FCoverAssetCollisionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   BoxExtent                                                   OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x10, 48, 0, 0})
};

/// Class /Script/Indiana.CoverGenerationAssetData
/// Size: 0x0050 (0x000038 - 0x000088)
class UCoverGenerationAssetData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<TWeakObjectPtr<UStaticMesh*>, FCoverAssetCollisionData>) MeshCoverCollisionData                   OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.EnviromentNode
/// Size: 0x00A0 (0x0002B8 - 0x000358)
class AEnviromentNode : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(TSet<TWeakObjectPtr<AEnviromentNode*>>)    ReservationNodes                                            OFFSET(get<T>, {0x2B8, 80, 0, 0})
};

/// Class /Script/Indiana.CoverNode
/// Size: 0x0060 (0x000358 - 0x0003B8)
class ACoverNode : public AEnviromentNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	DMember(float)                                     SlotRadius                                                  OFFSET(get<float>, {0x358, 4, 0, 0})
	CMember(ECoverTypes)                               CoverType                                                   OFFSET(get<T>, {0x35C, 1, 0, 0})
	DMember(float)                                     ClockWiseWallTheta                                          OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     CounterClockWiseWallTheta                                   OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     ClockWiseFireTheta                                          OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     CounterClockWiseFireTheta                                   OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(bool)                                      bLocked                                                     OFFSET(get<bool>, {0x370, 1, 0, 0})
	SMember(FVector)                                   FireAngle                                                   OFFSET(getStruct<T>, {0x388, 12, 0, 0})
	SMember(FVector)                                   WorldFiringPosition                                         OFFSET(getStruct<T>, {0x394, 12, 0, 0})
	SMember(FVector)                                   WallAngle                                                   OFFSET(getStruct<T>, {0x3A0, 12, 0, 0})
	SMember(FVector)                                   WorldWallPosition                                           OFFSET(getStruct<T>, {0x3AC, 12, 0, 0})
};

/// Class /Script/Indiana.CoverNodeComponent
/// Size: 0x0000 (0x0000E0 - 0x0000E0)
class UCoverNodeComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
};

/// Class /Script/Indiana.CoverNodeGenerationVolume
/// Size: 0x0050 (0x000310 - 0x000360)
class ACoverNodeGenerationVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(bool)                                      bPlaceCoverNodes                                            OFFSET(get<bool>, {0x310, 1, 0, 0})
	DMember(bool)                                      bDeleteCoverNodes                                           OFFSET(get<bool>, {0x311, 1, 0, 0})
	DMember(float)                                     SampleSize                                                  OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(float)                                     MaxRayWallCheckDistance                                     OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     MaxRayCornerCheckDistance                                   OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     BackUpWallAngleDistance                                     OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     MaxWallCheckDistance                                        OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     MinFullHeightWallDistance                                   OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     MinHalfHeightWallDistance                                   OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     MaxAcceptableGapLength                                      OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     FiringAcceptanceHalfAngle                                   OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     CoverAcceptanceHalfAngle                                    OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     ZOffset                                                     OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     SlotSize                                                    OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     CoverTolerance                                              OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(bool)                                      bDisplayDebugEdges                                          OFFSET(get<bool>, {0x348, 1, 0, 0})
	CMember(TArray<class UBoxComponent*>)              MeshAssetCollisionVolumes                                   OFFSET(get<T>, {0x350, 16, 0, 0})
};

/// Class /Script/Indiana.CowerBehaviorStateInfo
/// Size: 0x0008 (0x000120 - 0x000128)
class UCowerBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.CowerRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UCowerRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.CrashLogging
/// Size: 0x0000 (0x000030 - 0x000030)
class UCrashLogging : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.CreateItemStatusEffect
/// Size: 0x0018 (0x000188 - 0x0001A0)
class UCreateItemStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TArray<FDefaultItemStack>)                 ItemsToCreate                                               OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(ECreateItemCountRule)                      CountRule                                                   OFFSET(get<T>, {0x198, 1, 0, 0})
};

/// Struct /Script/Indiana.CreditsEntry
/// Size: 0x0038 (0x000000 - 0x000038)
class FCreditsEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   DebugName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bIsText                                                     OFFSET(get<bool>, {0x10, 1, 0, 0})
	SMember(FCreditsTextType)                          TextType                                                    OFFSET(getStruct<T>, {0x11, 1, 0, 0})
	SMember(FLocString)                                LocString                                                   OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	DMember(bool)                                      bIsSpacing                                                  OFFSET(get<bool>, {0x1C, 1, 0, 0})
	SMember(FCreditsSpacingType)                       SpacingType                                                 OFFSET(getStruct<T>, {0x1D, 1, 0, 0})
	DMember(bool)                                      bIsImage                                                    OFFSET(get<bool>, {0x1E, 1, 0, 0})
	CMember(class UTexture2D*)                         ImageAsset                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(bool)                                      bOverrideImageSize                                          OFFSET(get<bool>, {0x28, 1, 0, 0})
	SMember(FVector2D)                                 OverrideImageSize                                           OFFSET(getStruct<T>, {0x2C, 8, 0, 0})
};

/// Struct /Script/Indiana.CreditsGroup
/// Size: 0x0020 (0x000000 - 0x000020)
class FCreditsGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   DebugName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FCreditsEntry>)                     Credits                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Indiana.CreditsData
/// Size: 0x0028 (0x000038 - 0x000060)
class UCreditsData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FCreditsEntry>)                     Credits                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FCreditsGroup>)                     CreditGroups                                                OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(class UCreditsFormattingData*)             CreditsFormattingData                                       OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Indiana.CreditsFormattingData
/// Size: 0x00B8 (0x000038 - 0x0000F0)
class UCreditsFormattingData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TMap<FCreditsTextType, FIndianaTextBlockStyle>) TextFormatting                                         OFFSET(get<T>, {0x38, 80, 0, 0})
	DMember(float)                                     TextWrapWidth                                               OFFSET(get<float>, {0x88, 4, 0, 0})
	CMember(TMap<FCreditsSpacingType, int32_t>)        SpaceFormatting                                             OFFSET(get<T>, {0x90, 80, 0, 0})
	DMember(float)                                     ScrollSpeed                                                 OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   InitialSpacing                                              OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	DMember(int32_t)                                   PostSpacing                                                 OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
};

/// Class /Script/Indiana.CreditsWidget
/// Size: 0x0078 (0x000308 - 0x000380)
class UCreditsWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	SMember(FMulticastInlineDelegate)                  CreditsClosedDelegate                                       OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	DMember(int32_t)                                   WidgetsPerSecond                                            OFFSET(get<int32_t>, {0x318, 4, 0, 0})
	CMember(class UCreditsData*)                       CreditsAsset                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UCreditsData*)                       SwitchCreditsAsset                                          OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(ESlateVisibility)                          ActiveVisibility                                            OFFSET(get<T>, {0x330, 1, 0, 0})
	CMember(ESlateVisibility)                          InactiveVisibility                                          OFFSET(get<T>, {0x331, 1, 0, 0})
	CMember(class UScrollBox*)                         CreditsScrollBox                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UVerticalBox*)                       CreditsVerticalBox                                          OFFSET(get<T>, {0x340, 8, 0, 0})
	SMember(FGlobalVariable)                           CreditsMusicGlobalVariable                                  OFFSET(getStruct<T>, {0x348, 16, 0, 0})
	DMember(int32_t)                                   OnCreditsStartGlobalVariableValue                           OFFSET(get<int32_t>, {0x358, 4, 0, 0})
	DMember(int32_t)                                   OnCreditsSkippedGlobalVariableValue                         OFFSET(get<int32_t>, {0x35C, 4, 0, 0})
	DMember(int32_t)                                   OnCreditsEndedGlobalVariableValue                           OFFSET(get<int32_t>, {0x360, 4, 0, 0})
};

/// Class /Script/Indiana.CrosshairWidget
/// Size: 0x0070 (0x000300 - 0x000370)
class UCrosshairWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UCanvasPanel*)                       RootCanvas                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UCanvasPanel*)                       WeaponContainer                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UOverlay*)                           StandardReticle                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             StaticImage                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             ReticuleLeft                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             ReticuleRight                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             ReticuleTop                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             ReticuleBottom                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             ReticuleCenter                                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UImage*)                             ReticuleStealth                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UImage*)                             ReticleMinimal                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UImage*)                             CauseDamageIndicator                                        OFFSET(get<T>, {0x358, 8, 0, 0})
};

/// Class /Script/Indiana.CrouchBehaviorStateInfo
/// Size: 0x0010 (0x000178 - 0x000188)
class UCrouchBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.CrouchRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UCrouchRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.IndianaNavLink
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class AIndianaNavLink : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(TArray<FNavigationLink>)                   NavLinks                                                    OFFSET(get<T>, {0x2C0, 16, 0, 0})
};

/// Class /Script/Indiana.PlaceableNavLink
/// Size: 0x0000 (0x0002D0 - 0x0002D0)
class APlaceableNavLink : public AIndianaNavLink
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
};

/// Class /Script/Indiana.ReservableNavLink
/// Size: 0x0018 (0x0002D0 - 0x0002E8)
class AReservableNavLink : public APlaceableNavLink
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	CMember(class UAISettings_Traverse*)               LeftToRightAISettings                                       OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UAISettings_Traverse*)               RightToLeftAISettings                                       OFFSET(get<T>, {0x2E0, 8, 0, 0})
};

/// Class /Script/Indiana.CrouchNavLink
/// Size: 0x0000 (0x0002E8 - 0x0002E8)
class ACrouchNavLink : public AReservableNavLink
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
};

/// Class /Script/Indiana.CurrencyItem
/// Size: 0x0028 (0x000118 - 0x000140)
class UCurrencyItem : public UItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TWeakObjectPtr<class UObject*>)            ItemMesh                                                    OFFSET(get<T>, {0x118, 8, 0, 0})
};

/// Class /Script/Indiana.CustomEventEffect
/// Size: 0x0000 (0x000030 - 0x000030)
class UCustomEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.CustomEventEffect.CustomTrigger
	// void CustomTrigger(class AActor* TargetActor, FEventEffectParams& Params);                                               // [0x1c5deb0] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.CustomEventEffect.CustomStop
	// void CustomStop(class AActor* TargetActor);                                                                              // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.CustomHitReceiver
/// Size: 0x0000 (0x0002B8 - 0x0002B8)
class ACustomHitReceiver : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:


	/// Functions
	// Function /Script/Indiana.CustomHitReceiver.CustomOnHit
	// void CustomOnHit(FHitResult& Hit);                                                                                       // [0x1c5deb0] Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent 
};

/// Struct /Script/Indiana.AppliedMaterialParam
/// Size: 0x0014 (0x000000 - 0x000014)
class FAppliedMaterialParam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	CMember(TWeakObjectPtr<class UMaterialInstanceDynamic*>) DynamicMaterial                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EMaterialParamType)                        ParamType                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0xC, 8, 0, 0})
};

/// Class /Script/Indiana.CustomMaterialModVisual
/// Size: 0x0028 (0x000068 - 0x000090)
class UCustomMaterialModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FAppliedMaterialParam>)             AppliedMaterialParams                                       OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(bool)                                      bApplyToBase                                                OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bApplyToChildren                                            OFFSET(get<bool>, {0x79, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.CustomMaterialModVisual.CopyParamOverrides
	// void CopyParamOverrides(class UMaterialInstanceDynamic* Source, FName DestinationSlotName);                              // [0x17f5300] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyVectorParamToAll
	// void ApplyVectorParamToAll(FName ParamName, FLinearColor ParamValue, FName OnlyApplyIfParamSet);                         // [0x17f51e0] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyVectorParam
	// void ApplyVectorParam(FName MaterialSlotName, FName ParamName, FLinearColor ParamValue);                                 // [0x17f50c0] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyTextureParamToAll
	// void ApplyTextureParamToAll(FName ParamName, TWeakObjectPtr<UTexture*> ParamValue, FName OnlyApplyIfParamSet);           // [0x17f4f20] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyTextureParam
	// void ApplyTextureParam(FName MaterialSlotName, FName ParamName, TWeakObjectPtr<UTexture*> ParamValue);                   // [0x17f4d80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyScalarParamToAll
	// void ApplyScalarParamToAll(FName ParamName, float ParamValue, FName OnlyApplyIfParamSet);                                // [0x17f4c60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.ApplyScalarParam
	// void ApplyScalarParam(FName MaterialSlotName, FName ParamName, float ParamValue);                                        // [0x17f4b40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.CustomMaterialModVisual.Apply
	// void Apply();                                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.CustomModVisual
/// Size: 0x0000 (0x000068 - 0x000068)
class UCustomModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:


	/// Functions
	// Function /Script/Indiana.CustomModVisual.RemoveVisualsTrigger
	// void RemoveVisualsTrigger();                                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CustomModVisual.PermanentlyApplyVisualsTrigger
	// void PermanentlyApplyVisualsTrigger(class UObject* NewTargetObject, class USkeletalMeshComponent* NewParentComponent, bool bShouldWeld); // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.CustomModVisual.NewMeshAddedBP
	// void NewMeshAddedBP(class USkeletalMeshComponent* TargetParentComponent, class UMeshComponent* MeshComponent);           // [0x17f53d0] Final|Native|Protected|BlueprintCallable|Const 
	// Function /Script/Indiana.CustomModVisual.ApplyVisualsTrigger
	// void ApplyVisualsTrigger(class UObject* NewTargetObject, class USkeletalMeshComponent* NewParentComponent);              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CustomModVisual.ApplyToNewMeshTrigger
	// void ApplyToNewMeshTrigger(class UMeshComponent* NewMesh);                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.CustomModVisual.ApplyToNewMeshPermanentlyTrigger
	// void ApplyToNewMeshPermanentlyTrigger(class UMeshComponent* NewMesh);                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/Indiana.CustomTimeDilationStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UCustomTimeDilationStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     CustomTimeDilation                                          OFFSET(get<float>, {0x188, 4, 0, 0})
};

/// Class /Script/Indiana.DamageableComponent
/// Size: 0x01B8 (0x0000E0 - 0x000298)
class UDamageableComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	SMember(FMulticastInlineDelegate)                  OnTakeDamage                                                OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	CMember(class UHitLocationData*)                   HitLocationData                                             OFFSET(get<T>, {0xF0, 8, 0, 0})
	SMember(FName)                                     HitFeedbackMaterialParam                                    OFFSET(getStruct<T>, {0xF8, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        HitFeedbackParamCurve                                       OFFSET(getStruct<T>, {0x100, 136, 0, 0})
};

/// Class /Script/Indiana.DamageByGameTagStatusEffect
/// Size: 0x0028 (0x000188 - 0x0001B0)
class UDamageByGameTagStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x188, 32, 0, 0})
	CMember(class URpgStat*)                           RpgStat                                                     OFFSET(get<T>, {0x1A8, 8, 0, 0})
};

/// Class /Script/Indiana.DamageEffectWidget
/// Size: 0x0070 (0x000300 - 0x000370)
class UDamageEffectWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UTextBlockBase*)                     DamageTextBlock                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UOverlay*)                           ResizeOverlay                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(int32_t)                                   FontOutlineSize                                             OFFSET(get<int32_t>, {0x320, 4, 0, 0})
	DMember(float)                                     FontFadeThreshold                                           OFFSET(get<float>, {0x324, 4, 0, 0})
};

/// Class /Script/Indiana.DamageFlagsStatusEffect
/// Size: 0x0010 (0x000188 - 0x000198)
class UDamageFlagsStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	CMember(TArray<EDamageFlags>)                      DamageFlags                                                 OFFSET(get<T>, {0x188, 16, 0, 0})
};

/// Class /Script/Indiana.DamageStatusEffect
/// Size: 0x0088 (0x000188 - 0x000210)
class UDamageStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	DMember(float)                                     DamageValue                                                 OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     DamageValuePercent                                          OFFSET(get<float>, {0x18C, 4, 0, 0})
	CMember(EDamageValueType)                          DamageValueType                                             OFFSET(get<T>, {0x190, 1, 0, 0})
	CMember(EDamageBaseAmount)                         BaseDamageType                                              OFFSET(get<T>, {0x191, 1, 0, 0})
	DMember(int8_t)                                    DamageScalars                                               OFFSET(get<int8_t>, {0x192, 1, 0, 0})
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class UClass*)                             DamageTypeSecondary                                         OFFSET(get<T>, {0x1A0, 8, 0, 0})
	SMember(FGameplayTag)                              BodyPart                                                    OFFSET(getStruct<T>, {0x1A8, 8, 0, 0})
	DMember(bool)                                      bAllDamageTypes                                             OFFSET(get<bool>, {0x1B0, 1, 0, 0})
	DMember(bool)                                      bIgnoreDTDR                                                 OFFSET(get<bool>, {0x1B1, 1, 0, 0})
	DMember(bool)                                      bAllowFriendlyFire                                          OFFSET(get<bool>, {0x1B2, 1, 0, 0})
	DMember(bool)                                      bAOE                                                        OFFSET(get<bool>, {0x1B3, 1, 0, 0})
	DMember(bool)                                      bCompanionCommand                                           OFFSET(get<bool>, {0x1B4, 1, 0, 0})
	DMember(bool)                                      bMelee                                                      OFFSET(get<bool>, {0x1B5, 1, 0, 0})
	SMember(FTransformedShape)                         AOECollisionShape                                           OFFSET(getStruct<T>, {0x1C0, 64, 0, 0})
	CMember(class URpgStat*)                           DamageScalingStat                                           OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Class /Script/Indiana.DamageTextActor
/// Size: 0x0020 (0x0002C0 - 0x0002E0)
class ADamageTextActor : public APooledActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(class UWorldSpaceDamageWidgetComponent*)   DamageTextComponent                                         OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x2D8, 8, 0, 0})
};

/// Class /Script/Indiana.DeactivatedBehaviorStateInfo
/// Size: 0x0000 (0x000120 - 0x000120)
class UDeactivatedBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/Indiana.DeactivatedRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UDeactivatedRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.DeathBehavior
/// Size: 0x0010 (0x000030 - 0x000040)
class UDeathBehavior : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x38, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.DeathBehavior.GetTargetMesh
	// class USkeletalMeshComponent* GetTargetMesh();                                                                           // [0x17f9580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.DeathBehavior.CustomTrigger
	// void CustomTrigger();                                                                                                    // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DeathBehavior.CustomTick
	// void CustomTick();                                                                                                       // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DeathBehavior.Complete
	// void Complete();                                                                                                         // [0x17f9540] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.DeathBehaviorStateInfo
/// Size: 0x0000 (0x000120 - 0x000120)
class UDeathBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/Indiana.DeathRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UDeathRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Indiana.DeathBodyTypeAudioEvent
/// Size: 0x0010 (0x000000 - 0x000010)
class FDeathBodyTypeAudioEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGameplayTag)                              DeathAudioEvent                                             OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      AudioEvent                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.DeathBodyTypeAudioEvents
/// Size: 0x0010 (0x000038 - 0x000048)
class UDeathBodyTypeAudioEvents : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FDeathBodyTypeAudioEvent>)          AudioEvents                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.DeathBodyTypeParticleSystems
/// Size: 0x0010 (0x000038 - 0x000048)
class UDeathBodyTypeParticleSystems : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<class UParticleSystem*>)            ParticleSystems                                             OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.DeathClassData
/// Size: 0x0010 (0x000038 - 0x000048)
class UDeathClassData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FDeathClassRow>)                    ClassTypeData                                               OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.DeathMenuWidget
/// Size: 0x0058 (0x000308 - 0x000360)
class UDeathMenuWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(class UVerticalBox*)                       OptionsVerticalBox                                          OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UButtonBase*)                        ResurrectButton                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UButtonBase*)                        ContinueButton                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UButtonBase*)                        LoadButton                                                  OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UButtonBase*)                        SettingsButton                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UButtonBase*)                        MainMenuButton                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UButtonBase*)                        QuitButton                                                  OFFSET(get<T>, {0x338, 8, 0, 0})
	SMember(FString)                                   MainMenuLevelName                                           OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	CMember(class UClass*)                             SettingsMenuClass                                           OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UClass*)                             SaveLoadClass                                               OFFSET(get<T>, {0x358, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.DeathMenuWidget.OnQueryLatestSaveFinished
	// void OnQueryLatestSaveFinished(FString LatestSaveName, bool bHasSaves);                                                  // [0x17f96a0] Final|Native|Protected 
	// Function /Script/Indiana.DeathMenuWidget.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x17f95b0] Final|Native|Protected 
};

/// Class /Script/Indiana.DeathOverrideStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UDeathOverrideStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             DeathClass                                                  OFFSET(get<T>, {0x188, 8, 0, 0})
};

/// Class /Script/Indiana.DeathStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UDeathStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0x188, 8, 0, 0})
};

/// Class /Script/Indiana.DebugOverlayWidget
/// Size: 0x0008 (0x000308 - 0x000310)
class UDebugOverlayWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UImage*)                             OverlayImage                                                OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree
/// Size: 0x0000 (0x000030 - 0x000030)
class UDecisionTree : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.DecisionTree.RunSuperDecisionTree
	// TArray<UDecisionTreeRequestData*> RunSuperDecisionTree(class AIndianaAiCharacter* Owner, FName EventType, class UAIEventInfo* EventInfo, EDecisionTreeRequestPriority& OutPriority); // [0x17f9bd0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.DecisionTree.RunMetaDecisionTree
	// TArray<UDecisionTreeRequestData*> RunMetaDecisionTree(class UClass* DecisionTree, class AIndianaAiCharacter* Owner, FName EventType, class UAIEventInfo* EventInfo, EDecisionTreeRequestPriority& OutPriority); // [0x17f99b0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.DecisionTree.RunDecisionTree
	// TArray<UDecisionTreeRequestData*> RunDecisionTree(class AIndianaAiCharacter* Owner, FName EventType, class UAIEventInfo* EventInfo, EDecisionTreeRequestPriority& OutPriority); // [0x17f97f0] Native|Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/Indiana.DecisionTree_AvoidMeleeAttack
/// Size: 0x0010 (0x000030 - 0x000040)
class UDecisionTree_AvoidMeleeAttack : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UMeleeBlockRequestData*)             MeleeBlockRequest                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             MetaDodgeTree                                               OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_Base
/// Size: 0x0000 (0x000030 - 0x000030)
class UDecisionTree_Base : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.DecisionTree_DefaultMeleeAttack
/// Size: 0x0008 (0x000030 - 0x000038)
class UDecisionTree_DefaultMeleeAttack : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class USearchRequestData*)                 SearchRequest                                               OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_CanidMeleeAttack
/// Size: 0x0030 (0x000038 - 0x000068)
class UDecisionTree_CanidMeleeAttack : public UDecisionTree_DefaultMeleeAttack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UDecisionTreeSequenceRequestData*)   CreateSpaceDashAttackRequest                                OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UDecisionTreeSequenceRequestData*)   DashAttackRequest                                           OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           HowlRequest                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           DodgeRequest                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     MinTargetDistance                                           OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(class UClass*)                             HowlStatusEffect                                            OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_CanidOnStatusEffectAdded
/// Size: 0x0030 (0x000030 - 0x000060)
class UDecisionTree_CanidOnStatusEffectAdded : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UDecisionTreeRequestData*)           HowlRequest                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           DodgeRequest                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     MinTargetDistance                                           OFFSET(get<float>, {0x40, 4, 0, 0})
	CMember(class UClass*)                             HowlStatusEffect                                            OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UClass*)                             AlphaDeathStatusEffect                                      OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           AlphaDeathFleeRequest                                       OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_CanidMeleeRecovery
/// Size: 0x0010 (0x000030 - 0x000040)
class UDecisionTree_CanidMeleeRecovery : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(EMeleeAction)                              DashAttackMeleeAction                                       OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(class UMoveToRequestData*)                 DashAttackCreateRangeMoveRequest                            OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_Combined
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_Combined : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<class UClass*>)                     DecisionTrees                                               OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bIncludeSuperDecisionTree                                   OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_CombinedRequests
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_CombinedRequests : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<class UDecisionTreeRequestData*>)   Requests                                                    OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bIncludeSuperDecisionTree                                   OFFSET(get<bool>, {0x40, 1, 0, 0})
	CMember(EDecisionTreeRequestPriority)              Priority                                                    OFFSET(get<T>, {0x41, 1, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_CompanionCalledShot
/// Size: 0x0028 (0x000030 - 0x000058)
class UDecisionTree_CompanionCalledShot : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UDecisionTreeSequenceRequestData*)   MeleeCalledShotRequest                                      OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDecisionTreeSequenceRequestData*)   UnlimitedRangeCalledShotRequest                             OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UDecisionTreeSequenceRequestData*)   LimitedRangeCalledShotRequest                               OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDecisionTreeSequenceRequestData*)   FromFurnitureCalledShotRequest                              OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UDecisionTreeSequenceRequestData*)   FromFallCalledShotRequest                                   OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_DefaultAttack
/// Size: 0x0028 (0x000030 - 0x000058)
class UDecisionTree_DefaultAttack : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UIdleRequestData*)                   IdleRequest                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             MeleeUnreachableDecisionTree                                OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UClass*)                             MeleeDecisionTree                                           OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UClass*)                             RangedDecisionTree                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UClass*)                             WeaponPreferenceDecisionTree                                OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_DefaultOutOfCombat
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_DefaultOutOfCombat : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UClass*)                             UnawareDecisionTree                                         OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class USuspiciousRequestData*)             SuspiciousRequest                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UInvestigateRequestData*)            InvestigateRequest                                          OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_DefaultPacifist
/// Size: 0x0010 (0x000030 - 0x000040)
class UDecisionTree_DefaultPacifist : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UCowerRequestData*)                  CowerRequest                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UPopRequestData*)                    PopRequest                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_DefaultRangeAttack
/// Size: 0x0050 (0x000030 - 0x000080)
class UDecisionTree_DefaultRangeAttack : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UCoverRequestData*)                  CoverRequest                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UQuickCoverRequestData*)             QuickCoverRequest                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class URangeRequestData*)                  RangedRequest                                               OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class URangeRequestData*)                  RangeRequestNoRangeRequirement                              OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class URangeRequestData*)                  StationaryRangedRequest                                     OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class URangeRequestData*)                  AggresiveRangeRequest                                       OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class URetreatRequestData*)                RetreatRequest                                              OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UCompanionFollowRequestData*)        CompanionRetreatRequest                                     OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class USearchRequestData*)                 MoveCloserSearch                                            OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UClass*)                             SearchMetaTree                                              OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_DefaultSwitchContext
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_DefaultSwitchContext : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UDecisionTreeSequenceRequestData*)   ApproachRequest                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class USwitchContextRequestData*)          CombatRequest                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class USwitchContextRequestData*)          OutOfCombatRequest                                          OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_Dodge
/// Size: 0x0028 (0x000030 - 0x000058)
class UDecisionTree_Dodge : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UDodgeRequestData*)                  LeftRequest                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDodgeRequestData*)                  BackRequest                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UDodgeRequestData*)                  RightRequest                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      bDodgeAlongAttack                                           OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(float)                                     AvoidanceToleranceDegrees                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_ForceCompanionFollow
/// Size: 0x0008 (0x000030 - 0x000038)
class UDecisionTree_ForceCompanionFollow : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UCompanionFollowRequestData*)        CompanionFollowRequest                                      OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_GainedAwareness
/// Size: 0x0000 (0x000030 - 0x000030)
class UDecisionTree_GainedAwareness : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.DecisionTree_GorillianRangeComplete
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_GorillianRangeComplete : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UClass*)                             RequestMeleeDecisionTree                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           BurrowRequest                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     DistanceToSwitchToMelee                                     OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PercentChanceToBurrow                                       OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_GorillianMeleeComplete
/// Size: 0x0010 (0x000030 - 0x000040)
class UDecisionTree_GorillianMeleeComplete : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UDecisionTreeRequestData*)           BurrowRequest                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     PercentChanceToBurrow                                       OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_GorillianBurrowComplete
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_GorillianBurrowComplete : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UClass*)                             RequestMeleeDecisionTree                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             RequestRangeDecisionTree                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     RangeThreshold                                              OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_GorillianCombatStart
/// Size: 0x0020 (0x000030 - 0x000050)
class UDecisionTree_GorillianCombatStart : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UClass*)                             RequestMeleeDecisionTree                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             RequestRangeDecisionTree                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     RangeThreshold                                              OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     InRangeThresholdRangeWeight                                 OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     OutRangeThresholdRangeWeight                                OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_PrimalRavager
/// Size: 0x0010 (0x000030 - 0x000040)
class UDecisionTree_PrimalRavager : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UDecisionTreeRequestData*)           BurrowRequest                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   AttackCount                                                 OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_JumpReposition
/// Size: 0x0028 (0x000030 - 0x000058)
class UDecisionTree_JumpReposition : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      bEnableJumpOnEnterCombat                                    OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bEnableJumpForward                                          OFFSET(get<bool>, {0x31, 1, 0, 0})
	SMember(FAISelector_FValue)                        JumpForwardMinRange                                         OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(class UJumpRequestData*)                   JumpForwardRequest                                          OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     Probability                                                 OFFSET(get<float>, {0x4C, 4, 0, 0})
	CMember(class UJumpRequestData*)                   JumpStrafeRequest                                           OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_LineOfFireBlocked
/// Size: 0x0008 (0x000030 - 0x000038)
class UDecisionTree_LineOfFireBlocked : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UClass*)                             DefaultDecisionTree                                         OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_LostTarget
/// Size: 0x0010 (0x000030 - 0x000040)
class UDecisionTree_LostTarget : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class URepositionSearchRequestData*)       RepositionRequestData                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class USearchRequestData*)                 SearchRequestData                                           OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_MantiQueenDefaultTree
/// Size: 0x0050 (0x000030 - 0x000080)
class UDecisionTree_MantiQueenDefaultTree : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UClass*)                             DefaultAttack                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             RequestMeleeDecisionTree                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UClass*)                             RequestRangeDecisionTree                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           SpitRequest                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           GlobRequest                                                 OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     GlobCooldown                                                OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(class UDecisionTreeRequestData*)           TailWhipRequest                                             OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(float)                                     TailWhipRange                                               OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     TailWhipCooldown                                            OFFSET(get<float>, {0x6C, 4, 0, 0})
	CMember(class UDecisionTreeRequestData*)           SpawnRequest                                                OFFSET(get<T>, {0x70, 8, 0, 0})
	DMember(float)                                     SpawnCooldown                                               OFFSET(get<float>, {0x78, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_MantiQueenRangeComplete
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_MantiQueenRangeComplete : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UClass*)                             GlobWeapon                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           SpitRequest                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UClass*)                             RequestMeleeDecisionTree                                    OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_MantiBlock
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_MantiBlock : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UClass*)                             DefaultAttack                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDecisionTreeRequestData*)           BlockRequest                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     DistanceToBlock                                             OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   AttackCount                                                 OFFSET(get<int32_t>, {0x44, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_MeleeUnreachable
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_MeleeUnreachable : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class USearchRequestData*)                 ReachableSearchRequest                                      OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class URequestTargetRequestData*)          UnreachableTargetRequest                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class URetreatRequestData*)                RetreatRequest                                              OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_PreEmptiveMeleeAction
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_PreEmptiveMeleeAction : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UMeleeBlockRequestData*)             MeleeBlockRequest                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             MetaDodgeTree                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     AcceptablePremptivActionRange                               OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_QueueBehavior
/// Size: 0x0048 (0x000030 - 0x000078)
class UDecisionTree_QueueBehavior : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UIdleRequestData*)                   IdleRequest                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UPatrolRequestData*)                 PatrolRequest                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UWanderRequestData*)                 WanderRequest                                               OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UFurnitureRequestData*)              FurnitureRequest                                            OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UCompanionFollowRequestData*)        CompanionFollowRequest                                      OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UJumpRequestData*)                   JumpRequest                                                 OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UCrouchRequestData*)                 CrouchRequest                                               OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UFollowRequestData*)                 FollowRequest                                               OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UWalkRequestData*)                   WalkRequest                                                 OFFSET(get<T>, {0x70, 8, 0, 0})
};

/// Struct /Script/Indiana.RandomRequestItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FRandomRequestItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UDecisionTreeRequestData*)           Request                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_RandomRequest
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_RandomRequest : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bDefaultToSuperDecisionTreeOnNoValidRequests                OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(TArray<FRandomRequestItem>)                RandomRequestItems                                          OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_RaptidonMatriarchOnPhaseChange
/// Size: 0x0008 (0x000030 - 0x000038)
class UDecisionTree_RaptidonMatriarchOnPhaseChange : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UDecisionTreeRequestData*)           SwitchWeaponPreferenceRequest                               OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_ReactiveRangeAction
/// Size: 0x0010 (0x000030 - 0x000040)
class UDecisionTree_ReactiveRangeAction : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UClass*)                             MetaDodgeTree                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             MetaBlockTree                                               OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_SecurityBotOutOfCombat
/// Size: 0x0010 (0x000030 - 0x000040)
class UDecisionTree_SecurityBotOutOfCombat : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UClass*)                             DefaultOutOfCombatDecisionTree                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDeactivatedRequestData*)            DeactivatedRequest                                          OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_WeaponPreference
/// Size: 0x0038 (0x000030 - 0x000068)
class UDecisionTree_WeaponPreference : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class USwitchWeaponRequestData*)           SwitchToPrimaryWeaponRequest                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class USwitchWeaponRequestData*)           SwitchToRangedWeaponRequest                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class USwitchWeaponRequestData*)           SwitchToLimitedRangedWeaponRequest                          OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class USwitchWeaponRequestData*)           SwitchToUnlimitedRangedWeaponRequest                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class USwitchWeaponRequestData*)           SwitchToMeleeWeaponRequest                                  OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class USwitchWeaponRequestData*)           SwitchToUnarmedWeaponRequest                                OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(bool)                                      bIgnoreCooldown                                             OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(bool)                                      bUseSettingOverride                                         OFFSET(get<bool>, {0x61, 1, 0, 0})
	CMember(EWeaponPreference)                         OverrideWeaponPreference                                    OFFSET(get<T>, {0x62, 1, 0, 0})
	DMember(bool)                                      bOverrideWeaponSwitchCooldown                               OFFSET(get<bool>, {0x63, 1, 0, 0})
};

/// Struct /Script/Indiana.PhaseWeaponDefinition
/// Size: 0x0008 (0x000000 - 0x000008)
class FPhaseWeaponDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   Phase                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   WeaponIndex                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Class /Script/Indiana.DecisionTree_WeaponSwapByPhase
/// Size: 0x0018 (0x000030 - 0x000048)
class UDecisionTree_WeaponSwapByPhase : public UDecisionTree
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FPhaseWeaponDefinition>)            PhaseWeaponArray                                            OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(uint32_t)                                  TargetWeaponIndex                                           OFFSET(get<uint32_t>, {0x40, 4, 0, 0})
};

/// Struct /Script/Indiana.DecisionTreeStack
/// Size: 0x0010 (0x000000 - 0x000010)
class FDecisionTreeStack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UClass*>)                     DecisionTrees                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.DecisionTreeContextMap
/// Size: 0x0060 (0x000000 - 0x000060)
class FDecisionTreeContextMap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FDecisionTreeStack)                        DefaultDecisionTrees                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TMap<FName, FDecisionTreeStack>)           DecisionTreeMap                                             OFFSET(get<T>, {0x10, 80, 0, 0})
};

/// Class /Script/Indiana.DecisionTreeComponent
/// Size: 0x0088 (0x0000E0 - 0x000168)
class UDecisionTreeComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(TMap<EDecisionTreeContextType, FDecisionTreeContextMap>) DecisionTreeContextMap                        OFFSET(get<T>, {0xE8, 80, 0, 0})
	CMember(class UDecisionTreeProcessor*)             DecisionTreeProcessor                                       OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UDecisionTreeProcessor*)             OutOfCombatDecisionTreeProcessor                            OFFSET(get<T>, {0x160, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.DecisionTreeComponent.OnWeaponPreferenceChange
	// void OnWeaponPreferenceChange(EWeaponPreference NewWeaponPreference, EWeaponPreference OldWeaponPreference);             // [0x17fe400] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnTether
	// void OnTether(bool bCanceled, FVector TetherReturnLocation);                                                             // [0x17fe310] Final|Native|Private|HasDefaults 
	// Function /Script/Indiana.DecisionTreeComponent.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                // [0x17fe240] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnStateOfBeingChange
	// void OnStateOfBeingChange(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                 // [0x17fe170] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnStartTraverse
	// void OnStartTraverse(ETraverseType TraverseType, int32_t NavLinkDirection, class AReservableNavLink* ReservableNavLink, class ALadder* ClimbLadder); // [0x17fe010] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnScriptedBehaviorCall
	// void OnScriptedBehaviorCall(class UAISettings_Behavior* ScriptedBehavior, bool bInterruptible);                          // [0x17fdf40] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnReactiveRangeAction
	// void OnReactiveRangeAction();                                                                                            // [0x17fdf20] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnPlayerProximityChange
	// void OnPlayerProximityChange(bool bEnteredProximity);                                                                    // [0x17fde90] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnPlayerConversationProximityChange
	// void OnPlayerConversationProximityChange(bool bInProximity);                                                             // [0x17fde00] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnPlayerConversationChange
	// void OnPlayerConversationChange(class UConversationInstance* Instance, bool bEntered);                                   // [0x17fdd30] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnNewTarget
	// void OnNewTarget();                                                                                                      // [0x17fdd10] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnNearbyInterestPoint
	// void OnNearbyInterestPoint(class UFurnitureComponent* InterestPoint);                                                    // [0x17fdc80] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnDefaultBehaviorChange
	// void OnDefaultBehaviorChange(class UAISettings_Behavior* NewDefaultBehavior, bool bFullReset);                           // [0x17fda50] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x17fd980] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnBehaviorPhaseChange
	// void OnBehaviorPhaseChange(int32_t NewBehaviorPhase);                                                                    // [0x17fd8f0] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnAlertStateChange
	// void OnAlertStateChange(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x17fd790] Final|Native|Private 
	// Function /Script/Indiana.DecisionTreeComponent.OnActionToggled
	// void OnActionToggled(ETogglableAction Action, bool bToggled);                                                            // [0x17fd6c0] Final|Native|Private 
};

/// Struct /Script/Indiana.DecisionTreeMapElement
/// Size: 0x0010 (0x000000 - 0x000010)
class FDecisionTreeMapElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGameplayTag)                              EventType                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UClass*)                             DecisionTree                                                OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.DecisionTreeDesignerData
/// Size: 0x0018 (0x000038 - 0x000050)
class UDecisionTreeDesignerData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UClass*)                             DefaultDecisionTree                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FDecisionTreeMapElement>)           DecisionTreeMap                                             OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Indiana.DecisionTreeDesignerDataBundle
/// Size: 0x0050 (0x000038 - 0x000088)
class UDecisionTreeDesignerDataBundle : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<EDecisionTreeContextType, class UDecisionTreeDesignerData*>) DecisionTreeMaps                     OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Struct /Script/Indiana.DecisionTreeResult
/// Size: 0x0038 (0x000000 - 0x000038)
class FDecisionTreeResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UAIEventInfo*)                       EventInfo                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(TArray<class UDecisionTreeRequestData*>)   DecisionTreeRequests                                        OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Class /Script/Indiana.DecisionTreeProcessor
/// Size: 0x0038 (0x000030 - 0x000068)
class UDecisionTreeProcessor : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FDecisionTreeResult>)               DecisionTreeResultQueue                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UBehaviorStateInfo*)                 CurrentProcessedStateInfo                                   OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<class UBehaviorStateInfo*>)         ProcessedStateInfoSequence                                  OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Indiana.DecisionTreeSequenceRequestData
/// Size: 0x0018 (0x000038 - 0x000050)
class UDecisionTreeSequenceRequestData : public UDecisionTreeRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<class UBehaviorStateRequestData*>)  Requests                                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(EDecisionTreeRequestPriority)              Priority                                                    OFFSET(get<T>, {0x48, 1, 0, 0})
};

/// Class /Script/Indiana.DerivedStatWidget
/// Size: 0x0028 (0x000300 - 0x000328)
class UDerivedStatWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x308, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ValueTextBlock                                              OFFSET(get<T>, {0x320, 8, 0, 0})
};

/// Class /Script/Indiana.DespawnAction
/// Size: 0x0008 (0x000038 - 0x000040)
class UDespawnAction : public UAIAction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.DestructibleAudioComponent
/// Size: 0x0050 (0x000150 - 0x0001A0)
class UDestructibleAudioComponent : public UInteractableAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TMap<EDestructibleEventType, class UAkPlaySoundEventEffect*>) AudioEvents                              OFFSET(get<T>, {0x150, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.DestructibleAudioComponent.Stop
	// void Stop(EDestructibleEventType Type);                                                                                  // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.DestructibleAudioComponent.Play
	// void Play(EDestructibleEventType Type);                                                                                  // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.DestructibleShoutComponent
/// Size: 0x0008 (0x000100 - 0x000108)
class UDestructibleShoutComponent : public UShoutComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:


	/// Functions
	// Function /Script/Indiana.DestructibleShoutComponent.OnDestructibleDestroyed
	// void OnDestructibleDestroyed(class AActor* Instigator);                                                                  // [0x17fdb20] Final|Native|Private 
};

/// Class /Script/Indiana.DevelopmentFunctionality
/// Size: 0x0000 (0x000030 - 0x000030)
class UDevelopmentFunctionality : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.DevelopmentFunctionality.ToggleTempVO
	// void ToggleTempVO();                                                                                                     // [0xbb4890] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.Task
	// void Task();                                                                                                             // [0x17fe750] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.StartInfoTracking
	// void StartInfoTracking(float TrackRate, bool bTrackStats);                                                               // [0x17fe670] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.FlushLevelStreaming
	// void FlushLevelStreaming();                                                                                              // [0x17fd6a0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.FlushAsyncLoading
	// void FlushAsyncLoading();                                                                                                // [0x17fd680] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.EndInfoTracking
	// void EndInfoTracking();                                                                                                  // [0xbb4890] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.DumpNameTable
	// void DumpNameTable();                                                                                                    // [0x17fd660] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.DebugDrawLightmapNamesSummary
	// void DebugDrawLightmapNamesSummary(float Duration, int32_t LightmapTextureIndex, float VolumeThreshold);                 // [0x17fd540] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.DebugDrawLightmapNamesPerComponent
	// void DebugDrawLightmapNamesPerComponent(float Duration, int32_t LightmapTextureIndex);                                   // [0x17fd470] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.DebugDrawLightmapInfo
	// void DebugDrawLightmapInfo(FString LightmapName, float Duration);                                                        // [0x17fd380] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.Crash
	// void Crash();                                                                                                            // [0x17fd360] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.CharacterMemReport
	// void CharacterMemReport();                                                                                               // [0xbb4890] Final|Exec|Native|Protected 
	// Function /Script/Indiana.DevelopmentFunctionality.Bug
	// void Bug();                                                                                                              // [0x17fd340] Final|Exec|Native|Protected 
};

/// Class /Script/Indiana.DialogBoxWidget
/// Size: 0x00B0 (0x000308 - 0x0003B8)
class UDialogBoxWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	CMember(class UInputLabelWidget*)                  ConfirmLabel                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  BackLabel                                                   OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UVerticalBox*)                       ContentVerticalBox                                          OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UHorizontalBox*)                     KeyboardInputBox                                            OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UHorizontalBox*)                     GamepadInputBox                                             OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class USizeBox*)                           BackingBotSizeBox                                           OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TextBlock                                                   OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SubTextBlock                                                OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UButtonBase*)                        ConfirmButton                                               OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ConfirmTextBlock                                            OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UButtonBase*)                        CancelButton                                                OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CancelTextBlock                                             OFFSET(get<T>, {0x3A0, 8, 0, 0})
	DMember(float)                                     ContentVerticalPadding                                      OFFSET(get<float>, {0x3A8, 4, 0, 0})
	DMember(int32_t)                                   BackingMaterialSize                                         OFFSET(get<int32_t>, {0x3AC, 4, 0, 0})
	DMember(int32_t)                                   BackingTopSize                                              OFFSET(get<int32_t>, {0x3B0, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.DialogBoxWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DialogBoxWidget.OnInputConfirm
	// void OnInputConfirm();                                                                                                   // [0x18023a0] Final|Native|Protected 
	// Function /Script/Indiana.DialogBoxWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x1802360] Final|Native|Protected 
	// Function /Script/Indiana.DialogBoxWidget.OnInputAbort
	// void OnInputAbort();                                                                                                     // [0x1802340] Final|Native|Protected 
};

/// Class /Script/Indiana.DialogBoxRespecWidget
/// Size: 0x0018 (0x0003B8 - 0x0003D0)
class UDialogBoxRespecWidget : public UDialogBoxWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(class UTextBlockBase*)                     TextBlockMiddle                                             OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TextBlockEnd                                                OFFSET(get<T>, {0x3C0, 8, 0, 0})
};

/// Class /Script/Indiana.DialogWarningBoxWidget
/// Size: 0x0060 (0x000308 - 0x000368)
class UDialogWarningBoxWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UInputLabelWidget*)                  ConfirmLabel                                                OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  BackLabel                                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     BodyTextblock                                               OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UHorizontalBox*)                     KeyboardInputBox                                            OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UHorizontalBox*)                     GamepadInputBox                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UButtonBase*)                        ConfirmButton                                               OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UButtonBase*)                        CancelButton                                                OFFSET(get<T>, {0x358, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.DialogWarningBoxWidget.OnInputConfirm
	// void OnInputConfirm();                                                                                                   // [0x18023c0] Final|Native|Protected 
	// Function /Script/Indiana.DialogWarningBoxWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x1802380] Final|Native|Protected 
};

/// Class /Script/Indiana.DifficultyManager
/// Size: 0x0028 (0x000030 - 0x000058)
class UDifficultyManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(EGameDifficulty)                           Difficulty                                                  OFFSET(get<T>, {0x50, 1, 0, 0})
	DMember(bool)                                      SurvivalMode                                                OFFSET(get<bool>, {0x52, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.DifficultyManager.SetSurvivalMode
	// void SetSurvivalMode(bool IsSurvivalMode);                                                                               // [0x18026e0] Final|Exec|Native|Public 
	// Function /Script/Indiana.DifficultyManager.SetDifficulty
	// void SetDifficulty(EGameDifficulty NewDifficulty);                                                                       // [0x1802660] Final|Exec|Native|Public 
	// Function /Script/Indiana.DifficultyManager.GetGameDifficulty
	// EGameDifficulty GetGameDifficulty();                                                                                     // [0x1801e60] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.DifficultyModifier
/// Size: 0x0090 (0x000000 - 0x000090)
class FDifficultyModifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bUseCurve                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        Curve                                                       OFFSET(getStruct<T>, {0x8, 136, 0, 0})
};

/// Struct /Script/Indiana.DifficultyStatModifierDescription
/// Size: 0x0240 (0x000010 - 0x000250)
class FDifficultyStatModifierDescription : public FStatModifierDescriptionBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	SMember(FDifficultyModifier)                       DifficultyModifiers                                         OFFSET(getStruct<T>, {0x10, 576, 0, 0})
};

/// Class /Script/Indiana.DifficultyRpgStatModifiers
/// Size: 0x0010 (0x000038 - 0x000048)
class UDifficultyRpgStatModifiers : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FDifficultyStatModifierDescription>) RpgStatMods                                                OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.DifficultySelectWidget
/// Size: 0x0178 (0x000308 - 0x000480)
class UDifficultySelectWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UVerticalBox*)                       SelectDifficultyPanel                                       OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UButtonBase*)                        EasyButton                                                  OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UButtonBase*)                        NormalButton                                                OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UButtonBase*)                        HardButton                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UButtonBase*)                        SuperNovaButton                                             OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DifficultyTextBlock                                         OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UVerticalBox*)                       DifficultyButtonContainer                                   OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UScrollBox*)                         DifficultyScrollBox                                         OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UScrollBox*)                         ConversationScrollBox                                       OFFSET(get<T>, {0x388, 8, 0, 0})
	DMember(float)                                     GamepadScrollMultiplier                                     OFFSET(get<float>, {0x390, 4, 0, 0})
	CMember(class UVerticalBox*)                       SubtitleSettingsPanel                                       OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class USettingsMenuSlotWidget*)            ConversationTextMenuSlot                                    OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class USettingsMenuSlotWidget*)            ShowBarkMenuSlot                                            OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class USettingsMenuSlotWidget*)            ShowCinematicMenuSlot                                       OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class USettingsMenuSlotWidget*)            FontSizeMenuSlot                                            OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ConversationSubOptionHeader                                 OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ConversationDescriptionTextBlock                            OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UVerticalBox*)                       ConversationButtonContainer                                 OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UHorizontalBox*)                     InteractionButtonContainer                                  OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UButtonBase*)                        ContinueButton                                              OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UButtonBase*)                        ConversationDefaultButton                                   OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UClass*)                             OptionPresenterClass                                        OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UUserSettingInt32*)                  ConversationTextSetting                                     OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UUserSettingInt32*)                  ShowBarkSubtitleSetting                                     OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UUserSettingInt32*)                  ShowCinematicSubtitleSetting                                OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UUserSettingInt32*)                  FontSizeSetting                                             OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class USettingsMenuData*)                  SettingsData                                                OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UClass*)                             SubtitleSettingsClassRef                                    OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UClass*)                             FontSizeSettingsClassRef                                    OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UClass*)                             SliderClass                                                 OFFSET(get<T>, {0x430, 8, 0, 0})
	SMember(FInputLabelDescription)                    ContinueLabelDesc                                           OFFSET(getStruct<T>, {0x448, 56, 0, 0})


	/// Functions
	// Function /Script/Indiana.DifficultySelectWidget.ValueChanged
	// void ValueChanged(class UUserSetting* UserSetting);                                                                      // [0x18027e0] Final|Native|Public  
	// Function /Script/Indiana.DifficultySelectWidget.TrasitionToSubtitleComplete
	// void TrasitionToSubtitleComplete();                                                                                      // [0x1802790] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DifficultySelectWidget.TransitionToDifficultyComplete
	// void TransitionToDifficultyComplete();                                                                                   // [0x1802770] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DifficultySelectWidget.StartTransitionToSubtitleFromDifficulty
	// void StartTransitionToSubtitleFromDifficulty();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DifficultySelectWidget.StartTransitionToDifficultyFromSubtitle
	// void StartTransitionToDifficultyFromSubtitle();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.DirectionalAnimDisableStatusEffect
/// Size: 0x0010 (0x0001A0 - 0x0001B0)
class UDirectionalAnimDisableStatusEffect : public UAnimDisableStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
};

/// Class /Script/Indiana.Dirt
/// Size: 0x0008 (0x000038 - 0x000040)
class UDirt : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UTexture*)                           DirtTexture                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.DisableBehaviorStateInfo
/// Size: 0x0008 (0x000120 - 0x000128)
class UDisableBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(TWeakObjectPtr<class UDisableStatusEffect*>) DisableStatusEffect                                       OFFSET(get<T>, {0x120, 8, 0, 0})
};

/// Class /Script/Indiana.DisableRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UDisableRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.DisguiseData
/// Size: 0x0020 (0x000038 - 0x000058)
class UDisguiseData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UClass*)                             Key                                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UClass*)                             FactionData                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UClass*)                             ArmorAppearance                                             OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UClass*)                             HelmetAppearance                                            OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Struct /Script/Indiana.LogicalExpressionGroup
/// Size: 0x0070 (0x000000 - 0x000070)
class FLogicalExpressionGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(ELogicalOperator)                          Operator                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FLogicalExpression)                        Expression                                                  OFFSET(getStruct<T>, {0x8, 104, 0, 0})
};

/// Struct /Script/Indiana.LogicalGroupedExpression
/// Size: 0x0078 (0x000000 - 0x000078)
class FLogicalGroupedExpression : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FLogicalExpression)                        BaseExpression                                              OFFSET(getStruct<T>, {0x0, 104, 0, 0})
	CMember(TArray<FLogicalExpressionGroup>)           AdditionalExpressions                                       OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Indiana.QuestItem
/// Size: 0x00B8 (0x000118 - 0x0001D0)
class UQuestItem : public UItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	DMember(bool)                                      bCanAddToInventory                                          OFFSET(get<bool>, {0x118, 1, 0, 0})
	SMember(FGameplayTag)                              QuestItemType                                               OFFSET(getStruct<T>, {0x11C, 8, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            ItemMesh                                                    OFFSET(get<T>, {0x128, 8, 0, 0})
	SMember(FLogicalGroupedExpression)                 LootableCondition                                           OFFSET(getStruct<T>, {0x150, 120, 0, 0})
	DMember(bool)                                      bStackable                                                  OFFSET(get<bool>, {0x1C8, 1, 0, 0})
};

/// Class /Script/Indiana.DisguiseItem
/// Size: 0x0000 (0x0001D0 - 0x0001D0)
class UDisguiseItem : public UQuestItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Class /Script/Indiana.DisguiseMeterWidget
/// Size: 0x0130 (0x000300 - 0x000430)
class UDisguiseMeterWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             DisguiseMeterImage                                          OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTexture2D*)                         DisguiseDifficultyUnused                                    OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTexture2D*)                         DisguiseDifficultyUsed                                      OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTexture2D*)                         NormalFrame                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTexture2D*)                         RedFrame                                                    OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             FactionDisguiseImage                                        OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UHorizontalBox*)                     DisguiseTipHorizontalBox                                    OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UHorizontalBox*)                     DisguiseTipFadeHorizontalBox                                OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DisguiseStatusTextBlock                                     OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UBorder*)                            FrameBorder                                                 OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UImage*)                             ProjectorFrame                                              OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UImage*)                             LightImage                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UBorder*)                            GlowBorder                                                  OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UHorizontalBox*)                     DisguiseChecksHorizontalBox                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         DefaultImage                                                OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPlayerEnvironmentInteractionComponent*>) EnvironmentInteractionComponent         OFFSET(get<T>, {0x3A0, 8, 0, 0})
	DMember(float)                                     MeterInnerAnimTime                                          OFFSET(get<float>, {0x3A8, 4, 0, 0})
	DMember(int32_t)                                   MeterInnerAnimNumFrames                                     OFFSET(get<int32_t>, {0x3AC, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.DisguiseMeterWidget.UpdateDisguiseMeterInnerAnim
	// void UpdateDisguiseMeterInnerAnim(int32_t CurrentFrame);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.UpdateDisguiseMeterFill
	// void UpdateDisguiseMeterFill(float NewValue);                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.ShowDisguiseMeterTip
	// void ShowDisguiseMeterTip(float StartTime);                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.OnRestrictedAreaExited
	// void OnRestrictedAreaExited(class ARestrictedArea* RestrictedArea);                                                      // [0x18025d0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18022b0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnEnterRestrictedAreaWithoutDisguise
	// void OnEnterRestrictedAreaWithoutDisguise(class UDisguiseData* Disguise, bool bMissingShroud);                           // [0x18020f0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseUnequipped
	// void OnDisguiseUnequipped();                                                                                             // [0x18020d0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseRefilled
	// void OnDisguiseRefilled();                                                                                               // [0x18020b0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseMeterVisibilityChanged
	// void OnDisguiseMeterVisibilityChanged(bool bVisible);                                                                    // [0x1802020] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseMeterChanged
	// void OnDisguiseMeterChanged(float NewValue);                                                                             // [0x1801fa0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseImageLoaded
	// void OnDisguiseImageLoaded();                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseFailure
	// void OnDisguiseFailure();                                                                                                // [0x1801f80] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseEquipped
	// void OnDisguiseEquipped(class UDisguiseData* Disguise);                                                                  // [0x1801ef0] Final|Native|Protected 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseEnd
	// void OnDisguiseEnd();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.OnDisguiseBegin
	// void OnDisguiseBegin();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DisguiseMeterWidget.HideDisguiseMeterTip
	// void HideDisguiseMeterTip(float StartTime);                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.DisguiseStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UDisguiseStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             FactionData                                                 OFFSET(get<T>, {0x188, 8, 0, 0})
};

/// Class /Script/Indiana.DisplayInterface
/// Size: 0x0000 (0x000030 - 0x000030)
class UDisplayInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.DLCManager
/// Size: 0x0020 (0x000030 - 0x000050)
class UDLCManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FMulticastInlineDelegate)                  OnDLCCheckComplete                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.DLCManager.OnGlobalVarChanged
	// void OnGlobalVarChanged(FString VariableName, int32_t NewValue);                                                         // [0x18021c0] Final|Native|Protected 
	// Function /Script/Indiana.DLCManager.IsINX2Installed
	// bool IsINX2Installed();                                                                                                  // [0x1801ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.DLCManager.IsINX1Installed
	// bool IsINX1Installed();                                                                                                  // [0x1801e90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.DodgeBehaviorStateInfo
/// Size: 0x0008 (0x000120 - 0x000128)
class UDodgeBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.DodgeRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class UDodgeRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(EDodgeDirection)                           DodgeDirection                                              OFFSET(get<T>, {0x68, 1, 0, 0})
	DMember(bool)                                      bPerformRecovery                                            OFFSET(get<bool>, {0x69, 1, 0, 0})
	DMember(bool)                                      bRequireClearDodgePath                                      OFFSET(get<bool>, {0x6A, 1, 0, 0})
};

/// Class /Script/Indiana.Door
/// Size: 0x0168 (0x0002B8 - 0x000420)
class ADoor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	SMember(FMulticastInlineDelegate)                  OnOCLOpenStart                                              OFFSET(getStruct<T>, {0x2F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenEnd                                                OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLCloseStart                                             OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLCloseEnd                                               OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenAttemptedLocked                                    OFFSET(getStruct<T>, {0x330, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenAttemptedBarred                                    OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLocked                                                 OFFSET(getStruct<T>, {0x350, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLUnlocked                                               OFFSET(getStruct<T>, {0x360, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLBarred                                                 OFFSET(getStruct<T>, {0x370, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLUnbarred                                               OFFSET(getStruct<T>, {0x380, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLSealed                                                 OFFSET(getStruct<T>, {0x390, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLUnsealed                                               OFFSET(getStruct<T>, {0x3A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickStart                                          OFFSET(getStruct<T>, {0x3B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickSuccess                                        OFFSET(getStruct<T>, {0x3C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickInterrupted                                    OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickLoopStop                                       OFFSET(getStruct<T>, {0x3E0, 16, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UOCLComponent*)                      OCLComponent                                                OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UIndianaNavModifierComponent*)       NavModComponent                                             OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UTravelTriggerComponent*)            TravelTriggerComponent                                      OFFSET(get<T>, {0x418, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.Door.TriggersTravel
	// bool TriggersTravel();                                                                                                   // [0x18027b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Door.OnOCLStateChange
	// void OnOCLStateChange(EOCLState PreviousState, EOCLState CurrentState);                                                  // [0x18023e0] Final|Native|Protected 
};

/// Class /Script/Indiana.DragContainerWidget
/// Size: 0x0040 (0x000278 - 0x0002B8)
class UDragContainerWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	CMember(class UClass*)                             OperationClass                                              OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UNamedSlot*)                         NamedSlot                                                   OFFSET(get<T>, {0x2B0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.DragContainerWidget.OnOperationDrop
	// void OnOperationDrop(class UDragDropOperation* Operation);                                                               // [0x1802540] Final|Native|Public  
	// Function /Script/Indiana.DragContainerWidget.OnOperationDragCancelled
	// void OnOperationDragCancelled(class UDragDropOperation* Operation);                                                      // [0x18024b0] Final|Native|Public  
	// Function /Script/Indiana.DragContainerWidget.OnDragStarted
	// void OnDragStarted(class UIndianaDragDropOperation* Operation);                                                          // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DragContainerWidget.OnDragGroupStarted
	// void OnDragGroupStarted(class UIndianaDragDropOperation* Operation);                                                     // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DragContainerWidget.OnDragGroupDrop
	// void OnDragGroupDrop(class UIndianaDragDropOperation* Operation);                                                        // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DragContainerWidget.OnDragGroupCancelled
	// void OnDragGroupCancelled(class UIndianaDragDropOperation* Operation);                                                   // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DragContainerWidget.OnDragConfirmDrop
	// void OnDragConfirmDrop(class UIndianaDragDropOperation* Operation);                                                      // [0x1c5deb0] BlueprintCosmetic|Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.DraggableInterface
/// Size: 0x0000 (0x000030 - 0x000030)
class UDraggableInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.DragVisualsWidget
/// Size: 0x0000 (0x000278 - 0x000278)
class UDragVisualsWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
};

/// Class /Script/Indiana.ItemCellVisualsWidget
/// Size: 0x0008 (0x000278 - 0x000280)
class UItemCellVisualsWidget : public UDragVisualsWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x278, 8, 0, 0})
};

/// Class /Script/Indiana.DynamicTOD
/// Size: 0x0C30 (0x0002B8 - 0x000EE8)
class ADynamicTOD : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3816;

public:
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x458, 8, 0, 0})
	DMember(bool)                                      Use24HourCurveEvaluation                                    OFFSET(get<bool>, {0x460, 1, 0, 0})
	SMember(FRuntimeCurveLinearColor)                  SunLightColor                                               OFFSET(getStruct<T>, {0x468, 520, 0, 0})
	SMember(FRuntimeFloatCurve)                        SunLightIntensity                                           OFFSET(getStruct<T>, {0x670, 136, 0, 0})
	SMember(FRuntimeCurveLinearColor)                  MoonLightColor                                              OFFSET(getStruct<T>, {0x6F8, 520, 0, 0})
	SMember(FRuntimeFloatCurve)                        MoonLightIntensity                                          OFFSET(getStruct<T>, {0x900, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        LightIntensity                                              OFFSET(getStruct<T>, {0x988, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        SkyLightIntensity                                           OFFSET(getStruct<T>, {0xA10, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        StarBrightness                                              OFFSET(getStruct<T>, {0xA98, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        SunSpriteScale                                              OFFSET(getStruct<T>, {0xB20, 136, 0, 0})
	SMember(FRuntimeCurveLinearColor)                  LightColor                                                  OFFSET(getStruct<T>, {0xBA8, 520, 0, 0})
	DMember(bool)                                      bUseSunLightColorCurve                                      OFFSET(get<bool>, {0xDB0, 1, 0, 0})
	DMember(bool)                                      bUseSunLightIntensityCurve                                  OFFSET(get<bool>, {0xDB1, 1, 0, 0})
	DMember(bool)                                      bUseMoonLightColorCurve                                     OFFSET(get<bool>, {0xDB2, 1, 0, 0})
	DMember(bool)                                      bUseMoonLightIntensityCurve                                 OFFSET(get<bool>, {0xDB3, 1, 0, 0})
	CMember(EWeatherType)                              WeatherType                                                 OFFSET(get<T>, {0xDB4, 1, 0, 0})
	SMember(FRotator)                                  SunRotationOffset                                           OFFSET(getStruct<T>, {0xDB8, 12, 0, 0})
	DMember(float)                                     SunTurnOffThreshold                                         OFFSET(get<float>, {0xDC4, 4, 0, 0})
	SMember(FRotator)                                  MoonRotationOffset                                          OFFSET(getStruct<T>, {0xDC8, 12, 0, 0})
	DMember(float)                                     MoonTurnOffThreshold                                        OFFSET(get<float>, {0xDD4, 4, 0, 0})
	SMember(FName)                                     NoWeatherStateName                                          OFFSET(getStruct<T>, {0xDD8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialParameterCollection*>) GlobalMaterialParameterCollection                 OFFSET(get<T>, {0xDE0, 8, 0, 0})
	SMember(FName)                                     GlobalMaterialWholeSceneLightVectorParameterName            OFFSET(getStruct<T>, {0xDE8, 8, 0, 0})
	SMember(FName)                                     GlobalMaterialSunColorParameterName                         OFFSET(getStruct<T>, {0xDF0, 8, 0, 0})
	SMember(FName)                                     GlobalMaterialStarsIntensityParameterName                   OFFSET(getStruct<T>, {0xDF8, 8, 0, 0})
	SMember(FName)                                     GlobalMaterialNormalizedTimeParameterName                   OFFSET(getStruct<T>, {0xE00, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialParameterCollection*>) MoonsMaterialParameterCollection                  OFFSET(get<T>, {0xE08, 8, 0, 0})
	SMember(FName)                                     UseDebugTimePropertyName                                    OFFSET(getStruct<T>, {0xE10, 8, 0, 0})
	SMember(FName)                                     DebugTimePropertyName                                       OFFSET(getStruct<T>, {0xE18, 8, 0, 0})
	SMember(FName)                                     AutoUpdateSkyCapturePropertyName                            OFFSET(getStruct<T>, {0xE20, 8, 0, 0})
	SMember(FName)                                     EnableLoggingPropertyName                                   OFFSET(getStruct<T>, {0xE28, 8, 0, 0})
	SMember(FName)                                     AutoUpdateDebugTimePropertyName                             OFFSET(getStruct<T>, {0xE30, 8, 0, 0})
	SMember(FName)                                     DebugWeatherPropertyName                                    OFFSET(getStruct<T>, {0xE38, 8, 0, 0})
	SMember(FName)                                     SunDynamicShadowDistancePropertyName                        OFFSET(getStruct<T>, {0xE40, 8, 0, 0})
	SMember(FName)                                     MoonDynamicShadowDistancePropertyName                       OFFSET(getStruct<T>, {0xE48, 8, 0, 0})
	SMember(FName)                                     RainAndLightMaskPropertyName                                OFFSET(getStruct<T>, {0xE50, 8, 0, 0})
	SMember(FName)                                     SunElevationPropertyName                                    OFFSET(getStruct<T>, {0xE58, 8, 0, 0})
	SMember(FName)                                     MoonElevationPropertyName                                   OFFSET(getStruct<T>, {0xE60, 8, 0, 0})
	SMember(FName)                                     MaterialSpecularNearFarPropertyName                         OFFSET(getStruct<T>, {0xE68, 8, 0, 0})
	SMember(FName)                                     WetMaterialSpecularNearFarPropertyName                      OFFSET(getStruct<T>, {0xE70, 8, 0, 0})
	SMember(FName)                                     DrySkyProbeMipBrightnessPropertyName                        OFFSET(getStruct<T>, {0xE78, 8, 0, 0})
	SMember(FName)                                     WetSkyProbeMipBrightnessPropertyName                        OFFSET(getStruct<T>, {0xE80, 8, 0, 0})
	SMember(FName)                                     MoonLightIntensityPropertyName                              OFFSET(getStruct<T>, {0xE88, 8, 0, 0})
	SMember(FName)                                     MoonLightColorPropertyName                                  OFFSET(getStruct<T>, {0xE90, 8, 0, 0})
	SMember(FName)                                     RandomWeatherStartPropertyName                              OFFSET(getStruct<T>, {0xE98, 8, 0, 0})
	SMember(FName)                                     WeatherStartChancePropertyName                              OFFSET(getStruct<T>, {0xEA0, 8, 0, 0})
	SMember(FName)                                     WeatherStartEventPropertyName                               OFFSET(getStruct<T>, {0xEA8, 8, 0, 0})
	SMember(FName)                                     WeatherEndEventPropertyName                                 OFFSET(getStruct<T>, {0xEB0, 8, 0, 0})
	SMember(FName)                                     WeatherStateGroupPropertyName                               OFFSET(getStruct<T>, {0xEB8, 8, 0, 0})
	SMember(FName)                                     WetnessPropertyName                                         OFFSET(getStruct<T>, {0xEC8, 8, 0, 0})
	SMember(FName)                                     StepShadowTimeBetweenUpdatesPropertyName                    OFFSET(getStruct<T>, {0xED0, 8, 0, 0})
	SMember(FName)                                     StepShadowUpdateLengthPropertyName                          OFFSET(getStruct<T>, {0xED8, 8, 0, 0})
	SMember(FName)                                     SpawnedWeatherPSPropertyName                                OFFSET(getStruct<T>, {0xEE0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.DynamicTOD.WeatherTimelineUpdateReverse
	// void WeatherTimelineUpdateReverse(float CurrentWeatherAmount, float CurrentMaterialWetness);                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.WeatherTimelineUpdateForward
	// void WeatherTimelineUpdateForward(float CurrentWeatherAmount, float CurrentMaterialWetness);                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.StartSaveWeather
	// void StartSaveWeather();                                                                                                 // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.SaveCurrentWeather
	// void SaveCurrentWeather(class UWeatherStateContainer* InWeatherState);                                                   // [0x18058c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DynamicTOD.ResetSavedWeather
	// void ResetSavedWeather();                                                                                                // [0x18058a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DynamicTOD.GetWeatherWwiseStateName
	// FName GetWeatherWwiseStateName();                                                                                        // [0x1804c00] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.GetWeatherParticleSystem
	// class UParticleSystem* GetWeatherParticleSystem();                                                                       // [0x1804bd0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.DynamicTOD.GetPreviousWeatherState
	// class UWeatherStateContainer* GetPreviousWeatherState();                                                                 // [0x1804b80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.DynamicTOD.ForceUpdate
	// void ForceUpdate();                                                                                                      // [0x1804b40] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.Elevator
/// Size: 0x0128 (0x0002B8 - 0x0003E0)
class AElevator : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	SMember(FMulticastInlineDelegate)                  OnElevatorMoveStart                                         OFFSET(getStruct<T>, {0x2F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnElevatorMoveEnd                                           OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	DMember(float)                                     InitialSplineTime                                           OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     DistanceMovedPerSecond                                      OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     ApproximateTransitTime                                      OFFSET(get<float>, {0x320, 4, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class USceneComponent*)                    CarriageComponent                                           OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               FrameMeshComponent                                          OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class USplineComponent*)                   SplineComponent                                             OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UAkComponent*)                       AkComponent                                                 OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(TArray<class ADoor*>)                      ExternalDoors                                               OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(class ADoor*)                              OriginExternalDoor                                          OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class ADoor*)                              DestinationExternalDoor                                     OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UChildActorComponent*)               GhostNavMesh_StartFloor                                     OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UChildActorComponent*)               GhostNavMesh_EndFloor                                       OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(TArray<class AGhostNavMesh*>)              FloorGhostNavMeshes                                         OFFSET(get<T>, {0x398, 16, 0, 0})
	CMember(class USceneComponent*)                    WaitLocationLeft                                            OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class USceneComponent*)                    WaitLocationMiddle                                          OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class USceneComponent*)                    WaitLocationRight                                           OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(TArray<class USceneComponent*>)            WaitLocations                                               OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(class UTravelTriggerComponent*)            TravelTriggerComponent                                      OFFSET(get<T>, {0x3D0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.Elevator.SetCurrentFloor
	// void SetCurrentFloor(int32_t FloorIndex);                                                                                // [0x1805950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Elevator.OnStartMoveExternalDoors
	// void OnStartMoveExternalDoors(int32_t DestinationFloor, bool bFromStationary);                                           // [0x1805790] Final|Native|Protected 
	// Function /Script/Indiana.Elevator.OnEndMoveExternalDoors
	// void OnEndMoveExternalDoors(int32_t DestinationFloor);                                                                   // [0x1804fd0] Final|Native|Protected 
	// Function /Script/Indiana.Elevator.IsStationary
	// bool IsStationary();                                                                                                     // [0x1804cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Elevator.IsMoving
	// bool IsMoving();                                                                                                         // [0x1804ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Elevator.GetTargetFloor
	// int32_t GetTargetFloor();                                                                                                // [0x1804bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Elevator.GetCurrentFloor
	// int32_t GetCurrentFloor();                                                                                               // [0x1804b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ElevatorAudioComponent
/// Size: 0x0050 (0x000150 - 0x0001A0)
class UElevatorAudioComponent : public UInteractableAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TMap<EElevatorEventType, class UAkPlaySoundEventEffect*>) AudioEvents                                  OFFSET(get<T>, {0x150, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.ElevatorAudioComponent.Stop
	// void Stop(EElevatorEventType Type);                                                                                      // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ElevatorAudioComponent.Play
	// void Play(EElevatorEventType Type);                                                                                      // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IdleDisableStatusEffect
/// Size: 0x0008 (0x000198 - 0x0001A0)
class UIdleDisableStatusEffect : public UDisableStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(EDisablePriority)                          DisablePriority                                             OFFSET(get<T>, {0x198, 1, 0, 0})
};

/// Class /Script/Indiana.ElevatorDisableStatusEffect
/// Size: 0x0008 (0x0001A0 - 0x0001A8)
class UElevatorDisableStatusEffect : public UIdleDisableStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:


	/// Functions
	// Function /Script/Indiana.ElevatorDisableStatusEffect.OnElevatorMoveEnd
	// void OnElevatorMoveEnd(int32_t DestinationFloor);                                                                        // [0x1804f40] Final|Native|Protected 
};

/// Struct /Script/Indiana.EmotionEntry
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FEmotionEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TMap<FName, FLoopRandomSequence>)          TalkingSequences                                            OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   Idle                                                        OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   DialogIdle                                                  OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FLoopRandomSequence>)               IdleStates                                                  OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(class UAnimSequence*)                      WalkForwardSequence                                         OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UAnimSequence*)                      BeginEmotionSequence                                        OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UAnimSequence*)                      EmotionAdditiveLayerStart                                   OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UAnimSequence*)                      EmotionAdditiveLayer                                        OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(float)                                     AdditiveLayerStrengthOffset                                 OFFSET(get<float>, {0xA0, 4, 0, 0})
};

/// Class /Script/Indiana.EmotionData
/// Size: 0x0050 (0x000038 - 0x000088)
class UEmotionData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<EEmotion, FEmotionEntry>)             Emotions                                                    OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.EnableEmitterModVisual
/// Size: 0x0018 (0x000068 - 0x000080)
class UEnableEmitterModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TArray<FName>)                             EmitterNames                                                OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Struct /Script/Indiana.PotentialEncounterList
/// Size: 0x0010 (0x000000 - 0x000010)
class FPotentialEncounterList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UEncounterList*)                     EncounterList                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bPersistEncounter                                           OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Struct /Script/Indiana.EncounterClearConditions
/// Size: 0x00F8 (0x000000 - 0x0000F8)
class FEncounterClearConditions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FLogicalGroupedExpression)                 ForceClearConditions                                        OFFSET(getStruct<T>, {0x0, 120, 0, 0})
	SMember(FLogicalGroupedExpression)                 ClearConditions                                             OFFSET(getStruct<T>, {0x78, 120, 0, 0})
	DMember(float)                                     KillPercentToClear                                          OFFSET(get<float>, {0xF0, 4, 0, 0})
};

/// Struct /Script/Indiana.GameTimeDataEntry
/// Size: 0x000C (0x000000 - 0x00000C)
class FGameTimeDataEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Days                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Hours                                                       OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   Minutes                                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Indiana.EncounterActivationConditions
/// Size: 0x0098 (0x000000 - 0x000098)
class FEncounterActivationConditions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FLogicalGroupedExpression)                 ValidConditions                                             OFFSET(getStruct<T>, {0x0, 120, 0, 0})
	DMember(bool)                                      bRestrictTimePhases                                         OFFSET(get<bool>, {0x78, 1, 0, 0})
	CMember(TArray<EPhaseOfDay>)                       ValidTimePhases                                             OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(float)                                     ActivationChance                                            OFFSET(get<float>, {0x90, 4, 0, 0})
};

/// Class /Script/Indiana.Encounter
/// Size: 0x0350 (0x0002B8 - 0x000608)
class AEncounter : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1544;

public:
	SMember(FMulticastInlineDelegate)                  OnEncounterComplete                                         OFFSET(getStruct<T>, {0x2B8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEncounterActivated                                        OFFSET(getStruct<T>, {0x2C8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEncounterDeactivated                                      OFFSET(getStruct<T>, {0x2D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEncounterActorDamaged                                     OFFSET(getStruct<T>, {0x2E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEncounterActorKilled                                      OFFSET(getStruct<T>, {0x2F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEncounterActorAlertChanged                                OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEncounterActorCombatChanged                               OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEncounterActorDespawned                                   OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	DMember(bool)                                      bPropagateEditorChangesToChildNodes                         OFFSET(get<bool>, {0x338, 1, 0, 0})
	CMember(TArray<class UEncounterList*>)             EncounterLists                                              OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(TArray<FPotentialEncounterList>)           PotentialEncounterLists                                     OFFSET(get<T>, {0x350, 16, 0, 0})
	DMember(bool)                                      bPersist                                                    OFFSET(get<bool>, {0x360, 1, 0, 0})
	SMember(FEncounterClearConditions)                 ClearConditions                                             OFFSET(getStruct<T>, {0x368, 248, 0, 0})
	DMember(bool)                                      bResetIfComplete                                            OFFSET(get<bool>, {0x460, 1, 0, 0})
	SMember(FGameTimeDataEntry)                        CooldownTime                                                OFFSET(getStruct<T>, {0x464, 12, 0, 0})
	DMember(bool)                                      bEncounterEnabled                                           OFFSET(get<bool>, {0x470, 1, 0, 0})
	SMember(FEncounterActivationConditions)            EnabledConditions                                           OFFSET(getStruct<T>, {0x478, 152, 0, 0})
	DMember(float)                                     ActivationRadius                                            OFFSET(get<float>, {0x510, 4, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             ActivationActor                                             OFFSET(get<T>, {0x514, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<AActor*>>)           ActivationActors                                            OFFSET(get<T>, {0x520, 16, 0, 0})
	DMember(float)                                     DeactivationTime                                            OFFSET(get<float>, {0x530, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<ASpawnNodeBase*>>)   ChildNodes                                                  OFFSET(get<T>, {0x538, 16, 0, 0})
	CMember(class UClass*)                             TeamOverride                                                OFFSET(get<T>, {0x548, 8, 0, 0})
	DMember(bool)                                      bShareSameLevel                                             OFFSET(get<bool>, {0x550, 1, 0, 0})
	DMember(int32_t)                                   LevelOffset                                                 OFFSET(get<int32_t>, {0x554, 4, 0, 0})
	CMember(EEncounterAggroType)                       AggroType                                                   OFFSET(get<T>, {0x558, 1, 0, 0})
	CMember(class UObsidianIDComponent*)               ObsidianID                                                  OFFSET(get<T>, {0x560, 8, 0, 0})
	DMember(bool)                                      bOverrideForceTetherRadius                                  OFFSET(get<bool>, {0x5F8, 1, 0, 0})
	DMember(float)                                     OverrideForceTetherRadius                                   OFFSET(get<float>, {0x5FC, 4, 0, 0})
	CMember(EPseudoGodMode)                            PseudoGodModeOverride                                       OFFSET(get<T>, {0x600, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.Encounter.SetEncounterEnabled
	// void SetEncounterEnabled(bool bEnabled);                                                                                 // [0x18059e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.ResetActivationFailed
	// void ResetActivationFailed();                                                                                            // [0x1805880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.RefreshEncounter
	// void RefreshEncounter();                                                                                                 // [0x1805860] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.OnNodeBeginSpawning
	// void OnNodeBeginSpawning(class ASpawnNodeBase* Node);                                                                    // [0x1805700] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorSpawned
	// void OnNodeActorSpawned(class ASpawnNodeBase* Node, bool bDamageable, bool bFirstSpawn);                                 // [0x18055f0] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorKilled
	// void OnNodeActorKilled(class ASpawnNodeBase* Node, bool bFirstKill);                                                     // [0x1805520] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorDespawned
	// void OnNodeActorDespawned(class ASpawnNodeBase* Node);                                                                   // [0x1805490] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorDamaged
	// void OnNodeActorDamaged(class ASpawnNodeBase* Node, FCauseDamageInfo& CauseDamageInfo);                                  // [0x18053a0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Encounter.OnNodeActorCombatState
	// void OnNodeActorCombatState(class ASpawnNodeBase* Node, bool bInCombat, bool bRestoring);                                // [0x1805290] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorAwareOfPlayer
	// void OnNodeActorAwareOfPlayer(class ASpawnNodeBase* Node, bool bRestoring);                                              // [0x18051c0] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnNodeActorAlertState
	// void OnNodeActorAlertState(class ASpawnNodeBase* Node, class AActor* TargetActor, EAlertState State, bool bRestoring);   // [0x1805060] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnActivationEndOverlap
	// void OnActivationEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);                                    // [0x1804e70] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.OnActivationBeginOverlap
	// void OnActivationBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);                                  // [0x1804da0] Final|Native|Protected 
	// Function /Script/Indiana.Encounter.IterateThroughSpawnedActors
	// void IterateThroughSpawnedActors(FDelegateProperty& GenericFunctionCall);                                                // [0x1804cf0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.Encounter.IsEncounterActive
	// bool IsEncounterActive();                                                                                                // [0x1804c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Encounter.HasEncounterCompleted
	// bool HasEncounterCompleted();                                                                                            // [0x1804c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Encounter.ForceDeactivateEncounter
	// void ForceDeactivateEncounter();                                                                                         // [0x1804b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.DeactivateEncounter
	// void DeactivateEncounter();                                                                                              // [0x1804b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Encounter.ActivateEncounter
	// void ActivateEncounter();                                                                                                // [0x1804ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.EncounterComponent
/// Size: 0x0008 (0x000268 - 0x000270)
class UEncounterComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/Indiana.EncounterEnemyDescription
/// Size: 0x0008 (0x000030 - 0x000038)
class UEncounterEnemyDescription : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(uint32_t)                                  Count                                                       OFFSET(get<uint32_t>, {0x30, 4, 0, 0})
};

/// Class /Script/Indiana.EncounterEnemyScaled
/// Size: 0x0008 (0x000038 - 0x000040)
class UEncounterEnemyScaled : public UEncounterEnemyDescription
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UScaledActorTable*)                  ScaledActorTable                                            OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.EncounterEnemyFixed
/// Size: 0x0028 (0x000038 - 0x000060)
class UEncounterEnemyFixed : public UEncounterEnemyDescription
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TSoftObjectPtr<class UClass*>)             ActorClass                                                  OFFSET(get<T>, {0x38, 40, 0, 0})
};

/// Class /Script/Indiana.EncounterCompositionBase
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UEncounterCompositionBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FLogicalGroupedExpression)                 ValidConditions                                             OFFSET(getStruct<T>, {0x30, 120, 0, 0})
	DMember(int32_t)                                   Weight                                                      OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
};

/// Class /Script/Indiana.EncounterCompositionStandard
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UEncounterCompositionStandard : public UEncounterCompositionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<class UEncounterEnemyDescription*>) EncounterEnemies                                            OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/Indiana.EncounterCompositionSubList
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UEncounterCompositionSubList : public UEncounterCompositionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class UEncounterList*)                     SubEncounterList                                            OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Class /Script/Indiana.EncounterList
/// Size: 0x01B0 (0x000038 - 0x0001E8)
class UEncounterList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(bool)                                      bPersist                                                    OFFSET(get<bool>, {0x3C, 1, 0, 0})
	SMember(FEncounterActivationConditions)            ValidConditions                                             OFFSET(getStruct<T>, {0x40, 152, 0, 0})
	SMember(FEncounterClearConditions)                 ClearConditions                                             OFFSET(getStruct<T>, {0xD8, 248, 0, 0})
	CMember(TArray<class UEncounterCompositionBase*>)  EncounterCompositions                                       OFFSET(get<T>, {0x1D0, 16, 0, 0})
	DMember(uint32_t)                                  TotalWeight                                                 OFFSET(get<uint32_t>, {0x1E0, 4, 0, 0})
};

/// Class /Script/Indiana.EnemyDifficultyWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class UEnemyDifficultyWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UImage*)                             DifficultSymbol                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LevelTextBlock                                              OFFSET(get<T>, {0x308, 8, 0, 0})
	DMember(int32_t)                                   ExtremeEnemyLevelDifferenceMin                              OFFSET(get<int32_t>, {0x310, 4, 0, 0})
};

/// Class /Script/Indiana.EnemyScannerComponent
/// Size: 0x0140 (0x0000E0 - 0x000220)
class UEnemyScannerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FMulticastInlineDelegate)                  EnemyScannerActivatedDelegate                               OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  EnemyScannerDeactivatedDelegate                             OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  EnemyScannerActiveTargetChangedDelegate                     OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	DMember(float)                                     ScanTime                                                    OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     ScanNotTargetingTime                                        OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(int32_t)                                   MaxScannedTargets                                           OFFSET(get<int32_t>, {0x124, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.EnemyScannerComponent.TimeDilationStart
	// void TimeDilationStart();                                                                                                // [0x180d040] Final|Native|Protected 
	// Function /Script/Indiana.EnemyScannerComponent.TimeDilationEnd
	// void TimeDilationEnd(float Duration);                                                                                    // [0x180cfc0] Final|Native|Protected 
};

/// Class /Script/Indiana.EnemyScannerWidget
/// Size: 0x0058 (0x000300 - 0x000358)
class UEnemyScannerWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(class UTextBlockBase*)                     NameValueTextBlock                                          OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     FactionValueTextBlock                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LevelValueTextBlock                                         OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     HealthValueTextBlock                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ArmorValueTextBlock                                         OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StrongAgainstValueTextBlock                                 OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     WeakAgainstValueTextBlock                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UHorizontalBox*)                     StrongAgainstBox                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UHorizontalBox*)                     WeakAgainstBox                                              OFFSET(get<T>, {0x340, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.EnemyScannerWidget.ScanEnded
	// void ScanEnded();                                                                                                        // [0x180cd70] Final|Native|Protected 
	// Function /Script/Indiana.EnemyScannerWidget.ScanCompleted
	// void ScanCompleted();                                                                                                    // [0x180cd50] Final|Native|Protected 
};

/// Class /Script/Indiana.EnvironmentalSpaceVolume
/// Size: 0x0008 (0x000310 - 0x000318)
class AEnvironmentalSpaceVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
};

/// Class /Script/Indiana.EnvironmentInteractionComponent
/// Size: 0x00B0 (0x0000E0 - 0x000190)
class UEnvironmentInteractionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
};

/// Class /Script/Indiana.EnvQueryGenerator_Cover
/// Size: 0x0080 (0x000058 - 0x0000D8)
class UEnvQueryGenerator_Cover : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FAIDataProviderFloatValue)                 SearchRadius                                                OFFSET(getStruct<T>, {0x58, 56, 0, 0})
	SMember(FAIDataProviderIntValue)                   CoverTypesProvider                                          OFFSET(getStruct<T>, {0x90, 56, 0, 0})
	CMember(class UClass*)                             SearchCenter                                                OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(bool)                                      bUseOctree                                                  OFFSET(get<bool>, {0xD0, 1, 0, 0})
};

/// Class /Script/Indiana.EnvQueryGenerator_FeetLocation
/// Size: 0x0008 (0x000058 - 0x000060)
class UEnvQueryGenerator_FeetLocation : public UEnvQueryGenerator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             QueryContext                                                OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_CanSeeCharacter
/// Size: 0x0008 (0x000200 - 0x000208)
class UEnvQueryTest_CanSeeCharacter : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	CMember(class UClass*)                             EnemyContext                                                OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_CharacterHealth
/// Size: 0x0000 (0x000200 - 0x000200)
class UEnvQueryTest_CharacterHealth : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
};

/// Class /Script/Indiana.EnvQueryTest_Cover
/// Size: 0x0008 (0x000200 - 0x000208)
class UEnvQueryTest_Cover : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	CMember(class UClass*)                             EnemyContext                                                OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_DynamicSearchTest
/// Size: 0x0000 (0x000200 - 0x000200)
class UEnvQueryTest_DynamicSearchTest : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
};

/// Class /Script/Indiana.EnvQueryTest_DynamicFleeTest
/// Size: 0x0000 (0x000200 - 0x000200)
class UEnvQueryTest_DynamicFleeTest : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
};

/// Class /Script/Indiana.EnvQueryTest_FollowerPos
/// Size: 0x0080 (0x000200 - 0x000280)
class UEnvQueryTest_FollowerPos : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class UClass*)                             OriginContext                                               OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(class UClass*)                             ForwardContext                                              OFFSET(get<T>, {0x208, 8, 0, 0})
	SMember(FAIDataProviderFloatValue)                 IdealAngleProvider                                          OFFSET(getStruct<T>, {0x210, 56, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MinAngleProvider                                            OFFSET(getStruct<T>, {0x248, 56, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_HasIndianaTag
/// Size: 0x0028 (0x000200 - 0x000228)
class UEnvQueryTest_HasIndianaTag : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	DMember(bool)                                      bExcludeSelf                                                OFFSET(get<bool>, {0x200, 1, 0, 0})
	DMember(bool)                                      bExcludeSimiliarType                                        OFFSET(get<bool>, {0x201, 1, 0, 0})
	SMember(FGameplayTagContainer)                     TagsToMatch                                                 OFFSET(getStruct<T>, {0x208, 32, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_IsActorOfClass
/// Size: 0x0008 (0x000200 - 0x000208)
class UEnvQueryTest_IsActorOfClass : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	CMember(class UClass*)                             ActorClass                                                  OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_NavmeshRaycast
/// Size: 0x0008 (0x000200 - 0x000208)
class UEnvQueryTest_NavmeshRaycast : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	CMember(class UClass*)                             DestinationContext                                          OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_OccupiedRaycast
/// Size: 0x0020 (0x000200 - 0x000220)
class UEnvQueryTest_OccupiedRaycast : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(class UClass*)                             DestinationContext                                          OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(EOccupationChannel)                        OccupationChannel                                           OFFSET(get<T>, {0x208, 1, 0, 0})
	CMember(TArray<ETeamAttitudeFlag>)                 AttitudeFlags                                               OFFSET(get<T>, {0x210, 16, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_OccupiedEnvironmentNodes
/// Size: 0x0038 (0x000200 - 0x000238)
class UEnvQueryTest_OccupiedEnvironmentNodes : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	SMember(FAIDataProviderBoolValue)                  IgnoreNodesOccupiedByQueryOwner                             OFFSET(getStruct<T>, {0x200, 56, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_PreferredCover
/// Size: 0x0070 (0x000208 - 0x000278)
class UEnvQueryTest_PreferredCover : public UEnvQueryTest_Cover
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	SMember(FAIDataProviderFloatValue)                 MinPreferredRangeProvider                                   OFFSET(getStruct<T>, {0x208, 56, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MaxPreferredRangeProvider                                   OFFSET(getStruct<T>, {0x240, 56, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_Ranged
/// Size: 0x0008 (0x000200 - 0x000208)
class UEnvQueryTest_Ranged : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	CMember(class UClass*)                             TargetContext                                               OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_PreferredRanged
/// Size: 0x00E0 (0x000208 - 0x0002E8)
class UEnvQueryTest_PreferredRanged : public UEnvQueryTest_Ranged
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	SMember(FAIDataProviderFloatValue)                 MinPreferredRangeProvider                                   OFFSET(getStruct<T>, {0x208, 56, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MaxPreferredRangeProvider                                   OFFSET(getStruct<T>, {0x240, 56, 0, 0})
	SMember(FAIDataProviderFloatValue)                 RepositionTypeProvider                                      OFFSET(getStruct<T>, {0x278, 56, 0, 0})
	SMember(FAIDataProviderFloatValue)                 MinDirectionBiasProvider                                    OFFSET(getStruct<T>, {0x2B0, 56, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_Projectile
/// Size: 0x0008 (0x000200 - 0x000208)
class UEnvQueryTest_Projectile : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	CMember(class UClass*)                             DestinationContext                                          OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_TeamRelationship
/// Size: 0x0008 (0x000200 - 0x000208)
class UEnvQueryTest_TeamRelationship : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	DMember(bool)                                      bExcludeSelf                                                OFFSET(get<bool>, {0x200, 1, 0, 0})
	DMember(bool)                                      bExcludeSimiliarType                                        OFFSET(get<bool>, {0x201, 1, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_ValidCover
/// Size: 0x0000 (0x000208 - 0x000208)
class UEnvQueryTest_ValidCover : public UEnvQueryTest_Cover
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
};

/// Class /Script/Indiana.EnvQueryTest_ValidCoverFire
/// Size: 0x0038 (0x000208 - 0x000240)
class UEnvQueryTest_ValidCoverFire : public UEnvQueryTest_Cover
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FAIDataProviderBoolValue)                  ShouldRunTest                                               OFFSET(getStruct<T>, {0x208, 56, 0, 0})
};

/// Class /Script/Indiana.EnvQueryTest_ValidJump
/// Size: 0x0000 (0x000200 - 0x000200)
class UEnvQueryTest_ValidJump : public UEnvQueryTest
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
};

/// Class /Script/Indiana.EnvQueryTest_ValidRangedFire
/// Size: 0x0000 (0x000208 - 0x000208)
class UEnvQueryTest_ValidRangedFire : public UEnvQueryTest_Ranged
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
};

/// Class /Script/Indiana.EpicGameStoreDLCManager
/// Size: 0x0010 (0x000050 - 0x000060)
class UEpicGameStoreDLCManager : public UDLCManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/Indiana.EQSContext_IndianaBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_IndianaBase : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_QuerierFeetLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_QuerierFeetLocation : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_PrimaryTarget : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTargetLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_PrimaryTargetLocation : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTargetFeetLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_PrimaryTargetFeetLocation : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTargetStimulusLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_PrimaryTargetStimulusLocation : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_FollowTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_FollowTarget : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_WanderAchor
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_WanderAchor : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_FleeStatusEffectTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_FleeStatusEffectTarget : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_CompanionFollowOrigin
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_CompanionFollowOrigin : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_CompanionFollowOriginProjected
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_CompanionFollowOriginProjected : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_CompanionFollowForward
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_CompanionFollowForward : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_CompanionCommandLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_CompanionCommandLocation : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_CompanionCommandForward
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_CompanionCommandForward : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_CompanionCommandTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_CompanionCommandTarget : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_Companions
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_Companions : public UEnvQueryContext
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_CalledShotSpellTargetFeetLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_CalledShotSpellTargetFeetLocation : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_CalledShotSpellTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_CalledShotSpellTarget : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_CalledShotEndFurnitureLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_CalledShotEndFurnitureLocation : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_SphereCheatLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_SphereCheatLocation : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_Player
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_Player : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_PrimaryTargetStimulusSourceActorLocation
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_PrimaryTargetStimulusSourceActorLocation : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_TetherOrigin
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_TetherOrigin : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.EQSContext_GeneralEQSActor
/// Size: 0x0000 (0x000030 - 0x000030)
class UEQSContext_GeneralEQSActor : public UEQSContext_IndianaBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Indiana.AISelector_EQSParameter
/// Size: 0x0008 (0x000000 - 0x000008)
class FAISelector_EQSParameter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UClass*)                             EQSParameter                                                OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Indiana.AIDynamicParam_IndianaBase
/// Size: 0x0018 (0x000000 - 0x000018)
class FAIDynamicParam_IndianaBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(EAIParamType)                              ParamType                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	SMember(FAISelector_EQSParameter)                  ValueSelector                                               OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Indiana.EQSRequest_IndianaBase
/// Size: 0x0020 (0x000038 - 0x000058)
class UEQSRequest_IndianaBase : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UEnvQuery*)                          QueryTemplate                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FAIDynamicParam_IndianaBase>)       QueryConfig                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TEnumAsByte<EEnvQueryRunMode>)             RunMode                                                     OFFSET(get<T>, {0x50, 1, 0, 0})
};

/// Struct /Script/Indiana.WeaponSlot
/// Size: 0x0008 (0x000000 - 0x000008)
class FWeaponSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(TWeakObjectPtr<class UWeapon*>)            Weapon                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Indiana.MedKitConsumableSlot
/// Size: 0x0010 (0x000000 - 0x000010)
class FMedKitConsumableSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             Consumable                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.EquipmentComponent
/// Size: 0x03B0 (0x0000E0 - 0x000490)
class UEquipmentComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	SMember(FMulticastInlineDelegate)                  WeaponStartEquipDelegate                                    OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponEndEquipDelegate                                      OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponStartUnequipDelegate                                  OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponEndUnequipDelegate                                    OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponStartReloadDelegate                                   OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponEndReloadDelegate                                     OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponInterruptReloadDelegate                               OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponStartHolsterDelegate                                  OFFSET(getStruct<T>, {0x190, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponEndHolsterDelegate                                    OFFSET(getStruct<T>, {0x1A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponStartUnholsterDelegate                                OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  WeaponEndUnholsterDelegate                                  OFFSET(getStruct<T>, {0x1C0, 16, 0, 0})
	SMember(FName)                                     WeaponAttachSocket                                          OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	SMember(FWeaponItemDefinition)                     DefaultEquippedWeaponItem                                   OFFSET(getStruct<T>, {0x268, 88, 0, 0})
	CMember(class UWeapon*)                            PendingWeaponToEquip                                        OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UWeapon*)                            EquippedWeapon                                              OFFSET(get<T>, {0x2D0, 8, 0, 0})
	SMember(FWeaponSlot)                               WeaponSlots                                                 OFFSET(getStruct<T>, {0x2D8, 32, 0, 0})
	SMember(FArmorSetItemDefinition)                   DefaultArmorSetItem                                         OFFSET(getStruct<T>, {0x320, 80, 0, 0})
	SMember(FHelmetItemDefinition)                     DefaultHelmetItem                                           OFFSET(getStruct<T>, {0x370, 32, 0, 0})
	CMember(class UDisguiseData*)                      PermanentDisguise                                           OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UArmorItem*)                         NewArmorSlots                                               OFFSET(get<T>, {0x398, 16, 0, 0})
	CMember(class UArmorItem*)                         DisguiseArmorSlots                                          OFFSET(get<T>, {0x3A8, 16, 0, 0})
	DMember(bool)                                      bAllowDisguiseVisuals                                       OFFSET(get<bool>, {0x3B8, 1, 0, 0})
	DMember(bool)                                      bDisguiseEquipUseTransition                                 OFFSET(get<bool>, {0x3B9, 1, 0, 0})
	DMember(float)                                     DisguiseEquipRampInTime                                     OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(float)                                     DisguiseEquipMinHoldTime                                    OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(float)                                     DisguiseEquipRampOutTime                                    OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(bool)                                      bDisguiseUnequipUseTransition                               OFFSET(get<bool>, {0x3C8, 1, 0, 0})
	DMember(float)                                     DisguiseUnequipRampInTime                                   OFFSET(get<float>, {0x3CC, 4, 0, 0})
	DMember(float)                                     DisguiseUnequipMinHoldTime                                  OFFSET(get<float>, {0x3D0, 4, 0, 0})
	DMember(float)                                     DisguiseUnequipRampOutTime                                  OFFSET(get<float>, {0x3D4, 4, 0, 0})
	CMember(class UDisguiseData*)                      CurrentDisguise                                             OFFSET(get<T>, {0x3E0, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMedKitUsedDelegate                                        OFFSET(getStruct<T>, {0x3E8, 16, 0, 0})
	CMember(TArray<FMedKitConsumableSlot>)             MedKitConsumableSlots                                       OFFSET(get<T>, {0x460, 16, 0, 0})
	CMember(class UClass*)                             DefaultMedKitConsumable                                     OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UClass*)                             FirstMedKitSlotConsumable                                   OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(TArray<class UGadget*>)                    GadgetSlots                                                 OFFSET(get<T>, {0x480, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.EquipmentComponent.WeaponAdvanceLevelDebug
	// void WeaponAdvanceLevelDebug(int32_t NumLevels, bool bIgnoreCost);                                                       // [0x180d100] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.UnholsterWeapon
	// void UnholsterWeapon(EHolsterRequestSource InSource);                                                                    // [0x180d080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.UnequipAllModsDebug
	// void UnequipAllModsDebug();                                                                                              // [0x180d060] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.SetWeaponLevel
	// void SetWeaponLevel(int32_t Level, bool bOverrideWeaponLevels);                                                          // [0x180cef0] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.SetCalledShotWeaponLevel
	// void SetCalledShotWeaponLevel(int32_t Level);                                                                            // [0x180ce60] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.SetArmorLevel
	// void SetArmorLevel(int32_t Level, bool bOverrideArmorLevels);                                                            // [0x180cd90] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.OnUnlockAbilityChanged
	// void OnUnlockAbilityChanged(EUnlockAbility Ability);                                                                     // [0x180ccd0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnUnequipDisguise
	// void OnUnequipDisguise();                                                                                                // [0x180ccb0] Final|Native|Public  
	// Function /Script/Indiana.EquipmentComponent.OnStopClimb
	// void OnStopClimb();                                                                                                      // [0x180cc90] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x180cc00] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartUnholsterWeapon
	// void OnStartUnholsterWeapon(class UWeapon* Weapon);                                                                      // [0x180cb70] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartUnequipWeapon
	// void OnStartUnequipWeapon(class UWeapon* Weapon);                                                                        // [0x180cae0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartReloadWeapon
	// void OnStartReloadWeapon(class UWeapon* Weapon);                                                                         // [0x180ca50] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartHolsterWeapon
	// void OnStartHolsterWeapon(class UWeapon* Weapon);                                                                        // [0x180c9c0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartEquipWeapon
	// void OnStartEquipWeapon(class UWeapon* Weapon);                                                                          // [0x180c930] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnStartClimb
	// void OnStartClimb();                                                                                                     // [0x180c910] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnMedKitUsed
	// void OnMedKitUsed(int32_t ConsumeablesUsed);                                                                             // [0x180c880] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnItemRemovedFromInventory
	// void OnItemRemovedFromInventory(FItemStack& ItemStack);                                                                  // [0x180c7e0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.EquipmentComponent.OnItemAddedToInventory
	// void OnItemAddedToInventory(FItemStack& ItemStack);                                                                      // [0x180c740] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.EquipmentComponent.OnInterruptReloadWeapon
	// void OnInterruptReloadWeapon(class UWeapon* Weapon);                                                                     // [0x180c6b0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEquipDisguise
	// void OnEquipDisguise(class UDisguiseData* Disguise);                                                                     // [0x180c620] Final|Native|Public  
	// Function /Script/Indiana.EquipmentComponent.OnEndUnholsterWeapon
	// void OnEndUnholsterWeapon(class UWeapon* Weapon);                                                                        // [0x180c590] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEndUnequipWeapon
	// void OnEndUnequipWeapon(class UWeapon* Weapon);                                                                          // [0x180c500] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEndReloadWeapon
	// void OnEndReloadWeapon(class UWeapon* Weapon);                                                                           // [0x180c470] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEndHolsterWeapon
	// void OnEndHolsterWeapon(class UWeapon* Weapon);                                                                          // [0x180c3e0] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.OnEndEquipWeapon
	// void OnEndEquipWeapon(class UWeapon* Weapon);                                                                            // [0x180c350] Final|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.LoadAmmoDebug
	// void LoadAmmoDebug(FName AmmoName);                                                                                      // [0x180c2c0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.HolsterWeapon
	// void HolsterWeapon(EHolsterRequestSource InSource, bool bInstantHolster);                                                // [0x180c1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.GetEquippedWeapon
	// class UWeapon* GetEquippedWeapon();                                                                                      // [0x180c1d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.EquipmentComponent.EquipWeaponMicroModDebug
	// void EquipWeaponMicroModDebug(FName MicroModName);                                                                       // [0x180c140] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.EquipWeaponFromSlot
	// void EquipWeaponFromSlot(uint32_t SlotIndex, bool bInstantEquip);                                                        // [0x180c070] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.EquipWeaponDebug
	// void EquipWeaponDebug(FName WeaponName);                                                                                 // [0x180bfe0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.EquipWeapon
	// void EquipWeapon(class UWeapon* WeaponToEquip, bool bInstantEquip);                                                      // [0x180bf10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.EquipPreviousWeapon
	// void EquipPreviousWeapon();                                                                                              // [0x180bef0] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.EquipModDebug
	// void EquipModDebug(FName ModName);                                                                                       // [0x180be60] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.EquipDefaultWeapon
	// void EquipDefaultWeapon();                                                                                               // [0x180be40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.EquipArmorSetMicroModDebug
	// void EquipArmorSetMicroModDebug(FName MicroModName);                                                                     // [0x180bdb0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.EquipmentComponent.EquipArmorModByClassDebug
	// void EquipArmorModByClassDebug(EArmorModSlot ArmorModSlot, class UClass* ArmorModItem);                                  // [0x180bce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.EquipmentComponent.EquipArmorDebug
	// void EquipArmorDebug(FName ArmorName);                                                                                   // [0x180bc50] Final|Exec|Native|Public 
	// Function /Script/Indiana.EquipmentComponent.EquipArmorByClassDebug
	// void EquipArmorByClassDebug(EArmorSlot ArmorSlot, class UClass* ArmorItem);                                              // [0x180bb80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.EquipmentModsWidget
/// Size: 0x00F0 (0x000300 - 0x0003F0)
class UEquipmentModsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(TMap<EArmorModSlot, class UTexture2D*>)    ArmorModImages                                              OFFSET(get<T>, {0x300, 80, 0, 0})
	CMember(TMap<EModSlot, class UTexture2D*>)         WeaponModImages                                             OFFSET(get<T>, {0x350, 80, 0, 0})
	CMember(class UEquipmentModWidget*)                Mod0Widget                                                  OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UEquipmentModWidget*)                Mod1Widget                                                  OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UEquipmentModWidget*)                Mod2Widget                                                  OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UEquipmentModWidget*)                Mod3Widget                                                  OFFSET(get<T>, {0x3B8, 8, 0, 0})
};

/// Class /Script/Indiana.EquipmentModWidget
/// Size: 0x0030 (0x000278 - 0x0002A8)
class UEquipmentModWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	DMember(float)                                     OpacityIfInstalled                                          OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     OpacityIfEmpty                                              OFFSET(get<float>, {0x27C, 4, 0, 0})
	CMember(class UTexture2D*)                         UninstalledTexture                                          OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UTexture2D*)                         InstalledTexture                                            OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UImage*)                             IconImage                                                   OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionTextBlock                                        OFFSET(get<T>, {0x2A0, 8, 0, 0})
};

/// Class /Script/Indiana.EventEffectComponent
/// Size: 0x0050 (0x0000E0 - 0x000130)
class UEventEffectComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Class /Script/Indiana.EventEffects
/// Size: 0x0010 (0x000030 - 0x000040)
class UEventEffects : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UEventEffect*>)               Effects                                                     OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.EventListener
/// Size: 0x0028 (0x000030 - 0x000058)
class UEventListener : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/Indiana.FactionListener
/// Size: 0x0058 (0x000058 - 0x0000B0)
class UFactionListener : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(class UClass*)                             Faction                                                     OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(bool)                                      bCheckAttitude                                              OFFSET(get<bool>, {0x60, 1, 0, 0})
	CMember(TEnumAsByte<ETeamAttitude>)                Attitude                                                    OFFSET(get<T>, {0x61, 1, 0, 0})
	SMember(FGameplayTagContainer)                     CreatureTypes                                               OFFSET(getStruct<T>, {0x68, 32, 0, 0})
	SMember(FGameplayTagContainer)                     CreatureRoles                                               OFFSET(getStruct<T>, {0x88, 32, 0, 0})
	DMember(bool)                                      bAllowInanimateObjects                                      OFFSET(get<bool>, {0xA8, 1, 0, 0})
};

/// Class /Script/Indiana.OnKillListener
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UOnKillListener : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FGameplayTagContainer)                     WeaponCategory                                              OFFSET(getStruct<T>, {0xB0, 32, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnKillListener.OnKill
	// void OnKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                    // [0x181b3c0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnCompanionKillListener
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UOnCompanionKillListener : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<EDamageFlags>)                      CheckDamageFlags                                            OFFSET(get<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnCompanionKillListener.OnKill
	// void OnKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                    // [0x181b2d0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnKillTurnToAshListener
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UOnKillTurnToAshListener : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0xB0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnKillTurnToAshListener.OnKill
	// void OnKill(class AActor* Victim, class UClass* DmgType);                                                                // [0x181b4b0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCompanionRegistrationChanged
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnCompanionRegistrationChanged : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnCompanionRegistrationChanged.OnCompanionRegistrationChanged
	// void OnCompanionRegistrationChanged();                                                                                   // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCompanionRegistrationAdded
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnCompanionRegistrationAdded : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnCompanionRegistrationAdded.OnCompanionRegistrationAdded
	// void OnCompanionRegistrationAdded();                                                                                     // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnAttackComplete
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnAttackComplete : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnAttackComplete.OnAttackComplete
	// void OnAttackComplete(int32_t AttackID);                                                                                 // [0x181a1c0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCausedDamage
/// Size: 0x0048 (0x0000B0 - 0x0000F8)
class UOnCausedDamage : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(TArray<EDamageFlags>)                      CheckDamageFlags                                            OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<EDamageFlags>)                      CheckNotDamageFlags                                         OFFSET(get<T>, {0xC0, 16, 0, 0})
	DMember(bool)                                      bTriggerOnZeroDamage                                        OFFSET(get<bool>, {0xD0, 1, 0, 0})
	DMember(bool)                                      bPassThroughDamage                                          OFFSET(get<bool>, {0xD1, 1, 0, 0})
	DMember(bool)                                      bOneCount                                                   OFFSET(get<bool>, {0xD2, 1, 0, 0})
	DMember(float)                                     PassThroughDamageScalar                                     OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(bool)                                      bUseDesiredDamageAmount                                     OFFSET(get<bool>, {0xD8, 1, 0, 0})
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0xE8, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnCausedDamage.OnCauseDamage
	// void OnCauseDamage(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x181a610] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnReceiveDamage
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UOnReceiveDamage : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FGameplayTagContainer)                     WeaponTypes                                                 OFFSET(getStruct<T>, {0xB0, 32, 0, 0})
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(ETTDState)                                 TTDState                                                    OFFSET(get<T>, {0xD8, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnReceiveDamage.OnDamageEvent
	// void OnDamageEvent(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x181a8c0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnReceiveFallingDamage
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnReceiveFallingDamage : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnReceiveFallingDamage.OnFallingDamage
	// void OnFallingDamage(float Damage);                                                                                      // [0x181ab80] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMeleeHit
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UOnMeleeHit : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(EMeleeAttackType)                          MeleeType                                                   OFFSET(get<T>, {0xB0, 1, 0, 0})
	CMember(EMeleeAction)                              MeleeAction                                                 OFFSET(get<T>, {0xB1, 1, 0, 0})
	DMember(int32_t)                                   MinNumHit                                                   OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	DMember(bool)                                      bPassThroughDamage                                          OFFSET(get<bool>, {0xB8, 1, 0, 0})
	DMember(float)                                     PassThroughDamageScalar                                     OFFSET(get<float>, {0xBC, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnMeleeHit.OnMeleeHit
	// void OnMeleeHit(TArray<AActor*>& HitActors, class UWeapon* Weapon, float Damage);                                        // [0x181b720] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnMeleeActionStart
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnMeleeActionStart : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(EMeleeAction)                              MeleeAction                                                 OFFSET(get<T>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnMeleeActionStart.OnMeleeActionStart
	// void OnMeleeActionStart(EMeleeAction ActionStarted);                                                                     // [0x181a570] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMeleeActionEnd
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnMeleeActionEnd : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(EMeleeAction)                              MeleeAction                                                 OFFSET(get<T>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnMeleeActionEnd.OnMeleeActionEnd
	// void OnMeleeActionEnd(EMeleeAction ActionEnded);                                                                         // [0x181a570] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSpellCast
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnSpellCast : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnSpellCast.OnSpellCast
	// void OnSpellCast(class UClass* Spell);                                                                                   // [0x181c330] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSpellRemoved
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnSpellRemoved : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnSpellRemoved.OnSpellRemoved
	// void OnSpellRemoved(class UClass* RemovedSpell);                                                                         // [0x181c330] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBlockStart
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnBlockStart : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnBlockStart.OnBlockStart
	// void OnBlockStart();                                                                                                     // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBlockEnd
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnBlockEnd : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnBlockEnd.OnBlockEnd
	// void OnBlockEnd();                                                                                                       // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPerfectBlock
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPerfectBlock : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPerfectBlock.OnPerfectBlockEvent
	// void OnPerfectBlockEvent(class AIndianaCharacter* Attacker, float Damage);                                               // [0x181bb60] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBlockedHit
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnBlockedHit : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnBlockedHit.OnBlockedHitEvent
	// void OnBlockedHitEvent(bool bIsMeleeHit);                                                                                // [0x181a340] Final|Native|Protected 
};

/// Class /Script/Indiana.OnDetected
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnDetected : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnDetected.OnDetectedEvent
	// void OnDetectedEvent(class AActor* Detector);                                                                            // [0x181a810] Final|Native|Protected 
};

/// Class /Script/Indiana.OnIndividualDetected
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UOnIndividualDetected : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(int32_t)                                   NumDetectors                                                OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0xB4, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnIndividualDetected.OnIndividualUnDetectedEvent
	// void OnIndividualUnDetectedEvent(class AIndianaAiCharacter* Detector);                                                   // [0x181b0f0] Final|Native|Protected 
	// Function /Script/Indiana.OnIndividualDetected.OnIndividualDetectedEvent
	// void OnIndividualDetectedEvent(class AIndianaAiCharacter* Detector);                                                     // [0x181b060] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerMoveStart
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPlayerMoveStart : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPlayerMoveStart.OnPlayerMoveStart
	// void OnPlayerMoveStart();                                                                                                // [0x181a8a0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerMoveEnd
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPlayerMoveEnd : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPlayerMoveEnd.OnPlayerMoveEnd
	// void OnPlayerMoveEnd();                                                                                                  // [0x181a8a0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnDodgeEvent
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnDodgeEvent : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnDodgeEvent.OnDodge
	// void OnDodge(EDodgeDirection Direction);                                                                                 // [0x181a960] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStatusEffectAddedEvent
/// Size: 0x0010 (0x000058 - 0x000068)
class UOnStatusEffectAddedEvent : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(int32_t)                                   StackCount                                                  OFFSET(get<int32_t>, {0x60, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnStatusEffectAddedEvent.OnAddStatusEffect
	// void OnAddStatusEffect(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectAdded);             // [0x1819f80] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStatusEffectRemovedEvent
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnStatusEffectRemovedEvent : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnStatusEffectRemovedEvent.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectRemoved);       // [0x181c5f0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnNumHostileStatusEffects
/// Size: 0x0010 (0x000058 - 0x000068)
class UOnNumHostileStatusEffects : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(int32_t)                                   NumHostileStatusEffects                                     OFFSET(get<int32_t>, {0x5C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnNumHostileStatusEffects.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectRemoved);       // [0x181c520] Final|Native|Protected 
	// Function /Script/Indiana.OnNumHostileStatusEffects.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectAdded);           // [0x181c520] Final|Native|Protected 
};

/// Class /Script/Indiana.HasStatusEffectsEvent
/// Size: 0x0010 (0x000058 - 0x000068)
class UHasStatusEffectsEvent : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<class UClass*>)                     StatusEffects                                               OFFSET(get<T>, {0x58, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.HasStatusEffectsEvent.OnAddStatusEffect
	// void OnAddStatusEffect(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffectAdded);             // [0x1819eb0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSkillUsedEvent
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnSkillUsedEvent : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnSkillUsedEvent.OnSkillUsed
	// void OnSkillUsed(ESkill SkillUsed, class AActor* Target);                                                                // [0x181c190] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSkillEndedEvent
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnSkillEndedEvent : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnSkillEndedEvent.OnSkillEnded
	// void OnSkillEnded(ESkill SkillUsed, class AActor* Target);                                                               // [0x181c190] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSkillCheckSuccess
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnSkillCheckSuccess : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(EXPGainReason)                             XPReason                                                    OFFSET(get<T>, {0x59, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnSkillCheckSuccess.OnSkillCheckSuccess
	// void OnSkillCheckSuccess(EXPGainReason Reason, int32_t XPEarned, ESkill SkillUsed);                                      // [0x181c080] Final|Native|Protected 
};

/// Class /Script/Indiana.OnItemConsumed
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnItemConsumed : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FGameplayTag)                              ItemType                                                    OFFSET(getStruct<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnItemConsumed.OnItemConsumed
	// void OnItemConsumed(FItemStack& ItemStack);                                                                              // [0x181b230] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnSpendMoney
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnSpendMoney : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bOnVendorInteraction                                        OFFSET(get<bool>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnSpendMoney.OnMoneySpent
	// void OnMoneySpent(int32_t Money, bool bVendorInteraction);                                                               // [0x181b860] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPickPocket
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPickPocket : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPickPocket.OnPickPocket
	// void OnPickPocket(class AActor* Target);                                                                                 // [0x181bc30] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPickPocketStart
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPickPocketStart : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPickPocketStart.OnPickPocket
	// void OnPickPocket(class AActor* Target);                                                                                 // [0x181bc30] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPickPocketEnd
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPickPocketEnd : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPickPocketEnd.OnPickPocket
	// void OnPickPocket(class AActor* Target);                                                                                 // [0x181bc30] Final|Native|Protected 
};

/// Class /Script/Indiana.ReputationListener
/// Size: 0x0010 (0x000058 - 0x000068)
class UReputationListener : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UClass*)                             Faction                                                     OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(EReputationType)                           ReputationType                                              OFFSET(get<T>, {0x60, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.ReputationListener.OnReputationChange
	// void OnReputationChange(class UFactionData* FactionData, EReputationType InReputationType, int32_t Amount, class UReputationData* ReputationBefore, class UReputationData* ReputationAfter); // [0x181bec0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPartyChange
/// Size: 0x0010 (0x000058 - 0x000068)
class UOnPartyChange : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(int32_t)                                   NumCompanions                                               OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x5C, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnPartyChange.OnPartyChanged
	// void OnPartyChanged(class AIndianaAiCharacter* Companion, bool bAdded);                                                  // [0x181ba90] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPerfectDodge
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPerfectDodge : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPerfectDodge.OnPerfectDodge
	// void OnPerfectDodge(class AActor* Attacker);                                                                             // [0x181a810] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBehaviorStateChange
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnBehaviorStateChange : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(EBehaviorState)                            BehaviorState                                               OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(EBehaviorStateEventType)                   EventType                                                   OFFSET(get<T>, {0x59, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnBehaviorStateChange.OnBehaviorStateEvent
	// void OnBehaviorStateEvent(EBehaviorState InBehaviorState, EBehaviorStateEventType InEventType);                          // [0x181a250] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCalledShotCameraChange
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnCalledShotCameraChange : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ECalledShotCameraStep)                     CameraStepChange                                            OFFSET(get<T>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnCalledShotCameraChange.OnCameraStepEvent
	// void OnCameraStepEvent(ECalledShotCameraStep CameraStep);                                                                // [0x181a570] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCompanionCommandIssued
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnCompanionCommandIssued : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ECompanionCommand)                         Command                                                     OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(bool)                                      bOnEnter                                                    OFFSET(get<bool>, {0x59, 1, 0, 0})
};

/// Class /Script/Indiana.OnCompanionCommandIssuedEnemy
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnCompanionCommandIssuedEnemy : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ECompanionCommand)                         Command                                                     OFFSET(get<T>, {0x58, 1, 0, 0})
};

/// Class /Script/Indiana.OnHealthPercentage
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnHealthPercentage : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     HealthPercentage                                            OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x5C, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnHealthPercentage.OnHealthChanged
	// void OnHealthChanged(float HealthChange, class AActor* Instigator);                                                      // [0x181af90] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCompanionKilled
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnCompanionKilled : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnCompanionKilled.OnCompanionKilled
	// void OnCompanionKilled(class AActor* Companion);                                                                         // [0x181a810] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCinematicModeChange
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnCinematicModeChange : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bOnEnter                                                    OFFSET(get<bool>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnCinematicModeChange.OnCinematicModeChange
	// void OnCinematicModeChange(bool bCinematicMode);                                                                         // [0x181a6b0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMedKitUsed
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnMedKitUsed : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(int32_t)                                   ConsumablesRequired                                         OFFSET(get<int32_t>, {0x5C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnMedKitUsed.OnMedKitUsed
	// void OnMedKitUsed(int32_t ConsumablesUsed);                                                                              // [0x181b690] Final|Native|Protected 
};

/// Class /Script/Indiana.OnRestrictedAreaEntered
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnRestrictedAreaEntered : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnRestrictedAreaEntered.OnRestrictedAreaEntered
	// void OnRestrictedAreaEntered(class ARestrictedArea* RestrictedArea);                                                     // [0x181bcc0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnRestrictedAreaExited
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnRestrictedAreaExited : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnRestrictedAreaExited.OnRestrictedAreaExited
	// void OnRestrictedAreaExited(class ARestrictedArea* RestrictedArea);                                                      // [0x181bcc0] Final|Native|Protected 
};

/// Class /Script/Indiana.OrListener
/// Size: 0x0010 (0x000058 - 0x000068)
class UOrListener : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<class UEventListener*>)             ChildListener                                               OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Indiana.OnAcrophobiaEnabled
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnAcrophobiaEnabled : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnAcrophobiaEnabled.OnAcrophobiaChanged
	// void OnAcrophobiaChanged(bool bNowEnabled);                                                                              // [0x1819e20] Final|Native|Protected 
};

/// Class /Script/Indiana.OnTactialTimeDialationStart
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnTactialTimeDialationStart : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnTactialTimeDialationStart.OnTacticalTimeDilationStart
	// void OnTacticalTimeDilationStart();                                                                                      // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnTactialTimeDialationEnd
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnTactialTimeDialationEnd : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bOneAtEnd                                                   OFFSET(get<bool>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnTactialTimeDialationEnd.OnTacticalTimeDilationEnd
	// void OnTacticalTimeDilationEnd(float Duration);                                                                          // [0x181c740] Final|Native|Protected 
};

/// Class /Script/Indiana.OnResurrect
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnResurrect : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnResurrect.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x181b930] Final|Native|Protected 
};

/// Class /Script/Indiana.OnRest
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnRest : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnRest.OnRest
	// void OnRest();                                                                                                           // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnInteractableSelectionChanged
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnInteractableSelectionChanged : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(EInteractionType)                          Interaction                                                 OFFSET(get<T>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnInteractableSelectionChanged.OnInteractableSelectionChanged
	// void OnInteractableSelectionChanged(FInteractionDescription& Description);                                               // [0x181b180] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnStatUpdated
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnStatUpdated : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class URpgStat*)                           ListenStat                                                  OFFSET(get<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnStatUpdated.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x181c3c0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSkillUpdated
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnSkillUpdated : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ESkill)                                    ListenSkill                                                 OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(bool)                                      bCompare                                                    OFFSET(get<bool>, {0x59, 1, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x5A, 1, 0, 0})
	DMember(int32_t)                                   SkillValue                                                  OFFSET(get<int32_t>, {0x5C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnSkillUpdated.OnSkillUpdated
	// void OnSkillUpdated(ESkill Skill, int32_t NewValue);                                                                     // [0x181c260] Final|Native|Protected 
};

/// Class /Script/Indiana.OnOccupiedElevatorMove
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnOccupiedElevatorMove : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnOccupiedElevatorMove.OnOccupiedElevatorMove
	// void OnOccupiedElevatorMove(class AElevator* Elevator);                                                                  // [0x181ba00] Final|Native|Protected 
};

/// Class /Script/Indiana.OnAnimationSpellTrigger
/// Size: 0x0010 (0x000058 - 0x000068)
class UOnAnimationSpellTrigger : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(bool)                                      bTriggerOnNotifyBegin                                       OFFSET(get<bool>, {0x58, 1, 0, 0})
	SMember(FGameplayTag)                              AnimationTriggerTag                                         OFFSET(getStruct<T>, {0x5C, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnAnimationSpellTrigger.OnAnimationTriggered
	// void OnAnimationTriggered(FGameplayTag& TriggerType, bool Enabled);                                                      // [0x181a0e0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnJump
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnJump : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnJump.OnJump
	// void OnJump();                                                                                                           // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnLanded
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnLanded : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     MinFallDistance                                             OFFSET(get<float>, {0x58, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnLanded.OnLanded
	// void OnLanded(float FallDistance);                                                                                       // [0x181b580] Final|Native|Protected 
};

/// Class /Script/Indiana.OnTTDMeterPercentage
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnTTDMeterPercentage : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     TTDMeterPercentage                                          OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x5C, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnTTDMeterPercentage.OnTTDMeterChanged
	// void OnTTDMeterChanged(float Value);                                                                                     // [0x181c6c0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSprintStart
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnSprintStart : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnSprintStart.OnSprintStarted
	// void OnSprintStarted();                                                                                                  // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSprintEnd
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnSprintEnd : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnSprintEnd.OnSprintEnded
	// void OnSprintEnded();                                                                                                    // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerFirstAttacked
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UOnPlayerFirstAttacked : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/Indiana.OnPlayerFirstAttacked.OnFirstAttacked
	// void OnFirstAttacked(class AActor* Attacker);                                                                            // [0x181ad20] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerFirstAttack
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UOnPlayerFirstAttack : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/Indiana.OnPlayerFirstAttack.OnFirstAttack
	// void OnFirstAttack(class AActor* Target);                                                                                // [0x181ad20] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStateOfBeingChanged
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnStateOfBeingChanged : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(EStateOfBeing)                             StateOfBeing                                                OFFSET(get<T>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnStateOfBeingChanged.OnStateOfBeingChanged
	// void OnStateOfBeingChanged(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                // [0x181c450] Final|Native|Protected 
};

/// Class /Script/Indiana.OnObjectBumped
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnObjectBumped : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bDetectCharacters                                           OFFSET(get<bool>, {0x58, 1, 0, 0})
	DMember(bool)                                      bDetectDynamicActors                                        OFFSET(get<bool>, {0x59, 1, 0, 0})
	DMember(float)                                     DotCheck                                                    OFFSET(get<float>, {0x5C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnObjectBumped.OnBumped
	// void OnBumped(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);                // [0x181a3d0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/Indiana.OnCombatStateChange
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnCombatStateChange : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bCombat                                                     OFFSET(get<bool>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnCombatStateChange.OnCombatStateChange
	// void OnCombatStateChange(bool bInCombat, bool bRestoring);                                                               // [0x181a740] Final|Native|Protected 
};

/// Class /Script/Indiana.OnGetUp
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnGetUp : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bBegan                                                      OFFSET(get<bool>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnGetUp.OnGetUp
	// void OnGetUp(bool bInBegan);                                                                                             // [0x181a6b0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerConversationChange
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnPlayerConversationChange : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bEntered                                                    OFFSET(get<bool>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnPlayerConversationChange.OnPlayerConversationChange
	// void OnPlayerConversationChange(class UConversationInstance* Instance, bool bInEntered);                                 // [0x181bd50] Final|Native|Protected 
};

/// Class /Script/Indiana.OnAddictionTimerEntersMaxed
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnAddictionTimerEntersMaxed : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FGameplayTag)                              AddictionTag                                                OFFSET(getStruct<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnAddictionTimerEntersMaxed.OnAddictionTimerEntersMaxed
	// void OnAddictionTimerEntersMaxed(FGameplayTag TimerTag);                                                                 // [0x181a050] Final|Native|Protected 
};

/// Class /Script/Indiana.OnAddictionTimerLeavesMaxed
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnAddictionTimerLeavesMaxed : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FGameplayTag)                              AddictionTag                                                OFFSET(getStruct<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnAddictionTimerLeavesMaxed.OnAddictionTimerLeavesMaxed
	// void OnAddictionTimerLeavesMaxed(FGameplayTag TimerTag);                                                                 // [0x181a050] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSellItemNumBits
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnSellItemNumBits : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnSellItemNumBits.OnVectorTransaction
	// void OnVectorTransaction(int32_t BuyingBalance, int32_t SellingBalance, int32_t RepairingBalance, FItemStackSplit& ItemStackSplit); // [0x181c7c0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OnFlawAccepted
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnFlawAccepted : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   NumFlaws                                                    OFFSET(get<int32_t>, {0x58, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnFlawAccepted.OnFlawAccepted
	// void OnFlawAccepted(class UClass* Flaw, int32_t Count);                                                                  // [0x181adb0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnLevelChangedListener
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnLevelChangedListener : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(int32_t)                                   EventLevel                                                  OFFSET(get<int32_t>, {0x5C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnLevelChangedListener.OnLevelChanged
	// void OnLevelChanged(int32_t Level);                                                                                      // [0x181b600] Final|Native|Protected 
};

/// Class /Script/Indiana.OnItemTinkered
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnItemTinkered : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnItemTinkered.OnItemTinkered
	// void OnItemTinkered();                                                                                                   // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnEncumberedChange
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnEncumberedChange : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bEncumbered                                                 OFFSET(get<bool>, {0x58, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnEncumberedChange.OnEncumberedChange
	// void OnEncumberedChange(bool bInEncumbered);                                                                             // [0x181a6b0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStartCrouch
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnStartCrouch : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnStartCrouch.OnCrouch
	// void OnCrouch();                                                                                                         // [0x181a8a0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnStopCrouch
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnStopCrouch : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnStopCrouch.OnStopCrouch
	// void OnStopCrouch();                                                                                                     // [0x181a8a0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnInterrogateStartEvent
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnInterrogateStartEvent : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnInterrogateStartEvent.OnStartInterrogation
	// void OnStartInterrogation();                                                                                             // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnGroinHit
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnGroinHit : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnGroinHit.OnGroinHit
	// void OnGroinHit();                                                                                                       // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPatientNKill
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPatientNKill : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPatientNKill.OnPatientNKill
	// void OnPatientNKill();                                                                                                   // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMadScientistKill
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnMadScientistKill : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnMadScientistKill.OnMadScientistKill
	// void OnMadScientistKill();                                                                                               // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnBrandsMatch
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnBrandsMatch : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnBrandsMatch.OnBrandsMatch
	// void OnBrandsMatch();                                                                                                    // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSharpDressed
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnSharpDressed : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnSharpDressed.OnSharpDressed
	// void OnSharpDressed();                                                                                                   // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnSpecialPETBenefits
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnSpecialPETBenefits : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnSpecialPETBenefits.OnSpecialPETBenefits
	// void OnSpecialPETBenefits();                                                                                             // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnUdderGatlingNeedler
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnUdderGatlingNeedler : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnUdderGatlingNeedler.OnUdderGatlingNeedler
	// void OnUdderGatlingNeedler();                                                                                            // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnElementalMaelstrom
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnElementalMaelstrom : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnElementalMaelstrom.OnElementalMaelstrom
	// void OnElementalMaelstrom();                                                                                             // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnInterrogateEndEvent
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnInterrogateEndEvent : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      bInterrogationPassed                                        OFFSET(get<bool>, {0x58, 1, 0, 0})
	CMember(ECrimeType)                                Crime                                                       OFFSET(get<T>, {0x59, 1, 0, 0})
	DMember(bool)                                      bDisguised                                                  OFFSET(get<bool>, {0x5A, 1, 0, 0})
	DMember(int32_t)                                   DisguiseInterrogationsPassed                                OFFSET(get<int32_t>, {0x5C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnInterrogateEndEvent.OnEndInterrogation
	// void OnEndInterrogation(EInterrogationResult InterrogationResult, class AIndianaAiCharacter* Interrogator, ECrimeType InCrime, bool bInDisguised, int32_t InDisguiseInterrogationsPassed); // [0x181a9e0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMaxPositiveFactions
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnMaxPositiveFactions : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnMaxPositiveFactions.OnMaxPositiveFactions
	// void OnMaxPositiveFactions();                                                                                            // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnMaxNegativeFactions
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnMaxNegativeFactions : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnMaxNegativeFactions.OnMaxNegativeFactions
	// void OnMaxNegativeFactions();                                                                                            // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnKillingBlowListener
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnKillingBlowListener : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnKillingBlowListener.OnKillingBlow
	// void OnKillingBlow();                                                                                                    // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnQuestCompleteListener
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnQuestCompleteListener : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnQuestCompleteListener.OnQuestComplete
	// void OnQuestComplete(FGuid& QuestID);                                                                                    // [0x181be20] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/Indiana.OnModInstalledListener
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnModInstalledListener : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnModInstalledListener.OnModInstalled
	// void OnModInstalled();                                                                                                   // [0x181af70] Final|Native|Protected 
};

/// Class /Script/Indiana.OnWeaponEquipped
/// Size: 0x0010 (0x000058 - 0x000068)
class UOnWeaponEquipped : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<ESkill>)                            Skills                                                      OFFSET(get<T>, {0x58, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnWeaponEquipped.OnWeaponEquipped
	// void OnWeaponEquipped(class UWeapon* Weapon);                                                                            // [0x181c930] Final|Native|Protected 
};

/// Class /Script/Indiana.OnWeaponHolstered
/// Size: 0x0010 (0x000058 - 0x000068)
class UOnWeaponHolstered : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<ESkill>)                            Skills                                                      OFFSET(get<T>, {0x58, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnWeaponHolstered.OnWeaponHolstered
	// void OnWeaponHolstered(class UWeapon* Weapon);                                                                           // [0x181c930] Final|Native|Protected 
};

/// Class /Script/Indiana.OnWeaponUnholstered
/// Size: 0x0010 (0x000058 - 0x000068)
class UOnWeaponUnholstered : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<ESkill>)                            Skills                                                      OFFSET(get<T>, {0x58, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnWeaponUnholstered.OnWeaponUnholstered
	// void OnWeaponUnholstered(class UWeapon* Weapon);                                                                         // [0x181c930] Final|Native|Protected 
};

/// Class /Script/Indiana.OnWithinRoboRange
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UOnWithinRoboRange : public UFactionListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(int32_t)                                   NumDetectors                                                OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0xB4, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnWithinRoboRange.OnRoboWithinRangeStateChanged
	// void OnRoboWithinRangeStateChanged();                                                                                    // [0x181c060] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPlayerBeginPlay
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPlayerBeginPlay : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPlayerBeginPlay.OnPlayerBeginPlay
	// void OnPlayerBeginPlay();                                                                                                // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnFastTravelInitiated
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnFastTravelInitiated : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnFastTravelInitiated.OnFastTravelInitiated
	// void OnFastTravelInitiated(class UTravelDestinationData* TravelData, float TimePassed, bool bTravelFromMapLedger);       // [0x181ac00] Final|Native|Protected 
};

/// Class /Script/Indiana.OnRespec
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnRespec : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnRespec.OnRespec
	// void OnRespec();                                                                                                         // [0x181a320] Final|Native|Protected 
};

/// Class /Script/Indiana.OnCarryWeightChange
/// Size: 0x0008 (0x000058 - 0x000060)
class UOnCarryWeightChange : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x58, 1, 0, 0})
	DMember(float)                                     CarryWeightValue                                            OFFSET(get<float>, {0x5C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnCarryWeightChange.OnCarryWeightChange
	// void OnCarryWeightChange();                                                                                              // [0x181a5f0] Final|Native|Protected 
};

/// Class /Script/Indiana.OnGlobalVarChanged
/// Size: 0x0020 (0x000058 - 0x000078)
class UOnGlobalVarChanged : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FString)                                   GlobalVariable                                              OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x6C, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnGlobalVarChanged.OnGlobalVarChanged
	// void OnGlobalVarChanged(FString VariableName, int32_t NewValue);                                                         // [0x181ae80] Final|Native|Protected 
};

/// Class /Script/Indiana.OnPickupAudioLog
/// Size: 0x0000 (0x000058 - 0x000058)
class UOnPickupAudioLog : public UEventListener
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/Indiana.OnPickupAudioLog.OnPickupAudioLog
	// void OnPickupAudioLog(class UAudioLogDataAsset* AudioLogDataAsset);                                                      // [0x181bcc0] Final|Native|Protected 
};

/// Class /Script/Indiana.EvidenceActor
/// Size: 0x0298 (0x0002B8 - 0x000550)
class AEvidenceActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1360;

public:
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class USceneComponent*)                    ProximitySource                                             OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           ParticleComponent                                           OFFSET(get<T>, {0x2D8, 8, 0, 0})
	SMember(FLocString)                                DisplayName                                                 OFFSET(getStruct<T>, {0x2E0, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x2E8, 8, 0, 0})
	SMember(FGameplayTag)                              GameplayTag                                                 OFFSET(getStruct<T>, {0x2F0, 8, 0, 0})
	CMember(class UClass*)                             RequiredItem                                                OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      OverrideProximityAudio                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	DMember(float)                                     OverrideDistanceInThreshold                                 OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     OverrideDistanceOutThreshold                                OFFSET(get<float>, {0x30C, 4, 0, 0})
	CMember(TArray<class UScriptEvent*>)               ScriptEvents                                                OFFSET(get<T>, {0x310, 16, 0, 0})
	DMember(bool)                                      bCanBeScanned                                               OFFSET(get<bool>, {0x320, 1, 0, 0})
	SMember(FConversationDescription)                  ConversationDescription                                     OFFSET(getStruct<T>, {0x328, 504, 0, 0})
	CMember(class UEvidenceComponent*)                 EvidenceComponent                                           OFFSET(get<T>, {0x548, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.EvidenceActor.RefreshHasItemEquipped
	// void RefreshHasItemEquipped(class UWeapon* Weapon);                                                                      // [0x18200e0] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.RefreshHasItem
	// void RefreshHasItem();                                                                                                   // [0x18200c0] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.PlayerExitedProximity
	// void PlayerExitedProximity();                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.EvidenceActor.PlayerEnteredProximity
	// void PlayerEnteredProximity();                                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.EvidenceActor.OnVisibilityStateChanged
	// void OnVisibilityStateChanged();                                                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.EvidenceActor.OnConversationStarted
	// void OnConversationStarted(class UConversationInstance* Instance);                                                       // [0x181ff20] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.OnConversationEnded
	// void OnConversationEnded(class UConversationInstance* Instance);                                                         // [0x181fe90] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.OnCombatStateChanged
	// void OnCombatStateChanged(bool bCombatIn, bool bRestoring);                                                              // [0x181fdc0] Final|Native|Protected 
	// Function /Script/Indiana.EvidenceActor.OnActivated
	// void OnActivated(bool bActivated);                                                                                       // [0x181fd30] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.EvidenceActor.IsVisible
	// bool IsVisible();                                                                                                        // [0x181fd10] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.EvidenceActor.IsInDAConversation
	// bool IsInDAConversation();                                                                                               // [0x181fa10] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.EvidenceActor.HasBeenScanned
	// bool HasBeenScanned();                                                                                                   // [0x181f9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.EvidenceComponent
/// Size: 0x0000 (0x0000E0 - 0x0000E0)
class UEvidenceComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
};

/// Class /Script/Indiana.InteractionEvent
/// Size: 0x0000 (0x000030 - 0x000030)
class UInteractionEvent : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.ExaminableEvent
/// Size: 0x0038 (0x000030 - 0x000068)
class UExaminableEvent : public UInteractionEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FLocString)                                OverrideLabel                                               OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(class UCodexDataAsset*)                    Codex                                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FName)                                     RemoteEventOnExaminationEnd                                 OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(TArray<class UScriptEvent*>)               ScriptEvents                                                OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Indiana.ExaminableWidget
/// Size: 0x0048 (0x000308 - 0x000350)
class UExaminableWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	DMember(float)                                     GamepadZoomMultiplier                                       OFFSET(get<float>, {0x308, 4, 0, 0})
	CMember(class UTextBlockBase*)                     TitleTextBlock                                              OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     BodyTextblock                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UButtonBase*)                        BackButton                                                  OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UButtonBase*)                        InvisibleButton                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  BackInputLabel                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UScrollBox*)                         ScrollBox                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
};

/// Class /Script/Indiana.ExpandableAreaBase
/// Size: 0x02D0 (0x000120 - 0x0003F0)
class UExpandableAreaBase : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(class USlateWidgetStyleAsset*)             HeaderWidgetStyle                                           OFFSET(get<T>, {0x128, 8, 0, 0})
	SMember(FExpandableAreaStyle)                      Style                                                       OFFSET(getStruct<T>, {0x130, 288, 0, 0})
	SMember(FSlateBrush)                               BorderBrush                                                 OFFSET(getStruct<T>, {0x250, 136, 0, 0})
	SMember(FSlateColor)                               BorderColor                                                 OFFSET(getStruct<T>, {0x2D8, 40, 0, 0})
	SMember(FMargin)                                   HitTestMargin                                               OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	DMember(bool)                                      bCenterSweepHitTest                                         OFFSET(get<bool>, {0x310, 1, 0, 0})
	DMember(bool)                                      bIsExpanded                                                 OFFSET(get<bool>, {0x311, 1, 0, 0})
	DMember(float)                                     MaxHeight                                                   OFFSET(get<float>, {0x314, 4, 0, 0})
	SMember(FMargin)                                   HeaderPadding                                               OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	SMember(FMargin)                                   AreaPadding                                                 OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnExpansionChanged                                          OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHeaderHoveredMCD                                          OFFSET(getStruct<T>, {0x348, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHeaderUnhoveredMCD                                        OFFSET(getStruct<T>, {0x358, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHeaderFocusReceivedMCD                                    OFFSET(getStruct<T>, {0x368, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHeaderFocusLostMCD                                        OFFSET(getStruct<T>, {0x378, 16, 0, 0})
	CMember(class UWidget*)                            HeaderContent                                               OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UWidget*)                            BodyContent                                                 OFFSET(get<T>, {0x390, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ExpandableAreaBase.SetIsExpanded_Animated
	// void SetIsExpanded_Animated(bool IsExpanded);                                                                            // [0x18202a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ExpandableAreaBase.SetIsExpanded
	// void SetIsExpanded(bool IsExpanded);                                                                                     // [0x1820210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ExpandableAreaBase.GetIsExpanded
	// bool GetIsExpanded();                                                                                                    // [0x181f900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.EyeColor
/// Size: 0x0020 (0x000038 - 0x000058)
class UEyeColor : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FLinearColor)                              PrimaryEyeColor                                             OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FLinearColor)                              SecondaryEyeColor                                           OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Indiana.FaceFxRigsGameDataReference
/// Size: 0x0000 (0x000050 - 0x000050)
class UFaceFxRigsGameDataReference : public UGameDataReference
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.FactionData
/// Size: 0x01D0 (0x000030 - 0x000200)
class UFactionData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SmallImage                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         TTDTooltipImage                                             OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         LargeImage                                                  OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         ReputationImage                                             OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(EFactionVisibility)                        Visibility                                                  OFFSET(get<T>, {0xE0, 1, 0, 0})
	CMember(EFactionHardEnum)                          FactionEnum                                                 OFFSET(get<T>, {0xE1, 1, 0, 0})
	DMember(int32_t)                                   Scale                                                       OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	DMember(int32_t)                                   InitialPositive                                             OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	DMember(int32_t)                                   InitialNegative                                             OFFSET(get<int32_t>, {0xEC, 4, 0, 0})
	CMember(TSet<EReputationActionType>)               ReputationActionsToIgnore                                   OFFSET(get<T>, {0xF0, 80, 0, 0})
	CMember(TMap<class UReputationData*, TEnumAsByte<ETeamAttitude>>) PlayerRelationshipMap                        OFFSET(get<T>, {0x140, 80, 0, 0})
};

/// Class /Script/Indiana.FactionManager
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UFactionManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TMap<class UClass*, class UFactionData*>)  FactionMap                                                  OFFSET(get<T>, {0x58, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.FactionManager.SetRandomReputations_Debug
	// void SetRandomReputations_Debug();                                                                                       // [0xbb4890] Final|Exec|Native|Private 
	// Function /Script/Indiana.FactionManager.SetPositiveReputation_Debug
	// void SetPositiveReputation_Debug(FString FactionName, int32_t Amount);                                                   // [0x181f590] Final|Exec|Native|Private 
	// Function /Script/Indiana.FactionManager.SetNegativeReputation_Debug
	// void SetNegativeReputation_Debug(FString FactionName, int32_t Amount);                                                   // [0x181f590] Final|Exec|Native|Private 
	// Function /Script/Indiana.FactionManager.SetFactionEncountered_BP
	// void SetFactionEncountered_BP(class UClass* FactionData);                                                                // [0x1820190] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.IsReputationRankType_BP
	// bool IsReputationRankType_BP(class UClass* FactionData, EReputationRankType InRankType, ComparisonOperator Operator);    // [0x181fa60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.IsReputationRank_BP
	// bool IsReputationRank_BP(class UClass* FactionData, EReputationRankType InRankType, int32_t InRank, ComparisonOperator Operator); // [0x181fb60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.GetReputation_BP
	// class UReputationData* GetReputation_BP(class UClass* FactionData);                                                      // [0x181f930] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.ClearFactionRecentHostilityToPlayer_BP
	// void ClearFactionRecentHostilityToPlayer_BP(class UClass* FactionData);                                                  // [0x181f840] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.AddReputation_BP
	// void AddReputation_BP(class UClass* FactionData, EReputationType ReputationType, EReputationIncrementType IncrementType, int32_t CustomAmount, EReputationActionType ReputationAction); // [0x181f680] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.FactionManager.AddPositiveReputation_Debug
	// void AddPositiveReputation_Debug(FString FactionName, int32_t Amount);                                                   // [0x181f590] Final|Exec|Native|Private 
	// Function /Script/Indiana.FactionManager.AddNegativeReputation_Debug
	// void AddNegativeReputation_Debug(FString FactionName, int32_t Amount);                                                   // [0x181f590] Final|Exec|Native|Private 
};

/// Class /Script/Indiana.ToolTipContentWidget
/// Size: 0x0000 (0x000300 - 0x000300)
class UToolTipContentWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
};

/// Class /Script/Indiana.FastTravelTooltipWidget
/// Size: 0x0010 (0x000300 - 0x000310)
class UFastTravelTooltipWidget : public UToolTipContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UTextBlockBase*)                     FastTravelTextBlock                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     RestrictionTextBlock                                        OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.FilePathLoader
/// Size: 0x0000 (0x000030 - 0x000030)
class UFilePathLoader : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Indiana.IndianaDamageEvent
/// Size: 0x0050 (0x000000 - 0x000050)
class FIndianaDamageEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UImpactDataSet*)                     ImpactDataSet                                               OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/Indiana.ShotInfo
/// Size: 0x0108 (0x000000 - 0x000108)
class FShotInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FDamageDescription)                        DamageDescription                                           OFFSET(getStruct<T>, {0x40, 120, 0, 0})
	SMember(FIndianaDamageEvent)                       DamageEvent                                                 OFFSET(getStruct<T>, {0xB8, 80, 0, 0})
};

/// Class /Script/Indiana.FireMode
/// Size: 0x0440 (0x0005B8 - 0x0009F8)
class UFireMode : public URangedMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2552;

public:
	DMember(bool)                                      bOverrideSemiAutoRTPC                                       OFFSET(get<bool>, {0x5B8, 1, 0, 0})
	DMember(float)                                     SemiAutoRTPCOverrideVal                                     OFFSET(get<float>, {0x5BC, 4, 0, 0})
	CMember(EFireMode)                                 FireMode                                                    OFFSET(get<T>, {0x5C0, 1, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ProjectileClass                                             OFFSET(get<T>, {0x5C8, 40, 0, 0})
	CMember(class UClass*)                             OverrideProjectileClass                                     OFFSET(get<T>, {0x5F0, 8, 0, 0})
	DMember(bool)                                      bUseMuzzleRotationForProjectileVisuals                      OFFSET(get<bool>, {0x5F8, 1, 0, 0})
	CMember(TWeakObjectPtr<class UInstantHitData*>)    InstantHitData                                              OFFSET(get<T>, {0x600, 8, 0, 0})
	CMember(class UInstantHitData*)                    OverrideInstantHitData                                      OFFSET(get<T>, {0x628, 8, 0, 0})
	DMember(float)                                     ShotTime                                                    OFFSET(get<float>, {0x630, 4, 0, 0})
	DMember(char)                                      AmmoPerShot                                                 OFFSET(get<char>, {0x634, 1, 0, 0})
	DMember(char)                                      ShotsPerShot                                                OFFSET(get<char>, {0x635, 1, 0, 0})
	DMember(float)                                     FiringAngle                                                 OFFSET(get<float>, {0x638, 4, 0, 0})
	DMember(char)                                      ShotsPerBurst                                               OFFSET(get<char>, {0x63C, 1, 0, 0})
	DMember(float)                                     BurstDuration                                               OFFSET(get<float>, {0x640, 4, 0, 0})
	DMember(char)                                      AmmoMaxCharge                                               OFFSET(get<char>, {0x644, 1, 0, 0})
	DMember(float)                                     ChargeDelay                                                 OFFSET(get<float>, {0x648, 4, 0, 0})
	DMember(float)                                     ChargeDuration                                              OFFSET(get<float>, {0x64C, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        ChargeDamageCurve                                           OFFSET(getStruct<T>, {0x650, 136, 0, 0})
	DMember(float)                                     SpinUpDuration                                              OFFSET(get<float>, {0x6D8, 4, 0, 0})
	DMember(bool)                                      SpinWhileAiming                                             OFFSET(get<bool>, {0x6DC, 1, 0, 0})
	SMember(FRuntimeFloatCurve)                        SpinScalarCurve                                             OFFSET(getStruct<T>, {0x6E0, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        RecoilScalarCurve                                           OFFSET(getStruct<T>, {0x768, 136, 0, 0})
	SMember(FName)                                     SemiAutoRTPCName                                            OFFSET(getStruct<T>, {0x7F0, 8, 0, 0})
	SMember(FName)                                     FullAutoRTPCName                                            OFFSET(getStruct<T>, {0x7F8, 8, 0, 0})
	DMember(float)                                     RapidFireShotTimeThreshold                                  OFFSET(get<float>, {0x800, 4, 0, 0})
	DMember(float)                                     ProjectileChargeDelay                                       OFFSET(get<float>, {0x804, 4, 0, 0})
	DMember(float)                                     ProjectileChargeDuration                                    OFFSET(get<float>, {0x808, 4, 0, 0})
	DMember(float)                                     ProjectileChargeShotDelay                                   OFFSET(get<float>, {0x80C, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        ProjectileCountScalarCurve                                  OFFSET(getStruct<T>, {0x810, 136, 0, 0})
	SMember(FName)                                     ProjectileChargeRTPCName                                    OFFSET(getStruct<T>, {0x898, 8, 0, 0})
	CMember(TArray<class UAkAudioEvent*>)              ProjectileLoadAudioEvents                                   OFFSET(get<T>, {0x8A0, 16, 0, 0})
	SMember(FShotInfo)                                 CurrentShot                                                 OFFSET(getStruct<T>, {0x8D0, 264, 0, 0})


	/// Functions
	// Function /Script/Indiana.FireMode.UsesCharge
	// bool UsesCharge();                                                                                                       // [0x1820330] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.ResetCharge
	// void ResetCharge();                                                                                                      // [0x1820170] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.FireMode.OnTimeDilationUpdated
	// void OnTimeDilationUpdated(float Value);                                                                                 // [0x1820040] Final|Native|Protected 
	// Function /Script/Indiana.FireMode.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x181ffb0] Final|Native|Protected 
	// Function /Script/Indiana.FireMode.IsSpinUp
	// bool IsSpinUp();                                                                                                         // [0x181fce0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.IsSemiAutomatic
	// bool IsSemiAutomatic();                                                                                                  // [0x181fcb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.IsProjectileCharge
	// bool IsProjectileCharge();                                                                                               // [0x181fa30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.IsBurst
	// bool IsBurst();                                                                                                          // [0x181f9e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.GetChargeProgress
	// float GetChargeProgress();                                                                                               // [0x181f8c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FireMode.CanCharge
	// bool CanCharge();                                                                                                        // [0x181f810] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.DamageTypeRequirementFire
/// Size: 0x0020 (0x000000 - 0x000020)
class FDamageTypeRequirementFire : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   MinSkill                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UInstantHitData*)                    InstantHitData                                              OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   RangedAttackMod                                             OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Class /Script/Indiana.FireMultiDamageTypeMode
/// Size: 0x0040 (0x0009F8 - 0x000A38)
class UFireMultiDamageTypeMode : public UFireMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2616;

public:
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x9F8, 1, 0, 0})
	CMember(TArray<FDamageTypeRequirementFire>)        DamageTypes                                                 OFFSET(get<T>, {0xA00, 16, 0, 0})
};

/// Struct /Script/Indiana.SpawnPropertyModifiers
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FSpawnPropertyModifiers : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(class UClass*)                             TeamOverride                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UConversationData*)                  ConversationDataOverride                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<class ULootTableData*>)             AdditionalLoot                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bOverrideOutOfCombatBehavior                                OFFSET(get<bool>, {0x20, 1, 0, 0})
	SMember(FBehaviorPackage)                          OutOfCombatBehavior                                         OFFSET(getStruct<T>, {0x28, 152, 0, 0})
	DMember(bool)                                      bIgnoreOverrideInterestPackage                              OFFSET(get<bool>, {0xC0, 1, 0, 0})
	CMember(class AActor*)                             Spline                                                      OFFSET(get<T>, {0xC8, 8, 0, 0})
};

/// Class /Script/Indiana.SpawnNodeBase
/// Size: 0x0280 (0x0002B8 - 0x000538)
class ASpawnNodeBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1336;

public:
	SMember(FMulticastInlineDelegate)                  NodeBeginSpawn                                              OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  NodeActorSpawned                                            OFFSET(getStruct<T>, {0x2D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  NodeActorKilled                                             OFFSET(getStruct<T>, {0x2E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  NodeActorDamaged                                            OFFSET(getStruct<T>, {0x2F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  NodeActorAlertState                                         OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  NodeActorCombatState                                        OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  NodeActorAwareOfPlayer                                      OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  NodeActorDespawned                                          OFFSET(getStruct<T>, {0x330, 16, 0, 0})
	SMember(FBehaviorPackage)                          AIBehavior                                                  OFFSET(getStruct<T>, {0x358, 152, 0, 0})
	DMember(bool)                                      bPortedBehavior                                             OFFSET(get<bool>, {0x3F0, 1, 0, 0})
	SMember(FSpawnPropertyModifiers)                   SpawnModifiers                                              OFFSET(getStruct<T>, {0x3F8, 208, 0, 0})
	CMember(TWeakObjectPtr<class AEncounter*>)         OwningEncounter                                             OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             SpawnedInstance                                             OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               ObsidianID                                                  OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(class UClass*)                             ProvidedTeamData                                            OFFSET(get<T>, {0x500, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SpawnNodeBase.OnActorTookDamage
	// void OnActorTookDamage(FCauseDamageInfo& CauseDamageInfo);                                                               // [0x18bfda0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.SpawnNodeBase.OnActorNewStateOfBeing
	// void OnActorNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                               // [0x18bfcd0] Final|Native|Protected 
	// Function /Script/Indiana.SpawnNodeBase.OnActorDespawned
	// void OnActorDespawned();                                                                                                 // [0x18bfcb0] Final|Native|Protected 
	// Function /Script/Indiana.SpawnNodeBase.OnActorCombatStateChanged
	// void OnActorCombatStateChanged(bool bInCombat, bool bRestoring);                                                         // [0x18bfbe0] Final|Native|Protected 
	// Function /Script/Indiana.SpawnNodeBase.OnActorAwareOfPlayer
	// void OnActorAwareOfPlayer(bool bRestoring);                                                                              // [0x18bfb50] Final|Native|Protected 
	// Function /Script/Indiana.SpawnNodeBase.OnActorAlertStateChanged
	// void OnActorAlertStateChanged(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x18bf9f0] Final|Native|Protected 
};

/// Class /Script/Indiana.FixedSpawnNode
/// Size: 0x0028 (0x000538 - 0x000560)
class AFixedSpawnNode : public ASpawnNodeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1376;

public:
	CMember(TSoftObjectPtr<class UClass*>)             NodeActor                                                   OFFSET(get<T>, {0x538, 40, 0, 0})
};

/// Class /Script/Indiana.FlavorTextWidget
/// Size: 0x0010 (0x000300 - 0x000310)
class UFlavorTextWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UTextBlockBase*)                     FlavorText                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	SMember(FLocString)                                TextReference                                               OFFSET(getStruct<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.Flaw
/// Size: 0x0058 (0x000030 - 0x000088)
class UFlaw : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(class UBrandDataAsset*)                    BrandType                                                   OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(EFlawType)                                 FlawType                                                    OFFSET(get<T>, {0x48, 1, 0, 0})
	DMember(int32_t)                                   FlawTriggerCount                                            OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(float)                                     OfferChance                                                 OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UEventListener*)                     EventListener                                               OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<EDLCFlags>)                         DLCFlags                                                    OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Indiana.FlawSummaryEntryWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UFlawSummaryEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     FlawNameText                                                OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.FlawTree
/// Size: 0x0040 (0x000038 - 0x000078)
class UFlawTree : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<class UClass*>)                     Flaws                                                       OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TWeakObjectPtr<class UFlawTree*>)          DLCFlawTree                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Indiana.FleeBehaviorStateInfo
/// Size: 0x0008 (0x000178 - 0x000180)
class UFleeBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(TWeakObjectPtr<class UDisableStatusEffect*>) DisableStatusEffect                                       OFFSET(get<T>, {0x178, 8, 0, 0})
};

/// Class /Script/Indiana.FleeRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UFleeRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.FleeNode
/// Size: 0x0000 (0x000358 - 0x000358)
class AFleeNode : public AEnviromentNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
};

/// Class /Script/Indiana.FlipbookWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UFlipbookWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UMaterialInstanceDynamic*)           DynamicMaterial                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UUIFlipBookData*)                    FlipbookData                                                OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UMaterialInterface*)                 MaterialInterface                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             DisplayImage                                                OFFSET(get<T>, {0x328, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.FlipbookWidget.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x1826960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FlipbookWidget.EndPlay
	// void EndPlay();                                                                                                          // [0x18268a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.FlipbookWidget.BeginPlay
	// void BeginPlay(bool bInShouldLoop, int32_t PlayFromFrame);                                                               // [0x18267d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.FloorIndicatorWidget
/// Size: 0x00C0 (0x000300 - 0x0003C0)
class UFloorIndicatorWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	CMember(class UFloorLevelWidget*)                  Floor1                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UFloorLevelWidget*)                  Floor2                                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UFloorLevelWidget*)                  Floor3                                                      OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UFloorLevelWidget*)                  Floor4                                                      OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UFloorLevelWidget*)                  Floor5                                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UFloorLevelWidget*)                  Floor6                                                      OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UFloorLevelWidget*)                  Floor7                                                      OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UButtonBase*)                        NextFloorButton                                             OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UButtonBase*)                        PrevFloorButton                                             OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UVerticalBox*)                       ContentContainer                                            OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     FloorNameTextBlock                                          OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     FloorLevelTextBlock                                         OFFSET(get<T>, {0x358, 8, 0, 0})
	SMember(FLinearColor)                              CurrentFloorColor                                           OFFSET(getStruct<T>, {0x360, 16, 0, 0})
	SMember(FLinearColor)                              OtherFloorColor                                             OFFSET(getStruct<T>, {0x370, 16, 0, 0})
};

/// Class /Script/Indiana.FloorLevelWidget
/// Size: 0x0010 (0x000278 - 0x000288)
class UFloorLevelWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(class UImage*)                             FloorImage                                                  OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UImage*)                             CurrentFloorImage                                           OFFSET(get<T>, {0x280, 8, 0, 0})
};

/// Class /Script/Indiana.FollowBehaviorStateInfo
/// Size: 0x0030 (0x000120 - 0x000150)
class UFollowBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Class /Script/Indiana.FollowRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UFollowRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.FootstepAudio
/// Size: 0x0118 (0x000030 - 0x000148)
class UFootstepAudio : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(class UAkAudioEvent*)                      FootstepEvent                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TMap<FName, float>)                        CustomRTPCValues                                            OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TMap<EFootID, FName>)                      CustomFootAttachLocations                                   OFFSET(get<T>, {0x88, 80, 0, 0})
	CMember(TMap<ECharacterMovementAudioEvents, class UAkPlaySoundEventEffect*>) MovementEvents                    OFFSET(get<T>, {0xD8, 80, 0, 0})
	SMember(FEventEffectState)                         EventEffectState                                            OFFSET(getStruct<T>, {0x128, 32, 0, 0})
};

/// Class /Script/Indiana.FootstepData
/// Size: 0x0018 (0x000038 - 0x000050)
class UFootstepData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UFootstepStimulusData*)              StimulusData                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UFootstepVisualData*)                VisualData                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UClass*)                             AudioData                                                   OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Indiana.FootstepEnvironmentInteraction
/// Size: 0x0000 (0x000038 - 0x000038)
class UFootstepEnvironmentInteraction : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Indiana.FootstepStimulus
/// Size: 0x0008 (0x000000 - 0x000008)
class FFootstepStimulus : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     AIRadius                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     AIAwarenessGenerated                                        OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Indiana.FootstepSurfaceMatch
/// Size: 0x0018 (0x000000 - 0x000018)
class FFootstepSurfaceMatch : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<TEnumAsByte<EPhysicalSurface>>)     SurfaceTypes                                                OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Indiana.FootstepMatch
/// Size: 0x0020 (0x000018 - 0x000038)
class FFootstepMatch : public FFootstepSurfaceMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<EFootstepType>)                     StepTypes                                                   OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<EFootID>)                           Feet                                                        OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/Indiana.FootstepStimulusOverride
/// Size: 0x0008 (0x000038 - 0x000040)
class FFootstepStimulusOverride : public FFootstepMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FFootstepStimulus)                         Stimulus                                                    OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/Indiana.SpecialEventStimulusOverride
/// Size: 0x0008 (0x000018 - 0x000020)
class FSpecialEventStimulusOverride : public FFootstepSurfaceMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FFootstepStimulus)                         Stimulus                                                    OFFSET(getStruct<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/Indiana.SpecialMovementStimulusProperties
/// Size: 0x0018 (0x000000 - 0x000018)
class FSpecialMovementStimulusProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FFootstepStimulus)                         DefaultEventStimulus                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FSpecialEventStimulusOverride>)     EventStimulusOverrides                                      OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Class /Script/Indiana.FootstepStimulusData
/// Size: 0x0068 (0x000038 - 0x0000A0)
class UFootstepStimulusData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FFootstepStimulus)                         DefaultFootstepStimulus                                     OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(TArray<FFootstepStimulusOverride>)         FootstepStimulusOverrides                                   OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TMap<ESpecialMovementEvent, FSpecialMovementStimulusProperties>) SpecialEventStimulus                  OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Struct /Script/Indiana.FootstepVisuals
/// Size: 0x0030 (0x000000 - 0x000030)
class FFootstepVisuals : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UParticleSystem*)                    PSTemplate                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EParticleSpawnType)                        ParticleSystemSpawnType                                     OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FName)                                     PSSocket                                                    OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x20, 12, 0, 0})
};

/// Struct /Script/Indiana.FootstepVisualsOverride
/// Size: 0x0030 (0x000038 - 0x000068)
class FFootstepVisualsOverride : public FFootstepMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FFootstepVisuals)                          Visuals                                                     OFFSET(getStruct<T>, {0x38, 48, 0, 0})
};

/// Struct /Script/Indiana.SpecialEventVisualsOverride
/// Size: 0x0030 (0x000018 - 0x000048)
class FSpecialEventVisualsOverride : public FFootstepSurfaceMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FFootstepVisuals)                          Visuals                                                     OFFSET(getStruct<T>, {0x18, 48, 0, 0})
};

/// Struct /Script/Indiana.SpecialMovementVisualProperties
/// Size: 0x0040 (0x000000 - 0x000040)
class FSpecialMovementVisualProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FFootstepVisuals)                          DefaultEventVisual                                          OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	CMember(TArray<FSpecialEventVisualsOverride>)      EventVisualsOverrides                                       OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.FootstepVisualData
/// Size: 0x0090 (0x000038 - 0x0000C8)
class UFootstepVisualData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FFootstepVisuals)                          DefaultFootstepVisuals                                      OFFSET(getStruct<T>, {0x38, 48, 0, 0})
	CMember(TArray<FFootstepVisualsOverride>)          FootstepVisualOverrides                                     OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TMap<ESpecialMovementEvent, FSpecialMovementVisualProperties>) SpecialEventVisuals                     OFFSET(get<T>, {0x78, 80, 0, 0})
};

/// Class /Script/Indiana.ForcedAnimationComponent
/// Size: 0x0030 (0x0000E0 - 0x000110)
class UForcedAnimationComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(TArray<FString>)                           InspectOnFirstEquipWeaponNames                              OFFSET(get<T>, {0xE0, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.ForcedAnimationComponent.PlayEquippedWeaponInspectionAnimation
	// void PlayEquippedWeaponInspectionAnimation();                                                                            // [0x1826a90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.ForcedAnimationComponent.OnWeaponEquipped
	// void OnWeaponEquipped(class UWeapon* Weapon);                                                                            // [0x1826a00] Final|Native|Protected 
};

/// Class /Script/Indiana.ForceFeedbackEventEffect
/// Size: 0x0010 (0x000030 - 0x000040)
class UForceFeedbackEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UForceFeedbackEffect*)               ForceFeedbackEffect                                         OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bLooping                                                    OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bCancelable                                                 OFFSET(get<bool>, {0x39, 1, 0, 0})
};

/// Class /Script/Indiana.FPVAnimInstance
/// Size: 0x00A8 (0x000558 - 0x000600)
class UFPVAnimInstance : public UCharacterAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1536;

public:
	DMember(float)                                     NormalizedLookBlendTime                                     OFFSET(get<float>, {0x558, 4, 0, 0})
	DMember(float)                                     CurrentAimBlendTime                                         OFFSET(get<float>, {0x55C, 4, 0, 0})
	DMember(float)                                     MinPlayRateWalk                                             OFFSET(get<float>, {0x560, 4, 0, 0})
	DMember(float)                                     MaxPlayRateWalk                                             OFFSET(get<float>, {0x564, 4, 0, 0})
	DMember(float)                                     SprintAnimationSpeed                                        OFFSET(get<float>, {0x568, 4, 0, 0})
	DMember(float)                                     MinPlayRateSprint                                           OFFSET(get<float>, {0x56C, 4, 0, 0})
	DMember(float)                                     MaxPlayRateSprint                                           OFFSET(get<float>, {0x570, 4, 0, 0})
	SMember(FVector)                                   CurrentAimOffsetZ                                           OFFSET(getStruct<T>, {0x574, 12, 0, 0})
	SMember(FVector)                                   CurrentAimOffsetX                                           OFFSET(getStruct<T>, {0x580, 12, 0, 0})
	SMember(FVector)                                   CurrentAimOffset                                            OFFSET(getStruct<T>, {0x58C, 12, 0, 0})
	DMember(bool)                                      bIsFineAiming                                               OFFSET(get<bool>, {0x598, 1, 0, 0})
	DMember(bool)                                      bIsDodging                                                  OFFSET(get<bool>, {0x59A, 1, 0, 0})
	DMember(float)                                     PlayerCameraPitch                                           OFFSET(get<float>, {0x59C, 4, 0, 0})
	DMember(float)                                     PlayerCameraRoll                                            OFFSET(get<float>, {0x5A0, 4, 0, 0})
	SMember(FRotator)                                  WeaponSway                                                  OFFSET(getStruct<T>, {0x5A4, 12, 0, 0})
	DMember(float)                                     NormalizedTurnSpeed                                         OFFSET(get<float>, {0x5B0, 4, 0, 0})
	DMember(float)                                     NormalizedLookUpSpeed                                       OFFSET(get<float>, {0x5B4, 4, 0, 0})
	DMember(float)                                     WalkPlayRateScale                                           OFFSET(get<float>, {0x5B8, 4, 0, 0})
	DMember(float)                                     SprintPlayRateScale                                         OFFSET(get<float>, {0x5BC, 4, 0, 0})
	CMember(class UAnimMontage*)                       CrouchMontage                                               OFFSET(get<T>, {0x5C0, 8, 0, 0})
	CMember(class UAnimMontage*)                       CurrentDodgeMontage                                         OFFSET(get<T>, {0x5C8, 8, 0, 0})
	DMember(bool)                                      bUseLowGravAnimation                                        OFFSET(get<bool>, {0x5D0, 1, 0, 0})
	DMember(float)                                     LowGravLocomotionAnimPlayRateScale                          OFFSET(get<float>, {0x5D4, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.FPVAnimInstance.OnHeadbobbingChanged
	// void OnHeadbobbingChanged(bool bShouldHeadbob);                                                                          // [0xb9e060] Final|Native|Protected 
	// Function /Script/Indiana.FPVAnimInstance.IsAimTransitioning
	// bool IsAimTransitioning();                                                                                               // [0x1826900] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.FPVAnimInstance.GetHeadbobWeight
	// float GetHeadbobWeight();                                                                                                // [0x18268c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.FPVCameraComponent
/// Size: 0x0020 (0x000860 - 0x000880)
class UFPVCameraComponent : public UCameraComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2176;

public:
	DMember(float)                                     CrouchedCameraHeightOffset                                  OFFSET(get<float>, {0x860, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.FPVCameraComponent.OnFieldOfViewSettingChanged
	// void OnFieldOfViewSettingChanged(float NewFOV);                                                                          // [0x1826980] Final|Native|Protected 
};

/// Class /Script/Indiana.FPVSkeletalMeshComponent
/// Size: 0x0008 (0x000FC8 - 0x000FD0)
class UFPVSkeletalMeshComponent : public USkeletalMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4048;

public:
	DMember(bool)                                      bFixedFOVForFPVEnabled                                      OFFSET(get<bool>, {0xFC8, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.FPVSkeletalMeshComponent.SetFixedFOVforFPVEnabled
	// void SetFixedFOVforFPVEnabled(bool InbFixedFOVEnabled);                                                                  // [0x1826ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.FPVSkeletalMeshComponent.IsFixedFOVEnabled
	// bool IsFixedFOVEnabled();                                                                                                // [0x1826930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.FreezeDisableStatusEffect
/// Size: 0x0000 (0x000198 - 0x000198)
class UFreezeDisableStatusEffect : public UDisableStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
};

/// Class /Script/Indiana.FurnitureAction
/// Size: 0x0020 (0x000038 - 0x000058)
class UFurnitureAction : public UAIAction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class AFurnitureActor*)                    FurnitureActor                                              OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.FurnitureSkeletonPreviewMeshMap
/// Size: 0x0090 (0x000038 - 0x0000C8)
class UFurnitureSkeletonPreviewMeshMap : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TMap<TWeakObjectPtr<USkeleton*>, TWeakObjectPtr<USkeletalMesh*>>) SkeletonMeshMap                      OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      HumanSkeletonMesh                                           OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UMaterialInterface*)                 PreviewMaterial                                             OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UMaterialInterface*)                 InvalidPreviewMaterial                                      OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UMaterialInterface*)                 InvalidConversationPreviewMaterial                          OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Class /Script/Indiana.FurnitureBehaviorStateInfo
/// Size: 0x0088 (0x000120 - 0x0001A8)
class UFurnitureBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
};

/// Class /Script/Indiana.FurnitureRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UFurnitureRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Indiana.urniturePositionalAnimationData
/// Size: 0x0028 (0x000000 - 0x000028)
class FurniturePositionalAnimationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UAnimMontage*)                       Start                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAnimMontage*)                       Exit                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UAnimMontage*)                       CombatExit                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UAnimMontage*)                       Loop                                                        OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      bIsClimbing                                                 OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/Indiana.FurnitureAnimationData
/// Size: 0x0168 (0x000038 - 0x0001A0)
class UFurnitureAnimationData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TArray<FurniturePositionalAnimationData>)  PositionalData                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	SMember(FEmotionEntry)                             DefaultAnimationData                                        OFFSET(getStruct<T>, {0x48, 168, 0, 0})
	CMember(class UEmotionData*)                       ConversationEmotionData                                     OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(TMap<TSoftObjectPtr<UClass*>, class UFurnitureAnimationData*>) WeaponBasedFurnitureData                OFFSET(get<T>, {0xF8, 80, 0, 0})
	CMember(class UFurnitureAnimationData*)            FemaleFurnitureData                                         OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               HeadAimBlendSpace                                           OFFSET(get<T>, {0x150, 8, 0, 0})
	DMember(bool)                                      bExitInCoversation                                          OFFSET(get<bool>, {0x158, 1, 0, 0})
	DMember(bool)                                      bObeyConversationComfortAngle                               OFFSET(get<bool>, {0x159, 1, 0, 0})
	DMember(bool)                                      bEnableNavWalking                                           OFFSET(get<bool>, {0x15A, 1, 0, 0})
	DMember(bool)                                      bPreventIK                                                  OFFSET(get<bool>, {0x15B, 1, 0, 0})
	DMember(bool)                                      bIsSleepingFurniture                                        OFFSET(get<bool>, {0x15C, 1, 0, 0})
	DMember(float)                                     EntryPointAreaSweepSize                                     OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     EntryPointAreaSweepHeight                                   OFFSET(get<float>, {0x164, 4, 0, 0})
	SMember(FTransform)                                RootOffset                                                  OFFSET(getStruct<T>, {0x170, 48, 0, 0})
};

/// Struct /Script/Indiana.TransformOverride
/// Size: 0x0040 (0x000000 - 0x000040)
class FTransformOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   Slot                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x10, 48, 0, 0})
};

/// Class /Script/Indiana.FurnitureComponent
/// Size: 0x0208 (0x000268 - 0x000470)
class UFurnitureComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	SMember(FGameplayTag)                              InterestType                                                OFFSET(getStruct<T>, {0x268, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UFurnitureAnimationData*>>) AnimationData                                        OFFSET(get<T>, {0x270, 16, 0, 0})
	CMember(class AActor*)                             LookAtOverride                                              OFFSET(get<T>, {0x280, 8, 0, 0})
	DMember(bool)                                      PreventPrematureEnd                                         OFFSET(get<bool>, {0x288, 1, 0, 0})
	CMember(TArray<int32_t>)                           IgnoreEntryPointSlots                                       OFFSET(get<T>, {0x290, 16, 0, 0})
	CMember(TArray<int32_t>)                           AutoAssignedIgnoreEntryPointSlots                           OFFSET(get<T>, {0x2A0, 16, 0, 0})
	CMember(TSet<TWeakObjectPtr<AActor*>>)             ActorsToIgnore                                              OFFSET(get<T>, {0x2B0, 80, 0, 0})
	CMember(TSet<TWeakObjectPtr<UPrimitiveComponent*>>) ComponentsToIgnore                                         OFFSET(get<T>, {0x300, 80, 0, 0})
	DMember(float)                                     MinDuration                                                 OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     MaxDuration                                                 OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     MinCoolDown                                                 OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     MaxCoolDown                                                 OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(bool)                                      bPreventAllInterrupts                                       OFFSET(get<bool>, {0x360, 1, 0, 0})
	CMember(TArray<FTransformOverride>)                TransformOverrides                                          OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(TMap<TWeakObjectPtr<USkeleton*>, TWeakObjectPtr<UFurnitureAnimationData*>>) PrecomputedSkeletonMap     OFFSET(get<T>, {0x378, 80, 0, 0})
	CMember(TMap<TWeakObjectPtr<UFurnitureAnimationData*>, bool>) ValidFurnitureCache                              OFFSET(get<T>, {0x3E0, 80, 0, 0})
	CMember(class UAISettings_Furniture*)              AISettings                                                  OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UAISettings_Furniture*)              AISettingsInfiniteDuration                                  OFFSET(get<T>, {0x448, 8, 0, 0})
	DMember(bool)                                      bAllowOffNavMesh                                            OFFSET(get<bool>, {0x450, 1, 0, 0})
	CMember(class AActor*)                             TurretTrack                                                 OFFSET(get<T>, {0x458, 8, 0, 0})
	DMember(int32_t)                                   TurretTrackValidationDivisions                              OFFSET(get<int32_t>, {0x460, 4, 0, 0})
	DMember(float)                                     AllowedAngleDeviationFromTrack                              OFFSET(get<float>, {0x464, 4, 0, 0})
	DMember(float)                                     AllowedDistanceDeviationFromTrack                           OFFSET(get<float>, {0x468, 4, 0, 0})
};

/// Class /Script/Indiana.Gadget
/// Size: 0x0038 (0x000118 - 0x000150)
class UGadget : public UItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	CMember(TWeakObjectPtr<class UObject*>)            ItemMesh                                                    OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x140, 8, 0, 0})
	SMember(FGameplayTag)                              GadgetTag                                                   OFFSET(getStruct<T>, {0x148, 8, 0, 0})
};

/// Class /Script/Indiana.GameCalendar
/// Size: 0x00B0 (0x000030 - 0x0000E0)
class UGameCalendar : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FMulticastInlineDelegate)                  OnPhaseOfDayChanged                                         OFFSET(getStruct<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.GameCalendar.RequestUnpauseTime
	// void RequestUnpauseTime(FName& RequestContext);                                                                          // [0x182dd20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.RequestPauseTime
	// void RequestPauseTime(FName& RequestContext);                                                                            // [0x182dc90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.LockCalendar
	// void LockCalendar(bool Block);                                                                                           // [0x182d7c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.K2_SetupDelayedCallback
	// void K2_SetupDelayedCallback(class UObject* WorldContextObject, FDelegateProperty& EventToDelay, float SecondsToDelay);  // [0x182d690] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_RegisterNamedTimestamp
	// void K2_RegisterNamedTimestamp(FString TimestampName);                                                                   // [0x182d5e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_IsTimeSlice
	// bool K2_IsTimeSlice(int32_t StartHour, int32_t EndHour);                                                                 // [0x182d4e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.GameCalendar.K2_IsPhaseOfDay
	// bool K2_IsPhaseOfDay(EPhaseOfDay Phase);                                                                                 // [0x182d440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.GameCalendar.K2_HaveMinutesElapsedSinceNamedTimestamp
	// bool K2_HaveMinutesElapsedSinceNamedTimestamp(FString TimestampName, int32_t Minutes);                                   // [0x182d330] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_HaveHoursElapsedSinceNamedTimestamp
	// bool K2_HaveHoursElapsedSinceNamedTimestamp(FString TimestampName, int32_t Hours);                                       // [0x182d220] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_HaveDaysElapsedSinceNamedTimestamp
	// bool K2_HaveDaysElapsedSinceNamedTimestamp(FString TimestampName, int32_t Days);                                         // [0x182d110] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_GetRawHour
	// float K2_GetRawHour();                                                                                                   // [0x182d0e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.GameCalendar.K2_GetNormalizedTime
	// float K2_GetNormalizedTime();                                                                                            // [0x182d0b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.GameCalendar.K2_ClearNamedTimestamp
	// void K2_ClearNamedTimestamp(FString TimestampName);                                                                      // [0x182d000] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceToHour
	// void K2_AdvanceToHour(int32_t TargetHour);                                                                               // [0x182cf50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceTime
	// void K2_AdvanceTime(float Days, float Hours, float Minutes, float Seconds);                                              // [0x182cd90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceSeconds
	// void K2_AdvanceSeconds(float Seconds);                                                                                   // [0x182ccf0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceMinutes
	// void K2_AdvanceMinutes(float Minutes);                                                                                   // [0x182cc50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceHours
	// void K2_AdvanceHours(float Hours);                                                                                       // [0x182cbb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.K2_AdvanceDays
	// void K2_AdvanceDays(float Days);                                                                                         // [0x182cb10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.GameCalendar.ForceWeatherStart
	// void ForceWeatherStart();                                                                                                // [0x182caf0] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.ForceWeatherEnd
	// void ForceWeatherEnd();                                                                                                  // [0x182cad0] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceToHour
	// void AdvanceToHour(float TargetHour);                                                                                    // [0x182c960] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceTime
	// void AdvanceTime(float Days, float Hours, float Minutes, float Seconds);                                                 // [0x182c800] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceSeconds
	// void AdvanceSeconds(float Seconds);                                                                                      // [0x182c780] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceMinutes
	// void AdvanceMinutes(float Minutes);                                                                                      // [0x182c700] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceHours
	// void AdvanceHours(float Hours);                                                                                          // [0x182c680] Final|Exec|Native|Public 
	// Function /Script/Indiana.GameCalendar.AdvanceDays
	// void AdvanceDays(float Days);                                                                                            // [0x182c600] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.KeyHoldActionBase
/// Size: 0x0038 (0x000030 - 0x000068)
class UKeyHoldActionBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.StandardKeyHoldAction
/// Size: 0x0010 (0x000068 - 0x000078)
class UStandardKeyHoldAction : public UKeyHoldActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.IndexedReleaseKeyHoldAction
/// Size: 0x0010 (0x000068 - 0x000078)
class UIndexedReleaseKeyHoldAction : public UKeyHoldActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.DoubleClickKeyHoldAction
/// Size: 0x0028 (0x000068 - 0x000090)
class UDoubleClickKeyHoldAction : public UKeyHoldActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/Indiana.IndianaInputComponent
/// Size: 0x0030 (0x000170 - 0x0001A0)
class UIndianaInputComponent : public UInputComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
};

/// Class /Script/Indiana.GameInputComponent
/// Size: 0x0088 (0x0001A0 - 0x000228)
class UGameInputComponent : public UIndianaInputComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(TArray<class UKeyHoldActionBase*>)         KeyHoldActions                                              OFFSET(get<T>, {0x210, 16, 0, 0})
};

/// Class /Script/Indiana.GammaSelectionWidget
/// Size: 0x0068 (0x000308 - 0x000370)
class UGammaSelectionWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UWaitTimeSliderWidget*)              GammaSlider                                                 OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GammaValueTextBlock                                         OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UButtonBase*)                        AcceptButton                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UButtonBase*)                        DefaultButton                                               OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionTextBlock                                        OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UHorizontalBox*)                     InputLabelsHorizontalBox                                    OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UClass*)                             GammaSettingClassRef                                        OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UUserSettingFloat*)                  GammaSetting                                                OFFSET(get<T>, {0x368, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.GammaSelectionWidget.OnRestoreDefaults
	// void OnRestoreDefaults();                                                                                                // [0x182db10] Final|Native|Protected 
	// Function /Script/Indiana.GammaSelectionWidget.OnLocStringChanged
	// void OnLocStringChanged();                                                                                               // [0x182da70] Final|Native|Protected 
	// Function /Script/Indiana.GammaSelectionWidget.OnGammaChanged
	// void OnGammaChanged(FSliderEvent& Event);                                                                                // [0x182d8d0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.GammaSelectionWidget.OnGammaAccepted
	// void OnGammaAccepted();                                                                                                  // [0x182d8b0] Final|Native|Protected 
	// Function /Script/Indiana.GammaSelectionWidget.ApplyDefaults
	// void ApplyDefaults();                                                                                                    // [0x182c9e0] Final|Native|Protected 
};

/// Class /Script/Indiana.GDKDLCManager
/// Size: 0x0000 (0x000050 - 0x000050)
class UGDKDLCManager : public UDLCManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.GeneralButtonWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UGeneralButtonWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TextBlock                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.GenericCollapsableListContainer
/// Size: 0x0010 (0x000300 - 0x000310)
class UGenericCollapsableListContainer : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UVerticalBox*)                       ListVerticalBox                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UClass*)                             ListWidgetClass                                             OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.GenericListEntryWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UGenericListEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	SMember(FLocString)                                NameLocString                                               OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	SMember(FLocString)                                DescriptionLocString                                        OFFSET(getStruct<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             ValueIcon                                                   OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ValueTextBlock                                              OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.GenericLogicDataAsset
/// Size: 0x0088 (0x000038 - 0x0000C0)
class UGenericLogicDataAsset : public ULogicalExpressionBaseDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FString)                                   Comment                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FLogicalGroupedExpression)                 Conditions                                                  OFFSET(getStruct<T>, {0x48, 120, 0, 0})
};

/// Class /Script/Indiana.GenericNotificationEntryWidget
/// Size: 0x0140 (0x000300 - 0x000440)
class UGenericNotificationEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	CMember(class UBorder*)                            AnimationContainer                                          OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             TargetImage                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             TargetImage1                                                OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InputInstruction                                            OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InputInstruction1                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InputInstruction2                                           OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InputInstruction3                                           OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InputInstruction4                                           OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     EntryTextBlock                                              OFFSET(get<T>, {0x360, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.GenericNotificationEntryWidget.PrepareNextMessage
	// void PrepareNextMessage();                                                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationEntryWidget.PrepareNewMessage
	// void PrepareNewMessage();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationEntryWidget.OnStickLayoutChanged
	// void OnStickLayoutChanged(int32_t NewValue);                                                                             // [0x182dc00] Final|Native|Protected 
	// Function /Script/Indiana.GenericNotificationEntryWidget.OnFadeOutComplete
	// void OnFadeOutComplete();                                                                                                // [0x182d870] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.GenericNotificationEntryWidget.OnFadeInComplete
	// void OnFadeInComplete();                                                                                                 // [0x182d850] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.GenericNotificationWidget
/// Size: 0x0160 (0x000300 - 0x000460)
class UGenericNotificationWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(class UBorder*)                            MainBorder                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UGenericNotificationEntryWidget*)    EntryWidget                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class USizeBox*)                           ContentSizeBox                                              OFFSET(get<T>, {0x310, 8, 0, 0})
	DMember(float)                                     ContentResizeInterpExponent                                 OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     AnimationDuration                                           OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     ContentVerticalPadding                                      OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(int32_t)                                   GenericLogBackingMaterialSize                               OFFSET(get<int32_t>, {0x324, 4, 0, 0})
	DMember(int32_t)                                   MaterialPaddingModifier                                     OFFSET(get<int32_t>, {0x328, 4, 0, 0})
	CMember(ENotificationState)                        CurrentState                                                OFFSET(get<T>, {0x390, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.GenericNotificationWidget.TriggerFadeOut
	// void TriggerFadeOut();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationWidget.TriggerFadeIn
	// void TriggerFadeIn();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationWidget.SetBackingMaterialHeight
	// void SetBackingMaterialHeight(float NewHeight);                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.GenericNotificationWidget.OnSaveGameComplete
	// void OnSaveGameComplete(ESaveGameResult SaveResult, ESaveGameType SaveGameType);                                         // [0x182db30] Final|Native|Protected 
	// Function /Script/Indiana.GenericNotificationWidget.OnNotificationDurationChanged
	// void OnNotificationDurationChanged(float NotificationTime);                                                              // [0x182da90] Final|Native|Protected 
	// Function /Script/Indiana.GenericNotificationWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x182d9e0] Final|Native|Protected 
	// Function /Script/Indiana.GenericNotificationWidget.OnFadeOutComplete
	// void OnFadeOutComplete();                                                                                                // [0x182d890] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.GhostNavMesh
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class AGhostNavMesh : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UGhostNavMeshComponent*)             GhostNavMeshComponent                                       OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UBoxComponent*)                      NavModifierVolume                                           OFFSET(get<T>, {0x2C8, 8, 0, 0})
};

/// Class /Script/Indiana.GhostNavMeshComponent
/// Size: 0x0000 (0x000590 - 0x000590)
class UGhostNavMeshComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
};

/// Struct /Script/Indiana.AchievementArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FAchievementArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UAchievementDataAsset*>)      Achievements                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Indiana.GlobalAchievementData
/// Size: 0x00E0 (0x000038 - 0x000118)
class UGlobalAchievementData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TArray<class UAchievementDataAsset*>)      Achievements                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TMap<EGameDifficulty, FAchievementArray>)  DifficultyAchievements                                      OFFSET(get<T>, {0x48, 80, 0, 0})
	CMember(class UClass*)                             PatientNStatusEffect                                        OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(TArray<class UClass*>)                     MadScientistStatusEffects                                   OFFSET(get<T>, {0xA0, 16, 0, 0})
	DMember(int32_t)                                   NumMadScientSENeeded                                        OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	CMember(class UBrandDataAsset*)                    Brand                                                       OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(TArray<class UClass*>)                     SharpDressedItems                                           OFFSET(get<T>, {0xC0, 16, 0, 0})
	DMember(int32_t)                                   NumDamageTypesOnDeath                                       OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(float)                                     FactionThreshold                                            OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(int32_t)                                   NumMaxedFactions                                            OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	CMember(TArray<class UHeroStat*>)                  HeroStats                                                   OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(class UPresenceData*)                      DefaultPresenceData                                         OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(TArray<FString>)                           SpecialPETBenefitsWeapons                                   OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<FString>)                           UdderGatlingNeedlerWeapons                                  OFFSET(get<T>, {0x108, 16, 0, 0})
};

/// Struct /Script/Indiana.AIEventTypeMapElement
/// Size: 0x000C (0x000000 - 0x00000C)
class FAIEventTypeMapElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FGameplayTag)                              Event                                                       OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(EAIEventType)                              EventType                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Indiana.WeaponAISettingsMapElement
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeaponAISettingsMapElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGameplayTag)                              WeaponType                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UAISettings_Weapon*)                 WeaponSettings                                              OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.LostTargetTimes
/// Size: 0x0010 (0x000000 - 0x000010)
class FLostTargetTimes : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     RangedInitiallyUnseenTime                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     RangedInitiallySeenTime                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     CoverInitiallyUnseenTime                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     CoverInitiallySeenTime                                      OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Indiana.DisablePriorityMapElement
/// Size: 0x000C (0x000000 - 0x00000C)
class FDisablePriorityMapElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FGameplayTag)                              DisableType                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(EDisablePriority)                          Priority                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Indiana.CompanionFollowSettings
/// Size: 0x0001 (0x000000 - 0x000001)
class FCompanionFollowSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/Indiana.CompanionCommmandMoveToSettings
/// Size: 0x0004 (0x000000 - 0x000004)
class FCompanionCommmandMoveToSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     WalkDistanceThreshold                                       OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Struct /Script/Indiana.CompanionCommmandSettings
/// Size: 0x0008 (0x000000 - 0x000008)
class FCompanionCommmandSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     LostTargetTime                                              OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Indiana.NavigationBlockDetectionSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FNavigationBlockDetectionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     BlockDetectionDistance                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     BlockDetectionInterval                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   BlockDetectionSampleCount                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     BlockDestinationCheckDistance                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     BlockDestinationSampleInterval                              OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Indiana.NavigationBlockedSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FNavigationBlockedSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     BlockDistance                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     BlockHeadingCosineAngle                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     BlockDeltaCosineAngle                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinBlockTime                                                OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxBlockTime                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     NoBlockerTime                                               OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/Indiana.NavigationBumpSettings
/// Size: 0x000C (0x000000 - 0x00000C)
class FNavigationBumpSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     MaxBumpSpeed                                                OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     PostOverlapBumpTime                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     BumperBlockedTime                                           OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Indiana.NavigationJumpSettings
/// Size: 0x0008 (0x000000 - 0x000008)
class FNavigationJumpSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     MaxJumpDistance                                             OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxJumpHeight                                               OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Indiana.GameTimespan
/// Size: 0x0008 (0x000000 - 0x000008)
class FGameTimespan : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Indiana.SpellSet
/// Size: 0x0050 (0x000000 - 0x000050)
class FSpellSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<UClass*>)                             SpellTypes                                                  OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Indiana.MinMaxChatterTime
/// Size: 0x0008 (0x000000 - 0x000008)
class FMinMaxChatterTime : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Min                                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Max                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Indiana.ChatterEventRestrictedCharacterGroups
/// Size: 0x0050 (0x000000 - 0x000050)
class FChatterEventRestrictedCharacterGroups : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<ECharacterGrouping>)                  Values                                                      OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Indiana.InvestigationSettings
/// Size: 0x003C (0x000000 - 0x00003C)
class FInvestigationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	DMember(float)                                     MinInitialWaitTime                                          OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxInitialWaitTime                                          OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     EndWaitTime                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     WatchTeammateTime                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MinArrivalRadius                                            OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MaxArrivalRadius                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     StimulusUpdateWaitTime                                      OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     StimulusUpdateMinDuration                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     ExitChatterTriggerTime                                      OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     TeammateDistance                                            OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FAISettingsWander)                         DeadBodyWanderSearchSettings                                OFFSET(getStruct<T>, {0x28, 20, 0, 0})
};

/// Struct /Script/Indiana.PseudoGodModeSettings
/// Size: 0x0004 (0x000000 - 0x000004)
class FPseudoGodModeSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     MinimumHealthPercentage                                     OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Class /Script/Indiana.GlobalAIData
/// Size: 0x0A90 (0x000038 - 0x000AC8)
class UGlobalAIData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2760;

public:
	CMember(class UBlackboardData*)                    DefaultBlackboard                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TMap<EBehaviorState, class UBehaviorTree*>) BehaviorTreeMap                                            OFFSET(get<T>, {0x40, 80, 0, 0})
	CMember(class UDecisionTreeDesignerDataBundle*)    DefaultDecisionTreeData                                     OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UDecisionTreeDesignerDataBundle*)    DefaultCompanionDecisionTreeData                            OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UDecisionTreeDesignerDataBundle*)    DefaultPacifistDecisionTreeData                             OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(TArray<FAIEventTypeMapElement>)            AIEventTypes                                                OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TMap<FName, EAIEventType>)                 AIEventTypeMap                                              OFFSET(get<T>, {0xB8, 80, 0, 0})
	CMember(class UAISettings_Weapon*)                 BackupWeaponAISettings                                      OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(TArray<FWeaponAISettingsMapElement>)       DefaultWeaponAISettings                                     OFFSET(get<T>, {0x110, 16, 0, 0})
	DMember(float)                                     CoverWalkingDistanceThreshold                               OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     AdapativeRootmotionNPCScalar                                OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(float)                                     CalledShotAdaptiveRootMotionStopDistance                    OFFSET(get<float>, {0x128, 4, 0, 0})
	CMember(TArray<EMeleeAction>)                      LungeActions                                                OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(TMap<FGameplayTag, class UAISettings_Weapon*>) DefaultWeaponAISettingsMap                              OFFSET(get<T>, {0x140, 80, 0, 0})
	DMember(float)                                     ElongatedCharacterLostTimePadding                           OFFSET(get<float>, {0x190, 4, 0, 0})
	CMember(TMap<ELostTargetWaitTime, FLostTargetTimes>) LostTargetTimesMap                                        OFFSET(get<T>, {0x198, 80, 0, 0})
	CMember(TMap<ESuppressingFireDuration, float>)     SuppressingFireTimesMap                                     OFFSET(get<T>, {0x1E8, 80, 0, 0})
	DMember(float)                                     SuppressionObstacleMinDistance                              OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     SuppressionObstacleTargetDistance                           OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     SuppressionObstacleMinRatio                                 OFFSET(get<float>, {0x240, 4, 0, 0})
	SMember(FAISettings_RangedPositioning)             PositioningProbabilities                                    OFFSET(getStruct<T>, {0x244, 48, 0, 0})
	DMember(float)                                     WeaponSwitchCooldown                                        OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     MeleeKiteTime                                               OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     UnreachableTargetTime                                       OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(float)                                     UnreachableTargetOptimizationTime                           OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     TooCloseForRangeDistanceSearch                              OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     TooCloseForRangeDistanceChange                              OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(int32_t)                                   NumMeleeSlottedRings                                        OFFSET(get<int32_t>, {0x28C, 4, 0, 0})
	DMember(int32_t)                                   NumPointsPerMeleeSlottedRing                                OFFSET(get<int32_t>, {0x290, 4, 0, 0})
	DMember(int32_t)                                   MaxMeleeSlots                                               OFFSET(get<int32_t>, {0x294, 4, 0, 0})
	DMember(float)                                     MeleeSlotMovementDistanceThreshold                          OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     MeleeSlotBubbleSize                                         OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     MeleeSlotStationaryDuration                                 OFFSET(get<float>, {0x2A0, 4, 0, 0})
	CMember(class UEQSRequest_IndianaBase*)            FindMeleeSlotRequest                                        OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UEQSRequest_IndianaBase*)            FindMeleeWaitRequest                                        OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(TArray<FDisablePriorityMapElement>)        DisablePriorities                                           OFFSET(get<T>, {0x2B8, 16, 0, 0})
	SMember(FGameplayTag)                              CowerDisableType                                            OFFSET(getStruct<T>, {0x2C8, 8, 0, 0})
	CMember(class UClass*)                             ShockSpell_CompanionCalledShotAOE                           OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UClass*)                             ShockSpell_CompanionCalledShotTarget                        OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UClass*)                             ShockSpell_KillCamAOE                                       OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(TMap<FGameplayTag, EDisablePriority>)      DisablePriorityMap                                          OFFSET(get<T>, {0x2E8, 80, 0, 0})
	DMember(float)                                     CompanionResurrectDelay                                     OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     CompanionDeathPartyRemovalDelay                             OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     CompanionCombatDelay                                        OFFSET(get<float>, {0x340, 4, 0, 0})
	CMember(class UAISettings_Behavior*)               CompanionDefaultBehavior                                    OFFSET(get<T>, {0x348, 8, 0, 0})
	DMember(float)                                     CanOpenDoorsStealthDelay                                    OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     EnterStealthMinDelay                                        OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     EnterStealthMaxDelay                                        OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     ExitStealthMinDelay                                         OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     ExitStealthMaxDelay                                         OFFSET(get<float>, {0x360, 4, 0, 0})
	SMember(FCompanionFollowSettings)                  CompanionFollowSettings                                     OFFSET(getStruct<T>, {0x364, 1, 0, 0})
	SMember(FCompanionCommmandMoveToSettings)          CompanionCommandMoveToSettings                              OFFSET(getStruct<T>, {0x368, 4, 0, 0})
	SMember(FCompanionCommmandSettings)                CompanionCommandSuppressSettings                            OFFSET(getStruct<T>, {0x36C, 8, 0, 0})
	SMember(FCompanionCommmandSettings)                CompanionCommandFlankSettings                               OFFSET(getStruct<T>, {0x374, 8, 0, 0})
	SMember(FCompanionCommmandSettings)                CompanionCommandHunkerDownSettings                          OFFSET(getStruct<T>, {0x37C, 8, 0, 0})
	DMember(float)                                     MinWalkSpeed                                                OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     MaxWalkSpeed                                                OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     MinRunSpeed                                                 OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(float)                                     MaxRunSpeed                                                 OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     CatchUpTimeForCurrentMaxSpeed                               OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     MaxRunSpeedTransitionDistance                               OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(float)                                     MaxWalkSpeedTransitionDistance                              OFFSET(get<float>, {0x39C, 4, 0, 0})
	DMember(float)                                     SpeedAtMaxDistance                                          OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x3A4, 4, 0, 0})
	DMember(float)                                     MinMovingShuffleDistance                                    OFFSET(get<float>, {0x3A8, 4, 0, 0})
	DMember(float)                                     StuckTime                                                   OFFSET(get<float>, {0x3AC, 4, 0, 0})
	DMember(float)                                     MinAcceptanceRadius                                         OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(float)                                     MinAcceptanceHalfHeight                                     OFFSET(get<float>, {0x3B4, 4, 0, 0})
	CMember(class UClass*)                             HearingNavigationFilterClass                                OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UClass*)                             PlayerCompanionNavigationFilterClass                        OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UClass*)                             PlayerCompanionEQSNavigationFilterClass                     OFFSET(get<T>, {0x3C8, 8, 0, 0})
	SMember(FNavigationBlockDetectionSettings)         BlockDetectionSettings                                      OFFSET(getStruct<T>, {0x3D0, 20, 0, 0})
	SMember(FNavigationBlockedSettings)                BlockedSettings                                             OFFSET(getStruct<T>, {0x3E4, 24, 0, 0})
	SMember(FNavigationBumpSettings)                   BumpSettings                                                OFFSET(getStruct<T>, {0x3FC, 12, 0, 0})
	SMember(FNavigationJumpSettings)                   JumpSettings                                                OFFSET(getStruct<T>, {0x408, 8, 0, 0})
	SMember(FGameTimespan)                             PlayerFirstMeleeHitTimeThreshold                            OFFSET(getStruct<T>, {0x410, 8, 0, 0})
	DMember(float)                                     DefensiveActionAttackHalfAngle                              OFFSET(get<float>, {0x418, 4, 0, 0})
	DMember(float)                                     DodgeClearPathDistanceScalar                                OFFSET(get<float>, {0x41C, 4, 0, 0})
	DMember(float)                                     MinDelayDodge                                               OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     MaxDelayDodge                                               OFFSET(get<float>, {0x424, 4, 0, 0})
	DMember(float)                                     MinDelayMeleeBlock                                          OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(float)                                     MaxDelayMeleeBlock                                          OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(float)                                     NPCAccuracySpeed                                            OFFSET(get<float>, {0x430, 4, 0, 0})
	DMember(float)                                     TargetAcquisitionIntervalGoalTime                           OFFSET(get<float>, {0x434, 4, 0, 0})
	DMember(float)                                     AcquisitionCalcuationDistanceTreshold                       OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     TargetSwitchThreatCooldown                                  OFFSET(get<float>, {0x43C, 4, 0, 0})
	DMember(float)                                     TargetSwitchThreatScalar                                    OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(float)                                     PlayerThreatDecayTime                                       OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(float)                                     ThreatDecayTime                                             OFFSET(get<float>, {0x448, 4, 0, 0})
	DMember(float)                                     CurrentTargetMinThreatHealthScalar                          OFFSET(get<float>, {0x44C, 4, 0, 0})
	DMember(float)                                     PlayerThreatScalar                                          OFFSET(get<float>, {0x450, 4, 0, 0})
	DMember(float)                                     DamageThreatScalar                                          OFFSET(get<float>, {0x454, 4, 0, 0})
	DMember(float)                                     CloseQuarterDamageThreatScalar                              OFFSET(get<float>, {0x458, 4, 0, 0})
	DMember(float)                                     CloseQuarterThreatRange                                     OFFSET(get<float>, {0x45C, 4, 0, 0})
	DMember(float)                                     PlayerThreatBubbleRange                                     OFFSET(get<float>, {0x460, 4, 0, 0})
	DMember(float)                                     PlayerThreatBubbleMinThreatHealthScalar                     OFFSET(get<float>, {0x464, 4, 0, 0})
	SMember(FGameplayTag)                              DefaultBehaviorType                                         OFFSET(getStruct<T>, {0x46C, 8, 0, 0})
	DMember(float)                                     InteriorTetherRadius                                        OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     ExteriorTetherRadius                                        OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     InteriorDynamicTetherRadius                                 OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(float)                                     ExteriorDynamicTetherRadius                                 OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     InteriorForceTetherRadius                                   OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     ExteriorForceTetherRadius                                   OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     EncounterTetherRadius                                       OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     EncounterDynamicTetherRadius                                OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     MeleeTetherExtensionRadius                                  OFFSET(get<float>, {0x494, 4, 0, 0})
	DMember(float)                                     RetreatTargetMovementThreshold                              OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     CombatStartFireDelay                                        OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(float)                                     DelayedShoutChatterTime                                     OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     DelayedShoutTime                                            OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     InteriorShoutRadius                                         OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     ExteriorShoutRadius                                         OFFSET(get<float>, {0x4AC, 4, 0, 0})
	DMember(float)                                     InteriorProxyShoutRadius                                    OFFSET(get<float>, {0x4B0, 4, 0, 0})
	DMember(float)                                     ExteriorProxyShoutRadius                                    OFFSET(get<float>, {0x4B4, 4, 0, 0})
	DMember(float)                                     InteriorIntermittentShoutRadius                             OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     ExteriorIntermittentShoutRadius                             OFFSET(get<float>, {0x4BC, 4, 0, 0})
	DMember(float)                                     IntermittentShoutMinTimeBetween                             OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     IntermittentShoutMaxTimeBetween                             OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     InteriorOneShotDeathShoutRadius                             OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     ExteriorOneShotDeathShoutRadius                             OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     ProjectileWizzRadius                                        OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     ProjectileWizzTimer                                         OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     ProjectileWizzCooldown                                      OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     EnterRestrictedAreaCombatRadius                             OFFSET(get<float>, {0x4DC, 4, 0, 0})
	DMember(float)                                     CrimeHostilityRadius                                        OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     InterrogationConversationRange                              OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     InterrogationFleeMovingDistanceThreshold                    OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     InterrogationFleeTimeThreshold                              OFFSET(get<float>, {0x4EC, 4, 0, 0})
	DMember(float)                                     InterrogationFleeStationaryTimeThreshold                    OFFSET(get<float>, {0x4F0, 4, 0, 0})
	DMember(float)                                     InterrogationFleeSprintTimeBuffer                           OFFSET(get<float>, {0x4F4, 4, 0, 0})
	DMember(float)                                     TrespassInterrogationPlayerRelationshipClearTime            OFFSET(get<float>, {0x4F8, 4, 0, 0})
	DMember(float)                                     HostilePlayerRelationshipClearTime                          OFFSET(get<float>, {0x4FC, 4, 0, 0})
	DMember(float)                                     TrespassInterrogationCooldown                               OFFSET(get<float>, {0x500, 4, 0, 0})
	DMember(float)                                     CrimeMemoryClearTime                                        OFFSET(get<float>, {0x504, 4, 0, 0})
	DMember(float)                                     PostCrimeTheftDetectionTime                                 OFFSET(get<float>, {0x508, 4, 0, 0})
	DMember(float)                                     FriendlyFireDamagePercentHostilityThreshold                 OFFSET(get<float>, {0x50C, 4, 0, 0})
	DMember(int32_t)                                   FriendlyFireAttackCountHostilityThreshold                   OFFSET(get<int32_t>, {0x510, 4, 0, 0})
	DMember(float)                                     CrimeSoundInterval                                          OFFSET(get<float>, {0x514, 4, 0, 0})
	DMember(float)                                     DirectDamageCombatFadeTime                                  OFFSET(get<float>, {0x518, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        BlindSpreadCurve                                            OFFSET(getStruct<T>, {0x520, 136, 0, 0})
	SMember(FSpellSet)                                 PassiveSpellSet                                             OFFSET(getStruct<T>, {0x5A8, 80, 0, 0})
	SMember(FSpellSet)                                 CompanionPassiveSpellSet                                    OFFSET(getStruct<T>, {0x5F8, 80, 0, 0})
	DMember(float)                                     PostCombatUnequipDelayTimeMin                               OFFSET(get<float>, {0x648, 4, 0, 0})
	DMember(float)                                     PostCombatUnequipDelayTimeMax                               OFFSET(get<float>, {0x64C, 4, 0, 0})
	CMember(class UAISettings_Idle*)                   DefaultIdleSettings                                         OFFSET(get<T>, {0x650, 8, 0, 0})
	CMember(class UAISettings_Wander*)                 DefaultWanderSettings                                       OFFSET(get<T>, {0x658, 8, 0, 0})
	CMember(class UAISettings_FollowPlayer*)           DefaultFollowPlayerSettings                                 OFFSET(get<T>, {0x660, 8, 0, 0})
	CMember(class UWaitAction*)                        PatrolWaitForOrientAction                                   OFFSET(get<T>, {0x668, 8, 0, 0})
	DMember(float)                                     IdleTalkRange                                               OFFSET(get<float>, {0x670, 4, 0, 0})
	CMember(TMap<EMoraleContribution, float>)          MoraleContributionMap                                       OFFSET(get<T>, {0x678, 80, 0, 0})
	CMember(TMap<EThirdPersonSocket, FName>)           ThirdPersonSockets                                          OFFSET(get<T>, {0x6C8, 80, 0, 0})
	DMember(float)                                     ThreatenedCowerTime                                         OFFSET(get<float>, {0x718, 4, 0, 0})
	DMember(float)                                     MaxFleeDistance                                             OFFSET(get<float>, {0x71C, 4, 0, 0})
	DMember(float)                                     CowerProximityExtraTime                                     OFFSET(get<float>, {0x720, 4, 0, 0})
	DMember(float)                                     CowerMinTime                                                OFFSET(get<float>, {0x724, 4, 0, 0})
	DMember(float)                                     ChatterLowHealthPercentage                                  OFFSET(get<float>, {0x728, 4, 0, 0})
	DMember(float)                                     ChatterStealthCloseDistance                                 OFFSET(get<float>, {0x72C, 4, 0, 0})
	DMember(float)                                     MaxSquadMemberDistance                                      OFFSET(get<float>, {0x730, 4, 0, 0})
	DMember(float)                                     SquadChatterProbability                                     OFFSET(get<float>, {0x734, 4, 0, 0})
	DMember(float)                                     ChatterAllyDeathDistance                                    OFFSET(get<float>, {0x738, 4, 0, 0})
	DMember(float)                                     ChatterAllyDeathPostCombatTime                              OFFSET(get<float>, {0x73C, 4, 0, 0})
	DMember(float)                                     ChatterFallingTriggerTime                                   OFFSET(get<float>, {0x740, 4, 0, 0})
	DMember(float)                                     ChatterFallLandedDistance                                   OFFSET(get<float>, {0x744, 4, 0, 0})
	DMember(float)                                     ChatterThreatenedTriggerTime                                OFFSET(get<float>, {0x748, 4, 0, 0})
	DMember(float)                                     ChatterPerfectDisguiseTriggerTime                           OFFSET(get<float>, {0x74C, 4, 0, 0})
	DMember(float)                                     ChatterPerfectDisguiseTriggerRadius                         OFFSET(get<float>, {0x750, 4, 0, 0})
	DMember(int32_t)                                   ChatterEasyCombatLevelDifference                            OFFSET(get<int32_t>, {0x754, 4, 0, 0})
	DMember(int32_t)                                   ChatterHardCombatLevelDifference                            OFFSET(get<int32_t>, {0x758, 4, 0, 0})
	SMember(FGameplayTagContainer)                     SquadChatterCreatureTypes                                   OFFSET(getStruct<T>, {0x760, 32, 0, 0})
	CMember(TMap<ECompanionCommand, EChatterEventType>) CompanionCommandToChatter                                  OFFSET(get<T>, {0x780, 80, 0, 0})
	CMember(TMap<EChatterEventType, FMinMaxChatterTime>) ChatterDelayTimes                                         OFFSET(get<T>, {0x7D0, 80, 0, 0})
	DMember(float)                                     ChatterGrazeHitArmorDamageReductionPercentTreshold          OFFSET(get<float>, {0x820, 4, 0, 0})
	DMember(float)                                     ChatterGrazeHitArmorDamageScalarThreshold                   OFFSET(get<float>, {0x824, 4, 0, 0})
	DMember(float)                                     ChatterGrazeHitHealthReductionPercentMaximum                OFFSET(get<float>, {0x828, 4, 0, 0})
	DMember(float)                                     ChatterGrazeHitRangedMultiShotDamageMultiplier              OFFSET(get<float>, {0x82C, 4, 0, 0})
	DMember(float)                                     ChatterPersonalSpacePostConversationDelay                   OFFSET(get<float>, {0x830, 4, 0, 0})
	DMember(float)                                     ChatterCompanionAttackWarningSideHalfAngle                  OFFSET(get<float>, {0x834, 4, 0, 0})
	DMember(float)                                     ChatterCompanionAttackWarningDelay                          OFFSET(get<float>, {0x838, 4, 0, 0})
	CMember(TMap<ECreatureXPType, int32_t>)            ChatterCompanionAttackWarningCreatureXPLevelDiffs           OFFSET(get<T>, {0x840, 80, 0, 0})
	CMember(TMap<EDeathType, FGameplayTagContainer>)   ChatterCreatureDeathTypeRestrictions                        OFFSET(get<T>, {0x890, 80, 0, 0})
	CMember(TMap<EChatterEventType, FChatterEventRestrictedCharacterGroups>) ChatterEventCharacterGroupingRestrictions OFFSET(get<T>, {0x8E0, 80, 0, 0})
	CMember(TSet<EMeleeAction>)                        ChatterMeleeActions                                         OFFSET(get<T>, {0x930, 80, 0, 0})
	CMember(TSet<EChatterEventType>)                   ChatterEventsAllowedAfterPlayerDeath                        OFFSET(get<T>, {0x980, 80, 0, 0})
	DMember(float)                                     ChatterPlayerDeathActiveChatterFadeTime                     OFFSET(get<float>, {0x9D0, 4, 0, 0})
	DMember(float)                                     ChatterPlayerDeathCompanionChance                           OFFSET(get<float>, {0x9D4, 4, 0, 0})
	SMember(FGameplayTagContainer)                     ChatterPlayerDeathCreatureTypes                             OFFSET(getStruct<T>, {0x9D8, 32, 0, 0})
	DMember(float)                                     ChatterPlayerDeathReactionDelayMin                          OFFSET(get<float>, {0x9F8, 4, 0, 0})
	DMember(float)                                     ChatterPlayerDeathReactionDelayMax                          OFFSET(get<float>, {0x9FC, 4, 0, 0})
	SMember(FInvestigationSettings)                    InvestigationSettings                                       OFFSET(getStruct<T>, {0xA00, 60, 0, 0})
	CMember(TMap<EPseudoGodMode, FPseudoGodModeSettings>) PseudoGodModeMinHealthPercentageMap                      OFFSET(get<T>, {0xA40, 80, 0, 0})
	SMember(FAISettingsWander)                         WanderSearchSettings                                        OFFSET(getStruct<T>, {0xA90, 20, 0, 0})
	CMember(class UClass*)                             BulletClass                                                 OFFSET(get<T>, {0xAA8, 8, 0, 0})
	CMember(TArray<class UDisguiseData*>)              Disguises                                                   OFFSET(get<T>, {0xAB0, 16, 0, 0})
	SMember(FLocString)                                EmployeeBenefitsRezStatusEffectName                         OFFSET(getStruct<T>, {0xAC0, 8, 0, 0})
};

/// Struct /Script/Indiana.DamageTypeScalar
/// Size: 0x0018 (0x000000 - 0x000018)
class FDamageTypeScalar : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<class UClass*>)                     DamageTypes                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     Scalar                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/Indiana.ArmorVsDamageTypes
/// Size: 0x0018 (0x000000 - 0x000018)
class FArmorVsDamageTypes : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGameplayTag)                              ArmorType                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FDamageTypeScalar>)                 DamageTypeScalars                                           OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Class /Script/Indiana.GlobalArmorData
/// Size: 0x0190 (0x000038 - 0x0001C8)
class UGlobalArmorData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	DMember(float)                                     ArmorHitDegredation                                         OFFSET(get<float>, {0x38, 4, 0, 0})
	CMember(TArray<FArmorVsDamageTypes>)               ArmorVsDamageTypes                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FRuntimeFloatCurve)                        NPCArmorLevelDTModifierCurve                                OFFSET(getStruct<T>, {0x50, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        PlayerArmorLevelDTModifierCurve                             OFFSET(getStruct<T>, {0xD8, 136, 0, 0})
	SMember(FGameplayTag)                              BodyPartTag                                                 OFFSET(getStruct<T>, {0x160, 8, 0, 0})
	CMember(TMap<EIndianaDamageType, class UClass*>)   DamageTypes                                                 OFFSET(get<T>, {0x168, 80, 0, 0})
	CMember(TArray<class URpgStat*>)                   ArmorBonusSkills                                            OFFSET(get<T>, {0x1B8, 16, 0, 0})
};

/// Struct /Script/Indiana.InteractAudioEvent
/// Size: 0x0010 (0x000000 - 0x000010)
class FInteractAudioEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UAkAudioEvent*)                      OpenSound                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      CloseSound                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.GlobalAudioData
/// Size: 0x02D0 (0x000038 - 0x000308)
class UGlobalAudioData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class UAkAudioEvent*)                      DefaultFootstepEvent                                        OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     DefaultFootstepSocket                                       OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      DefaultPickupSound                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      PauseEvent                                                  OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      UnpauseEvent                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TMap<ENotifyChatterEventType, EChatterEventType>) ChatterAnimNotifyToEventMapping                      OFFSET(get<T>, {0x60, 80, 0, 0})
	DMember(float)                                     ChatterDistanceThreshold                                    OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     ChatterDefaultMaxWaitTime                                   OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(int32_t)                                   ChatterPerTickQueuedEventProcessLimit                       OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	SMember(FName)                                     MusicStateGroupName                                         OFFSET(getStruct<T>, {0xBC, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      MusicPlaybackEvent                                          OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      PauseMusicEvent                                             OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      ResumeMusicEvent                                            OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UMusicTrackData*)                    GameOverMusic                                               OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UMusicTrackData*)                    SkipMusic                                                   OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(TMap<FString, class UMapLoadingMusicSettings*>) LoadingMusicForMaps                                    OFFSET(get<T>, {0xF0, 80, 0, 0})
	DMember(float)                                     MusicSkipForceTransitionTime                                OFFSET(get<float>, {0x140, 4, 0, 0})
	SMember(FGameplayTag)                              DefaultVoicePostProcessTag                                  OFFSET(getStruct<T>, {0x144, 8, 0, 0})
	CMember(TMap<EHeadStyle, FGameplayTag>)            HeadStyleToVoicePostProcessTagMapping                       OFFSET(get<T>, {0x150, 80, 0, 0})
	CMember(TMap<FGameplayTag, FName>)                 VoicePostProcessTagToRTPCNameMapping                        OFFSET(get<T>, {0x1A0, 80, 0, 0})
	CMember(TMap<ETalkNodeVOAttenuationType, float>)   TalkNodeVOAttenuationTypeScalingFactors                     OFFSET(get<T>, {0x1F0, 80, 0, 0})
	CMember(TMap<FString, ETalkNodeVOAttenuationType>) PresetNameToAttenuationTypeMapping                          OFFSET(get<T>, {0x240, 80, 0, 0})
	CMember(TMap<FGameplayTag, FInteractAudioEvent>)   InteractAudioEvents                                         OFFSET(get<T>, {0x290, 80, 0, 0})
	CMember(class UAkAudioEvent*)                      DefaultOpenSound                                            OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      DefaultCloseSound                                           OFFSET(get<T>, {0x2E8, 8, 0, 0})
	SMember(FName)                                     AudioLogStateGroupName                                      OFFSET(getStruct<T>, {0x2F0, 8, 0, 0})
	SMember(FName)                                     AudioLogStateActiveName                                     OFFSET(getStruct<T>, {0x2F8, 8, 0, 0})
	SMember(FName)                                     AudioLogStateInactiveName                                   OFFSET(getStruct<T>, {0x300, 8, 0, 0})
};

/// Struct /Script/Indiana.ReputationActionConsequence
/// Size: 0x0018 (0x000000 - 0x000018)
class FReputationActionConsequence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EReputationType)                           ReputationType                                              OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EReputationIncrementType)                  IncrementType                                               OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(int32_t)                                   CustomAmount                                                OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(EReputationIncrementType)                  TalkIncrementType                                           OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   TalkCustomAmount                                            OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	CMember(EReputationIncrementType)                  BribeIncrementType                                          OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(int32_t)                                   BribeCustomAmount                                           OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/Indiana.ReputationElement
/// Size: 0x0010 (0x000000 - 0x000010)
class FReputationElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   PositiveIndex                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   NegativeIndex                                               OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(class UReputationData*)                    ReputationData                                              OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.GlobalFactionData
/// Size: 0x02D0 (0x000038 - 0x000308)
class UGlobalFactionData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(TSet<UClass*>)                             AllFactions                                                 OFFSET(get<T>, {0x38, 80, 0, 0})
	DMember(float)                                     ReputationIncrementLow                                      OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(float)                                     ReputationIncrementMedium                                   OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(float)                                     ReputationIncrementHigh                                     OFFSET(get<float>, {0x90, 4, 0, 0})
	CMember(TMap<class UReputationData*, TEnumAsByte<ETeamAttitude>>) EmotionRelationshipMapping                   OFFSET(get<T>, {0x98, 80, 0, 0})
	CMember(TWeakObjectPtr<class UGlobalFactionData*>) DLCGlobalFactionData                                        OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(TMap<EReputationActionType, FReputationActionConsequence>) ReputationActionConsequences                OFFSET(get<T>, {0x110, 80, 0, 0})
	DMember(float)                                     PositiveThresholds                                          OFFSET(get<float>, {0x160, 16, 0, 0})
	DMember(float)                                     NegativeThresholds                                          OFFSET(get<float>, {0x170, 16, 0, 0})
	SMember(FReputationElement)                        Reputations                                                 OFFSET(getStruct<T>, {0x180, 256, 0, 0})
};

/// Class /Script/Indiana.GlobalFactionDataCollection
/// Size: 0x00C8 (0x000038 - 0x000100)
class UGlobalFactionDataCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(TArray<class UGlobalFactionData*>)         Sources                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UGlobalFactionData*)                 FirstGlobalFactionData                                      OFFSET(get<T>, {0xF8, 8, 0, 0})
};

/// Class /Script/Indiana.GlobalItemData
/// Size: 0x00C8 (0x000038 - 0x000100)
class UGlobalItemData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(int32_t)                                   PlayerItemLevelDelta                                        OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   MaxItemLevelGreaterThanPlayer                               OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	CMember(class UClass*)                             WeaponPart                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UClass*)                             ArmorPart                                                   OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(float)                                     PristineRepairChance                                        OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(TArray<int32_t>)                           LevelAdvancementCost                                        OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   ScienceAdvancementCostCap                                   OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        LevelAdvanceScalarCurve                                     OFFSET(getStruct<T>, {0x70, 136, 0, 0})
	CMember(class UClass*)                             DisguisePrerequisiteItem                                    OFFSET(get<T>, {0xF8, 8, 0, 0})
};

/// Struct /Script/Indiana.NameTypeBinding
/// Size: 0x000C (0x000000 - 0x00000C)
class FNameTypeBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(EInputBindingType)                         BindingType                                                 OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/Indiana.LinkedBinding
/// Size: 0x0018 (0x000000 - 0x000018)
class FLinkedBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     LinkedBindingName                                           OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FNameTypeBinding>)                  Bindings                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Indiana.GamepadBindings
/// Size: 0x0040 (0x000000 - 0x000040)
class FGamepadBindings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FKey)                                      OldKey                                                      OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FKey)                                      NewKey                                                      OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	DMember(float)                                     NewScale                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	CMember(EInputBindingType)                         NewBindingType                                              OFFSET(get<T>, {0x3C, 1, 0, 0})
};

/// Struct /Script/Indiana.GamepadBindingsList
/// Size: 0x0010 (0x000000 - 0x000010)
class FGamepadBindingsList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FGamepadBindings>)                  Bindings                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Indiana.GlobalKeybindsData
/// Size: 0x00B0 (0x000038 - 0x0000E8)
class UGlobalKeybindsData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(TArray<FLinkedBinding>)                    LinkedBindings                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TMap<EGamepadLayoutType, FGamepadBindingsList>) GamepadBindings                                        OFFSET(get<T>, {0x48, 80, 0, 0})
	CMember(TMap<EStickLayoutType, FGamepadBindingsList>) LayoutBindings                                           OFFSET(get<T>, {0x98, 80, 0, 0})
};

/// Struct /Script/Indiana.MeleeInput
/// Size: 0x0002 (0x000000 - 0x000002)
class FMeleeInput : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(EMeleeAction)                              PreviousAction                                              OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EButtonPress)                              ButtonPress                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
};

/// Struct /Script/Indiana.MeleeAction
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FMeleeAction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(EMeleeAction)                              Action                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EWeaponEvent)                              WeaponEvent                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TArray<FMeleeInput>)                       Input                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(class UForceFeedbackEffect*)               ForceFeedbackEffectOneHand                                  OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               ForceFeedbackEffectOneHandBlocked                           OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               ForceFeedbackEffectTwoHands                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               ForceFeedbackEffectTwoHandsBlocked                          OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      bClearInput                                                 OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bAllowInputAtStart                                          OFFSET(get<bool>, {0x39, 1, 0, 0})
	DMember(bool)                                      bCanStartQueuedActionAtStart                                OFFSET(get<bool>, {0x3A, 1, 0, 0})
	DMember(bool)                                      bStartWhenQueued                                            OFFSET(get<bool>, {0x3B, 1, 0, 0})
	DMember(bool)                                      bRecoilIfBlocked                                            OFFSET(get<bool>, {0x3C, 1, 0, 0})
	DMember(bool)                                      bPlayerForceFeedbackAtStart                                 OFFSET(get<bool>, {0x3D, 1, 0, 0})
	DMember(float)                                     DamageMultiplier                                            OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     CalledShotCharge                                            OFFSET(get<float>, {0x44, 4, 0, 0})
	CMember(EMeleeAttackType)                          AttackType                                                  OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(EMeleeAction)                              InterruptAction                                             OFFSET(get<T>, {0x49, 1, 0, 0})
	CMember(EMeleeAction)                              AutoQueuedAction                                            OFFSET(get<T>, {0x4A, 1, 0, 0})
	CMember(TSet<EMeleeAction>)                        ChainActions                                                OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Class /Script/Indiana.GlobalMeleeData
/// Size: 0x0078 (0x000038 - 0x0000B0)
class UGlobalMeleeData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(float)                                     HoldDuration                                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     MeleeBlockRadians                                           OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     RangedBlockRadians                                          OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PerfectBlockDuration                                        OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MinAnimationSpeed                                           OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     MaxAnimationSpeed                                           OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     AttackInterruptCooldown                                     OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(class UPhysicalMaterial*)                  BlockMaterials                                              OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TMap<EMeleeAction, FMeleeAction>)          MeleeActions                                                OFFSET(get<T>, {0x60, 80, 0, 0})
};

/// Struct /Script/Indiana.DefaultTeamRelationships
/// Size: 0x00F0 (0x000000 - 0x0000F0)
class FDefaultTeamRelationships : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TSet<UClass*>)                             HostileTeams                                                OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(TSet<UClass*>)                             NeutralTeams                                                OFFSET(get<T>, {0x50, 80, 0, 0})
	CMember(TSet<UClass*>)                             FriendlyTeams                                               OFFSET(get<T>, {0xA0, 80, 0, 0})
};

/// Class /Script/Indiana.GlobalTeamData
/// Size: 0x01A0 (0x000038 - 0x0001D8)
class UGlobalTeamData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	CMember(class UClass*)                             PlayerTeam                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TSet<UClass*>)                             AllTeams                                                    OFFSET(get<T>, {0x40, 80, 0, 0})
	SMember(FDefaultTeamRelationships)                 DefaultTeamRelationships                                    OFFSET(getStruct<T>, {0x90, 240, 0, 0})
	CMember(TWeakObjectPtr<class UGlobalTeamData*>)    INX1TeamData                                                OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TWeakObjectPtr<class UGlobalTeamData*>)    INX2TeamData                                                OFFSET(get<T>, {0x1A8, 8, 0, 0})
};

/// Class /Script/Indiana.GlobalTeamDataCollection
/// Size: 0x0158 (0x000038 - 0x000190)
class UGlobalTeamDataCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(TArray<class UGlobalTeamData*>)            Sources                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/Indiana.ActionLabelDescription
/// Size: 0x000C (0x000000 - 0x00000C)
class FActionLabelDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bDisplayKeyboard                                            OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bDisplayGamepad                                             OFFSET(get<bool>, {0x9, 1, 0, 0})
};

/// Struct /Script/Indiana.SpecializedAmmoClasses
/// Size: 0x0010 (0x000000 - 0x000010)
class FSpecializedAmmoClasses : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UClass*>)                     Classes                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.HUDFadeSettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FHUDFadeSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     HUDActiveTime                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     HUDFadeInTime                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     HUDFadeInExponent                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     HUDFadeOutTime                                              OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     HUDFadeOutExponent                                          OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Class /Script/Indiana.GlobalUIData
/// Size: 0x0140 (0x000038 - 0x000178)
class UGlobalUIData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(class UIndianaUIColorsData*)               GlobalUIColorsData                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UIndianaLoadingScreenImageData*)     LoadingScreenImageData                                      OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UIndianaTextAnimationData*)          TextAnimationData                                           OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UTutorialDataAsset*)                 TutorialAssetData                                           OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UComputerTerminalHeaderData*)        ComputerTerminalHeaderData                                  OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UQuestDataAsset*)                    QuestData                                                   OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UIndianaUIAudioData*)                IndianaUIAudioData                                          OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UClass*)                             RenderThreadLoadingScreenWidgetClass                        OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TMap<FName, FActionLabelDescription>)      ActionLabelDescriptions                                     OFFSET(get<T>, {0x80, 80, 0, 0})
	CMember(class UIndianaUIControllerIconsData*)      PCMouseData                                                 OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UIndianaUIControllerIconsData*)      XboxControllerData                                          OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UIndianaUIControllerIconsData*)      PlaystationControllerData                                   OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(TMap<FGameplayTag, FSpecializedAmmoClasses>) SpecializedAmmoClasses                                    OFFSET(get<T>, {0xE8, 80, 0, 0})
	CMember(class UCompassEntryData*)                  CompassData                                                 OFFSET(get<T>, {0x138, 8, 0, 0})
	SMember(FString)                                   ForbiddenTextEntryCharacters                                OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	CMember(class UIndianaDefaultButtonAudioData*)     AudioActionData                                             OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class UClass*)                             DefaultDummyClass                                           OFFSET(get<T>, {0x158, 8, 0, 0})
	SMember(FHUDFadeSettings)                          HUDFadeSettings                                             OFFSET(getStruct<T>, {0x160, 20, 0, 0})
};

/// Class /Script/Indiana.GlobalWeaponData
/// Size: 0x0180 (0x000038 - 0x0001B8)
class UGlobalWeaponData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	DMember(float)                                     FineAimTime                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     MaxCritChanceRangedWeapons                                  OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     MaxCritChanceMeleeWeapons                                   OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     MaxGrazeChanceRangedWeapons                                 OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxGrazeChanceMeleeWeapons                                  OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     GrazeDamageMultiplier                                       OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     StaminaOnKill                                               OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     TimeDilationMeterOnKill                                     OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     CompanionCommandMeterOnKill                                 OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     CalledShotToStaminaConversionRatio                          OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     CalledShotMinSuccessRatio                                   OFFSET(get<float>, {0x60, 4, 0, 0})
	SMember(FName)                                     ShootSocket                                                 OFFSET(getStruct<T>, {0x64, 8, 0, 0})
	SMember(FName)                                     ProjectorBaseSocket                                         OFFSET(getStruct<T>, {0x6C, 8, 0, 0})
	SMember(FName)                                     StateWidgetSocket                                           OFFSET(getStruct<T>, {0x74, 8, 0, 0})
	SMember(FName)                                     ProjectorEndBone                                            OFFSET(getStruct<T>, {0x7C, 8, 0, 0})
	SMember(FName)                                     ProjectorEndSocket                                          OFFSET(getStruct<T>, {0x84, 8, 0, 0})
	DMember(float)                                     MeleeWeaponAttackDegradation                                OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(float)                                     RangedWeaponQuickMeleeDegredation                           OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     BlockMeleeWeaponDegredation                                 OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(float)                                     BlockRangedWeaponDegredation                                OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     GrazePercentThreshold                                       OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     NRayIgnoreDTPercent                                         OFFSET(get<float>, {0xA0, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        NPCWeaponLevelDamageModifierCurve                           OFFSET(getStruct<T>, {0xA8, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        PlayerWeaponLevelDamageModifierCurve                        OFFSET(getStruct<T>, {0x130, 136, 0, 0})
};

/// Class /Script/Indiana.GravityStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UGravityStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     NewGravity                                                  OFFSET(get<float>, {0x188, 4, 0, 0})
};

/// Class /Script/Indiana.GravManger
/// Size: 0x0000 (0x0002B8 - 0x0002B8)
class AGravManger : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:


	/// Functions
	// Function /Script/Indiana.GravManger.SetLowGravAmbientAudioEnabled
	// void SetLowGravAmbientAudioEnabled(bool Enabled);                                                                        // [0x1836430] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.ButtonGroup
/// Size: 0x0038 (0x000030 - 0x000068)
class UButtonGroup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:


	/// Functions
	// Function /Script/Indiana.ButtonGroup.OnButtonUnFocused
	// void OnButtonUnFocused(class UButtonBase* Button);                                                                       // [0x1836020] Final|Native|Private 
	// Function /Script/Indiana.ButtonGroup.OnButtonFocused
	// void OnButtonFocused(class UButtonBase* Button);                                                                         // [0x1835f90] Final|Native|Private 
	// Function /Script/Indiana.ButtonGroup.CyclePreviousButton
	// void CyclePreviousButton();                                                                                              // [0x1835700] Final|Native|Private 
	// Function /Script/Indiana.ButtonGroup.CycleNextButton
	// void CycleNextButton();                                                                                                  // [0x18356e0] Final|Native|Private 
};

/// Class /Script/Indiana.TransitionGroup
/// Size: 0x0070 (0x000030 - 0x0000A0)
class UTransitionGroup : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Indiana.ToggleTransitionGroup
/// Size: 0x0000 (0x0000A0 - 0x0000A0)
class UToggleTransitionGroup : public UTransitionGroup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Indiana.ScrollingWidgetGroup
/// Size: 0x0008 (0x0000A0 - 0x0000A8)
class UScrollingWidgetGroup : public UTransitionGroup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:


	/// Functions
	// Function /Script/Indiana.ScrollingWidgetGroup.OnScrollingComplete
	// void OnScrollingComplete();                                                                                              // [0x1836180] Final|Native|Protected 
};

/// Struct /Script/Indiana.HairAppearance
/// Size: 0x0050 (0x000040 - 0x000090)
class FHairAppearance : public FAppearanceMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      StandardMesh                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      CappedMesh                                                  OFFSET(get<T>, {0x68, 8, 0, 0})
};

/// Class /Script/Indiana.HairAppearances
/// Size: 0x0010 (0x000038 - 0x000048)
class UHairAppearances : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FHairAppearance>)                   HairAppearances                                             OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.HairColor
/// Size: 0x0040 (0x000038 - 0x000078)
class UHairColor : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FLinearColor)                              HairRootColor                                               OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FLinearColor)                              HairTipColor                                                OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FLinearColor)                              HairCapColor                                                OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FLinearColor)                              EyeBrowColor                                                OFFSET(getStruct<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Indiana.HairCustomizationWidget
/// Size: 0x0000 (0x000398 - 0x000398)
class UHairCustomizationWidget : public UCCCharacterCustomizationBaseWdgt
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
};

/// Class /Script/Indiana.Hazard
/// Size: 0x00C8 (0x0002B8 - 0x000380)
class AHazard : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	SMember(FMulticastInlineDelegate)                  OnHazardEnabling                                            OFFSET(getStruct<T>, {0x2C8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHazardEnabled                                             OFFSET(getStruct<T>, {0x2D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHazardDisabling                                           OFFSET(getStruct<T>, {0x2E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHazardDisabled                                            OFFSET(getStruct<T>, {0x2F8, 16, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x308, 1, 0, 0})
	CMember(class UClass*)                             HazardEffect                                                OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UClass*)                             HazardTeam                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bIgnoreCompanions                                           OFFSET(get<bool>, {0x320, 1, 0, 0})
	DMember(bool)                                      bUseDestructionFailsafe                                     OFFSET(get<bool>, {0x321, 1, 0, 0})
	DMember(float)                                     EnableRampUpTime                                            OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     DisableRampDownTime                                         OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     EffectExpirationDuration                                    OFFSET(get<float>, {0x32C, 4, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               CollisionStaticMeshComponent                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x340, 8, 0, 0})
	DMember(bool)                                      bCheckLoS                                                   OFFSET(get<bool>, {0x348, 1, 0, 0})
	CMember(TArray<class AHazardSource*>)              ConnectedSources                                            OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<AActor*>>)           AffectedActors                                              OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(class UIndianaNavModifierComponent*)       NavModifierComponent                                        OFFSET(get<T>, {0x378, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.Hazard.OnActorExited
	// void OnActorExited(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1835d60] Final|Native|Public  
	// Function /Script/Indiana.Hazard.OnActorEntered
	// void OnActorEntered(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1835b40] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.Hazard.ForceSetEnabled
	// void ForceSetEnabled(bool bNewEnabled);                                                                                  // [0x1835840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Hazard.CustomUpdate
	// void CustomUpdate();                                                                                                     // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.Hazard.AttemptEnableHazard
	// void AttemptEnableHazard(bool bEnable);                                                                                  // [0x1835650] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.HazardAudioComponent
/// Size: 0x0050 (0x000150 - 0x0001A0)
class UHazardAudioComponent : public UInteractableAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TMap<EHazardEventType, class UAkPlaySoundEventEffect*>) AudioEvents                                    OFFSET(get<T>, {0x150, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.HazardAudioComponent.Stop
	// void Stop(EHazardEventType Type);                                                                                        // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HazardAudioComponent.Play
	// void Play(EHazardEventType Type);                                                                                        // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.HazardSource
/// Size: 0x0008 (0x000478 - 0x000480)
class AHazardSource : public ADestructible
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(class AHazard*)                            ParentHazard                                                OFFSET(get<T>, {0x478, 8, 0, 0})
};

/// Struct /Script/Indiana.TrackingSetting
/// Size: 0x000C (0x000000 - 0x00000C)
class FTrackingSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ComfortAngle                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     TargetDistanceThreshold                                     OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Indiana.HeadAndBodyTrackingComponent
/// Size: 0x04F8 (0x0000E0 - 0x0005D8)
class UHeadAndBodyTrackingComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1496;

public:
	DMember(float)                                     HeadSpeed                                                   OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     WeaponAimSpeed                                              OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     WeaponAimRotationComfortAngle                               OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     HeadRotationComfortAngle                                    OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ConversationHeadRotationComfortAngle                        OFFSET(get<float>, {0x104, 4, 0, 0})
	SMember(FTrackingSetting)                          HeadSettings                                                OFFSET(getStruct<T>, {0x108, 12, 0, 0})
	SMember(FTrackingSetting)                          ConversationHeadSettings                                    OFFSET(getStruct<T>, {0x114, 12, 0, 0})
	SMember(FTrackingSetting)                          BarkConversationHeadSettings                                OFFSET(getStruct<T>, {0x120, 12, 0, 0})
	SMember(FTrackingSetting)                          ElevatorHeadSettings                                        OFFSET(getStruct<T>, {0x12C, 12, 0, 0})
	DMember(float)                                     BodyRotationComfortAngle                                    OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     ConversationActiveBodyRotationComfortAngle                  OFFSET(get<float>, {0x13C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.HeadAndBodyTrackingComponent.OnOccupiedElevatorChange
	// void OnOccupiedElevatorChange(class AElevator* Elevator, bool bOccupied);                                                // [0x18360b0] Final|Native|Protected 
};

/// Struct /Script/Indiana.NewHeadAppearance
/// Size: 0x0080 (0x000040 - 0x0000C0)
class FNewHeadAppearance : public FAppearanceMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      HeadMesh                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TMap<FName, TWeakObjectPtr<UMaterialInterface*>>) MaterialOverrides                                    OFFSET(get<T>, {0x68, 80, 0, 0})
	SMember(FName)                                     HairMorphTarget                                             OFFSET(getStruct<T>, {0xB8, 8, 0, 0})
};

/// Class /Script/Indiana.HeadAppearances
/// Size: 0x0010 (0x000038 - 0x000048)
class UHeadAppearances : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FNewHeadAppearance>)                HeadAppearances                                             OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.HealGunBehaviorStateInfo
/// Size: 0x0010 (0x000178 - 0x000188)
class UHealGunBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.HealGunRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UHealGunRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.HealStatusEffect
/// Size: 0x0028 (0x000188 - 0x0001B0)
class UHealStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(float)                                     HealValue                                                   OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     HealValuePercent                                            OFFSET(get<float>, {0x18C, 4, 0, 0})
	CMember(EHealValueType)                            HealValueType                                               OFFSET(get<T>, {0x190, 1, 0, 0})
	DMember(bool)                                      bCanHealDead                                                OFFSET(get<bool>, {0x191, 1, 0, 0})
	CMember(class URpgStat*)                           HealMultiplierStat                                          OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class URpgStat*)                           SecondaryMultiplierStat                                     OFFSET(get<T>, {0x1A0, 8, 0, 0})
};

/// Class /Script/Indiana.HealthComponent
/// Size: 0x00E0 (0x0000E0 - 0x0001C0)
class UHealthComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	SMember(FMulticastInlineDelegate)                  OnNewStateOfBeing                                           OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRestoredStateOfBeing                                      OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPreStateOfBeingChange                                     OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPostStateOfBeingChange                                    OFFSET(getStruct<T>, {0x118, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHealthChanged                                             OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDeath                                                     OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnKillingBlowDelegate                                       OFFSET(getStruct<T>, {0x148, 16, 0, 0})
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     RegenRate                                                   OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     PercentMaxHealthOnResurrect                                 OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(bool)                                      bGodMode                                                    OFFSET(get<bool>, {0x164, 1, 0, 0})
	DMember(bool)                                      bPseudoGodMode                                              OFFSET(get<bool>, {0x165, 1, 0, 0})
	DMember(bool)                                      bImmuneToFallDamage                                         OFFSET(get<bool>, {0x166, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.HealthComponent.Suicide
	// void Suicide();                                                                                                          // [0x1836550] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.SetPseudoGod
	// void SetPseudoGod(bool bEnabled);                                                                                        // [0x18364c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HealthComponent.SetHealthPercentNPC
	// void SetHealthPercentNPC(float Percent);                                                                                 // [0x18363b0] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.SetHealthPercent
	// void SetHealthPercent(float Percent, class AActor* Instigator);                                                          // [0x18362e0] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.SetGod
	// void SetGod(bool bEnabled);                                                                                              // [0x1836250] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HealthComponent.PseudoGod
	// void PseudoGod();                                                                                                        // [0x1836230] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18361a0] Native|Protected     
	// Function /Script/Indiana.HealthComponent.OnAttributeUpdated
	// void OnAttributeUpdated(EAttribute Attribute, int32_t NewValue);                                                         // [0x1835ec0] Native|Protected     
	// Function /Script/Indiana.HealthComponent.LevelChanged
	// void LevelChanged(int32_t Level);                                                                                        // [0x1835ab0] Native|Protected     
	// Function /Script/Indiana.HealthComponent.KillNPC
	// void KillNPC(class AIndianaAiCharacter* Character);                                                                      // [0x1835a30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.HealthComponent.HealthFill
	// void HealthFill();                                                                                                       // [0x1835a10] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.GodCompanions
	// void GodCompanions();                                                                                                    // [0x18359f0] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.God
	// void God();                                                                                                              // [0x18359d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.HealthComponent.GetStateOfBeing
	// EStateOfBeing GetStateOfBeing();                                                                                         // [0x18359b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.GetRegenRatePoints
	// float GetRegenRatePoints();                                                                                              // [0x1835980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.GetRegenRate
	// float GetRegenRate();                                                                                                    // [0x1835940] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.GetNormalizedHealth
	// float GetNormalizedHealth();                                                                                             // [0x1835910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HealthComponent.GetMaxHealth
	// float GetMaxHealth();                                                                                                    // [0x18358f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.GetHealth
	// float GetHealth();                                                                                                       // [0x18358d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.HealthComponent.DeathComplete
	// void DeathComplete(class AActor* DeadActor);                                                                             // [0x1835720] Native|Protected     
};

/// Class /Script/Indiana.HealthKitTooltipWidget
/// Size: 0x00B0 (0x000300 - 0x0003B0)
class UHealthKitTooltipWidget : public UToolTipContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(class UTexture2D*)                         UnlitTexture                                                OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTexture2D*)                         LitTexture                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     UsageTextBlock                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionTextBlock                                        OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LoreTextBlock                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UHorizontalBox*)                     Slot0Box                                                    OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     Slot0TextBlock                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             Slot0Image                                                  OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UHorizontalBox*)                     Slot1Box                                                    OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     Slot1TextBlock                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UImage*)                             Slot1Image                                                  OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UHorizontalBox*)                     Slot2Box                                                    OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTextBlockBase*)                     Slot2TextBlock                                              OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UImage*)                             Slot2Image                                                  OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UHorizontalBox*)                     Slot3Box                                                    OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UTextBlockBase*)                     Slot3TextBlock                                              OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UImage*)                             Slot3Image                                                  OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class USizeBox*)                           ImageSizeBox                                                OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UBorder*)                            FrameBorder                                                 OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UScaleBox*)                          MainScaleBox                                                OFFSET(get<T>, {0x3A0, 8, 0, 0})
	DMember(int32_t)                                   ImageClippingHeight                                         OFFSET(get<int32_t>, {0x3A8, 4, 0, 0})
	DMember(float)                                     MaximumScaleModifier                                        OFFSET(get<float>, {0x3AC, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.HealthKitTooltipWidget.FontSizeChanged
	// void FontSizeChanged(int32_t NewModifier);                                                                               // [0x18357b0] Final|Native|Protected 
};

/// Class /Script/Indiana.HearingNavLink
/// Size: 0x0000 (0x0002D0 - 0x0002D0)
class AHearingNavLink : public APlaceableNavLink
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
};

/// Struct /Script/Indiana.AreaHeightTile
/// Size: 0x0058 (0x000000 - 0x000058)
class FAreaHeightTile : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FBox2D)                                    WorldArea                                                   OFFSET(getStruct<T>, {0x0, 20, 0, 0})
	CMember(TWeakObjectPtr<class UHeightmapData*>)     HeightmapData                                               OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Class /Script/Indiana.HeightmapManager
/// Size: 0x0030 (0x000310 - 0x000340)
class AHeightmapManager : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	SMember(FBox2D)                                    WorldBounds                                                 OFFSET(getStruct<T>, {0x310, 20, 0, 0})
	DMember(int32_t)                                   StreamInDistanceSquared                                     OFFSET(get<int32_t>, {0x324, 4, 0, 0})
	DMember(int32_t)                                   StreamOutDistanceSquared                                    OFFSET(get<int32_t>, {0x328, 4, 0, 0})
	CMember(TArray<FAreaHeightTile>)                   AreaHeightTiles                                             OFFSET(get<T>, {0x330, 16, 0, 0})
};

/// Class /Script/Indiana.Helmet
/// Size: 0x00B8 (0x0001F8 - 0x0002B0)
class UHelmet : public UArmorItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(EHeadStyle)                                HeadStyle                                                   OFFSET(get<T>, {0x1F8, 1, 0, 0})
	CMember(class UModAppearances*)                    HelmetVisuals                                               OFFSET(get<T>, {0x200, 8, 0, 0})
	SMember(FArmorVisualProperties)                    VisualProperties                                            OFFSET(getStruct<T>, {0x208, 88, 0, 0})
	SMember(FArmorData)                                Armor                                                       OFFSET(getStruct<T>, {0x260, 72, 0, 0})
	SMember(FGameplayTag)                              VoicePostProcessOverride                                    OFFSET(getStruct<T>, {0x2A8, 8, 0, 0})
};

/// Class /Script/Indiana.HeroStat
/// Size: 0x0018 (0x000038 - 0x000050)
class UHeroStat : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UEventListener*)                     EventListener                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(int32_t)                                   HeroStatID                                                  OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	SMember(FName)                                     HeroStatName                                                OFFSET(getStruct<T>, {0x44, 8, 0, 0})
};

/// Class /Script/Indiana.HideMeshEventEffect
/// Size: 0x0008 (0x000030 - 0x000038)
class UHideMeshEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(EMeshTarget)                               TargetMesh                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      bHideChildComponents                                        OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Class /Script/Indiana.HighlightComponent
/// Size: 0x0058 (0x0000E0 - 0x000138)
class UHighlightComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(class UMaterial*)                          HighlightPostProcessMaterial                                OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           PostProcessDynamicMaterial                                  OFFSET(get<T>, {0xE8, 8, 0, 0})
};

/// Struct /Script/Indiana.HeightValuesTexture
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FHeightValuesTexture : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(class UTexture2D*)                         Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.HitEffectIndicatorComponent
/// Size: 0x0890 (0x0000E0 - 0x000970)
class UHitEffectIndicatorComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2416;

public:
	CMember(TArray<FHeightValuesTexture>)              HeightValuesTexture                                         OFFSET(get<T>, {0x900, 16, 0, 0})
	CMember(class UMaterial*)                          PostProcessMaterial                                         OFFSET(get<T>, {0x928, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           PostProcessDynamicMaterial                                  OFFSET(get<T>, {0x930, 8, 0, 0})
	DMember(float)                                     GrowthRate                                                  OFFSET(get<float>, {0x938, 4, 0, 0})
	DMember(float)                                     DropRate                                                    OFFSET(get<float>, {0x93C, 4, 0, 0})
	DMember(float)                                     Flatness                                                    OFFSET(get<float>, {0x940, 4, 0, 0})
	DMember(float)                                     MinDamageToReact                                            OFFSET(get<float>, {0x944, 4, 0, 0})
	DMember(float)                                     MaxDamageToReact                                            OFFSET(get<float>, {0x948, 4, 0, 0})
	DMember(float)                                     MinDamageHeight                                             OFFSET(get<float>, {0x94C, 4, 0, 0})
	DMember(float)                                     MaxDamageHeight                                             OFFSET(get<float>, {0x950, 4, 0, 0})
	DMember(float)                                     TextureWidth                                                OFFSET(get<float>, {0x954, 4, 0, 0})
	SMember(FLinearColor)                              HitColor                                                    OFFSET(getStruct<T>, {0x958, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.HitEffectIndicatorComponent.OnTakeDamage
	// void OnTakeDamage(class AActor* DamagedActor, float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser); // [0x183a0e0] Final|Native|Public  
	// Function /Script/Indiana.HitEffectIndicatorComponent.OnHit
	// void OnHit(float NormalizedAmount, float IncidentAngleRelativeToCameraDegrees);                                          // [0x1839f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.HitEffectIndicatorComponent.HitEffectIndicatorEnableDebugKeys
	// void HitEffectIndicatorEnableDebugKeys();                                                                                // [0x1839cf0] Final|Exec|Native|Public 
};

/// Struct /Script/Indiana.HitLocationChance
/// Size: 0x0028 (0x000000 - 0x000028)
class FHitLocationChance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayTagContainer)                     BodyParts                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	DMember(bool)                                      bWeakSpot                                                   OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/Indiana.HitLocationData
/// Size: 0x0010 (0x000038 - 0x000048)
class UHitLocationData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FHitLocationChance>)                HitLocations                                                OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.HitReactionStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UHitReactionStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(EHitReactType)                             HitReaction                                                 OFFSET(get<T>, {0x188, 1, 0, 0})
};

/// Class /Script/Indiana.HopeBotBehaviorStateInfo
/// Size: 0x0000 (0x000178 - 0x000178)
class UHopeBotBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
};

/// Class /Script/Indiana.HopeBotRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UHopeBotRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.HoverbotAnimInstance
/// Size: 0x0040 (0x000950 - 0x000990)
class UHoverbotAnimInstance : public UTPVAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2448;

public:
	CMember(TArray<class UAnimSequence*>)              LocomotionTurnInPlace                                       OFFSET(get<T>, {0x950, 16, 0, 0})
	CMember(TArray<class UAnimSequence*>)              CombatTurnInPlace                                           OFFSET(get<T>, {0x960, 16, 0, 0})
	DMember(float)                                     SlowingSpeed                                                OFFSET(get<float>, {0x970, 4, 0, 0})
	DMember(float)                                     StoredVelocityNormalX                                       OFFSET(get<float>, {0x974, 4, 0, 0})
	DMember(float)                                     StoredVelocityNormalY                                       OFFSET(get<float>, {0x978, 4, 0, 0})
	DMember(bool)                                      bSpeedIsSlowingDown                                         OFFSET(get<bool>, {0x97C, 1, 0, 0})
	SMember(FVector)                                   HeightSmooth                                                OFFSET(getStruct<T>, {0x980, 12, 0, 0})
	DMember(float)                                     IKStrength                                                  OFFSET(get<float>, {0x98C, 4, 0, 0})
};

/// Class /Script/Indiana.HUDWidget
/// Size: 0x00E8 (0x000308 - 0x0003F0)
class UHUDWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(class UCanvasPanel*)                       SafeSpaceCanvasPanel                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UReticleWidget*)                     Reticle                                                     OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UItemDegradationAlertWidget*)        ItemDegradation                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UCharacterOverviewWidget*)           CharacterOverview                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UCompanionOverviewWidget*)           CompanionOverview                                           OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UCompanionOverviewWidget*)           CompanionOverview1                                          OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTTDEnemyScanner*)                   EnemyScanner                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UAudioLogWidget*)                    AudioLogWidget                                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UAbilityOverviewWidget*)             AbilityOverview                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UAbilityOverviewWidget*)             AbilityOverviewGamepad                                      OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UQuestLogWidget*)                    QuestLog                                                    OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UGenericNotificationWidget*)         GenericLog                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UCompassWidget*)                     Compass                                                     OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UWeaponSelectWidget*)                WeaponSelect                                                OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UInputGuideWidget*)                  InteractionGuide                                            OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UAmmoReadoutWidget*)                 AmmoReadout                                                 OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UDisguiseMeterWidget*)               DisguiseWidget                                              OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class ULevelUpNotificationWidget*)         LevelUpNotification                                         OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UMapTransitionNotification*)         MapTransitionNotification                                   OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UItemContainerWidget*)               ItemContainerWidget                                         OFFSET(get<T>, {0x3A0, 8, 0, 0})
	DMember(float)                                     FlawDisplayDelay                                            OFFSET(get<float>, {0x3A8, 4, 0, 0})
	CMember(class UClass*)                             Flaw                                                        OFFSET(get<T>, {0x3B0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.HUDWidget.QueueLevelUpNotification
	// void QueueLevelUpNotification(int32_t NewLevel);                                                                         // [0x183a3b0] Final|Native|Protected 
	// Function /Script/Indiana.HUDWidget.GetCharacterOverview
	// class UCharacterOverviewWidget* GetCharacterOverview();                                                                  // [0x1839c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.HunkerDownBehaviorStateInfo
/// Size: 0x0000 (0x000128 - 0x000128)
class UHunkerDownBehaviorStateInfo : public UCompanionCommandTimedBehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.HunkerDownBehaviorRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UHunkerDownBehaviorRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.IdleBehaviorStateInfo
/// Size: 0x0018 (0x000120 - 0x000138)
class UIdleBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
};

/// Class /Script/Indiana.IdleRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UIdleRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.IdleCameraComponent
/// Size: 0x0060 (0x0002F0 - 0x000350)
class UIdleCameraComponent : public USpringArmComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	DMember(bool)                                      bEnableIfIdle                                               OFFSET(get<bool>, {0x2F0, 1, 0, 0})
	DMember(float)                                     SecondsToWait                                               OFFSET(get<float>, {0x2F4, 4, 0, 0})
	DMember(bool)                                      bRotateIndependentOfCharacter                               OFFSET(get<bool>, {0x2F8, 1, 0, 0})
	DMember(float)                                     IdleRotationSpeed                                           OFFSET(get<float>, {0x2FC, 4, 0, 0})
	CMember(class UIndianaInputComponent*)             IdleInputDetectionComponent                                 OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.ImageSectionWidget
/// Size: 0x0020 (0x000288 - 0x0002A8)
class UImageSectionWidget : public URadialSectionWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(class UPanelWidget*)                       Panel                                                       OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Indiana.ImmobilizeStatusEffect
/// Size: 0x0000 (0x000188 - 0x000188)
class UImmobilizeStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.ImmuneStatusEffect
/// Size: 0x0030 (0x000188 - 0x0001B8)
class UImmuneStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	SMember(FGameplayTagContainer)                     DisableTypes                                                OFFSET(getStruct<T>, {0x188, 32, 0, 0})
	CMember(class UClass*)                             OriginActorType                                             OFFSET(get<T>, {0x1A8, 8, 0, 0})
	DMember(bool)                                      bClearExistingEffects                                       OFFSET(get<bool>, {0x1B0, 1, 0, 0})
};

/// Struct /Script/Indiana.ImpactAudioDamageTypeOverlays
/// Size: 0x0050 (0x000000 - 0x000050)
class FImpactAudioDamageTypeOverlays : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<TSoftObjectPtr<UClass*>, class UAkAudioEvent*>) DamageTypeOverlays                                OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Class /Script/Indiana.ImpactAudioData
/// Size: 0x01F8 (0x000038 - 0x000230)
class UImpactAudioData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*>) ImpactAudioMap                              OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(class UAkAudioEvent*)                      DefaultCriticalOverlay                                      OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      DefaultGrazeOverlay                                         OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      DefaultWeakSpotOverlay                                      OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(TMap<TSoftObjectPtr<UClass*>, class UAkAudioEvent*>) DefaultDamageTypeOverlays                         OFFSET(get<T>, {0xA0, 80, 0, 0})
	CMember(TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*>) CriticalOverlayOverrides                    OFFSET(get<T>, {0xF0, 80, 0, 0})
	CMember(TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*>) GrazeOverlayOverrides                       OFFSET(get<T>, {0x140, 80, 0, 0})
	CMember(TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*>) WeakSpotOverlayOverrides                    OFFSET(get<T>, {0x190, 80, 0, 0})
	CMember(TMap<TEnumAsByte<EPhysicalSurface>, FImpactAudioDamageTypeOverlays>) DamageTypeOverlayOverrides        OFFSET(get<T>, {0x1E0, 80, 0, 0})
};

/// Struct /Script/Indiana.ImpactAIDataOverride
/// Size: 0x0004 (0x000000 - 0x000004)
class FImpactAIDataOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     AISoundRadius                                               OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Class /Script/Indiana.ImpactDataSet
/// Size: 0x0068 (0x000038 - 0x0000A0)
class UImpactDataSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(class UImpactFxData*)                      FxData                                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UImpactAudioData*)                   AudioData                                                   OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     AISoundRadius                                               OFFSET(get<float>, {0x48, 4, 0, 0})
	CMember(TMap<TEnumAsByte<EPhysicalSurface>, FImpactAIDataOverride>) ImpactAIDataOverrides                      OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Struct /Script/Indiana.ImpactParticle
/// Size: 0x0060 (0x000000 - 0x000060)
class FImpactParticle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UParticleSystem*)                    Fx                                                          OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     FxScale                                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bUseRotation                                                OFFSET(get<bool>, {0xC, 1, 0, 0})
	CMember(TMap<FName, float>)                        ChargeEmitterEnableThresholds                               OFFSET(get<T>, {0x10, 80, 0, 0})
};

/// Struct /Script/Indiana.ImpactFxEntry
/// Size: 0x0048 (0x000000 - 0x000048)
class FImpactFxEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FImpactParticle>)                   ImpactParticles                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(class UMaterialInterface*)                 Decal                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     DecalSizeMin                                                OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     DecalSizeMax                                                OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     DecalSizeMinClamp                                           OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     DecalSizeMaxClamp                                           OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     DecalDurationMin                                            OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     DecalDurationMax                                            OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     DecalFadeTimeMin                                            OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     DecalFadeTimeMax                                            OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     FadeScreenSize                                              OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     DecalDepth                                                  OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     NormalOffset                                                OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/Indiana.ImpactFxData
/// Size: 0x0050 (0x000038 - 0x000088)
class UImpactFxData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<TEnumAsByte<EPhysicalSurface>, FImpactFxEntry>) ImpactFxMap                                       OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Struct /Script/Indiana.AimTargets
/// Size: 0x0014 (0x000000 - 0x000014)
class FAimTargets : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ComponentTag                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Indiana.PropComponents
/// Size: 0x0018 (0x000000 - 0x000018)
class FPropComponents : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UMeshComponent*)                     PropMesh                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           PropParticleSystem                                          OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.IndianaCharacter
/// Size: 0x06C0 (0x000560 - 0x000C20)
class AIndianaCharacter : public ACharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3104;

public:
	SMember(FMulticastInlineDelegate)                  OnCauseDamage                                               OFFSET(getStruct<T>, {0x5E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  AnimNotifyParamsEvent                                       OFFSET(getStruct<T>, {0x758, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCombatStateChange                                         OFFSET(getStruct<T>, {0x790, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterDeath                                            OFFSET(getStruct<T>, {0x7D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemAdded                                                 OFFSET(getStruct<T>, {0x7E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemRemoved                                               OFFSET(getStruct<T>, {0x7F0, 16, 0, 0})
	CMember(class UClass*)                             OverrideDummyClass                                          OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(TArray<class UClass*>)                     ImmutableBlueprintComponents                                OFFSET(get<T>, {0x818, 16, 0, 0})
	DMember(float)                                     PostArmorDamageMultiplier                                   OFFSET(get<float>, {0x828, 4, 0, 0})
	DMember(float)                                     PostArmorDamageMultiplierReceived                           OFFSET(get<float>, {0x82C, 4, 0, 0})
	DMember(float)                                     CombatEffectApplyMultiplier                                 OFFSET(get<float>, {0x830, 4, 0, 0})
	DMember(bool)                                      bAlwaysAllowHighlight                                       OFFSET(get<bool>, {0x834, 1, 0, 0})
	SMember(FLogicalGroupedExpression)                 AutoStasisConditions                                        OFFSET(getStruct<T>, {0x838, 120, 0, 0})
	CMember(class USceneComponent*)                    GroundOffsetComponent                                       OFFSET(get<T>, {0x8B0, 8, 0, 0})
	CMember(class USpreadManagerComponent*)            SpreadManagerComponent                                      OFFSET(get<T>, {0x8B8, 8, 0, 0})
	CMember(class UDamageableComponent*)               DamageableComponent                                         OFFSET(get<T>, {0x8C0, 8, 0, 0})
	CMember(class UArmorComponent*)                    ArmorComponent                                              OFFSET(get<T>, {0x8C8, 8, 0, 0})
	CMember(class UStatusEffectManagerComponent*)      StatusEffectManagerComponent                                OFFSET(get<T>, {0x8D0, 8, 0, 0})
	CMember(class UTeamComponent*)                     TeamComponent                                               OFFSET(get<T>, {0x8D8, 8, 0, 0})
	CMember(class UCharacterInventoryComponent*)       InventoryComponent                                          OFFSET(get<T>, {0x8E0, 8, 0, 0})
	CMember(class UBlockComponent*)                    BlockComponent                                              OFFSET(get<T>, {0x8E8, 8, 0, 0})
	CMember(class UReactionComponent*)                 ReactionComponent                                           OFFSET(get<T>, {0x8F0, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x8F8, 8, 0, 0})
	CMember(class UEnvironmentInteractionComponent*)   EnvironmentComponent                                        OFFSET(get<T>, {0x900, 8, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x908, 8, 0, 0})
	CMember(class UClass*)                             AudioComponentClass                                         OFFSET(get<T>, {0x910, 8, 0, 0})
	CMember(class UTelemetryComponent*)                TelemetryComponent                                          OFFSET(get<T>, {0x918, 8, 0, 0})
	CMember(class USpellManagerComponent*)             SpellManagerComponent                                       OFFSET(get<T>, {0x920, 8, 0, 0})
	CMember(TArray<FAimTargets>)                       AimTargets                                                  OFFSET(get<T>, {0x928, 16, 0, 0})
	CMember(TMap<FString, FGameplayTag>)               ComponentNameToBodyPartTag                                  OFFSET(get<T>, {0x938, 80, 0, 0})
	CMember(class USkeletalMeshComponent*)             TPVMesh                                                     OFFSET(get<T>, {0x988, 8, 0, 0})
	CMember(class UIndianaCharMovementComponent*)      IndianaCharacterMovementComponent                           OFFSET(get<T>, {0x990, 8, 0, 0})
	CMember(class UHealthComponent*)                   HealthComponent                                             OFFSET(get<T>, {0x998, 8, 0, 0})
	CMember(class UDeathComponent*)                    DeathComponent                                              OFFSET(get<T>, {0x9A0, 8, 0, 0})
	CMember(class UEquipmentComponent*)                EquipmentComponent                                          OFFSET(get<T>, {0x9A8, 8, 0, 0})
	CMember(class URpgStatComponent*)                  RpgStatComponent                                            OFFSET(get<T>, {0x9B0, 8, 0, 0})
	CMember(class UCharacterInfoComponent*)            CharacterInfoComponent                                      OFFSET(get<T>, {0x9B8, 8, 0, 0})
	CMember(class UMeleeSlotManagerComponent*)         SlotManagerComponent                                        OFFSET(get<T>, {0x9C0, 8, 0, 0})
	CMember(class UConversationRegisterComponent*)     ConversationRegisterComponent                               OFFSET(get<T>, {0x9C8, 8, 0, 0})
	CMember(class ULocomotionLogicComponent*)          LocomotionLogicComponent                                    OFFSET(get<T>, {0x9D0, 8, 0, 0})
	CMember(class UTargetableComponent*)               TargetableComponent                                         OFFSET(get<T>, {0x9D8, 8, 0, 0})
	CMember(class UFaceFXComponent*)                   FaceFXComponent                                             OFFSET(get<T>, {0x9E0, 8, 0, 0})
	CMember(class UAppearanceComponent*)               AppearanceComponent                                         OFFSET(get<T>, {0x9E8, 8, 0, 0})
	CMember(class UIndianaAudioComponent*)             IndianaAudioComponent                                       OFFSET(get<T>, {0x9F0, 8, 0, 0})
	CMember(class UPetableComponent*)                  PetableComponent                                            OFFSET(get<T>, {0x9F8, 8, 0, 0})
	CMember(class UDifficultyRpgStatModifiers*)        DifficultyRpgStatModifiers                                  OFFSET(get<T>, {0xAA0, 8, 0, 0})
	DMember(float)                                     OutOfCombatCylinderRadiusScalar                             OFFSET(get<float>, {0xAC0, 4, 0, 0})
	CMember(class UTalkingIdleOverrideData*)           TalkingIdleOverrides                                        OFFSET(get<T>, {0xB98, 8, 0, 0})
	CMember(TArray<FPropComponents>)                   IdleMeshProps                                               OFFSET(get<T>, {0xBA0, 16, 0, 0})
	CMember(TArray<FPropComponents>)                   NonCombatMeshProps                                          OFFSET(get<T>, {0xBB0, 16, 0, 0})
	CMember(TArray<FPropComponents>)                   ForeverProps                                                OFFSET(get<T>, {0xBC0, 16, 0, 0})
	DMember(float)                                     CharacterScaleModifier                                      OFFSET(get<float>, {0xBD0, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCompanionOutline                                          OFFSET(getStruct<T>, {0xBE8, 16, 0, 0})
	SMember(FGameplayTag)                              CreatureType                                                OFFSET(getStruct<T>, {0xBF8, 8, 0, 0})
	SMember(FGameplayTag)                              CreatureRole                                                OFFSET(getStruct<T>, {0xC00, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaCharacter.UpdateOutlines
	// void UpdateOutlines();                                                                                                   // [0x18423e0] Final|Native|Public  
	// Function /Script/Indiana.IndianaCharacter.PlayWeaponEvent
	// void PlayWeaponEvent(FString WeaponEvent);                                                                               // [0x1842330] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaCharacter.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x18422b0] Native|Protected     
	// Function /Script/Indiana.IndianaCharacter.OnPreStateOfBeingChange
	// void OnPreStateOfBeingChange(EStateOfBeing StateOfBeing);                                                                // [0x1842230] Native|Protected     
	// Function /Script/Indiana.IndianaCharacter.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x1842160] Native|Protected     
	// Function /Script/Indiana.IndianaCharacter.OnLevelChanged
	// void OnLevelChanged(int32_t Level);                                                                                      // [0x18420d0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaCharacter.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty NewDifficulty);                                                                 // [0x1842030] Final|Native|Protected 
	// Function /Script/Indiana.IndianaCharacter.OnAttack
	// void OnAttack(float DurationScalar);                                                                                     // [0x1841df0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaCharacter.ItemRemoved
	// void ItemRemoved(FItemStack& Item);                                                                                      // [0x1841c80] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaCharacter.ItemAdded
	// void ItemAdded(FItemStack& Item);                                                                                        // [0x1841be0] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaCharacter.IsWeaponEquipped
	// bool IsWeaponEquipped(class UClass* WeaponClass);                                                                        // [0x1841b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.IsArmorEquipped
	// bool IsArmorEquipped(class UClass* ArmorClass);                                                                          // [0x1841aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.HasItem
	// bool HasItem(class UClass* Item);                                                                                        // [0x1841a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.GetStatusEffectManager
	// class UStatusEffectManagerComponent* GetStatusEffectManager();                                                           // [0x18419c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.GetItemQuantity
	// int32_t GetItemQuantity(class UClass* Item);                                                                             // [0x1841920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.GetEquipmentComponent
	// class UEquipmentComponent* GetEquipmentComponent();                                                                      // [0x1841900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.GetCurrentWeapon
	// class UWeapon* GetCurrentWeapon();                                                                                       // [0x18418d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaCharacter.ExecuteDeath
	// void ExecuteDeath(bool bFromReload);                                                                                     // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.IndianaCharacter.Died
	// void Died(FCauseDamageInfo& CDI);                                                                                        // [0x1841830] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaCharacter.DamageCaused
	// void DamageCaused(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x1841790] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.IndianaCharacter.CastSpellDebugTarget
	// void CastSpellDebugTarget(FString SpellName);                                                                            // [0x18416e0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaCharacter.CastSpellDebug
	// void CastSpellDebug(FString SpellName);                                                                                  // [0x1841630] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.IndianaAiCharacter
/// Size: 0x0248 (0x000C18 - 0x000E60)
class AIndianaAiCharacter : public AIndianaCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3680;

public:
	SMember(FMulticastInlineDelegate)                  OnDespawned                                                 OFFSET(getStruct<T>, {0xC18, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCompanionDismissed                                        OFFSET(getStruct<T>, {0xC50, 16, 0, 0})
	CMember(class UAIMovementComponent*)               AIMovementComponent                                         OFFSET(get<T>, {0xC68, 8, 0, 0})
	CMember(class UCompanionComponent*)                CompanionComponent                                          OFFSET(get<T>, {0xC70, 8, 0, 0})
	CMember(class UAISettingsComponent*)               AISettingsComponent                                         OFFSET(get<T>, {0xC78, 8, 0, 0})
	CMember(class UAIInteractionComponent*)            InteractionComponent                                        OFFSET(get<T>, {0xC80, 8, 0, 0})
	CMember(class UAiTargetingComponent*)              TargetingComponent                                          OFFSET(get<T>, {0xC88, 8, 0, 0})
	CMember(class UHeadAndBodyTrackingComponent*)      HeadAndBodyTrackingComponent                                OFFSET(get<T>, {0xC90, 8, 0, 0})
	CMember(class UPersonalSpaceComponent*)            PersonalSpaceComponent                                      OFFSET(get<T>, {0xC98, 8, 0, 0})
	CMember(class UCharacterShoutComponent*)           ShoutComponent                                              OFFSET(get<T>, {0xCA0, 8, 0, 0})
	CMember(class UAIDefensiveActionsComponent*)       DefensiveActionsComponent                                   OFFSET(get<T>, {0xCA8, 8, 0, 0})
	CMember(class UTPVAnimInstance*)                   AnimInstance                                                OFFSET(get<T>, {0xCB0, 8, 0, 0})
	CMember(class UTPVPersonalityCollection*)          Personality                                                 OFFSET(get<T>, {0xCB8, 8, 0, 0})
	DMember(bool)                                      bHasWeaponInNonCombat                                       OFFSET(get<bool>, {0xCC0, 1, 0, 0})
	SMember(FName)                                     EyeSocketName                                               OFFSET(getStruct<T>, {0xCC4, 8, 0, 0})
	SMember(FName)                                     AimOriginSocketName                                         OFFSET(getStruct<T>, {0xCCC, 8, 0, 0})
	DMember(float)                                     AimOriginVerticalOffset                                     OFFSET(get<float>, {0xCD4, 4, 0, 0})
	DMember(float)                                     CarryingCapacity                                            OFFSET(get<float>, {0xCD8, 4, 0, 0})
	DMember(bool)                                      bIsolated                                                   OFFSET(get<bool>, {0xCDC, 1, 0, 0})
	DMember(bool)                                      bShouldIgnorePlayerDamage                                   OFFSET(get<bool>, {0xCDD, 1, 0, 0})
	DMember(bool)                                      bIgnorePickpocketing                                        OFFSET(get<bool>, {0xCDE, 1, 0, 0})
	DMember(bool)                                      UseSplinePath                                               OFFSET(get<bool>, {0xD0D, 1, 0, 0})
	SMember(FName)                                     TrackedSocketOnRagdoll                                      OFFSET(getStruct<T>, {0xD4C, 8, 0, 0})
	DMember(float)                                     CharacterTeleportDistanceThreshold                          OFFSET(get<float>, {0xD54, 4, 0, 0})
	DMember(float)                                     RagdollSettleTime                                           OFFSET(get<float>, {0xD58, 4, 0, 0})
	DMember(float)                                     RagdollTurnOffMotorsTime                                    OFFSET(get<float>, {0xD5C, 4, 0, 0})
	DMember(float)                                     RagdollFreezeTime                                           OFFSET(get<float>, {0xD60, 4, 0, 0})
	DMember(float)                                     RagdollMaxSpeed                                             OFFSET(get<float>, {0xD64, 4, 0, 0})
	DMember(float)                                     DistanceToAlwaysEvaluateAnimations                          OFFSET(get<float>, {0xD70, 4, 0, 0})
	CMember(class UFaceFXActor*)                       FaceFXAssetNative                                           OFFSET(get<T>, {0xD88, 8, 0, 0})
	CMember(class USkeletalMesh*)                      FaceFXAuthoredSkeletonNative                                OFFSET(get<T>, {0xD90, 8, 0, 0})
	CMember(class UPoseAsset*)                         DefaultMaleEyePoseAsset                                     OFFSET(get<T>, {0xD98, 8, 0, 0})
	CMember(class UPoseAsset*)                         DefaultFemaleEyePoseAsset                                   OFFSET(get<T>, {0xDA0, 8, 0, 0})
	CMember(class UFaceFXActor*)                       DefaultMaleFaceFXActor                                      OFFSET(get<T>, {0xDA8, 8, 0, 0})
	CMember(class UFaceFXActor*)                       DefaultFemaleFaceFXActor                                    OFFSET(get<T>, {0xDB0, 8, 0, 0})
	CMember(class USkeletalMesh*)                      DefaultMaleFaceFXReferenceSkeleton                          OFFSET(get<T>, {0xDB8, 8, 0, 0})
	CMember(class USkeletalMesh*)                      DefaultFemaleFaceFXReferenceSkeleton                        OFFSET(get<T>, {0xDC0, 8, 0, 0})
	DMember(bool)                                      bCapsuleCollisionEnabled                                    OFFSET(get<bool>, {0xDC8, 1, 0, 0})
	CMember(class UEmotionData*)                       EmotionData                                                 OFFSET(get<T>, {0xDF0, 8, 0, 0})
	DMember(bool)                                      bHasDefaultEmotion                                          OFFSET(get<bool>, {0xDF8, 1, 0, 0})
	CMember(EEmotion)                                  DefaultEmotion                                              OFFSET(get<T>, {0xDF9, 1, 0, 0})
	DMember(bool)                                      bUseFactionReactionEmotions                                 OFFSET(get<bool>, {0xDFA, 1, 0, 0})
	CMember(EEmotion)                                  GoodReaction                                                OFFSET(get<T>, {0xDFB, 1, 0, 0})
	CMember(EEmotion)                                  NeutralReaction                                             OFFSET(get<T>, {0xDFC, 1, 0, 0})
	CMember(EEmotion)                                  BadReaction                                                 OFFSET(get<T>, {0xDFD, 1, 0, 0})
	DMember(bool)                                      bAllowStatusTag                                             OFFSET(get<bool>, {0xE48, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaAiCharacter.SetRagdoll
	// void SetRagdoll(bool bInIsRagdoll, bool bInstantFreeze);                                                                 // [0x183a4d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiCharacter.SetIsInLowGrav
	// void SetIsInLowGrav(bool bNewIsInLowGrav);                                                                               // [0x183a440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiCharacter.OnWeaponEndUnequip
	// void OnWeaponEndUnequip(class UWeapon* Weapon);                                                                          // [0x183a320] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiCharacter.OnWeaponEndEquip
	// void OnWeaponEndEquip(class UWeapon* Weapon);                                                                            // [0x183a290] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiCharacter.OnMontageEndDelegate
	// void OnMontageEndDelegate(class UAnimMontage* Montage, bool bInterrupted);                                               // [0x183a010] Final|Native|Public  
	// Function /Script/Indiana.IndianaAiCharacter.OnDamageEvent
	// void OnDamageEvent(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x1839ea0] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaAiCharacter.OnAlertStateChange
	// void OnAlertStateChange(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x1839d40] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiCharacter.OnActorHiddenChange
	// void OnActorHiddenChange(bool bIsHidden);                                                                                // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.IndianaAiCharacter.IsInCombat
	// bool IsInCombat();                                                                                                       // [0x1839d10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaAiCharacter.GetOwningController
	// class AIndianaAiController* GetOwningController();                                                                       // [0x1839cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaAiController
/// Size: 0x00E8 (0x0003C0 - 0x0004A8)
class AIndianaAiController : public AAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1192;

public:
	CMember(class UIndianaBehaviorTreeComponent*)      BehaviorTreeComponent                                       OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UDecisionTreeComponent*)             DecisionTreeComponent                                       OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UBehaviorStackComponent*)            BehaviorStackComponent                                      OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UTargetInfoComponent*)               TargetInfoComponent                                         OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UInterestComponent*)                 InterestComponent                                           OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UAIDetectionComponent*)              AIDetectionComponent                                        OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UIndianaAIPerceptionComponent*)      IndianaPerceptionComponent                                  OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UIndianaPathFollowingComponent*)     IndianaPathFollowingComponent                               OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UClass*)                             DefaultNavigationBehaviorFilterClass                        OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UClass*)                             DefaultNavigationEQSFilterClass                             OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UAIDecisionUpdate*)                  CustomUpdateObject                                          OFFSET(get<T>, {0x490, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaAiController.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x183f760] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.IndianaAiController.OnSwitchedTarget
	// void OnSwitchedTarget(class AActor* OldTarget, class AActor* NewTarget, bool bRestoring);                                // [0x183f650] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiController.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x183f380] Native|Protected     
	// Function /Script/Indiana.IndianaAiController.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x183f120] Native|Protected     
	// Function /Script/Indiana.IndianaAiController.OnMeleeActionEnd
	// void OnMeleeActionEnd(EMeleeAction ActionEnded);                                                                         // [0x183f010] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiController.OnCombatStateChange
	// void OnCombatStateChange(bool bInCombat, bool bRestoring);                                                               // [0x183e910] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiController.OnBehaviorStateChange
	// void OnBehaviorStateChange(class UBehaviorStateInfo* OldBehaviorStateInfo, class UBehaviorStateInfo* NewBehaviorStateInfo); // [0x183e600] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAiController.GetSightAwarenessIncreaseRate
	// float GetSightAwarenessIncreaseRate(bool bIsStealthed, int32_t OwnerPerceptionSkill, int32_t TargetSneakSkill, EAlertState InAlertState, float Distance, float SightRadius, bool bAllowTargeting); // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaAiController.GetSightAwarenessDecreaseRate
	// float GetSightAwarenessDecreaseRate(bool bIsStealthed, int32_t OwnerPerceptionSkill, int32_t TargetSneakSkill, EAlertState InAlertState, bool bLost, bool bDeadBodyKiller); // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaAiController.GetFootstepAwarenessIncrease
	// float GetFootstepAwarenessIncrease(bool bIsStealthed, int32_t OwnerPerceptionSkill, int32_t TargetSneakSkill, EAlertState InAlertState, float BaseFootstepAwareness, float Distance, float SoundRadius); // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaAiController.GetCurrentTargetDistance
	// float GetCurrentTargetDistance();                                                                                        // [0x183e530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaAiController.AIScriptWander
	// void AIScriptWander(class AIndianaAiCharacter* InCharacter);                                                             // [0x183e440] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptPatrolInterruptible
	// void AIScriptPatrolInterruptible(class AIndianaAiCharacter* InCharacter, class APatrolNode* InPatrolNode);               // [0x183e380] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptPatrol
	// void AIScriptPatrol(class AIndianaAiCharacter* InCharacter, class APatrolNode* InPatrolNode);                            // [0x183e2c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptIdle
	// void AIScriptIdle(class AIndianaAiCharacter* InCharacter);                                                               // [0x183e240] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptFollowPlayer
	// void AIScriptFollowPlayer(class AIndianaAiCharacter* InCharacter);                                                       // [0x183e1c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptEncounterAttackEncounter
	// void AIScriptEncounterAttackEncounter(class AEncounter* InEncounter, class AEncounter* InTargetEncounter);               // [0x183e100] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptEncounterAttack
	// void AIScriptEncounterAttack(class AIndianaAiCharacter* InCharacter, class AEncounter* InTargetEncounter);               // [0x183e040] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptClearScripts
	// void AIScriptClearScripts(class AIndianaAiCharacter* InCharacter);                                                       // [0x183dfc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptCharactersAttackCharacters
	// void AIScriptCharactersAttackCharacters(TArray<AIndianaAiCharacter*> InCharacters, TArray<AIndianaAiCharacter*> InTargetCharacters); // [0x183de50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptAttackEncounter
	// void AIScriptAttackEncounter(class AEncounter* InEncounter, class AIndianaCharacter* InTargetCharacter);                 // [0x183dd90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaAiController.AIScriptAttack
	// void AIScriptAttack(class AIndianaAiCharacter* InCharacter, class AIndianaCharacter* InTargetCharacter);                 // [0x183dcd0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaAIPerceptionComponent
/// Size: 0x0060 (0x0001C0 - 0x000220)
class UIndianaAIPerceptionComponent : public UAIPerceptionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(class UAISenseConfig_Sight*)               OutOfCombatInteriorSightConfig                              OFFSET(get<T>, {0x1E0, 8, 0, 0})
	CMember(class UAISenseConfig_Sight*)               OutOfCombatExteriorSightConfig                              OFFSET(get<T>, {0x1E8, 8, 0, 0})
	CMember(class UAISenseConfig_Sight*)               InCombatSightConfig                                         OFFSET(get<T>, {0x1F0, 8, 0, 0})
	DMember(float)                                     InCombatHearingRangeScalar                                  OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     OutOfCombatInteriorHearingRangeScalar                       OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     OutOfCombatExteriorHearingRangeScalar                       OFFSET(get<float>, {0x210, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x183f5a0] Final|Native|Private 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnPerceptionRangeScalarUpdated
	// void OnPerceptionRangeScalarUpdated(FGameplayTagContainer& CreatureType);                                                // [0x183f2c0] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnGodVisionChanged
	// void OnGodVisionChanged(bool bGodVision);                                                                                // [0x183ee00] Final|Native|Private 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bIsInCombat, bool bRestoring);                                                            // [0x183e9e0] Final|Native|Private 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnCharacterDeath
	// void OnCharacterDeath(class AActor* Instigator, FCauseDamageInfo& CauseDamageInfo);                                      // [0x183e6f0] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaAIPerceptionComponent.OnBehaviorTreeInitialized
	// void OnBehaviorTreeInitialized();                                                                                        // [0x183e6d0] Final|Native|Private 
};

/// Class /Script/Indiana.IndianaAIPerceptionSystem
/// Size: 0x0078 (0x000138 - 0x0001B0)
class UIndianaAIPerceptionSystem : public UAIPerceptionSystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
};

/// Class /Script/Indiana.IndianaAISense_Hearing
/// Size: 0x0000 (0x0000F0 - 0x0000F0)
class UIndianaAISense_Hearing : public UAISense_Hearing
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
};

/// Class /Script/Indiana.IndianaAISense_Sight
/// Size: 0x0000 (0x000180 - 0x000180)
class UIndianaAISense_Sight : public UAISense_Sight
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
};

/// Class /Script/Indiana.IndianaAISystem
/// Size: 0x0000 (0x000138 - 0x000138)
class UIndianaAISystem : public UAISystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
};

/// Struct /Script/Indiana.AudioState
/// Size: 0x0014 (0x000000 - 0x000014)
class FAudioState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FName)                                     StateName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     StateValue                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.IndianaAkAmbientVolume
/// Size: 0x0080 (0x000358 - 0x0003D8)
class AIndianaAkAmbientVolume : public ATriggerVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 984;

public:
	CMember(TArray<class UAkAudioEvent*>)              AmbientEvents                                               OFFSET(get<T>, {0x358, 16, 0, 0})
	DMember(bool)                                      bUsePriority                                                OFFSET(get<bool>, {0x368, 1, 0, 0})
	DMember(uint32_t)                                  Priority                                                    OFFSET(get<uint32_t>, {0x36C, 4, 0, 0})
	DMember(float)                                     FadeOutTime                                                 OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     FadeInTime                                                  OFFSET(get<float>, {0x374, 4, 0, 0})
	CMember(TArray<FAudioState>)                       AudioStates                                                 OFFSET(get<T>, {0x378, 16, 0, 0})
};

/// Class /Script/Indiana.IndianaAkAmbientSpatialVolume
/// Size: 0x0018 (0x0003D8 - 0x0003F0)
class AIndianaAkAmbientSpatialVolume : public AIndianaAkAmbientVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(class UAkSurfaceReflectorSetComponent*)    SurfaceReflectorSet                                         OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UAkLateReverbComponent*)             LateReverb                                                  OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UAkRoomComponent*)                   Room                                                        OFFSET(get<T>, {0x3E8, 8, 0, 0})
};

/// Class /Script/Indiana.IndianaAnimNotify_FootPlace
/// Size: 0x0018 (0x000040 - 0x000058)
class UIndianaAnimNotify_FootPlace : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     IKChainName                                                 OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(float)                                     LerpInTime                                                  OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     SolidTime                                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     LerpOutTime                                                 OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(bool)                                      TriggerFootPlace                                            OFFSET(get<bool>, {0x54, 1, 0, 0})
	CMember(EFootID)                                   FootID                                                      OFFSET(get<T>, {0x55, 1, 0, 0})
};

/// Struct /Script/Indiana.AttributeStatModifierDescription
/// Size: 0x0020 (0x000010 - 0x000030)
class FAttributeStatModifierDescription : public FStatModifierDescriptionBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     AttributeStatValues                                         OFFSET(get<float>, {0x10, 28, 0, 0})
	DMember(int32_t)                                   ShowInUIAtValue                                             OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Class /Script/Indiana.IndianaAttribute
/// Size: 0x0010 (0x000030 - 0x000040)
class UIndianaAttribute : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FAttributeStatModifierDescription>) AttributeRpgStatMods                                        OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.StrengthAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UStrengthAttribute : public UIndianaAttribute
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.DexterityAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UDexterityAttribute : public UIndianaAttribute
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.EnduranceAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UEnduranceAttribute : public UIndianaAttribute
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.IntelligenceAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UIntelligenceAttribute : public UIndianaAttribute
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.PerceptionAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UPerceptionAttribute : public UIndianaAttribute
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.WillpowerAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UWillpowerAttribute : public UIndianaAttribute
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.CharmAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UCharmAttribute : public UIndianaAttribute
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.WitsAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UWitsAttribute : public UIndianaAttribute
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.TemperamentAttribute
/// Size: 0x0000 (0x000040 - 0x000040)
class UTemperamentAttribute : public UIndianaAttribute
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.IndianaAttributes
/// Size: 0x0048 (0x000030 - 0x000078)
class UIndianaAttributes : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UClass*)                             AttributeImplementations                                    OFFSET(get<T>, {0x30, 72, 0, 0})
};

/// Class /Script/Indiana.IndianaDefaultButtonAudioData
/// Size: 0x0048 (0x000038 - 0x000080)
class UIndianaDefaultButtonAudioData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UAkAudioEvent*)                      ButtonPressedSound                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      ButtonHoveredSound                                          OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      ButtonFocusedSound                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      ButtonSelectedPressedSound                                  OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      ButtonSelectedHoveredSound                                  OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      ButtonSelectedFocusedSound                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      SliderHoveredSound                                          OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      SliderFocusedSound                                          OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      SliderStepSound                                             OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Struct /Script/Indiana.LandAudioEvent
/// Size: 0x0018 (0x000000 - 0x000018)
class FLandAudioEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bHasMinDistance                                             OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     MinDistance                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bHasMaxDistance                                             OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(class UAkPlaySoundEventEffect*)            Event                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Indiana.IndianaAudioComponent
/// Size: 0x01A0 (0x0000E0 - 0x000280)
class UIndianaAudioComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	SMember(FName)                                     CreatureType                                                OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	CMember(TMap<ECharacterAudioEvent, class UAkPlaySoundEventEffect*>) CharacterAudioEvents                       OFFSET(get<T>, {0xF0, 80, 0, 0})
	CMember(TMap<ECharacterMovementAudioEvents, class UAkPlaySoundEventEffect*>) CharacterMovementAudioEvents      OFFSET(get<T>, {0x140, 80, 0, 0})
	CMember(TArray<FLandAudioEvent>)                   LandEvents                                                  OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(class UAkAudioEvent*)                      FootstepEventOverride                                       OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(class UFootstepAudio*)                     CurrentFootstepAudio                                        OFFSET(get<T>, {0x1A8, 8, 0, 0})
	SMember(FEventEffectState)                         EventEffectState                                            OFFSET(getStruct<T>, {0x1E8, 32, 0, 0})
	CMember(class UAnimationAudioSet*)                 AnimationAudioSet                                           OFFSET(get<T>, {0x208, 8, 0, 0})
	SMember(FGameplayTag)                              CurrentHeadStylePostProcess                                 OFFSET(getStruct<T>, {0x268, 8, 0, 0})
	DMember(bool)                                      bCanUseExplicitPostProcess                                  OFFSET(get<bool>, {0x270, 1, 0, 0})
	SMember(FGameplayTag)                              CurrentExplicitPostProcess                                  OFFSET(getStruct<T>, {0x274, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaAudioComponent.OnStopClimb
	// void OnStopClimb();                                                                                                      // [0x183f630] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAudioComponent.OnStartClimb
	// void OnStartClimb();                                                                                                     // [0x183f580] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAudioComponent.OnSpecialMovementEvent
	// void OnSpecialMovementEvent(ESpecialMovementEvent SpecialEvent, FVector& Position, FVector& Normal, TEnumAsByte<EPhysicalSurface> PhysMaterial); // [0x183f400] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaAudioComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x183f1f0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAudioComponent.OnNewFootstepData
	// void OnNewFootstepData(class UFootstepData* NewData);                                                                    // [0x183f090] Final|Native|Protected 
	// Function /Script/Indiana.IndianaAudioComponent.OnLanded
	// void OnLanded(float FallDistance, FVector& Position, FVector& Normal, TEnumAsByte<EPhysicalSurface> PhysMaterial);       // [0x183ee90] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaAudioComponent.OnFootstep
	// void OnFootstep(EFootID FootID, EFootstepType FootstepType, FVector& Position, FVector& Normal, TEnumAsByte<EPhysicalSurface> PhysMaterial); // [0x183ec30] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaAudioComponent.OnDodge
	// void OnDodge(EDodgeDirection Direction, FVector& Position, FVector& Normal, TEnumAsByte<EPhysicalSurface> PhysMaterial); // [0x183eab0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaAudioComponent.OnCharacterMovementUpdated
	// void OnCharacterMovementUpdated(float DeltaSeconds, FVector OldLocation, FVector OldVelocity);                           // [0x183e7e0] Final|Native|Protected|HasDefaults 
};

/// Class /Script/Indiana.IndianaAutoPlayer
/// Size: 0x0000 (0x000030 - 0x000030)
class UIndianaAutoPlayer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.IndianaAutoPlayer.StopAutoPlayer
	// void StopAutoPlayer();                                                                                                   // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaAutoPlayer.StartAutoPlayer
	// void StartAutoPlayer();                                                                                                  // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaAutoPlayer.OnAsyncSaveComplete
	// void OnAsyncSaveComplete(ESaveGameResult Result, ESaveGameType SaveType);                                                // [0x1841d20] Final|Native|Protected 
};

/// Struct /Script/Indiana.AutoConsoleCommandProperties
/// Size: 0x0028 (0x000000 - 0x000028)
class FAutoConsoleCommandProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      bEnable                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bTriggerRegularly                                           OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(float)                                     ExecuteWaitTime                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bTriggerAfterTravel                                         OFFSET(get<bool>, {0x8, 1, 0, 0})
	SMember(FString)                                   Command                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Indiana.AutoRandomInputProperties
/// Size: 0x0050 (0x000000 - 0x000050)
class FAutoRandomInputProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(bool)                                      bEnable                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FKey)                                      Key                                                         OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(bool)                                      bAxis                                                       OFFSET(get<bool>, {0x20, 1, 0, 0})
	DMember(float)                                     MinAxisDeltaSpeed                                           OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     MaxAxisDeltaSpeed                                           OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(bool)                                      bHold                                                       OFFSET(get<bool>, {0x2C, 1, 0, 0})
	DMember(float)                                     MinHoldTime                                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     MaxHoldTime                                                 OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     MinTriggerTime                                              OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     MaxTriggerTime                                              OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/Indiana.IndianaAutoPlayerTestSettings
/// Size: 0x01A8 (0x000040 - 0x0001E8)
class UIndianaAutoPlayerTestSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
	DMember(bool)                                      bUseFixedRandomSeed                                         OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(int32_t)                                   FixedRandomSeed                                             OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(bool)                                      bUsedFixedPlaythroughID                                     OFFSET(get<bool>, {0x48, 1, 0, 0})
	SMember(FGuid)                                     FixedPlaythroughGuid                                        OFFSET(getStruct<T>, {0x4C, 16, 0, 0})
	DMember(float)                                     DeltaTimeCap                                                OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(bool)                                      bDisableTimeCapIfLowFramerate                               OFFSET(get<bool>, {0x60, 1, 0, 0})
	DMember(int32_t)                                   DisableTimeCapFrameCount                                    OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(bool)                                      bDisablePlayerIdleCamera                                    OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(bool)                                      bAutoOpenNearbyDoors                                        OFFSET(get<bool>, {0x69, 1, 0, 0})
	DMember(bool)                                      bEnableTutorials                                            OFFSET(get<bool>, {0x6A, 1, 0, 0})
	CMember(TArray<TWeakObjectPtr<UWorld*>>)           TestLevels                                                  OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(bool)                                      bEnableTraveling                                            OFFSET(get<bool>, {0x80, 1, 0, 0})
	DMember(float)                                     MinTravelTime                                               OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     MaxTravelTime                                               OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(bool)                                      bAllowTravelingToCurrentMap                                 OFFSET(get<bool>, {0x8C, 1, 0, 0})
	DMember(bool)                                      bCanReturnToMainMenu                                        OFFSET(get<bool>, {0x8D, 1, 0, 0})
	DMember(float)                                     ChanceToReturnToMenu                                        OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     MainMenuSoakTime                                            OFFSET(get<float>, {0x94, 4, 0, 0})
	DMember(bool)                                      bTakeTransitions                                            OFFSET(get<bool>, {0x98, 1, 0, 0})
	DMember(float)                                     ChanceToTakeTransition                                      OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(bool)                                      bAllowTransitionsEvenIfNotInList                            OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      bEnableQuickSaveLoad                                        OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(bool)                                      bOnlyLoadQuickSavesMadeOnCurrentMap                         OFFSET(get<bool>, {0xA2, 1, 0, 0})
	DMember(float)                                     MinQuickSaveWaitTime                                        OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     MaxQuickSaveWaitTime                                        OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     MinQuickLoadWaitTime                                        OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     MaxQuickLoadWaitTime                                        OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(bool)                                      bGhost                                                      OFFSET(get<bool>, {0xB4, 1, 0, 0})
	DMember(bool)                                      bEnableRandomPathing                                        OFFSET(get<bool>, {0xB5, 1, 0, 0})
	DMember(float)                                     PathingNewLocationRadius                                    OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     PathingNewLocationHeightVariance                            OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(bool)                                      bFaceAlongPath                                              OFFSET(get<bool>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bTeleportIfStuckPathing                                     OFFSET(get<bool>, {0xC1, 1, 0, 0})
	DMember(float)                                     PathingStuckTeleportRadius                                  OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     PathingVisitedTileSize                                      OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     PathingGoalProjectionExtents                                OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     PathingVisitingRadius                                       OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(bool)                                      bAllowControlRotationSnapping                               OFFSET(get<bool>, {0xD4, 1, 0, 0})
	DMember(float)                                     MinSnapRotationWaitTime                                     OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     MaxSnapRotationWaitTime                                     OFFSET(get<float>, {0xDC, 4, 0, 0})
	SMember(FVector)                                   SnapRotationAxis                                            OFFSET(getStruct<T>, {0xE0, 12, 0, 0})
	DMember(float)                                     MinSnapRotationAmount                                       OFFSET(get<float>, {0xEC, 4, 0, 0})
	DMember(float)                                     MaxSnapRotationAmount                                       OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(bool)                                      bEnableTeleporting                                          OFFSET(get<bool>, {0xF4, 1, 0, 0})
	DMember(bool)                                      bTeleportPlaceOnGround                                      OFFSET(get<bool>, {0xF5, 1, 0, 0})
	DMember(float)                                     TeleportHeight                                              OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(bool)                                      bAllowTeleportingUnderground                                OFFSET(get<bool>, {0xFC, 1, 0, 0})
	DMember(float)                                     TeleportNewLocationDistance                                 OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     MinTeleportWaitTime                                         OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     MaxTeleportWaitTime                                         OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(bool)                                      bGodMode                                                    OFFSET(get<bool>, {0x10C, 1, 0, 0})
	DMember(bool)                                      bPseudoGod                                                  OFFSET(get<bool>, {0x10D, 1, 0, 0})
	DMember(bool)                                      bResurrect                                                  OFFSET(get<bool>, {0x10E, 1, 0, 0})
	DMember(bool)                                      bInfiniteAmmo                                               OFFSET(get<bool>, {0x10F, 1, 0, 0})
	DMember(bool)                                      bOneShotKills                                               OFFSET(get<bool>, {0x110, 1, 0, 0})
	DMember(bool)                                      bAttackAI                                                   OFFSET(get<bool>, {0x111, 1, 0, 0})
	DMember(float)                                     MaximumAttackDistance                                       OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(bool)                                      bOnlyAttackEnemies                                          OFFSET(get<bool>, {0x118, 1, 0, 0})
	DMember(float)                                     MinAttackWaitTime                                           OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     MaxAttackWaitTime                                           OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(bool)                                      bEnableWeaponSwapping                                       OFFSET(get<bool>, {0x124, 1, 0, 0})
	DMember(float)                                     MinWeaponSwapWaitTime                                       OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     MaxWeaponSwapWaitTime                                       OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(bool)                                      bEnableArmorSwapping                                        OFFSET(get<bool>, {0x130, 1, 0, 0})
	DMember(float)                                     MinArmorSwapWaitTime                                        OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     MaxArmorSwapWaitTime                                        OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(bool)                                      bEnableScreenshots                                          OFFSET(get<bool>, {0x13C, 1, 0, 0})
	DMember(float)                                     ScreenshotRate                                              OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(int32_t)                                   NumberOfScreenshotsToKeep                                   OFFSET(get<int32_t>, {0x144, 4, 0, 0})
	SMember(FDirectoryPath)                            ScreenshotDirectoryOverride                                 OFFSET(getStruct<T>, {0x148, 16, 0, 0})
	DMember(bool)                                      bEnableMemoryInfoLogging                                    OFFSET(get<bool>, {0x158, 1, 0, 0})
	DMember(float)                                     MemoryInfoLogRate                                           OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(bool)                                      bLogMemoryInfoOnMapLoad                                     OFFSET(get<bool>, {0x160, 1, 0, 0})
	DMember(bool)                                      bConsoleCommandsEnabled                                     OFFSET(get<bool>, {0x161, 1, 0, 0})
	CMember(TArray<FAutoConsoleCommandProperties>)     ConsoleCommandProperties                                    OFFSET(get<T>, {0x168, 16, 0, 0})
	DMember(bool)                                      bInfoTrackingEnabled                                        OFFSET(get<bool>, {0x178, 1, 0, 0})
	DMember(float)                                     InfoTrackingRate                                            OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(bool)                                      bAddReportTimeColumn                                        OFFSET(get<bool>, {0x180, 1, 0, 0})
	DMember(bool)                                      bAddEngineRuntimeColumn                                     OFFSET(get<bool>, {0x181, 1, 0, 0})
	DMember(bool)                                      bAddTestRuntimeColumn                                       OFFSET(get<bool>, {0x182, 1, 0, 0})
	DMember(bool)                                      bAddCurrentMapColumn                                        OFFSET(get<bool>, {0x183, 1, 0, 0})
	DMember(bool)                                      bAddReportTimeAndMapColumn                                  OFFSET(get<bool>, {0x184, 1, 0, 0})
	DMember(bool)                                      bAddEngineRuntimeAndMapColumn                               OFFSET(get<bool>, {0x185, 1, 0, 0})
	DMember(bool)                                      bAddRuntimeAndMapColumn                                     OFFSET(get<bool>, {0x186, 1, 0, 0})
	DMember(bool)                                      bAddPlayerLocationColumn                                    OFFSET(get<bool>, {0x187, 1, 0, 0})
	DMember(bool)                                      bTrackRenderTargetPoolUsage                                 OFFSET(get<bool>, {0x188, 1, 0, 0})
	DMember(bool)                                      bTrackAudioMemoryUsage                                      OFFSET(get<bool>, {0x189, 1, 0, 0})
	DMember(bool)                                      bTrackMemoryUsageInformation                                OFFSET(get<bool>, {0x18A, 1, 0, 0})
	DMember(bool)                                      bTrackMemoryStatInformation                                 OFFSET(get<bool>, {0x18B, 1, 0, 0})
	DMember(bool)                                      bTrackTextureStreamingInformation                           OFFSET(get<bool>, {0x18C, 1, 0, 0})
	DMember(bool)                                      bTryToFilterStatErrors                                      OFFSET(get<bool>, {0x18D, 1, 0, 0})
	CMember(TArray<FString>)                           StatsToTrack                                                OFFSET(get<T>, {0x190, 16, 0, 0})
	DMember(bool)                                      bGenerateMemoryReports                                      OFFSET(get<bool>, {0x1A0, 1, 0, 0})
	CMember(TArray<FString>)                           MemoryReportCommands                                        OFFSET(get<T>, {0x1A8, 16, 0, 0})
	DMember(float)                                     MemoryPeakIncreaseReportThreshold                           OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(float)                                     MemoryUtilizationReportThreshold                            OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     ExtraMemoryUtilizationReportAmount                          OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(float)                                     TexturePoolUtilizationReportThreadhold                      OFFSET(get<float>, {0x1C4, 4, 0, 0})
	DMember(float)                                     ExtraTexturePoolUtilizationReportAmount                     OFFSET(get<float>, {0x1C8, 4, 0, 0})
	DMember(float)                                     UtilizationReportThresholdResetTime                         OFFSET(get<float>, {0x1CC, 4, 0, 0})
	DMember(float)                                     TexturePoolOverBudgetReportRate                             OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(bool)                                      bInputEnabled                                               OFFSET(get<bool>, {0x1D4, 1, 0, 0})
	CMember(TArray<FAutoRandomInputProperties>)        RandomInputKeyProperties                                    OFFSET(get<T>, {0x1D8, 16, 0, 0})
};

/// Class /Script/Indiana.IndianaAvoidanceManager
/// Size: 0x0068 (0x0000E8 - 0x000150)
class UIndianaAvoidanceManager : public UAvoidanceManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	DMember(int32_t)                                   AvoidanceSweepMaxSampleCount                                OFFSET(get<int32_t>, {0xF0, 4, 0, 0})
	DMember(float)                                     AvoidanceSweepDeltaAngle                                    OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     AvoidanceSweepMinDeltaAngleFromDesiredVelocity              OFFSET(get<float>, {0xF8, 4, 0, 0})
};

/// Class /Script/Indiana.IndianaBehaviorTreeComponent
/// Size: 0x0050 (0x0002C8 - 0x000318)
class UIndianaBehaviorTreeComponent : public UBehaviorTreeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UClass*)                             GlobalParamsType                                            OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UBehaviorTreeGlobalParams*)          GlobalParams                                                OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.IndianaBossBar
/// Size: 0x0080 (0x000300 - 0x000380)
class UIndianaBossBar : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	DMember(float)                                     FadeInTime                                                  OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     FadeOutTime                                                 OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     DamageDealtDelayTime                                        OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     DamageDealtFadeTime                                         OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     DamageDealtMinOffset                                        OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     DamageDealtMaxOffset                                        OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(int32_t)                                   HealthBarWidth                                              OFFSET(get<int32_t>, {0x318, 4, 0, 0})
	DMember(float)                                     HealthBarTipOffset                                          OFFSET(get<float>, {0x31C, 4, 0, 0})
	SMember(FName)                                     HealthBarFillName                                           OFFSET(getStruct<T>, {0x320, 8, 0, 0})
	CMember(class UStatusEffectTagWidget*)             StatusEffectTag                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UVerticalBox*)                       MainVerticalBox                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             DamageBar                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             HealthBar                                                   OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UImage*)                             Tip                                                         OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     BossNameTextBlock                                           OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           DamageBarMaterial                                           OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           HealthBarMaterial                                           OFFSET(get<T>, {0x360, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaBossBar.OnEndBossFight
	// void OnEndBossFight();                                                                                                   // [0x18420b0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaBossBar.OnBossHealthChanged
	// void OnBossHealthChanged(float NormalizedHealth);                                                                        // [0x1841fb0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaBossBar.OnBeginBossFight
	// void OnBeginBossFight(class AIndianaCharacter* OwnerCharacter, FString BossName, float StartingNormalizedHealth);        // [0x1841e70] Final|Native|Protected 
	// Function /Script/Indiana.IndianaBossBar.GetShowAnimation
	// class UWidgetAnimation* GetShowAnimation();                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaBossBar.GetHideAnimation
	// class UWidgetAnimation* GetHideAnimation();                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.IndianaCharacterDummy
/// Size: 0x00B0 (0x000560 - 0x000610)
class AIndianaCharacterDummy : public ACharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1552;

public:
	DMember(bool)                                      bAllowUnderKillPlane                                        OFFSET(get<bool>, {0x568, 1, 0, 0})
	DMember(bool)                                      bMakeTickableWhenPaused                                     OFFSET(get<bool>, {0x569, 1, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   DefaultFidgets                                              OFFSET(get<T>, {0x570, 16, 0, 0})
	CMember(TMap<EUISelectionState, class UAnimSequence*>) UIDummyAnimData                                         OFFSET(get<T>, {0x580, 80, 0, 0})
	CMember(class USceneComponent*)                    GroundOffsetComponent                                       OFFSET(get<T>, {0x5D0, 8, 0, 0})
	CMember(class UEquipmentComponent*)                EquipmentComponent                                          OFFSET(get<T>, {0x5D8, 8, 0, 0})
	CMember(class UAppearanceComponent*)               AppearanceComponent                                         OFFSET(get<T>, {0x5E0, 8, 0, 0})
	CMember(class UWeapon*)                            PendingWeapon                                               OFFSET(get<T>, {0x5E8, 8, 0, 0})
	CMember(EUISelectionState)                         UISelectionState                                            OFFSET(get<T>, {0x5F0, 1, 0, 0})
	DMember(bool)                                      bShowWeapon                                                 OFFSET(get<bool>, {0x5F3, 1, 0, 0})
	CMember(TArray<FPropComponents>)                   Props                                                       OFFSET(get<T>, {0x5F8, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaCharacterDummy.SetUISelectionState
	// void SetUISelectionState(EUISelectionState InSelectionState);                                                            // [0x1846c80] Native|Event|Public|BlueprintEvent 
	// Function /Script/Indiana.IndianaCharacterDummy.OnWeaponEndEquip
	// void OnWeaponEndEquip(class UWeapon* Weapon);                                                                            // [0x1846b60] Final|Native|Protected 
	// Function /Script/Indiana.IndianaCharacterDummy.CopyFromCharacter
	// void CopyFromCharacter(class AIndianaCharacter* Character);                                                              // [0x1845f80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaCheatManager
/// Size: 0x0000 (0x000090 - 0x000090)
class UIndianaCheatManager : public UCheatManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/Indiana.IndianaCheatManager.SetLevelNPC
	// void SetLevelNPC(int32_t NewLevel);                                                                                      // [0x1846bf0] Exec|Native|Public   
	// Function /Script/Indiana.IndianaCheatManager.LootTableDebug
	// void LootTableDebug(FString LootTable, int32_t NumTimes);                                                                // [0x18468d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaCheatManager.GivePlayerAllItems
	// void GivePlayerAllItems();                                                                                               // [0x1846890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaCheatManager.DropAllItemsDebug
	// void DropAllItemsDebug(bool bSplitStacks);                                                                               // [0x18460d0] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.IndianaDamageType
/// Size: 0x0068 (0x000048 - 0x0000B0)
class UIndianaDamageType : public UDamageType
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(EIndianaDamageType)                        Type                                                        OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(class UTexture2D*)                         Texture                                                     OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	DMember(int32_t)                                   DeathPriority                                               OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	CMember(class URpgStat*)                           ReceiveDamageStat                                           OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UClass*)                             DeathSpellStatusEffect                                      OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UClass*)                             DeathSpell                                                  OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UClass*)                             OnHitSpell                                                  OFFSET(get<T>, {0x88, 8, 0, 0})
	DMember(float)                                     OnHitSpellChance                                            OFFSET(get<float>, {0x90, 4, 0, 0})
	CMember(class URpgStat*)                           SpellChanceStat                                             OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(TArray<EDLCFlags>)                         DLCFlags                                                    OFFSET(get<T>, {0xA0, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaDamageType.TriggerMuzzleFx
	// void TriggerMuzzleFx(class USceneComponent* AttachComponent, bool IsFirstPerson);                                        // [0x1c5deb0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaDamageType.SetupSecondaryImpactFx
	// void SetupSecondaryImpactFx(class UParticleSystemComponent* ParentEffect, bool bGraze, bool bCritical, bool bWeakSpot, bool bRadial, float Radius); // [0x1c5deb0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaDamageType.SetupImpactFx
	// void SetupImpactFx(class UParticleSystemComponent* ParentEffect, bool bGraze, bool bCritical, bool bWeakSpot, bool bRadial, float Radius); // [0x1c5deb0] Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Indiana.IndianaDebugCameraController
/// Size: 0x0008 (0x000728 - 0x000730)
class AIndianaDebugCameraController : public ADebugCameraController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1840;

public:
};

/// Class /Script/Indiana.IndianaDragDropOperation
/// Size: 0x0028 (0x000090 - 0x0000B8)
class UIndianaDragDropOperation : public UDragDropOperation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class UClass*)                             DefaultDragVisualClass                                      OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Indiana.IndianaFlybyAkComponent
/// Size: 0x0008 (0x000488 - 0x000490)
class UIndianaFlybyAkComponent : public UAkComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	DMember(float)                                     WorldZOffset                                                OFFSET(get<float>, {0x488, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaFlybyAkComponent.UpdateEmitterLocation
	// void UpdateEmitterLocation();                                                                                            // [0x1846d00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaFlybyAkComponent.InitializeEmitter
	// void InitializeEmitter();                                                                                                // [0x18468b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaFlybyAkComponent.DeactivateEmitter
	// void DeactivateEmitter();                                                                                                // [0x1846010] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.AISoundDetectionSettings
/// Size: 0x0028 (0x000000 - 0x000028)
class FAISoundDetectionSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(EAlertState)                               DetectedAlertState                                          OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     DetectedAwarenessChange                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bContinuousAwareness                                        OFFSET(get<bool>, {0x8, 1, 0, 0})
	CMember(class URpgStat*)                           AwarenessChangeStat                                         OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bMatchFriendAwareness                                       OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     PathDistanceCheckScalar                                     OFFSET(get<float>, {0x1C, 4, 0, 0})
	CMember(EStimulusType)                             StimulusType                                                OFFSET(get<T>, {0x20, 1, 0, 0})
};

/// Class /Script/Indiana.IndianaFormulas
/// Size: 0x0128 (0x000030 - 0x000158)
class UIndianaFormulas : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(char)                                      OCLMinDifficulty                                            OFFSET(get<char>, {0x30, 1, 0, 0})
	DMember(char)                                      OCLMaxDifficulty                                            OFFSET(get<char>, {0x31, 1, 0, 0})
	DMember(char)                                      LockpickMaxDelta                                            OFFSET(get<char>, {0x32, 1, 0, 0})
	DMember(char)                                      HackMinDifficulty                                           OFFSET(get<char>, {0x33, 1, 0, 0})
	DMember(char)                                      HackMaxDifficulty                                           OFFSET(get<char>, {0x34, 1, 0, 0})
	DMember(char)                                      HackMaxDelta                                                OFFSET(get<char>, {0x35, 1, 0, 0})
	DMember(char)                                      TrapMinDifficulty                                           OFFSET(get<char>, {0x36, 1, 0, 0})
	DMember(char)                                      TrapMaxDifficulty                                           OFFSET(get<char>, {0x37, 1, 0, 0})
	DMember(char)                                      TrapMaxDelta                                                OFFSET(get<char>, {0x38, 1, 0, 0})
	DMember(float)                                     InteriorSneakDetectionRange                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     ExteriorSneakDetectionRange                                 OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     ConversationResumeDelay                                     OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     ConversationResumeDelayRandom                               OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     SoftCoverDetectionDistance                                  OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MindControlInitialPerceptionDistance                        OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(TMap<ESoundDetectionType, FAISoundDetectionSettings>) SoundDetectionSettingsMap                        OFFSET(get<T>, {0x58, 80, 0, 0})
	DMember(int32_t)                                   MinimumMerchantSkillForDiscount                             OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(float)                                     MerchantDiscountDivisor                                     OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(int32_t)                                   MinimumHackSkillToUnlockRestrictedStock                     OFFSET(get<int32_t>, {0xB0, 4, 0, 0})
	DMember(float)                                     PawningValueReductionModifier                               OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     RestockFrequencyDays                                        OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     BuybackExpirationDays                                       OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     PristineValueModifier                                       OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     PristineHealthModifier                                      OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     ItemEffectivenessThresholdDamage                            OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     ItemEffectivenessThresholdSevereDamage                      OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     ItemEffectivenessThresholdDestroyed                         OFFSET(get<float>, {0xD0, 4, 0, 0})
	CMember(TMap<EGameDifficulty, float>)              MinEffectivenessByDifficulty                                OFFSET(get<T>, {0xD8, 80, 0, 0})
	DMember(int32_t)                                   MinUnlockedGadgetSlots                                      OFFSET(get<int32_t>, {0x128, 4, 0, 0})
	CMember(class UCurveFloat*)                        DisguiseDetectorDrainRateCurve                              OFFSET(get<T>, {0x130, 8, 0, 0})
	DMember(float)                                     BeaconFocusAimSimilarityOn                                  OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     BeaconFocusAimSimilarityOff                                 OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     StandardKeyHoldTime                                         OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     StandardDoubleClickTime                                     OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(int32_t)                                   InterrogationSkillCheckXPLimitCount                         OFFSET(get<int32_t>, {0x148, 4, 0, 0})
	DMember(double)                                    InterrogationSkillCheckXPLimitTime                          OFFSET(get<double>, {0x150, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaFormulas.WorkbenchRepairPartCost
	// int32_t WorkbenchRepairPartCost(float Durability, int32_t ItemLevel, int32_t EngineerSkill);                             // [0x1846e00] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.VendorRepairCurrencyCost
	// int32_t VendorRepairCurrencyCost(float Durability, int32_t ItemLevel);                                                   // [0x1846d20] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapToughness
	// char TrapToughness(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                            // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDisarmNoise
	// float TrapDisarmNoise(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                         // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDifficultyRange
	// float TrapDifficultyRange();                                                                                             // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDifficultyNumRanges
	// char TrapDifficultyNumRanges();                                                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDifficultyFullRange
	// char TrapDifficultyFullRange();                                                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapDamagePercent
	// float TrapDamagePercent(ETrapDifficulty TrapDifficulty);                                                                 // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.TrapArmNoise
	// float TrapArmNoise(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                            // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ShouldDrawFireSwitchCompanionTargets
	// bool ShouldDrawFireSwitchCompanionTargets(float OldHealth, float OldDTBody, float OldDTHead, float NewHealth, float NewDTBody, float NewDTHead); // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.PlayerSneakEnemyDetectionRage
	// float PlayerSneakEnemyDetectionRage(bool bInterior, int32_t PlayerSneakSkill);                                           // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.PickPocketTime
	// float PickPocketTime(int32_t LockpickSkill, int32_t TargetPerception);                                                   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickToughness
	// char LockpickToughness(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill);                                       // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickTime
	// float LockpickTime(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill, int32_t BasePlayerLockpickSkill);          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickNumResources
	// char LockpickNumResources(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill, int32_t BasePlayerLockpickSkill);   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickNoise
	// float LockpickNoise(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill);                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickDifficultyRange
	// float LockpickDifficultyRange();                                                                                         // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickDifficultyNumRanges
	// char LockpickDifficultyNumRanges();                                                                                      // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.LockpickDifficultyFullRange
	// char LockpickDifficultyFullRange();                                                                                      // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackToughness
	// char HackToughness(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackTime
	// char HackTime(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                        // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackRobotTime
	// char HackRobotTime(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackNumResources
	// char HackNumResources(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackNoise
	// float HackNoise(char ExactHackDifficulty, int32_t PlayerHackSkill);                                                      // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackDifficultyRange
	// float HackDifficultyRange();                                                                                             // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackDifficultyNumRanges
	// char HackDifficultyNumRanges();                                                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.HackDifficultyFullRange
	// char HackDifficultyFullRange();                                                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.GetRespecCost
	// int32_t GetRespecCost(int32_t NumRespecs);                                                                               // [0x18467f0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.GetModifiedItemEffectiveness
	// float GetModifiedItemEffectiveness(class UDegradableItem* Item);                                                         // [0x1846750] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.GetInterrogationBribeAmount
	// int32_t GetInterrogationBribeAmount(ECrimeType CrimeType, bool bRestrictedArea, bool bDisguised, int32_t DisguiseInterrogationsPassed, int32_t PlayerLevel, int32_t MerchantSkill, int32_t StolenItemsValue); // [0x1846520] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.GetDisguiseDrainRate
	// float GetDisguiseDrainRate(int32_t StealthSkill, bool bMoving, bool bSprinting, bool bCrouching);                        // [0x18463a0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.GetBribeAmount
	// int32_t GetBribeAmount(EBribeDifficulty BribeDifficulty, int32_t Level, int32_t MerchantSkill);                          // [0x1846280] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.FieldRepairPartCost
	// int32_t FieldRepairPartCost(float Durability, int32_t ItemLevel, int32_t EngineerSkill);                                 // [0x1846160] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.DoesHackSkillUnlockRestrictedStock
	// bool DoesHackSkillUnlockRestrictedStock(int32_t HackSkill);                                                              // [0x1846030] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.DisarmTime
	// char DisarmTime(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                               // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ConversationSkillNearMissThreshold
	// int32_t ConversationSkillNearMissThreshold();                                                                            // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ConversationNearMissMaxOptions
	// int32_t ConversationNearMissMaxOptions();                                                                                // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ConversationAttributeNearMissThreshold
	// int32_t ConversationAttributeNearMissThreshold();                                                                        // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeSkillValueToRange
	// ECharacterSkillRange ComputeSkillValueToRange(int32_t SkillValue);                                                       // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeSkillPointsForSecondaryAttribute
	// int32_t ComputeSkillPointsForSecondaryAttribute(char AttributeRank);                                                     // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeSkillPointsForPrimaryAttribute
	// int32_t ComputeSkillPointsForPrimaryAttribute(char AttributeRank);                                                       // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeFallingDamagePercent
	// float ComputeFallingDamagePercent(float DistanceFallen);                                                                 // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeExactTrapDifficulty
	// char ComputeExactTrapDifficulty(ETrapDifficulty TrapDifficulty);                                                         // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeExactLockpickDifficulty
	// char ComputeExactLockpickDifficulty(EOCLDifficulty LockpickDifficulty);                                                  // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.ComputeExactHackDifficulty
	// char ComputeExactHackDifficulty(EOCLDifficulty HackDifficulty);                                                          // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CanLockpick
	// bool CanLockpick(char ExactLockpickDifficulty, int32_t PlayerLockpickSkill);                                             // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CanHack
	// bool CanHack(char ExactComputerDifficulty, int32_t PlayerHackSkill);                                                     // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CanDisarm
	// bool CanDisarm(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                                // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CanArm
	// bool CanArm(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                                   // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateTier3Count
	// int32_t CalculateTier3Count(int32_t ScienceSkill);                                                                       // [0x1845ee0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateTier2Count
	// int32_t CalculateTier2Count(int32_t ScienceSkill);                                                                       // [0x1845e40] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateTier1Count
	// int32_t CalculateTier1Count(int32_t ScienceSkill);                                                                       // [0x1845da0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculatePartsRecoveredOnBreakdown
	// int32_t CalculatePartsRecoveredOnBreakdown(float Durability, int32_t ItemLevel, bool bFieldBreakdown);                   // [0x1845c80] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateMoraleAdjustment
	// float CalculateMoraleAdjustment(float AddedMoral, int32_t CharmAttribute, int32_t TemperamentAttribute);                 // [0x1845b60] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateMerchantSkillDiscount
	// float CalculateMerchantSkillDiscount(int32_t MerchantSkill);                                                             // [0x1845ac0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateItemEffectiveness
	// float CalculateItemEffectiveness(class UDegradableItem* Item);                                                           // [0x1845a20] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateItemBasePrice
	// float CalculateItemBasePrice(int32_t BasePrice, bool bPristine, float Condition);                                        // [0x1845900] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateIntialMorale
	// float CalculateIntialMorale(int32_t TemperamentAttribute);                                                               // [0x1845860] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.CalculateGadgetSlots
	// int32_t CalculateGadgetSlots(int32_t ScienceSkill);                                                                      // [0x18457c0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.BaseRepairPartCost
	// float BaseRepairPartCost(float Durability, int32_t ItemLevel);                                                           // [0x18456e0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.IndianaFormulas.ArmTime
	// char ArmTime(char ExactTrapDifficulty, int32_t PlayerEngineeringSkill);                                                  // [0x1c5deb0] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Struct /Script/Indiana.WeatherState
/// Size: 0x002C (0x000000 - 0x00002C)
class FWeatherState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(bool)                                      HasBeenInitialized                                          OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      CloudFormingEnded                                           OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      RainStartedEnded                                            OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      WeatherStarted                                              OFFSET(get<bool>, {0x3, 1, 0, 0})
	DMember(bool)                                      WeatherEndEnded                                             OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(float)                                     TimelineCloudFormationP                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     TimelineRainStart                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     TimelineRainEnd                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     TimelineDyingTimeline                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     RandomWindGenerator                                         OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     TimelineSandstormStart                                      OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     TimelineSandStormDuration                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     TimelineSandStormEnding                                     OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     SandStormDensity                                            OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/Indiana.WeatherStateContainer
/// Size: 0x0030 (0x000030 - 0x000060)
class UWeatherStateContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FWeatherState)                             WeatherState                                                OFFSET(getStruct<T>, {0x30, 44, 0, 0})
};

/// Class /Script/Indiana.IndianaGameInstance
/// Size: 0x0BC0 (0x0001B0 - 0x000D70)
class UIndianaGameInstance : public UGameInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3440;

public:
	CMember(class UClass*)                             PickupBasicBlueprint                                        OFFSET(get<T>, {0x1B0, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelEntered                                              OFFSET(getStruct<T>, {0x1B8, 16, 0, 0})
	CMember(TArray<class UFont*>)                      Fonts                                                       OFFSET(get<T>, {0x1C8, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UObject*>>)          AlwaysLoadedAssets                                          OFFSET(get<T>, {0x1D8, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           AlwaysLoadedClasses                                         OFFSET(get<T>, {0x1E8, 16, 0, 0})
	CMember(TSet<UObject*>)                            PersistedAssets                                             OFFSET(get<T>, {0x1F8, 80, 0, 0})
	CMember(class UQuestManager*)                      QuestManager                                                OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UTelemetryManager*)                  TelemetryManager                                            OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class UScriptManager*)                     ScriptManager                                               OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UChatterManager*)                    ChatterManager                                              OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UTeamManager*)                       GlobalTeamManager                                           OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UFactionManager*)                    GlobalFactionManager                                        OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UTalkManager*)                       TalkManager                                                 OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UDifficultyManager*)                 DifficultyManager                                           OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UBeaconManager*)                     BeaconManager                                               OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UTutorialManager*)                   TutorialManager                                             OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UClass*)                             TutorialManagerClass                                        OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UAchievementsManager*)               AchievementsManager                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UAudioLogManager*)                   AudioLogManager                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UClass*)                             AudioLogManagerClass                                        OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTravelDestinationData*)             TravelDestinationData                                       OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class USaveGameManager*)                   SaveGameManager                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UGameCalendar*)                      GameCalendar                                                OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UCompanionManager*)                  CompanionManager                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UClass*)                             OverridePlayerClass                                         OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UIndianaLoadingScreenManager*)       LoadingScreenManager                                        OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UMusicManager*)                      MusicManager                                                OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UDLCManager*)                        DLCManager                                                  OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UParticlePool*)                      ParticlePool                                                OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UBossFightManager*)                  BossFightManager                                            OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UActivityManager*)                   ActivityManager                                             OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(TMap<FString, int32_t>)                    TexturePoolAdjustments                                      OFFSET(get<T>, {0x438, 80, 0, 0})
	CMember(TMap<FString, float>)                      MinScreenRadiusForLightsOverrides                           OFFSET(get<T>, {0x488, 80, 0, 0})
	CMember(TMap<FString, float>)                      MinScreenRadiusForCSMDepthOverrides                         OFFSET(get<T>, {0x4D8, 80, 0, 0})
	CMember(TMap<FString, float>)                      MinScreenRadiusForDepthPrepassOverrides                     OFFSET(get<T>, {0x528, 80, 0, 0})
	CMember(TMap<FString, float>)                      LightMaxDrawDistanceScaleOverrides                          OFFSET(get<T>, {0x578, 80, 0, 0})
	CMember(TMap<FString, float>)                      CSMShadowDistanceFadeoutMultiplierOverrides                 OFFSET(get<T>, {0x5C8, 80, 0, 0})
	CMember(TMap<FString, float>)                      ShadowRadiusThresholdOverrides                              OFFSET(get<T>, {0x618, 80, 0, 0})
	CMember(TMap<FString, float>)                      RayTracingMaxShadowDistanceOverrides                        OFFSET(get<T>, {0x668, 80, 0, 0})
	CMember(TMap<FString, float>)                      FarShadowDistanceOverrides                                  OFFSET(get<T>, {0x6B8, 80, 0, 0})
	CMember(TMap<FString, float>)                      ShadowDistanceScaleOverrides                                OFFSET(get<T>, {0x708, 80, 0, 0})
	CMember(TMap<FString, float>)                      FoliageDensityScaleTier0                                    OFFSET(get<T>, {0x758, 80, 0, 0})
	CMember(TMap<FString, float>)                      FoliageDensityScaleTier1                                    OFFSET(get<T>, {0x7A8, 80, 0, 0})
	CMember(TMap<FString, float>)                      FoliageDensityScaleTier2                                    OFFSET(get<T>, {0x7F8, 80, 0, 0})
	CMember(TMap<FString, float>)                      FoliageMinimumScreenSizeOverrides                           OFFSET(get<T>, {0x848, 80, 0, 0})
	CMember(TMap<FString, int32_t>)                    FarShadowOverrides                                          OFFSET(get<T>, {0x8A0, 80, 0, 0})
	CMember(class UIndianaAutoPlayer*)                 AutoPlayer                                                  OFFSET(get<T>, {0x8F0, 8, 0, 0})
	CMember(class UDevelopmentFunctionality*)          DevelopmentFunctionality                                    OFFSET(get<T>, {0x8F8, 8, 0, 0})
	CMember(class UWeatherStateContainer*)             PreviousWeather                                             OFFSET(get<T>, {0xD60, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaGameInstance.SetOverridePlayerClass
	// void SetOverridePlayerClass(class UClass* Override);                                                                     // [0x184b020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.ResetEULA
	// void ResetEULA();                                                                                                        // [0xbb4890] Final|Exec|Native|Private 
	// Function /Script/Indiana.IndianaGameInstance.QueueEndGameLoadingScreen
	// void QueueEndGameLoadingScreen(EEndGameImageType EndGameType);                                                           // [0x184aae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.QueueCredits
	// void QueueCredits(bool bShouldQueue);                                                                                    // [0x184aa50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.LowMemoryLoad
	// void LowMemoryLoad(FString Map);                                                                                         // [0x184a950] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaGameInstance.IsXFHDLCInstalled
	// bool IsXFHDLCInstalled();                                                                                                // [0x184a920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.IsINX2Installed
	// bool IsINX2Installed();                                                                                                  // [0x184a5b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameInstance.IsINX2DLCInstalled
	// bool IsINX2DLCInstalled();                                                                                               // [0x184a580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameInstance.IsINX1Installed
	// bool IsINX1Installed();                                                                                                  // [0x184a550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameInstance.HasVisitedMainMenu
	// bool HasVisitedMainMenu();                                                                                               // [0x1849ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameInstance.AreCreditsQueued
	// bool AreCreditsQueued();                                                                                                 // [0x1848830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameInstance.AreCreditsPlaying
	// bool AreCreditsPlaying();                                                                                                // [0x1848800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaGameMode
/// Size: 0x0030 (0x0003A8 - 0x0003D8)
class AIndianaGameMode : public AGameMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 984;

public:
	CMember(class UClass*)                             CustomPlayerClass                                           OFFSET(get<T>, {0x3D0, 8, 0, 0})
};

/// Class /Script/Indiana.IndianaGameplayStatics
/// Size: 0x0000 (0x000030 - 0x000030)
class UIndianaGameplayStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.IndianaGameplayStatics.UndilateTime
	// float UndilateTime(class UObject* ContextObject, float DilatedTime);                                                     // [0x184b6b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.TeleportPlayerToStart
	// void TeleportPlayerToStart(class AIndianaPlayerStart* PlayerStart);                                                      // [0x184b630] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SuicideActor
	// bool SuicideActor(class AActor* Actor);                                                                                  // [0x184b5a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SpawnPooledEmitterAttached
	// class UParticleSystemComponent* SpawnPooledEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType); // [0x184b360] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SpawnPooledEmitterAtLocation
	// class UParticleSystemComponent* SpawnPooledEmitterAtLocation(class UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale); // [0x184b1e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetParticleSystemEmittersEnabled
	// void SetParticleSystemEmittersEnabled(class UParticleSystemComponent* ParticleSystem, TArray<FName>& EnabledEmitters, bool bEnabled); // [0x184b0b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetMoveIgnoreComponentCollision
	// void SetMoveIgnoreComponentCollision(class AActor* Actor, class UPrimitiveComponent* ComponentToIgnore, bool bIgnore);   // [0x184af20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetMoveIgnoreActorCollision
	// void SetMoveIgnoreActorCollision(class AActor* ActorA, class AActor* ActorB, bool bIgnore);                              // [0x184ae20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetIndianaActorPseudoGod
	// void SetIndianaActorPseudoGod(class AActor* Actor, bool bPseudoGodMode);                                                 // [0x184ad60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetIndianaActorInteractable
	// void SetIndianaActorInteractable(class AActor* Actor, bool bInteractable);                                               // [0x184aca0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetIndianaActorGod
	// void SetIndianaActorGod(class AActor* Actor, bool bGodMode);                                                             // [0x184abe0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.SetFPVCameraFOV
	// void SetFPVCameraFOV(bool bOverrideCustomFOV);                                                                           // [0x184ab60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsRunningAutomationTest
	// bool IsRunningAutomationTest(EBoolResult& Result);                                                                       // [0x184a890] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsQuestActive
	// bool IsQuestActive(FGuid QuestID, EBoolResult& Result);                                                                  // [0x184a7a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsItemStackOfClass
	// bool IsItemStackOfClass(FItemStack& ItemStack, class UClass* ItemType);                                                  // [0x184a6b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsItemOfClass
	// bool IsItemOfClass(class UItem* Item, class UClass* ItemType);                                                           // [0x184a5e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsGlobalVariableValue
	// bool IsGlobalVariableValue(FGlobalVariable& Variable, ComparisonOperator Operator, int32_t Value, EBoolResult& Result);  // [0x184a3d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsGlobalVariableValid
	// bool IsGlobalVariableValid(FGlobalVariable& Variable, EBoolResult& Result);                                              // [0x184a2c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsGlobalValue
	// bool IsGlobalValue(FString VariableName, ComparisonOperator Operator, int32_t Value, EBoolResult& Result);               // [0x184a100] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IsCharacterInAnyBarkConversation
	// bool IsCharacterInAnyBarkConversation(class AIndianaCharacter* Character);                                               // [0x184a070] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.InitiateTravel
	// void InitiateTravel(class AIndianaPlayerCharacter* PlayerCharacter, class UTravelDestinationData* TravelDest, bool bTravelFromMapLedger, bool bTriggerAutosave); // [0x1849f10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.InheritMeshProperties
	// void InheritMeshProperties(class UMeshComponent* ParentMesh, class UMeshComponent* ChildMesh);                           // [0x1849e50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IndianaCancelAsyncLoadAsset
	// void IndianaCancelAsyncLoadAsset(int32_t Handle);                                                                        // [0x1849dd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.IndianaAsyncLoadAsset
	// void IndianaAsyncLoadAsset(TWeakObjectPtr<UObject*> Asset, int32_t Priority, FDelegateProperty& Callback, int32_t& HandleOut); // [0x1849bc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponSpinProgress
	// float GetWeaponSpinProgress(class UWeapon* Weapon);                                                                      // [0x1849a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponSpinningUp
	// bool GetWeaponSpinningUp(class UWeapon* Weapon);                                                                         // [0x1849b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponProjectileCharge
	// float GetWeaponProjectileCharge(class UWeapon* Weapon);                                                                  // [0x18499f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponIsSwinging
	// bool GetWeaponIsSwinging(class UWeapon* Weapon);                                                                         // [0x1849960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponForceSpin
	// bool GetWeaponForceSpin(class UWeapon* Weapon);                                                                          // [0x18498d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponCurrentCharge
	// float GetWeaponCurrentCharge(class UWeapon* Weapon);                                                                     // [0x1849840] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetWeaponCurrentAmmoGaugeAlpha
	// float GetWeaponCurrentAmmoGaugeAlpha(class UWeapon* Weapon);                                                             // [0x18497b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetSkeletalMeshComponent
	// class USkeletalMeshComponent* GetSkeletalMeshComponent(class AActor* TargetActor, EMeshTarget MeshType);                 // [0x18496e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetMeshComponent
	// class UMeshComponent* GetMeshComponent(class AActor* TargetActor, EMeshTarget MeshType);                                 // [0x1849610] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetGameCalendar
	// class UGameCalendar* GetGameCalendar();                                                                                  // [0x18495e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetEventEffectPhysicalSurface
	// TEnumAsByte<EPhysicalSurface> GetEventEffectPhysicalSurface(FEventEffectParams& Params);                                 // [0x18494e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetEventEffectParam
	// float GetEventEffectParam(FEventEffectParams& Params, EEventEffectFloatParams Param);                                    // [0x1849390] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetEventEffectEnabledEmitters
	// TArray<FName> GetEventEffectEnabledEmitters(FEventEffectParams& Params);                                                 // [0x1849260] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.GetBlendSpaceLength
	// float GetBlendSpaceLength(class UBlendSpaceBase* BlendSpace);                                                            // [0x18491d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetAllAppearanceRelatedMeshes
	// void GetAllAppearanceRelatedMeshes(class AActor* Actor, TArray<UMeshComponent*>& Meshes, bool bIncludeWeapon);           // [0x18490a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.GetActorBySpeakerName
	// class AActor* GetActorBySpeakerName(ECheckBranches& Branches, FGuid SpeakerReference);                                   // [0x1848fa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.FindFirstChildComponentByTag
	// class USceneComponent* FindFirstChildComponentByTag(ECheckBranches& Branches, class USceneComponent* ParentComponent, FName Tag); // [0x1848e80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.FindChildComponentsByTag
	// bool FindChildComponentsByTag(class USceneComponent* ParentComponent, FName Tag, TArray<USceneComponent*>& ChildComponents); // [0x1848d50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.EnableParticleSystemEmitters
	// void EnableParticleSystemEmitters(class UParticleSystemComponent* ParticleSystem, TArray<FName>& EnabledEmitters);       // [0x1848c70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.DilateTime
	// float DilateTime(class UObject* ContextObject, float UndilatedTime);                                                     // [0x1848ba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaGameplayStatics.CreateEndGameDialogWidget
	// class UDialogBoxWidget* CreateEndGameDialogWidget(FLocString& BodyLocString);                                            // [0x1848b00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.CreateDialogWidget
	// class UDialogBoxWidget* CreateDialogWidget(FLocString& BodyLocString, bool bCancellable);                                // [0x1848a20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.ConstructComponentByClass
	// class UActorComponent* ConstructComponentByClass(ECheckBranches& Branches, class UObject* InOuter, class UClass* InClass); // [0x1848900] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.ClearPlayerCombat
	// void ClearPlayerCombat();                                                                                                // [0x18488e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.CanCharacterUnlockRestrictedStock
	// bool CanCharacterUnlockRestrictedStock(class AIndianaCharacter* Character);                                              // [0x1848850] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.ApplyGenericDamage
	// void ApplyGenericDamage(class AActor* DamageCauser, class AActor* DamagedActor, float BaseDamage, class UClass* DamageType, bool bUseCustomDamageDescription, FDamageDescription CustomDamageDescription); // [0x18484d0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameplayStatics.ApplyCACVisibilityToActorCollision
	// void ApplyCACVisibilityToActorCollision(class UChildActorComponent* CAC);                                                // [0x1848450] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaGameUserSettings
/// Size: 0x0940 (0x000128 - 0x000A68)
class UIndianaGameUserSettings : public UGameUserSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2664;

public:
	DMember(float)                                     MasterSoundVolume                                           OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     EffectsSoundVolume                                          OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     MusicSoundVolume                                            OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     UISoundVolume                                               OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     VoiceSoundVolume                                            OFFSET(get<float>, {0x198, 4, 0, 0})
	DMember(bool)                                      bXAxisInverted                                              OFFSET(get<bool>, {0x1B0, 1, 0, 0})
	DMember(bool)                                      bControllerXAxisInverted                                    OFFSET(get<bool>, {0x1C8, 1, 0, 0})
	DMember(bool)                                      bYAxisInverted                                              OFFSET(get<bool>, {0x1E0, 1, 0, 0})
	DMember(bool)                                      bControllerYAxisInverted                                    OFFSET(get<bool>, {0x1F8, 1, 0, 0})
	DMember(bool)                                      bControllerAutoSprintEnabled                                OFFSET(get<bool>, {0x210, 1, 0, 0})
	DMember(float)                                     MouseSensitivityValue                                       OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     MouseADSSensitivityValue                                    OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     RadialSensitivity                                           OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     ControllerSensitivity                                       OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     ControllerADSSensitivity                                    OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(bool)                                      bControllerRumbleEnabled                                    OFFSET(get<bool>, {0x290, 1, 0, 0})
	DMember(float)                                     ControllerLeftInnerDeadZone                                 OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     ControllerLeftOuterDeadZone                                 OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     ControllerRightInnerDeadZone                                OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     ControllerRightOuterDeadZone                                OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(int32_t)                                   GamepadLayout                                               OFFSET(get<int32_t>, {0x348, 4, 0, 0})
	DMember(int32_t)                                   StickLayout                                                 OFFSET(get<int32_t>, {0x34C, 4, 0, 0})
	CMember(TArray<FInputActionKeyMapping>)            AddedActionKeyBinds                                         OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(TArray<FInputActionKeyMapping>)            RemovedActionKeyBinds                                       OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(TArray<FInputAxisKeyMapping>)              AddedAxisKeyBinds                                           OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(TArray<FInputAxisKeyMapping>)              RemovedAxisKeyBinds                                         OFFSET(get<T>, {0x380, 16, 0, 0})
	DMember(bool)                                      bPseudoGodMode                                              OFFSET(get<bool>, {0x548, 1, 0, 0})
	DMember(bool)                                      bGodMode                                                    OFFSET(get<bool>, {0x560, 1, 0, 0})
	DMember(bool)                                      bInfiniteAmmo                                               OFFSET(get<bool>, {0x578, 1, 0, 0})
	DMember(bool)                                      bLastConfirmedVSync                                         OFFSET(get<bool>, {0x5AC, 1, 0, 0})
	DMember(bool)                                      bControllerEnableImpulseTriggers                            OFFSET(get<bool>, {0x5C0, 1, 0, 0})
	DMember(float)                                     ImpulseTriggerIntensity                                     OFFSET(get<float>, {0x5D8, 4, 0, 0})
	DMember(int32_t)                                   SSGIQuality                                                 OFFSET(get<int32_t>, {0x5F0, 4, 0, 0})
	DMember(bool)                                      bFSR2Enabled                                                OFFSET(get<bool>, {0x5F4, 1, 0, 0})
	DMember(bool)                                      bLastConfirmedFSR2Enabled                                   OFFSET(get<bool>, {0x5F5, 1, 0, 0})
	CMember(EFSR2Mode)                                 FSR2Mode                                                    OFFSET(get<T>, {0x5F6, 1, 0, 0})
	CMember(EFSR2Mode)                                 LastConfirmedFSR2Mode                                       OFFSET(get<T>, {0x5F7, 1, 0, 0})
	DMember(float)                                     MotionBlurScale                                             OFFSET(get<float>, {0x5F8, 4, 0, 0})
	DMember(float)                                     LastConfirmedMotionBlurScale                                OFFSET(get<float>, {0x5FC, 4, 0, 0})
	DMember(float)                                     GammaLevel                                                  OFFSET(get<float>, {0x670, 4, 0, 0})
	DMember(float)                                     LastConfirmedGammaLevel                                     OFFSET(get<float>, {0x674, 4, 0, 0})
	CMember(EFPSLimit)                                 FPSLimit                                                    OFFSET(get<T>, {0x688, 1, 0, 0})
	CMember(EFPSLimit)                                 LastConfirmedFPSLimit                                       OFFSET(get<T>, {0x689, 1, 0, 0})
	DMember(float)                                     Resolution3D                                                OFFSET(get<float>, {0x6A0, 4, 0, 0})
	DMember(float)                                     CustomFieldOfView                                           OFFSET(get<float>, {0x6B8, 4, 0, 0})
	DMember(float)                                     LastConfirmedCustomFieldOfView                              OFFSET(get<float>, {0x6BC, 4, 0, 0})
	DMember(bool)                                      bChromaticAberration                                        OFFSET(get<bool>, {0x6D0, 1, 0, 0})
	DMember(bool)                                      bLastChromaticAberration                                    OFFSET(get<bool>, {0x6D1, 1, 0, 0})
	CMember(EConversationSubtitleMode)                 ConversationSubtitleMode                                    OFFSET(get<T>, {0x6E8, 1, 0, 0})
	DMember(bool)                                      bBarkSubtitlesVisible                                       OFFSET(get<bool>, {0x6E9, 1, 0, 0})
	DMember(bool)                                      bCinematicSubtitlesVisible                                  OFFSET(get<bool>, {0x700, 1, 0, 0})
	DMember(bool)                                      bConversationResponseVisibleDuringVO                        OFFSET(get<bool>, {0x718, 1, 0, 0})
	DMember(bool)                                      bTutorialsEnabled                                           OFFSET(get<bool>, {0x719, 1, 0, 0})
	CMember(EPerformanceMode)                          PerformanceMode                                             OFFSET(get<T>, {0x71A, 1, 0, 0})
	CMember(ELanguageMode)                             LanguageMode                                                OFFSET(get<T>, {0x730, 1, 0, 0})
	DMember(bool)                                      bOverrideNativeLanguage                                     OFFSET(get<bool>, {0x731, 1, 0, 0})
	DMember(bool)                                      bQuestLogVisibleAllTimes                                    OFFSET(get<bool>, {0x733, 1, 0, 0})
	DMember(bool)                                      bShowFloatingDamageText                                     OFFSET(get<bool>, {0x734, 1, 0, 0})
	CMember(EWeaponTooltipStatMode)                    WeaponTooltipStatMode                                       OFFSET(get<T>, {0x735, 1, 0, 0})
	DMember(bool)                                      bHUDVisible                                                 OFFSET(get<bool>, {0x748, 1, 0, 0})
	CMember(EHUDMode)                                  HUDMode                                                     OFFSET(get<T>, {0x760, 1, 0, 0})
	CMember(EFPSIndicatorMode)                         FPSIndicatorMode                                            OFFSET(get<T>, {0x778, 1, 0, 0})
	CMember(ECompassVisibilityMode)                    CompassVisibilityMode                                       OFFSET(get<T>, {0x779, 1, 0, 0})
	DMember(bool)                                      bShowWaypointMarkers                                        OFFSET(get<bool>, {0x790, 1, 0, 0})
	DMember(bool)                                      bShowInteractionOutlines                                    OFFSET(get<bool>, {0x7A8, 1, 0, 0})
	DMember(bool)                                      bShowInteractionControls                                    OFFSET(get<bool>, {0x7C0, 1, 0, 0})
	CMember(EEnemyHealthBarMode)                       EnemyHealthBarMode                                          OFFSET(get<T>, {0x7C1, 1, 0, 0})
	CMember(EAimingReticleMode)                        AimingReticleMode                                           OFFSET(get<T>, {0x7D8, 1, 0, 0})
	CMember(EReticleMode)                              ReticleMode                                                 OFFSET(get<T>, {0x7D9, 1, 0, 0})
	DMember(bool)                                      bShowReticleFeedback                                        OFFSET(get<bool>, {0x7F0, 1, 0, 0})
	DMember(bool)                                      bOffsetReticle                                              OFFSET(get<bool>, {0x7F1, 1, 0, 0})
	DMember(float)                                     NotificationDuration                                        OFFSET(get<float>, {0x808, 4, 0, 0})
	CMember(EQuestUpdateMode)                          QuestUpdateMode                                             OFFSET(get<T>, {0x820, 1, 0, 0})
	CMember(EEnemyAwarenessMeterMode)                  EnemyAwarenessMeterMode                                     OFFSET(get<T>, {0x838, 1, 0, 0})
	DMember(bool)                                      bShowEnemyAwarenessMeters                                   OFFSET(get<bool>, {0x839, 1, 0, 0})
	CMember(EPlayerStatusBarMode)                      PlayerStatusBarMode                                         OFFSET(get<T>, {0x850, 1, 0, 0})
	DMember(bool)                                      bShowPlayerStatusEffects                                    OFFSET(get<bool>, {0x868, 1, 0, 0})
	CMember(EPlayerStatusEffectTextMode)               PlayerStatusEffectTextMode                                  OFFSET(get<T>, {0x869, 1, 0, 0})
	CMember(ECompanionAbilityUIMode)                   CompanionAbilityUIMode                                      OFFSET(get<T>, {0x86A, 1, 0, 0})
	CMember(ECompanionAbilityBindingMode)              CompanionAbilityBindingMode                                 OFFSET(get<T>, {0x880, 1, 0, 0})
	CMember(EHeldWeaponDisplayMode)                    HeldWeaponDisplayMode                                       OFFSET(get<T>, {0x898, 1, 0, 0})
	CMember(EHeldWeaponDisplayText)                    HeldWeaponDisplayTextMode                                   OFFSET(get<T>, {0x8B0, 1, 0, 0})
	CMember(EAreaNameMode)                             AreaNameMode                                                OFFSET(get<T>, {0x8C8, 1, 0, 0})
	CMember(EDirectionalDamageIndicatorMode)           DirectionalDamageIndicatorMode                              OFFSET(get<T>, {0x8E0, 1, 0, 0})
	CMember(ESurvivalMode)                             SurvivalMeterMode                                           OFFSET(get<T>, {0x8E1, 1, 0, 0})
	DMember(bool)                                      bShowSurvivalMeters                                         OFFSET(get<bool>, {0x8E2, 1, 0, 0})
	CMember(EMedicalInhalerMode)                       MedicalInhalerUIMode                                        OFFSET(get<T>, {0x8F8, 1, 0, 0})
	CMember(EAbilityControlMode)                       AbilityControlUIMode                                        OFFSET(get<T>, {0x910, 1, 0, 0})
	CMember(ETTDDisplayMode)                           TTDDisplayMode                                              OFFSET(get<T>, {0x928, 1, 0, 0})
	CMember(EDodgeDisplayMode)                         DodgeDisplayMode                                            OFFSET(get<T>, {0x940, 1, 0, 0})
	CMember(ECompanionStatusMode)                      CompanionStatusUIMode                                       OFFSET(get<T>, {0x958, 1, 0, 0})
	CMember(ECompanionAbilityPassiveCDMode)            CompanionAbilityPassiveCDMode                               OFFSET(get<T>, {0x970, 1, 0, 0})
	CMember(ECompanionAbilityPassiveNotificationMode)  CompanionAbilityPassiveNotificationMode                     OFFSET(get<T>, {0x971, 1, 0, 0})
	DMember(bool)                                      bShowLevelUpNotification                                    OFFSET(get<bool>, {0x972, 1, 0, 0})
	DMember(bool)                                      bShowLevelUpReminders                                       OFFSET(get<bool>, {0x988, 1, 0, 0})
	DMember(bool)                                      bShowCombatIndicator                                        OFFSET(get<bool>, {0x9A0, 1, 0, 0})
	DMember(bool)                                      bShowTTDScanner                                             OFFSET(get<bool>, {0x9A1, 1, 0, 0})
	CMember(ETTDReticleMeterMode)                      TTDReticleMeterMode                                         OFFSET(get<T>, {0x9B8, 1, 0, 0})
	DMember(bool)                                      bShowTTDStatusEffectPreview                                 OFFSET(get<bool>, {0x9D0, 1, 0, 0})
	DMember(bool)                                      bShowDisguiseMeter                                          OFFSET(get<bool>, {0x9D1, 1, 0, 0})
	DMember(bool)                                      bShowEquipmentRepairWarning                                 OFFSET(get<bool>, {0x9E8, 1, 0, 0})
	DMember(bool)                                      bSimplifiedEquipmentRepairWarning                           OFFSET(get<bool>, {0xA00, 1, 0, 0})
	CMember(EWeaponSelectMode)                         WeaponSelectMode                                            OFFSET(get<T>, {0xA01, 1, 0, 0})
	CMember(EWeaponSelectAxisMode)                     WeaponSelectAxisMode                                        OFFSET(get<T>, {0xA02, 1, 0, 0})
	CMember(ESimplifiedLockpickHackingMode)            SimplifiedLockpickHackingMode                               OFFSET(get<T>, {0xA03, 1, 0, 0})
	DMember(bool)                                      bShowLootTooltips                                           OFFSET(get<bool>, {0xA04, 1, 0, 0})
	DMember(bool)                                      bShowLootControls                                           OFFSET(get<bool>, {0xA05, 1, 0, 0})
	CMember(EDialogSkillMode)                          DialogSkillMode                                             OFFSET(get<T>, {0xA06, 1, 0, 0})
	DMember(bool)                                      bShowTutorialNotifications                                  OFFSET(get<bool>, {0xA07, 1, 0, 0})
	DMember(float)                                     TooltipDelay                                                OFFSET(get<float>, {0xA08, 4, 0, 0})
	DMember(bool)                                      bUseEnlargedFontSize                                        OFFSET(get<bool>, {0xA0C, 1, 0, 0})
	DMember(int32_t)                                   OverrideFontModifier                                        OFFSET(get<int32_t>, {0xA14, 4, 0, 0})
	DMember(bool)                                      bShowPlayerHelmet                                           OFFSET(get<bool>, {0xA28, 1, 0, 0})
	DMember(bool)                                      bShowCompanionHelmets                                       OFFSET(get<bool>, {0xA29, 1, 0, 0})
	DMember(bool)                                      bCinematicKillCam                                           OFFSET(get<bool>, {0xA2A, 1, 0, 0})
	DMember(bool)                                      bHeadbobbing                                                OFFSET(get<bool>, {0xA40, 1, 0, 0})
	DMember(bool)                                      bConversationContinueOnVOEnd                                OFFSET(get<bool>, {0xA58, 1, 0, 0})
	DMember(bool)                                      bViewBaseItemStats                                          OFFSET(get<bool>, {0xA59, 1, 0, 0})
	CMember(ECompanionOutlineMode)                     CompanionOutlineMode                                        OFFSET(get<T>, {0xA5A, 1, 0, 0})
	DMember(bool)                                      bIsFreshUserSettings                                        OFFSET(get<bool>, {0xA5C, 1, 0, 0})
	DMember(bool)                                      bOneTimeSaveCompressionCompleted                            OFFSET(get<bool>, {0xA5D, 1, 0, 0})
	DMember(bool)                                      bOneTimeSaveINX1                                            OFFSET(get<bool>, {0xA5E, 1, 0, 0})
	DMember(bool)                                      bOneTimeSaveINX2                                            OFFSET(get<bool>, {0xA5F, 1, 0, 0})
	DMember(uint32_t)                                  SignedVersionOfEULA                                         OFFSET(get<uint32_t>, {0xA60, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaGameUserSettings.SetYAxisInverted
	// void SetYAxisInverted(bool Value);                                                                                       // [0x1854aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetXAxisInverted
	// void SetXAxisInverted(bool Value);                                                                                       // [0x1854a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetWeaponTooltipStatMode
	// void SetWeaponTooltipStatMode(EWeaponTooltipStatMode Mode);                                                              // [0x1854990] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetWeaponSelectMode
	// void SetWeaponSelectMode(EWeaponSelectMode ModeIn);                                                                      // [0x1854910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetWeaponSelectAxisMode
	// void SetWeaponSelectAxisMode(EWeaponSelectAxisMode ModeIn);                                                              // [0x1854890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetVSyncWrapper
	// void SetVSyncWrapper(bool bEnabled);                                                                                     // [0x18546f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetVoiceSoundVolume
	// void SetVoiceSoundVolume(float Value);                                                                                   // [0x1854810] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetViewBaseStats
	// void SetViewBaseStats(bool Value);                                                                                       // [0x1854780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetUISoundVolume
	// void SetUISoundVolume(float Value);                                                                                      // [0x1854670] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetTutorialsEnabled
	// void SetTutorialsEnabled(bool bEnabled);                                                                                 // [0x18545e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetTTDDisplayMode
	// void SetTTDDisplayMode(ETTDDisplayMode ModeIn);                                                                          // [0x18544e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetTooltipDelay
	// void SetTooltipDelay(float Delay);                                                                                       // [0x1854560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetSurvivalMeterMode
	// void SetSurvivalMeterMode(bool bVisibleIn);                                                                              // [0x1854450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetSSGIQuality
	// void SetSSGIQuality(int32_t Value);                                                                                      // [0x1853690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetSSGIMode
	// void SetSSGIMode(ESSGIMode Value);                                                                                       // [0x1853610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowWaypointMarkers
	// void SetShowWaypointMarkers(bool bShow);                                                                                 // [0x18543c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowTutorialNotifications
	// void SetShowTutorialNotifications(bool bShow);                                                                           // [0x1854330] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowTTDStatusEffectPreview
	// void SetShowTTDStatusEffectPreview(bool bShow);                                                                          // [0x18542a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowTTDScanner
	// void SetShowTTDScanner(bool bShow);                                                                                      // [0x1854210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowTTDReticleMeter
	// void SetShowTTDReticleMeter(ETTDReticleMeterMode ModeIn);                                                                // [0x1854190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowReticleFeedback
	// void SetShowReticleFeedback(bool bShow);                                                                                 // [0x1854100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowPlayerStatusEffects
	// void SetShowPlayerStatusEffects(bool bShow);                                                                             // [0x1854070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowPlayerHelmet
	// void SetShowPlayerHelmet(bool bShow);                                                                                    // [0x1853fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowLootTooltips
	// void SetShowLootTooltips(bool bShow);                                                                                    // [0x1853f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowLootControls
	// void SetShowLootControls(bool bShow);                                                                                    // [0x1853ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowLevelUpReminders
	// void SetShowLevelUpReminders(bool bShow);                                                                                // [0x1853e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowLevelUpNotification
	// void SetShowLevelUpNotification(bool bShow);                                                                             // [0x1853da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowInteractionOutlines
	// void SetShowInteractionOutlines(bool bShow);                                                                             // [0x1853d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowInteractionControls
	// void SetShowInteractionControls(bool bShow);                                                                             // [0x1853c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowFloatingDamageText
	// void SetShowFloatingDamageText(bool bShow);                                                                              // [0x1853bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowEquipmentRepairWarning
	// void SetShowEquipmentRepairWarning(bool bShow);                                                                          // [0x1853b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowEnemyHealthBars
	// void SetShowEnemyHealthBars(EEnemyHealthBarMode ModeIn);                                                                 // [0x1853ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowEnemyAwarenessMeters
	// void SetShowEnemyAwarenessMeters(bool bVisible);                                                                         // [0x1853a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowDisguiseMeter
	// void SetShowDisguiseMeter(bool bShow);                                                                                   // [0x18539c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowDirectionalDamageIndicators
	// void SetShowDirectionalDamageIndicators(EDirectionalDamageIndicatorMode ModeIn);                                         // [0x1853940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowCompass
	// void SetShowCompass(ECompassVisibilityMode ModeIn);                                                                      // [0x18538c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowCompanionPassiveCD
	// void SetShowCompanionPassiveCD(ECompanionAbilityPassiveCDMode ModeIn);                                                   // [0x1853840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowCompanionHelmets
	// void SetShowCompanionHelmets(bool bShow);                                                                                // [0x18537b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetShowCombatIndicator
	// void SetShowCombatIndicator(bool bShow);                                                                                 // [0x1853720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetRadialSensitivity
	// void SetRadialSensitivity(float Value);                                                                                  // [0x1853590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetQuestUpdateMode
	// void SetQuestUpdateMode(EQuestUpdateMode bShow);                                                                         // [0x1853510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetPseudoGodMode
	// void SetPseudoGodMode(bool Value);                                                                                       // [0x1853480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetPlayerStatusEffectTextMode
	// void SetPlayerStatusEffectTextMode(EPlayerStatusEffectTextMode ModeIn);                                                  // [0x1853400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetPlayerStatusBarMode
	// void SetPlayerStatusBarMode(EPlayerStatusBarMode ModeIn);                                                                // [0x1853380] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetPerformanceMode
	// void SetPerformanceMode(EPerformanceMode PerformanceModeIn);                                                             // [0x1853300] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetOffsetReticle
	// void SetOffsetReticle(bool bUseOffset);                                                                                  // [0x1853270] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetNotificationDuration
	// void SetNotificationDuration(float DurationIn);                                                                          // [0x18531f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMusicSoundVolume
	// void SetMusicSoundVolume(float Value);                                                                                   // [0x1853170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMouseSensitivity
	// void SetMouseSensitivity(float Value);                                                                                   // [0x18530f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMouseADSSensitivity
	// void SetMouseADSSensitivity(float Value);                                                                                // [0x1853070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMotionBlurScale
	// void SetMotionBlurScale(float NewMotionBlurScale);                                                                       // [0x1852ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMedicalInhalerUIMode
	// void SetMedicalInhalerUIMode(EMedicalInhalerMode InhalerModeIn);                                                         // [0x1852f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetMasterSoundVolume
	// void SetMasterSoundVolume(float Value);                                                                                  // [0x1852ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetLanguageMode
	// void SetLanguageMode(ELanguageMode LanguageModeIn, bool bPending);                                                       // [0x1852e20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetIsSimplifiedLockpickHackingMode
	// void SetIsSimplifiedLockpickHackingMode(ESimplifiedLockpickHackingMode ModeIn);                                          // [0x1852da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetIsSimplifiedEquipmentRepairWarning
	// void SetIsSimplifiedEquipmentRepairWarning(bool bShow);                                                                  // [0x1852d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetIsFreshUserSettings
	// void SetIsFreshUserSettings(bool Value);                                                                                 // [0x1852c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetInfiniteAmmo
	// void SetInfiniteAmmo(bool Value);                                                                                        // [0x1852bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetImpulseTriggerIntensity
	// void SetImpulseTriggerIntensity(float Value);                                                                            // [0x1852b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHUDVisibility
	// void SetHUDVisibility(bool bVisibilityIn);                                                                               // [0x1852950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHUDMode
	// void SetHUDMode(EHUDMode ModeIn);                                                                                        // [0x18528d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHeldWeaponDisplayTextMode
	// void SetHeldWeaponDisplayTextMode(EHeldWeaponDisplayText ModeIn);                                                        // [0x1852af0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHeldWeaponDisplayMode
	// void SetHeldWeaponDisplayMode(EHeldWeaponDisplayMode ModeIn);                                                            // [0x1852a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetHeadbobbing
	// void SetHeadbobbing(bool bEnabledIn);                                                                                    // [0x18529e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetGraphicsQuality
	// void SetGraphicsQuality(int32_t Value);                                                                                  // [0x1852840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetGodMode
	// void SetGodMode(bool Value);                                                                                             // [0x18527b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetGammaLevel
	// void SetGammaLevel(float GammaLevelIn);                                                                                  // [0x1852730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFullscreenModeThenBroadcast
	// void SetFullscreenModeThenBroadcast(TEnumAsByte<EWindowMode> Value);                                                     // [0x18526b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFSR2Mode
	// void SetFSR2Mode(EFSR2Mode Value);                                                                                       // [0x18525a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFSR2Enabled
	// void SetFSR2Enabled(bool Value);                                                                                         // [0x1852510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFPSLimit
	// void SetFPSLimit(EFPSLimit FPSLimitIn);                                                                                  // [0x1852490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFPSIndicatorMode
	// void SetFPSIndicatorMode(EFPSIndicatorMode ModeIn);                                                                      // [0x1852410] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFOV
	// void SetFOV(float FOVIn);                                                                                                // [0x1852390] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetFontSizeModifier
	// void SetFontSizeModifier(int32_t ModifierIn);                                                                            // [0x1852620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetEffectsSoundVolume
	// void SetEffectsSoundVolume(float Value);                                                                                 // [0x1852310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetDodgeDisplayMode
	// void SetDodgeDisplayMode(EDodgeDisplayMode ModeIn);                                                                      // [0x1852290] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetDialogSkillMode
	// void SetDialogSkillMode(EDialogSkillMode ModeIn);                                                                        // [0x1852210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetConversationSubtitleMode
	// void SetConversationSubtitleMode(EConversationSubtitleMode Mode);                                                        // [0x1852190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetConversationResponseVisibleDuringVO
	// void SetConversationResponseVisibleDuringVO(bool bVisible);                                                              // [0x1852100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetConversationContinueOnVOEnd
	// void SetConversationContinueOnVOEnd(bool Value);                                                                         // [0x1852070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerYAxisInverted
	// void SetControllerYAxisInverted(bool Value);                                                                             // [0x1851fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerXAxisInverted
	// void SetControllerXAxisInverted(bool Value);                                                                             // [0x1851f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerSensitivity
	// void SetControllerSensitivity(float Value);                                                                              // [0x1851ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerRumbleEnabled
	// void SetControllerRumbleEnabled(bool Value);                                                                             // [0x1851e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerRightOuterDeadZone
	// void SetControllerRightOuterDeadZone(float Value);                                                                       // [0x1851dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerRightInnerDeadZone
	// void SetControllerRightInnerDeadZone(float Value);                                                                       // [0x1851d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerLeftOuterDeadZone
	// void SetControllerLeftOuterDeadZone(float Value);                                                                        // [0x1851cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerLeftInnerDeadZone
	// void SetControllerLeftInnerDeadZone(float Value);                                                                        // [0x1851c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerEnableImpulseTriggers
	// void SetControllerEnableImpulseTriggers(bool bEnable);                                                                   // [0x1851bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerAutoSprintEnabled
	// void SetControllerAutoSprintEnabled(bool Value);                                                                         // [0x1851b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetControllerADSSensitivity
	// void SetControllerADSSensitivity(float Value);                                                                           // [0x1851aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionStatusUIMode
	// void SetCompanionStatusUIMode(ECompanionStatusMode ModeIn);                                                              // [0x1851a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionPassiveCDNotificationMode
	// void SetCompanionPassiveCDNotificationMode(ECompanionAbilityPassiveNotificationMode ModeIn);                             // [0x18519a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionOutlineMode
	// void SetCompanionOutlineMode(ECompanionOutlineMode Mode);                                                                // [0x1851920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionAbilityUIMode
	// void SetCompanionAbilityUIMode(ECompanionAbilityUIMode ModeIn);                                                          // [0x18518a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCompanionAbilityBindingMode
	// void SetCompanionAbilityBindingMode(ECompanionAbilityBindingMode ModeIn);                                                // [0x1851820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetColorblindModeEnabled
	// void SetColorblindModeEnabled(bool bEnabled);                                                                            // [0x18517b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCinematicSubtitlesVisible
	// void SetCinematicSubtitlesVisible(bool bVisible);                                                                        // [0x1851720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetCinematicKillCam
	// void SetCinematicKillCam(bool bEnabledIn);                                                                               // [0x1851690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetChromaticAberration
	// void SetChromaticAberration(bool bUseChromaticAberration);                                                               // [0x1851600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetBarkSubtitleMode
	// void SetBarkSubtitleMode(bool bVisible);                                                                                 // [0x1851570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAxisKeyBinds
	// void SetAxisKeyBinds(TArray<FInputAxisKeyMapping> OldValues, TArray<FInputAxisKeyMapping> NewValues);                    // [0x18512d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAutoCollapseItemViewers
	// void SetAutoCollapseItemViewers(bool bEnabled);                                                                          // [0x1851240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAreaNameMode
	// void SetAreaNameMode(EAreaNameMode AreaModeIn);                                                                          // [0x18511c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAntiAliasingMethod
	// void SetAntiAliasingMethod(int32_t Method);                                                                              // [0x1851130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAimingReticleMode
	// void SetAimingReticleMode(EReticleMode ModeIn);                                                                          // [0x18510b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetActionKeyBinds
	// void SetActionKeyBinds(TArray<FInputActionKeyMapping> OldValues, TArray<FInputActionKeyMapping> NewValues);              // [0x1850ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.SetAbilityControlUIMode
	// void SetAbilityControlUIMode(EAbilityControlMode ModeIn);                                                                // [0x1850e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.Set3DResolution
	// void Set3DResolution(float ResolutionIn);                                                                                // [0x1850dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.ResetAllKeyBinds
	// void ResetAllKeyBinds();                                                                                                 // [0x1850da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.OnDetectGraphics
	// void OnDetectGraphics();                                                                                                 // [0x1850d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.IsLegalSigned
	// bool IsLegalSigned();                                                                                                    // [0x1850d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.IsConversationResponseVisibleDuringVO
	// bool IsConversationResponseVisibleDuringVO();                                                                            // [0x1850d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetYAxisInverted
	// bool GetYAxisInverted();                                                                                                 // [0x1850cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetXAxisInverted
	// bool GetXAxisInverted();                                                                                                 // [0x1850cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetWeaponTooltipStatMode
	// EWeaponTooltipStatMode GetWeaponTooltipStatMode();                                                                       // [0x1850ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetWeaponSelectMode
	// EWeaponSelectMode GetWeaponSelectMode();                                                                                 // [0x1850c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetWeaponSelectAxisMode
	// EWeaponSelectAxisMode GetWeaponSelectAxisMode();                                                                         // [0x1850c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetVSyncWrapper
	// bool GetVSyncWrapper();                                                                                                  // [0x1850bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetVoiceSoundVolume
	// float GetVoiceSoundVolume();                                                                                             // [0x1850c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetViewBaseStats
	// bool GetViewBaseStats();                                                                                                 // [0x1850be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetUISoundVolume
	// float GetUISoundVolume();                                                                                                // [0x1850b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetTutorialsEnabled
	// bool GetTutorialsEnabled();                                                                                              // [0x1850b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetTTDDisplayMode
	// ETTDDisplayMode GetTTDDisplayMode();                                                                                     // [0x1850550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetTooltipDelay
	// float GetTooltipDelay();                                                                                                 // [0x1850b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetSurvivalMeterMode
	// bool GetSurvivalMeterMode();                                                                                             // [0x1850af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetSSGIQuality
	// int32_t GetSSGIQuality();                                                                                                // [0x1850640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowWaypointMarkers
	// bool GetShowWaypointMarkers();                                                                                           // [0x1850ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowTutorialNotifications
	// bool GetShowTutorialNotifications();                                                                                     // [0x1850a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowTTDStatusEffectPreview
	// bool GetShowTTDStatusEffectPreview();                                                                                    // [0x1850a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowTTDScanner
	// bool GetShowTTDScanner();                                                                                                // [0x1850a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowTTDReticleMeter
	// ETTDReticleMeterMode GetShowTTDReticleMeter();                                                                           // [0x1850a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowReticleFeedback
	// bool GetShowReticleFeedback();                                                                                           // [0x18509d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowPlayerStatusEffects
	// bool GetShowPlayerStatusEffects();                                                                                       // [0x18509a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowPlayerHelmet
	// bool GetShowPlayerHelmet();                                                                                              // [0x1850970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowLootTooltips
	// bool GetShowLootTooltips();                                                                                              // [0x1850940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowLootControls
	// bool GetShowLootControls();                                                                                              // [0x1850910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowLevelUpReminders
	// bool GetShowLevelUpReminders();                                                                                          // [0x18508e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowLevelUpNotification
	// bool GetShowLevelUpNotification();                                                                                       // [0x18508b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowInteractionOutlines
	// bool GetShowInteractionOutlines();                                                                                       // [0x1850880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowInteractionControls
	// bool GetShowInteractionControls();                                                                                       // [0x1850850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowFloatingDamageText
	// bool GetShowFloatingDamageText();                                                                                        // [0x1850820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowEquipmentRepairWarning
	// bool GetShowEquipmentRepairWarning();                                                                                    // [0x18507f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowEnemyHealthBars
	// EEnemyHealthBarMode GetShowEnemyHealthBars();                                                                            // [0x18507c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowEnemyAwarenessMeters
	// bool GetShowEnemyAwarenessMeters();                                                                                      // [0x1850790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowDisguiseMeter
	// bool GetShowDisguiseMeter();                                                                                             // [0x1850760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowDirectionalDamageIndicators
	// EDirectionalDamageIndicatorMode GetShowDirectionalDamageIndicators();                                                    // [0x1850730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowCompass
	// ECompassVisibilityMode GetShowCompass();                                                                                 // [0x1850700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowCompanionPassiveCD
	// ECompanionAbilityPassiveCDMode GetShowCompanionPassiveCD();                                                              // [0x18506d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowCompanionHelmets
	// bool GetShowCompanionHelmets();                                                                                          // [0x18506a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetShowCombatIndicator
	// bool GetShowCombatIndicator();                                                                                           // [0x1850670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetRadialSensitivity
	// float GetRadialSensitivity();                                                                                            // [0x1850610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetQuestUpdateMode
	// EQuestUpdateMode GetQuestUpdateMode();                                                                                   // [0x18505e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetPseudoGodMode
	// bool GetPseudoGodMode();                                                                                                 // [0x18505b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetPlayerStatusEffectTextMode
	// EPlayerStatusEffectTextMode GetPlayerStatusEffectTextMode();                                                             // [0x1850580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetPlayerStatusBarMode
	// EPlayerStatusBarMode GetPlayerStatusBarMode();                                                                           // [0x1850550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetPerformanceMode
	// EPerformanceMode GetPerformanceMode();                                                                                   // [0x1850520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetOffsetReticle
	// bool GetOffsetReticle();                                                                                                 // [0x18504f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetNotificationDuration
	// float GetNotificationDuration();                                                                                         // [0x18504c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMusicSoundVolume
	// float GetMusicSoundVolume();                                                                                             // [0x1850490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMouseSensitivity
	// float GetMouseSensitivity();                                                                                             // [0x1850460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMouseADSSensitivity
	// float GetMouseADSSensitivity();                                                                                          // [0x1850430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMotionBlurScale
	// float GetMotionBlurScale();                                                                                              // [0xb9d640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMedicalInhalerUIMode
	// EMedicalInhalerMode GetMedicalInhalerUIMode();                                                                           // [0x1850400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetMasterSoundVolume
	// float GetMasterSoundVolume();                                                                                            // [0x18503d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetLanguageMode
	// ELanguageMode GetLanguageMode();                                                                                         // [0x18503a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetIsSimplifiedLockpickHackingMode
	// ESimplifiedLockpickHackingMode GetIsSimplifiedLockpickHackingMode();                                                     // [0x1850370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetIsSimplifiedEquipmentRepairWarning
	// bool GetIsSimplifiedEquipmentRepairWarning();                                                                            // [0x1850340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetIsFreshUserSettings
	// bool GetIsFreshUserSettings();                                                                                           // [0x1850310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetInfiniteAmmo
	// bool GetInfiniteAmmo();                                                                                                  // [0x18502e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetImpulseTriggerIntensity
	// float GetImpulseTriggerIntensity();                                                                                      // [0x18502b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHUDVisibility
	// bool GetHUDVisibility();                                                                                                 // [0x18501f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHUDMode
	// EHUDMode GetHUDMode();                                                                                                   // [0x18501c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHeldWeaponDisplayTextMode
	// EHeldWeaponDisplayText GetHeldWeaponDisplayTextMode();                                                                   // [0x1850280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHeldWeaponDisplayMode
	// EHeldWeaponDisplayMode GetHeldWeaponDisplayMode();                                                                       // [0x1850250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetHeadbobbing
	// bool GetHeadbobbing();                                                                                                   // [0x1850220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetGraphicsQuality
	// int32_t GetGraphicsQuality();                                                                                            // [0x1850190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetGodMode
	// bool GetGodMode();                                                                                                       // [0x1850160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetGammaLevel
	// float GetGammaLevel();                                                                                                   // [0x1850130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFSR2Mode
	// EFSR2Mode GetFSR2Mode();                                                                                                 // [0x18500d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFSR2Enabled
	// bool GetFSR2Enabled();                                                                                                   // [0xb9d610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFPSLimit
	// EFPSLimit GetFPSLimit();                                                                                                 // [0x18500a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFPSIndicatorMode
	// EFPSIndicatorMode GetFPSIndicatorMode();                                                                                 // [0x1850070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFOV
	// float GetFOV();                                                                                                          // [0x1850040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetFontSizeModifier
	// int32_t GetFontSizeModifier();                                                                                           // [0x1850100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetEffectsSoundVolume
	// float GetEffectsSoundVolume();                                                                                           // [0x1850010] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetDodgeDisplayMode
	// EDodgeDisplayMode GetDodgeDisplayMode();                                                                                 // [0x184ffe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetDialogSkillMode
	// EDialogSkillMode GetDialogSkillMode();                                                                                   // [0x184ffb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetDefaultSSGIQualityForLevel
	// int32_t GetDefaultSSGIQualityForLevel(int32_t InQualityLevel);                                                           // [0x184ff20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetConversationSubtitleMode
	// EConversationSubtitleMode GetConversationSubtitleMode();                                                                 // [0x184fef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetConversationContinueOnVOEnd
	// bool GetConversationContinueOnVOEnd();                                                                                   // [0x184fed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerYAxisInverted
	// bool GetControllerYAxisInverted();                                                                                       // [0x184fea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerXAxisInverted
	// bool GetControllerXAxisInverted();                                                                                       // [0x184fe70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerSensitivity
	// float GetControllerSensitivity();                                                                                        // [0x184fe40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerRumbleEnabled
	// bool GetControllerRumbleEnabled();                                                                                       // [0x184fe10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerRightOuterDeadZone
	// float GetControllerRightOuterDeadZone();                                                                                 // [0x184fdf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerRightInnerDeadZone
	// float GetControllerRightInnerDeadZone();                                                                                 // [0x184fdd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerLeftOuterDeadZone
	// float GetControllerLeftOuterDeadZone();                                                                                  // [0x184fdb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerLeftInnerDeadZone
	// float GetControllerLeftInnerDeadZone();                                                                                  // [0x184fd90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerEnableImpulseTriggers
	// bool GetControllerEnableImpulseTriggers();                                                                               // [0x184fd60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerAutoSprintEnabled
	// bool GetControllerAutoSprintEnabled();                                                                                   // [0x184fd30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetControllerADSSensitivity
	// float GetControllerADSSensitivity();                                                                                     // [0x184fd00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionStatusUIMode
	// ECompanionStatusMode GetCompanionStatusUIMode();                                                                         // [0x184fcd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionPassiveCDNotificationMode
	// ECompanionAbilityPassiveNotificationMode GetCompanionPassiveCDNotificationMode();                                        // [0x184fca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionOutlineMode
	// ECompanionOutlineMode GetCompanionOutlineMode();                                                                         // [0x184fc80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionAbilityUIMode
	// ECompanionAbilityUIMode GetCompanionAbilityUIMode();                                                                     // [0x184fc50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCompanionAbilityBindingMode
	// ECompanionAbilityBindingMode GetCompanionAbilityBindingMode();                                                           // [0x184fc20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetColorblindModeEnabled
	// bool GetColorblindModeEnabled();                                                                                         // [0x184fc00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCinematicSubtitlesVisible
	// bool GetCinematicSubtitlesVisible();                                                                                     // [0x184fbd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetCinematicKillCam
	// bool GetCinematicKillCam();                                                                                              // [0x184fba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetChromaticAberration
	// bool GetChromaticAberration();                                                                                           // [0x184fb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetBarkSubtitlesVisible
	// bool GetBarkSubtitlesVisible();                                                                                          // [0x184fb40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAxisKeyBinds
	// TArray<FInputAxisKeyMapping> GetAxisKeyBinds(FName AxisName, float Scale);                                               // [0x184f970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAutoCollapseItemViewers
	// bool GetAutoCollapseItemViewers();                                                                                       // [0x184f950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAreaNameMode
	// EAreaNameMode GetAreaNameMode();                                                                                         // [0x184f920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAntiAliasingMethod
	// int32_t GetAntiAliasingMethod();                                                                                         // [0x184f8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAimingReticleMode
	// EReticleMode GetAimingReticleMode();                                                                                     // [0x184f8c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.GetActionKeyBinds
	// TArray<FInputActionKeyMapping> GetActionKeyBinds(FName ActionName);                                                      // [0x184f720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaGameUserSettings.GetAbilityControlUIMode
	// EAbilityControlMode GetAbilityControlUIMode();                                                                           // [0x184f6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaGameUserSettings.Get3DResolution
	// float Get3DResolution();                                                                                                 // [0x184f6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaGameViewportClient
/// Size: 0x0018 (0x000380 - 0x000398)
class UIndianaGameViewportClient : public UGameViewportClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:


	/// Functions
	// Function /Script/Indiana.IndianaGameViewportClient.SetSoundOverride
	// void SetSoundOverride();                                                                                                 // [0x185b870] Final|Native|Public  
};

/// Class /Script/Indiana.IndianaGlobals
/// Size: 0x0248 (0x000030 - 0x000278)
class UIndianaGlobals : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(class UGlobalWeaponData*)                  GlobalWeaponData                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UGlobalMeleeData*)                   GlobalMeleeData                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UGlobalArmorData*)                   GlobalArmorData                                             OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UGlobalTeamData*)                    GlobalTeamData                                              OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UGlobalFactionData*)                 GlobalFactionData                                           OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UGlobalAIData*)                      GlobalAIData                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UGlobalUIData*)                      GlobalUIData                                                OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UGlobalItemData*)                    GlobalItemData                                              OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UCharacterCreationData*)             GlobalCharacterCreationData                                 OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class URedirectorMap*)                     GlobalRedirectorMap                                         OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UIndianaStatGlobals*)                GlobalIndianaStatData                                       OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UGlobalAchievementData*)             GlobalAchievementData                                       OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UGlobalKeybindsData*)                GlobalKeybindData                                           OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UIndianaFormulas*)                   IndianaFormulas                                             OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UClass*)                             IndianaFormulasClass                                        OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UPointOfNoReturnRollbackData*)       PointOfNoReturnRollback                                     OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UClass*)                             PointOfNoReturnRollbackClass                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UClass*)                             IndianaSkillsClass                                          OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UClass*)                             IndianaAttributesClass                                      OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UCharacterDeathData*)                CharacterDeathData                                          OFFSET(get<T>, {0x1B0, 8, 0, 0})
	CMember(class UGlobalAudioData*)                   GlobalAudioData                                             OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(class UClass*)                             DefaultCurrencyItem                                         OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(class UShipTravelData*)                    ShipTravelData                                              OFFSET(get<T>, {0x1C8, 8, 0, 0})
	DMember(int32_t)                                   MaxCharacterLevel                                           OFFSET(get<int32_t>, {0x1D0, 4, 0, 0})
	DMember(int32_t)                                   MaxCharacterLevelINX1                                       OFFSET(get<int32_t>, {0x1D4, 4, 0, 0})
	DMember(int32_t)                                   MaxCharacterLevelINX2                                       OFFSET(get<int32_t>, {0x1D8, 4, 0, 0})
	DMember(int32_t)                                   MinLevelVariance                                            OFFSET(get<int32_t>, {0x1DC, 4, 0, 0})
	DMember(int32_t)                                   MaxLevelVariance                                            OFFSET(get<int32_t>, {0x1E0, 4, 0, 0})
	DMember(int32_t)                                   MaxItemLevel                                                OFFSET(get<int32_t>, {0x1E4, 4, 0, 0})
	DMember(float)                                     HungerPerSecond                                             OFFSET(get<float>, {0x1E8, 4, 0, 0})
	DMember(float)                                     ThirstPerSecond                                             OFFSET(get<float>, {0x1EC, 4, 0, 0})
	DMember(float)                                     ExhaustionPerSecond                                         OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     RestGainedPerSecondSleeping                                 OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(float)                                     MeleeDamageEffectivenessForBrokenWeapon                     OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     DamageThresholdEffectivenessForBrokenArmor                  OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     ShipTravelTimeSystemMapWidth                                OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     ShipTravelTimeMin                                           OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     ConversationFaceFXFinishMaxWaitTime                         OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     AutosaveLoadAnySaveDelaySeconds                             OFFSET(get<float>, {0x20C, 4, 0, 0})
	DMember(float)                                     EvidenceProximityIn                                         OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     EvidenceProximityOut                                        OFFSET(get<float>, {0x214, 4, 0, 0})
	CMember(class UAkAudioEvent*)                      EvidenceProximityEvent                                      OFFSET(get<T>, {0x218, 8, 0, 0})
	DMember(float)                                     EvidenceMinimumDurationPassed                               OFFSET(get<float>, {0x220, 4, 0, 0})
	CMember(class UConversationManager*)               ConversationManager                                         OFFSET(get<T>, {0x240, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaGlobals.GetTutorialManager
	// class UTutorialManager* GetTutorialManager();                                                                            // [0x1859c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/Indiana.TagToAudio
/// Size: 0x0010 (0x000000 - 0x000010)
class FTagToAudio : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGameplayTag)                              PrimaryItemSkill                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      AudioEvent                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.TagToAudioList
/// Size: 0x0010 (0x000000 - 0x000010)
class FTagToAudioList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FTagToAudio>)                       AudioForItems                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Indiana.IndianaItemAudioData
/// Size: 0x0050 (0x000038 - 0x000088)
class UIndianaItemAudioData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<EItemInteraction, FTagToAudioList>)   WeaponAndArmorAudio                                         OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Struct /Script/Indiana.WeightedImageData
/// Size: 0x0050 (0x000000 - 0x000050)
class FWeightedImageData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TWeakObjectPtr<class UTexture2D*>)         Image                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bCanShowTips                                                OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     WeightDecay                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x3C, 16, 0, 0})
};

/// Struct /Script/Indiana.LoadingImageContainer
/// Size: 0x0010 (0x000000 - 0x000010)
class FLoadingImageContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FWeightedImageData>)                LoadingImages                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.ConditionalizedLoadingImageContainer
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FConditionalizedLoadingImageContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FString)                                   DebugName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FWeightedImageData)                        Image                                                       OFFSET(getStruct<T>, {0x10, 80, 0, 0})
	SMember(FLogicalExpression)                        Conditional                                                 OFFSET(getStruct<T>, {0x60, 104, 0, 0})
};

/// Struct /Script/Indiana.LoadingScreenRegionMaps
/// Size: 0x0010 (0x000000 - 0x000010)
class FLoadingScreenRegionMaps : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<TWeakObjectPtr<UWorld*>>)           Maps                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.ConditionalizedLoadingTips
/// Size: 0x0070 (0x000000 - 0x000070)
class FConditionalizedLoadingTips : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FLocString)                                Tip                                                         OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLogicalExpression)                        Conditional                                                 OFFSET(getStruct<T>, {0x8, 104, 0, 0})
};

/// Class /Script/Indiana.IndianaLoadingScreenImageData
/// Size: 0x0188 (0x000038 - 0x0001C0)
class UIndianaLoadingScreenImageData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	CMember(TMap<EEndGameImageType, FLoadingImageContainer>) EndGameLoadingImages                                  OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TMap<TWeakObjectPtr<UWorld*>, FLoadingImageContainer>) MapSpecificLoadingImages                        OFFSET(get<T>, {0x88, 80, 0, 0})
	CMember(TMap<ELoadingScreenRegion, FLoadingImageContainer>) RegionSpecificLoadingImages                        OFFSET(get<T>, {0xD8, 80, 0, 0})
	CMember(TArray<FConditionalizedLoadingImageContainer>) StorySpecificLoadingImages                              OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(TArray<FWeightedImageData>)                GenericLoadingScreenImages                                  OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TMap<ELoadingScreenRegion, FLoadingScreenRegionMaps>) RegionMapping                                    OFFSET(get<T>, {0x148, 80, 0, 0})
	CMember(TArray<FLocString>)                        LoadingTips                                                 OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(TArray<FConditionalizedLoadingTips>)       ConditionalizedTips                                         OFFSET(get<T>, {0x1A8, 16, 0, 0})
	CMember(class UFont*)                              LoadingScreenFont                                           OFFSET(get<T>, {0x1B8, 8, 0, 0})
};

/// Class /Script/Indiana.IndianaLoadingScreenManager
/// Size: 0x0068 (0x000030 - 0x000098)
class UIndianaLoadingScreenManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<class UTexture2D*>)                 LoadingScreenImages                                         OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FString>)                           LoadingScreenTips                                           OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(class URenderThreadLoadingScreenWidget*)   LoadingScreenWidgetRef                                      OFFSET(get<T>, {0x70, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaLoadingScreenManager.DebugShowLoadingScreen
	// void DebugShowLoadingScreen(FName& MapName);                                                                             // [0x1859740] Final|Exec|Native|Public|HasOutParms 
};

/// Class /Script/Indiana.IndianaMathStatics
/// Size: 0x0000 (0x000030 - 0x000030)
class UIndianaMathStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.IndianaNavigationSystem
/// Size: 0x00F8 (0x001638 - 0x001730)
class UIndianaNavigationSystem : public UNavigationSystemV1
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5936;

public:


	/// Functions
	// Function /Script/Indiana.IndianaNavigationSystem.UnregisterArea
	// void UnregisterArea(class AActor* Source, EOccupationChannel Channel);                                                   // [0x185bff0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaNavigationSystem.TraceOccupation
	// bool TraceOccupation(class AActor* Source, EOccupationChannel Channel, FVector& Start, FVector& End);                    // [0x185bdc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.IndianaNavigationSystem.RegisterArea
	// void RegisterArea(class AActor* Source, EOccupationChannel Channel, FVector& Location, FVector& Extents, FRotator& Transform); // [0x185b2a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Indiana.RotatedBox
/// Size: 0x0050 (0x000000 - 0x000050)
class FRotatedBox : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FBox)                                      Box                                                         OFFSET(getStruct<T>, {0x0, 28, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x20, 48, 0, 0})
};

/// Class /Script/Indiana.IndianaNavModifierComponent
/// Size: 0x0068 (0x000110 - 0x000178)
class UIndianaNavModifierComponent : public UNavRelevantComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(class UClass*)                             AreaClass                                                   OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(bool)                                      bPhysicsCollisionOnly                                       OFFSET(get<bool>, {0x118, 1, 0, 0})
	CMember(class UPrimitiveComponent*)                CollisionComponent                                          OFFSET(get<T>, {0x120, 8, 0, 0})
	DMember(bool)                                      bIncludeAgentHeight                                         OFFSET(get<bool>, {0x128, 1, 0, 0})
	DMember(float)                                     Extents                                                     OFFSET(get<float>, {0x12C, 4, 0, 0})
	CMember(TArray<FRotatedBox>)                       CustomCollision                                             OFFSET(get<T>, {0x130, 16, 0, 0})
};

/// Class /Script/Indiana.IndianaPathFollowingComponent
/// Size: 0x00A8 (0x0002A8 - 0x000350)
class UIndianaPathFollowingComponent : public UPathFollowingComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:


	/// Functions
	// Function /Script/Indiana.IndianaPathFollowingComponent.OnCapsuleSizeChange
	// void OnCapsuleSizeChange();                                                                                              // [0x185a6c0] Final|Native|Private 
	// Function /Script/Indiana.IndianaPathFollowingComponent.EndStationaryRotate
	// void EndStationaryRotate();                                                                                              // [0x1859a50] Final|Native|Private 
};

/// Class /Script/Indiana.IndianaPlayerAudioComponent
/// Size: 0x0128 (0x000280 - 0x0003A8)
class UIndianaPlayerAudioComponent : public UIndianaAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	CMember(TMap<EPlayerAudioEvent, class UAkPlaySoundEventEffect*>) PlayerAudioEvents                             OFFSET(get<T>, {0x280, 80, 0, 0})
	DMember(float)                                     PlayerDetectionStateDangerToUndetectedEarlyTransitionTime   OFFSET(get<float>, {0x2D0, 4, 0, 0})
	CMember(TMap<EPlayerAudioDetectionState, float>)   RequiredRequestTimes                                        OFFSET(get<T>, {0x2D8, 80, 0, 0})
	DMember(float)                                     WallaCheckTime                                              OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     WallaFarDistance                                            OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     WallaMediumDistance                                         OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     WallaNearDistance                                           OFFSET(get<float>, {0x334, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaPlayerAudioComponent.TacticalTimeDilationStart
	// void TacticalTimeDilationStart();                                                                                        // [0x185bcf0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.TacticalTimeDilationEnd
	// void TacticalTimeDilationEnd(float Duration);                                                                            // [0x185bc70] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnStealthChange
	// void OnStealthChange(bool bStealthed);                                                                                   // [0x185b130] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnKillCameraStart
	// void OnKillCameraStart(class AActor* CameraTarget);                                                                      // [0x185adf0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnKillCameraEnd
	// void OnKillCameraEnd();                                                                                                  // [0x185add0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseUnequipped
	// void OnDisguiseUnequipped();                                                                                             // [0x185aad0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseRefilled
	// void OnDisguiseRefilled();                                                                                               // [0x185aab0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseMeterChanged
	// void OnDisguiseMeterChanged(float Meter);                                                                                // [0x185aa30] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseEquipped
	// void OnDisguiseEquipped(class UDisguiseData* Disguise);                                                                  // [0x185a9a0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseDrainStart
	// void OnDisguiseDrainStart();                                                                                             // [0x185a980] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDisguiseDrainEnd
	// void OnDisguiseDrainEnd();                                                                                               // [0x185a960] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnDetectionChange
	// void OnDetectionChange(EDetectionType DetectionType);                                                                    // [0x185a8e0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnCompanionCommandCooldownEnd
	// void OnCompanionCommandCooldownEnd(ECompanionCommand Command);                                                           // [0x185a7b0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bInCombat, bool bRestoring);                                                              // [0x185a6e0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.OnCalledShotCameraStep
	// void OnCalledShotCameraStep(class AActor* Attacker, ECalledShotCameraStep OldCameraStep, ECalledShotCameraStep NewCameraStep, bool bCloseRange); // [0x185a560] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerAudioComponent.GamePauseChanged
	// void GamePauseChanged(bool bPaused);                                                                                     // [0x1859b90] Final|Native|Protected 
};

/// Class /Script/Indiana.IndianaPlayerCharacter
/// Size: 0x0BA8 (0x000C18 - 0x0017C0)
class AIndianaPlayerCharacter : public AIndianaCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6080;

public:
	SMember(FMulticastInlineDelegate)                  OnStartGameSession                                          OFFSET(getStruct<T>, {0xC18, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEndGameSession                                            OFFSET(getStruct<T>, {0xC28, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCinematicModeChange                                       OFFSET(getStruct<T>, {0xC58, 16, 0, 0})
	CMember(class USkeletalMeshComponent*)             FPVMesh                                                     OFFSET(get<T>, {0xC88, 8, 0, 0})
	CMember(class UFPVCameraComponent*)                FPVCamera                                                   OFFSET(get<T>, {0xC90, 8, 0, 0})
	CMember(class UPlayerInfoComponent*)               PlayerInfoComponent                                         OFFSET(get<T>, {0xC98, 8, 0, 0})
	CMember(class UPlayerTargetingComponent*)          TargetingComponent                                          OFFSET(get<T>, {0xCA0, 8, 0, 0})
	CMember(class UStaminaComponent*)                  StaminaComponent                                            OFFSET(get<T>, {0xCA8, 8, 0, 0})
	CMember(class URecoilManagerComponent*)            RecoilManager                                               OFFSET(get<T>, {0xCB0, 8, 0, 0})
	CMember(class UAimAssistComponent*)                AimAssistComponent                                          OFFSET(get<T>, {0xCB8, 8, 0, 0})
	CMember(class UStealthComponent*)                  StealthComponent                                            OFFSET(get<T>, {0xCC0, 8, 0, 0})
	SMember(FName)                                     FPVCameraSocket                                             OFFSET(getStruct<T>, {0xCC8, 8, 0, 0})
	CMember(class UGameInputComponent*)                GameInputComponent                                          OFFSET(get<T>, {0xCD0, 8, 0, 0})
	CMember(class UIndianaPlayerAudioComponent*)       PlayerAudioComponent                                        OFFSET(get<T>, {0xCD8, 8, 0, 0})
	CMember(class UIndianaInputComponent*)             InteractionInputComponent                                   OFFSET(get<T>, {0xCE0, 8, 0, 0})
	CMember(class UHitEffectIndicatorComponent*)       HitEffectIndicatorComponent                                 OFFSET(get<T>, {0xCE8, 8, 0, 0})
	CMember(class UPostProcessComponent*)              PostProcessEffectsComponent                                 OFFSET(get<T>, {0xCF0, 8, 0, 0})
	SMember(FPostProcessSettings)                      Default_PP_Settings                                         OFFSET(getStruct<T>, {0xD00, 1392, 0, 0})
	CMember(class UPlayerInteractionComponent*)        InteractionComponent                                        OFFSET(get<T>, {0x1270, 8, 0, 0})
	CMember(class UPlayerEnvironmentInteractionComponent*) PlayerEnvironmentComponent                              OFFSET(get<T>, {0x1278, 8, 0, 0})
	CMember(class UConversationCamera*)                ConversationCameraComponent                                 OFFSET(get<T>, {0x1280, 8, 0, 0})
	CMember(class UCompanionManagerComponent*)         CompanionManagerComponent                                   OFFSET(get<T>, {0x1288, 8, 0, 0})
	CMember(class UCompanionPositionComponent*)        CompanionPositionComponent                                  OFFSET(get<T>, {0x1290, 8, 0, 0})
	CMember(class UCompanionCommandComponent*)         CompanionCommandComponent                                   OFFSET(get<T>, {0x1298, 8, 0, 0})
	CMember(class UInventoryComponent*)                PlayerInventory                                             OFFSET(get<T>, {0x12A0, 8, 0, 0})
	CMember(class UTimeDilationComponent*)             TimeDilationComponent                                       OFFSET(get<T>, {0x12A8, 8, 0, 0})
	CMember(class UTacticalTimeDilationComponent*)     TacticalTimeDilationComponent                               OFFSET(get<T>, {0x12B0, 8, 0, 0})
	CMember(class UClass*)                             TimeDilationClass                                           OFFSET(get<T>, {0x12B8, 8, 0, 0})
	CMember(class UClass*)                             ConversationLightingClass                                   OFFSET(get<T>, {0x12C0, 8, 0, 0})
	DMember(float)                                     MotionBlurAmount                                            OFFSET(get<float>, {0x12C8, 4, 0, 0})
	DMember(float)                                     PerfectDodgeTime                                            OFFSET(get<float>, {0x12CC, 4, 0, 0})
	DMember(float)                                     FastTravelDetectionRange                                    OFFSET(get<float>, {0x12D0, 4, 0, 0})
	DMember(float)                                     MeleeHitStopDuration                                        OFFSET(get<float>, {0x12D4, 4, 0, 0})
	DMember(float)                                     HolsterTimeSinceInteract                                    OFFSET(get<float>, {0x12D8, 4, 0, 0})
	CMember(TSet<TSoftObjectPtr<UClass*>>)             UniqueExaminablesLooted                                     OFFSET(get<T>, {0x12E0, 80, 0, 0})
	CMember(TSet<FLocString>)                          UniqueExaminablesNameLocStrings                             OFFSET(get<T>, {0x1330, 80, 0, 0})
	CMember(TSet<FLocString>)                          UniqueExaminablesDescriptionLocStrings                      OFFSET(get<T>, {0x1380, 80, 0, 0})
	SMember(FMulticastInlineDelegate)                  PreLevelTransition                                          OFFSET(getStruct<T>, {0x1498, 16, 0, 0})
	CMember(TArray<FGuid>)                             LoadingImagesSeen                                           OFFSET(get<T>, {0x14A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShipLocationChanged                                       OFFSET(getStruct<T>, {0x14B8, 16, 0, 0})
	CMember(class UShipDestinationData*)               CurrentShipLocation                                         OFFSET(get<T>, {0x1568, 8, 0, 0})
	CMember(class UPlayerPresetData*)                  PresetData                                                  OFFSET(get<T>, {0x15E8, 8, 0, 0})
	CMember(class URpgStat*)                           PickPocketStat                                              OFFSET(get<T>, {0x15F0, 8, 0, 0})
	CMember(class URpgStat*)                           HackStat                                                    OFFSET(get<T>, {0x15F8, 8, 0, 0})
	CMember(class UClass*)                             HackStatusEffect                                            OFFSET(get<T>, {0x1600, 8, 0, 0})
	CMember(class UClass*)                             DoubleHackStatusEffect                                      OFFSET(get<T>, {0x1608, 8, 0, 0})
	DMember(float)                                     WaitCameraFadeDuration                                      OFFSET(get<float>, {0x1658, 4, 0, 0})
	DMember(float)                                     BasePristineChance                                          OFFSET(get<float>, {0x1668, 4, 0, 0})
	CMember(class URpgStat*)                           PristineLootChanceStat                                      OFFSET(get<T>, {0x1670, 8, 0, 0})
	CMember(TArray<ESpecialObsidianID>)                CompanionsToTrackSKills                                     OFFSET(get<T>, {0x16E8, 16, 0, 0})
	DMember(float)                                     TimeBetweenGroinHits                                        OFFSET(get<float>, {0x1770, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEvidenceScannerActivated                                  OFFSET(getStruct<T>, {0x1798, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPONRRollbackDelegate                                      OFFSET(getStruct<T>, {0x17A8, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaPlayerCharacter.WeaponUnholstered
	// void WeaponUnholstered(class UWeapon* InWeapon);                                                                         // [0x185c160] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.WeaponHolstered
	// void WeaponHolstered(class UWeapon* InWeapon);                                                                           // [0x185c0d0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.WasPONRRollbackRecentlyPerformed
	// bool WasPONRRollbackRecentlyPerformed();                                                                                 // [0x185c0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.TravelToDestination
	// void TravelToDestination(class UTravelDestinationData* Destination, bool bTriggerAutosave);                              // [0x185bf20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.ToggleUnlockTravelPoints
	// void ToggleUnlockTravelPoints();                                                                                         // [0x185bda0] Final|Exec|Native|Static|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.TinkerAdvanceWeapon
	// void TinkerAdvanceWeapon(bool bIgnoreCost);                                                                              // [0x185bd10] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.SuppressInput
	// void SuppressInput(bool bSuppress);                                                                                      // [0x185bbe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetVisitedTravelDestination
	// void SetVisitedTravelDestination(class UTravelDestinationData* TravelDest);                                              // [0x185bb50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetVisitedRegion
	// void SetVisitedRegion(class UTravelRegionData* Region);                                                                  // [0x185bac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetTutorialsEnabled
	// void SetTutorialsEnabled(bool bEnabled);                                                                                 // [0x185ba30] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetTravelDestinationLocked
	// void SetTravelDestinationLocked(class UTravelDestinationData* TravelDest, bool bLocked);                                 // [0x185b960] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetTravelDestinationHidden
	// void SetTravelDestinationHidden(class UTravelDestinationData* TravelDest, bool bSetHidden);                              // [0x185b890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetMovementEnabled
	// void SetMovementEnabled(bool bNewIsMovementEnabled);                                                                     // [0x185b7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetIsInLowGravity
	// void SetIsInLowGravity(bool bNewIsInLowGravity);                                                                         // [0x185b750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetCurrentShipLocation
	// void SetCurrentShipLocation(class UShipDestinationData* ShipDest);                                                       // [0x185b610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetAwareOfTravelDestination
	// void SetAwareOfTravelDestination(class UTravelDestinationData* TravelDest);                                              // [0x185b580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetAwareOfRegion
	// void SetAwareOfRegion(class UTravelRegionData* Region);                                                                  // [0x185b4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.SetAllLevels
	// void SetAllLevels(int32_t Level);                                                                                        // [0x185b460] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnRollback
	// void PointOfNoReturnRollback();                                                                                          // [0x185b280] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnFixQuests
	// void PointOfNoReturnFixQuests();                                                                                         // [0x185b260] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnFixItems
	// void PointOfNoReturnFixItems();                                                                                          // [0x185b240] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnFixGlobalVars
	// void PointOfNoReturnFixGlobalVars();                                                                                     // [0x185b220] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.PointOfNoReturnFixConversations
	// void PointOfNoReturnFixConversations();                                                                                  // [0x185b200] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnUndetected
	// void OnUndetected();                                                                                                     // [0x185b1e0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnStopCrouch
	// void OnStopCrouch();                                                                                                     // [0x185b1c0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnSoftCoverExited
	// void OnSoftCoverExited();                                                                                                // [0x185b110] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnSoftCoverEntered
	// void OnSoftCoverEntered();                                                                                               // [0x185b0f0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerStealthExitedBP
	// void OnPlayerStealthExitedBP();                                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerStealthEnteredBP
	// void OnPlayerStealthEnteredBP();                                                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerSoftCoverExitedBP
	// void OnPlayerSoftCoverExitedBP();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerSoftCoverEnteredBP
	// void OnPlayerSoftCoverEnteredBP();                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerInventoryItemConsumed
	// void OnPlayerInventoryItemConsumed(FItemStack& ItemStack);                                                               // [0x185b050] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPlayerInventoryItemAdded
	// void OnPlayerInventoryItemAdded(FItemStack& ItemStack);                                                                  // [0x185afb0] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPauseStateChanged
	// void OnPauseStateChanged(bool bIsPaused);                                                                                // [0x185af20] Final|Native|Private 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnPartyCombatDamageTaken
	// void OnPartyCombatDamageTaken(FCauseDamageInfo& DamageInfo);                                                             // [0x185ae80] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnJumpLanded
	// void OnJumpLanded(float FallDistance);                                                                                   // [0x185ad50] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnHit
	// void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x185ab70] Final|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnDodged
	// void OnDodged(EDodgeDirection EDodgeDirection);                                                                          // [0x185aaf0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnDetected
	// void OnDetected(class AActor* Detector);                                                                                 // [0x185a850] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OnCrouchComplete
	// void OnCrouchComplete();                                                                                                 // [0x185a830] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.OffsetReticleChanged
	// void OffsetReticleChanged(bool bUseOffsetReticle);                                                                       // [0x185a4d0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.MentionPointOfInterest
	// void MentionPointOfInterest(class UPointOfInterestData* POIData);                                                        // [0x185a440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.MakePointOfInterestDiscoverable
	// void MakePointOfInterestDiscoverable(class UPointOfInterestData* POIData, bool bStillHidden);                            // [0x185a370] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsTravelDestinationLocked
	// bool IsTravelDestinationLocked(class UTravelDestinationData* TravelDest);                                                // [0x185a2d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsTravelDestinationHidden
	// bool IsTravelDestinationHidden(class UTravelDestinationData* TravelDest);                                                // [0x185a230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsShipCurrentlyAt
	// bool IsShipCurrentlyAt(class UTravelDestinationData* ShipDest);                                                          // [0x185a190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsAwareOfTravelDestination
	// bool IsAwareOfTravelDestination(class UTravelDestinationData* TravelDest);                                               // [0x185a0f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsAwareOfRegion
	// bool IsAwareOfRegion(class UTravelRegionData* Region);                                                                   // [0x185a050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.IsAwareOfPointOfInterest
	// bool IsAwareOfPointOfInterest(class UPointOfInterestData* POIData);                                                      // [0x1859fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.InitiateTravelToShipLocation
	// void InitiateTravelToShipLocation();                                                                                     // [0x1859f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HidePointOfInterest
	// void HidePointOfInterest(class UPointOfInterestData* POIData);                                                           // [0x1859f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HeadbobbingChanged
	// void HeadbobbingChanged(bool bHeadbobbing);                                                                              // [0x8d75c0] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.HasVisitedTravelDestination
	// bool HasVisitedTravelDestination(class UTravelDestinationData* TravelDest);                                              // [0x1859e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HasVisitedRegion
	// bool HasVisitedRegion(class UTravelRegionData* Region);                                                                  // [0x1859dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HasOnlyHeardAboutPointOfInterest
	// bool HasOnlyHeardAboutPointOfInterest(class UPointOfInterestData* POIData);                                              // [0x1859d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.HasDiscoveredPointOfInterest
	// bool HasDiscoveredPointOfInterest(class UPointOfInterestData* POIData);                                                  // [0x1859c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.GetIndianaPC
	// class AIndianaPlayerCharacter* GetIndianaPC();                                                                           // [0x1859c20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaPlayerCharacter.EvidenceScannerActivated
	// void EvidenceScannerActivated(bool bActivated);                                                                          // [0x1859b00] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.EquippedWeaponChanged
	// void EquippedWeaponChanged(class UWeapon* NewlyEquippedWeapon);                                                          // [0x1859a70] Final|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerCharacter.DiscoverPointOfInterest
	// void DiscoverPointOfInterest(class UPointOfInterestData* POIData, bool bCanAwardXP);                                     // [0x1859980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_TravelToDestination
	// void DebugTravel_TravelToDestination(FName& TravelDestination);                                                          // [0x18598f0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetVisitedRegion
	// void DebugTravel_SetVisitedRegion(FName& Region, bool bNewVisited);                                                      // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetVisitedDestination
	// void DebugTravel_SetVisitedDestination(FName& TravelDestination, bool bNewVisited);                                      // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetShipLocation
	// void DebugTravel_SetShipLocation(FName& ShipLocation);                                                                   // [0x18598f0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetDestinationLocked
	// void DebugTravel_SetDestinationLocked(FName& TravelDestination, bool bNewLocked);                                        // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetDestinationHidden
	// void DebugTravel_SetDestinationHidden(FName& TravelDestination, bool bNewHidden);                                        // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetAwareRegion
	// void DebugTravel_SetAwareRegion(FName& Region, bool bNewAware);                                                          // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugTravel_SetAwareDestination
	// void DebugTravel_SetAwareDestination(FName& TravelDestination, bool bNewAware);                                          // [0x1859810] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugSoftCoverExited
	// void DebugSoftCoverExited();                                                                                             // [0x18597f0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.DebugSoftCoverEntered
	// void DebugSoftCoverEntered();                                                                                            // [0x18597d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerCharacter.CanDiscoverPointOfInterest
	// bool CanDiscoverPointOfInterest(class UPointOfInterestData* POIData);                                                    // [0x18596a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.CanAccessTravelDestination
	// bool CanAccessTravelDestination(class UTravelDestinationData* TravelDest);                                               // [0x1859600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerCharacter.AdjustWeaponHealth
	// void AdjustWeaponHealth(float Amount);                                                                                   // [0x1859580] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.IndianaPlayerController
/// Size: 0x0058 (0x000628 - 0x000680)
class AIndianaPlayerController : public APlayerController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:


	/// Functions
	// Function /Script/Indiana.IndianaPlayerController.UnpinGlobalVariable
	// void UnpinGlobalVariable(FString GlobalVariable);                                                                        // [0x18637f0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.ToggleQuestLog
	// void ToggleQuestLog();                                                                                                   // [0x18637b0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.TogglePauseMenu
	// void TogglePauseMenu();                                                                                                  // [0x1863790] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.ToggleMap
	// void ToggleMap();                                                                                                        // [0x1863770] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleLedger
	// void ToggleLedger();                                                                                                     // [0x1863750] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleInventory
	// void ToggleInventory();                                                                                                  // [0x1863730] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleCompanionsSecondScreen
	// void ToggleCompanionsSecondScreen();                                                                                     // [0x1863710] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleCompanions
	// void ToggleCompanions();                                                                                                 // [0x18636f0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.ToggleCharacterSummary
	// void ToggleCharacterSummary();                                                                                           // [0x18636d0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.SetYAxisInverted
	// void SetYAxisInverted(bool bIsInverted);                                                                                 // [0x18635a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetXAxisInverted
	// void SetXAxisInverted(bool bIsInverted);                                                                                 // [0x1863510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetMouseSensitivity
	// void SetMouseSensitivity(float Value);                                                                                   // [0x18633c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetMouseADSSensitivity
	// void SetMouseADSSensitivity(float Value);                                                                                // [0x1863340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetImpulseTriggerIntensity
	// void SetImpulseTriggerIntensity(float Value);                                                                            // [0x18632c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetGlobalVariable
	// void SetGlobalVariable(FString GlobalVariable, int32_t Value);                                                           // [0x181f590] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.SetControllerYAxisInverted
	// void SetControllerYAxisInverted(bool bIsInverted);                                                                       // [0x18631a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetControllerXAxisInverted
	// void SetControllerXAxisInverted(bool bIsInverted);                                                                       // [0x1863110] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetControllerEnableImpulseTriggers
	// void SetControllerEnableImpulseTriggers(bool bIsEnabled);                                                                // [0x1863080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.SetAutoSprintEnabled
	// void SetAutoSprintEnabled(bool bIsEnabled);                                                                              // [0x1862ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.PlayChatterOnTarget
	// void PlayChatterOnTarget(EChatterEventType ChatterEvent);                                                                // [0x1862d50] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.PinGlobalVariable
	// void PinGlobalVariable(FString GlobalVariable);                                                                          // [0x1862eb0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.OpenQuestLog
	// void OpenQuestLog();                                                                                                     // [0x1862e70] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenMap
	// void OpenMap();                                                                                                          // [0x1862e50] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenLedger
	// void OpenLedger();                                                                                                       // [0x1862e30] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenInventory
	// void OpenInventory();                                                                                                    // [0x1862e10] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenCompanions
	// void OpenCompanions();                                                                                                   // [0x1862df0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OpenCharacterSummary
	// void OpenCharacterSummary();                                                                                             // [0x1862dd0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x1862d50] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnKeyBindsReset
	// void OnKeyBindsReset();                                                                                                  // [0x18628f0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnAxisMappingRemoved
	// void OnAxisMappingRemoved(FInputAxisKeyMapping Value);                                                                   // [0x1862750] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnAxisMappingAdded
	// void OnAxisMappingAdded(FInputAxisKeyMapping Value);                                                                     // [0x18625b0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnActionMappingRemoved
	// void OnActionMappingRemoved(FInputActionKeyMapping Value);                                                               // [0x1862430] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.OnActionMappingAdded
	// void OnActionMappingAdded(FInputActionKeyMapping Value);                                                                 // [0x18622b0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.IsYAxisInverted
	// bool IsYAxisInverted();                                                                                                  // [0x1862280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.IsXAxisInverted
	// bool IsXAxisInverted();                                                                                                  // [0x1862250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.InputKey
	// bool InputKey(FKey Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);                       // [0x1862090] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.InputAxis
	// bool InputAxis(FKey Key, float Delta, float DeltaTime, int32_t NumSamples, bool bGamepad);                               // [0x1861e90] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.GetMouseSensitivity
	// float GetMouseSensitivity();                                                                                             // [0x1861d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.GetMouseADSSensitivity
	// float GetMouseADSSensitivity();                                                                                          // [0x1861d10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.GetInteractHoldTime
	// float GetInteractHoldTime();                                                                                             // [0x1861ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaPlayerController.GetIndianaPlayerController
	// class AIndianaPlayerController* GetIndianaPlayerController();                                                            // [0x1861cc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.IndianaPlayerController.DebugSpawnCompanion
	// void DebugSpawnCompanion(FName CompanionName);                                                                           // [0x1861880] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerController.DebugSpawnAICharacter
	// class AIndianaAiCharacter* DebugSpawnAICharacter(FName AICharacterAssetName);                                            // [0x18617e0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.IndianaPlayerController.DebugRevertDutchAngle
	// void DebugRevertDutchAngle(float Axis);                                                                                  // [0x18616d0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.DebugDynamicallyReplaceCompanion
	// void DebugDynamicallyReplaceCompanion(FName OldCompanionName, FName NewCompanionName);                                   // [0x1861600] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerController.DebugDutchAngleAdjustment
	// void DebugDutchAngleAdjustment(float Axis);                                                                              // [0x1861580] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.CloseLedger
	// void CloseLedger();                                                                                                      // [0x1860fa0] Final|Native|Public  
	// Function /Script/Indiana.IndianaPlayerController.AsyncSpawnCompanion
	// class AIndianaAiCharacter* AsyncSpawnCompanion(ESpecialObsidianID CompanionID);                                          // [0x1860ef0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaPlayerController.AddStickYawInput
	// void AddStickYawInput(float Val);                                                                                        // [0x1860e60] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.AddStickRollInput
	// void AddStickRollInput(float Val);                                                                                       // [0x1860dd0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaPlayerController.AddStickPitchInput
	// void AddStickPitchInput(float Val);                                                                                      // [0x1860d40] Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaPlayerInput
/// Size: 0x0018 (0x0003B8 - 0x0003D0)
class UIndianaPlayerInput : public UPlayerInput
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
};

/// Class /Script/Indiana.IndianaPlayerStart
/// Size: 0x0030 (0x0002E8 - 0x000318)
class AIndianaPlayerStart : public APlayerStart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UTravelDestinationData*)             TravelDestinationData                                       OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  LeftCompanion                                               OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  RightCompanion                                              OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  FollowerCompanion                                           OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               AwareBounds                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               VisitedBounds                                               OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaPlayerStart.OnPlayerPawnOverlappedVisited
	// void OnPlayerPawnOverlappedVisited(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1862b30] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerStart.OnPlayerPawnOverlappedAwareness
	// void OnPlayerPawnOverlappedAwareness(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1862910] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.IndianaPlayerStart.GetDebugString
	// FString GetDebugString();                                                                                                // [0x1861c10] Final|Native|Public|Const 
	// Function /Script/Indiana.IndianaPlayerStart.GetCompanionSpawnLocation
	// bool GetCompanionSpawnLocation(FString CompanionCapsuleName, FVector& Location, FRotator& Rotation, bool bFeetLocation); // [0x1861a60] Final|Native|Public|HasOutParms|HasDefaults|Const 
};

/// Class /Script/Indiana.IndianaProjMovementComponent
/// Size: 0x0018 (0x000218 - 0x000230)
class UIndianaProjMovementComponent : public UProjectileMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	DMember(bool)                                      bIsPerfectHoming                                            OFFSET(get<bool>, {0x218, 1, 1, 0})
	DMember(bool)                                      bBounceOffActors                                            OFFSET(get<bool>, {0x218, 1, 1, 1})
	DMember(float)                                     HomingDotThreshold                                          OFFSET(get<float>, {0x21C, 4, 0, 0})
};

/// Struct /Script/Indiana.SkillUnlockEffect
/// Size: 0x0018 (0x000000 - 0x000018)
class FSkillUnlockEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(ESkill)                                    EquippedWeaponSkill                                         OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   MinSkill                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FLocString)                                UnlockTierString                                            OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Indiana.IndianaSkill
/// Size: 0x0048 (0x000030 - 0x000078)
class UIndianaSkill : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(EAttribute)                                PrimaryAttribute                                            OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(EAttribute)                                SecondaryAttribute                                          OFFSET(get<T>, {0x31, 1, 0, 0})
	CMember(TArray<FRangedStatModifierDescription>)    SkillStatMods                                               OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FRangedStatModifierDescription>)    CompanionSkillStatMods                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FSkillUnlockEffect>)                UnlockEffects                                               OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FLocString)                                SkillCategory                                               OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FLocString)                                DescriptionFormat                                           OFFSET(getStruct<T>, {0x70, 8, 0, 0})
};

/// Class /Script/Indiana.HandGunsSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UHandGunsSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.LongGunsSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class ULongGunsSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.HeavyWeaponsSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UHeavyWeaponsSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.SneakSkill
/// Size: 0x0008 (0x000078 - 0x000080)
class USneakSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class URpgStat*)                           UnlockStat                                                  OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.LockpickSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class ULockpickSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.EngineeringSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UEngineeringSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.HackSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UHackSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.MedicalSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UMedicalSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.LightMeleeSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class ULightMeleeSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.HeavyMeleeSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UHeavyMeleeSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.ScienceSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UScienceSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.PersuadeSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UPersuadeSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.LieSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class ULieSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.IntimidateSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UIntimidateSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.DodgeSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UDodgeSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.BlockSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UBlockSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.InspirationSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UInspirationSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.DeterminationSkill
/// Size: 0x0000 (0x000078 - 0x000078)
class UDeterminationSkill : public UIndianaSkill
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Class /Script/Indiana.IndianaSkills
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UIndianaSkills : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UClass*)                             SkillImplementations                                        OFFSET(get<T>, {0x30, 144, 0, 0})
};

/// Struct /Script/Indiana.SkillsArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FSkillsArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<ESkill>)                            Skills                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.AttributesArray
/// Size: 0x0010 (0x000000 - 0x000010)
class FAttributesArray : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<EAttribute>)                        Attributes                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.SkillCheck
/// Size: 0x0018 (0x000000 - 0x000018)
class FSkillCheck : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   MinSkill                                                    OFFSET(get<int32_t>, {0x0, 20, 0, 0})
	DMember(float)                                     Variance                                                    OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Class /Script/Indiana.IndianaStatGlobals
/// Size: 0x00E8 (0x000038 - 0x000120)
class UIndianaStatGlobals : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TMap<ESkillCategory, FSkillsArray>)        SkillCategoryMap                                            OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TMap<EAttributeGroup, FAttributesArray>)   AttributeGroupMap                                           OFFSET(get<T>, {0x88, 80, 0, 0})
	CMember(TArray<FSkillCheck>)                       SkillChecksByLevel                                          OFFSET(get<T>, {0x108, 16, 0, 0})
	DMember(float)                                     PreDLCSkillCheckMax                                         OFFSET(get<float>, {0x118, 4, 0, 0})
};

/// Class /Script/Indiana.IndianaStats
/// Size: 0x00E8 (0x000030 - 0x000118)
class UIndianaStats : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TArray<class URpgStat*>)                   NativeStats                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(class URpgStat*)                           AttributeStats                                              OFFSET(get<T>, {0x40, 72, 0, 0})
	CMember(class URpgStat*)                           SkillStats                                                  OFFSET(get<T>, {0x88, 144, 0, 0})
};

/// Class /Script/Indiana.IndianaTargetPoint
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class AIndianaTargetPoint : public ATargetPoint
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x2B8, 8, 0, 0})
};

/// Struct /Script/Indiana.TextAnimationData
/// Size: 0x0008 (0x000000 - 0x000008)
class FTextAnimationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   CharactersPerSecond                                         OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bInstant                                                    OFFSET(get<bool>, {0x4, 1, 0, 0})
};

/// Class /Script/Indiana.IndianaTextAnimationData
/// Size: 0x0050 (0x000038 - 0x000088)
class UIndianaTextAnimationData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<EIndianaTextAnimationType, FTextAnimationData>) IndianaTextAnimationData                          OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.IndianaUI
/// Size: 0x02E8 (0x0003A8 - 0x000690)
class AIndianaUI : public AHUD
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1680;

public:
	CMember(class UClass*)                             HUDClass                                                    OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UClass*)                             LedgerWidgetClass                                           OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UClass*)                             InventoryWidgetClass                                        OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UClass*)                             PauseMenuWidgetClass                                        OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UClass*)                             DeathMenuWidgetClass                                        OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UClass*)                             SettingsMenuWidgetClass                                     OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UClass*)                             ConversationWidgetClass                                     OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UClass*)                             ConversationSubtitleWidgetClass                             OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UClass*)                             SlideshowWidgetClass                                        OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UClass*)                             ComputerTerminalWidgetClass                                 OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UClass*)                             ItemContainerClass                                          OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UClass*)                             LevelUpNotificationClass                                    OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UClass*)                             DebugOverlayWidgetClass                                     OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UClass*)                             ContextMenuClass                                            OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UClass*)                             ItemInspectorClass                                          OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UClass*)                             WorkbenchClass                                              OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UClass*)                             VendorClass                                                 OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UClass*)                             ItemTransferClass                                           OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UClass*)                             ToolTipContainerClass                                       OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UClass*)                             GenericDialogBoxClass                                       OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class UClass*)                             DialogWarningBoxClass                                       OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UClass*)                             GenericDialogBoxRespecClass                                 OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class UClass*)                             GenericMoviePlayerClass                                     OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class UClass*)                             CinematicPlayerClass                                        OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(class UClass*)                             ExaminableClass                                             OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class UClass*)                             GenericItemToolTipClass                                     OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(class UClass*)                             HealthKitToolTipClass                                       OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UClass*)                             WaitTimeWidget                                              OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(class UClass*)                             TutorialPopupWidgetClass                                    OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(class UClass*)                             SubtitleInterfaceClass                                      OFFSET(get<T>, {0x550, 8, 0, 0})
	CMember(class UClass*)                             SaveLoadClass                                               OFFSET(get<T>, {0x558, 8, 0, 0})
	CMember(class UTexture2D*)                         Missing32                                                   OFFSET(get<T>, {0x560, 8, 0, 0})
	CMember(class UTexture2D*)                         Missing64                                                   OFFSET(get<T>, {0x568, 8, 0, 0})
	CMember(class UTexture2D*)                         Missing128                                                  OFFSET(get<T>, {0x570, 8, 0, 0})
	CMember(class UTexture2D*)                         Missing256                                                  OFFSET(get<T>, {0x578, 8, 0, 0})
	CMember(class UToolTipContainerWidget*)            ToolTipContainerWidget                                      OFFSET(get<T>, {0x5B0, 8, 0, 0})
	CMember(TArray<class UClass*>)                     DamageTypes                                                 OFFSET(get<T>, {0x610, 16, 0, 0})
	CMember(class UArmorComponent*)                    ArmorComponent                                              OFFSET(get<T>, {0x620, 8, 0, 0})
	CMember(class UIndianaItemAudioData*)              UIItemAudioData                                             OFFSET(get<T>, {0x628, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UTexture2D*>>)       DebugOverlays                                               OFFSET(get<T>, {0x638, 16, 0, 0})
	CMember(class UDebugOverlayWidget*)                DebugOverlayWidget                                          OFFSET(get<T>, {0x650, 8, 0, 0})
	CMember(class UWorldSpaceDamageTextGenerator*)     DamageTextManager                                           OFFSET(get<T>, {0x658, 8, 0, 0})
	CMember(class UClass*)                             DamageTextManagerClass                                      OFFSET(get<T>, {0x668, 8, 0, 0})
	CMember(class UStatusTagGenerator*)                StatusTagManager                                            OFFSET(get<T>, {0x670, 8, 0, 0})
	CMember(class UClass*)                             StatusTagManagerClass                                       OFFSET(get<T>, {0x678, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaUI.ToggleSafeSpace
	// void ToggleSafeSpace();                                                                                                  // [0x18637d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.ToggleResurrect
	// void ToggleResurrect();                                                                                                  // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.ToggleDamageTextVisibility
	// void ToggleDamageTextVisibility();                                                                                       // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.StartWorkbench
	// void StartWorkbench();                                                                                                   // [0x18636b0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.ShowItemOnDisplay
	// void ShowItemOnDisplay(class UClass* ItemIn);                                                                            // [0x1863630] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.SetSoundMixVolume
	// void SetSoundMixVolume(class USoundMix* SoundMix, float Volume);                                                         // [0x1863440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.SetHudVisible
	// void SetHudVisible(bool bNewVisible);                                                                                    // [0x1863230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.RemoveSubtitleManagerInstance
	// void RemoveSubtitleManagerInstance(class USubtitleManagerWidget* ManagerWidget);                                         // [0x1862f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.OverlayCycle
	// void OverlayCycle();                                                                                                     // [0x1862e90] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.GetUserWidget
	// class UIndianaInterfaceUserWidget* GetUserWidget(ECheckBranches& Branches, class UClass* WidgetClass);                   // [0x1861da0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUI.GetSlideshowWidget
	// class USlideshowWidget* GetSlideshowWidget();                                                                            // [0x1861d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUI.GetHUD
	// class UHUDWidget* GetHUD();                                                                                              // [0x1861c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.IndianaUI.ForceHUDHidden
	// void ForceHUDHidden(bool bForceHidden);                                                                                  // [0x18619d0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.FontSizeModifierChanged
	// void FontSizeModifierChanged(int32_t ModifierIn);                                                                        // [0x1861940] Final|Native|Public  
	// Function /Script/Indiana.IndianaUI.DebugToggleDLC
	// void DebugToggleDLC();                                                                                                   // [0x1861910] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.DebugStringTables
	// void DebugStringTables();                                                                                                // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.DebugStringIDsAndTables
	// void DebugStringIDsAndTables();                                                                                          // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.DebugStringIDs
	// void DebugStringIDs();                                                                                                   // [0xbb4890] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.DebugSetFontScaling
	// void DebugSetFontScaling(int32_t ModifierIn);                                                                            // [0x1861750] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.CreateSubtitleManagerInstanceForMSSP
	// class USubtitleManagerWidget* CreateSubtitleManagerInstanceForMSSP(class UMovieSceneSequencePlayer* MovieSceneSequencePlayer); // [0x18614e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.CreateSubtitleManagerInstance
	// class USubtitleManagerWidget* CreateSubtitleManagerInstance(class UMediaPlayer* MediaPlayer);                            // [0x1861440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.CreateGenericMoviePlayer
	// class UMoviePlayerWidget* CreateGenericMoviePlayer();                                                                    // [0x1861410] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.CreateExaminable
	// void CreateExaminable(FLocString& NameString, FLocString& DescriptionString, FLocString& ActionString, FName& RemoteEventOnExaminationEnd); // [0x1861260] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.CreateCinematicPlayer
	// class UCinematicPlayerWidget* CreateCinematicPlayer();                                                                   // [0x1861230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.ConstructUserWidget
	// class UIndianaInterfaceUserWidget* ConstructUserWidget(ECheckBranches& Branches, class UClass* WidgetClass);             // [0x1861140] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaUI.ColorblindMode
	// void ColorblindMode(EColorVisionDeficiency Deficiency, int32_t Severity, bool bCorrection, bool bCorrectionPreview);     // [0x1860fe0] Final|Exec|Native|Public 
	// Function /Script/Indiana.IndianaUI.CloseWorkbench
	// void CloseWorkbench();                                                                                                   // [0x1860fc0] Final|Native|Public  
	// Function /Script/Indiana.IndianaUI.CloseGenericMoviePlayer
	// void CloseGenericMoviePlayer();                                                                                          // [0x1860f80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaUIAudioData
/// Size: 0x0050 (0x000038 - 0x000088)
class UIndianaUIAudioData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<EIndianaAudioEvent, class UAkAudioEvent*>) AudioEvents                                            OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Struct /Script/Indiana.OpacityWrapper
/// Size: 0x0004 (0x000000 - 0x000004)
class FOpacityWrapper : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     OpacityValue                                                OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Class /Script/Indiana.IndianaUIColorsData
/// Size: 0x00A0 (0x000038 - 0x0000D8)
class UIndianaUIColorsData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TMap<EIndianaUIColorType, FLinearColor>)   IndianaUIColors                                             OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TMap<EIndianaUIOpacityType, FOpacityWrapper>) IndianaUIOpacitySettings                                 OFFSET(get<T>, {0x88, 80, 0, 0})
};

/// Class /Script/Indiana.IndianaUIControllerIconsData
/// Size: 0x00F0 (0x000038 - 0x000128)
class UIndianaUIControllerIconsData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(TMap<FString, TWeakObjectPtr<UTexture2D*>>) ButtonsMap                                                 OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TMap<FName, TWeakObjectPtr<UTexture2D*>>)  ButtonTextures                                              OFFSET(get<T>, {0x88, 80, 0, 0})
	CMember(TMap<FName, class UTexture2D*>)            Icons                                                       OFFSET(get<T>, {0xD8, 80, 0, 0})
};

/// Class /Script/Indiana.IndianaUIFunctionLibrary
/// Size: 0x0000 (0x000030 - 0x000030)
class UIndianaUIFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.IndianaUIFunctionLibrary.GetOpacityForComponentByType
	// float GetOpacityForComponentByType(EIndianaUIOpacityType Type);                                                          // [0x18660f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.IndianaUIFunctionLibrary.GetIndianaUI
	// class AIndianaUI* GetIndianaUI(ECheckBranches& Branches, class APlayerController* Controller);                           // [0x1865fe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.IndianaUIFunctionLibrary.GetColorByType
	// FLinearColor GetColorByType(EIndianaUIColorType Type);                                                                   // [0x1865f20] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Indiana.IndianaWorldSettings
/// Size: 0x0118 (0x0004A0 - 0x0005B8)
class AIndianaWorldSettings : public AWorldSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1464;

public:
	CMember(class UMapInformation*)                    MapInformation                                              OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(TMap<FName, FLogicalGroupedExpression>)    ShouldLoadLevelLogicConditions                              OFFSET(get<T>, {0x4A8, 80, 0, 0})
	CMember(class UPresenceData*)                      PresenceData                                                OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(class UMapGameplayMusicSettings*)          GameplayMusicSettings                                       OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(TWeakObjectPtr<class UAssetList*>)         LevelAssets                                                 OFFSET(get<T>, {0x508, 8, 0, 0})
	DMember(bool)                                      bSpawnCompanionsOnTransition                                OFFSET(get<bool>, {0x530, 1, 0, 0})
	DMember(bool)                                      bIsInterior                                                 OFFSET(get<bool>, {0x531, 1, 0, 0})
	DMember(bool)                                      bInteriorFastTravelEnabled                                  OFFSET(get<bool>, {0x532, 1, 0, 0})
	DMember(bool)                                      bIsTown                                                     OFFSET(get<bool>, {0x533, 1, 0, 0})
	DMember(bool)                                      bIsPlayerHomeBase                                           OFFSET(get<bool>, {0x534, 1, 0, 0})
	DMember(bool)                                      bIsPenthouse                                                OFFSET(get<bool>, {0x535, 1, 0, 0})
	CMember(TMap<ESpecialObsidianID, FGlobalVariable>) LockedCompanionHomeBaseStasisOverrideVariables              OFFSET(get<T>, {0x538, 80, 0, 0})
	DMember(int32_t)                                   MinEffectiveLevel                                           OFFSET(get<int32_t>, {0x588, 4, 0, 0})
	DMember(int32_t)                                   MaxEffectiveLevel                                           OFFSET(get<int32_t>, {0x58C, 4, 0, 0})
	DMember(bool)                                      bApplyLevelModifier                                         OFFSET(get<bool>, {0x590, 1, 0, 0})
	DMember(int32_t)                                   FlatLevelModifier                                           OFFSET(get<int32_t>, {0x594, 4, 0, 0})
	DMember(bool)                                      bSimulateTimeOfDayPatrol                                    OFFSET(get<bool>, {0x598, 1, 0, 0})
	DMember(bool)                                      bWallaEnabled                                               OFFSET(get<bool>, {0x599, 1, 0, 0})
	DMember(bool)                                      bCharacterCreation                                          OFFSET(get<bool>, {0x59A, 1, 0, 0})
	CMember(class UClass*)                             ConversationLightingClassOverride                           OFFSET(get<T>, {0x5A0, 8, 0, 0})
	CMember(class UPreloadAssetList*)                  PreloadAssets                                               OFFSET(get<T>, {0x5A8, 8, 0, 0})
	CMember(EIndianaChunkIndex)                        ChunkIndex                                                  OFFSET(get<T>, {0x5B0, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.IndianaWorldSettings.K2_IsCurrentMap
	// bool K2_IsCurrentMap(class UMapInformation* MapInfo);                                                                    // [0x1866370] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InputGuideWidget
/// Size: 0x0178 (0x000300 - 0x000478)
class UInputGuideWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1144;

public:
	CMember(class UInputLabelHoldWidget*)              HoldWidget                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     InputGuide                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     InputGuideOptional                                          OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UHorizontalBox*)                     TextContainer                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UHorizontalBox*)                     OptionalTextContainer                                       OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             RadialFill                                                  OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UBorder*)                            TextAreaBorder                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UBorder*)                            OptionalTextAreaBorder                                      OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             ModuleImage                                                 OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UImage*)                             SkillImage                                                  OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UHorizontalBox*)                     SkillTextHorizontalBox                                      OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     InteractionPlayerSkill                                      OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UTextBlockBase*)                     InteractionSkillRequired                                    OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UHorizontalBox*)                     InteractionTextHorizontalBox                                OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UImage*)                             ItemImage                                                   OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UOverlay*)                           ArrowsOverlay                                               OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UTextBlockBase*)                     InteractionPlayerResources                                  OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UTextBlockBase*)                     InteractionResourcesRequired                                OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class USizeBox*)                           HackImpossible                                              OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UImage*)                             RotatingRedCircle                                           OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UOverlay*)                           LittleRedCircleOverlay                                      OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UImage*)                             KeycardImage                                                OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UImage*)                             HackImpossibleImage                                         OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UVerticalBox*)                       InteractResourceDisplay                                     OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UOverlay*)                           RadialOverlay                                               OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class USizeBox*)                           TextPromptSizebox                                           OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UTexture2D*)                         LockedComputer                                              OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UTexture2D*)                         UnlockedComputer                                            OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UTexture2D*)                         LockedContainer                                             OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UTexture2D*)                         UnlockedContainer                                           OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UTexture2D*)                         LockedDoor                                                  OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UTexture2D*)                         UnlockedDoor                                                OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UTexture2D*)                         LockedPickpocket                                            OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UTexture2D*)                         UnlockedPickpocket                                          OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UTexture2D*)                         LockedRobot                                                 OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UTexture2D*)                         UnlockedRobot                                               OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UTexture2D*)                         LockedTrap                                                  OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UTexture2D*)                         UnlockedTrap                                                OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UTexture2D*)                         LockedKeycard                                               OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UTexture2D*)                         UnlockedKeycard                                             OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UTexture2D*)                         SkillHackTexture                                            OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UTexture2D*)                         SkillLockpickTexture                                        OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UTexture2D*)                         SkillPickpocketTexture                                      OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UTexture2D*)                         ItemLockpickTexture                                         OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UTexture2D*)                         ItemHackTexture                                             OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(EIndianaUIColorType)                       FontColorType                                               OFFSET(get<T>, {0x468, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.InputGuideWidget.OnInteractionProgressChange
	// void OnInteractionProgressChange(float CurrentProgressRatio);                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.InputGuideWidget.InteractChanged
	// void InteractChanged(bool bVisible);                                                                                     // [0x1c5deb0] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.InputGuideWidget.GetContentWidth
	// int32_t GetContentWidth();                                                                                               // [0x1865fb0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.InputLabelGroupWidget
/// Size: 0x0070 (0x000300 - 0x000370)
class UInputLabelGroupWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UClass*)                             InputLabelClass                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UHorizontalBox*)                     EntryContainer                                              OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UHorizontalBox*)                     SecondRowEntryContainer                                     OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UHorizontalBox*)                     FrameHorizontalBox                                          OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(TArray<FInputLabelDescription>)            LabelDescriptions                                           OFFSET(get<T>, {0x320, 16, 0, 0})
	DMember(int32_t)                                   MaxFirstRowEntries                                          OFFSET(get<int32_t>, {0x330, 4, 0, 0})
	DMember(bool)                                      bCollapseOnHide                                             OFFSET(get<bool>, {0x334, 1, 0, 0})
	DMember(bool)                                      bShowFramingImages                                          OFFSET(get<bool>, {0x335, 1, 0, 0})
	DMember(bool)                                      bCollapseFramingImages                                      OFFSET(get<bool>, {0x336, 1, 0, 0})
	DMember(bool)                                      bCollapseFramingImagesWhenHidden                            OFFSET(get<bool>, {0x337, 1, 0, 0})
	DMember(bool)                                      bShowOnlyUniqueIcons                                        OFFSET(get<bool>, {0x338, 1, 0, 0})
	DMember(bool)                                      bKeepVisibleWhenUnableToExecute                             OFFSET(get<bool>, {0x339, 1, 0, 0})
};

/// Class /Script/Indiana.InputLabelHoldWidget
/// Size: 0x00B8 (0x000300 - 0x0003B8)
class UInputLabelHoldWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	CMember(class UTextBlockBase*)                     HoldTextBlock                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     KeyInputHoldlessTextBlock                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UOverlay*)                           KeyboardMasterOverlay                                       OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             GamepadIcon                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UBorder*)                            KeyRadialReveal                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UOverlay*)                           GamepadMasterOverlay                                        OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class USizeBox*)                           KeyInputSizeBox                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UOverlay*)                           GamepadOverlay                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             GamepadRadialReveal                                         OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UOverlay*)                           ButtonOverlay                                               OFFSET(get<T>, {0x348, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.InputLabelHoldWidget.UpdateFill
	// void UpdateFill();                                                                                                       // [0x1866990] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.InputLabelHoldWidget.SetWidth
	// void SetWidth(float Width);                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.InputLabelHoldWidget.SetRadialFill
	// void SetRadialFill(float FillRatio, float Opacity);                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.InputLabelWidget
/// Size: 0x0070 (0x000300 - 0x000370)
class UInputLabelWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	SMember(FLocString)                                TextReference                                               OFFSET(getStruct<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bIsNavigationPrompt                                         OFFSET(get<bool>, {0x320, 1, 0, 0})
	SMember(FString)                                   IconName                                                    OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	SMember(FName)                                     Icon                                                        OFFSET(getStruct<T>, {0x338, 8, 0, 0})
	SMember(FString)                                   ActionName                                                  OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	SMember(FName)                                     Action                                                      OFFSET(getStruct<T>, {0x350, 8, 0, 0})
	DMember(bool)                                      bDisplayKeyboardMouse                                       OFFSET(get<bool>, {0x358, 1, 0, 0})
	DMember(bool)                                      bDisplayGamepad                                             OFFSET(get<bool>, {0x359, 1, 0, 0})
	DMember(bool)                                      bDisplayActionText                                          OFFSET(get<bool>, {0x35A, 1, 0, 0})
	CMember(class UInputLabelHoldWidget*)              HoldWidget                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ActionTextBlock                                             OFFSET(get<T>, {0x368, 8, 0, 0})
};

/// Class /Script/Indiana.InputWidget
/// Size: 0x0078 (0x000300 - 0x000378)
class UInputWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	SMember(FName)                                     Action                                                      OFFSET(getStruct<T>, {0x318, 8, 0, 0})
	DMember(bool)                                      bIsNavigationPrompt                                         OFFSET(get<bool>, {0x320, 1, 0, 0})
	DMember(bool)                                      bDisplayKeyboardMouse                                       OFFSET(get<bool>, {0x321, 1, 0, 0})
	DMember(bool)                                      bDisplayGamepad                                             OFFSET(get<bool>, {0x322, 1, 0, 0})
	CMember(class UOverlay*)                           KeyboardMasterOverlay                                       OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             GamepadIcon                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UOverlay*)                           GamepadMasterOverlay                                        OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     KeyInputHoldlessTextBlock                                   OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class USizeBox*)                           KeyInputSizeBox                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UOverlay*)                           ButtonOverlay                                               OFFSET(get<T>, {0x350, 8, 0, 0})
};

/// Class /Script/Indiana.InstantHitData
/// Size: 0x0018 (0x000038 - 0x000050)
class UInstantHitData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UImpactDataSet*)                     ImpactDataSet                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UParticleSystem*)                    TrailFx                                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     TrailFxEndParam                                             OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/Indiana.InteractPayload
/// Size: 0x0018 (0x000000 - 0x000018)
class FInteractPayload : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   Int32                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     Float                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FString)                                   String                                                      OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Indiana.InteractActorDescription
/// Size: 0x0020 (0x000000 - 0x000020)
class FInteractActorDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class AActor*)                             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FInteractPayload)                          Payload                                                     OFFSET(getStruct<T>, {0x8, 24, 0, 0})
};

/// Class /Script/Indiana.InteractableComponent
/// Size: 0x00C8 (0x000268 - 0x000330)
class UInteractableComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(int32_t)                                   FacingAngle                                                 OFFSET(get<int32_t>, {0x268, 4, 0, 0})
	DMember(float)                                     ConversationInteractRangeOverride                           OFFSET(get<float>, {0x26C, 4, 0, 0})
	SMember(FInteractPayload)                          Payload                                                     OFFSET(getStruct<T>, {0x270, 24, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInteractComplete                                          OFFSET(getStruct<T>, {0x288, 16, 0, 0})
	DMember(bool)                                      bBlockPropagation                                           OFFSET(get<bool>, {0x298, 1, 0, 0})
	CMember(TArray<FInteractActorDescription>)         InteractTargets                                             OFFSET(get<T>, {0x2A0, 16, 0, 0})
	CMember(TArray<class UInteractionEvent*>)          Events                                                      OFFSET(get<T>, {0x2C8, 16, 0, 0})
	DMember(bool)                                      bDefaultCanHighlightDirect                                  OFFSET(get<bool>, {0x308, 1, 0, 0})
	DMember(bool)                                      bDefaultCanHighlightProximity                               OFFSET(get<bool>, {0x309, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.InteractableComponent.GetInteractableComponent
	// class UInteractableComponent* GetInteractableComponent(class UChildActorComponent* ChildActorComponent);                 // [0x186a3c0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InteractableMapEntry
/// Size: 0x0008 (0x000300 - 0x000308)
class UInteractableMapEntry : public UBaseMapEntryWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
};

/// Class /Script/Indiana.ScriptingEvent
/// Size: 0x0010 (0x000030 - 0x000040)
class UScriptingEvent : public UInteractionEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UScriptEvent*>)               ScriptEvents                                                OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.InteractionInterface
/// Size: 0x0000 (0x000030 - 0x000030)
class UInteractionInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.InteractionInterface.GetInteractLocString
	// FLocString GetInteractLocString();                                                                                       // [0x1c5deb0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Indiana.InteractionInterface.GetInteraction
	// EInteractionType GetInteraction(FInteractionDescription& Description, FInteractPayload& Payload, float InteractDistance); // [0x186a450] Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/Indiana.InteractionInterface.CanInteract
	// bool CanInteract(class AIndianaCharacter* Initiator, FInteractPayload& Payload);                                         // [0x186a1b0] Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/Indiana.InteractorInterface
/// Size: 0x0000 (0x000030 - 0x000030)
class UInteractorInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.InterestComponent
/// Size: 0x00B8 (0x0000E0 - 0x000198)
class UInterestComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	DMember(float)                                     MinTimeSinceMove                                            OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     MinTimeSinceIdle                                            OFFSET(get<float>, {0x194, 4, 0, 0})
};

/// Struct /Script/Indiana.InterestTypeData
/// Size: 0x0010 (0x000000 - 0x000010)
class FInterestTypeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGameplayTag)                              InterestType                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/Indiana.InterestDataPackage
/// Size: 0x0020 (0x000038 - 0x000058)
class UInterestDataPackage : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     DefaultBehaviorWeight                                       OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     DefaultBehaviorCooldown                                     OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     DefaultBehaviorDuration                                     OFFSET(get<float>, {0x40, 4, 0, 0})
	CMember(TArray<FInterestTypeData>)                 InterestTypeData                                            OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Indiana.InventoryAmmoData
/// Size: 0x0018 (0x000038 - 0x000050)
class UInventoryAmmoData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UClass*)                             HandgunAmmoClass                                            OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UClass*)                             RifleAmmoClass                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UClass*)                             EnergyCellAmmoClass                                         OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Indiana.InventoryPageWidget
/// Size: 0x0130 (0x000300 - 0x000430)
class UInventoryPageWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x400, 8, 0, 0})
	CMember(class UTextBlockBase*)                     HeaderTextblock                                             OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ComparisonTextBlock                                         OFFSET(get<T>, {0x410, 8, 0, 0})
	DMember(bool)                                      bDisplayRepairAllEquippedButton                             OFFSET(get<bool>, {0x42E, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.InventoryPageWidget.OnItemCompare
	// void OnItemCompare(bool bCompared);                                                                                      // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.InventoryArmorPageWidget
/// Size: 0x0058 (0x000430 - 0x000488)
class UInventoryArmorPageWidget : public UInventoryPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1160;

public:
	DMember(bool)                                      bDisplayEquippedItems                                       OFFSET(get<bool>, {0x430, 1, 0, 0})
	DMember(bool)                                      bKeepEquippedItemsSpace                                     OFFSET(get<bool>, {0x431, 1, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer0                                              OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer1                                              OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            Button0                                                     OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            Button1                                                     OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UBorder*)                            EquipmentBorder                                             OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UOverlay*)                           EquipmentOverlay                                            OFFSET(get<T>, {0x460, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.InventoryArmorPageWidget.SetEquippedArmorSlot
	// void SetEquippedArmorSlot(EArmorSlot ArmorSlotIn);                                                                       // [0x186acf0] Final|Native|Protected 
};

/// Class /Script/Indiana.InventoryConsumablesPageWidget
/// Size: 0x0140 (0x000430 - 0x000570)
class UInventoryConsumablesPageWidget : public UInventoryPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
	CMember(class UItemViewerHealthKitButtonWidget*)   DrugButtonMain                                              OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ChargeTextBlock                                             OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DrugDragContainer0                                          OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DrugDragContainer1                                          OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DrugDragContainer2                                          OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DrugDragContainer3                                          OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            DrugButton0                                                 OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            DrugButton1                                                 OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            DrugButton2                                                 OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            DrugButton3                                                 OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage0                                           OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage1                                           OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage2                                           OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage3                                           OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DrugCharge0                                                 OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DrugCharge1                                                 OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DrugCharge2                                                 OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DrugCharge3                                                 OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotText0                                                   OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotText1                                                   OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotText2                                                   OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotText3                                                   OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MedicalSkillText1                                           OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MedicalSkillText2                                           OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MedicalSkillText3                                           OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MedicalText1                                                OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MedicalText2                                                OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MedicalText3                                                OFFSET(get<T>, {0x518, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              MedKitAdrenoSlot                                            OFFSET(get<T>, {0x520, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              MedKitDrugSlot1                                             OFFSET(get<T>, {0x528, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              MedKitDrugSlot2                                             OFFSET(get<T>, {0x530, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              MedKitDrugSlot3                                             OFFSET(get<T>, {0x538, 8, 0, 0})
	CMember(class UClass*)                             WidgetClass                                                 OFFSET(get<T>, {0x540, 8, 0, 0})
};

/// Class /Script/Indiana.InventoryGadgetsPageWidget
/// Size: 0x00C0 (0x000430 - 0x0004F0)
class UInventoryGadgetsPageWidget : public UInventoryPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	CMember(class UDragContainerWidget*)               DragContainer0                                              OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer1                                              OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer2                                              OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer3                                              OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer4                                              OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            GadgetButton0                                               OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            GadgetButton1                                               OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            GadgetButton2                                               OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            GadgetButton3                                               OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            GadgetButton4                                               OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage0                                           OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage1                                           OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage2                                           OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage3                                           OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage4                                           OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotNumber0                                                 OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotNumber1                                                 OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotNumber2                                                 OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotNumber3                                                 OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotNumber4                                                 OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class UClass*)                             WidgetClass                                                 OFFSET(get<T>, {0x4D0, 8, 0, 0})
};

/// Class /Script/Indiana.InventoryItemSlotWidget
/// Size: 0x0008 (0x000300 - 0x000308)
class UInventoryItemSlotWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class UItemViewerButtonWidget*)            Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
};

/// Class /Script/Indiana.ItemViewerItemWidget
/// Size: 0x0010 (0x000278 - 0x000288)
class UItemViewerItemWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	SMember(FItemStack)                                ItemStack                                                   OFFSET(getStruct<T>, {0x278, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonUnhovered
	// void OnButtonUnhovered();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonPressed
	// void OnButtonPressed();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonHovered
	// void OnButtonHovered();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonFocusLost
	// void OnButtonFocusLost();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonFocused
	// void OnButtonFocused();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemViewerItemWidget.OnButtonClicked
	// void OnButtonClicked();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.InventoryItemWidget
/// Size: 0x00E8 (0x000288 - 0x000370)
class UInventoryItemWidget : public UItemViewerItemWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UOverlay*)                           PendingStackOverlay                                         OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PendingCountTextBlock                                       OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CountTextBlock                                              OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UProgressBar*)                       RepairProgressBar                                           OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UProgressBar*)                       PristineProgressBar                                         OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UImage*)                             LargeRepairImage                                            OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class UImage*)                             QuickComparisonImage                                        OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UHorizontalBox*)                     ValueHorizontalBox                                          OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ValueTextBlock                                              OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UImage*)                             IconImage                                                   OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UImage*)                             RestrictedImage                                             OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UVerticalBox*)                       ModContainer                                                OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UImage*)                             Mod0                                                        OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UImage*)                             Mod1                                                        OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UImage*)                             Mod2                                                        OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UImage*)                             Mod3                                                        OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             ElementImage                                                OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             TheftImage                                                  OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             PristineConditionImage                                      OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             CompareImage                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             EquippedImage                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             JunkImage                                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             SellImage                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             NewItemImage                                                OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UImage*)                             UniqueImage                                                 OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UImage*)                             ScienceImage                                                OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UImage*)                             ImprovisedImage                                             OFFSET(get<T>, {0x358, 8, 0, 0})
	SMember(FColor)                                    CompanionTint                                               OFFSET(getStruct<T>, {0x360, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.InventoryItemWidget.GetDamageType
	// class UClass* GetDamageType();                                                                                           // [0x186da50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.InventoryJunkPageWidget
/// Size: 0x0000 (0x000430 - 0x000430)
class UInventoryJunkPageWidget : public UInventoryPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
};

/// Class /Script/Indiana.InventoryMaterialsPageWidget
/// Size: 0x0000 (0x000430 - 0x000430)
class UInventoryMaterialsPageWidget : public UInventoryPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
};

/// Class /Script/Indiana.InventoryModificationsPageWidget
/// Size: 0x0000 (0x000430 - 0x000430)
class UInventoryModificationsPageWidget : public UInventoryPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
};

/// Class /Script/Indiana.InventoryWeaponAmmoGroupWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UInventoryWeaponAmmoGroupWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FLocString)                                AmmoName0                                                   OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	CMember(class UInventoryWeaponAmmoWidget*)         Ammo0                                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UClass*)                             RelatedAmmoClass                                            OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.InventoryWeaponAmmoGroupWidget.OnHighlightChange
	// void OnHighlightChange(bool bHighlight);                                                                                 // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.InventoryWeaponAmmoWidget
/// Size: 0x00A0 (0x000278 - 0x000318)
class UInventoryWeaponAmmoWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x278, 136, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CountTextBlock                                              OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.InventoryWeaponAmmoWidget.SetIcon
	// void SetIcon(class UTexture2D* Icon);                                                                                    // [0x186e670] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.InventoryWeaponsPageWidget
/// Size: 0x0120 (0x000430 - 0x000550)
class UInventoryWeaponsPageWidget : public UInventoryPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1360;

public:
	DMember(bool)                                      bDisplayAmmo                                                OFFSET(get<bool>, {0x478, 1, 0, 0})
	DMember(bool)                                      bDisplayEquippedItems                                       OFFSET(get<bool>, {0x479, 1, 0, 0})
	DMember(bool)                                      bKeepEquippedAndAmmoSpace                                   OFFSET(get<bool>, {0x47A, 1, 0, 0})
	CMember(class UItemViewerButtonWidget*)            WeaponButton0                                               OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            WeaponButton1                                               OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            WeaponButton2                                               OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            WeaponButton3                                               OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer0                                              OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer1                                              OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer2                                              OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DragContainer3                                              OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class UCanvasPanel*)                       AmmoPanel                                                   OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UBorder*)                            EquipmentBorder                                             OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class UOverlay*)                           EquipmentOverlay                                            OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class UInventoryWeaponAmmoGroupWidget*)    AmmoGroup0                                                  OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(class UInventoryWeaponAmmoGroupWidget*)    AmmoGroup1                                                  OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class UInventoryWeaponAmmoGroupWidget*)    AmmoGroup2                                                  OFFSET(get<T>, {0x4E8, 8, 0, 0})
};

/// Class /Script/Indiana.InventoryWidget
/// Size: 0x0118 (0x0003A0 - 0x0004B8)
class UInventoryWidget : public UBaseInventoryItemManagement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1208;

public:
	CMember(class UClass*)                             WeaponRadialSectionClass                                    OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UClass*)                             DrugContextSectionClass                                     OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UClass*)                             GadgetContextSectionClass                                   OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UClass*)                             MedKitSectionClass                                          OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UTexture2D*)                         UnequipIcon                                                 OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UTexture2D*)                         EquipIcon                                                   OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UTexture2D*)                         UnloadIcon                                                  OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UTexture2D*)                         SwapIcon                                                    OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UTexture2D*)                         DropIcon                                                    OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UTexture2D*)                         RepairIcon                                                  OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UTexture2D*)                         BreakdownIcon                                               OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UTexture2D*)                         CompareIcon                                                 OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UTexture2D*)                         StopCompareIcon                                             OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UTexture2D*)                         UseIcon                                                     OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UTexture2D*)                         JunkIcon                                                    OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UTexture2D*)                         NotJunkIcon                                                 OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UTexture2D*)                         InspectIcon                                                 OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class URetainerBox*)                       ItemRetainerBox                                             OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UInventoryWeaponsPageWidget*)        Weapons                                                     OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UInventoryArmorPageWidget*)          Armor                                                       OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UInventoryConsumablesPageWidget*)    Consumables                                                 OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UInventoryModificationsPageWidget*)  Modifications                                               OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UInventoryGadgetsPageWidget*)        Gadgets                                                     OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UInventoryMaterialsPageWidget*)      General                                                     OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UInventoryPageWidget*)               Quests                                                      OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UInventoryJunkPageWidget*)           Junk                                                        OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UClass*)                             StackSplittingClass                                         OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UScrollingWidgetGroup*)              LedgerScrollingWidgetGroup                                  OFFSET(get<T>, {0x488, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.InventoryWidget.OnWeaponStartEquip
	// void OnWeaponStartEquip(class UWeapon* Weapon);                                                                          // [0x186e5e0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnScrollingPageChangeStart
	// void OnScrollingPageChangeStart(class UIndianaUserWidget* UserWidget, int32_t Index);                                    // [0x186e510] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnScrollingPageChangeComplete
	// void OnScrollingPageChangeComplete(class UIndianaUserWidget* UserWidget, int32_t Index);                                 // [0x186e440] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnItemRemoved
	// void OnItemRemoved(FItemStack& ItemStack);                                                                               // [0x186e3a0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryWidget.OnItemJunkStatusChanged
	// void OnItemJunkStatusChanged(FItemStack& ItemStack);                                                                     // [0x186e300] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryWidget.OnItemCountChanged
	// void OnItemCountChanged(FItemStack& ItemStack);                                                                          // [0x186e260] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryWidget.OnItemAdded
	// void OnItemAdded(FItemStack& ItemStack);                                                                                 // [0x186e1c0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_SwapWeaponSlot
	// void OnDragDrop_SwapWeaponSlot(class UIndianaDragDropOperation* Operation);                                              // [0x186e130] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_SwapGadgetSlot
	// void OnDragDrop_SwapGadgetSlot(class UIndianaDragDropOperation* Operation);                                              // [0x186e0a0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_SwapDrugSlot
	// void OnDragDrop_SwapDrugSlot(class UIndianaDragDropOperation* Operation);                                                // [0x186e010] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_SetWeaponSlot
	// void OnDragDrop_SetWeaponSlot(class UIndianaDragDropOperation* Operation);                                               // [0x186df80] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ItemViewerWeaponSwap
	// void OnDragDrop_ItemViewerWeaponSwap(class UIndianaDragDropOperation* Operation);                                        // [0x186def0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ItemViewerInternalSwap
	// void OnDragDrop_ItemViewerInternalSwap(class UIndianaDragDropOperation* Operation);                                      // [0x186de60] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ItemViewerArmorSwap
	// void OnDragDrop_ItemViewerArmorSwap(class UIndianaDragDropOperation* Operation);                                         // [0x186ddd0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_DropItem
	// void OnDragDrop_DropItem(class UIndianaDragDropOperation* Operation);                                                    // [0x186dd40] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ClearGadgetSlot
	// void OnDragDrop_ClearGadgetSlot(class UIndianaDragDropOperation* Operation);                                             // [0x186dcb0] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_ClearDrugSlot
	// void OnDragDrop_ClearDrugSlot(class UIndianaDragDropOperation* Operation);                                               // [0x186dc20] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_AssignGadgetSlot
	// void OnDragDrop_AssignGadgetSlot(class UIndianaDragDropOperation* Operation);                                            // [0x186db90] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.OnDragDrop_AssignDrugSlot
	// void OnDragDrop_AssignDrugSlot(class UIndianaDragDropOperation* Operation);                                              // [0x186db00] Final|Native|Protected 
	// Function /Script/Indiana.InventoryWidget.AfterSettingCurrentPage
	// void AfterSettingCurrentPage(class UIndianaUserWidget* UserWidget, int32_t Index, bool bAnimate, bool bCanChangePage, bool bActivate); // [0x186d810] Final|Native|Protected 
};

/// Class /Script/Indiana.InvestigateBehaviorStateInfo
/// Size: 0x0008 (0x000120 - 0x000128)
class UInvestigateBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.InvestigateRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UInvestigateRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.ItemActionButtonContainersWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UItemActionButtonContainersWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UHorizontalBox*)                     ContainerHorizontalBox                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UVerticalBox*)                       RepairAllEquippedContainer                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UVerticalBox*)                       SellJunkContainer                                           OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UButtonBase*)                        RepairAllEquippedButton                                     OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UButtonBase*)                        SellJunkButton                                              OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(bool)                                      bRepairAllVisible                                           OFFSET(get<bool>, {0x328, 1, 0, 0})
	DMember(bool)                                      bSellJunkVisible                                            OFFSET(get<bool>, {0x329, 1, 0, 0})
};

/// Class /Script/Indiana.ItemActionDragContainersWidget
/// Size: 0x0050 (0x000300 - 0x000350)
class UItemActionDragContainersWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class UHorizontalBox*)                     ContainerHorizontalBox                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UVerticalBox*)                       RepairContainer                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UVerticalBox*)                       BreakdownContainer                                          OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UVerticalBox*)                       JunkContainer                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UVerticalBox*)                       DropContainer                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UDragContainerWidget*)               RepairDragContainer                                         OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UDragContainerWidget*)               BreakdownDragContainer                                      OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UDragContainerWidget*)               JunkDragContainer                                           OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UDragContainerWidget*)               DropDragContainer                                           OFFSET(get<T>, {0x340, 8, 0, 0})
	DMember(bool)                                      bRepairVisible                                              OFFSET(get<bool>, {0x348, 1, 0, 0})
	DMember(bool)                                      bBreakdownVisible                                           OFFSET(get<bool>, {0x349, 1, 0, 0})
	DMember(bool)                                      bJunkVisible                                                OFFSET(get<bool>, {0x34A, 1, 0, 0})
	DMember(bool)                                      bDropVisible                                                OFFSET(get<bool>, {0x34B, 1, 0, 0})
};

/// Class /Script/Indiana.ItemConditionWidget
/// Size: 0x0008 (0x000300 - 0x000308)
class UItemConditionWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class UTextBlockBase*)                     TextBlock                                                   OFFSET(get<T>, {0x300, 8, 0, 0})
};

/// Class /Script/Indiana.ItemContainerEntryWidget
/// Size: 0x0068 (0x000300 - 0x000368)
class UItemContainerEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	SMember(FVector2D)                                 MaximumNameSize                                             OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             Icon                                                        OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             TheftImage                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UOverlay*)                           QuantityOverlay                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     QuantityTextBlock                                           OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             UniqueImage                                                 OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             ScienceImage                                                OFFSET(get<T>, {0x340, 8, 0, 0})
};

/// Class /Script/Indiana.ItemContainerListWidget
/// Size: 0x00E8 (0x000300 - 0x0003E8)
class UItemContainerListWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	CMember(class USliderBase*)                        Slider                                                      OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UVerticalBox*)                       SliderContainer                                             OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UItemContainerEntryWidget*)          Entry0                                                      OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UItemContainerEntryWidget*)          Entry1                                                      OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UItemContainerEntryWidget*)          Entry2                                                      OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UItemContainerEntryWidget*)          Entry3                                                      OFFSET(get<T>, {0x3E0, 8, 0, 0})
};

/// Class /Script/Indiana.ItemContainerWidget
/// Size: 0x0060 (0x000308 - 0x000368)
class UItemContainerWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UAkAudioEvent*)                      ItemRemovedSound                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UItemContainerListWidget*)           List                                                        OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     HeaderTextblock                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             LabelGroup                                                  OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UItemToolTipWidget*)                 ToolTip                                                     OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             TheftImage                                                  OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UVerticalBox*)                       VerticalContainer                                           OFFSET(get<T>, {0x338, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemContainerWidget.ShowContainer
	// void ShowContainer();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemContainerWidget.OnItemRemoved
	// void OnItemRemoved(FItemStack& ItemStack);                                                                               // [0x1872460] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemContainerWidget.OnItemCountChanged
	// void OnItemCountChanged(FItemStack& ItemStack);                                                                          // [0x18723c0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemContainerWidget.OnItemAdded
	// void OnItemAdded(FItemStack& ItemStack);                                                                                 // [0x1872320] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemContainerWidget.HideContainer
	// void HideContainer();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.ItemDegradationAlertWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UItemDegradationAlertWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UItemDegradationEntryWidget*)        WeaponEntry                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UItemDegradationEntryWidget*)        HeadEntry                                                   OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UItemDegradationEntryWidget*)        BodyEntry                                                   OFFSET(get<T>, {0x318, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemDegradationAlertWidget.WeaponDamageStatusChanged
	// void WeaponDamageStatusChanged(EItemDegradationState DegradationState);                                                  // [0x1872630] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.OnUnequippedArmor
	// void OnUnequippedArmor(EArmorSlot ArmorSlotIn);                                                                          // [0x1872520] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x1872210] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.OnEquipmentRepairVisibilityChanged
	// void OnEquipmentRepairVisibilityChanged(bool bVisible);                                                                  // [0x1872180] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.HeadArmorDamageStatusChanged
	// void HeadArmorDamageStatusChanged(EItemDegradationState DegradationState);                                               // [0x1872050] Final|Native|Protected 
	// Function /Script/Indiana.ItemDegradationAlertWidget.BodyArmorDamageStatusChanged
	// void BodyArmorDamageStatusChanged(EItemDegradationState DegradationState);                                               // [0x1871eb0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemDegradationEntryWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class UItemDegradationEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UImage*)                             CurrentStateImage                                           OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTexture2D*)                         DamagedImage                                                OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTexture2D*)                         DestroyedImage                                              OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemDegradationEntryWidget.PlaySevereDamageAnim
	// void PlaySevereDamageAnim();                                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemDegradationEntryWidget.PlayIntroDamagedAnim
	// void PlayIntroDamagedAnim();                                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemDegradationEntryWidget.KillAllAnims
	// void KillAllAnims();                                                                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.ItemDrugSectionWidget
/// Size: 0x0030 (0x000288 - 0x0002B8)
class UItemDrugSectionWidget : public URadialSectionWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	CMember(class UPanelWidget*)                       Panel                                                       OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DrugCharges                                                 OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotIndexTextBlock                                          OFFSET(get<T>, {0x2B0, 8, 0, 0})
};

/// Class /Script/Indiana.ItemGadgetSectionWidget
/// Size: 0x0028 (0x000288 - 0x0002B0)
class UItemGadgetSectionWidget : public URadialSectionWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class UPanelWidget*)                       Panel                                                       OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UImage*)                             UnavailableImage                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotIndexTextBlock                                          OFFSET(get<T>, {0x2A8, 8, 0, 0})
};

/// Class /Script/Indiana.ItemInspectorStatWidget
/// Size: 0x0010 (0x000278 - 0x000288)
class UItemInspectorStatWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(class UTextBlockBase*)                     StatTextBlock                                               OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StatValueTextBlock                                          OFFSET(get<T>, {0x280, 8, 0, 0})
};

/// Class /Script/Indiana.ItemInspectorWidget
/// Size: 0x0080 (0x000308 - 0x000388)
class UItemInspectorWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	DMember(float)                                     GamepadScrollMultiplier                                     OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     GamepadDeadZone                                             OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     MouseScrollMultiplier                                       OFFSET(get<float>, {0x328, 4, 0, 0})
	CMember(class UActorRenderWidget*)                 ActorRender                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UScrollBox*)                         DescriptionScrollBox                                        OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionTextBlock                                        OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UItemStatsWidget*)                   ItemStats                                                   OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UEquipmentModsWidget*)               EquipmentMods                                               OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UButtonBase*)                        HiddenButton                                                OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UButtonBase*)                        BackButton                                                  OFFSET(get<T>, {0x370, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemInspectorWidget.ZoomToggled
	// void ZoomToggled(bool bFullZoom);                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemInspectorWidget.OnZoomToggled
	// void OnZoomToggled(bool bFullZoom);                                                                                      // [0x18725a0] Final|Native|Protected 
	// Function /Script/Indiana.ItemInspectorWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18722a0] Final|Native|Protected 
	// Function /Script/Indiana.ItemInspectorWidget.MouseScroll
	// void MouseScroll(float MouseInput);                                                                                      // [0x18720d0] Final|Native|Protected 
	// Function /Script/Indiana.ItemInspectorWidget.GamepadScroll
	// void GamepadScroll(float GamepadInput);                                                                                  // [0x1871fc0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemMedKitSectionWidget
/// Size: 0x0010 (0x000288 - 0x000298)
class UItemMedKitSectionWidget : public URadialSectionWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(class UPanelWidget*)                       Panel                                                       OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Indiana.ItemModdingWidget
/// Size: 0x0318 (0x0003A0 - 0x0006B8)
class UItemModdingWidget : public UBaseInventoryItemManagement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1720;

public:
	SMember(FItemViewerInitializer)                    RangedModsInitializer                                       OFFSET(getStruct<T>, {0x3D0, 160, 0, 0})
	SMember(FItemViewerInitializer)                    MeleeModsInitializer                                        OFFSET(getStruct<T>, {0x470, 160, 0, 0})
	SMember(FItemViewerInitializer)                    ArmorModsInitializer                                        OFFSET(getStruct<T>, {0x510, 160, 0, 0})
	CMember(class UVerticalBox*)                       ViewerVerticalBox                                           OFFSET(get<T>, {0x5B8, 8, 0, 0})
	CMember(class UVerticalBox*)                       EquipmentTitleVerticalBox                                   OFFSET(get<T>, {0x5C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     EquipmentNameTextBlock                                      OFFSET(get<T>, {0x5C8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PageNameTextBlock                                           OFFSET(get<T>, {0x5D0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CurrentModTitle                                             OFFSET(get<T>, {0x5D8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NewModTitle                                                 OFFSET(get<T>, {0x5E0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CurrentModItemName                                          OFFSET(get<T>, {0x5E8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NewModItemName                                              OFFSET(get<T>, {0x5F0, 8, 0, 0})
	CMember(class UItemStatsWidget*)                   CurrentModItemStats                                         OFFSET(get<T>, {0x5F8, 8, 0, 0})
	CMember(class UItemStatsWidget*)                   NewModItemStats                                             OFFSET(get<T>, {0x600, 8, 0, 0})
	CMember(class UEquipmentModsWidget*)               EquipmentMods                                               OFFSET(get<T>, {0x608, 8, 0, 0})
	CMember(class UActorRenderWidget*)                 ActorRender                                                 OFFSET(get<T>, {0x610, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x618, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x620, 8, 0, 0})
	CMember(class USpacer*)                            CurrentModSpacer                                            OFFSET(get<T>, {0x628, 8, 0, 0})
	CMember(class USpacer*)                            NewModSpacer                                                OFFSET(get<T>, {0x630, 8, 0, 0})
	CMember(class UHorizontalBox*)                     CurrentModItemNameBox                                       OFFSET(get<T>, {0x638, 8, 0, 0})
	CMember(class UHorizontalBox*)                     NewModItemNameBox                                           OFFSET(get<T>, {0x640, 8, 0, 0})
	CMember(class UOverlay*)                           ActionInputOverlay                                          OFFSET(get<T>, {0x648, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DuplicateModMessage                                         OFFSET(get<T>, {0x650, 8, 0, 0})
	CMember(class UPlayerStatsWidget*)                 PlayerStats                                                 OFFSET(get<T>, {0x658, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemModdingWidget.OnInstallMod
	// void OnInstallMod();                                                                                                     // [0x1872300] Final|Native|Protected 
	// Function /Script/Indiana.ItemModdingWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18722c0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemOwnershipVolume
/// Size: 0x0040 (0x000310 - 0x000350)
class AItemOwnershipVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	DMember(int32_t)                                   VolumePriority                                              OFFSET(get<int32_t>, {0x310, 4, 0, 0})
	CMember(class UClass*)                             OwningFaction                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             OwningActor                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(bool)                                      bPlayerOwned                                                OFFSET(get<bool>, {0x348, 1, 0, 0})
};

/// Class /Script/Indiana.ItemRepairWidget
/// Size: 0x00A0 (0x000308 - 0x0003A8)
class UItemRepairWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	SMember(FLocString)                                ArmorPartRequiredLocString                                  OFFSET(getStruct<T>, {0x320, 8, 0, 0})
	SMember(FLocString)                                WeaponPartRequiredLocString                                 OFFSET(getStruct<T>, {0x328, 8, 0, 0})
	CMember(class UActorRenderWidget*)                 ActorRender                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class USizeBox*)                           RepairDetailsSizeBox                                        OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PartRequiredTextBlock                                       OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PartCountTextBlock                                          OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionTextBlock                                        OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UItemConditionWidget*)               ConditionButton                                             OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UButtonBase*)                        RepairButton                                                OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UButtonBase*)                        BackButton                                                  OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UButtonBase*)                        HiddenButton                                                OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x388, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemRepairWidget.OnRepair
	// void OnRepair();                                                                                                         // [0x1872500] Final|Native|Protected 
	// Function /Script/Indiana.ItemRepairWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18722e0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemStatEntryWidget
/// Size: 0x0048 (0x000300 - 0x000348)
class UItemStatEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	CMember(class UTexture2D*)                         UpgradeTexture                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTexture2D*)                         UpgradeDecreaseTexture                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTexture2D*)                         DowngradeTexture                                            OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTexture2D*)                         DowngradeDecreaseTexture                                    OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             IconImage                                                   OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             WeightImage                                                 OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ValueTextBlock                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DeltaTextBlock                                              OFFSET(get<T>, {0x340, 8, 0, 0})
};

/// Class /Script/Indiana.ItemStatsCategoryWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UItemStatsCategoryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FLocString)                                DisplayText                                                 OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UVerticalBox*)                       StatsVerticalBox                                            OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.ItemStatsWidget
/// Size: 0x0118 (0x000300 - 0x000418)
class UItemStatsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
	DMember(bool)                                      bDisplayDelta                                               OFFSET(get<bool>, {0x300, 1, 0, 0})
	DMember(bool)                                      bDisplayComparison                                          OFFSET(get<bool>, {0x301, 1, 0, 0})
	DMember(bool)                                      bOnlyShowComparisons                                        OFFSET(get<bool>, {0x302, 1, 0, 0})
	CMember(class UItemStatsCategoryWidget*)           StatsCategory                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UItemStatsCategoryWidget*)           ArmorThresholdCategory                                      OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UClass*)                             ArmorStatWidgetClass                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UClass*)                             StatWidgetClass                                             OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemStatsWidget.OnAlternateChanged
	// void OnAlternateChanged();                                                                                               // [0x1872160] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemToolTipWidget
/// Size: 0x01F8 (0x000300 - 0x0004F8)
class UItemToolTipWidget : public UToolTipContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1272;

public:
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             BrandImage                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ComparisonItemTextBlock                                     OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     BrandTextBlock                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionTextBlock                                        OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LoreTextBlock                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     WeightTextBlock                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UVerticalBox*)                       ConditionBox                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ConditionTextBlock                                          OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UImage*)                             PristineImage                                               OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ValueTextBlock                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UItemStatsWidget*)                   ItemStats                                                   OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ModificationText                                            OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UEquipmentModWidget*)                Mod0Widget                                                  OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UEquipmentModWidget*)                Mod1Widget                                                  OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UEquipmentModWidget*)                Mod2Widget                                                  OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UEquipmentModWidget*)                Mod3Widget                                                  OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ItemLevelTextBlock                                          OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StatusEffectsTextBlock                                      OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ItemPowerTextBlock                                          OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ItemPowerDescriptor                                         OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CurrencyValueTextBlock                                      OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     WeightValueTextBlock                                        OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UVerticalBox*)                       CurrencyValueBox                                            OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UVerticalBox*)                       WeightValueBox                                              OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ConditionValueTextBlock                                     OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UScaleBox*)                          MainScaleBox                                                OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class USizeBox*)                           ImageSizeBox                                                OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UBorder*)                            FrameBorder                                                 OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UVerticalBox*)                       ItemPowerVerticalBox                                        OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UImage*)                             DamageTypeImage                                             OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UScaleBox*)                          CompareInspectContainer                                     OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  CompareLabel                                                OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InspectLabel                                                OFFSET(get<T>, {0x408, 8, 0, 0})
	DMember(int32_t)                                   ImageClippingHeight                                         OFFSET(get<int32_t>, {0x410, 4, 0, 0})
	CMember(TMap<EIndianaDamageType, EIndianaUIColorType>) DamageTypeColors                                        OFFSET(get<T>, {0x428, 80, 0, 0})
	CMember(TMap<EIndianaDamageType, class UTexture2D*>) DamageTypeIcon                                            OFFSET(get<T>, {0x478, 80, 0, 0})
	DMember(bool)                                      bIsUnique                                                   OFFSET(get<bool>, {0x4C8, 1, 0, 0})
	DMember(bool)                                      bIsScience                                                  OFFSET(get<bool>, {0x4C9, 1, 0, 0})
	DMember(bool)                                      bUseInstancedModifiers                                      OFFSET(get<bool>, {0x4CA, 1, 0, 0})
	DMember(float)                                     DefaultMaximumFullScreenModifier                            OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     DefaultMaximumWidescreenModifier                            OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     DefaultMaximumFullScreenComparisonModifier                  OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     DefaultMaximumWidescreenComparisonModifier                  OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     InstancedMaximumFullScreenModifier                          OFFSET(get<float>, {0x4DC, 4, 0, 0})
	DMember(float)                                     InstancedMaximumWidescreenModifier                          OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     InstancedMaximumFullScreenComparisonModifier                OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     InstancedMaximumWidescreenComparisonModifier                OFFSET(get<float>, {0x4E8, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemToolTipWidget.SetBackgroundBrush
	// void SetBackgroundBrush();                                                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ItemToolTipWidget.FontSizeChanged
	// void FontSizeChanged(int32_t NewModifier);                                                                               // [0x1871f30] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemTransferWidget
/// Size: 0x00C8 (0x000308 - 0x0003D0)
class UItemTransferWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(class UClass*)                             StackSplittingClass                                         OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            HoveredItem                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UPlayerStatsWidget*)                 PlayerStats                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UButtonBaseContainerWidget*)         InventoryHeader                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InventoryLabel                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UButtonBaseContainerWidget*)         PlayerHeader                                                OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  PlayerLabel                                                 OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UItemViewerNavigationWidget*)        PlayerNavigation                                            OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UItemViewerWidget*)                  PlayerViewer                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UItemViewerNavigationWidget*)        InventoryNavigation                                         OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UItemViewerWidget*)                  InventoryViewer                                             OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             LabelGroup                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UButtonBase*)                        BackButton                                                  OFFSET(get<T>, {0x368, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemTransferWidget.OnPlayerItemRemoved
	// void OnPlayerItemRemoved(FItemStack& Item);                                                                              // [0x1875e50] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnPlayerItemAdded
	// void OnPlayerItemAdded(FItemStack& Item);                                                                                // [0x1875db0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnPlayerCountChanged
	// void OnPlayerCountChanged(FItemStack& ItemStack);                                                                        // [0x1875d10] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnItemCountChanged
	// void OnItemCountChanged(FItemStack& ItemStack);                                                                          // [0x1875c50] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnInventoryItemRemoved
	// void OnInventoryItemRemoved(FItemStack& Item);                                                                           // [0x1875bb0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.ItemTransferWidget.OnInventoryItemAdded
	// void OnInventoryItemAdded(FItemStack& Item);                                                                             // [0x1875b10] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.ItemViewerButtonWidget
/// Size: 0x0008 (0x000B98 - 0x000BA0)
class UItemViewerButtonWidget : public UButtonBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2976;

public:
};

/// Class /Script/Indiana.ItemViewerCellWidget
/// Size: 0x0008 (0x000278 - 0x000280)
class UItemViewerCellWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class UItemViewerButtonWidget*)            Button                                                      OFFSET(get<T>, {0x278, 8, 0, 0})
};

/// Class /Script/Indiana.ItemViewerHealthKitButtonWidget
/// Size: 0x0000 (0x000B98 - 0x000B98)
class UItemViewerHealthKitButtonWidget : public UButtonBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2968;

public:
};

/// Class /Script/Indiana.ItemViewerNavigationWidget
/// Size: 0x0090 (0x000300 - 0x000390)
class UItemViewerNavigationWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	CMember(TArray<class UPaginatedButtonWidget*>)     PaginatedButtons                                            OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(TArray<class UTexture2D*>)                 Images                                                      OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(TArray<FLocString>)                        Labels                                                      OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(class UClass*)                             ButtonClass                                                 OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UButtonGroup*)                       CategoryButtonGroup                                         OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  LeftInputLabel                                              OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  RightInputLabel                                             OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UInputWidget*)                       LeftInputWidget                                             OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UInputWidget*)                       RightInputWidget                                            OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UHorizontalBox*)                     ButtonContainer                                             OFFSET(get<T>, {0x378, 8, 0, 0})
	DMember(bool)                                      bAllowLooping                                               OFFSET(get<bool>, {0x380, 1, 0, 0})
};

/// Class /Script/Indiana.ItemViewerPageWidget
/// Size: 0x0070 (0x000300 - 0x000370)
class UItemViewerPageWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	DMember(int32_t)                                   Rows                                                        OFFSET(get<int32_t>, {0x304, 4, 0, 0})
	SMember(FMargin)                                   ButtonPadding                                               OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	CMember(class UDragContainerWidget*)               PageDragContainer                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class USizeBox*)                           SizeBox                                                     OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UUniformGridPanel*)                  UniformGrid                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UClass*)                             DragContainerClass                                          OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UClass*)                             ButtonClass                                                 OFFSET(get<T>, {0x340, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemViewerPageWidget.PlayCollapseAnimation
	// void PlayCollapseAnimation();                                                                                            // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.ItemViewerPannerWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UItemViewerPannerWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UButtonBase*)                        LeftButton                                                  OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UButtonBase*)                        RightButton                                                 OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.ItemViewerScrollSelector
/// Size: 0x0030 (0x000300 - 0x000330)
class UItemViewerScrollSelector : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UVerticalBox*)                       PageButtonVerticalBox                                       OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UVerticalBox*)                       ParentVerticalBox                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UClass*)                             PageSelectorClass                                           OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.ItemViewerScrollSelectorEntry
/// Size: 0x0010 (0x000300 - 0x000310)
class UItemViewerScrollSelectorEntry : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UButtonBase*)                        PageSelector                                                OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             SelectedImage                                               OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.ItemViewerWidget
/// Size: 0x0350 (0x000300 - 0x000650)
class UItemViewerWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1616;

public:
	DMember(bool)                                      bAutoCollapse                                               OFFSET(get<bool>, {0x441, 1, 0, 0})
	DMember(bool)                                      bDisplayValue                                               OFFSET(get<bool>, {0x442, 1, 0, 0})
	CMember(class UClass*)                             PageClass                                                   OFFSET(get<T>, {0x448, 8, 0, 0})
	DMember(int32_t)                                   Columns                                                     OFFSET(get<int32_t>, {0x450, 4, 0, 0})
	DMember(int32_t)                                   CategoryPadding                                             OFFSET(get<int32_t>, {0x454, 4, 0, 0})
	DMember(int32_t)                                   PagePadding                                                 OFFSET(get<int32_t>, {0x458, 4, 0, 0})
	SMember(FVector2D)                                 CellSize                                                    OFFSET(getStruct<T>, {0x45C, 8, 0, 0})
	DMember(bool)                                      bShouldDisplaySortingOptions                                OFFSET(get<bool>, {0x464, 1, 0, 0})
	DMember(bool)                                      bClearDelegatesOnInitialization                             OFFSET(get<bool>, {0x465, 1, 0, 0})
	DMember(bool)                                      bShowAllCategory                                            OFFSET(get<bool>, {0x466, 1, 0, 0})
	DMember(bool)                                      bAutoPad                                                    OFFSET(get<bool>, {0x467, 1, 0, 0})
	SMember(FPageDimensions)                           AllPageDimensions                                           OFFSET(getStruct<T>, {0x468, 48, 0, 0})
	CMember(TArray<FPageDimensions>)                   PageDimensions                                              OFFSET(get<T>, {0x498, 16, 0, 0})
	DMember(bool)                                      bShowJunkCategory                                           OFFSET(get<bool>, {0x4A8, 1, 0, 0})
	SMember(FPageDimensions)                           JunkPageDimensions                                          OFFSET(getStruct<T>, {0x4B0, 48, 0, 0})
	CMember(class UClass*)                             ItemGenericClass                                            OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class USizeBox*)                           RootSizeBox                                                 OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PageTextBlock                                               OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UScrollBox*)                         ScrollBox                                                   OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(class UHorizontalBox*)                     PagesHorizontalBox                                          OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(class UItemViewerScrollSelector*)          ScrollSelector                                              OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  SortLabel                                                   OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  ChangeSortLabel                                             OFFSET(get<T>, {0x518, 8, 0, 0})
	CMember(class UImage*)                             SortDirectionImage                                          OFFSET(get<T>, {0x520, 8, 0, 0})
	CMember(class UHorizontalBox*)                     SortingContainer                                            OFFSET(get<T>, {0x528, 8, 0, 0})
	SMember(FInputLabelDescription)                    BaseInputLabelDesc                                          OFFSET(getStruct<T>, {0x530, 56, 0, 0})
	DMember(float)                                     ScrollTime                                                  OFFSET(get<float>, {0x568, 4, 0, 0})
	CMember(EScrollEaseType)                           ScrollType                                                  OFFSET(get<T>, {0x56C, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.ItemViewerWidget.OnScrollingComplete
	// void OnScrollingComplete();                                                                                              // [0x1875ef0] Final|Native|Protected 
};

/// Class /Script/Indiana.ItemVisualizer
/// Size: 0x00D8 (0x0002B8 - 0x000390)
class AItemVisualizer : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	SMember(FItemStack)                                ItemStk                                                     OFFSET(getStruct<T>, {0x2B8, 16, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            ItemMainAsset                                               OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(TArray<class UModVisual*>)                 ItemModVisuals                                              OFFSET(get<T>, {0x2F8, 16, 0, 0})
	CMember(TMap<FName, TWeakObjectPtr<UMaterialInterface*>>) MainAssetMaterialOverrides                           OFFSET(get<T>, {0x308, 80, 0, 0})
	CMember(TArray<FSoftObjectPath>)                   ItemRequiredAssets                                          OFFSET(get<T>, {0x358, 16, 0, 0})
	CMember(class USceneComponent*)                    VisualRootComponent                                         OFFSET(get<T>, {0x368, 8, 0, 0})
};

/// Class /Script/Indiana.ItemWeaponSectionWidget
/// Size: 0x0028 (0x000288 - 0x0002B0)
class UItemWeaponSectionWidget : public URadialSectionWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class UPanelWidget*)                       Panel                                                       OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UOverlay*)                           OverlayContainer                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SlotIndexTextBlock                                          OFFSET(get<T>, {0x2A8, 8, 0, 0})
};

/// Class /Script/Indiana.JournalDescriptionPanel
/// Size: 0x0018 (0x000320 - 0x000338)
class UJournalDescriptionPanel : public ULedgerDescriptionPanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UVerticalBox*)                       SymbolVerticalBox                                           OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.LedgerJournalWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class ULedgerJournalWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UNavigationGroupWidget*)             NavigationBar                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UScrollBox*)                         PageScrollBox                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UScrollingWidgetGroup*)              ScrollingWidgetGroup                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UQuestJournalWidget*)                QuestJournal                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UCodexJournal*)                      CodexJournal                                                OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.JumpBehaviorStateInfo
/// Size: 0x0010 (0x000178 - 0x000188)
class UJumpBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:


	/// Functions
	// Function /Script/Indiana.JumpBehaviorStateInfo.OnOutroAnimationComplete
	// void OnOutroAnimationComplete();                                                                                         // [0x1875cf0] Final|Native|Protected 
	// Function /Script/Indiana.JumpBehaviorStateInfo.OnIntroAnimationComplete
	// void OnIntroAnimationComplete();                                                                                         // [0x1875af0] Final|Native|Protected 
};

/// Class /Script/Indiana.JumpRequestData
/// Size: 0x0008 (0x000080 - 0x000088)
class UJumpRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(bool)                                      bRotateToFaceJumpDirection                                  OFFSET(get<bool>, {0x80, 1, 0, 0})
};

/// Class /Script/Indiana.JumpNavLink
/// Size: 0x0000 (0x0002E8 - 0x0002E8)
class AJumpNavLink : public AReservableNavLink
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
};

/// Class /Script/Indiana.KeybindDialogBoxWidget
/// Size: 0x0088 (0x000308 - 0x000390)
class UKeybindDialogBoxWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	CMember(class UVerticalBox*)                       ContentVerticalBox                                          OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class USizeBox*)                           BackingBotSizeBox                                           OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ControlToRebindTextBlock                                    OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     HowToTextBlock                                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     KeyInputTextBlock                                           OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UImage*)                             InputIcon                                                   OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(float)                                     ContentVerticalPadding                                      OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(int32_t)                                   BackingMaterialSize                                         OFFSET(get<int32_t>, {0x35C, 4, 0, 0})
	DMember(int32_t)                                   BackingTopSize                                              OFFSET(get<int32_t>, {0x360, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.KeybindDialogBoxWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.KeybindDialogBoxWidget.OnInputPress
	// void OnInputPress();                                                                                                     // [0x1875ad0] Final|Native|Protected 
	// Function /Script/Indiana.KeybindDialogBoxWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x1875ab0] Final|Native|Protected 
};

/// Class /Script/Indiana.KeyBindsMenuWidget
/// Size: 0x0850 (0x000308 - 0x000B58)
class UKeyBindsMenuWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2904;

public:
	CMember(class UScrollBox*)                         MenuScrollBox                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UWidgetSwitcher*)                    MenuSwitcher                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UWidgetSwitcher*)                    PlatformSwitcher                                            OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UVerticalBox*)                       KeyBindVerticalBox                                          OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UVerticalBox*)                       Category1VerticalBox                                        OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UHorizontalBox*)                     PCButtonsHorizontalBox                                      OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UHorizontalBox*)                     InputLabelsHorizontalBox                                    OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class USettingsMenuSlotWidget*)            GamePadMenuSlot                                             OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class USettingsMenuSlotWidget*)            SticklayoutMenuSlot                                         OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class USettingsMenuOptionPresenterWdgt*)   GamePadLayoutOptions                                        OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class USettingsMenuOptionPresenterWdgt*)   StickLayoutOptions                                          OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UButtonBase*)                        DefaultButton                                               OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UButtonBase*)                        BackButton                                                  OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UWidget*)                            Background                                                  OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         XSXGamepadTexture                                           OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         XBOGamepadTexture                                           OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UImage*)                             XB_GamepadImage                                             OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_LeftSpecial                                              OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_LeftSpecialHold                                          OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_LTrigger                                                 OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_LTriggerHold                                             OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_LBumper                                                  OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_LBumperHold                                              OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_LStick                                                   OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_LStickButton                                             OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_DUp                                                      OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_DLeft                                                    OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_DDown                                                    OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_DDownHold                                                OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_DRight                                                   OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_RightSpecial                                             OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_RightSpecialHold                                         OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_RightTrigger                                             OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_RightTriggerHold                                         OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_RBumper                                                  OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_RBumperHold                                              OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_Y                                                        OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_YHold                                                    OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_B                                                        OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_BHold                                                    OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_A                                                        OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_AHold                                                    OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_X                                                        OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_XHold                                                    OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_RStick                                                   OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     XB_RStickButton                                             OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         PS5GamepadTexture                                           OFFSET(get<T>, {0x5C0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         PS4GamepadTexture                                           OFFSET(get<T>, {0x5E8, 8, 0, 0})
	CMember(class UImage*)                             PS_GamepadImage                                             OFFSET(get<T>, {0x610, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_SpecialLeft                                              OFFSET(get<T>, {0x618, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_SpecialLeftHold                                          OFFSET(get<T>, {0x620, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_L2                                                       OFFSET(get<T>, {0x628, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_L2Hold                                                   OFFSET(get<T>, {0x630, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_L1                                                       OFFSET(get<T>, {0x638, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_L1Hold                                                   OFFSET(get<T>, {0x640, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_DUp                                                      OFFSET(get<T>, {0x648, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_DLeft                                                    OFFSET(get<T>, {0x650, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_DDown                                                    OFFSET(get<T>, {0x658, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_DDownHold                                                OFFSET(get<T>, {0x660, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_DRight                                                   OFFSET(get<T>, {0x668, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_LStick                                                   OFFSET(get<T>, {0x670, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_L3                                                       OFFSET(get<T>, {0x678, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_SpecialRight                                             OFFSET(get<T>, {0x680, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_SpecialRightHold                                         OFFSET(get<T>, {0x688, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_R2                                                       OFFSET(get<T>, {0x690, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_R2Hold                                                   OFFSET(get<T>, {0x698, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_R1                                                       OFFSET(get<T>, {0x6A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_R1Hold                                                   OFFSET(get<T>, {0x6A8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_Triangle                                                 OFFSET(get<T>, {0x6B0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_TriangleHold                                             OFFSET(get<T>, {0x6B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_Circle                                                   OFFSET(get<T>, {0x6C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_CircleHold                                               OFFSET(get<T>, {0x6C8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_X                                                        OFFSET(get<T>, {0x6D0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_XHold                                                    OFFSET(get<T>, {0x6D8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_Square                                                   OFFSET(get<T>, {0x6E0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_SquareHold                                               OFFSET(get<T>, {0x6E8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_RStick                                                   OFFSET(get<T>, {0x6F0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PS_R3                                                       OFFSET(get<T>, {0x6F8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         GPGamepadTexture                                            OFFSET(get<T>, {0x7E8, 8, 0, 0})
	CMember(class UImage*)                             GP_GamepadImage                                             OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_SpecialLeft                                              OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_SpecialLeftHold                                          OFFSET(get<T>, {0x820, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_L2                                                       OFFSET(get<T>, {0x828, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_L2Hold                                                   OFFSET(get<T>, {0x830, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_L1                                                       OFFSET(get<T>, {0x838, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_L1Hold                                                   OFFSET(get<T>, {0x840, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_DUp                                                      OFFSET(get<T>, {0x848, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_DLeft                                                    OFFSET(get<T>, {0x850, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_DDown                                                    OFFSET(get<T>, {0x858, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_DDownHold                                                OFFSET(get<T>, {0x860, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_DRight                                                   OFFSET(get<T>, {0x868, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_LStick                                                   OFFSET(get<T>, {0x870, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_L3                                                       OFFSET(get<T>, {0x878, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_SpecialRight                                             OFFSET(get<T>, {0x880, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_SpecialRightHold                                         OFFSET(get<T>, {0x888, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_R2                                                       OFFSET(get<T>, {0x890, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_R2Hold                                                   OFFSET(get<T>, {0x898, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_R1                                                       OFFSET(get<T>, {0x8A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_R1Hold                                                   OFFSET(get<T>, {0x8A8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_Triangle                                                 OFFSET(get<T>, {0x8B0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_TriangleHold                                             OFFSET(get<T>, {0x8B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_Circle                                                   OFFSET(get<T>, {0x8C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_CircleHold                                               OFFSET(get<T>, {0x8C8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_X                                                        OFFSET(get<T>, {0x8D0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_XHold                                                    OFFSET(get<T>, {0x8D8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_Square                                                   OFFSET(get<T>, {0x8E0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_SquareHold                                               OFFSET(get<T>, {0x8E8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_RStick                                                   OFFSET(get<T>, {0x8F0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     GP_R3                                                       OFFSET(get<T>, {0x8F8, 8, 0, 0})
	CMember(class UClass*)                             KeyRebindClass                                              OFFSET(get<T>, {0x9E8, 8, 0, 0})
	CMember(class UClass*)                             SubcategoryClass                                            OFFSET(get<T>, {0x9F0, 8, 0, 0})
	CMember(class USettingsMenuWidget*)                SettingsMenu                                                OFFSET(get<T>, {0x9F8, 8, 0, 0})
	CMember(class UIndianaGameUserSettings*)           IndianaSettings                                             OFFSET(get<T>, {0xA00, 8, 0, 0})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0xA08, 1, 0, 0})
	DMember(int32_t)                                   SelectedLayout                                              OFFSET(get<int32_t>, {0xA0C, 4, 0, 0})
	DMember(int32_t)                                   SelectedStick                                               OFFSET(get<int32_t>, {0xA10, 4, 0, 0})
	CMember(class UTexture2D*)                         CurrentGamepadTexture                                       OFFSET(get<T>, {0xB50, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.KeyBindsMenuWidget.OnBackButtonClicked
	// void OnBackButtonClicked();                                                                                              // [0x1875a90] Final|Native|Protected 
	// Function /Script/Indiana.KeyBindsMenuWidget.CreateRestoreDefaultsDialogBox
	// void CreateRestoreDefaultsDialogBox();                                                                                   // [0x1875a70] Final|Native|Protected 
};

/// Class /Script/Indiana.KillCameraComponent
/// Size: 0x0040 (0x000120 - 0x000160)
class UKillCameraComponent : public UCombatCameraComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(float)                                     MinDistanceForCamera                                        OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     ChanceOnLastKill                                            OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     ChanceOnStealthKill                                         OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     ChanceOnCritOrWeakSpotKill                                  OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0x148, 4, 0, 0})
	CMember(TArray<class UCineCombatCameraParams*>)    KillCameras                                                 OFFSET(get<T>, {0x150, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.KillCameraComponent.OnKill
	// void OnKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                    // [0x1879e10] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.KillStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UKillStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0x188, 8, 0, 0})
};

/// Class /Script/Indiana.Ladder
/// Size: 0x0048 (0x0002D0 - 0x000318)
class ALadder : public AIndianaNavLink
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	DMember(float)                                     MaxInteractionAngle                                         OFFSET(get<float>, {0x2D8, 4, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class USplineComponent*)                   SplineComponent                                             OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UAkComponent*)                       AkComponent                                                 OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UFurnitureComponent*)                TopFurnitureComponent                                       OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UFurnitureComponent*)                BottomFurnitureComponent                                    OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<AIndianaCharacter*>>) Climbers                                                   OFFSET(get<T>, {0x308, 16, 0, 0})
};

/// Class /Script/Indiana.LedgerCharacterStatsWidget
/// Size: 0x0028 (0x000300 - 0x000328)
class ULedgerCharacterStatsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(class UScrollingWidgetGroup*)              ScrollingWidgetGroup                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UScrollBox*)                         PageScrollBox                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UStatsSummaryPageWidget*)            SummaryPage                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.LedgerCharacterWidget
/// Size: 0x0048 (0x000300 - 0x000348)
class ULedgerCharacterWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	CMember(class UNavigationGroupWidget*)             NavigationBar                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UScrollBox*)                         PageScrollBox                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UScrollingWidgetGroup*)              ScrollingWidgetGroup                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UStatsSummaryPageWidget*)            CharacterSummary                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UStatsSkillsPageWidget*)             CharacterSkills                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UStatsPerksPageWidget*)              CharacterPerks                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UCharacterDetailsWidget*)            CharacterDetails                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UReputationSummaryWidget*)           ReputationPage                                              OFFSET(get<T>, {0x340, 8, 0, 0})
};

/// Class /Script/Indiana.LedgerMapQuestSelectionWidget
/// Size: 0x0068 (0x000308 - 0x000370)
class ULedgerMapQuestSelectionWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UClass*)                             EntryClass                                                  OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UClass*)                             LastEntryClass                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(int32_t)                                   MaxQuestsThatCanBeShown                                     OFFSET(get<int32_t>, {0x330, 4, 0, 0})
	CMember(class UVerticalBox*)                       EntryList                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UButtonBase*)                        CancelButton                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	SMember(FMargin)                                   EntryPadding                                                OFFSET(getStruct<T>, {0x350, 16, 0, 0})
	CMember(class USizeBox*)                           BackgroundSizeBox                                           OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class USizeBox*)                           ContentSizeBox                                              OFFSET(get<T>, {0x368, 8, 0, 0})
};

/// Class /Script/Indiana.MapBaseWidget
/// Size: 0x01B8 (0x000300 - 0x0004B8)
class UMapBaseWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1208;

public:
	CMember(class UTexture2D*)                         CurrentImageTexture                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UMultiQuestMapTracker*)              MultiQuestMapTracker                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UUserWidget*)                        GamepadSelector                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UScaleBox*)                          ImageScaleBox                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UCanvasPanel*)                       OuterCanvas                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UCanvasPanel*)                       ContentCanvas                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UCanvasPanel*)                       ImageCanvas                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             MapImage                                                    OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UBorder*)                            LoadingImageBlocker                                         OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UCircularThrobber*)                  LoadingThrobber                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class USizeBox*)                           MapSizeBox                                                  OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(float)                                     StartingZoomLevel                                           OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     MaxZoomLevel                                                OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     MinZoomLevel                                                OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     GamepadZoomSpeed                                            OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(float)                                     MouseZoomSpeed                                              OFFSET(get<float>, {0x370, 4, 0, 0})
	SMember(FVector2D)                                 MousePanSensitivity                                         OFFSET(getStruct<T>, {0x374, 8, 0, 0})
	DMember(float)                                     GamepadZoomSensitivity                                      OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(float)                                     GamepadSelectorInsetPercent                                 OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(float)                                     GamepadSelectorExtendPercent                                OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     GamepadSelectorMagnetismDelay                               OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     GamepadMagnetizeExponent                                    OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(float)                                     GamepadMagnetizeTime                                        OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     GamepadPanMinMovementMultiplier                             OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     GamepadPanSensitivity                                       OFFSET(get<float>, {0x398, 4, 0, 0})
	SMember(FVector2D)                                 GamepadPanDeadzone                                          OFFSET(getStruct<T>, {0x39C, 8, 0, 0})
	SMember(FInputLabelDescription)                    PanDescription                                              OFFSET(getStruct<T>, {0x3A8, 56, 0, 0})
	SMember(FInputLabelDescription)                    ZoomDescription                                             OFFSET(getStruct<T>, {0x3E0, 56, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         MapTexture                                                  OFFSET(get<T>, {0x418, 8, 0, 0})
	SMember(FVector2D)                                 MapMinBounds                                                OFFSET(getStruct<T>, {0x440, 8, 0, 0})
	SMember(FVector2D)                                 MapMaxBounds                                                OFFSET(getStruct<T>, {0x448, 8, 0, 0})
};

/// Class /Script/Indiana.LedgerMapWidget
/// Size: 0x0208 (0x0004B8 - 0x0006C0)
class ULedgerMapWidget : public UMapBaseWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1728;

public:
	DMember(float)                                     InactiveQuestOpacity                                        OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     BeaconMouseDistanceThreshold                                OFFSET(get<float>, {0x4BC, 4, 0, 0})
	CMember(class UClass*)                             SelectionWidgetClass                                        OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UClass*)                             QuestSelectionWidgetClass                                   OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class UNavigationGroupWidget*)             NavigationBar                                               OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     RegionNameTextblock                                         OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LocalMapNameTextBlock                                       OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MissingMapDataTextBlock                                     OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(class UBorder*)                            MapBorder                                                   OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(class UFloorIndicatorWidget*)              FloorLevelIndicator                                         OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(class UClass*)                             FastTravelEntryClass                                        OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UClass*)                             PlayerEntryClass                                            OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UClass*)                             BeaconEntryClass                                            OFFSET(get<T>, {0x518, 8, 0, 0})
	DMember(bool)                                      bUseBeaconButtons                                           OFFSET(get<bool>, {0x520, 1, 0, 0})
	CMember(class UClass*)                             BeaconButtonEntryClass                                      OFFSET(get<T>, {0x528, 8, 0, 0})
	CMember(class UClass*)                             FastTravelTooltipClass                                      OFFSET(get<T>, {0x530, 8, 0, 0})
	CMember(class UClass*)                             BeaconTooltipClass                                          OFFSET(get<T>, {0x538, 8, 0, 0})
	CMember(class UClass*)                             AreaBeaconEntryClass                                        OFFSET(get<T>, {0x540, 8, 0, 0})
	CMember(class UClass*)                             TextEntryClass                                              OFFSET(get<T>, {0x548, 8, 0, 0})
	CMember(class UClass*)                             POIClass                                                    OFFSET(get<T>, {0x550, 8, 0, 0})
	SMember(FInputLabelDescription)                    ChangeFloorDescription                                      OFFSET(getStruct<T>, {0x558, 56, 0, 0})
	SMember(FLocString)                                LocalMapString                                              OFFSET(getStruct<T>, {0x590, 8, 0, 0})
	SMember(FLocString)                                RegionMapString                                             OFFSET(getStruct<T>, {0x598, 8, 0, 0})
	CMember(class UPointOfInterestTextureData*)        POITextureData                                              OFFSET(get<T>, {0x5A0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.LedgerMapWidget.OnCompanionSelectionClosed
	// void OnCompanionSelectionClosed();                                                                                       // [0x1879c40] Final|Native|Protected 
	// Function /Script/Indiana.LedgerMapWidget.OnBorderMouseDown
	// FEventReply OnBorderMouseDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                          // [0x1879a60] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.LedgerMapWidget.InitiateFastTravelFromCompanionSelect
	// void InitiateFastTravelFromCompanionSelect();                                                                            // [0x1879a10] Final|Native|Protected 
	// Function /Script/Indiana.LedgerMapWidget.ActiveQuestChanged
	// void ActiveQuestChanged();                                                                                               // [0x18797c0] Final|Native|Protected 
};

/// Class /Script/Indiana.LedgerWidget
/// Size: 0x0110 (0x000308 - 0x000418)
class ULedgerWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
	CMember(class UNavigationGroupWidget*)             NavigationBar                                               OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UScrollBox*)                         PageScrollBox                                               OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UScrollingWidgetGroup*)              ScrollingWidgetGroup                                        OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UPlayerStatsWidget*)                 PlayerStats                                                 OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class ULedgerCharacterWidget*)             Character                                                   OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class ULedgerJournalWidget*)               Journal                                                     OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class ULedgerMapWidget*)                   LedgerMap                                                   OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UInventoryWidget*)                   Inventory                                                   OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UCompanionsWidget*)                  CompanionWidget1                                            OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UCompanionsWidget*)                  CompanionWidget2                                            OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UItemViewerWidget*)                  CompanionItemViewer                                         OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UImage*)                             CharacterStageFront                                         OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UImage*)                             CharacterStageRear                                          OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UAudioLogWidget*)                    AudioLogWidget                                              OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UActorRenderWidget*)                 CharacterRender                                             OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UClass*)                             CompanionWidgetClass                                        OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(TArray<ESpecialObsidianID>)                CompanionIDsAndSortOrder                                    OFFSET(get<T>, {0x3C0, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.LedgerWidget.UpdateCompanionTabs
	// void UpdateCompanionTabs();                                                                                              // [0x187a330] Final|Native|Protected 
	// Function /Script/Indiana.LedgerWidget.OnSetCurrentPage
	// void OnSetCurrentPage(ELedgerPages Page, bool bAnimate);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LedgerWidget.OnItemAdded
	// void OnItemAdded(FItemStack& ItemStack);                                                                                 // [0x1879d70] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.LedgerWidget.FadeInSharedItemViewer
	// void FadeInSharedItemViewer();                                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LedgerWidget.AfterSettingAnyPage
	// void AfterSettingAnyPage(class UIndianaUserWidget* UserWidget, int32_t Index, bool bAnimate, bool bCanChangePage, bool bActivate); // [0x18797e0] Final|Native|Protected 
};

/// Class /Script/Indiana.LegalWidget
/// Size: 0x0030 (0x0003B8 - 0x0003E8)
class ULegalWidget : public UDialogBoxWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	CMember(class UScrollBox*)                         LegalScrollBox                                              OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     EULATextBlock                                               OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TOSTextBlock                                                OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(ESlateVisibility)                          ActiveVisibility                                            OFFSET(get<T>, {0x3D0, 1, 0, 0})
	CMember(ESlateVisibility)                          InactiveVisibility                                          OFFSET(get<T>, {0x3D1, 1, 0, 0})
	DMember(float)                                     ActiveConfirmButtonOpasity                                  OFFSET(get<float>, {0x3D4, 4, 0, 0})
	DMember(float)                                     InactiveConfirmButtonOpasity                                OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(float)                                     ScrollBarTriggerSize                                        OFFSET(get<float>, {0x3DC, 4, 0, 0})
	DMember(float)                                     GamepadZoomMultiplier                                       OFFSET(get<float>, {0x3E0, 4, 0, 0})
	DMember(float)                                     MouseWheelMultiplier                                        OFFSET(get<float>, {0x3E4, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.LegalWidget.UpdateConfirmButtonState
	// void UpdateConfirmButtonState(float DeltaTime);                                                                          // [0x187a350] Final|Native|Private 
	// Function /Script/Indiana.LegalWidget.ShowLegal
	// void ShowLegal();                                                                                                        // [0x187a310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.SetEnabledConfirmButton
	// void SetEnabledConfirmButton(bool bEnable);                                                                              // [0x187a280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.ResetScrollOffset
	// void ResetScrollOffset();                                                                                                // [0x187a260] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.IsLegalSigned
	// bool IsLegalSigned();                                                                                                    // [0x1879a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.LegalWidget.InitializeMechanicOfConfirmButton
	// void InitializeMechanicOfConfirmButton();                                                                                // [0x18799f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.ExecuteConfirm
	// void ExecuteConfirm();                                                                                                   // [0x18799d0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.ExecuteCancel
	// void ExecuteCancel();                                                                                                    // [0x18799b0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.LegalWidget.ExecuteAbort
	// void ExecuteAbort();                                                                                                     // [0x1879990] Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.LevelOptionsWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class ULevelOptionsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UVerticalBox*)                       EntryVerticalBox                                            OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UGridPanel*)                         EntryLevelGrid                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DisplayTextBlock                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(bool)                                      bDeliverableMapsOnly                                        OFFSET(get<bool>, {0x328, 1, 0, 0})
	SMember(FLocString)                                TextRef                                                     OFFSET(getStruct<T>, {0x32C, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.LevelOptionsWidget.OnControllerBack
	// void OnControllerBack();                                                                                                 // [0x1879c60] Final|Native|Protected 
};

/// Class /Script/Indiana.LevelUpButtonWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class ULevelUpButtonWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	SMember(FLocString)                                TextLocString                                               OFFSET(getStruct<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TextBlock                                                   OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UPanelWidget*)                       EffectContainer                                             OFFSET(get<T>, {0x330, 8, 0, 0})
};

/// Class /Script/Indiana.LevelUpNotificationWidget
/// Size: 0x00D8 (0x000308 - 0x0003E0)
class ULevelUpNotificationWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(class UCanvasPanel*)                       MainCanvasPanel                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UBorder*)                            FadeInContainer                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             Glow                                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             LevelFlowLeft                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             LevelFlowRight                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             DarkBacking                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             LevelUpBacking                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CongratsTextBlock                                           OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UOverlay*)                           InputLabelOverlay                                           OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             LevelUpInputLabelGroupSkills                                OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             LevelUpInputLabelGroupSkillsAndPerks                        OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             ReminderInputLabel                                          OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NewLevelTextBlock                                           OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UOverlay*)                           LevelUpReminderOverlay                                      OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(float)                                     DefaultDisplayTime                                          OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     GlowballEaseExp                                             OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(float)                                     GlowballEaseSpeed                                           OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(float)                                     FadeGlowballAtEase                                          OFFSET(get<float>, {0x384, 4, 0, 0})
	SMember(FVector2D)                                 GlowballTargetPositionViewportMultiplier                    OFFSET(getStruct<T>, {0x388, 8, 0, 0})
	CMember(EIndianaUIColorType)                       InputLabelColorOverride                                     OFFSET(get<T>, {0x390, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.LevelUpNotificationWidget.PlayerCombatStateChanged
	// void PlayerCombatStateChanged(bool bIsInCombat, bool bRestoring);                                                        // [0x187a190] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnTextAndSunFadeOutComplete
	// void OnTextAndSunFadeOutComplete();                                                                                      // [0x187a170] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnSkillUpdated
	// void OnSkillUpdated(ESkill Skill, int32_t Value);                                                                        // [0x187a0a0] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnProgressToSkillsPage
	// void OnProgressToSkillsPage();                                                                                           // [0x187a080] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnProgressToPerksPage
	// void OnProgressToPerksPage();                                                                                            // [0x187a060] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnPrimaryTextAndSunFadeInComplete
	// void OnPrimaryTextAndSunFadeInComplete();                                                                                // [0x187a040] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnPerkAdded
	// void OnPerkAdded();                                                                                                      // [0x187a020] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnLevelUpReminderVisibilityChanged
	// void OnLevelUpReminderVisibilityChanged(bool bVisible);                                                                  // [0x1879f90] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnLevelUpNotificationVisibilityChanged
	// void OnLevelUpNotificationVisibilityChanged(bool bVisible);                                                              // [0x1879f00] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnLevelUpComplete
	// void OnLevelUpComplete();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x1879ce0] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnGlowShrinkComplete
	// void OnGlowShrinkComplete();                                                                                             // [0x1879ca0] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnGlowGrowComplete
	// void OnGlowGrowComplete();                                                                                               // [0x1879c80] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.OnGlowballComplete
	// void OnGlowballComplete();                                                                                               // [0x1879cc0] Final|Native|Protected 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetTextAndSunFadeOutAnimation
	// class UWidgetAnimation* GetTextAndSunFadeOutAnimation();                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetSunSpinAnimation
	// class UWidgetAnimation* GetSunSpinAnimation();                                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetSecondaryTextFadeInAnimation
	// class UWidgetAnimation* GetSecondaryTextFadeInAnimation();                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetPrimaryTextGrowAnimation
	// class UWidgetAnimation* GetPrimaryTextGrowAnimation();                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetPrimaryTextAndSunFadeInAnimation
	// class UWidgetAnimation* GetPrimaryTextAndSunFadeInAnimation();                                                           // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetLevelUpReminderAnimation
	// class UWidgetAnimation* GetLevelUpReminderAnimation();                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetGlowShrinkAnimation
	// class UWidgetAnimation* GetGlowShrinkAnimation();                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetGlowGrowAnimation
	// class UWidgetAnimation* GetGlowGrowAnimation();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetGlowFadeAnimation
	// class UWidgetAnimation* GetGlowFadeAnimation();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.LevelUpNotificationWidget.GetGlowballAnimation
	// class UWidgetAnimation* GetGlowballAnimation();                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.LocomotionAnimationSet
/// Size: 0x0000 (0x000038 - 0x000038)
class ULocomotionAnimationSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Indiana.DeathMontageGroup
/// Size: 0x0018 (0x000000 - 0x000018)
class FDeathMontageGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<class UAnimMontage*>)               List                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bListIsRadialAnimation                                      OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Class /Script/Indiana.DeathMontageSet
/// Size: 0x0050 (0x000038 - 0x000088)
class UDeathMontageSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<class UClass*, FDeathMontageGroup>)   DeathMontages                                               OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.TPVPersonalityCollection
/// Size: 0x0058 (0x000038 - 0x000090)
class UTPVPersonalityCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UTPVPersonalitySet*)                 DefaultPersonality                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TMap<TSoftObjectPtr<UClass*>, class UTPVPersonalitySet*>) WeaponBasedPersonalities                     OFFSET(get<T>, {0x40, 80, 0, 0})
};

/// Class /Script/Indiana.TalkingIdleOverrideData
/// Size: 0x0010 (0x000038 - 0x000048)
class UTalkingIdleOverrideData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FTalkingIdleEntry>)                 TalkingIdleOptions                                          OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.TPVPersonalitySet
/// Size: 0x01F8 (0x000038 - 0x000230)
class UTPVPersonalitySet : public ULocomotionAnimationSet
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(TArray<class UAnimSequence*>)              LocomotionWalkStart                                         OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<class UAnimSequence*>)              LocomotionTurnInPlace                                       OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               GetUpFromFaceDownPose                                       OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               GetUpFromFaceUpPose                                         OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               NonCombatAimBlendSpace                                      OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UAnimSequence*)                      WalkForward                                                 OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UAnimSequence*)                      WalkBackward                                                OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UAnimSequence*)                      RunForward                                                  OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UAnimSequence*)                      RunBackward                                                 OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravRunForward                                           OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravRunBackward                                          OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UAnimSequence*)                      HandPose                                                    OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UAnimSequence*)                      WalkArmPose                                                 OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UAnimSequence*)                      RunArmPose                                                  OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UAnimSequence*)                      JumpIntro                                                   OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UAnimSequence*)                      JumpLoop                                                    OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UAnimSequence*)                      JumpLand                                                    OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravJumpIntro                                            OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravJumpLoop                                             OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravJumpLand                                             OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchIdleStart                                             OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchIdle                                                  OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchIdleEnd                                               OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchWalkStart                                             OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchWalk                                                  OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UAnimSequence*)                      CrouchWalkEnd                                               OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UAnimSequence*)                      PersonalityIdleAdditive                                     OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   BaseIdles                                                   OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(TArray<FLoopRandomSequence>)               StartLoopEndIdles                                           OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(TMap<FName, FLoopRandomSequence>)          TalkingSequences                                            OFFSET(get<T>, {0x150, 80, 0, 0})
	CMember(TMap<FName, FLoopRandomSequence>)          BarkTalkingSequences                                        OFFSET(get<T>, {0x1A0, 80, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   DialogIdles                                                 OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(TArray<FLoopRandomSequence>)               DialogStartLoopEndIdles                                     OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(class UAnimSequence*)                      HeadAdditiveLayer                                           OFFSET(get<T>, {0x210, 8, 0, 0})
	DMember(bool)                                      bLeftHandIKDefault                                          OFFSET(get<bool>, {0x218, 1, 0, 0})
	DMember(bool)                                      bAllowNonCombatStance                                       OFFSET(get<bool>, {0x219, 1, 0, 0})
	DMember(bool)                                      bUseAltIKTargets                                            OFFSET(get<bool>, {0x21A, 1, 0, 0})
	DMember(float)                                     AnimationWalkSpeed                                          OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     AnimationRunSpeed                                           OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     AnimationRunSpeedThreshold                                  OFFSET(get<float>, {0x224, 4, 0, 0})
	CMember(class UDeathMontageSet*)                   DeathMontages                                               OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Struct /Script/Indiana.LocomotionData
/// Size: 0x0050 (0x000000 - 0x000050)
class FLocomotionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UAnimSequence*)                      AnimSequence                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAnimSequence*)                      AnimSequenceAlt                                             OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.LocomotionLogicComponent
/// Size: 0x0150 (0x0000E0 - 0x000230)
class ULocomotionLogicComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UTPVAnimInstance*)                   AnimInstance                                                OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UAIMovementComponent*)               MovementComponent                                           OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(TArray<FLocomotionData>)                   NonCombatLocomotion                                         OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<FLocomotionData>)                   CombatLocomotion                                            OFFSET(get<T>, {0x108, 16, 0, 0})
	DMember(bool)                                      bActiveInCombat                                             OFFSET(get<bool>, {0x138, 1, 0, 0})
	DMember(bool)                                      bUseNonCombatInCombat                                       OFFSET(get<bool>, {0x139, 1, 0, 0})
	DMember(bool)                                      bDebugThisInstance                                          OFFSET(get<bool>, {0x13A, 1, 0, 0})
	DMember(bool)                                      bDisableThisInstance                                        OFFSET(get<bool>, {0x13B, 1, 0, 0})
	DMember(bool)                                      bUseTurnSlots                                               OFFSET(get<bool>, {0x13C, 1, 0, 0})
	DMember(float)                                     TurnInPlaceSlideAngle                                       OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     SlideInPlaceDuration                                        OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     SlideInPlaceDurationCombat                                  OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     RotationCorrectionPercentage                                OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     AnglePriority                                               OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     SpeedPriority                                               OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     NoAngleTrackPenalty                                         OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     CombatTurningPlayRate                                       OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     NonCombatTurningPlayRate                                    OFFSET(get<float>, {0x160, 4, 0, 0})
};

/// Class /Script/Indiana.LogList
/// Size: 0x0030 (0x000358 - 0x000388)
class ULogList : public UGenericCollapsableList
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:


	/// Functions
	// Function /Script/Indiana.LogList.AddNewFoundLog
	// void AddNewFoundLog(FLocString ExaminableName, FLocString ExaminableDescription);                                        // [0x187e140] Final|Native|Protected 
};

/// Class /Script/Indiana.LootRowBase
/// Size: 0x0090 (0x000030 - 0x0000C0)
class ULootRowBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(int32_t)                                   MinLevel                                                    OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   MaxLevel                                                    OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   Chance                                                      OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(bool)                                      bInvertConditional                                          OFFSET(get<bool>, {0x40, 1, 0, 0})
	SMember(FLogicalGroupedExpression)                 Conditional                                                 OFFSET(getStruct<T>, {0x48, 120, 0, 0})
};

/// Class /Script/Indiana.LootRowItem
/// Size: 0x01F0 (0x0000C0 - 0x0002B0)
class ULootRowItem : public ULootRowBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	SMember(FItemDefinitionVariant)                    Item                                                        OFFSET(getStruct<T>, {0xC0, 496, 0, 0})
};

/// Class /Script/Indiana.LootRowTable
/// Size: 0x0008 (0x0000C0 - 0x0000C8)
class ULootRowTable : public ULootRowBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(class ULootTableData*)                     LootTable                                                   OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Class /Script/Indiana.LootTableData
/// Size: 0x0040 (0x000038 - 0x000078)
class ULootTableData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(int32_t)                                   ChanceNone                                                  OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(bool)                                      bUseAll                                                     OFFSET(get<bool>, {0x3C, 1, 0, 0})
	DMember(int32_t)                                   MaxCount                                                    OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	CMember(TArray<class ULootRowBase*>)               LootRows                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   OverlayFilePath                                             OFFSET(getStruct<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Indiana.LowGravJumpNavLink
/// Size: 0x0008 (0x0002E8 - 0x0002F0)
class ALowGravJumpNavLink : public AJumpNavLink
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(TEnumAsByte<ENavLinkDirection>)            LinkDirection                                               OFFSET(get<T>, {0x2E8, 1, 0, 0})
};

/// Class /Script/Indiana.MainActionKeyBindDisplay
/// Size: 0x0040 (0x000300 - 0x000340)
class UMainActionKeyBindDisplay : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class UInputLabelWidget*)                  InputLabel                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	SMember(FInputLabelDescription)                    LabelDescription                                            OFFSET(getStruct<T>, {0x308, 56, 0, 0})
};

/// Class /Script/Indiana.MainMenuDLCManagerWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UMainMenuDLCManagerWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(bool)                                      bEnableINX01Widget                                          OFFSET(get<bool>, {0x300, 1, 0, 0})
	DMember(bool)                                      bEnableINX02Widget                                          OFFSET(get<bool>, {0x301, 1, 0, 0})
	CMember(class UMainMenuDLCWidget*)                 INX01Widget                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UMainMenuDLCWidget*)                 INX02Widget                                                 OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.MainMenuDLCManagerWidget.RefreshEntitlements
	// void RefreshEntitlements();                                                                                              // [0x187e920] Final|Native|Public  
};

/// Struct /Script/Indiana.PlatformSetProductID
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FPlatformSetProductID : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FString)                                   ForcedUniversalID                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   PCWindowsStoreID                                            OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   PCGamepassID                                                OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   PCEpicID                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   PCSteamID                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   PCFallbackLink                                              OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FString)                                   XboxID                                                      OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FString)                                   PS4AmericaTitleID                                           OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FString)                                   PS4ID_SIEA                                                  OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FString)                                   PS4EuropeTitleID                                            OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FString)                                   PS4ID_SIEE                                                  OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FString)                                   SwitchID                                                    OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/Indiana.MainMenuDLCWidget
/// Size: 0x0150 (0x000300 - 0x000450)
class UMainMenuDLCWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(EDownLoadableContent)                      DLCPackage                                                  OFFSET(get<T>, {0x300, 1, 0, 0})
	SMember(FPlatformSetProductID)                     ProductIDs                                                  OFFSET(getStruct<T>, {0x308, 192, 0, 0})
	CMember(EDebugPCPlatformID)                        OpenLinkBehavior                                            OFFSET(get<T>, {0x3C8, 1, 0, 0})
	SMember(FLocString)                                HeaderString                                                OFFSET(getStruct<T>, {0x3CC, 8, 0, 0})
	SMember(FLocString)                                AvailabilityString                                          OFFSET(getStruct<T>, {0x3D4, 8, 0, 0})
	CMember(class UTexture2D*)                         NormalTexture                                               OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UTexture2D*)                         FocusedTexture                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         DLCInfoBrandTexture                                         OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UInputWidget*)                       InputWidget                                                 OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UTextBlockBase*)                     HeaderTextblock                                             OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AvailabilityTextBlock                                       OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UImage*)                             DLCImage                                                    OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UImage*)                             Checkmark                                                   OFFSET(get<T>, {0x440, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.MainMenuDLCWidget.OnButtonUnhoveredUnfocused
	// void OnButtonUnhoveredUnfocused();                                                                                       // [0x187e330] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuDLCWidget.OnButtonHoveredFocused
	// void OnButtonHoveredFocused();                                                                                           // [0x187e310] Final|Native|Protected 
};

/// Struct /Script/Indiana.MainMenuLevelDescription
/// Size: 0x0030 (0x000000 - 0x000030)
class FMainMenuLevelDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FSoftObjectPath)                           Level                                                       OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FLocString)                                TextReference                                               OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      bIsDeliverableInCurrentMilestone                            OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(class UTravelDestinationData*)             TravelDestinationData                                       OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Indiana.MainMenuLevelsData
/// Size: 0x0010 (0x000038 - 0x000048)
class UMainMenuLevelsData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FMainMenuLevelDescription>)         LevelDescriptions                                           OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.MainMenuWidget
/// Size: 0x00F0 (0x000308 - 0x0003F8)
class UMainMenuWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	SMember(FMulticastInlineDelegate)                  OnCreditsStartRequestedDelegate                             OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCreditsStopRequestedDelegate                              OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	CMember(class UMainMenuLevelsData*)                MainMenuLevelsData                                          OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UMainOptionsWidget*)                 MainOptions                                                 OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class ULevelOptionsWidget*)                ExtraOptions                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class ULevelOptionsWidget*)                DeliverablesOptions                                         OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UOverlay*)                           ContentOverlay                                              OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UOverlay*)                           PressKeyPromptOverlay                                       OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UOverlay*)                           AutosaveSplashOverlay                                       OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UOverlay*)                           LogoContainer                                               OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UButtonBase*)                        InvisibleButton                                             OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UTextBlockBase*)                     VersionTextBlock                                            OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UTextBlockBase*)                     UserNameTextBlock                                           OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PressKeyPrompt                                              OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AutosaveSplashText                                          OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UHorizontalBox*)                     XboxTextblockContainer                                      OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UClass*)                             ButtonClass                                                 OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UClass*)                             SettingsMenuClass                                           OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UCreditsWidget*)                     CreditsWidget                                               OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class ULegalWidget*)                       LegalWidget                                                 OFFSET(get<T>, {0x3C0, 8, 0, 0})
	SMember(FGlobalVariable)                           CreditsMusicGlobalVariable                                  OFFSET(getStruct<T>, {0x3C8, 16, 0, 0})
	DMember(int32_t)                                   OnCreditsStartGlobalVariableValue                           OFFSET(get<int32_t>, {0x3D8, 4, 0, 0})
	CMember(class UGammaSelectionWidget*)              GammaSelection                                              OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UMainMenuDLCManagerWidget*)          MenuDLCManager                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.MainMenuWidget.TryInitializeDLC
	// void TryInitializeDLC();                                                                                                 // [0x187e940] Final|Native|Private 
	// Function /Script/Indiana.MainMenuWidget.StartAutosaveSplash
	// void StartAutosaveSplash();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OpenMainScreen
	// void OpenMainScreen();                                                                                                   // [0x187e900] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OpenExtrasScreen
	// void OpenExtrasScreen();                                                                                                 // [0x187e8e0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OpenDeliverablesScreen
	// void OpenDeliverablesScreen();                                                                                           // [0x187e8c0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OpenCredits
	// void OpenCredits();                                                                                                      // [0x187e8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnStartShowMainOptions
	// void OnStartShowMainOptions();                                                                                           // [0x1c5deb0] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnStartShowGammaSelection
	// void OnStartShowGammaSelection();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnStartHideGammaSelection
	// void OnStartHideGammaSelection();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnStartHideAnyTextPrompt
	// void OnStartHideAnyTextPrompt();                                                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnShowMainOptionsComplete
	// void OnShowMainOptionsComplete();                                                                                        // [0x187e880] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnShowMainOptions
	// void OnShowMainOptions();                                                                                                // [0x187e860] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnShowLogo
	// void OnShowLogo();                                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnShowInterface
	// void OnShowInterface(bool bShouldChangeLogo);                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnShowAnyTextPrompt
	// void OnShowAnyTextPrompt();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnOfflineDLCCheckComplete
	// void OnOfflineDLCCheckComplete();                                                                                        // [0x187e6d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnLoadUserGameSettingsComplete
	// void OnLoadUserGameSettingsComplete();                                                                                   // [0x187e2d0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnHideMainOptionsStart
	// void OnHideMainOptionsStart();                                                                                           // [0x187e530] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnHideMainOptionsComplete
	// void OnHideMainOptionsComplete();                                                                                        // [0x187e510] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnHideLogo
	// void OnHideLogo();                                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnHideInterface
	// void OnHideInterface();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MainMenuWidget.OnGammaSelectionOpened
	// void OnGammaSelectionOpened();                                                                                           // [0x187e4f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnGammaSelectionClosed
	// void OnGammaSelectionClosed();                                                                                           // [0x187e4d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnExternalMenuOpened
	// void OnExternalMenuOpened();                                                                                             // [0x187e4b0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnExternalMenuClosed
	// void OnExternalMenuClosed(bool bForced);                                                                                 // [0x187e420] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnDLCCheckComplete
	// void OnDLCCheckComplete();                                                                                               // [0x187e400] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnCreditsInterfaceOpened
	// void OnCreditsInterfaceOpened();                                                                                         // [0x187e3e0] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnCreditsInterfaceClosed
	// void OnCreditsInterfaceClosed(bool bForced);                                                                             // [0x187e350] Final|Native|Protected 
	// Function /Script/Indiana.MainMenuWidget.OnAutosaveSplashComplete
	// void OnAutosaveSplashComplete();                                                                                         // [0x187e2f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnAnyTextPromptHideComplete
	// void OnAnyTextPromptHideComplete();                                                                                      // [0x187e2d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.MainMenuWidget.OnActiveUserChanged
	// void OnActiveUserChanged(EActiveUserChangeType ChangeType);                                                              // [0x1862d50] Final|Native|Protected 
};

/// Class /Script/Indiana.MainOptionsWidget
/// Size: 0x00E0 (0x000300 - 0x0003E0)
class UMainOptionsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(class UVerticalBox*)                       MainOptions                                                 OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UButtonBase*)                        ContinueButton                                              OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UButtonBase*)                        NewGameButton                                               OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UButtonBase*)                        DeliverablesButton                                          OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UButtonBase*)                        ExtrasButton                                                OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UButtonBase*)                        CreditsButton                                               OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UButtonBase*)                        QuitButton                                                  OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UButtonBase*)                        SettingsButton                                              OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UButtonBase*)                        LoadSaveButton                                              OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UButtonBase*)                        ChangeProfileButton                                         OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UClass*)                             SettingsMenuClass                                           OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UClass*)                             DifficultySelectClass                                       OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UClass*)                             MainMenuClass                                               OFFSET(get<T>, {0x3B0, 8, 0, 0})
	SMember(FSoftObjectPath)                           CharacterCustomizationLevel                                 OFFSET(getStruct<T>, {0x3B8, 24, 0, 0})


	/// Functions
	// Function /Script/Indiana.MainOptionsWidget.OnSettingsMenuClosed
	// void OnSettingsMenuClosed();                                                                                             // [0x187e840] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.OnQueryLatestSaveFinished
	// void OnQueryLatestSaveFinished(FString LatestSaveName, bool bHasSaves);                                                  // [0x187e6f0] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.OnLoadSaveMenuClosed
	// void OnLoadSaveMenuClosed(bool bForced);                                                                                 // [0x187e640] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x187e550] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.OnActiveUserChanged
	// void OnActiveUserChanged(EActiveUserChangeType ChangeType);                                                              // [0x187e250] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.InquireDLC2
	// void InquireDLC2();                                                                                                      // [0x187e230] Final|Native|Protected 
	// Function /Script/Indiana.MainOptionsWidget.InquireDLC1
	// void InquireDLC1();                                                                                                      // [0x187e210] Final|Native|Protected 
};

/// Class /Script/Indiana.Makeup
/// Size: 0x0050 (0x000038 - 0x000088)
class UMakeup : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(class UTexture*)                           MakeupMask                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FLinearColor)                              CheekColor                                                  OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(float)                                     CheekRoughness                                              OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     CheekMetallic                                               OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FLinearColor)                              EyeColor                                                    OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(float)                                     EyeRoughness                                                OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     EyeMetallic                                                 OFFSET(get<float>, {0x6C, 4, 0, 0})
	SMember(FLinearColor)                              LipColor                                                    OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	DMember(float)                                     LipRoughness                                                OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     LipMetallic                                                 OFFSET(get<float>, {0x84, 4, 0, 0})
};

/// Struct /Script/Indiana.ManagerDebuggerPlayerData
/// Size: 0x0010 (0x000000 - 0x000010)
class FManagerDebuggerPlayerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UInputComponent*)                    InputComponent                                              OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.ManagerDebugger
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UManagerDebugger : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<FManagerDebuggerPlayerData>)        PlayerData                                                  OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Indiana.Manifest
/// Size: 0x0050 (0x000030 - 0x000080)
class UManifest : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.MapAreaBeaconWidget
/// Size: 0x0010 (0x000278 - 0x000288)
class UMapAreaBeaconWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(class UImage*)                             AreaImage                                                   OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UImage*)                             BeaconImage                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
};

/// Class /Script/Indiana.MapBeaconData
/// Size: 0x0050 (0x000038 - 0x000088)
class UMapBeaconData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<FGuid, FBeaconData>)                  MapBeaconData                                               OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.MapBeaconEntryTooltipWidget
/// Size: 0x0000 (0x000300 - 0x000300)
class UMapBeaconEntryTooltipWidget : public UToolTipContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
};

/// Class /Script/Indiana.MapBeaconEntryWidget
/// Size: 0x0050 (0x000308 - 0x000358)
class UMapBeaconEntryWidget : public UInteractableMapEntry
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(class UImage*)                             ActiveIconImage                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             InactiveIconImage                                           OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Struct /Script/Indiana.MapCompassUIVisuals
/// Size: 0x0018 (0x000000 - 0x000018)
class FMapCompassUIVisuals : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(class UTexture2D*)                         Texture                                                     OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Indiana.MapCompassUIVisualData
/// Size: 0x0010 (0x000038 - 0x000048)
class UMapCompassUIVisualData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FMapCompassUIVisuals>)              MapCompassNamesAndTextures                                  OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.MapFastTravelEntryWidget
/// Size: 0x0028 (0x000308 - 0x000330)
class UMapFastTravelEntryWidget : public UInteractableMapEntry
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UImage*)                             IconImage                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.MapFloorTrackedActor
/// Size: 0x0000 (0x000030 - 0x000030)
class UMapFloorTrackedActor : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.MapFloorVolume
/// Size: 0x0008 (0x000310 - 0x000318)
class AMapFloorVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FName)                                     FloorName                                                   OFFSET(getStruct<T>, {0x310, 8, 0, 0})
};

/// Struct /Script/Indiana.ConditionalMusicTrack
/// Size: 0x0080 (0x000000 - 0x000080)
class FConditionalMusicTrack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FLogicalGroupedExpression)                 Condition                                                   OFFSET(getStruct<T>, {0x0, 120, 0, 0})
	CMember(class UMusicTrackData*)                    MusicTrack                                                  OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Class /Script/Indiana.MapGameplayMusicSettings
/// Size: 0x0038 (0x000038 - 0x000070)
class UMapGameplayMusicSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UMusicTrackData*)                    DefaultTrack                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UMusicTrackData*)                    DangerTrack                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UMusicTrackData*)                    CombatTrack                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UMusicTrackData*)                    PostCombatTrack                                             OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     PostCombatTrackDuration                                     OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(TArray<FConditionalMusicTrack>)            ConditionalOverrides                                        OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Indiana.MapFloorData
/// Size: 0x0048 (0x000000 - 0x000048)
class FMapFloorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FLocString)                                FloorName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         MapImage                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FVector2D)                                 MapMinBounds                                                OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FVector2D)                                 MapMaxBounds                                                OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	DMember(uint32_t)                                  FloorLevel                                                  OFFSET(get<uint32_t>, {0x40, 4, 0, 0})
	DMember(float)                                     GamepadMovementScalar                                       OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/Indiana.MapInformation
/// Size: 0x00C8 (0x000038 - 0x000100)
class UMapInformation : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(TWeakObjectPtr<class UWorld*>)             ParentMap                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UPresenceData*)                      PresenceData                                                OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UTravelRegionData*)                  RegionData                                                  OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UTravelMapLayoutData*)               TravelLayoutData                                            OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UMapBeaconData*)                     MapDefaultBeacons                                           OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UMapTextData*)                       MapTextData                                                 OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UMapPointOfInterestData*)            MapPointsOfInterest                                         OFFSET(get<T>, {0x88, 8, 0, 0})
	DMember(bool)                                      bIsShipMap                                                  OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(bool)                                      bIsRegionMap                                                OFFSET(get<bool>, {0x91, 1, 0, 0})
	CMember(class UMapInformation*)                    ParentRegionMapInformation                                  OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(float)                                     NorthOrientationOffset                                      OFFSET(get<float>, {0xA0, 4, 0, 0})
	SMember(FName)                                     DefaultFloor                                                OFFSET(getStruct<T>, {0xA4, 8, 0, 0})
	CMember(TMap<FName, FMapFloorData>)                Floors                                                      OFFSET(get<T>, {0xB0, 80, 0, 0})
};

/// Class /Script/Indiana.MapLoadingMusicSettings
/// Size: 0x0018 (0x000038 - 0x000050)
class UMapLoadingMusicSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UMusicTrackData*)                    DefaultTrack                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FConditionalMusicTrack>)            ConditionalOverrides                                        OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/Indiana.PointOfInterestLocation
/// Size: 0x0020 (0x000000 - 0x000020)
class FPointOfInterestLocation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   WorldLocation                                               OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FName)                                     FloorName                                                   OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	CMember(class UPointOfInterestData*)               POIData                                                     OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Class /Script/Indiana.MapPointOfInterestData
/// Size: 0x0010 (0x000038 - 0x000048)
class UMapPointOfInterestData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FPointOfInterestLocation>)          PointsOfInterest                                            OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.MapPointOfInterestWidget
/// Size: 0x0018 (0x000308 - 0x000320)
class UMapPointOfInterestWidget : public UInteractableMapEntry
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UImage*)                             IconImage                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.MapQuestSelectionEntryWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UMapQuestSelectionEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UButtonBase*)                        EntryButton                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UScalableImage*)                     ActiveQuestIcon                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UScalableImage*)                     InactiveQuestIcon                                           OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     EntryTextBlock                                              OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.MapRendererFilterData
/// Size: 0x0020 (0x000030 - 0x000050)
class UMapRendererFilterData : public UAssetUserData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FGameplayTagContainer)                     FilterCategories                                            OFFSET(getStruct<T>, {0x30, 32, 0, 0})
};

/// Class /Script/Indiana.MapRenderer
/// Size: 0x00E0 (0x0002B8 - 0x000398)
class AMapRenderer : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	SMember(FString)                                   RenderName                                                  OFFSET(getStruct<T>, {0x2B8, 16, 0, 0})
	SMember(FName)                                     FloorName                                                   OFFSET(getStruct<T>, {0x2C8, 8, 0, 0})
	DMember(float)                                     RenderUnitsScale                                            OFFSET(get<float>, {0x2D0, 4, 0, 0})
	SMember(FVector2D)                                 OutputResolution                                            OFFSET(getStruct<T>, {0x2D4, 8, 0, 0})
	DMember(float)                                     CameraDistance                                              OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     CaptureTimeOfDay                                            OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(bool)                                      bDisableFog                                                 OFFSET(get<bool>, {0x2E4, 1, 0, 0})
	DMember(bool)                                      bDisableTonemapper                                          OFFSET(get<bool>, {0x2E5, 1, 0, 0})
	DMember(bool)                                      bDisableSceneFringe                                         OFFSET(get<bool>, {0x2E6, 1, 0, 0})
	DMember(bool)                                      bDisableParticles                                           OFFSET(get<bool>, {0x2E7, 1, 0, 0})
	DMember(bool)                                      bDisableGrass                                               OFFSET(get<bool>, {0x2E8, 1, 0, 0})
	DMember(bool)                                      bDisableExposure                                            OFFSET(get<bool>, {0x2E9, 1, 0, 0})
	DMember(bool)                                      bFixedExposure                                              OFFSET(get<bool>, {0x2EA, 1, 0, 0})
	DMember(float)                                     FixedExposureBrightness                                     OFFSET(get<float>, {0x2EC, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<AActor*>>)           ExternalIncludeBoxes                                        OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<AActor*>>)           ExternalExcludeBoxes                                        OFFSET(get<T>, {0x300, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<AActor*>>)           ExplicitHideActors                                          OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ExplicitHiddenActorClasses                                  OFFSET(get<T>, {0x320, 16, 0, 0})
	SMember(FGameplayTagContainer)                     FilteredAssets                                              OFFSET(getStruct<T>, {0x330, 32, 0, 0})
	CMember(TArray<FString>)                           FilteredActorNames                                          OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(class UBoxComponent*)                      CapturePlane                                                OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UCameraComponent*)                   CaptureCamera                                               OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class USceneComponent*)                    IncludeBoxes                                                OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class USceneComponent*)                    ExcludeBoxes                                                OFFSET(get<T>, {0x378, 8, 0, 0})
	DMember(bool)                                      bPerspectiveCamera                                          OFFSET(get<bool>, {0x380, 1, 0, 0})
	DMember(float)                                     PerspectiveCameraFoV                                        OFFSET(get<float>, {0x384, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.MapRenderer.TakeRender
	// void TakeRender();                                                                                                       // [0x18829f0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.MapTextEntryData
/// Size: 0x0020 (0x000000 - 0x000020)
class FMapTextEntryData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FLocString)                                DisplayText                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TextRotation                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FName)                                     FloorName                                                   OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x14, 12, 0, 0})
};

/// Class /Script/Indiana.MapTextData
/// Size: 0x0010 (0x000038 - 0x000048)
class UMapTextData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FMapTextEntryData>)                 MapTextEntries                                              OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.MapTextEntry
/// Size: 0x0020 (0x0002E8 - 0x000308)
class AMapTextEntry : public ABasicMapFloorTrackedActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	SMember(FMapTextEntryData)                         TextEntryData                                               OFFSET(getStruct<T>, {0x2E8, 32, 0, 0})
};

/// Class /Script/Indiana.MapTextEntryWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class UMapTextEntryWidget : public UBaseMapEntryWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UTextBlockBase*)                     MinZoomText                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StartingZoomText                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MaxZoomText                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
	DMember(float)                                     MinZoomThreshold                                            OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     StartingZoomThreshold                                       OFFSET(get<float>, {0x31C, 4, 0, 0})
};

/// Class /Script/Indiana.MapTransitionNotification
/// Size: 0x0018 (0x000300 - 0x000318)
class UMapTransitionNotification : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UOverlay*)                           MainOverlay                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AreaNameTextBlock                                           OFFSET(get<T>, {0x308, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.MapTransitionNotification.StartAnimation
	// void StartAnimation();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MapTransitionNotification.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18828d0] Final|Native|Protected 
	// Function /Script/Indiana.MapTransitionNotification.OnAreaNameModeChanged
	// void OnAreaNameModeChanged(int32_t ModeIn);                                                                              // [0x1882840] Final|Native|Protected 
};

/// Struct /Script/Indiana.MaterialParamMod
/// Size: 0x0060 (0x000000 - 0x000060)
class FMaterialParamMod : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FName)                                     MaterialSlotName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(EMaterialParamType)                        Type                                                        OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(float)                                     ScalarParam                                                 OFFSET(get<float>, {0x14, 4, 0, 0})
	SMember(FLinearColor)                              VectorParam                                                 OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture*>)           TextureParam                                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/Indiana.MaterialParamModVisual
/// Size: 0x0068 (0x000068 - 0x0000D0)
class UMaterialParamModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TArray<FMaterialParamMod>)                 ParamMods                                                   OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(bool)                                      bApplyToBase                                                OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bApplyToChildren                                            OFFSET(get<bool>, {0x79, 1, 0, 0})
	SMember(FName)                                     MaterialSlotName                                            OFFSET(getStruct<T>, {0x7C, 8, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x84, 8, 0, 0})
	CMember(EMaterialParamType)                        Type                                                        OFFSET(get<T>, {0x8C, 1, 0, 0})
	DMember(float)                                     ScalarParam                                                 OFFSET(get<float>, {0x90, 4, 0, 0})
	SMember(FLinearColor)                              VectorParam                                                 OFFSET(getStruct<T>, {0x94, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture*>)           TextureParam                                                OFFSET(get<T>, {0xA8, 8, 0, 0})
};

/// Class /Script/Indiana.MedKitAbilityWidget
/// Size: 0x0070 (0x000370 - 0x0003E0)
class UMedKitAbilityWidget : public UAbilityOverviewChildWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	DMember(float)                                     MedkitHoldRatioThreshold                                    OFFSET(get<float>, {0x370, 4, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              DrugSlotOne                                                 OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              DrugSlotTwo                                                 OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              DrugSlotThree                                               OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UMedKitDrugSlotWidget*)              DrugSlotFour                                                OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UHorizontalBox*)                     DrugSlotContainer                                           OFFSET(get<T>, {0x398, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.MedKitAbilityWidget.UpdateDrugSlots
	// void UpdateDrugSlots(int32_t ConsumablesUsed);                                                                           // [0x1882a10] Final|Native|Protected 
};

/// Class /Script/Indiana.MedKitComponent
/// Size: 0x0088 (0x0000E0 - 0x000168)
class UMedKitComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FLocString)                                DisplayName                                                 OFFSET(getStruct<T>, {0x118, 8, 0, 0})
	CMember(class UTexture2D*)                         AbilityIcon                                                 OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      TriggerSound                                                OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class UAnimMontage*)                       AbilityMontage                                              OFFSET(get<T>, {0x130, 8, 0, 0})
	DMember(float)                                     PercentToHealCompanions                                     OFFSET(get<float>, {0x138, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.MedKitComponent.StartMedkit
	// void StartMedkit(class UWeapon* Weapon);                                                                                 // [0x1882960] Final|Native|Protected 
	// Function /Script/Indiana.MedKitComponent.OnAnimNotifyEvent
	// void OnAnimNotifyEvent(EAnimNotify AnimNotifyEvent);                                                                     // [0x18827c0] Final|Native|Protected 
	// Function /Script/Indiana.MedKitComponent.OnAbilityMontageEnded
	// void OnAbilityMontageEnded(class UAnimMontage* Montage, bool bInterrupted);                                              // [0x18826f0] Final|Native|Protected 
};

/// Class /Script/Indiana.MedKitDrugSlotWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UMedKitDrugSlotWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UImage*)                             DrugSlotImage                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTexture2D*)                         SlotIsFilled                                                OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTexture2D*)                         SlotIsEmpty                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Struct /Script/Indiana.MeleeAnimEvent
/// Size: 0x0010 (0x000000 - 0x000010)
class FMeleeAnimEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UAnimMontage*)                       Anim                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bSkipIfHaveQueuedAction                                     OFFSET(get<bool>, {0xD, 1, 0, 0})
};

/// Class /Script/Indiana.MeleeAnimEventEffect
/// Size: 0x00E0 (0x000030 - 0x000110)
class UMeleeAnimEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(TMap<EMeleeAction, FMeleeAnimEvent>)       PreAnims                                                    OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TArray<FMeleeAnimEvent>)                   Anims                                                       OFFSET(get<T>, {0x88, 16, 0, 0})
	SMember(FRotator)                                  FxRotation                                                  OFFSET(getStruct<T>, {0x98, 12, 0, 0})
	CMember(EMeshTarget)                               TargetMesh                                                  OFFSET(get<T>, {0xA4, 1, 0, 0})
	CMember(EMeleeAction)                              MeleeAction                                                 OFFSET(get<T>, {0xA5, 1, 0, 0})
	DMember(float)                                     CustomInterruptBlendOutTime                                 OFFSET(get<float>, {0xA8, 4, 0, 0})
};

/// Class /Script/Indiana.MeleeBlockBehaviorStateInfo
/// Size: 0x0000 (0x000120 - 0x000120)
class UMeleeBlockBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/Indiana.MeleeBlockRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UMeleeBlockRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.MeleeActionCollisionInfo
/// Size: 0x0050 (0x000030 - 0x000080)
class UMeleeActionCollisionInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FName)                                     CollisionSocket                                             OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(class UShapeComponent*)                    CollisionShape                                              OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FTransformedShape)                         CollisionShapeInfo                                          OFFSET(getStruct<T>, {0x40, 64, 0, 0})
};

/// Struct /Script/Indiana.ShapeInterface
/// Size: 0x0008 (0x000000 - 0x000008)
class FShapeInterface : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/Indiana.BoxShapeData
/// Size: 0x0010 (0x000008 - 0x000018)
class FBoxShapeData : public FShapeInterface
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector)                                   BoxExtent                                                   OFFSET(getStruct<T>, {0x8, 12, 0, 0})
};

/// Struct /Script/Indiana.SphereShapeData
/// Size: 0x0008 (0x000008 - 0x000010)
class FSphereShapeData : public FShapeInterface
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     SphereRadius                                                OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Indiana.CapsuleShapeData
/// Size: 0x0008 (0x000008 - 0x000010)
class FCapsuleShapeData : public FShapeInterface
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     CapsuleHalfHeight                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     CapsuleRadius                                               OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Indiana.ShapeVariant
/// Size: 0x0040 (0x000000 - 0x000040)
class FShapeVariant : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(EShapeType)                                ShapeType                                                   OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FBoxShapeData)                             BoxData                                                     OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FSphereShapeData)                          SphereData                                                  OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FCapsuleShapeData)                         CapsuleData                                                 OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Indiana.TransformedShapeVariant
/// Size: 0x0070 (0x000000 - 0x000070)
class FTransformedShapeVariant : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FTransform)                                ShapeTransform                                              OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	SMember(FShapeVariant)                             Shape                                                       OFFSET(getStruct<T>, {0x30, 64, 0, 0})
};

/// Struct /Script/Indiana.MeleeCollisionInfo
/// Size: 0x0080 (0x000000 - 0x000080)
class FMeleeCollisionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	DMember(bool)                                      bWeaponMesh                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FName)                                     CollisionSocket                                             OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	SMember(FTransformedShapeVariant)                  CollisionShapeInfo                                          OFFSET(getStruct<T>, {0x10, 112, 0, 0})
};

/// Class /Script/Indiana.MeleeMode
/// Size: 0x03A0 (0x000130 - 0x0004D0)
class UMeleeMode : public UWeaponMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
	DMember(float)                                     AnimationSpeed                                              OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(float)                                     ApproximateSwingTime                                        OFFSET(get<float>, {0x134, 4, 0, 0})
	CMember(class UMeleeActionCollisionInfo*)          DefaultCollision                                            OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(TMap<EMeleeAction, class UMeleeActionCollisionInfo*>) CollisionOverrides                               OFFSET(get<T>, {0x140, 80, 0, 0})
	SMember(FMeleeCollisionInfo)                       DefaultMeleeCollision                                       OFFSET(getStruct<T>, {0x190, 128, 0, 0})
	SMember(FMeleeCollisionInfo)                       FartherReachMeleeCollision                                  OFFSET(getStruct<T>, {0x210, 128, 0, 0})
	CMember(TMap<EMeleeAction, FMeleeCollisionInfo>)   MeleeCollisionOverrides                                     OFFSET(get<T>, {0x290, 80, 0, 0})
	CMember(TMap<FGameplayTag, FMeleeCollisionInfo>)   MeleeCollisionGameplaytagOverrides                          OFFSET(get<T>, {0x2E0, 80, 0, 0})
	CMember(class UImpactDataSet*)                     ImpactDataSet                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(EHitReactType)                             DefaultHitReactionType                                      OFFSET(get<T>, {0x338, 1, 0, 0})
	CMember(EHitReactType)                             SweepHitReactionType                                        OFFSET(get<T>, {0x339, 1, 0, 0})
	CMember(EHitReactType)                             PowerHitReactionType                                        OFFSET(get<T>, {0x33A, 1, 0, 0})
	CMember(EHitReactType)                             SpecialAttackHitReactionType                                OFFSET(get<T>, {0x33B, 1, 0, 0})
	SMember(FDamageMultipliers)                        DamageMultipliers                                           OFFSET(getStruct<T>, {0x33C, 16, 0, 0})
	CMember(class UMeleeSequencer*)                    MeleeSequencer                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(TMap<EMeleeAction, float>)                 MeleeActionDurations                                        OFFSET(get<T>, {0x358, 80, 0, 0})
	DMember(float)                                     MaxImpactDistance                                           OFFSET(get<float>, {0x3A8, 4, 0, 0})
	CMember(TMap<EMeleeAction, float>)                 NPCMeleeActionDamageMultipliers                             OFFSET(get<T>, {0x3B0, 80, 0, 0})
	DMember(int32_t)                                   MaxChainSwings                                              OFFSET(get<int32_t>, {0x400, 4, 0, 0})
	CMember(class UClass*)                             CritSpell                                                   OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class URpgStat*)                           PowerAttackWindUpStat                                       OFFSET(get<T>, {0x410, 8, 0, 0})
	DMember(bool)                                      bAllowSurfaceImpacts                                        OFFSET(get<bool>, {0x418, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.MeleeMode.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x1887db0] Final|Native|Protected 
};

/// Struct /Script/Indiana.DamageTypeRequirement
/// Size: 0x0010 (0x000000 - 0x000010)
class FDamageTypeRequirement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   MinSkill                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.MeleeMultiDamageTypeMode
/// Size: 0x0038 (0x0004C8 - 0x000500)
class UMeleeMultiDamageTypeMode : public UMeleeMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x4C8, 1, 0, 0})
	CMember(TArray<FDamageTypeRequirement>)            DamageTypes                                                 OFFSET(get<T>, {0x4D0, 16, 0, 0})
};

/// Class /Script/Indiana.MeleeSequencer
/// Size: 0x0060 (0x000030 - 0x000090)
class UMeleeSequencer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/Indiana.MeleeSequencer.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x1887e40] Final|Native|Protected 
	// Function /Script/Indiana.MeleeSequencer.OnAbilityUnlocked
	// void OnAbilityUnlocked(EUnlockAbility Ability);                                                                          // [0x1887a90] Final|Native|Protected 
};

/// Class /Script/Indiana.MeleeSlotBehaviorStateInfo
/// Size: 0x0028 (0x000120 - 0x000148)
class UMeleeSlotBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
};

/// Class /Script/Indiana.MeleeSlotBaseRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UMeleeSlotBaseRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.MeleeSlotRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class UMeleeSlotRequestData : public UMeleeSlotBaseRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(EMeleeAction)                              MeleeAction                                                 OFFSET(get<T>, {0x68, 1, 0, 0})
	DMember(bool)                                      bAllowOvershoot                                             OFFSET(get<bool>, {0x69, 1, 0, 0})
	DMember(float)                                     OvershootCheckTime                                          OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Indiana.MeleeSlotPatternRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class UMeleeSlotPatternRequestData : public UMeleeSlotBaseRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(int32_t)                                   AttackPatternIndex                                          OFFSET(get<int32_t>, {0x68, 4, 0, 0})
};

/// Class /Script/Indiana.MeleeSlotManagerComponent
/// Size: 0x0070 (0x0000E0 - 0x000150)
class UMeleeSlotManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:


	/// Functions
	// Function /Script/Indiana.MeleeSlotManagerComponent.OnAttackerNumMeleeSlotsRequiredChanged
	// void OnAttackerNumMeleeSlotsRequiredChanged(class AIndianaAiController* AttackerController);                             // [0x1887b10] Final|Native|Public  
};

/// Class /Script/Indiana.MeleeStatusEffect
/// Size: 0x0000 (0x000188 - 0x000188)
class UMeleeStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.WeaponVisuals
/// Size: 0x01D0 (0x000030 - 0x000200)
class UWeaponVisuals : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(TMap<EWeaponEvent, class UEventEffect*>)   WeaponEvents                                                OFFSET(get<T>, {0x30, 80, 0, 0})
	CMember(TMap<EWeaponState, class UEventEffect*>)   WeaponStates                                                OFFSET(get<T>, {0x80, 80, 0, 0})
	CMember(TMap<FName, class UEventEffect*>)          WeaponCustomEvents                                          OFFSET(get<T>, {0xD0, 80, 0, 0})
	CMember(TMap<FName, class UEventEffect*>)          WeaponCustomStates                                          OFFSET(get<T>, {0x120, 80, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             Target                                                      OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(TWeakObjectPtr<class UWeapon*>)            Weapon                                                      OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             WeaponMesh                                                  OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             CharacterMesh                                               OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class UWeaponVisuals*)                     NextVisual                                                  OFFSET(get<T>, {0x190, 8, 0, 0})
	SMember(FEventEffectState)                         EventEffectState                                            OFFSET(getStruct<T>, {0x1D8, 32, 0, 0})


	/// Functions
	// Function /Script/Indiana.WeaponVisuals.UninitializeBP
	// void UninitializeBP();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.TriggerEventBP
	// void TriggerEventBP(EWeaponEvent WeaponEvent, FEventEffectParams& Params);                                               // [0x1c5deb0] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.TriggerDamageTypeMuzzleFx
	// void TriggerDamageTypeMuzzleFx();                                                                                        // [0x18e9a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.TriggerCustomEventBP
	// void TriggerCustomEventBP(FName EventName, FEventEffectParams& Params);                                                  // [0x1c5deb0] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.TriggerCustomEvent
	// void TriggerCustomEvent(FName EventName);                                                                                // [0x18e99b0] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.TickBP
	// void TickBP(float DeltaTime);                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.StopCustomEventBP
	// void StopCustomEventBP(FName EventName);                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.StopCustomEvent
	// void StopCustomEvent(FName EventName);                                                                                   // [0x18e9920] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.LeaveStateBP
	// void LeaveStateBP(EWeaponState WeaponState);                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.LeaveCustomStateBP
	// void LeaveCustomStateBP(FName EventName);                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.LeaveCustomState
	// void LeaveCustomState(FName StateName);                                                                                  // [0x18e9870] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.InterruptEventBP
	// void InterruptEventBP(EWeaponEvent WeaponEvent);                                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.InitializeBP
	// void InitializeBP(class AActor* NewTarget, class UWeapon* NewWeapon);                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.EnterStateBP
	// void EnterStateBP(EWeaponState WeaponState, FEventEffectParams& Params);                                                 // [0x1c5deb0] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.EnterCustomStateBP
	// void EnterCustomStateBP(FName EventName, FEventEffectParams& Params);                                                    // [0x1c5deb0] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/Indiana.WeaponVisuals.EnterCustomState
	// void EnterCustomState(FName StateName);                                                                                  // [0x18e9510] Native|Public|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.CreateLerpTimer
	// void CreateLerpTimer(FLerpTimer& TimerProperties);                                                                       // [0x18e9460] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.WeaponVisuals.ClearLerpTimers
	// void ClearLerpTimers();                                                                                                  // [0x18e9440] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.PrimaryWeaponVisuals
/// Size: 0x0048 (0x000200 - 0x000248)
class UPrimaryWeaponVisuals : public UWeaponVisuals
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(class UReticleVisualsDataAsset*)           ReticleVisuals                                              OFFSET(get<T>, {0x200, 8, 0, 0})
	SMember(FName)                                     OverrideAttachSocket                                        OFFSET(getStruct<T>, {0x208, 8, 0, 0})
	SMember(FVector)                                   WeaponFineAimOffset                                         OFFSET(getStruct<T>, {0x210, 12, 0, 0})
	SMember(FVector)                                   WeaponNormalAimOffset                                       OFFSET(getStruct<T>, {0x21C, 12, 0, 0})
	SMember(FVector)                                   WeaponFineAimCenterOffset                                   OFFSET(getStruct<T>, {0x228, 12, 0, 0})
	SMember(FVector)                                   WeaponNormalAimCenterOffset                                 OFFSET(getStruct<T>, {0x234, 12, 0, 0})
	CMember(TWeakObjectPtr<class UCharacterAnimInstance*>) CharacterAnimInstance                                   OFFSET(get<T>, {0x240, 8, 0, 0})
};

/// Class /Script/Indiana.MeleeVisuals
/// Size: 0x0010 (0x000248 - 0x000258)
class UMeleeVisuals : public UPrimaryWeaponVisuals
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
};

/// Class /Script/Indiana.MeshModVisual
/// Size: 0x0058 (0x000068 - 0x0000C0)
class UMeshModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TMap<FName, TWeakObjectPtr<UMaterialInterface*>>) MaterialOverrides                                    OFFSET(get<T>, {0x68, 80, 0, 0})
	CMember(class UMeshComponent*)                     AddedComponent                                              OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Class /Script/Indiana.MetaTeamData
/// Size: 0x0000 (0x000080 - 0x000080)
class UMetaTeamData : public UBaseTeamData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.MFTSelectionEntryWidget
/// Size: 0x0010 (0x000300 - 0x000310)
class UMFTSelectionEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     FastTravelTextBlock                                         OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.MFTSelectionWidget
/// Size: 0x0038 (0x000308 - 0x000340)
class UMFTSelectionWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class UTextBlockBase*)                     HeaderTextblock                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UVerticalBox*)                       EntryList                                                   OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UMFTSelectionEntryWidget*)           CancelEntry                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UClass*)                             EntryClass                                                  OFFSET(get<T>, {0x338, 8, 0, 0})
};

/// Class /Script/Indiana.MicroMod
/// Size: 0x0010 (0x000030 - 0x000040)
class UMicroMod : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FStatModifierDescription>)          RpgStatMods                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.MicroModTable
/// Size: 0x0050 (0x000038 - 0x000088)
class UMicroModTable : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<class UClass*, uint32_t>)             MicoModToWeightMap                                          OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Struct /Script/Indiana.ModAppearance
/// Size: 0x0008 (0x000040 - 0x000048)
class FModAppearance : public FAppearanceMatch
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UModVisual*)                         ModVisual                                                   OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.ModAppearances
/// Size: 0x0010 (0x000030 - 0x000040)
class UModAppearances : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FModAppearance>)                    ModAppearances                                              OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Indiana.AppliedMod
/// Size: 0x000C (0x000000 - 0x00000C)
class FAppliedMod : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TWeakObjectPtr<class UModVisual*>)         Mod                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bPermanentlyApplied                                         OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Class /Script/Indiana.AppliedModVisualData
/// Size: 0x0010 (0x000030 - 0x000040)
class UAppliedModVisualData : public UAssetUserData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FAppliedMod>)                       AppliedModData                                              OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.ModVisuals
/// Size: 0x0010 (0x000068 - 0x000078)
class UModVisuals : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<class UModVisual*>)                 Visuals                                                     OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Indiana.MoveToBehaviorStateInfo
/// Size: 0x0008 (0x000178 - 0x000180)
class UMoveToBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:


	/// Functions
	// Function /Script/Indiana.MoveToBehaviorStateInfo.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x1887ed0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.MoveToRequestData
/// Size: 0x0010 (0x000080 - 0x000090)
class UMoveToRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(bool)                                      bWaitAfterArrival                                           OFFSET(get<bool>, {0x80, 1, 0, 0})
	DMember(float)                                     MinWaitTime                                                 OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     MaxWaitTime                                                 OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(bool)                                      bFaceTargetWhileWaiting                                     OFFSET(get<bool>, {0x8C, 1, 0, 0})
	DMember(bool)                                      bCompleteOnDamageTaken                                      OFFSET(get<bool>, {0x8D, 1, 0, 0})
};

/// Class /Script/Indiana.MoviePlayerWidget
/// Size: 0x0068 (0x000308 - 0x000370)
class UMoviePlayerWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	SMember(FMulticastInlineDelegate)                  OnMovieEnd                                                  OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	CMember(class UImage*)                             MovieDisplay                                                OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UBackgroundBlur*)                    SkipContainer                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UOverlay*)                           MovieOverlay                                                OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UMediaTexture*)                      MediaTexture                                                OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class USubtitleManagerWidget*)             SubtitleManager                                             OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  HoldInputLabel                                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UButtonBase*)                        InvisibleButton                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UMediaSoundComponent*)               MediaSoundComponent                                         OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(float)                                     MaxTimeBetweenInputs                                        OFFSET(get<float>, {0x358, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.MoviePlayerWidget.StopMovie
	// void StopMovie(bool bWasSkipped);                                                                                        // [0x18880a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.MoviePlayerWidget.PlayMovie
	// void PlayMovie(class UFileMediaSource* Movie);                                                                           // [0x1887f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.MoviePlayerWidget.PauseMovie
	// void PauseMovie();                                                                                                       // [0x1887f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.MoviePlayerWidget.OnMovieFinished
	// void OnMovieFinished();                                                                                                  // [0x1887c50] Final|Native|Protected 
	// Function /Script/Indiana.MoviePlayerWidget.OnAttemptCancel
	// void OnAttemptCancel();                                                                                                  // [0x1887ba0] Final|Native|Public  
	// Function /Script/Indiana.MoviePlayerWidget.InitiateFadeOut
	// void InitiateFadeOut();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.MoviePlayerWidget.InitiateFadeIn
	// void InitiateFadeIn();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.MovieSubtitleData
/// Size: 0x00A0 (0x000038 - 0x0000D8)
class UMovieSubtitleData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TMap<TWeakObjectPtr<UFileMediaSource*>, class USubtitleData*>) SubtitleData                            OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TMap<FString, class USubtitleData*>)       SubtitleDataByName                                          OFFSET(get<T>, {0x88, 80, 0, 0})
};

/// Class /Script/Indiana.MultiQuestMapTracker
/// Size: 0x0040 (0x000300 - 0x000340)
class UMultiQuestMapTracker : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class UClass*)                             QuestEntryClass                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UBorder*)                            MainBorder                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UVerticalBox*)                       ActiveQuestVBox                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ActiveQuestEntry                                            OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UVerticalBox*)                       InactiveQuestVBox                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UVerticalBox*)                       InactiveQuestEntryVBox                                      OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.StatusEffectChildData
/// Size: 0x0008 (0x000030 - 0x000038)
class UStatusEffectChildData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UStatusEffect*)                      StatusEffect                                                OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/Indiana.MultiStatusEffect
/// Size: 0x0030 (0x000188 - 0x0001B8)
class UMultiStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	CMember(TArray<class UStatusEffectChildData*>)     ChildEffectsData                                            OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(TArray<class UStatusEffect*>)              ChildStatusEffects                                          OFFSET(get<T>, {0x1A8, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.MultiStatusEffect.OnChildCleared
	// void OnChildCleared(class UStatusEffect* ChildEffect);                                                                   // [0x1887bc0] Final|Native|Private 
};

/// Class /Script/Indiana.MusicTrackData
/// Size: 0x0008 (0x000038 - 0x000040)
class UMusicTrackData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     WwiseStateName                                              OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.MusicManager
/// Size: 0x0038 (0x000030 - 0x000068)
class UMusicManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UMusicTrackData*)                    ScriptedOverrideTrack                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UMusicTrackData*)                    CurrentTrack                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UMapGameplayMusicSettings*)          CurrentMapGameplayMusicSettings                             OFFSET(get<T>, {0x40, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.MusicManager.SetMusicOverride_BP
	// void SetMusicOverride_BP(class UMusicTrackData* OverrideTrack);                                                          // [0x1888020] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.MusicManager.OnPreMapLoad
	// void OnPreMapLoad(FString MapName);                                                                                      // [0x1887d00] Final|Native|Protected 
	// Function /Script/Indiana.MusicManager.OnPostMapLoad
	// void OnPostMapLoad(class UWorld* World);                                                                                 // [0x1887c70] Final|Native|Protected 
};

/// Class /Script/Indiana.NavArea_Crouch
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Crouch : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavArea_Door
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Door : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavArea_Elevator
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Elevator : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavArea_Hazard
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Hazard : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavArea_Hearing
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Hearing : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavArea_Jump
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Jump : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavArea_Ladder
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Ladder : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavArea_Mine
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Mine : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavArea_Trap
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Trap : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavArea_Walk
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavArea_Walk : public UNavArea
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavFilter_AIControllerBehavior
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavFilter_AIControllerBehavior : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavFilter_AIControllerDefaultEQS
/// Size: 0x0000 (0x000050 - 0x000050)
class UNavFilter_AIControllerDefaultEQS : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NavigationGroupWidget
/// Size: 0x0080 (0x000300 - 0x000380)
class UNavigationGroupWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(class UHorizontalBox*)                     EntryContainer                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UInputWidget*)                       PreviousInputWidget                                         OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UInputWidget*)                       NextInputWidget                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class USizeBox*)                           ContainerSizeBox                                            OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UScrollBox*)                         ContainerScrollBox                                          OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UButtonBase*)                        LeftArrowButton                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UButtonBase*)                        RightArrowButton                                            OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UButtonGroup*)                       ButtonGroup                                                 OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UClass*)                             EntryClass                                                  OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(TArray<FLocString>)                        Entries                                                     OFFSET(get<T>, {0x348, 16, 0, 0})
	SMember(FName)                                     PreviousActionName                                          OFFSET(getStruct<T>, {0x368, 8, 0, 0})
	SMember(FName)                                     NextActionName                                              OFFSET(getStruct<T>, {0x370, 8, 0, 0})
	DMember(bool)                                      bAllowLooping                                               OFFSET(get<bool>, {0x378, 1, 0, 0})
};

/// Class /Script/Indiana.NewSaveWidget
/// Size: 0x0010 (0x000278 - 0x000288)
class UNewSaveWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NewSaveText                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
};

/// Class /Script/Indiana.NiagaraOptimizationComponent
/// Size: 0x0028 (0x0000E0 - 0x000108)
class UNiagaraOptimizationComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(TArray<class UNiagaraComponent*>)          OptimizedComponents                                         OFFSET(get<T>, {0xE0, 16, 0, 0})
	DMember(float)                                     RenderCheckDelay                                            OFFSET(get<float>, {0xF0, 4, 0, 0})
	SMember(FName)                                     OptimizationTag                                             OFFSET(getStruct<T>, {0xF4, 8, 0, 0})
};

/// Class /Script/Indiana.NotificationHelpers
/// Size: 0x0000 (0x000030 - 0x000030)
class UNotificationHelpers : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.NPCNavigationQueryFilter_EQS
/// Size: 0x0000 (0x000050 - 0x000050)
class UNPCNavigationQueryFilter_EQS : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.NPCNavigationQueryFilter_Pathing
/// Size: 0x0008 (0x000050 - 0x000058)
class UNPCNavigationQueryFilter_Pathing : public UNavigationQueryFilter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      bBehaviorFilter                                             OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Class /Script/Indiana.ObjectiveListWidget
/// Size: 0x0028 (0x000300 - 0x000328)
class UObjectiveListWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(class UScrollBox*)                         ObjectiveList                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UClass*)                             ObjectiveListEntry                                          OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.ObjectiveWaypointGameDataReference
/// Size: 0x0000 (0x000050 - 0x000050)
class UObjectiveWaypointGameDataReference : public UGameDataReference
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:


	/// Functions
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetOverridesPreviousWaypoint
	// bool GetOverridesPreviousWaypoint();                                                                                     // [0x188b2f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetGameObject
	// FGuid GetGameObject();                                                                                                   // [0x188b2b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetDisplayOverrideWithGender
	// FString GetDisplayOverrideWithGender(EGender CharacterGender);                                                           // [0x188b1f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetDisplayOverrideID
	// int32_t GetDisplayOverrideID();                                                                                          // [0x188b1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.ObjectiveWaypointGameDataReference.GetDisplayOverride
	// FString GetDisplayOverride();                                                                                            // [0x188b180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ObsidianIDComponent
/// Size: 0x0018 (0x0000E0 - 0x0000F8)
class UObsidianIDComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(ESpecialObsidianID)                        SpecialID                                                   OFFSET(get<T>, {0xE0, 1, 0, 0})
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0xE4, 16, 0, 0})
	DMember(bool)                                      bInstancesShareSavedState                                   OFFSET(get<bool>, {0xF4, 1, 0, 0})
};

/// Class /Script/Indiana.OCLAudioComponent
/// Size: 0x0050 (0x000150 - 0x0001A0)
class UOCLAudioComponent : public UInteractableAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TMap<EOCLEventType, class UAkPlaySoundEventEffect*>) AudioEvents                                       OFFSET(get<T>, {0x150, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.OCLAudioComponent.Stop
	// void Stop(EOCLEventType Type);                                                                                           // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLAudioComponent.Play
	// void Play(EOCLEventType Type);                                                                                           // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.OCLComponent
/// Size: 0x01E0 (0x0000E0 - 0x0002C0)
class UOCLComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(EOCLState)                                 InitialState                                                OFFSET(get<T>, {0xF0, 1, 0, 0})
	CMember(class UClass*)                             KeyItem                                                     OFFSET(get<T>, {0xF8, 8, 0, 0})
	DMember(bool)                                      RemoveKeyAfterUse                                           OFFSET(get<bool>, {0x100, 1, 0, 0})
	DMember(bool)                                      bCanLockpick                                                OFFSET(get<bool>, {0x101, 1, 0, 0})
	DMember(bool)                                      bForceLockpickLevel                                         OFFSET(get<bool>, {0x102, 1, 0, 0})
	CMember(EOCLDifficulty)                            LockpickDifficulty                                          OFFSET(get<T>, {0x103, 1, 0, 0})
	DMember(int32_t)                                   ForcedLockpickLevel                                         OFFSET(get<int32_t>, {0x104, 4, 0, 0})
	CMember(class UClass*)                             LockpickItem                                                OFFSET(get<T>, {0x108, 8, 0, 0})
	DMember(float)                                     AutoCloseDelay                                              OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     AutoCloseDelayNPC                                           OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     AutoCloseRadius                                             OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(bool)                                      bIgnoreForCrime                                             OFFSET(get<bool>, {0x11C, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLStateChange                                            OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenStart                                              OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenEnd                                                OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLCloseStart                                             OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLCloseEnd                                               OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLAnimateOpen                                            OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLAnimateClose                                           OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenAttemptedLocked                                    OFFSET(getStruct<T>, {0x190, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenAttemptedBarred                                    OFFSET(getStruct<T>, {0x1A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLocked                                                 OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLUnlocked                                               OFFSET(getStruct<T>, {0x1C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLBarred                                                 OFFSET(getStruct<T>, {0x1D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLUnbarred                                               OFFSET(getStruct<T>, {0x1E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLSealed                                                 OFFSET(getStruct<T>, {0x1F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLUnsealed                                               OFFSET(getStruct<T>, {0x200, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLOpenInterrupted                                        OFFSET(getStruct<T>, {0x210, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLCloseInterrupted                                       OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickStart                                          OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickSuccess                                        OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickInterrupted                                    OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOCLLockpickLoopStop                                       OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	CMember(EOCLState)                                 CurrentState                                                OFFSET(get<T>, {0x2B8, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OCLComponent.UnsealOCL
	// void UnsealOCL(bool bFireOCLUnsealedEvent);                                                                              // [0x188bab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.UnlockOCL
	// void UnlockOCL(bool bFireOCLUnlockedEvent);                                                                              // [0x188ba20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.UnbarOCL
	// void UnbarOCL(bool bFireOCLUnbarredEvent, bool bEnterLockedState);                                                       // [0x188b950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.SignalOCLAnimationComplete
	// void SignalOCLAnimationComplete();                                                                                       // [0x188b930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.SealOCL
	// void SealOCL(bool bFireOCLSealedEvent);                                                                                  // [0x188b8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.LockOCL
	// void LockOCL(bool bFireOCLLockedEvent);                                                                                  // [0x188b590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.IsSealing
	// bool IsSealing();                                                                                                        // [0x188b560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsSealed
	// bool IsSealed();                                                                                                         // [0x188b530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsOpening
	// bool IsOpening();                                                                                                        // [0x188b500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsOpen
	// bool IsOpen();                                                                                                           // [0x188b4d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsLocked
	// bool IsLocked();                                                                                                         // [0x188b460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsClosing
	// bool IsClosing();                                                                                                        // [0x188b430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsClosed
	// bool IsClosed();                                                                                                         // [0x188b3f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.IsBarred
	// bool IsBarred();                                                                                                         // [0x188b3c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.GetExactLockpickDifficulty
	// char GetExactLockpickDifficulty();                                                                                       // [0x188b290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.GetCurrentState
	// EOCLState GetCurrentState();                                                                                             // [0x188b160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.OCLComponent.BarOCL
	// void BarOCL(bool bFireOCLBarredEvent);                                                                                   // [0x188af30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.AttemptUnlock
	// EOCLResult AttemptUnlock(class AActor* Initiator);                                                                       // [0x188ae90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.AttemptOpen
	// EOCLResult AttemptOpen(class AActor* Initiator, bool bForce, bool bSeal, bool bIgnoreLockStatus, bool bIgnoreStartEvent, bool bIgnoreEndEvent, bool bIgnoreSound, bool bInstantAnimation); // [0x188ac00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OCLComponent.AttemptClose
	// EOCLResult AttemptClose(class AActor* Initiator, bool bForce, bool Block, bool bSeal, bool bIgnoreLockStatus, bool bIgnoreStartEvent, bool bIgnoreEndEvent, bool bIgnoreSound, bool bInstantAnimation); // [0x188a920] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.OctreeHelperActor
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class AOctreeHelperActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(class UOctreeRenderingComponent*)          RenderComp                                                  OFFSET(get<T>, {0x2B8, 8, 0, 0})
};

/// Class /Script/Indiana.OctreeRenderingComponent
/// Size: 0x0008 (0x0004F8 - 0x000500)
class UOctreeRenderingComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
};

/// Class /Script/Indiana.OnRailsBehaviorStateInfo
/// Size: 0x0010 (0x000178 - 0x000188)
class UOnRailsBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.OnRailsRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UOnRailsRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.OnRailsComponent
/// Size: 0x0098 (0x0000E0 - 0x000178)
class UOnRailsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	DMember(float)                                     MinDistanceForChase                                         OFFSET(get<float>, {0xE0, 4, 0, 0})
	CMember(class UAkAudioEvent*)                      TurningLoop                                                 OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class AActor*)                             Spline                                                      OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(int32_t)                                   PathfindingDivisionCount                                    OFFSET(get<int32_t>, {0xF8, 4, 0, 0})
	DMember(float)                                     PathingSpeed                                                OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     AllowedDeltaForArrival                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     VerticalOffset                                              OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(int32_t)                                   VantageFindingDivisionCount                                 OFFSET(get<int32_t>, {0x108, 4, 0, 0})
	CMember(class UAkAudioEvent*)                      MovementStart                                               OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      MovementEnd                                                 OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      MovementLoop                                                OFFSET(get<T>, {0x120, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.OnRailsComponent.OnCompHit
	// void OnCompHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x188b6c0] Final|Native|Private|HasOutParms|HasDefaults 
	// Function /Script/Indiana.OnRailsComponent.OnCharacterDeath
	// void OnCharacterDeath(FCauseDamageInfo& CDI);                                                                            // [0x188b620] Final|Native|Private|HasOutParms 
	// Function /Script/Indiana.OnRailsComponent.IsMovingForward
	// bool IsMovingForward();                                                                                                  // [0x188b4b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OnRailsComponent.IsMoving
	// bool IsMoving();                                                                                                         // [0x188b490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.OnRailsComponent.HasVantageForActor
	// bool HasVantageForActor(class AActor* Actor);                                                                            // [0x188b320] Final|Native|Public  
	// Function /Script/Indiana.OnRailsComponent.FurthestLocationOnSpline
	// FVector FurthestLocationOnSpline();                                                                                      // [0x188b120] Final|Native|Public|HasDefaults 
	// Function /Script/Indiana.OnRailsComponent.FindVantageForLocation
	// FVector FindVantageForLocation(FVector Location);                                                                        // [0x188b070] Final|Native|Public|HasDefaults 
	// Function /Script/Indiana.OnRailsComponent.FindVantageForActor
	// FVector FindVantageForActor(class AActor* Actor);                                                                        // [0x188afc0] Final|Native|Public|HasDefaults 
};

/// Class /Script/Indiana.OptionPresenterWidget
/// Size: 0x0080 (0x000300 - 0x000380)
class UOptionPresenterWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	DMember(bool)                                      bAllowKBMWrapping                                           OFFSET(get<bool>, {0x328, 1, 0, 0})
	DMember(bool)                                      bAllowGamepadWrapping                                       OFFSET(get<bool>, {0x329, 1, 0, 0})
	DMember(bool)                                      bShouldShowButtons                                          OFFSET(get<bool>, {0x32A, 1, 0, 0})
	DMember(bool)                                      bShowButtonsGamepad                                         OFFSET(get<bool>, {0x32B, 1, 0, 0})
	CMember(class UUserSetting*)                       Setting                                                     OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UButtonBase*)                        PreviousButton                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UButtonBase*)                        NextButton                                                  OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UImage*)                             LeftArrowImage                                              OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UImage*)                             RightArrowImage                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     OptionTextBlock                                             OFFSET(get<T>, {0x358, 8, 0, 0})
};

/// Class /Script/Indiana.OptionSliderWidget
/// Size: 0x0068 (0x000300 - 0x000368)
class UOptionSliderWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UTextBlockBase*)                     OptionTitleTextBlock                                        OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NumEntriesDisplayTextBlock                                  OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class USliderBase*)                        OptionSlider                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             MiddlePointImage                                            OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UButtonBase*)                        GamepadButton                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UButtonBase*)                        PreviousStep                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UButtonBase*)                        NextStep                                                    OFFSET(get<T>, {0x340, 8, 0, 0})
	DMember(bool)                                      bShowButtonsGamepad                                         OFFSET(get<bool>, {0x348, 1, 0, 0})
	DMember(bool)                                      bShowSliderValues                                           OFFSET(get<bool>, {0x349, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.OptionSliderWidget.OnSliderValueChanged
	// void OnSliderValueChanged(FSliderEvent& Event);                                                                          // [0x188fae0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.OverlayedSystemMapData
/// Size: 0x0028 (0x000038 - 0x000060)
class UOverlayedSystemMapData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class USystemMapData*)                     Source                                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class USystemMapData*)                     Overlay                                                     OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.PaginatedButtonWidget
/// Size: 0x0010 (0x000278 - 0x000288)
class UPaginatedButtonWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(class UImage*)                             SelectedIcon                                                OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x280, 8, 0, 0})
};

/// Class /Script/Indiana.PooledParticleSystemComponent
/// Size: 0x0010 (0x000760 - 0x000770)
class UPooledParticleSystemComponent : public UParticleSystemComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
	CMember(class UParticlePool*)                      OwningPool                                                  OFFSET(get<T>, {0x760, 8, 0, 0})
};

/// Struct /Script/Indiana.ParticleSystemPool
/// Size: 0x0020 (0x000000 - 0x000020)
class FParticleSystemPool : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<class UPooledParticleSystemComponent*>) ActiveComponents                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<class UPooledParticleSystemComponent*>) FreeComponents                                          OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Indiana.PendingParticleSpawnInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FPendingParticleSpawnInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UParticleSystem*)                    Template                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.ParticlePool
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UParticlePool : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TMap<class UParticleSystem*, FParticleSystemPool>) Pools                                               OFFSET(get<T>, {0x30, 80, 0, 0})
	CMember(TArray<FPendingParticleSpawnInfo>)         PendingPrespawns                                            OFFSET(get<T>, {0x80, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.ParticlePool.ParticleFreed
	// void ParticleFreed(class UParticleSystemComponent* Particle);                                                            // [0x188fc90] Final|Native|Protected 
};

/// Class /Script/Indiana.PatrolBehaviorStateInfo
/// Size: 0x0028 (0x000120 - 0x000148)
class UPatrolBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
};

/// Class /Script/Indiana.PatrolRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UPatrolRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Indiana.ActionSet
/// Size: 0x0018 (0x000000 - 0x000018)
class FActionSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UAIAction*)                          Action                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class AActor*)                             LookAtOverride                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      LookWhileWalking                                            OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Class /Script/Indiana.PatrolNode
/// Size: 0x0060 (0x0002B8 - 0x000318)
class APatrolNode : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FMulticastInlineDelegate)                  OnArriveDelegate                                            OFFSET(getStruct<T>, {0x2B8, 16, 0, 0})
	CMember(class APatrolNode*)                        NextPatrolNode                                              OFFSET(get<T>, {0x2C8, 8, 0, 0})
	DMember(bool)                                      bOrientOnArrival                                            OFFSET(get<bool>, {0x2D0, 1, 0, 0})
	CMember(class UAIAction*)                          Action                                                      OFFSET(get<T>, {0x2D8, 8, 0, 0})
	SMember(FActionSet)                                ActionSet                                                   OFFSET(getStruct<T>, {0x2E0, 24, 0, 0})
	CMember(EPatrolMovementType)                       MovementType                                                OFFSET(get<T>, {0x2F8, 4, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	DMember(bool)                                      bCreatedByTool                                              OFFSET(get<bool>, {0x308, 1, 0, 0})
	CMember(class UAISettings_Patrol*)                 AISettings                                                  OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.PatrolNodeComponent
/// Size: 0x0000 (0x0000E0 - 0x0000E0)
class UPatrolNodeComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
};

/// Class /Script/Indiana.PauseMenuWidget
/// Size: 0x0068 (0x000308 - 0x000370)
class UPauseMenuWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UVerticalBox*)                       OptionsVerticalBox                                          OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UButtonBase*)                        ResumeButton                                                OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UButtonBase*)                        SaveGameButton                                              OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UButtonBase*)                        LoadGameButton                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UButtonBase*)                        MainMenuButton                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UButtonBase*)                        SettingsButton                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UButtonBase*)                        IdleCamButton                                               OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UButtonBase*)                        QuitButton                                                  OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     VersionTextBlock                                            OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     IdleCamButtonText                                           OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UClass*)                             SettingsMenuClass                                           OFFSET(get<T>, {0x360, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.PauseMenuWidget.OnSettingsMenuClosed
	// void OnSettingsMenuClosed();                                                                                             // [0x188fac0] Final|Native|Protected 
	// Function /Script/Indiana.PauseMenuWidget.OnSaveLoadMenuClosed
	// void OnSaveLoadMenuClosed(bool bForced);                                                                                 // [0x188fa30] Final|Native|Protected 
	// Function /Script/Indiana.PauseMenuWidget.OnSaveGameComplete
	// void OnSaveGameComplete(ESaveGameResult SaveResult, ESaveGameType SaveType);                                             // [0x188f960] Final|Native|Protected 
	// Function /Script/Indiana.PauseMenuWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18722e0] Final|Native|Protected 
};

/// Class /Script/Indiana.PerceptionRangeScalarStatusEffect
/// Size: 0x0028 (0x000188 - 0x0001B0)
class UPerceptionRangeScalarStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FGameplayTagContainer)                     CreatureType                                                OFFSET(getStruct<T>, {0x188, 32, 0, 0})
	DMember(float)                                     PerceptionRangeScalar                                       OFFSET(get<float>, {0x1A8, 4, 0, 0})
};

/// Struct /Script/Indiana.PerkTextures
/// Size: 0x0018 (0x000000 - 0x000018)
class FPerkTextures : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UTexture2D*)                         Unpurchased                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTexture2D*)                         Purchased                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UTexture2D*)                         Suppressed                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Indiana.Perk
/// Size: 0x0040 (0x000030 - 0x000070)
class UPerk : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FPerkTextures)                             Icons                                                       OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	CMember(TArray<class UClass*>)                     Spells                                                      OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(bool)                                      bCanBeRespeced                                              OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(bool)                                      bDLCPerk                                                    OFFSET(get<bool>, {0x69, 1, 0, 0})
};

/// Class /Script/Indiana.PerkReadoutWidget
/// Size: 0x0048 (0x000300 - 0x000348)
class UPerkReadoutWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	CMember(class UCanvasPanel*)                       TextContainer                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkNameTextBlock                                           OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkReqsHeaderText                                          OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkReqsDescText                                            OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkSynopsisHeaderText                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkSynopsisDescText                                        OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkDescHeaderText                                          OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkDescText                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkSpecialText                                             OFFSET(get<T>, {0x340, 8, 0, 0})
};

/// Class /Script/Indiana.PerksListEntry
/// Size: 0x0068 (0x000300 - 0x000368)
class UPerksListEntry : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UImage*)                             HighlightImage                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             PendingImage                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTexture2D*)                         ButtonHighlightFocused                                      OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTexture2D*)                         ButtonHighlightSelected                                     OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTexture2D*)                         ButtonHighlightHovered                                      OFFSET(get<T>, {0x340, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.PerksListEntry.UpdateButtonBrush
	// void UpdateButtonBrush(bool bPendingPurchase, bool bActuallyPurchased, bool bSuppressed);                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.PerksListEntry.OnPerkClickedValid
	// void OnPerkClickedValid();                                                                                               // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.PerksListEntry.GetUnpurchasedIcon
	// class UTexture2D* GetUnpurchasedIcon();                                                                                  // [0x188f6c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PerksListEntry.GetSuppressedIcon
	// class UTexture2D* GetSuppressedIcon();                                                                                   // [0x188f690] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PerksListEntry.GetPurchasedIcon
	// class UTexture2D* GetPurchasedIcon();                                                                                    // [0x188f660] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.PerksListRowWidget
/// Size: 0x0128 (0x000300 - 0x000428)
class UPerksListRowWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1064;

public:
	CMember(class UTextBlockBase*)                     PerkTierTextBlock                                           OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk0                                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk1                                                       OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk2                                                       OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk3                                                       OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk4                                                       OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk5                                                       OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk6                                                       OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk7                                                       OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk8                                                       OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk9                                                       OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk10                                                      OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk11                                                      OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk12                                                      OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk13                                                      OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk14                                                      OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UPerksListEntry*)                    Perk15                                                      OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UImage*)                             RowOneBacking                                               OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UImage*)                             RowTwoBacking                                               OFFSET(get<T>, {0x390, 8, 0, 0})
};

/// Class /Script/Indiana.PerksListWidget
/// Size: 0x0060 (0x000300 - 0x000360)
class UPerksListWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(class UPerksListRowWidget*)                RowOne                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UPerksListRowWidget*)                RowTwo                                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UPerksListRowWidget*)                RowThree                                                    OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UPerksListRowWidget*)                RowFour                                                     OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UPerksListRowWidget*)                RowFive                                                     OFFSET(get<T>, {0x320, 8, 0, 0})
	SMember(FLocString)                                TextReference                                               OFFSET(getStruct<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.PerksTierWidget
/// Size: 0x0040 (0x000300 - 0x000340)
class UPerksTierWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class UHorizontalBox*)                     ImageContainer                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             TierImage                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             TierImage2                                                  OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             TierImage3                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             TierImageBacking                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TierTextBlock                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(TArray<class UTexture2D*>)                 Silhouettes                                                 OFFSET(get<T>, {0x330, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.PerksTierWidget.GetTextOpacity
	// float GetTextOpacity(bool bUnlocked);                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.PerksTierWidget.GetImageOpacity
	// float GetImageOpacity(bool bUnlocked);                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
	// Function /Script/Indiana.PerksTierWidget.GetColorType
	// EIndianaUIColorType GetColorType(bool bUnlocked);                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/Indiana.PerkSummaryEntryWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UPerkSummaryEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkNameText                                                OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Struct /Script/Indiana.PerkTier
/// Size: 0x0018 (0x000000 - 0x000018)
class FPerkTier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   PreviousPointsRequired                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<class UClass*>)                     Perks                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Indiana.PerkTiers
/// Size: 0x0010 (0x000000 - 0x000010)
class FPerkTiers : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPerkTier>)                         PerkTiers                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Indiana.PerkTree
/// Size: 0x0090 (0x000038 - 0x0000C8)
class UPerkTree : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TMap<EPerkCategory, FPerkTiers>)           PerkTrees                                                   OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TArray<class UClass*>)                     NonTreePerks                                                OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TWeakObjectPtr<class UPerkTree*>)          DLCPerkTree                                                 OFFSET(get<T>, {0x98, 8, 0, 0})
};

/// Class /Script/Indiana.PerkTreeCollection
/// Size: 0x0070 (0x000038 - 0x0000A8)
class UPerkTreeCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<class UPerkTree*>)                  Sources                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TMap<EPerkCategory, FPerkTiers>)           PerkTrees                                                   OFFSET(get<T>, {0x48, 80, 0, 0})
	CMember(TArray<class UClass*>)                     NonTreePerks                                                OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Class /Script/Indiana.PersistentFiringPattern
/// Size: 0x0000 (0x000030 - 0x000030)
class UPersistentFiringPattern : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.PersonalSpaceComponent
/// Size: 0x00B8 (0x0000E0 - 0x000198)
class UPersonalSpaceComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	SMember(FMulticastInlineDelegate)                  OnPlayerEnteredAcknowledgeZone                              OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerExitedAcknowledgeZone                               OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerEnteredInteractionZone                              OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerExitedInteractionZone                               OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerEnteredViolationZone                                OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerExitedViolationZone                                 OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	DMember(float)                                     AcknowledgementRadius                                       OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     InteractionRadius                                           OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     ViolationRadius                                             OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     RoboDetectionRadius                                         OFFSET(get<float>, {0x15C, 4, 0, 0})
	CMember(EPersonalSpaceZone)                        ChatterPersonalSpaceZone                                    OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.PersonalSpaceComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x188f6f0] Final|Native|Private 
};

/// Class /Script/Indiana.PersuadeBehaviorStateInfo
/// Size: 0x0008 (0x000120 - 0x000128)
class UPersuadeBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(TWeakObjectPtr<class UDisableStatusEffect*>) DisableStatusEffect                                       OFFSET(get<T>, {0x120, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.PersuadeBehaviorStateInfo.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x188fbf0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.PersuadeRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UPersuadeRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.PetableComponent
/// Size: 0x0030 (0x0000E0 - 0x000110)
class UPetableComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(TArray<class UAnimMontage*>)               AnimationMontages                                           OFFSET(get<T>, {0xE0, 16, 0, 0})
};

/// Class /Script/Indiana.Pickup
/// Size: 0x02A0 (0x000390 - 0x000630)
class APickup : public AItemVisualizer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1584;

public:
	SMember(FMulticastInlineDelegate)                  OnPickup                                                    OFFSET(getStruct<T>, {0x3C8, 16, 0, 0})
	DMember(float)                                     MeshLoadDistance                                            OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(float)                                     MeshUnloadDistance                                          OFFSET(get<float>, {0x3DC, 4, 0, 0})
	SMember(FDefaultItemStack)                         DefaultItemStack                                            OFFSET(getStruct<T>, {0x3F0, 504, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x5E8, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x5F0, 8, 0, 0})
	CMember(class UClass*)                             OwningFaction                                               OFFSET(get<T>, {0x5F8, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             OwningActor                                                 OFFSET(get<T>, {0x600, 8, 0, 0})
	DMember(bool)                                      bPlayerOwned                                                OFFSET(get<bool>, {0x628, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.Pickup.ShutdownDropPhysics
	// void ShutdownDropPhysics(bool bUpdateTransforms);                                                                        // [0x188fd40] Final|Native|Protected 
	// Function /Script/Indiana.Pickup.SetupDropPhysics
	// void SetupDropPhysics();                                                                                                 // [0x188fd20] Final|Native|Protected 
	// Function /Script/Indiana.Pickup.OnPhysicsWake
	// void OnPhysicsWake(class UPrimitiveComponent* WakingComponent, FName BoneName);                                          // [0x188f890] Final|Native|Protected 
	// Function /Script/Indiana.Pickup.OnPhysicsSleep
	// void OnPhysicsSleep(class UPrimitiveComponent* SleepingComponent, FName BoneName);                                       // [0x188f7c0] Final|Native|Protected 
	// Function /Script/Indiana.Pickup.GetItem
	// class UItem* GetItem();                                                                                                  // [0x188f640] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Indiana.AkPlaySoundEventEffect
/// Size: 0x0030 (0x000030 - 0x000060)
class UAkPlaySoundEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UAkAudioEvent*)                      Sound                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     FadeTime                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     DelayTime                                                   OFFSET(get<float>, {0x3C, 4, 0, 0})
	CMember(class UAkAudioEvent*)                      SoundLoop                                                   OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     LoopFadeTime                                                OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     LoopDelayTime                                               OFFSET(get<float>, {0x4C, 4, 0, 0})
	CMember(class UAkAudioEvent*)                      StopEvent                                                   OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     StopDelayTime                                               OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(bool)                                      bStopSoundWhenTargetDestroyed                               OFFSET(get<bool>, {0x5C, 1, 0, 0})
	DMember(bool)                                      bPostAtLocation                                             OFFSET(get<bool>, {0x5D, 1, 0, 0})
};

/// Class /Script/Indiana.PlayAnimationAction
/// Size: 0x0028 (0x000038 - 0x000060)
class UPlayAnimationAction : public UAIAction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UPlayAnimEventEffect*)               Animation                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bIsLooping                                                  OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(float)                                     LoopTime                                                    OFFSET(get<float>, {0x44, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayAnimationAction.OnMontageBlendingOut
	// void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);                                               // [0x1893080] Final|Native|Protected 
};

/// Class /Script/Indiana.PlayAnimEventEffect
/// Size: 0x0008 (0x000040 - 0x000048)
class UPlayAnimEventEffect : public UBasePlayAnimEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UAnimMontage*)                       Anim                                                        OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.PlayAnimStateEventEffect
/// Size: 0x0008 (0x000030 - 0x000038)
class UPlayAnimStateEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(EAnimMovementModifierState)                MovementModifierState                                       OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Class /Script/Indiana.PlayDirectionalAnimEventEffect
/// Size: 0x0010 (0x000040 - 0x000050)
class UPlayDirectionalAnimEventEffect : public UBasePlayAnimEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<class UAnimMontage*>)               Anims                                                       OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/Indiana.PlayerAppearanceComponent
/// Size: 0x0008 (0x000480 - 0x000488)
class UPlayerAppearanceComponent : public UAppearanceComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1160;

public:
	DMember(bool)                                      bDefaultToThirdPerson                                       OFFSET(get<bool>, {0x480, 1, 0, 0})
};

/// Class /Script/Indiana.PlayerDeathComponent
/// Size: 0x0048 (0x0002B8 - 0x000300)
class UPlayerDeathComponent : public UCharacterDeathComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(class UAnimMontage*)                       DeathAnimation                                              OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UAnimMontage*)                       CrouchingAnimation                                          OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UAnimMontage*)                       FallingDeathAnimation                                       OFFSET(get<T>, {0x2C8, 8, 0, 0})
	SMember(FName)                                     FallingDeathEndSectionName                                  OFFSET(getStruct<T>, {0x2D0, 8, 0, 0})
	DMember(bool)                                      bFadeCameraIfCrouched                                       OFFSET(get<bool>, {0x2D8, 1, 0, 0})
	DMember(bool)                                      bCrouchedFadeSound                                          OFFSET(get<bool>, {0x2D9, 1, 0, 0})
	DMember(float)                                     AnimWaitTime                                                OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     FadeToBlackTime                                             OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     WaitFadedTime                                               OFFSET(get<float>, {0x2E4, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayerDeathComponent.OnLanded
	// void OnLanded(float DistanceFallen);                                                                                     // [0x1893000] Final|Native|Private 
	// Function /Script/Indiana.PlayerDeathComponent.OnAnimNotifyEvent
	// void OnAnimNotifyEvent(EAnimNotify AnimNotifyEvent);                                                                     // [0x1862d50] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.PlayerDeathComponent.FadeToBlackComplete
	// void FadeToBlackComplete();                                                                                              // [0x1892990] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.PlayerDeathComponent.DeathAnimComplete
	// void DeathAnimComplete();                                                                                                // [0x1892930] Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.PlayerDisableStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UPlayerDisableStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(bool)                                      bDisableCompanionCommands                                   OFFSET(get<bool>, {0x188, 1, 0, 0})
	DMember(bool)                                      bDisableTimeDilation                                        OFFSET(get<bool>, {0x189, 1, 0, 0})
};

/// Class /Script/Indiana.PlayerEnvironmentInteractionComponent
/// Size: 0x0210 (0x000190 - 0x0003A0)
class UPlayerEnvironmentInteractionComponent : public UEnvironmentInteractionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	DMember(float)                                     DisguiseMeterMax                                            OFFSET(get<float>, {0x378, 4, 0, 0})
	CMember(class UDisguiseData*)                      EquippedDisguise                                            OFFSET(get<T>, {0x380, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayerEnvironmentInteractionComponent.OnOccupiedNavAreaChanged
	// void OnOccupiedNavAreaChanged(class UClass* PrevOccupiedArea, class UClass* CurrentOccupiedArea);                        // [0x1893150] Final|Native|Protected 
	// Function /Script/Indiana.PlayerEnvironmentInteractionComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x1892e60] Final|Native|Protected 
};

/// Struct /Script/Indiana.AddictionTimer
/// Size: 0x0040 (0x000000 - 0x000040)
class FAddictionTimer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTag)                              AddictionTag                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TimerMax                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     IncreasePerSecond                                           OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(class UClass*)                             FlawClass                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAddictionTimerEntersMaxed                                 OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAddictionTimerLeavesMaxed                                 OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(float)                                     CurrentTimer                                                OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Struct /Script/Indiana.SurvivalTier
/// Size: 0x0010 (0x000000 - 0x000010)
class FSurvivalTier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TierMin                                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     TierMax                                                     OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/Indiana.CurveData
/// Size: 0x0090 (0x000000 - 0x000090)
class FCurveData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     ScalerName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        Parameter                                                   OFFSET(getStruct<T>, {0x8, 136, 0, 0})
};

/// Class /Script/Indiana.PlayerHealthComponent
/// Size: 0x01C8 (0x0001C0 - 0x000388)
class UPlayerHealthComponent : public UHealthComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	SMember(FMulticastInlineDelegate)                  OnWarnPlayerLowHealth                                       OFFSET(getStruct<T>, {0x1C0, 16, 0, 0})
	DMember(float)                                     LethalHunger                                                OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(float)                                     LethalThirst                                                OFFSET(get<float>, {0x1D4, 4, 0, 0})
	DMember(float)                                     LethalExhaustion                                            OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(float)                                     MaxFastTravelHunger                                         OFFSET(get<float>, {0x1DC, 4, 0, 0})
	DMember(float)                                     MaxFastTravelThirst                                         OFFSET(get<float>, {0x1E0, 4, 0, 0})
	DMember(float)                                     MaxFastTravelExhaustion                                     OFFSET(get<float>, {0x1E4, 4, 0, 0})
	SMember(FAddictionTimer)                           SmokeAddictionTimer                                         OFFSET(getStruct<T>, {0x1F8, 64, 0, 0})
	SMember(FAddictionTimer)                           FoodAddictionTimer                                          OFFSET(getStruct<T>, {0x238, 64, 0, 0})
	SMember(FAddictionTimer)                           DrugsAddictionTimer                                         OFFSET(getStruct<T>, {0x278, 64, 0, 0})
	SMember(FAddictionTimer)                           AlcoholAddictionTimer                                       OFFSET(getStruct<T>, {0x2B8, 64, 0, 0})
	CMember(TArray<FSurvivalTier>)                     HungerTiers                                                 OFFSET(get<T>, {0x2F8, 16, 0, 0})
	CMember(TArray<FSurvivalTier>)                     ThirstTiers                                                 OFFSET(get<T>, {0x308, 16, 0, 0})
	CMember(TArray<FSurvivalTier>)                     ExhaustionTiers                                             OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(class UAkAudioEvent*)                      PlayerDiedSound                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x338, 8, 0, 0})
	DMember(float)                                     ScreenFxBlendTime                                           OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     LowHealthHeartBeatDeltaTime                                 OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     LowHealthPercentage                                         OFFSET(get<float>, {0x348, 4, 0, 0})
	CMember(TArray<FCurveData>)                        ParamData                                                   OFFSET(get<T>, {0x350, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayerHealthComponent.SurvivalModeUpdated
	// void SurvivalModeUpdated(bool bSurvivalMode);                                                                            // [0x1893ae0] Final|Native|Private 
	// Function /Script/Indiana.PlayerHealthComponent.PlayerWaitInitiated
	// void PlayerWaitInitiated(float SecondsPassed, ERestType RestType);                                                       // [0x18932b0] Final|Native|Public  
	// Function /Script/Indiana.PlayerHealthComponent.GetThirst
	// float GetThirst();                                                                                                       // [0x1892e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetMaxFastTravelThirst
	// float GetMaxFastTravelThirst();                                                                                          // [0x1892e20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetMaxFastTravelHunger
	// float GetMaxFastTravelHunger();                                                                                          // [0x1892e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetMaxFastTravelExhaustion
	// float GetMaxFastTravelExhaustion();                                                                                      // [0x1892de0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetLethalThirst
	// float GetLethalThirst();                                                                                                 // [0x1892dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetLethalHunger
	// float GetLethalHunger();                                                                                                 // [0x1892da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetLethalExhaustion
	// float GetLethalExhaustion();                                                                                             // [0x1892d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetHunger
	// float GetHunger();                                                                                                       // [0x1892d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.GetExhaustion
	// float GetExhaustion();                                                                                                   // [0x1892d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerHealthComponent.FastTravelInitiated
	// void FastTravelInitiated(class UTravelDestinationData* TravelData, float TimePassed, bool bTravelFromMapLedger);         // [0x18929b0] Final|Native|Public  
	// Function /Script/Indiana.PlayerHealthComponent.AdjustThirst
	// void AdjustThirst(float Amount, bool bFromFastTravel, bool bTravelFromMapLedger);                                        // [0x1892810] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerHealthComponent.AdjustSurvivalStats
	// void AdjustSurvivalStats(float HungerGained, float ThirstGained, float ExhaustionGained, bool bFromFastTravel, bool bTravelFromMapLedger, bool bForced); // [0x1892620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerHealthComponent.AdjustHunger
	// void AdjustHunger(float Amount, bool bFromFastTravel, bool bTravelFromMapLedger);                                        // [0x1892500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerHealthComponent.AdjustExhaustion
	// void AdjustExhaustion(float Amount, bool bFromFastTravel, bool bTravelFromMapLedger);                                    // [0x18923e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerHealthComponent.AddThirst
	// void AddThirst(float Thirst);                                                                                            // [0x18922c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerHealthComponent.AddHunger
	// void AddHunger(float Hunger);                                                                                            // [0x1892230] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerHealthComponent.AddExhaustion
	// void AddExhaustion(float Exhaustion);                                                                                    // [0x18921a0] Final|Exec|Native|Public 
};

/// Struct /Script/Indiana.SkillValueExperienceRange
/// Size: 0x000C (0x000000 - 0x00000C)
class FSkillValueExperienceRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Min                                                         OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Max                                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   XP                                                          OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Indiana.LevelDifferenceRangeScalar
/// Size: 0x000C (0x000000 - 0x00000C)
class FLevelDifferenceRangeScalar : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Min                                                         OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Max                                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(float)                                     Scalar                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Indiana.PlayerInfoComponent
/// Size: 0x0618 (0x0003A0 - 0x0009B8)
class UPlayerInfoComponent : public UCharacterInfoComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2488;

public:
	CMember(TArray<int32_t>)                           PlayerXPTable                                               OFFSET(get<T>, {0x450, 16, 0, 0})
	CMember(TMap<EOCLDifficulty, int32_t>)             SkillCheckDifficultyXP                                      OFFSET(get<T>, {0x460, 80, 0, 0})
	CMember(TArray<FSkillValueExperienceRange>)        SkillCheckValueXP                                           OFFSET(get<T>, {0x4B0, 16, 0, 0})
	CMember(TMap<ECreatureXPType, int32_t>)            CreatueXPTypeMap                                            OFFSET(get<T>, {0x4C0, 80, 0, 0})
	CMember(TArray<FLevelDifferenceRangeScalar>)       EnemyXPLevelDiffScalar                                      OFFSET(get<T>, {0x510, 16, 0, 0})
	CMember(TMap<EPointOfInterestXPType, int32_t>)     PointOfInterestXPMap                                        OFFSET(get<T>, {0x520, 80, 0, 0})
	CMember(TMap<EQuestType, int32_t>)                 QuestTypeXPMap                                              OFFSET(get<T>, {0x570, 80, 0, 0})
	DMember(float)                                     QuestXPPercentFromObjectives                                OFFSET(get<float>, {0x5C0, 4, 0, 0})
	DMember(int32_t)                                   NumSkillsPointsPerLevel                                     OFFSET(get<int32_t>, {0x5C4, 4, 0, 0})
	DMember(int32_t)                                   MaxSkillLevelForCategoryPoints                              OFFSET(get<int32_t>, {0x5C8, 4, 0, 0})
	DMember(int32_t)                                   MaxSkillLevel                                               OFFSET(get<int32_t>, {0x5CC, 4, 0, 0})
	DMember(int32_t)                                   NumSkillLevelsBetweenUpgrades                               OFFSET(get<int32_t>, {0x5D0, 4, 0, 0})
	DMember(float)                                     FlawOfferCooldown                                           OFFSET(get<float>, {0x5D4, 4, 0, 0})
	DMember(float)                                     FlawOfferTimeBonus                                          OFFSET(get<float>, {0x5D8, 4, 0, 0})
	CMember(class UFlawTree*)                          FlawTree                                                    OFFSET(get<T>, {0x5E0, 8, 0, 0})
	CMember(TMap<EGameDifficulty, int32_t>)            MaxFlawLimit                                                OFFSET(get<T>, {0x5E8, 80, 0, 0})
	CMember(TArray<class UFlaw*>)                      FlawPtrs                                                    OFFSET(get<T>, {0x638, 16, 0, 0})
	CMember(TMap<class UClass*, int32_t>)              LoadedFlawCounts                                            OFFSET(get<T>, {0x648, 80, 0, 0})
	CMember(TSet<UClass*>)                             FlawsChosen                                                 OFFSET(get<T>, {0x698, 80, 0, 0})
	CMember(TSet<UClass*>)                             FlawsRejected                                               OFFSET(get<T>, {0x6E8, 80, 0, 0})
	CMember(class UClass*)                             PendingOfferFlaw                                            OFFSET(get<T>, {0x738, 8, 0, 0})
	CMember(TSet<UAudioLogDataAsset*>)                 AudioLogs                                                   OFFSET(get<T>, {0x748, 80, 0, 0})
	CMember(class UClass*)                             Aptitude                                                    OFFSET(get<T>, {0x7B8, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayerInfoComponent.StopCurrentAudioLog
	// void StopCurrentAudioLog();                                                                                              // [0xbb4890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.SetGenderDebug
	// void SetGenderDebug(EGender GenderIn);                                                                                   // [0x1862d50] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.SetFlawAsOfferable
	// void SetFlawAsOfferable(class UClass* Flaw, float OfferChance, bool bIgnoreTimer);                                       // [0x18939c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.SetAptitudeDebug
	// void SetAptitudeDebug(FString AptitudeName);                                                                             // [0x18938c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.ResumeCurrentAudioLog
	// void ResumeCurrentAudioLog();                                                                                            // [0xbb4890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.RespecSkillPoints
	// void RespecSkillPoints();                                                                                                // [0x18938a0] Exec|Native|Public   
	// Function /Script/Indiana.PlayerInfoComponent.RespecPerks
	// void RespecPerks(bool bNoCost);                                                                                          // [0x1893810] Exec|Native|Public   
	// Function /Script/Indiana.PlayerInfoComponent.ResetQuest
	// void ResetQuest(FString QuestName, TArray<int32_t> ResetEventIDs);                                                       // [0x18936c0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.ResetFlawOfferTimer
	// void ResetFlawOfferTimer();                                                                                              // [0x18936a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.QuestTriggerAddendum
	// void QuestTriggerAddendum(FString QuestName, int32_t AddendumNode);                                                      // [0x18935b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.QuestStart
	// void QuestStart(FString QuestName);                                                                                      // [0x1893500] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.QuestListAll
	// void QuestListAll();                                                                                                     // [0x18934e0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.QuestFail
	// void QuestFail(FString QuestName);                                                                                       // [0x1893430] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.QuestComplete
	// void QuestComplete(FString QuestName);                                                                                   // [0x1893380] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.PlayAudioLog
	// void PlayAudioLog(int32_t AudioLogIndex);                                                                                // [0x1893220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.PauseCurrentAudioLog
	// void PauseCurrentAudioLog();                                                                                             // [0xbb4890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bInCombat, bool bRestoring);                                                              // [0x1892f30] Final|Native|Private 
	// Function /Script/Indiana.PlayerInfoComponent.IsPlayingAudioLog
	// bool IsPlayingAudioLog();                                                                                                // [0xb9da20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.PlayerInfoComponent.FlawOfferRejectDebug
	// void FlawOfferRejectDebug();                                                                                             // [0x1892d20] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawOfferDebug
	// void FlawOfferDebug(FString FlawName);                                                                                   // [0x1892c70] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawOfferAcceptDebug
	// void FlawOfferAcceptDebug();                                                                                             // [0x1892c50] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawClearOfferDebug
	// void FlawClearOfferDebug();                                                                                              // [0x1892c30] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawClearDebug
	// void FlawClearDebug(FString FlawName);                                                                                   // [0x1892b80] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.FlawAddDebug
	// void FlawAddDebug(FString FlawName);                                                                                     // [0x1892ad0] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.EnableFlawOffers
	// void EnableFlawOffers();                                                                                                 // [0x1892970] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.DisableFlawOffers
	// void DisableFlawOffers();                                                                                                // [0x1892950] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.PlayerInfoComponent.AddXPDebug
	// void AddXPDebug(int32_t XP);                                                                                             // [0x1892350] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerInfoComponent.AddAudioLog
	// void AddAudioLog(FAudioLogDefinition& AudioLogDefinition);                                                               // [0x1892110] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Indiana.PlayerInteractionComponent
/// Size: 0x0138 (0x0000F0 - 0x000228)
class UPlayerInteractionComponent : public UInteractionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	DMember(float)                                     SweptInteractionTraceRadius                                 OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     ProximityHighlightRange                                     OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(float)                                     DirectHighlightRange                                        OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     EvidenceInteractRange                                       OFFSET(get<float>, {0x12C, 4, 0, 0})
	CMember(TArray<class UInteractableComponent*>)     InteractablesInRange                                        OFFSET(get<T>, {0x158, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayerInteractionComponent.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x1897370] Final|Native|Protected 
	// Function /Script/Indiana.PlayerInteractionComponent.OnHighlightModeChanged
	// void OnHighlightModeChanged(bool bVisible);                                                                              // [0x1897400] Final|Native|Protected 
	// Function /Script/Indiana.PlayerInteractionComponent.OnDiscrepencyAmplifierActivated
	// void OnDiscrepencyAmplifierActivated(bool bActivated);                                                                   // [0x18972e0] Final|Native|Protected 
};

/// Struct /Script/Indiana.LootOnBreakdown
/// Size: 0x0010 (0x000000 - 0x000010)
class FLootOnBreakdown : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   MinSkill                                                    OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(class ULootTableData*)                     LootTable                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/Indiana.PlayerInventoryComponent
/// Size: 0x00E0 (0x000238 - 0x000318)
class UPlayerInventoryComponent : public UCharacterInventoryComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(TArray<FLootOnBreakdown>)                  LootOnWeaponBreakdown                                       OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(TArray<FLootOnBreakdown>)                  LootOnArmorBreakdown                                        OFFSET(get<T>, {0x278, 16, 0, 0})
	DMember(float)                                     BaseCarryingCapacity                                        OFFSET(get<float>, {0x288, 4, 0, 0})
	CMember(class URpgStat*)                           LootOnBreakdownChanceStat                                   OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class URpgStat*)                           ModFinderFieldRepairStat                                    OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class URpgStat*)                           ScavengeMaxItemLevelStat                                    OFFSET(get<T>, {0x2A0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayerInventoryComponent.VendorRepairItemDebug
	// void VendorRepairItemDebug(FName& ItemName);                                                                             // [0x1897b70] Final|Exec|Native|Protected|HasOutParms 
	// Function /Script/Indiana.PlayerInventoryComponent.SetWeaponHealthDebug
	// void SetWeaponHealthDebug(float Percent);                                                                                // [0x1897af0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.SetItemHealthDebug
	// void SetItemHealthDebug(FName& ItemName, float Percent);                                                                 // [0x1897a10] Final|Exec|Native|Protected|HasOutParms 
	// Function /Script/Indiana.PlayerInventoryComponent.SetHelmetHealthDebug
	// void SetHelmetHealthDebug(float Percent);                                                                                // [0x1897990] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.SetArmorHealthDebug
	// void SetArmorHealthDebug(float Percent);                                                                                 // [0x1897910] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.RepairItemDebug
	// void RepairItemDebug(FName& ItemName, bool bFieldRepair);                                                                // [0x1897830] Final|Exec|Native|Protected|HasOutParms 
	// Function /Script/Indiana.PlayerInventoryComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18976a0] Final|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.OnCompanionRegistered
	// void OnCompanionRegistered(class AIndianaAiCharacter* Character, bool bAdded);                                           // [0x1897210] Final|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.IgnoreEncumbrance
	// void IgnoreEncumbrance(bool bIgnored);                                                                                   // [0x1896fc0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.GiveTools
	// void GiveTools();                                                                                                        // [0x1896fa0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.PlayerInventoryComponent.BreakDownItemDebug
	// void BreakDownItemDebug(FName& ItemName, bool bFieldBreakdown);                                                          // [0x1896d40] Final|Exec|Native|Protected|HasOutParms 
};

/// Struct /Script/Indiana.DodgeInputRange
/// Size: 0x0008 (0x000000 - 0x000008)
class FDodgeInputRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     VerticalWeight                                              OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     HorizontalWeight                                            OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/Indiana.DodgeProperties
/// Size: 0x001C (0x000000 - 0x00001C)
class FDodgeProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   RelativeDirection                                           OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     DodgeVelocity                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     DodgeVelocityZ                                              OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SlideTime                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     SlideFriction                                               OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Class /Script/Indiana.PlayerMovementComponent
/// Size: 0x05F0 (0x000E00 - 0x0013F0)
class UPlayerMovementComponent : public UIndianaCharMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 5104;

public:
	DMember(float)                                     StrafeMaxSpeedScalar                                        OFFSET(get<float>, {0xE60, 4, 0, 0})
	DMember(float)                                     BackwardsMaxSpeedScalar                                     OFFSET(get<float>, {0xE64, 4, 0, 0})
	DMember(float)                                     LookStickBaseTurnRate                                       OFFSET(get<float>, {0xE68, 4, 0, 0})
	DMember(float)                                     LookStickExponent                                           OFFSET(get<float>, {0xE6C, 4, 0, 0})
	DMember(float)                                     LookStickTurnRampDelay                                      OFFSET(get<float>, {0xE70, 4, 0, 0})
	DMember(float)                                     LookStickTurnRampTime                                       OFFSET(get<float>, {0xE74, 4, 0, 0})
	DMember(float)                                     LookStickTurnRampMultiplier                                 OFFSET(get<float>, {0xE78, 4, 0, 0})
	DMember(float)                                     LookStickAccelerationDuration                               OFFSET(get<float>, {0xE7C, 4, 0, 0})
	DMember(float)                                     LookStickBasePitchRate                                      OFFSET(get<float>, {0xE80, 4, 0, 0})
	DMember(float)                                     LookStickMinTurnRateScalar                                  OFFSET(get<float>, {0xE84, 4, 0, 0})
	DMember(float)                                     LookStickMaxTurnRateScalar                                  OFFSET(get<float>, {0xE88, 4, 0, 0})
	DMember(float)                                     AngularDeadZoneRatio                                        OFFSET(get<float>, {0xE8C, 4, 0, 0})
	DMember(float)                                     SprintRequiredMovementInputHalfAngle                        OFFSET(get<float>, {0xE90, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        LookStickRampCurve                                          OFFSET(getStruct<T>, {0xE98, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        LookStickInputYawCurve                                      OFFSET(getStruct<T>, {0xF20, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        LookStickInputPitchCurve                                    OFFSET(getStruct<T>, {0xFA8, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        LookStickPitchAdjustmentCurve                               OFFSET(getStruct<T>, {0x1030, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        LookStickAccelerationCurve                                  OFFSET(getStruct<T>, {0x10B8, 136, 0, 0})
	DMember(float)                                     SprintFoVAdjustment                                         OFFSET(get<float>, {0x1140, 4, 0, 0})
	DMember(float)                                     SprintFoVAdjustmentTime                                     OFFSET(get<float>, {0x1144, 4, 0, 0})
	CMember(class URpgStat*)                           DodgeVelocityStat                                           OFFSET(get<T>, {0x1148, 8, 0, 0})
	DMember(float)                                     FallJumpGraceTime                                           OFFSET(get<float>, {0x1150, 4, 0, 0})
	DMember(float)                                     InAirJumpThreshold                                          OFFSET(get<float>, {0x1154, 4, 0, 0})
	DMember(float)                                     LeapAngle                                                   OFFSET(get<float>, {0x1158, 4, 0, 0})
	CMember(class UMaterialParameterCollection*)       PlayerMovementParams                                        OFFSET(get<T>, {0x1160, 8, 0, 0})
	CMember(class UClass*)                             FallingDamageSpell                                          OFFSET(get<T>, {0x1168, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               ForceFeedbackFallingDamage                                  OFFSET(get<T>, {0x1170, 8, 0, 0})
	CMember(TMap<EDodgeDirection, FDodgeInputRange>)   DodgeInputRanges                                            OFFSET(get<T>, {0x11E8, 80, 0, 0})
	CMember(TMap<EDodgeDirection, FDodgeProperties>)   DodgeProperties                                             OFFSET(get<T>, {0x1238, 80, 0, 0})
	DMember(float)                                     DodgeVelocity                                               OFFSET(get<float>, {0x1288, 4, 0, 0})
	DMember(float)                                     DodgeVelocityZ                                              OFFSET(get<float>, {0x128C, 4, 0, 0})
	DMember(float)                                     SlideTime                                                   OFFSET(get<float>, {0x1290, 4, 0, 0})
	DMember(float)                                     MinTimeBetweenDodge                                         OFFSET(get<float>, {0x1294, 4, 0, 0})
	DMember(float)                                     SlideFriction                                               OFFSET(get<float>, {0x1298, 4, 0, 0})
	DMember(float)                                     DodgeStaminaCost                                            OFFSET(get<float>, {0x129C, 4, 0, 0})
	DMember(float)                                     DodgeTimeLimit                                              OFFSET(get<float>, {0x12A0, 4, 0, 0})
	CMember(EDodgeDirection)                           DefaultDodgeDirection                                       OFFSET(get<T>, {0x12A4, 1, 0, 0})
	DMember(float)                                     LowGravDodgeTimeLimit                                       OFFSET(get<float>, {0x12B0, 4, 0, 0})
	DMember(float)                                     MaxCameraYawAngle                                           OFFSET(get<float>, {0x12B4, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<AIndianaAiCharacter*>>) StuckCharacters                                          OFFSET(get<T>, {0x1308, 16, 0, 0})
	DMember(float)                                     MinUnstuckInputMagnitude                                    OFFSET(get<float>, {0x1318, 4, 0, 0})
	DMember(float)                                     UnstuckInputTime                                            OFFSET(get<float>, {0x131C, 4, 0, 0})
	DMember(float)                                     UnstuckInputSmoothRate                                      OFFSET(get<float>, {0x1320, 4, 0, 0})
	DMember(float)                                     MaxUnstuckInputAngle                                        OFFSET(get<float>, {0x1324, 4, 0, 0})
	DMember(float)                                     UnstuckInputLocationSmoothRate                              OFFSET(get<float>, {0x1328, 4, 0, 0})
	DMember(float)                                     MaxDeltaUnstuckInputLocation                                OFFSET(get<float>, {0x132C, 4, 0, 0})
	DMember(float)                                     MaxUnstuckCollisionAngle                                    OFFSET(get<float>, {0x1330, 4, 0, 0})
	DMember(float)                                     PhaseModeNoBumpTime                                         OFFSET(get<float>, {0x1360, 4, 0, 0})
	DMember(int32_t)                                   NumAcrophobiaChecks                                         OFFSET(get<int32_t>, {0x1390, 4, 0, 0})
	DMember(float)                                     AcrophobiaCheckInterval                                     OFFSET(get<float>, {0x1394, 4, 0, 0})
	DMember(float)                                     AcrophobiaDistanceFromPlayer                                OFFSET(get<float>, {0x1398, 4, 0, 0})
	DMember(float)                                     AcrophobiaDistanceGround                                    OFFSET(get<float>, {0x139C, 4, 0, 0})
	DMember(float)                                     AcrophobiaZOffset                                           OFFSET(get<float>, {0x13A0, 4, 0, 0})
	DMember(float)                                     DistancePerFootstepCrouched                                 OFFSET(get<float>, {0x13C0, 4, 0, 0})
	DMember(float)                                     DistancePerFootstepRun                                      OFFSET(get<float>, {0x13C4, 4, 0, 0})
	DMember(float)                                     DistancePerFootstepSprint                                   OFFSET(get<float>, {0x13C8, 4, 0, 0})
	DMember(float)                                     DistancePerFootstepClimbing                                 OFFSET(get<float>, {0x13CC, 4, 0, 0})
	DMember(float)                                     AimingFootstepRateMultiplier                                OFFSET(get<float>, {0x13D0, 4, 0, 0})
	DMember(float)                                     FirstFootstepMultiplier                                     OFFSET(get<float>, {0x13D4, 4, 0, 0})
	DMember(float)                                     LowGravDistancePerFootstepScalar                            OFFSET(get<float>, {0x13D8, 4, 0, 0})
	DMember(float)                                     MoveCancelAutoSprintGracePeriodInSeconds                    OFFSET(get<float>, {0x13E4, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayerMovementComponent.OnUnlockAbilityChanged
	// void OnUnlockAbilityChanged(EUnlockAbility Ability);                                                                     // [0x18977b0] Final|Native|Protected 
	// Function /Script/Indiana.PlayerMovementComponent.OnTakeFallingDamage
	// void OnTakeFallingDamage(float FallingDamage);                                                                           // [0x1897730] Final|Native|Protected 
	// Function /Script/Indiana.PlayerMovementComponent.ControllerSensitivityUpdated
	// void ControllerSensitivityUpdated(float SensitivityIn);                                                                  // [0x1896ea0] Final|Native|Private 
	// Function /Script/Indiana.PlayerMovementComponent.ControllerADSSensitivityUpdated
	// void ControllerADSSensitivityUpdated(float SensititivityIn);                                                             // [0x1896e20] Final|Native|Private 
	// Function /Script/Indiana.PlayerMovementComponent.AcrophobiaEnableDebug
	// void AcrophobiaEnableDebug(bool bEnable);                                                                                // [0x1896cb0] Final|Exec|Native|Protected 
};

/// Class /Script/Indiana.PlayerPresetData
/// Size: 0x0058 (0x000038 - 0x000090)
class UPlayerPresetData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(int32_t)                                   StartingLevel                                               OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(TMap<class UClass*, int32_t>)              PerkMap                                                     OFFSET(get<T>, {0x40, 80, 0, 0})
};

/// Class /Script/Indiana.PlayerShoutComponent
/// Size: 0x0008 (0x000100 - 0x000108)
class UPlayerShoutComponent : public UShoutComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:


	/// Functions
	// Function /Script/Indiana.PlayerShoutComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bIsInCombat, bool bRestoring);                                                             // [0x1897140] Final|Native|Private 
};

/// Class /Script/Indiana.PlayerStatsWidget
/// Size: 0x0048 (0x000300 - 0x000348)
class UPlayerStatsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	CMember(class UTextBlockBase*)                     CurrencyValueTextBlock                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     WeightValueTextBlock                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     WeaponPartsTextBlock                                        OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ArmorPartsTextBlock                                         OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     LevelTextBlock                                              OFFSET(get<T>, {0x328, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayerStatsWidget.SetXPRatio
	// void SetXPRatio(float XPRatio);                                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.PlayerStatsWidget.OnPlayerWeightChange
	// void OnPlayerWeightChange();                                                                                             // [0x1897680] Final|Native|Protected 
	// Function /Script/Indiana.PlayerStatsWidget.OnLevelChanged
	// void OnLevelChanged(int32_t NewLevel);                                                                                   // [0x18975f0] Final|Native|Protected 
	// Function /Script/Indiana.PlayerStatsWidget.OnItemPartsChanged
	// void OnItemPartsChanged(int32_t WeaponParts, int32_t ArmorParts);                                                        // [0x1897520] Final|Native|Protected 
	// Function /Script/Indiana.PlayerStatsWidget.OnItemEquipped
	// void OnItemEquipped(class UItem* ItemEquipped);                                                                          // [0x1897490] Final|Native|Protected 
};

/// Class /Script/Indiana.PlayerTargetingComponent
/// Size: 0x0168 (0x0000E8 - 0x000250)
class UPlayerTargetingComponent : public UTargetingComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	SMember(FMulticastInlineDelegate)                  OnScreenSpaceTargetChanged                                  OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	DMember(float)                                     ReticleVerticalOffset                                       OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     ReticleHorizontalOffset                                     OFFSET(get<float>, {0xFC, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.PlayerTargetingComponent.KillTarget
	// void KillTarget();                                                                                                       // [0x1897050] Final|Exec|Native|Public 
	// Function /Script/Indiana.PlayerTargetingComponent.DrawPlayerTargetingTrace
	// void DrawPlayerTargetingTrace(float PersistTime);                                                                        // [0x1896f20] Final|Exec|Native|Public|Const 
};

/// Class /Script/Indiana.PlayFxEventEffect
/// Size: 0x0020 (0x000030 - 0x000050)
class UPlayFxEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UParticleSystem*)                    Fx                                                          OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      bAttachToMesh                                               OFFSET(get<bool>, {0x3C, 1, 0, 0})
	CMember(EMeshTarget)                               TargetMesh                                                  OFFSET(get<T>, {0x3D, 1, 0, 0})
	SMember(FName)                                     AttachSocketName                                            OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      bStaticLocation                                             OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      bHideDuringScoped                                           OFFSET(get<bool>, {0x49, 1, 0, 0})
};

/// Class /Script/Indiana.PlayLayeredFxEventEffect
/// Size: 0x0000 (0x000050 - 0x000050)
class UPlayLayeredFxEventEffect : public UPlayFxEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/Indiana.PlaySoundEventEffect
/// Size: 0x0000 (0x000030 - 0x000030)
class UPlaySoundEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.PointOfInterestComponent
/// Size: 0x0008 (0x000268 - 0x000270)
class UPointOfInterestComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/Indiana.PointOfInterest
/// Size: 0x0010 (0x0002E8 - 0x0002F8)
class APointOfInterest : public ABasicMapFloorTrackedActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 760;

public:
	CMember(class UPointOfInterestData*)               PointOfInterestData                                         OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               DiscoveryBounds                                             OFFSET(get<T>, {0x2F0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.PointOfInterest.OnBeginOverlap
	// void OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);                                            // [0x1897070] Final|Native|Protected 
};

/// Class /Script/Indiana.PointOfInterestData
/// Size: 0x0010 (0x000038 - 0x000048)
class UPointOfInterestData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(EPointOfInterestLocationType)              LocationType                                                OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(EPointOfInterestXPType)                    XPType                                                      OFFSET(get<T>, {0x39, 1, 0, 0})
	CMember(EPointOfInterestState)                     InitialState                                                OFFSET(get<T>, {0x3A, 1, 0, 0})
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
};

/// Struct /Script/Indiana.InterestStateTextures
/// Size: 0x0018 (0x000000 - 0x000018)
class FInterestStateTextures : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UTexture2D*)                         DiscoveredTexture                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTexture2D*)                         UnknownTexture                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UTexture2D*)                         MentionedTexture                                            OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Indiana.PointOfInterestTextureData
/// Size: 0x0050 (0x000038 - 0x000088)
class UPointOfInterestTextureData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<EPointOfInterestLocationType, FInterestStateTextures>) POITextureMap                              OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.PointOfInterestTooltipWidget
/// Size: 0x0008 (0x000300 - 0x000308)
class UPointOfInterestTooltipWidget : public UToolTipContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class UTextBlockBase*)                     PointOfInterestTextBlock                                    OFFSET(get<T>, {0x300, 8, 0, 0})
};

/// Struct /Script/Indiana.PONRQuest
/// Size: 0x0020 (0x000000 - 0x000020)
class FPONRQuest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   QuestName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           QuestEventIDs                                               OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Indiana.ConversationReference
/// Size: 0x0010 (0x000000 - 0x000010)
class FConversationReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGuid)                                     ID                                                          OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.ConversationPoNR
/// Size: 0x0068 (0x000000 - 0x000068)
class FConversationPoNR : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FName)                                     Filename                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FConversationReference)                    Conversation                                                OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	CMember(TMap<FString, int32_t>)                    GlobalVariables                                             OFFSET(get<T>, {0x18, 80, 0, 0})
};

/// Struct /Script/Indiana.NodeSet
/// Size: 0x0020 (0x000000 - 0x000020)
class FNodeSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FConversationReference)                    Conversation                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           NodeIDs                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/Indiana.NodeVarConditionalVarReset
/// Size: 0x0050 (0x000000 - 0x000050)
class FNodeVarConditionalVarReset : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     ConversationName                                            OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FConversationReference)                    Conversation                                                OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   ConversationNode                                            OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	SMember(FString)                                   TestGlobalVar                                               OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(int32_t)                                   TestGlobalVarValue                                          OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FString)                                   TargetGlobalVar                                             OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   TargetGlobalVarValue                                        OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/Indiana.PointOfNoReturnRollbackData
/// Size: 0x00E0 (0x000030 - 0x000110)
class UPointOfNoReturnRollbackData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(TMap<FString, int32_t>)                    GlobalVariables                                             OFFSET(get<T>, {0x30, 80, 0, 0})
	CMember(TArray<FPONRQuest>)                        Quests                                                      OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<class UClass*>)                     ItemsToRemove                                               OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FConversationPoNR>)                 ConversationsToClear                                        OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FNodeSet>)                          ConversationNodesToClear                                    OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FString>)                           LevelsToReset                                               OFFSET(get<T>, {0xC0, 16, 0, 0})
	DMember(int32_t)                                   TartarusAreaNameStringID                                    OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	SMember(FName)                                     PlayerShipLevelName                                         OFFSET(getStruct<T>, {0xD4, 8, 0, 0})
	SMember(FString)                                   EVShipDestination                                           OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	CMember(TArray<FNodeVarConditionalVarReset>)       NodeVarConditionalResets                                    OFFSET(get<T>, {0xF0, 16, 0, 0})
	SMember(FVector)                                   DesiredPlayerLocation                                       OFFSET(getStruct<T>, {0x100, 12, 0, 0})


	/// Functions
	// Function /Script/Indiana.PointOfNoReturnRollbackData.FixQuestsBP
	// void FixQuestsBP();                                                                                                      // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.PointOfNoReturnRollbackData.FixItemsBP
	// void FixItemsBP();                                                                                                       // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.PointOfNoReturnRollbackData.FixGlobalVarsBP
	// void FixGlobalVarsBP();                                                                                                  // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.PointOfNoReturnRollbackData.FixConversationsBP
	// void FixConversationsBP();                                                                                               // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.PoseableMeshModVisual
/// Size: 0x0080 (0x0000C0 - 0x000140)
class UPoseableMeshModVisual : public UMeshModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0xC0, 8, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	CMember(TMap<FName, FName>)                        BonePoseSockets                                             OFFSET(get<T>, {0xF0, 80, 0, 0})
};

/// Class /Script/Indiana.PosedSkeletalMeshModVisual
/// Size: 0x0028 (0x0000C0 - 0x0000E8)
class UPosedSkeletalMeshModVisual : public UMeshModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Class /Script/Indiana.PostProcessEventEffect
/// Size: 0x0068 (0x000030 - 0x000098)
class UPostProcessEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(class UMaterial*)                          Material                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TMap<FName, FRuntimeFloatCurve>)           CurveParams                                                 OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Struct /Script/Indiana.PostProcessFX
/// Size: 0x0078 (0x000000 - 0x000078)
class FPostProcessFX : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UParticleSystem*)                    Particle                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bPersistentParticle                                         OFFSET(get<bool>, {0x10, 1, 0, 0})
	CMember(TMap<FName, FRuntimeFloatCurve>)           Params                                                      OFFSET(get<T>, {0x18, 80, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           DynamicMaterial                                             OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           ActiveParticleSystem                                        OFFSET(get<T>, {0x70, 8, 0, 0})
};

/// Class /Script/Indiana.PostProcessStatusEffect
/// Size: 0x0080 (0x000188 - 0x000208)
class UPostProcessStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	SMember(FPostProcessFX)                            PostProcessData                                             OFFSET(getStruct<T>, {0x188, 120, 0, 0})
};

/// Class /Script/Indiana.PreloadAssetList
/// Size: 0x0010 (0x000038 - 0x000048)
class UPreloadAssetList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<class UObject*>)                    PreloadAssets                                               OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.PresenceData
/// Size: 0x0018 (0x000038 - 0x000050)
class UPresenceData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FString)                                   PresenceTag                                                 OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FLocString)                                PresenceString                                              OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Indiana.PreviewCharacterAnimInstance
/// Size: 0x00E0 (0x0004A0 - 0x000580)
class UPreviewCharacterAnimInstance : public UIndianaAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1408;

public:
	CMember(class AIndianaCharacterDummy*)             PreviewCharacter                                            OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UPreviewWeaponAnimations*)           PreviewAnimations                                           OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   DefaultFidgets                                              OFFSET(get<T>, {0x4B0, 16, 0, 0})
	CMember(TMap<EUISelectionState, class UAnimSequence*>) UIDummyAnimData                                         OFFSET(get<T>, {0x4C0, 80, 0, 0})
	CMember(EUISelectionState)                         UISelectionState                                            OFFSET(get<T>, {0x510, 1, 0, 0})
	DMember(float)                                     LegIKStrength                                               OFFSET(get<float>, {0x514, 4, 0, 0})
	SMember(FVector)                                   HipOffset                                                   OFFSET(getStruct<T>, {0x518, 12, 0, 0})
	SMember(FRotator)                                  HipRotation                                                 OFFSET(getStruct<T>, {0x52C, 12, 0, 0})
	SMember(FRotator)                                  SpineCounterRotation                                        OFFSET(getStruct<T>, {0x538, 12, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   FigetEntry0                                                 OFFSET(get<T>, {0x548, 16, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   FigetEntry1                                                 OFFSET(get<T>, {0x558, 16, 0, 0})
	DMember(bool)                                      bIsEntry0                                                   OFFSET(get<bool>, {0x568, 1, 0, 0})
	DMember(int32_t)                                   FidgetUpdateIndex                                           OFFSET(get<int32_t>, {0x56C, 4, 0, 0})
	DMember(bool)                                      bIkLeftHand                                                 OFFSET(get<bool>, {0x570, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.PreviewCharacterAnimInstance.SetSelectionState
	// void SetSelectionState(EUISelectionState InSelectionState);                                                              // [0x189c3a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.PreviewWeaponAnimations
/// Size: 0x0010 (0x000200 - 0x000210)
class UPreviewWeaponAnimations : public UWeaponVisuals
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   Fidgets                                                     OFFSET(get<T>, {0x200, 16, 0, 0})
};

/// Class /Script/Indiana.Projectile
/// Size: 0x02E0 (0x0002B8 - 0x000598)
class AProjectile : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1432;

public:
	CMember(class UIndianaProjMovementComponent*)      ProjectileMovement                                          OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class USphereComponent*)                   MainCollisionComponent                                      OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class USphereComponent*)                   DamageCollisionComponent                                    OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class USceneComponent*)                    VisualRoot                                                  OFFSET(get<T>, {0x2D0, 8, 0, 0})
	DMember(bool)                                      bOverlapDamageCollision                                     OFFSET(get<bool>, {0x2D8, 1, 0, 0})
	DMember(bool)                                      bSweepOverlapDamageCollision                                OFFSET(get<bool>, {0x2D9, 1, 0, 0})
	DMember(bool)                                      bLineCheckOverlapDamageCollision                            OFFSET(get<bool>, {0x2DA, 1, 0, 0})
	DMember(bool)                                      bSubstepLineChecks                                          OFFSET(get<bool>, {0x2DB, 1, 0, 0})
	DMember(float)                                     LineCheckRate                                               OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     ProjectileLifetime                                          OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     Impulse                                                     OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(float)                                     ProjectileBounceMinForce                                    OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     ShiftedVisualsInterpSpeed                                   OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(bool)                                      bDestroyOnImpact                                            OFFSET(get<bool>, {0x2F0, 1, 0, 0})
	CMember(class UEventEffects*)                      ImpactEffects                                               OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UImpactDataSet*)                     ImpactDataSet                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImpactDataSet*)                     BounceDataSet                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	SMember(FDamageDescription)                        ProjectileDamage                                            OFFSET(getStruct<T>, {0x310, 120, 0, 0})
	CMember(class UTracerSoundData*)                   TracerSound                                                 OFFSET(get<T>, {0x440, 8, 0, 0})
	SMember(FEventEffectState)                         EventEffectState                                            OFFSET(getStruct<T>, {0x568, 32, 0, 0})
	CMember(class UAkAudioEvent*)                      AmbientNoiseEvent                                           OFFSET(get<T>, {0x588, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.Projectile.OnHit
	// void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x189bc70] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Projectile.OnDamageEndOverlap
	// void OnDamageEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x189ba40] Final|Native|Protected 
	// Function /Script/Indiana.Projectile.OnDamageBeginOverlap
	// void OnDamageBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x189b820] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Projectile.OnBounce
	// void OnBounce(FHitResult& ImpactResult, FVector& ImpactVelocity);                                                        // [0x189b6f0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Projectile.GetOverlapCollisionSize
	// float GetOverlapCollisionSize();                                                                                         // [0x189b6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Projectile.GetCollisionSize
	// float GetCollisionSize();                                                                                                // [0x189b690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Projectile.GetChargeAmount
	// float GetChargeAmount();                                                                                                 // [0x189b670] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.ProjectileLauncher
/// Size: 0x00A8 (0x000478 - 0x000520)
class AProjectileLauncher : public ADestructible
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1312;

public:
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x478, 8, 0, 0})
	SMember(FDamageLevelScaler)                        ProjectileDamageLevelScaler                                 OFFSET(getStruct<T>, {0x480, 144, 0, 0})
	CMember(class UArrowComponent*)                    ArrowComponent                                              OFFSET(get<T>, {0x510, 8, 0, 0})
	SMember(FName)                                     LaunchSocketName                                            OFFSET(getStruct<T>, {0x518, 8, 0, 0})
};

/// Class /Script/Indiana.PS5ActivityManager
/// Size: 0x0060 (0x000030 - 0x000090)
class UPS5ActivityManager : public UActivityManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:


	/// Functions
	// Function /Script/Indiana.PS5ActivityManager.OnQueryLatestSaveFinished
	// void OnQueryLatestSaveFinished(FString LatestSaveName, bool bHasSaves);                                                  // [0x189bff0] Final|Native|Protected 
	// Function /Script/Indiana.PS5ActivityManager.OnPreLoadMap
	// void OnPreLoadMap(FString MapName);                                                                                      // [0x189bf40] Final|Native|Protected 
	// Function /Script/Indiana.PS5ActivityManager.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x189be50] Final|Native|Protected 
};

/// Class /Script/Indiana.PushDisableStatusEffect
/// Size: 0x0038 (0x0001A0 - 0x0001D8)
class UPushDisableStatusEffect : public UAnimDisableStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	DMember(float)                                     PushSpeed                                                   OFFSET(get<float>, {0x1A0, 4, 0, 0})
	DMember(float)                                     PushSpeedZ                                                  OFFSET(get<float>, {0x1A4, 4, 0, 0})
	DMember(float)                                     SlideFriction                                               OFFSET(get<float>, {0x1A8, 4, 0, 0})
	DMember(float)                                     ClearEffectDistanceToOrigin                                 OFFSET(get<float>, {0x1AC, 4, 0, 0})
	DMember(float)                                     ClearEffectDistanceFromOrigin                               OFFSET(get<float>, {0x1B0, 4, 0, 0})
	DMember(bool)                                      bClearEffectUsesSpaceBetweenColliders                       OFFSET(get<bool>, {0x1B4, 1, 0, 0})
	DMember(float)                                     AcceptableHeightDifference                                  OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(bool)                                      bPushAwayFromOriginActor                                    OFFSET(get<bool>, {0x1BC, 1, 0, 0})
};

/// Class /Script/Indiana.QuadrupedAnimInstance
/// Size: 0x0090 (0x000950 - 0x0009E0)
class UQuadrupedAnimInstance : public UTPVAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2528;

public:
	SMember(FVector)                                   PelvisAdjust                                                OFFSET(getStruct<T>, {0x950, 12, 0, 0})
	SMember(FRotator)                                  PelvisRotate                                                OFFSET(getStruct<T>, {0x968, 12, 0, 0})
	DMember(float)                                     IKStrength                                                  OFFSET(get<float>, {0x974, 4, 0, 0})
	DMember(float)                                     GroundRollMultiplier                                        OFFSET(get<float>, {0x978, 4, 0, 0})
	DMember(float)                                     HipTranslationXYBlendSpeed                                  OFFSET(get<float>, {0x97C, 4, 0, 0})
	DMember(float)                                     ForwardBlendMin                                             OFFSET(get<float>, {0x998, 4, 0, 0})
	DMember(float)                                     ForwardBlendMax                                             OFFSET(get<float>, {0x99C, 4, 0, 0})
	DMember(float)                                     BackwardBlendMin                                            OFFSET(get<float>, {0x9A0, 4, 0, 0})
	DMember(float)                                     BackwardBlendMax                                            OFFSET(get<float>, {0x9A4, 4, 0, 0})
	DMember(float)                                     BackwardAngle                                               OFFSET(get<float>, {0x9A8, 4, 0, 0})
	DMember(float)                                     CombatDirection                                             OFFSET(get<float>, {0x9AC, 4, 0, 0})
	DMember(bool)                                      bLocoForwardActive                                          OFFSET(get<bool>, {0x9B0, 1, 0, 0})
	DMember(bool)                                      bLocoBackwardActive                                         OFFSET(get<bool>, {0x9B1, 1, 0, 0})
	CMember(TArray<class UAnimSequence*>)              LocomotionTurnInPlace                                       OFFSET(get<T>, {0x9B8, 16, 0, 0})
	CMember(TArray<class UAnimSequence*>)              CombatTurnInPlace                                           OFFSET(get<T>, {0x9C8, 16, 0, 0})
};

/// Class /Script/Indiana.Quest
/// Size: 0x0068 (0x0000B8 - 0x000120)
class UQuest : public UFlowChart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/Indiana.QuestAddendumWidget
/// Size: 0x0008 (0x000300 - 0x000308)
class UQuestAddendumWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class UTextBlockBase*)                     AddendumTextBlock                                           OFFSET(get<T>, {0x300, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.QuestAddendumWidget.OnObjectiveStatusChange
	// void OnObjectiveStatusChange(ECompletionStatus ObjectiveCompletion);                                                     // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestDataAsset
/// Size: 0x0058 (0x000038 - 0x000090)
class UQuestDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TMap<EQuestLocation, TWeakObjectPtr<UTexture2D*>>) QuestImages                                         OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(class UQuestSortingData*)                  SortingData                                                 OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/Indiana.QuestJournalWidget
/// Size: 0x01C0 (0x000300 - 0x0004C0)
class UQuestJournalWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(class UButtonGroup*)                       ButtonGroup                                                 OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UOptionPresenterWidget*)             OptionPresenter                                             OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTextBlockBase*)                     QuestNameTextBlock                                          OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UTextBlockBase*)                     QuestResolutionTextBlock                                    OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UScrollBox*)                         QuestListScrollBox                                          OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UScrollBox*)                         QuestDescriptionScrollBox                                   OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UVerticalBox*)                       QuestListVerticalBox                                        OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UQuestListWidget*)                   CompletedQuestList                                          OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UQuestListWidget*)                   BotchedQuestList                                            OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DLCPrefixTextBlock                                          OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     QuestDescriptionTextBlock                                   OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UImage*)                             DLCLogoImage                                                OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UObjectiveListWidget*)               ObjectiveList                                               OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UImage*)                             QuestTypeImage                                              OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UButtonBase*)                        InvisibleButton                                             OFFSET(get<T>, {0x3D8, 8, 0, 0})
	SMember(FInputLabelDescription)                    MakeActiveDescription_Gamepad                               OFFSET(getStruct<T>, {0x3E0, 56, 0, 0})
	SMember(FInputLabelDescription)                    MakeActiveDescription_Keyboard                              OFFSET(getStruct<T>, {0x418, 56, 0, 0})
	CMember(class UClass*)                             QuestListWidgetClass                                        OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UTexture2D*)                         INX1LogoImage                                               OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UTexture2D*)                         INX2LogoImage                                               OFFSET(get<T>, {0x460, 8, 0, 0})
	DMember(float)                                     GamepadZoomMultiplier                                       OFFSET(get<float>, {0x468, 4, 0, 0})
	CMember(class UQuestSortingData*)                  SortingData                                                 OFFSET(get<T>, {0x480, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.QuestJournalWidget.OnQuestImageLoaded
	// void OnQuestImageLoaded();                                                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestListEntryWidget
/// Size: 0x0048 (0x0002A0 - 0x0002E8)
class UQuestListEntryWidget : public UGenericCollapsableListEntry
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	CMember(class UTexture2D*)                         BaseGameCritPathTexture                                     OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UTexture2D*)                         INX01CritPathTexture                                        OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UTexture2D*)                         INX01NonCritPathTexture                                     OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UTexture2D*)                         INX02CritPathTexture                                        OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UTexture2D*)                         INX02NonCritPathTexture                                     OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UImage*)                             CritPathImage                                               OFFSET(get<T>, {0x2E0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.QuestListEntryWidget.SetQuestCompletionStatus
	// void SetQuestCompletionStatus(EQuestState QuestState);                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestListEntryWidget.SetActiveQuest
	// void SetActiveQuest(bool bActive);                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestListWidget
/// Size: 0x0060 (0x000358 - 0x0003B8)
class UQuestListWidget : public UGenericCollapsableList
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
};

/// Class /Script/Indiana.QuestLogComboBoxWidget
/// Size: 0x0060 (0x000278 - 0x0002D8)
class UQuestLogComboBoxWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
	CMember(class UComboBoxStringBase*)                ComboBox                                                    OFFSET(get<T>, {0x278, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.QuestLogComboBoxWidget.OnValueChanged
	// void OnValueChanged(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);                                       // [0x189c270] Final|Native|Protected 
	// Function /Script/Indiana.QuestLogComboBoxWidget.OnSortOptionIncrement
	// void OnSortOptionIncrement();                                                                                            // [0x189c250] Final|Native|Public  
};

/// Class /Script/Indiana.QuestLogEntryWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UQuestLogEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UBorder*)                            ContentBorder                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     QuestStateTextBlock                                         OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     QuestTitleTextBlock                                         OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UVerticalBox*)                       ObjectiveVerticalBox                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UClass*)                             ObjectiveClass                                              OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestUpdated
	// void OnQuestUpdated();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestTextFadeOutComplete
	// void OnQuestTextFadeOutComplete();                                                                                       // [0x189c1a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestTextFadeInComplete
	// void OnQuestTextFadeInComplete();                                                                                        // [0x189c180] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestFailed
	// void OnQuestFailed();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestCompleted
	// void OnQuestCompleted();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestAnimationStartOrUpdateComplete
	// void OnQuestAnimationStartOrUpdateComplete();                                                                            // [0x189c160] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogEntryWidget.OnQuestAnimationFinishedComplete
	// void OnQuestAnimationFinishedComplete();                                                                                 // [0x189c140] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogEntryWidget.FadeOutQuestText
	// void FadeOutQuestText();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogEntryWidget.FadeInQuestText
	// void FadeInQuestText();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestLogWidget
/// Size: 0x00C0 (0x000300 - 0x0003C0)
class UQuestLogWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	CMember(class UBorder*)                            AnimationBorder                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             QuestBacking                                                OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class USizeBox*)                           ContentSizeBox                                              OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UQuestLogEntryWidget*)               QuestEntry                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     StartingDisplayTime                                         OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     FailedOrCompletedDisplayTime                                OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     AlwaysOnDisplayTime                                         OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     AnimationDuration                                           OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     ContentResizeInterpExponent                                 OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     ContentVerticalPadding                                      OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     BackingVerticalPadding                                      OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(int32_t)                                   QuestLogBackingMaterialSize                                 OFFSET(get<int32_t>, {0x344, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.QuestLogWidget.OnQuestUpdateModeChanged
	// void OnQuestUpdateModeChanged(int32_t ModeIn);                                                                           // [0x189c1c0] Final|Native|Protected 
	// Function /Script/Indiana.QuestLogWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisibleIn);                                                                            // [0x189bbe0] Final|Native|Protected 
	// Function /Script/Indiana.QuestLogWidget.OnFadeOutComplete
	// void OnFadeOutComplete();                                                                                                // [0x189bbc0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogWidget.OnFadeInComplete
	// void OnFadeInComplete();                                                                                                 // [0x189bba0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestLogWidget.FadeOutContents
	// void FadeOutContents();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestLogWidget.FadeInContents
	// void FadeInContents();                                                                                                   // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestManager
/// Size: 0x03E0 (0x000030 - 0x000410)
class UQuestManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(TMap<FGuid, class UQuest*>)                LoadedQuests                                                OFFSET(get<T>, {0x158, 80, 0, 0})
};

/// Class /Script/Indiana.QuestObjectiveEntryWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class UQuestObjectiveEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UBorder*)                            ContentContainer                                            OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UOverlay*)                           ObjectiveStatusOverlay                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             ObjectiveCompletedImage                                     OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TitleTextBlock                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	DMember(float)                                     DisplayTime                                                 OFFSET(get<float>, {0x320, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.QuestObjectiveEntryWidget.StartFailAnim
	// void StartFailAnim();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.StartCompleteAnim
	// void StartCompleteAnim();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnOutroComplete
	// void OnOutroComplete();                                                                                                  // [0x18a0050] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnObjectiveUpdateAnimComplete
	// void OnObjectiveUpdateAnimComplete();                                                                                    // [0x18a0030] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnObjectiveMadeInactive
	// void OnObjectiveMadeInactive();                                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnObjectiveMadeActive
	// void OnObjectiveMadeActive();                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.QuestObjectiveEntryWidget.OnIntroComplete
	// void OnIntroComplete();                                                                                                  // [0x189ff40] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/Indiana.QuestObjectiveTitleWidget
/// Size: 0x0030 (0x000278 - 0x0002A8)
class UQuestObjectiveTitleWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(class UTextBlockBase*)                     ObjectiveTitleTextBlock                                     OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UQuestObjectiveWidget*)              QuestObjective                                              OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UImage*)                             ObjectiveStateImage                                         OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UTexture2D*)                         CompletedObjective                                          OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UTexture2D*)                         FailedObjective                                             OFFSET(get<T>, {0x298, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.QuestObjectiveTitleWidget.OnObjectiveStatusChange
	// void OnObjectiveStatusChange(ECompletionStatus ObjectiveStatus);                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.QuestObjectiveWidget
/// Size: 0x0018 (0x000278 - 0x000290)
class UQuestObjectiveWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class UTextBlockBase*)                     ObjectiveTextBlock                                          OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UVerticalBox*)                       AddendumList                                                OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UClass*)                             ObjectiveAddendum                                           OFFSET(get<T>, {0x288, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.QuestObjectiveWidget.OnObjectiveStatusChange
	// void OnObjectiveStatusChange(ECompletionStatus ObjectiveStatus);                                                         // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Struct /Script/Indiana.QuestSubTypeGroup
/// Size: 0x0010 (0x000000 - 0x000010)
class FQuestSubTypeGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<EQuestType>)                        AcceptedSubTypes                                            OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.DifficultyRange
/// Size: 0x0008 (0x000000 - 0x000008)
class FDifficultyRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   RangeMinimum                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   RangeMaximum                                                OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Class /Script/Indiana.QuestSortingData
/// Size: 0x0268 (0x000038 - 0x0002A0)
class UQuestSortingData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(TArray<EQuestType>)                        QuestSortingOrder                                           OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bUseSimplifiedSort                                          OFFSET(get<bool>, {0x48, 1, 0, 0})
	CMember(TArray<EQuestType>)                        SimplifiedQuestSortingOrder                                 OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TMap<EQuestType, FQuestSubTypeGroup>)      QuestSubgroups                                              OFFSET(get<T>, {0x60, 80, 0, 0})
	CMember(TMap<int32_t, FQuestSubTypeGroup>)         QuestSupergroups                                            OFFSET(get<T>, {0xB0, 80, 0, 0})
	CMember(TMap<int32_t, FLocString>)                 QuestContentTypeStringIDs                                   OFFSET(get<T>, {0x100, 80, 0, 0})
	CMember(TMap<EQuestType, FLocString>)              QuestTypeStringIDs                                          OFFSET(get<T>, {0x150, 80, 0, 0})
	CMember(TMap<EQuestLocation, FLocString>)          QuestLocationStringIDs                                      OFFSET(get<T>, {0x1A0, 80, 0, 0})
	CMember(TMap<EQuestDifficulty, FLocString>)        QuestDifficultyStringIDs                                    OFFSET(get<T>, {0x1F0, 80, 0, 0})
	CMember(TMap<EQuestDifficulty, FDifficultyRange>)  QuestDifficultyRanges                                       OFFSET(get<T>, {0x240, 80, 0, 0})
	SMember(FLocString)                                MostRecentQuestListTitle                                    OFFSET(getStruct<T>, {0x290, 8, 0, 0})
	SMember(FLocString)                                AlphabeticalQuestListTitle                                  OFFSET(getStruct<T>, {0x298, 8, 0, 0})
};

/// Class /Script/Indiana.QuickMeleeData
/// Size: 0x0038 (0x000038 - 0x000070)
class UQuickMeleeData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(EWeaponEvent)                              WeaponEvent                                                 OFFSET(get<T>, {0x38, 1, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x40, 4, 0, 0})
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UImpactDataSet*)                     ImpactDataSet                                               OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(bool)                                      bDegradesWeapon                                             OFFSET(get<bool>, {0x68, 1, 0, 0})
};

/// Class /Script/Indiana.RadialBackgroundSectionWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class URadialBackgroundSectionWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UImage*)                             BackgroundImage                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             HighlightImage                                              OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             EquippedImage                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             OutlineImage                                                OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.RadialContainerWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class URadialContainerWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UClass*)                             TextRadialSectionClass                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UClass*)                             ImageRadialSectionClass                                     OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UCanvasPanel*)                       SectionsCanvas                                              OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class URadialWidget*)                      Radial                                                      OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.RadialContextMenuWidget
/// Size: 0x0030 (0x000308 - 0x000338)
class URadialContextMenuWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UOverlay*)                           RadialOverlay                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UBorder*)                            SectionTextBorder                                           OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SectionText                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UClass*)                             RadialContainerClass                                        OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UBorder*)                            RadialBorder                                                OFFSET(get<T>, {0x328, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.RadialContextMenuWidget.OnRadialMenuSelection
	// void OnRadialMenuSelection(int32_t Index);                                                                               // [0x18a0070] Final|Native|Protected 
};

/// Class /Script/Indiana.RadialWidget
/// Size: 0x0140 (0x000300 - 0x000440)
class URadialWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	SMember(FMulticastInlineDelegate)                  SectionSelected                                             OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	DMember(float)                                     Diameter                                                    OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     TimeDilation                                                OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(bool)                                      bDilateTime                                                 OFFSET(get<bool>, {0x378, 1, 0, 0})
	DMember(bool)                                      bUseCursor                                                  OFFSET(get<bool>, {0x379, 1, 0, 0})
	DMember(float)                                     AutoCorrectionThreshold                                     OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(float)                                     AutoCorrectionScalar                                        OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(bool)                                      bUseAutoCorrection                                          OFFSET(get<bool>, {0x384, 1, 0, 0})
	DMember(float)                                     InputOuterRadius                                            OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     InputInnerRatio                                             OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(float)                                     MouseInputScalar                                            OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     GamepadDeadZone                                             OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     GamepadInputScalar                                          OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(bool)                                      bUseGamepadInertia                                          OFFSET(get<bool>, {0x39C, 1, 0, 0})
	DMember(float)                                     SelectedSectionAlpha                                        OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(int32_t)                                   SubPartitionSections                                        OFFSET(get<int32_t>, {0x3A4, 4, 0, 0})
	DMember(int32_t)                                   SubPartitionStart                                           OFFSET(get<int32_t>, {0x3A8, 4, 0, 0})
	DMember(int32_t)                                   SectionsMax                                                 OFFSET(get<int32_t>, {0x3AC, 4, 0, 0})
	DMember(int32_t)                                   SelectedSectionIndex                                        OFFSET(get<int32_t>, {0x3B0, 4, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           DynamicMaterial                                             OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UOverlay*)                           ContentOverlay                                              OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UNamedSlot*)                         ContentSlot                                                 OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UCanvasPanel*)                       OrientatorCanvas                                            OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UImage*)                             MaterialImage                                               OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UImage*)                             OrientatorImage                                             OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      ConfirmSectionSound                                         OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      SelectSectionSound                                          OFFSET(get<T>, {0x3F0, 8, 0, 0})
	DMember(float)                                     OrientatorDegrees                                           OFFSET(get<float>, {0x3F8, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.RadialWidget.OnSectionConfirmedAux
	// void OnSectionConfirmedAux();                                                                                            // [0x18a01a0] Final|Native|Protected 
	// Function /Script/Indiana.RadialWidget.OnSectionConfirmed
	// void OnSectionConfirmed();                                                                                               // [0x18a0180] Final|Native|Protected 
	// Function /Script/Indiana.RadialWidget.OnRadialScroll
	// void OnRadialScroll(float Value);                                                                                        // [0x18a0100] Final|Native|Protected 
};

/// Class /Script/Indiana.RagDollDeathBehavior
/// Size: 0x0000 (0x000040 - 0x000040)
class URagDollDeathBehavior : public UDeathBehavior
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.RagdollDisable
/// Size: 0x0048 (0x0001A0 - 0x0001E8)
class URagdollDisable : public UAnimDisableStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
	DMember(float)                                     GetUpMontagePlayrate                                        OFFSET(get<float>, {0x1A0, 4, 0, 0})
	DMember(float)                                     Impulse                                                     OFFSET(get<float>, {0x1A4, 4, 0, 0})
	DMember(bool)                                      bTurnOffGravity                                             OFFSET(get<bool>, {0x1A8, 1, 0, 0})
	SMember(FVector)                                   OverrideDirection                                           OFFSET(getStruct<T>, {0x1AC, 12, 0, 0})
	SMember(FVector)                                   RandomVariance                                              OFFSET(getStruct<T>, {0x1B8, 12, 0, 0})
	SMember(FVector)                                   MinVarianceClamp                                            OFFSET(getStruct<T>, {0x1C4, 12, 0, 0})
	DMember(float)                                     MaxFloatDistance                                            OFFSET(get<float>, {0x1D0, 4, 0, 0})
	DMember(float)                                     LinearDampening                                             OFFSET(get<float>, {0x1D4, 4, 0, 0})
};

/// Struct /Script/Indiana.RandomActionSetPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FRandomActionSetPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UAIAction*)                          Action                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Score                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Indiana.RandomActionSet
/// Size: 0x0018 (0x000038 - 0x000050)
class URandomActionSet : public UAIAction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FRandomActionSetPair>)              PotentialActions                                            OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UAIAction*)                          ChosenAction                                                OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Indiana.RandomBankGameDataReference
/// Size: 0x0000 (0x000050 - 0x000050)
class URandomBankGameDataReference : public UGameDataReference
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Indiana.WeightedEffect
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeightedEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UEventEffect*)                       Effect                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Indiana.RandomEventEffects
/// Size: 0x0018 (0x000030 - 0x000048)
class URandomEventEffects : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FWeightedEffect>)                   Effects                                                     OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/Indiana.QueryPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FQueryPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UEQSRequest_IndianaBase*)            EQSRequest                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Indiana.RandomQuerySet
/// Size: 0x0010 (0x000038 - 0x000048)
class URandomQuerySet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FQueryPair>)                        QueryCostPairs                                              OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/Indiana.PriorityCreatureSpawn
/// Size: 0x0040 (0x000000 - 0x000040)
class FPriorityCreatureSpawn : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTagContainer)                     CreaturesTypeTags                                           OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     CreatureRoleTags                                            OFFSET(getStruct<T>, {0x20, 32, 0, 0})
};

/// Class /Script/Indiana.RandomSpawnNode
/// Size: 0x0038 (0x000538 - 0x000570)
class ARandomSpawnNode : public ASpawnNodeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1392;

public:
	CMember(TArray<FPriorityCreatureSpawn>)            PriorityCreatureSpawns                                      OFFSET(get<T>, {0x538, 16, 0, 0})
};

/// Class /Script/Indiana.RangeBehaviorStateInfo
/// Size: 0x0010 (0x000178 - 0x000188)
class URangeBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.RangeRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class URangeRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Struct /Script/Indiana.HitReaction
/// Size: 0x0010 (0x000000 - 0x000010)
class FHitReaction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     CooldownTime                                                OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Indiana.ReactionComponent
/// Size: 0x0170 (0x0000E0 - 0x000250)
class UReactionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(TMap<EHitReactType, FHitReaction>)         HitReactions                                                OFFSET(get<T>, {0xE8, 80, 0, 0})
	CMember(class UClass*)                             PlayerHitReactionCameraShake                                OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class UClass*)                             DebugCameraShake                                            OFFSET(get<T>, {0x140, 8, 0, 0})
	DMember(float)                                     MinDamagePctHitReact                                        OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     MaxDamagePctHitReact                                        OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     LightHitReactionStrength                                    OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     ADSHitReactionScalar                                        OFFSET(get<float>, {0x154, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        CameraShakeAngleCurve                                       OFFSET(getStruct<T>, {0x190, 136, 0, 0})
	DMember(float)                                     HitReactStrength                                            OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     InflictedDamagePctDecayRate                                 OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     InflictedDamagePctLight                                     OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     InflictedDamagePctHeavy                                     OFFSET(get<float>, {0x230, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.ReactionComponent.TriggerDebugCameraShake
	// void TriggerDebugCameraShake(float Strength, float X, float Y);                                                          // [0x18a4840] Final|Exec|Native|Public 
	// Function /Script/Indiana.ReactionComponent.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CDI);                                                                                // [0x18a4780] Native|Public|HasOutParms 
};

/// Class /Script/Indiana.ReactiveEnvironmentActor
/// Size: 0x0020 (0x0002B8 - 0x0002D8)
class AReactiveEnvironmentActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x2B8, 8, 0, 0})
	DMember(float)                                     PlayerProximityDistanceThreshold                            OFFSET(get<float>, {0x2C0, 4, 0, 0})
};

/// Class /Script/Indiana.ReactiveEnvironmentAnimInstance
/// Size: 0x0018 (0x0002C8 - 0x0002E0)
class UReactiveEnvironmentAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	DMember(bool)                                      bIsInPlayerProximity                                        OFFSET(get<bool>, {0x2C8, 1, 0, 0})
	DMember(float)                                     TimeSinceInPlayerProximity                                  OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(bool)                                      bDead                                                       OFFSET(get<bool>, {0x2D0, 1, 0, 0})
};

/// Class /Script/Indiana.RecoilData
/// Size: 0x0120 (0x000038 - 0x000158)
class URecoilData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FRotator)                                  RandomOffset                                                OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FRuntimeFloatCurve)                        YawOffsetCurve                                              OFFSET(getStruct<T>, {0x48, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        PitchOffsetCurve                                            OFFSET(getStruct<T>, {0xD0, 136, 0, 0})
};

/// Class /Script/Indiana.RecoilManagerComponent
/// Size: 0x0058 (0x0000E0 - 0x000138)
class URecoilManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
};

/// Class /Script/Indiana.RedirectorMap
/// Size: 0x0050 (0x000038 - 0x000088)
class URedirectorMap : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<FName, FName>)                        RedirectorMap                                               OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.ReflectStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UReflectStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     ReflectChance                                               OFFSET(get<float>, {0x188, 4, 0, 0})
};

/// Class /Script/Indiana.RelevanceOptimizationInterface
/// Size: 0x0000 (0x000030 - 0x000030)
class URelevanceOptimizationInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.Reload_AnimNotify
/// Size: 0x0000 (0x000040 - 0x000040)
class UReload_AnimNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/Indiana.ReloadStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UReloadStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
};

/// Class /Script/Indiana.RenderThreadAnimationWidget
/// Size: 0x0008 (0x000278 - 0x000280)
class URenderThreadAnimationWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class UImage*)                             AnimationImage                                              OFFSET(get<T>, {0x278, 8, 0, 0})
};

/// Class /Script/Indiana.RepairUpgradeInfoWidget
/// Size: 0x0080 (0x000300 - 0x000380)
class URepairUpgradeInfoWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(class UTextBlockBase*)                     ItemNameTextBlock                                           OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UHorizontalBox*)                     RepairStatusHorizontalBox                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class USizeBox*)                           CurrentRepairStatusSizeBox                                  OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UProgressBar*)                       CurrentRepairStatusBar                                      OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class USizeBox*)                           CurrentRepairPristineStatusSizeBox                          OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UProgressBar*)                       CurrentRepairPristineStatusBar                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CurrentRepairStatusTextBlock                                OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class USizeBox*)                           RepairedStatusSizeBox                                       OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UProgressBar*)                       RepairedStatusBar                                           OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class USizeBox*)                           RepairedPristineSizeBox                                     OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UProgressBar*)                       RepairedPristineStatusBar                                   OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     RepairedPristineStatusTextBlock                             OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StatChangeName                                              OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UItemStatEntryWidget*)               PreItemStat                                                 OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UItemStatEntryWidget*)               PostItemStat                                                OFFSET(get<T>, {0x370, 8, 0, 0})
};

/// Class /Script/Indiana.ReplaceRandomFlawStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UReplaceRandomFlawStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
};

/// Class /Script/Indiana.RepositionSearchBehaviorStateInfo
/// Size: 0x0008 (0x000120 - 0x000128)
class URepositionSearchBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.RepositionSearchRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class URepositionSearchRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.ReputationData
/// Size: 0x0020 (0x000038 - 0x000058)
class UReputationData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(EReputationRankType)                       RankType                                                    OFFSET(get<T>, {0x38, 1, 0, 0})
	DMember(int32_t)                                   Rank                                                        OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(float)                                     VendorPriceAdjustment                                       OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(bool)                                      PlayerCanBuyRestrictedVendorStock                           OFFSET(get<bool>, {0x44, 1, 0, 0})
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FLocString)                                Reaction                                                    OFFSET(getStruct<T>, {0x50, 8, 0, 0})
};

/// Class /Script/Indiana.ReputationDetailsWidget
/// Size: 0x0060 (0x000300 - 0x000360)
class UReputationDetailsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UReputationProgressWidget*)          NegativeProgress                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UReputationProgressWidget*)          PositiveProgress                                            OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StatusTextBlock                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StatusBodyTextBlock                                         OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionBodyTextBlock                                    OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     EffectsBodyTextBlock                                        OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     VendorPriceTextBlock                                        OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UBackgroundPanelWidget*)             BackgroundPanelWidget                                       OFFSET(get<T>, {0x340, 8, 0, 0})
};

/// Class /Script/Indiana.ReputationEntryWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UReputationEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StatusTextBlock                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UFactionData*)                       Data                                                        OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.ReputationListWidget
/// Size: 0x0028 (0x000300 - 0x000328)
class UReputationListWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UVerticalBox*)                       EntryContainer                                              OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.ReputationProgressWidget
/// Size: 0x0020 (0x000278 - 0x000298)
class UReputationProgressWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	SMember(FLocString)                                ProgressCategory                                            OFFSET(getStruct<T>, {0x278, 8, 0, 0})
	CMember(class UProgressBar*)                       ProgressBar                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ValueTextBlock                                              OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Indiana.ReputationSummaryWidget
/// Size: 0x0040 (0x000300 - 0x000340)
class UReputationSummaryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class UClass*)                             EntryClass                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UReputationListWidget*)              PrimaryList                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UReputationListWidget*)              RegionalList                                                OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UReputationDetailsWidget*)           Details                                                     OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UButtonGroup*)                       ButtonGroup                                                 OFFSET(get<T>, {0x330, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ReputationSummaryWidget.RemoveReputationBackgroundOnMinimize
	// void RemoveReputationBackgroundOnMinimize();                                                                             // [0x18a4820] Final|Native|Public  
	// Function /Script/Indiana.ReputationSummaryWidget.OnFactionReputationChanged
	// void OnFactionReputationChanged(class UFactionData* FactionData, EReputationType ReputationType, int32_t Amount, class UReputationData* ReputationBefore, class UReputationData* ReputationAfter); // [0x18a43f0] Final|Native|Protected 
	// Function /Script/Indiana.ReputationSummaryWidget.InitReputationBackgroundOnMaximize
	// void InitReputationBackgroundOnMaximize();                                                                               // [0x18a4190] Final|Native|Public  
};

/// Class /Script/Indiana.ResetSpellCooldownStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UResetSpellCooldownStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x188, 8, 0, 0})
};

/// Class /Script/Indiana.RespecMachine
/// Size: 0x0010 (0x0002B8 - 0x0002C8)
class ARespecMachine : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x2C0, 8, 0, 0})
};

/// Class /Script/Indiana.RestrictedArea
/// Size: 0x00B0 (0x0002B8 - 0x000368)
class ARestrictedArea : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UDisguiseData*)                      Disguise                                                    OFFSET(get<T>, {0x2C0, 8, 0, 0})
	SMember(FLogicalExpression)                        EnabledGlobalVariableExpression                             OFFSET(getStruct<T>, {0x2C8, 104, 0, 0})
	CMember(TArray<class UClass*>)                     Teams                                                       OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<AIndianaAiCharacter*>>) Guards                                                   OFFSET(get<T>, {0x340, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.RestrictedArea.IsEnabled
	// bool IsEnabled();                                                                                                        // [0x18a41b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.RestrictedAreaComponent
/// Size: 0x0008 (0x000268 - 0x000270)
class URestrictedAreaComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/Indiana.RestrictedAreaVolume
/// Size: 0x0008 (0x000310 - 0x000318)
class ARestrictedAreaVolume : public AVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class ARestrictedArea*)                    RestrictedArea                                              OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.ResurrectStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UResurrectStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     PercentMaxHealthOnResurrect                                 OFFSET(get<float>, {0x188, 4, 0, 0})
};

/// Struct /Script/Indiana.CrosshairVisuals
/// Size: 0x0030 (0x000000 - 0x000030)
class FCrosshairVisuals : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UTexture2D*)                         Left                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTexture2D*)                         Top                                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UTexture2D*)                         Center                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UTexture2D*)                         Minimal                                                     OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UTexture2D*)                         StaticImage                                                 OFFSET(get<T>, {0x20, 8, 0, 0})
	SMember(FVector2D)                                 StaticImagePositionOffset                                   OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/Indiana.CrosshairStates
/// Size: 0x0090 (0x000000 - 0x000090)
class FCrosshairStates : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FCrosshairVisuals)                         Default                                                     OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	SMember(FCrosshairVisuals)                         Hostile                                                     OFFSET(getStruct<T>, {0x30, 48, 0, 0})
	SMember(FCrosshairVisuals)                         Neutral                                                     OFFSET(getStruct<T>, {0x60, 48, 0, 0})
};

/// Class /Script/Indiana.ReticleVisualsDataAsset
/// Size: 0x0090 (0x000038 - 0x0000C8)
class UReticleVisualsDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FCrosshairStates)                          States                                                      OFFSET(getStruct<T>, {0x38, 144, 0, 0})
};

/// Class /Script/Indiana.ReticleWidget
/// Size: 0x00A0 (0x000300 - 0x0003A0)
class UReticleWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(class UCanvasPanel*)                       RootCanvas                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             ReticuleInteract                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             TTDRotators                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UCrosshairWidget*)                   Crosshair                                                   OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UCauseDamageReticleWidget*)          CauseDamageWidget                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UOverlay*)                           TTDOverlay                                                  OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UOverlay*)                           TTDDTOverlay                                                OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UOverlay*)                           DTImageOverlay                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             DTImage                                                     OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DTTextBlock                                                 OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UOverlay*)                           StealthOverlay                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(TWeakObjectPtr<class UCompanionCommandComponent*>) CompanionCommandComponent                           OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMedKitComponent*>)   MedKitComponent                                             OFFSET(get<T>, {0x360, 8, 0, 0})
	DMember(float)                                     MovingDimFactor                                             OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     RotationSpeed                                               OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(float)                                     StealthTime                                                 OFFSET(get<float>, {0x370, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.ReticleWidget.ShrinkTTDRotator
	// void ShrinkTTDRotator();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ReticleWidget.SetTTDProgressRatio
	// void SetTTDProgressRatio(float NewTTDRatio);                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ReticleWidget.OnTTDTargetLost
	// void OnTTDTargetLost();                                                                                                  // [0x18a4760] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnTTDTargetAcquired
	// void OnTTDTargetAcquired();                                                                                              // [0x18a4740] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnTTDReticleMeterModeChanged
	// void OnTTDReticleMeterModeChanged(int32_t bVisible);                                                                     // [0x18a46b0] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnReticleModeChanged
	// void OnReticleModeChanged(int32_t ModeIn);                                                                               // [0x18a4620] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18a4590] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.OnCombatStateChanged
	// void OnCombatStateChanged(bool bCombatIn, bool bRestoring);                                                              // [0x18a4320] Final|Native|Protected 
	// Function /Script/Indiana.ReticleWidget.ExpandTTDRotator
	// void ExpandTTDRotator();                                                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.RetreatBehaviorStateInfo
/// Size: 0x0018 (0x000178 - 0x000190)
class URetreatBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
};

/// Class /Script/Indiana.RetreatRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class URetreatRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.RockFoliageTool
/// Size: 0x0000 (0x0002B8 - 0x0002B8)
class ARockFoliageTool : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:


	/// Functions
	// Function /Script/Indiana.RockFoliageTool.MoveBigScaleInstanceToFoliageType
	// void MoveBigScaleInstanceToFoliageType(class AInstancedFoliageActor* IFA, class UFoliageType* OldType, class UFoliageType* NewType, float InstanceScale); // [0x18a41d0] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.StatClampingData
/// Size: 0x0010 (0x000000 - 0x000010)
class FStatClampingData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bMinClamp                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bMaxClamp                                                   OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/Indiana.RpgStat
/// Size: 0x0048 (0x000038 - 0x000080)
class URpgStat : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EStatClampingMethod)                       StatClampingMethod                                          OFFSET(get<T>, {0x38, 1, 0, 0})
	SMember(FStatClampingData)                         CustomClampingData                                          OFFSET(getStruct<T>, {0x3C, 16, 0, 0})
	CMember(TArray<class URpgStat*>)                   CombineStats                                                OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<class URpgStat*>)                   CombineChildrenStats                                        OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FLocString)                                Format                                                      OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	DMember(float)                                     DescriptionBaseValue                                        OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(bool)                                      bInvertSign                                                 OFFSET(get<bool>, {0x7C, 1, 0, 0})
};

/// Class /Script/Indiana.RpgStatComponent
/// Size: 0x00E0 (0x0000E0 - 0x0001C0)
class URpgStatComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	SMember(FRpgStatCollection)                        InternalRpgStatCollection                                   OFFSET(getStruct<T>, {0xF8, 104, 0, 0})
	CMember(TMap<class URpgStat*, FStatClampingData>)  OverrideClampingData                                        OFFSET(get<T>, {0x170, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.RpgStatComponent.SetModifier
	// void SetModifier(class UObject* SourceObject, int32_t SourceId, FStatModifierDescription& StatModifier);                 // [0x18a96e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.RpgStatComponent.RpgStatShowStat
	// void RpgStatShowStat(FString Stat);                                                                                      // [0x18a9450] Final|Exec|Native|Public|Const 
	// Function /Script/Indiana.RpgStatComponent.RpgStatShowAll
	// void RpgStatShowAll();                                                                                                   // [0x18a9430] Final|Exec|Native|Public|Const 
	// Function /Script/Indiana.RpgStatComponent.RpgStatRemoveModifierDebug
	// void RpgStatRemoveModifierDebug(FName& Stat);                                                                            // [0x18a93a0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.RpgStatComponent.RpgStatAddModifierDebug
	// void RpgStatAddModifierDebug(FName& Stat, float Value);                                                                  // [0x18a92c0] Final|Exec|Native|Public|HasOutParms 
	// Function /Script/Indiana.RpgStatComponent.RemoveModifier
	// void RemoveModifier(class UObject* SourceObject, int32_t SourceId, FStatModifierDescription& StatModifier);              // [0x18a90b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.RpgStatComponent.OnCollectionStatUpdated
	// void OnCollectionStatUpdated(class URpgStat* Stat);                                                                      // [0x18a8d10] Final|Native|Protected 
	// Function /Script/Indiana.RpgStatComponent.GetValue
	// float GetValue(class URpgStat* Stat, ERpgStatGroupMask StatGroupMask, float InputValue);                                 // [0x18a89c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.PendingDeferredSpawn
/// Size: 0x0038 (0x000000 - 0x000038)
class FPendingDeferredSpawn : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Indiana.CachedGameState
/// Size: 0x0178 (0x000000 - 0x000178)
class FCachedGameState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(TArray<class UObject*>)                    PreloadedObjects                                            OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FPendingDeferredSpawn>)             PendingDeferredSpawns                                       OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TMap<class AActor*, uint64_t>)             DeferredSpawnActorStateDataOffsets                          OFFSET(get<T>, {0xB0, 80, 0, 0})
	CMember(TMap<FGuid, class AActor*>)                DeferredSpawnsByGUID                                        OFFSET(get<T>, {0x100, 80, 0, 0})
};

/// Class /Script/Indiana.SaveGameManager
/// Size: 0x0660 (0x000030 - 0x000690)
class USaveGameManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1680;

public:
	SMember(FMulticastInlineDelegate)                  OnRequestSaveMetadataComplete                               OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnQueryLatestSaveComplete                                   OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSaveStarted                                               OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSaveComplete                                              OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLoadComplete                                              OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnActiveUserChanged                                         OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFetchCloudSavesComplete                                   OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUserGameSettingsLoadComplete                              OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(float)                                     ScreenshotWaitTimeLimitSeconds                              OFFSET(get<float>, {0x280, 4, 0, 0})
	CMember(TMap<FName, FCachedGameState>)             CachedGameStates                                            OFFSET(get<T>, {0x3A0, 80, 0, 0})
	SMember(FString)                                   AutosaveIconFilePath                                        OFFSET(getStruct<T>, {0x450, 16, 0, 0})
	DMember(int32_t)                                   MaxOverwriteableSaveCount                                   OFFSET(get<int32_t>, {0x460, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPS4LoadInturrupted                                        OFFSET(getStruct<T>, {0x660, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.SaveGameManager.SaveUserGameSettings
	// void SaveUserGameSettings(bool bSettingsPotentiallyChanged);                                                             // [0x18a9650] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.SaveGame
	// ESaveGameResult SaveGame(FString Filename, bool bIgnoreSuperNova, ESaveGameType SaveGameType);                           // [0x18a9500] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.RequestPostGameSave
	// void RequestPostGameSave();                                                                                              // [0x185bda0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestPointOfNoReturnSave
	// void RequestPointOfNoReturnSave();                                                                                       // [0x18a92a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestPointOfNoReturnRollbackSave
	// void RequestPointOfNoReturnRollbackSave();                                                                               // [0x18a9280] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestBeforeSkipSave
	// void RequestBeforeSkipSave();                                                                                            // [0x185bda0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestBeforeEVTransitionSave
	// void RequestBeforeEVTransitionSave();                                                                                    // [0x18a9260] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.RequestAutosave
	// void RequestAutosave(bool bAllowOnSuperNova);                                                                            // [0x18a91e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.Quicksave
	// ESaveGameResult Quicksave();                                                                                             // [0x18a9080] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.Quickload
	// ELoadGameResult Quickload();                                                                                             // [0x18a9050] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.PointOfNoReturnSave
	// void PointOfNoReturnSave();                                                                                              // [0x18a9030] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.PointOfNoReturnRollbackSave
	// void PointOfNoReturnRollbackSave();                                                                                      // [0x18a9010] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.OnPromptedSaveSaveMenuClosed
	// void OnPromptedSaveSaveMenuClosed(bool bForced);                                                                         // [0x18a8f60] Final|Native|Protected 
	// Function /Script/Indiana.SaveGameManager.OnActorDestroyed
	// void OnActorDestroyed(class AActor* Actor);                                                                              // [0x18a8c80] Final|Native|Public  
	// Function /Script/Indiana.SaveGameManager.LoadUserGameSettings
	// void LoadUserGameSettings();                                                                                             // [0x18a8be0] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.LoadGame
	// ELoadGameResult LoadGame(FString Filename, bool bPreValidateMetadata);                                                   // [0x18a8ae0] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.EnsureSignIn
	// bool EnsureSignIn();                                                                                                     // [0x18a8990] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.DisableSaves
	// void DisableSaves(bool bDisable);                                                                                        // [0x18a8910] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.SaveGameManager.DeleteGame
	// EDeleteGameResult DeleteGame(FString Filename);                                                                          // [0x18a8830] Exec|Native|Public   
	// Function /Script/Indiana.SaveGameManager.CheckCanSaveGame
	// void CheckCanSaveGame();                                                                                                 // [0x18a8810] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.BeforeEVTransitionSave
	// void BeforeEVTransitionSave();                                                                                           // [0x18a87f0] Final|Exec|Native|Public 
	// Function /Script/Indiana.SaveGameManager.Autosave
	// bool Autosave(EAutoSaveType AutoSaveType, bool bIgnoreSuperNova);                                                        // [0x18a8720] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.SaveLoadDetailWidget
/// Size: 0x0180 (0x000278 - 0x0003F8)
class USaveLoadDetailWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	SMember(FString)                                   StringBetweenPlayerNameAndLevel                             OFFSET(getStruct<T>, {0x278, 16, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UImage*)                             SaveScreenshot                                              OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UImage*)                             InvalidSave                                                 OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UImage*)                             PONRSave                                                    OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SaveTypeText                                                OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CharacterInfoText                                           OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CurrentQuestText                                            OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DifficultyText                                              OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SaveDateText                                                OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PlaytimeText                                                OFFSET(get<T>, {0x2D0, 8, 0, 0})
};

/// Class /Script/Indiana.SaveLoadMenuWidget
/// Size: 0x00D0 (0x000308 - 0x0003D8)
class USaveLoadMenuWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 984;

public:
	CMember(class UButtonBase*)                        InvisibleButton                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UWidget*)                            SaveGameBlocker                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     InterfaceTitleText                                          OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SaveGamesText                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UScrollBox*)                         ContentScrollBox                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UVerticalBox*)                       ContentVerticalBox                                          OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UWidget*)                            Background                                                  OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UWidget*)                            CompatWidget                                                OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CompatCurVersion                                            OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CompatSaveVersion                                           OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CompatDLC1Status                                            OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CompatDLC2Status                                            OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UClass*)                             SaveLoadDetail                                              OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UClass*)                             NewSaveClass                                                OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         PONRSaveTexture                                             OFFSET(get<T>, {0x398, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SaveLoadMenuWidget.OnSaveDataRequestFinished
	// void OnSaveDataRequestFinished();                                                                                        // [0x18a8ff0] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.OnPS4LoadInturrupted
	// void OnPS4LoadInturrupted(FString SaveName);                                                                             // [0x18a8eb0] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.OnLoadComplete
	// void OnLoadComplete(FString Filename, ELoadGameResult Result);                                                           // [0x18a8dc0] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.OnExitInterface
	// void OnExitInterface();                                                                                                  // [0x18a8da0] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.OnActiveUserChanged
	// void OnActiveUserChanged(EActiveUserChangeType ChangeType);                                                              // [0x18a8c00] Final|Native|Protected 
	// Function /Script/Indiana.SaveLoadMenuWidget.DeleteSave
	// void DeleteSave();                                                                                                       // [0x18a88f0] Final|Native|Protected 
};

/// Class /Script/Indiana.SavingWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class USavingWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x308, 8, 0, 0})
	DMember(float)                                     MinimumSecondsToRun                                         OFFSET(get<float>, {0x310, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.SavingWidget.ShowSavingWidget
	// void ShowSavingWidget();                                                                                                 // [0x18b48c0] Final|Native|Public  
	// Function /Script/Indiana.SavingWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18b0ac0] Final|Native|Protected 
	// Function /Script/Indiana.SavingWidget.HideSavingWidget
	// void HideSavingWidget(ESaveGameResult SaveGameResult, ESaveGameType SaveGameType);                                       // [0x18b0480] Final|Native|Public  
};

/// Class /Script/Indiana.ScalableImage
/// Size: 0x0038 (0x000300 - 0x000338)
class UScalableImage : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class USizeBox*)                           MainSizeBox                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             MainImage                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	SMember(FVector2D)                                 OriginalSize                                                OFFSET(getStruct<T>, {0x310, 8, 0, 0})
	SMember(FVector2D)                                 MaximumSize                                                 OFFSET(getStruct<T>, {0x318, 8, 0, 0})
	CMember(class UTexture2D*)                         DesiredTexture                                              OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(bool)                                      bMatchDesiredTextureSize                                    OFFSET(get<bool>, {0x328, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.ScalableImage.SizeSettingChanged
	// void SizeSettingChanged(int32_t SizeIn);                                                                                 // [0x18b48e0] Final|Native|Protected 
};

/// Struct /Script/Indiana.ScaledActorEntry
/// Size: 0x0030 (0x000000 - 0x000030)
class FScaledActorEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   MinPlayerLevel                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ActorClass                                                  OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Class /Script/Indiana.ScaledActorTable
/// Size: 0x0010 (0x000038 - 0x000048)
class UScaledActorTable : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FScaledActorEntry>)                 PossibleActors                                              OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.ScaledSpawnNode
/// Size: 0x0030 (0x000538 - 0x000568)
class AScaledSpawnNode : public ASpawnNodeBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1384;

public:
	CMember(class UScaledActorTable*)                  ScaledActorTable                                            OFFSET(get<T>, {0x538, 8, 0, 0})
};

/// Class /Script/Indiana.ScaleStatusEffect
/// Size: 0x0010 (0x000188 - 0x000198)
class UScaleStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x188, 4, 0, 0})
	CMember(class URpgStat*)                           ScaleStat                                                   OFFSET(get<T>, {0x190, 8, 0, 0})
};

/// Class /Script/Indiana.ScalingData
/// Size: 0x0030 (0x000038 - 0x000068)
class UScalingData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<float>)                             HealthScalars                                               OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<float>)                             DamageScalars                                               OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<float>)                             ArmorScalars                                                OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/Indiana.ScalingOverrideBox
/// Size: 0x0038 (0x0002B8 - 0x0002F0)
class AScalingOverrideBox : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	DMember(int32_t)                                   MinEffectiveLevel                                           OFFSET(get<int32_t>, {0x2B8, 4, 0, 0})
	DMember(int32_t)                                   MaxEffectiveLevel                                           OFFSET(get<int32_t>, {0x2BC, 4, 0, 0})
	DMember(bool)                                      bApplyLevelModifier                                         OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(int32_t)                                   FlatLevelModifier                                           OFFSET(get<int32_t>, {0x2C4, 4, 0, 0})
	CMember(class UBoxComponent*)                      BoxShape                                                    OFFSET(get<T>, {0x2C8, 8, 0, 0})
};

/// Class /Script/Indiana.ScannerFlavorTextData
/// Size: 0x0010 (0x000038 - 0x000048)
class UScannerFlavorTextData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FLocString>)                        FlavorStrings                                               OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.Scar
/// Size: 0x0008 (0x000038 - 0x000040)
class UScar : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UTexture*)                           ScarsNormalMap                                              OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.ScopeData
/// Size: 0x0138 (0x000038 - 0x000170)
class UScopeData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(class UMaterial*)                          PostProcessMaterial                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UReticleVisualsDataAsset*)           ReticleVisuals                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     ZoomFOVAdjustment                                           OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     TransitionInTime                                            OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     TransitionOutTime                                           OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     LookStickRateMultiplier                                     OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(bool)                                      bCanInteractWhileScoped                                     OFFSET(get<bool>, {0x58, 1, 0, 0})
	SMember(FRuntimeFloatCurve)                        TransitionInFadeCurve                                       OFFSET(getStruct<T>, {0x60, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        TransitionOutFadeCurve                                      OFFSET(getStruct<T>, {0xE8, 136, 0, 0})
};

/// Class /Script/Indiana.ScriptRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UScriptRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.PopRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UPopRequestData : public UScriptRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.ClearCompanionCommandStatesRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UClearCompanionCommandStatesRequestData : public UScriptRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.ClearBehaviorStatesOfTypeRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class UClearBehaviorStatesOfTypeRequestData : public UScriptRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(EBehaviorState)                            BehaviorState                                               OFFSET(get<T>, {0x68, 1, 0, 0})
};

/// Class /Script/Indiana.RequestTargetRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class URequestTargetRequestData : public UScriptRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(ETargetRequestType)                        TargetRequestType                                           OFFSET(get<T>, {0x68, 1, 0, 0})
};

/// Class /Script/Indiana.SetWeaponPreferenceRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class USetWeaponPreferenceRequestData : public UScriptRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(EWeaponPreference)                         WeaponPreference                                            OFFSET(get<T>, {0x68, 1, 0, 0})
};

/// Class /Script/Indiana.ScriptEvent
/// Size: 0x0000 (0x000030 - 0x000030)
class UScriptEvent : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.SetGlobalValueEvent
/// Size: 0x0018 (0x000030 - 0x000048)
class USetGlobalValueEvent : public UScriptEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGlobalVariable)                           GlobalVariable                                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   VariableValue                                               OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/Indiana.SetGlobalIfGlobalEvent
/// Size: 0x0030 (0x000030 - 0x000060)
class USetGlobalIfGlobalEvent : public UScriptEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FGlobalVariable)                           GlobalVariable                                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   VariableValue                                               OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	SMember(FGlobalVariable)                           ConditionGlobalVariable                                     OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	DMember(int32_t)                                   ConditionValue                                              OFFSET(get<int32_t>, {0x58, 4, 0, 0})
};

/// Class /Script/Indiana.IncrementGlobalValueEvent
/// Size: 0x0018 (0x000030 - 0x000048)
class UIncrementGlobalValueEvent : public UScriptEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGlobalVariable)                           GlobalVariable                                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   IncrementValue                                              OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/Indiana.RandomizeGlobalValueEvent
/// Size: 0x0018 (0x000030 - 0x000048)
class URandomizeGlobalValueEvent : public UScriptEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGlobalVariable)                           GlobalVariable                                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   MinValue                                                    OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   MaxValue                                                    OFFSET(get<int32_t>, {0x44, 4, 0, 0})
};

/// Class /Script/Indiana.StartQuestEvent
/// Size: 0x0010 (0x000030 - 0x000040)
class UStartQuestEvent : public UScriptEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FQuestReference)                           Quest                                                       OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.TriggerQuestAddendumEvent
/// Size: 0x0018 (0x000030 - 0x000048)
class UTriggerQuestAddendumEvent : public UScriptEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FQuestReference)                           Quest                                                       OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   AddendumID                                                  OFFSET(get<int32_t>, {0x40, 4, 0, 0})
};

/// Class /Script/Indiana.AdvanceQuestEvent
/// Size: 0x0010 (0x000030 - 0x000040)
class UAdvanceQuestEvent : public UScriptEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FQuestReference)                           Quest                                                       OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.RemoteEvent
/// Size: 0x0010 (0x000030 - 0x000040)
class URemoteEvent : public UScriptEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   EventName                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.ScriptManager
/// Size: 0x0150 (0x000030 - 0x000180)
class UScriptManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(class UScripts*)                           Scripts                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UConditionals*)                      Conditionals                                                OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.Scripts
/// Size: 0x0000 (0x000030 - 0x000030)
class UScripts : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.Scripts.UnsealOCL
	// void UnsealOCL(FGuid& OCLObjectID);                                                                                      // [0x18b5100] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.UnlockOCL
	// void UnlockOCL(FGuid& OCLObjectID);                                                                                      // [0x18b5070] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.UnlockComputer
	// void UnlockComputer(FGuid& ComputerObjectID);                                                                            // [0x18b4fe0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.UnlockCompanion
	// void UnlockCompanion(FGuid& CompanionID);                                                                                // [0x18b4f50] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.UnbarOCL
	// void UnbarOCL(FGuid& OCLObjectID);                                                                                       // [0x18b4ec0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.TriggerQuestFailState
	// void TriggerQuestFailState(FGuid QuestID, int32_t EndStateID);                                                           // [0x18b4df0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.TriggerQuestEndState
	// void TriggerQuestEndState(FGuid QuestID, int32_t EndStateID);                                                            // [0x18b4d20] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.TriggerQuestAddendum
	// void TriggerQuestAddendum(FGuid QuestID, int32_t AddendumID);                                                            // [0x18b4c50] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.TravelToDestination
	// void TravelToDestination(FString TravelDestination, bool bTriggerAutosave);                                              // [0x18b4b70] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.TakeItemValue
	// void TakeItemValue(FString Item);                                                                                        // [0x18b4ad0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.StartQuestWithAlternateDescription
	// void StartQuestWithAlternateDescription(FGuid QuestID, int32_t QuestDescriptionID);                                      // [0x18b4a00] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.StartQuest
	// void StartQuest(FGuid QuestID);                                                                                          // [0x18b4970] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.ShowBeacon
	// void ShowBeacon(FGuid& BeaconObjectID);                                                                                  // [0x18b4830] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetTrackedQuest
	// void SetTrackedQuest(FGuid QuestID);                                                                                     // [0x18b47a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetTeamRelationship
	// void SetTeamRelationship(FString SourceTeam, FString& OtherTeam, TEnumAsByte<ETeamAttitude> Relationship, bool bMutual); // [0x18b4610] Final|Native|Static|Public|HasOutParms 
	// Function /Script/Indiana.Scripts.SetTalkIdleOverride
	// void SetTalkIdleOverride(FGuid Actor, FName TalkIdleOverrideName, EEmotion Emotion, float Delay, float Duration, bool Persist); // [0x18b4430] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetSpeakersTalkIdleOverride
	// void SetSpeakersTalkIdleOverride(FName TalkIdleOverrideName, EEmotion Emotion, float Delay, float Duration, bool Persist); // [0x18b42a0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSpeakersEmotionWithDelay
	// void SetSpeakersEmotionWithDelay(EEmotion Emotion, float EmotionDelay, float Duration, bool Persist);                    // [0x18b4150] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSpeakersEmotionFull
	// void SetSpeakersEmotionFull(EEmotion Emotion, float Delay, float Duration, float HeadStrength, bool Persist, bool AffectHead, bool AffectBody); // [0x18b3f20] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSpeakersEmotion
	// void SetSpeakersEmotion(EEmotion Emotion, float Duration, bool Persist);                                                 // [0x18b3e10] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSpeakersDefaultEmotion
	// void SetSpeakersDefaultEmotion(EEmotion Emotion);                                                                        // [0x18b3da0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetSlideshowImageKey
	// void SetSlideshowImageKey(FString& ImageKey);                                                                            // [0x18b3d00] Final|Native|Static|Public|HasOutParms 
	// Function /Script/Indiana.Scripts.SetQuestAlternateDescription
	// void SetQuestAlternateDescription(FGuid QuestID, int32_t QuestDescriptionID);                                            // [0x18b3c30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetPosture
	// void SetPosture(EPosture Posture, float Delay, float Duration, bool Persist);                                            // [0x18b3ae0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPointOfInterestDiscovered
	// void SetPointOfInterestDiscovered(FString PointOfInterestData, bool bCanAwardXP);                                        // [0x18b3a00] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerVisitedTravelDestination
	// void SetPlayerVisitedTravelDestination(FString TravelDestination);                                                       // [0x18b3960] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerVisitedRegion
	// void SetPlayerVisitedRegion(FString TravelRegion);                                                                       // [0x18b38c0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerTravelDestinationLocked
	// void SetPlayerTravelDestinationLocked(FString TravelDestination, bool bLocked);                                          // [0x18b37e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerTravelDestinationHidden
	// void SetPlayerTravelDestinationHidden(FString TravelDestination, bool bHidden);                                          // [0x18b3700] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerShipLocation
	// void SetPlayerShipLocation(FString ShipDestination);                                                                     // [0x18b3660] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerRelationshipToHostile
	// void SetPlayerRelationshipToHostile(FGuid& CharacterID);                                                                 // [0x18b35d0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPlayerOwnershipOfItemTypeInContainer
	// void SetPlayerOwnershipOfItemTypeInContainer(FGuid& ContainerID, FString Item, bool bPlayerOwned, bool bClearNonPlayerOwnership); // [0x18b3320] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPlayerOwnershipOfItemsInContainer
	// void SetPlayerOwnershipOfItemsInContainer(FGuid& ContainerID, bool bPlayerOwned, bool bClearNonPlayerOwnership);         // [0x18b34b0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPlayerAwareOfTravelDestination
	// void SetPlayerAwareOfTravelDestination(FString TravelDestination);                                                       // [0x18b3280] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPlayerAwareOfRegion
	// void SetPlayerAwareOfRegion(FString TravelRegion);                                                                       // [0x18b31e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetPickupPlayerOwnership
	// void SetPickupPlayerOwnership(FGuid& PickupID, bool bPlayerOwned, bool bClearNonPlayerOwnership);                        // [0x18b30c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPickupNonPlayerOwnership
	// void SetPickupNonPlayerOwnership(FGuid& PickupID, FGuid& Actor, bool bClearPlayerOwnership);                             // [0x18b2f80] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetPickupFactionOwnership
	// void SetPickupFactionOwnership(FGuid& PickupID, FString Faction, bool bClearPlayerOwnership);                            // [0x18b2e40] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetObjectiveAlternateDescription
	// void SetObjectiveAlternateDescription(FGuid QuestID, int32_t ObjectiveID, int32_t ObjectiveDescriptionID);               // [0x18b2d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetNonPlayerOwnershipOfItemTypeInContainer
	// void SetNonPlayerOwnershipOfItemTypeInContainer(FGuid& ContainerID, FString Item, FGuid& Actor, bool bClearPlayerOwnership); // [0x18b2a60] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetNonPlayerOwnershipOfItemsInContainer
	// void SetNonPlayerOwnershipOfItemsInContainer(FGuid& ContainerID, FGuid& Actor, bool bClearPlayerOwnership);              // [0x18b2bf0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetMusicOverride
	// void SetMusicOverride(FString OverrideTrack);                                                                            // [0x18b29c0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetInterrogationComplete
	// void SetInterrogationComplete(EInterrogationResult Result);                                                              // [0x18b2950] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetGlobalVariableValue
	// void SetGlobalVariableValue(FGlobalVariable& Variable, int32_t Value);                                                   // [0x18b2860] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetGlobalValue
	// void SetGlobalValue(FString VariableName, int32_t Value);                                                                // [0x18b2780] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetGlobalIfGlobal
	// void SetGlobalIfGlobal(FString ConditionVariableName, int32_t ConditionValue, FString VariableName, int32_t Value);      // [0x18b2600] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.SetFactionOwnershipOfItemTypeInContainer
	// void SetFactionOwnershipOfItemTypeInContainer(FGuid& ContainerID, FString Item, FString Faction, bool bClearPlayerOwnership); // [0x18b2320] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetFactionOwnershipOfItemsInContainer
	// void SetFactionOwnershipOfItemsInContainer(FGuid& ContainerID, FString Faction, bool bClearPlayerOwnership);             // [0x18b24c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SetFactionEncountered
	// void SetFactionEncountered(FString Faction);                                                                             // [0x18b2280] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetEmotionWithDelay
	// void SetEmotionWithDelay(FGuid Actor, EEmotion Emotion, float EmotionDelay, float Duration, bool Persist);               // [0x18b20e0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetEmotionFull
	// void SetEmotionFull(FGuid Actor, EEmotion Emotion, float Delay, float Duration, float HeadStrength, bool Persist, bool AffectHead, bool AffectBody); // [0x18b1e60] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetEmotion
	// void SetEmotion(FGuid Actor, EEmotion Emotion, float Duration, bool Persist);                                            // [0x18b1d00] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetDefaultEmotion
	// void SetDefaultEmotion(FGuid Actor, EEmotion Emotion);                                                                   // [0x18b1c30] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetConversationTargetActor
	// void SetConversationTargetActor(FGuid Actor, FGuid Target, bool bRotateBody, bool bStickyTarget);                        // [0x18b1ad0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetConversationHeadTargetActor
	// void SetConversationHeadTargetActor(FGuid Actor, FGuid Target, bool bStickyTarget);                                      // [0x18b19b0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetConversationEyesTargetActor
	// void SetConversationEyesTargetActor(FGuid Actor, FGuid Target, bool bStickyTarget);                                      // [0x18b1890] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetConversationBodyTargetActor
	// void SetConversationBodyTargetActor(FGuid Actor, FGuid Target, bool bStickyTarget);                                      // [0x18b1770] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.SetCompanionWantsToTalk
	// void SetCompanionWantsToTalk(ESpecialObsidianID CompanionID, bool bWantsToTalk);                                         // [0x18b16b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.SetCharacterTeam_AvoidUsingThis
	// void SetCharacterTeam_AvoidUsingThis(FGuid& CharacterID, FString Team);                                                  // [0x18b15b0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.SealOCL
	// void SealOCL(FGuid& OCLObjectID);                                                                                        // [0x18b1520] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ResumeMusic
	// void ResumeMusic();                                                                                                      // [0x18b1500] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.ResetRPGSystems
	// void ResetRPGSystems();                                                                                                  // [0x18b14e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.ReplaceCompanionInSlot
	// void ReplaceCompanionInSlot(FGuid& PotientalCompanionID, ECompanionSlot CommpanionSlot);                                 // [0x18b1400] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.RemoveItemFromActor
	// void RemoveItemFromActor(FGuid& ActorId, FString Item, int32_t Count);                                                   // [0x18b12c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.RemoveItem
	// void RemoveItem(FString Item, int32_t Count);                                                                            // [0x18b11e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.RemoveCurrency
	// void RemoveCurrency(FGuid& ActorId, int32_t Count);                                                                      // [0x18b1100] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.RemoveCompanionFromParty
	// void RemoveCompanionFromParty(FGuid& CompanionID);                                                                       // [0x18b1070] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.RemoteEvent
	// void RemoteEvent(FString EventName);                                                                                     // [0x18b0fd0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.RegisterNamedTimestamp
	// void RegisterNamedTimestamp(FString TimestampName);                                                                      // [0x18b0f30] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.RandomizeGlobalValueWithGlobals
	// void RandomizeGlobalValueWithGlobals(FString VariableName, FString MinValueGlobal, FString MaxValueGlobal);              // [0x18b0de0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.RandomizeGlobalValue
	// void RandomizeGlobalValue(FString VariableName, int32_t MinValue, int32_t MaxValue);                                     // [0x18b0cc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.PlayConversationChatterEvent
	// void PlayConversationChatterEvent(EChatterEventType ChatterEvent, bool bConversationNode);                               // [0x18b0c00] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.PauseMusic
	// void PauseMusic();                                                                                                       // [0x18b0be0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.OpenOCL
	// void OpenOCL(FGuid& OCLObjectID);                                                                                        // [0x18b0b50] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.MentionQuest
	// void MentionQuest(FGuid QuestID);                                                                                        // [0x18b0a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.MentionPointOfInterest
	// void MentionPointOfInterest(FString PointOfInterestData);                                                                // [0x18b0990] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.MarkConversationNodeAsRead
	// void MarkConversationNodeAsRead(FGuid ConversationID, int32_t NodeID);                                                   // [0x18b08c0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.MakePointOfInterestDiscoverable
	// void MakePointOfInterestDiscoverable(FString PointOfInterestData, bool bStillHidden);                                    // [0x18b07e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.LockOCL
	// void LockOCL(FGuid& OCLObjectID);                                                                                        // [0x18b0750] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.LockComputer
	// void LockComputer(FGuid& ComputerObjectID);                                                                              // [0x18b06c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.KillNPC
	// void KillNPC(FGuid& Character);                                                                                          // [0x18b0630] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.IncrementGlobalValue
	// void IncrementGlobalValue(FString VariableName, int32_t IncrementValue);                                                 // [0x18b0550] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.HidePointOfInterest
	// void HidePointOfInterest(FString PointOfInterestData);                                                                   // [0x18b03e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.HideBeacon
	// void HideBeacon(FGuid& BeaconObjectID);                                                                                  // [0x18b0350] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.GivePerkToActor
	// void GivePerkToActor(FGuid& ActorId, FString Perk);                                                                      // [0x18b0250] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.GiveLoot
	// void GiveLoot(FString LootTableData);                                                                                    // [0x18b01b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.GiveItemToActor
	// void GiveItemToActor(FGuid& ActorIdID, FString Item, int32_t Count);                                                     // [0x18b0070] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.GiveItem
	// void GiveItem(FString Item, int32_t Count);                                                                              // [0x18aff90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.GiveCurrency
	// void GiveCurrency(FGuid& ActorId, int32_t Count);                                                                        // [0x18afeb0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.GetCompanionMoral
	// float GetCompanionMoral(ESpecialObsidianID CompanionID);                                                                 // [0x18afe30] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.DynamicallyReplaceCompanion
	// void DynamicallyReplaceCompanion(ESpecialObsidianID OldCompanionID, ESpecialObsidianID NewCompanionID);                  // [0x18afd70] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.DismissCompanion
	// void DismissCompanion(ESpecialObsidianID CompanionID);                                                                   // [0x18afd00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.DisarmTrap
	// void DisarmTrap(FGuid& TrapObjectID);                                                                                    // [0x18afc70] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.DebugPrintMessage
	// void DebugPrintMessage(FString Message);                                                                                 // [0x18afbd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.DebugAdvanceQuest
	// void DebugAdvanceQuest(FGuid QuestID);                                                                                   // [0x18afb40] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.CloseOCL
	// void CloseOCL(FGuid& OCLObjectID, bool Block, bool bSeal);                                                               // [0x18afa20] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearTalkIdleOverrideOnNextEmotionChange
	// void ClearTalkIdleOverrideOnNextEmotionChange(FGuid Actor);                                                              // [0x18af990] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearTalkIdleOverride
	// void ClearTalkIdleOverride(FGuid Actor, EEmotion Emotion, float Duration, bool Persist);                                 // [0x18af830] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearSpeakersTalkIdleOverrideOnNextEmotionChange
	// void ClearSpeakersTalkIdleOverrideOnNextEmotionChange();                                                                 // [0x18af810] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearSpeakersTalkIdleOverride
	// void ClearSpeakersTalkIdleOverride(EEmotion Emotion, float Duration, bool Persist);                                      // [0x18af700] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearSpeakersDefaultEmotion
	// void ClearSpeakersDefaultEmotion();                                                                                      // [0x18af6e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearPickupOwnerships
	// void ClearPickupOwnerships(FGuid& PickupID, bool bClearPlayerOwnership, bool bClearNonPlayerOwnership);                  // [0x18af5c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearOwnershipsOfItemTypeInContainer
	// void ClearOwnershipsOfItemTypeInContainer(FGuid& ContainerID, FString Item, bool bClearPlayerOwnership, bool bClearNonPlayerOwnership); // [0x18af310] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearOwnershipsOfItemsInContainer
	// void ClearOwnershipsOfItemsInContainer(FGuid& ContainerID, bool bClearPlayerOwnership, bool bClearNonPlayerOwnership);   // [0x18af4a0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearNamedTimestamp
	// void ClearNamedTimestamp(FString TimestampName);                                                                         // [0x18af270] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearMusicOverride
	// void ClearMusicOverride();                                                                                               // [0x18af250] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.ClearFactionRecentHostilityToPlayer
	// void ClearFactionRecentHostilityToPlayer(FString Faction);                                                               // [0x18af1b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.ClearEmotion
	// void ClearEmotion(FGuid Actor);                                                                                          // [0x18af120] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearDefaultEmotion
	// void ClearDefaultEmotion(FGuid Actor);                                                                                   // [0x18af090] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationTargetActor
	// void ClearConversationTargetActor(FGuid Actor, bool bStickyTarget);                                                      // [0x18aefc0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationNodeAsRead
	// void ClearConversationNodeAsRead(FGuid ConversationID, int32_t NodeID);                                                  // [0x18aeef0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationHeadTargetActor
	// void ClearConversationHeadTargetActor(FGuid Actor, bool bStickyTarget);                                                  // [0x18aee20] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationEyesTargetActor
	// void ClearConversationEyesTargetActor(FGuid Actor, bool bStickyTarget);                                                  // [0x18aed50] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.ClearConversationBodyTargetActor
	// void ClearConversationBodyTargetActor(FGuid Actor, bool bStickyTarget);                                                  // [0x18aec80] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.CallGlobalScript
	// void CallGlobalScript(FGuid GlobalScriptID);                                                                             // [0x18aebf0] Final|Native|Static|Public|HasDefaults 
	// Function /Script/Indiana.Scripts.Bribe
	// void Bribe(FString VariableName);                                                                                        // [0x18aeb50] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.BeginTradeWithSpeaker
	// void BeginTradeWithSpeaker();                                                                                            // [0x18aeb30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.BarOCL
	// void BarOCL(FGuid& OCLObjectID);                                                                                         // [0x18aeaa0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.AttemptEnableHazard
	// void AttemptEnableHazard(FGuid& HazardActorID, bool bEnable);                                                            // [0x18ae9c0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.ArmTrap
	// void ArmTrap(FGuid& TrapObjectID);                                                                                       // [0x18ae930] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.AdvanceToHour
	// void AdvanceToHour(int32_t TargetHour);                                                                                  // [0x18ae8b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceTime
	// void AdvanceTime(float Days, float Hours, float Minutes, float Seconds);                                                 // [0x18ae760] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceSeconds
	// void AdvanceSeconds(float Seconds);                                                                                      // [0x18ae6e0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceQuest
	// void AdvanceQuest(FGuid QuestID);                                                                                        // [0x18ae650] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.Scripts.AdvanceMinutes
	// void AdvanceMinutes(float Minutes);                                                                                      // [0x18ae5d0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceHours
	// void AdvanceHours(float Hours);                                                                                          // [0x18ae550] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdvanceDays
	// void AdvanceDays(float Days);                                                                                            // [0x18ae4d0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdjustFactionReputation
	// void AdjustFactionReputation(FString Faction, EReputationType ReputationType, EReputationIncrementType IncrementType, int32_t CustomAmount); // [0x18ae360] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AdjustCompanionMoral
	// void AdjustCompanionMoral(ESpecialObsidianID CompanionID, bool bPositiveMoralAdjustment, EMoraleContribution Contribution, float CustomAmount, bool bOnlyActivePartyMembers); // [0x18ae1b0] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AddCompanionToParty
	// void AddCompanionToParty(FGuid& CompanionID);                                                                            // [0x18ae120] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/Indiana.Scripts.AddAudioLogBP
	// void AddAudioLogBP(class UAudioLogDataAsset* audiolog, bool bPlayOnPickup);                                              // [0x18ae060] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.AddAudioLog
	// void AddAudioLog(FString audiolog, bool bPlayOnPickup);                                                                  // [0x18adf80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Scripts.AchievementIncrement
	// void AchievementIncrement(FName& AchievementName, int32_t Count);                                                        // [0x18adeb0] Final|Native|Static|Public|HasOutParms 
	// Function /Script/Indiana.Scripts.AchievementGameOver
	// void AchievementGameOver();                                                                                              // [0x18ade90] Final|Native|Static|Public 
	// Function /Script/Indiana.Scripts.AchievementCompleted
	// void AchievementCompleted(FName& AchievementName);                                                                       // [0x18ade10] Final|Native|Static|Public|HasOutParms 
};

/// Class /Script/Indiana.SearchBehaviorStateInfo
/// Size: 0x0028 (0x000120 - 0x000148)
class USearchBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(class UBehaviorStateRequestData*)          QueuedDecisionTreeRequest                                   OFFSET(get<T>, {0x120, 8, 0, 0})
};

/// Class /Script/Indiana.SearchRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class USearchRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bRequireReachable                                           OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(float)                                     RequiredSearchDuration                                      OFFSET(get<float>, {0x6C, 4, 0, 0})
};

/// Class /Script/Indiana.SelectedNotificationWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class USelectedNotificationWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UTextBlockBase*)                     TextBlock                                                   OFFSET(get<T>, {0x300, 8, 0, 0})
	DMember(float)                                     NotificationVisibleTimePerClick                             OFFSET(get<float>, {0x308, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.SelectedNotificationWidget.StopFadeOutAnimation
	// void StopFadeOutAnimation();                                                                                             // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.SelectedNotificationWidget.PlayNotificationAnimation
	// void PlayNotificationAnimation();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.SelectedNotificationWidget.PlayFadeOutAnimation
	// void PlayFadeOutAnimation();                                                                                             // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.SelectedNotificationWidget.OnFadeRightAnimationEnd
	// void OnFadeRightAnimationEnd();                                                                                          // [0x18b9cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SelectedNotificationWidget.OnFadeOutAnimationEnd
	// void OnFadeOutAnimationEnd();                                                                                            // [0x18b9ca0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.HUDSetting
/// Size: 0x0034 (0x000000 - 0x000034)
class FHUDSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	CMember(ECompassVisibilityMode)                    CompassVisibility                                           OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EDialogSkillMode)                          DialogSkillMode                                             OFFSET(get<T>, {0x1, 1, 0, 0})
	DMember(float)                                     TooltipDelay                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     NotificationDuration                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bInteractionOutlines                                        OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bInteractionControls                                        OFFSET(get<bool>, {0xD, 1, 0, 0})
	DMember(bool)                                      bWaypointMarkers                                            OFFSET(get<bool>, {0xE, 1, 0, 0})
	CMember(EEnemyHealthBarMode)                       EnemyHealthBarMode                                          OFFSET(get<T>, {0xF, 1, 0, 0})
	CMember(EReticleMode)                              ReticleMode                                                 OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(bool)                                      bReticleFeedback                                            OFFSET(get<bool>, {0x11, 1, 0, 0})
	CMember(EQuestUpdateMode)                          QuestUpdateMode                                             OFFSET(get<T>, {0x12, 1, 0, 0})
	DMember(bool)                                      bAwarenessMeterMode                                         OFFSET(get<bool>, {0x13, 1, 0, 0})
	CMember(EPlayerStatusBarMode)                      StatusBarMode                                               OFFSET(get<T>, {0x14, 1, 0, 0})
	DMember(bool)                                      bShowPlayerStatusEffects                                    OFFSET(get<bool>, {0x15, 1, 0, 0})
	CMember(EPlayerStatusEffectTextMode)               PlayerStatusEffectTextMode                                  OFFSET(get<T>, {0x16, 1, 0, 0})
	CMember(ECompanionAbilityUIMode)                   CompanionAbilityUI                                          OFFSET(get<T>, {0x17, 1, 0, 0})
	CMember(ECompanionAbilityBindingMode)              CompanionAbilityBindings                                    OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(EHeldWeaponDisplayMode)                    HeldWeaponDisplay                                           OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(EHeldWeaponDisplayText)                    HeldWeaponTextDisplay                                       OFFSET(get<T>, {0x1A, 1, 0, 0})
	CMember(EAreaNameMode)                             AreaNameMode                                                OFFSET(get<T>, {0x1B, 1, 0, 0})
	CMember(EDirectionalDamageIndicatorMode)           DirectionalDamageIndicatorMode                              OFFSET(get<T>, {0x1C, 1, 0, 0})
	CMember(EFPSIndicatorMode)                         FPSIndicator                                                OFFSET(get<T>, {0x1D, 1, 0, 0})
	DMember(bool)                                      bShowSurvivalBars                                           OFFSET(get<bool>, {0x1E, 1, 0, 0})
	CMember(EMedicalInhalerMode)                       InhalerMode                                                 OFFSET(get<T>, {0x1F, 1, 0, 0})
	CMember(EAbilityControlMode)                       AbilityControlMode                                          OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(ECompanionStatusMode)                      CompanionStatusMode                                         OFFSET(get<T>, {0x21, 1, 0, 0})
	CMember(ECompanionAbilityPassiveCDMode)            CompanionAbilityPassiveCooldowns                            OFFSET(get<T>, {0x22, 1, 0, 0})
	CMember(ECompanionAbilityPassiveNotificationMode)  CompanionAbilityPassiveNotifications                        OFFSET(get<T>, {0x23, 1, 0, 0})
	DMember(bool)                                      bShowLevelUpNotifications                                   OFFSET(get<bool>, {0x24, 1, 0, 0})
	DMember(bool)                                      bShowLevelUpReminders                                       OFFSET(get<bool>, {0x25, 1, 0, 0})
	DMember(bool)                                      bShowCombatIndicator                                        OFFSET(get<bool>, {0x26, 1, 0, 0})
	DMember(bool)                                      bShowTTDScanner                                             OFFSET(get<bool>, {0x27, 1, 0, 0})
	CMember(ETTDReticleMeterMode)                      TTDReticleMeterMode                                         OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(bool)                                      bTTDStatusEffectPreview                                     OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(bool)                                      bShowDisguiseMeter                                          OFFSET(get<bool>, {0x2A, 1, 0, 0})
	DMember(bool)                                      bEquipmentRepairWarning                                     OFFSET(get<bool>, {0x2B, 1, 0, 0})
	CMember(EWeaponSelectMode)                         WeaponSelectMode                                            OFFSET(get<T>, {0x2C, 1, 0, 0})
	CMember(EWeaponSelectAxisMode)                     WeaponSelectAxisMode                                        OFFSET(get<T>, {0x2D, 1, 0, 0})
	DMember(bool)                                      bShowTutorialNotifications                                  OFFSET(get<bool>, {0x2E, 1, 0, 0})
	DMember(bool)                                      bShowTutorialPopups                                         OFFSET(get<bool>, {0x2F, 1, 0, 0})
	DMember(bool)                                      bShowLootTooltips                                           OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bShowLootControls                                           OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Class /Script/Indiana.SettingsHUDMode
/// Size: 0x00B0 (0x000038 - 0x0000E8)
class USettingsHUDMode : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FHUDSetting)                               MinimalSettings                                             OFFSET(getStruct<T>, {0x38, 52, 0, 0})
	SMember(FHUDSetting)                               DefaultSettings                                             OFFSET(getStruct<T>, {0x6C, 52, 0, 0})
	SMember(FHUDSetting)                               MaximumSettings                                             OFFSET(getStruct<T>, {0xA0, 52, 0, 0})
	CMember(TArray<ESetting>)                          HudSettings                                                 OFFSET(get<T>, {0xD8, 16, 0, 0})
};

/// Class /Script/Indiana.SettingsMenuButtonSlotWidget
/// Size: 0x0050 (0x000300 - 0x000350)
class USettingsMenuButtonSlotWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class UButtonBase*)                        ChildButton                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ButtonTextBlock                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class USettingsMenuWidget*)                SettingsMenu                                                OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SettingsMenuButtonSlotWidget.OnButtonClicked
	// void OnButtonClicked();                                                                                                  // [0x18b9be0] Final|Native|Protected 
};

/// Class /Script/Indiana.SettingsMenuSlotEntryBase
/// Size: 0x0000 (0x000300 - 0x000300)
class USettingsMenuSlotEntryBase : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
};

/// Class /Script/Indiana.SettingsMenuCheckBoxWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class USettingsMenuCheckBoxWidget : public USettingsMenuSlotEntryBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UCheckBoxWidget*)                    CheckBox                                                    OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UUserSetting*)                       UserSetting                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class USettingsMenuWidget*)                SettingsMenu                                                OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SettingsMenuCheckBoxWidget.OnValueChanged
	// void OnValueChanged(class UButtonBase* Button);                                                                          // [0x18b9fa0] Final|Native|Protected 
};

/// Class /Script/Indiana.SettingsMenuComboBoxWidget
/// Size: 0x0018 (0x000278 - 0x000290)
class USettingsMenuComboBoxWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class UComboBoxStringBase*)                ComboBox                                                    OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UUserSetting*)                       UserSetting                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class USettingsMenuWidget*)                SettingsMenu                                                OFFSET(get<T>, {0x288, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SettingsMenuComboBoxWidget.OnValueChanged
	// void OnValueChanged(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);                                       // [0x18ba030] Final|Native|Protected 
};

/// Struct /Script/Indiana.SettingPlatformStringContainer
/// Size: 0x0010 (0x000000 - 0x000010)
class FSettingPlatformStringContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.SettingDescription
/// Size: 0x0068 (0x000000 - 0x000068)
class FSettingDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(ESettingSubcategory)                       Subcategory                                                 OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(TMap<EPlatformFamily, FSettingPlatformStringContainer>) PlatformOverrides                              OFFSET(get<T>, {0x18, 80, 0, 0})
};

/// Struct /Script/Indiana.SubcategoryDescription
/// Size: 0x0060 (0x000000 - 0x000060)
class FSubcategoryDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TMap<EPlatformFamily, FSettingPlatformStringContainer>) PlatformOverrides                              OFFSET(get<T>, {0x10, 80, 0, 0})
};

/// Struct /Script/Indiana.GamepadLayout
/// Size: 0x0070 (0x000000 - 0x000070)
class FGamepadLayout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TMap<EPlatformFamily, FSettingPlatformStringContainer>) PlatformOverrides                              OFFSET(get<T>, {0x10, 80, 0, 0})
	CMember(TArray<FLocString>)                        ButtonNames                                                 OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/Indiana.DynamicOverrides
/// Size: 0x0008 (0x000000 - 0x000008)
class FDynamicOverrides : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FLocString)                                AutoSprintName                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Class /Script/Indiana.SettingsMenuData
/// Size: 0x00B8 (0x000038 - 0x0000F0)
class USettingsMenuData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TMap<ESetting, FSettingDescription>)       SettingMap                                                  OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TMap<ESettingSubcategory, FSubcategoryDescription>) SubcategoryMap                                     OFFSET(get<T>, {0x88, 80, 0, 0})
	CMember(TArray<FGamepadLayout>)                    GamepadLayouts                                              OFFSET(get<T>, {0xD8, 16, 0, 0})
	SMember(FDynamicOverrides)                         DynamicOverrides                                            OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
};

/// Class /Script/Indiana.SettingsMenuInputKeySelector
/// Size: 0x00A8 (0x000300 - 0x0003A8)
class USettingsMenuInputKeySelector : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	SMember(FLocString)                                NoKeySpecifiedText                                          OFFSET(getStruct<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     KeyInputTextBlock                                           OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             InputIcon                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UClass*)                             KeybindDialogBoxClass                                       OFFSET(get<T>, {0x348, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SettingsMenuInputKeySelector.OnRightClicked
	// void OnRightClicked();                                                                                                   // [0x18b9ef0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuInputKeySelector.OnClicked
	// void OnClicked();                                                                                                        // [0x18b9c00] Final|Native|Protected 
};

/// Class /Script/Indiana.SettingsMenuKeyRebindWidget
/// Size: 0x0060 (0x000300 - 0x000360)
class USettingsMenuKeyRebindWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(class UTextBlockBase*)                     SettingName                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class USettingsMenuInputKeySelector*)      PrimaryKeySelector                                          OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class USettingsMenuInputKeySelector*)      SecondaryKeySelector                                        OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UButtonBase*)                        GameplayButton                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UUserSettingKeyBinding*)             UserSetting                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class USettingsMenuWidget*)                SettingsMenu                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UKeyBindsMenuWidget*)                ParentWidget                                                OFFSET(get<T>, {0x340, 8, 0, 0})
	SMember(FLocString)                                SettingNameString                                           OFFSET(getStruct<T>, {0x348, 8, 0, 0})
	DMember(bool)                                      bIsSelecting                                                OFFSET(get<bool>, {0x350, 1, 0, 0})
	DMember(int32_t)                                   SelectionIndex                                              OFFSET(get<int32_t>, {0x35C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnSecondaryIsSelectingKeyChanged
	// void OnSecondaryIsSelectingKeyChanged(bool bIsSelectingKey);                                                             // [0x18b9f10] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnPrimaryIsSelectingKeyChanged
	// void OnPrimaryIsSelectingKeyChanged(bool bIsSelectingKey);                                                               // [0x18b9e60] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnKeySelected
	// void OnKeySelected(FInputChord InputChord);                                                                              // [0x18b9d00] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnContainerClicked
	// void OnContainerClicked();                                                                                               // [0x18b9c20] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuKeyRebindWidget.OnBack
	// void OnBack();                                                                                                           // [0x18b9bc0] Final|Native|Protected 
};

/// Class /Script/Indiana.SettingsMenuOptionPresenterWdgt
/// Size: 0x0020 (0x000300 - 0x000320)
class USettingsMenuOptionPresenterWdgt : public USettingsMenuSlotEntryBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UOverlay*)                           ButtonContents                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UOptionPresenterWidget*)             OptionPresenter                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UUserSetting*)                       UserSetting                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class USettingsMenuWidget*)                SettingsMenu                                                OFFSET(get<T>, {0x318, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SettingsMenuOptionPresenterWdgt.OnValueChanged
	// void OnValueChanged(int32_t SelectedItem);                                                                               // [0x18ba160] Final|Native|Public  
};

/// Class /Script/Indiana.SettingsMenuSliderWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class USettingsMenuSliderWidget : public USettingsMenuSlotEntryBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UWaitTimeSliderWidget*)              Slider                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ValueTextBlock                                              OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UUserSetting*)                       UserSetting                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class USettingsMenuWidget*)                SettingsMenu                                                OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UDifficultySelectWidget*)            DifficultySelect                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UIndianaInterfaceUserWidget*)        ParentMenu                                                  OFFSET(get<T>, {0x328, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SettingsMenuSliderWidget.OnValueChanged
	// void OnValueChanged(FSliderEvent& Event);                                                                                // [0x18ba1f0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.SettingsMenuSlotWidget
/// Size: 0x0050 (0x000300 - 0x000350)
class USettingsMenuSlotWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class UButtonBase*)                        GamepadButton                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SettingName                                                 OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UNamedSlot*)                         NamedSlot                                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class USizeBox*)                           OptionTypeSizeBox                                           OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class USizeBox*)                           OptionNameSizeBox                                           OFFSET(get<T>, {0x340, 8, 0, 0})
	DMember(float)                                     ExtendedOptionTypeNameWidth                                 OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     ExtendedOptionTypeMinWidth                                  OFFSET(get<float>, {0x34C, 4, 0, 0})
};

/// Class /Script/Indiana.SettingsMenuSubcategoryWidget
/// Size: 0x0020 (0x000278 - 0x000298)
class USettingsMenuSubcategoryWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(class UButtonBase*)                        ApplyButton                                                 OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CategoryNameText                                            OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UVerticalBox*)                       SlotsVerticalBox                                            OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UClass*)                             SubcategorySlotClass                                        OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Indiana.UserSetting
/// Size: 0x0030 (0x000030 - 0x000060)
class UUserSetting : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UUserWidget*)                        Control                                                     OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/Indiana.UserSettingBool
/// Size: 0x0038 (0x000060 - 0x000098)
class UUserSettingBool : public UUserSetting
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/Indiana.UserSettingFloat
/// Size: 0x0040 (0x000060 - 0x0000A0)
class UUserSettingFloat : public UUserSetting
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Indiana.UserSettingInt32
/// Size: 0x0040 (0x000060 - 0x0000A0)
class UUserSettingInt32 : public UUserSetting
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
};

/// Class /Script/Indiana.UserSettingKeyBinding
/// Size: 0x0010 (0x000060 - 0x000070)
class UUserSettingKeyBinding : public UUserSetting
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/Indiana.UserSettingActionBinding
/// Size: 0x0090 (0x000070 - 0x000100)
class UUserSettingActionBinding : public UUserSettingKeyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Class /Script/Indiana.UserSettingAxisBinding
/// Size: 0x0088 (0x000070 - 0x0000F8)
class UUserSettingAxisBinding : public UUserSettingKeyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
};

/// Class /Script/Indiana.UserSettingActionKeyboardBinding
/// Size: 0x0050 (0x000070 - 0x0000C0)
class UUserSettingActionKeyboardBinding : public UUserSettingKeyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/Indiana.UserSettingAxisKeyboardBinding
/// Size: 0x0058 (0x000070 - 0x0000C8)
class UUserSettingAxisKeyboardBinding : public UUserSettingKeyBinding
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Class /Script/Indiana.SettingsMenuWidget
/// Size: 0x0370 (0x000308 - 0x000678)
class USettingsMenuWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1656;

public:
	SMember(FMulticastInlineDelegate)                  SettingsClosedDelegate                                      OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	CMember(class UClass*)                             SubcategorySlotClass                                        OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UClass*)                             SubcategoryClass                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UClass*)                             SliderClass                                                 OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UClass*)                             CheckBoxClass                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UClass*)                             OptionPresenterClass                                        OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UClass*)                             ButtonClass                                                 OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UClass*)                             KeyBindInterfaceClass                                       OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class USettingsHUDMode*)                   HUDSettingsAsset                                            OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(float)                                     GamepadScrollMultiplier                                     OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     LangOptPresenterWidthOverride                               OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     LangOptLabelWidthOverride                                   OFFSET(get<float>, {0x360, 4, 0, 0})
	CMember(class UScrollBox*)                         MenuScrollBox                                               OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UScrollBox*)                         DescriptionScrollBox                                        OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UVerticalBox*)                       Category0VerticalBox                                        OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UVerticalBox*)                       Category1VerticalBox                                        OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UVerticalBox*)                       Category2VerticalBox                                        OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UVerticalBox*)                       Category3VerticalBox                                        OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UVerticalBox*)                       Category4VerticalBox                                        OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UVerticalBox*)                       Category5VerticalBox                                        OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class USettingsMenuSubcategoryWidget*)     DisplaySubcategory                                          OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UWidgetSwitcher*)                    MenuSwitcher                                                OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UHorizontalBox*)                     PCButtonsHorizontalBox                                      OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UHorizontalBox*)                     InputLabelsHorizontalBox                                    OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionTextBlock                                        OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UWidget*)                            Background                                                  OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UImage*)                             DescriptionImage                                            OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UBackgroundPanelWidget*)             DescriptionBackgroundPanel                                  OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UButtonBase*)                        DefaultsButton                                              OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UButtonBase*)                        ApplyButton                                                 OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(TArray<class UUserSetting*>)               UserSettings                                                OFFSET(get<T>, {0x438, 16, 0, 0})
	CMember(TArray<class UUserSetting*>)               DisplayUserSettings                                         OFFSET(get<T>, {0x448, 16, 0, 0})
	CMember(TMap<ECategory, FLocString>)               NavBarCategories                                            OFFSET(get<T>, {0x458, 80, 0, 0})
	CMember(class USettingsMenuData*)                  SettingsData                                                OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UNavigationGroupWidget*)             NavigationBar                                               OFFSET(get<T>, {0x4B0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SettingsMenuWidget.ValueChanged
	// void ValueChanged(class UUserSetting* UserSetting);                                                                      // [0x18ba940] Final|Native|Public  
	// Function /Script/Indiana.SettingsMenuWidget.UpdateDialogTimerText
	// void UpdateDialogTimerText(float DeltaTime);                                                                             // [0x18ba8c0] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.SetVisualEffectQuality
	// void SetVisualEffectQuality(int32_t Value);                                                                              // [0x18ba830] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetViewDistanceQuality
	// void SetViewDistanceQuality(int32_t Value);                                                                              // [0x18ba7a0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetTextureQuality
	// void SetTextureQuality(int32_t Value);                                                                                   // [0x18ba710] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetSSGIQuality
	// void SetSSGIQuality(int32_t Value);                                                                                      // [0x18ba5f0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetShadowQuality
	// void SetShadowQuality(int32_t Value);                                                                                    // [0x18ba680] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetPostProcessingQuality
	// void SetPostProcessingQuality(int32_t Value);                                                                            // [0x18ba560] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetGraphicsQuality
	// void SetGraphicsQuality(int32_t Value);                                                                                  // [0x18ba4d0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetFoliageQuality
	// void SetFoliageQuality(int32_t Value);                                                                                   // [0x18ba440] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetAntiAliasingQuality
	// void SetAntiAliasingQuality(int32_t Value);                                                                              // [0x18ba3b0] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.SetAntiAliasingMethod
	// void SetAntiAliasingMethod(int32_t Value);                                                                               // [0x18ba320] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.QueueRefreshHUDMode
	// void QueueRefreshHUDMode();                                                                                              // [0x18ba300] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.OnOpenPCKeyBinds
	// void OnOpenPCKeyBinds();                                                                                                 // [0x18b9e40] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.OnOpenGamepadLayout
	// void OnOpenGamepadLayout();                                                                                              // [0x18b9e20] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18b9ce0] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.OnDetectGraphics
	// void OnDetectGraphics();                                                                                                 // [0x18b9c80] Final|Native|Protected 
	// Function /Script/Indiana.SettingsMenuWidget.OnCyclePageRight
	// void OnCyclePageRight();                                                                                                 // [0x18b9c60] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.OnCyclePageLeft
	// void OnCyclePageLeft();                                                                                                  // [0x18b9c40] Final|Native|Private 
	// Function /Script/Indiana.SettingsMenuWidget.EmptyHandler
	// void EmptyHandler();                                                                                                     // [0x18b9ba0] Final|Native|Public  
	// Function /Script/Indiana.SettingsMenuWidget.DefaultsActionHandler
	// void DefaultsActionHandler();                                                                                            // [0x18b9b80] Final|Native|Public  
};

/// Class /Script/Indiana.Shape
/// Size: 0x0000 (0x000030 - 0x000030)
class UShape : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.BoxShape
/// Size: 0x0018 (0x000030 - 0x000048)
class UBoxShape : public UShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FBoxShapeData)                             BoxShape                                                    OFFSET(getStruct<T>, {0x30, 24, 0, 0})
};

/// Class /Script/Indiana.SphereShape
/// Size: 0x0010 (0x000030 - 0x000040)
class USphereShape : public UShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FSphereShapeData)                          SphereShape                                                 OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.CapsuleShape
/// Size: 0x0010 (0x000030 - 0x000040)
class UCapsuleShape : public UShape
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FCapsuleShapeData)                         CapsuleShape                                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/Indiana.SharedWeaponVisuals
/// Size: 0x0000 (0x000200 - 0x000200)
class USharedWeaponVisuals : public UWeaponVisuals
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
};

/// Class /Script/Indiana.ShipDoor
/// Size: 0x0060 (0x0002B8 - 0x000318)
class AShipDoor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UClass*)                             CompanionSelectionClass                                     OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      TravelSound                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UBeaconComponent*)                   BeaconComponent                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               ObsidianID                                                  OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.ShipFastTravelPointComponent
/// Size: 0x0008 (0x000268 - 0x000270)
class UShipFastTravelPointComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/Indiana.ShipFastTravelPoint
/// Size: 0x0008 (0x0002E8 - 0x0002F0)
class AShipFastTravelPoint : public ABasicMapFloorTrackedActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(class UShipDestinationData*)               ShipDestinationData                                         OFFSET(get<T>, {0x2E8, 8, 0, 0})
};

/// Class /Script/Indiana.ShipLocation
/// Size: 0x0078 (0x0002B8 - 0x000330)
class AShipLocation : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UBeaconComponent*)                   BeaconComponent                                             OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UIndianaNavModifierComponent*)       NavModifierComponent                                        OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               ObsidianID                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTravelTriggerComponent*)            ShipDestinationTravelTrigger                                OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      TravelSound                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UShipDestinationData*)               ShipLocationData                                            OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.ShipLocation.ShipLocationDeactivated
	// void ShipLocationDeactivated();                                                                                          // [0x1804b40] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ShipLocation.ShipLocationActivated
	// void ShipLocationActivated();                                                                                            // [0x18c04b0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.ShipLocation.OnShipLocationChanged
	// void OnShipLocationChanged(class UShipDestinationData* NewLocation);                                                     // [0x18bfed0] Final|Native|Protected 
};

/// Class /Script/Indiana.ShipTerminal
/// Size: 0x0078 (0x0002B8 - 0x000330)
class AShipTerminal : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UClass*)                             SystemMapClass                                              OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UMusicTrackData*)                    SystemMapAmbientMusic                                       OFFSET(get<T>, {0x2F8, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSystemMapClosed                                           OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UBeaconComponent*)                   BeaconComponent                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               ObsidianID                                                  OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class USystemMapData*)                     SystemMapData                                               OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Struct /Script/Indiana.MapShipDestinations
/// Size: 0x0050 (0x000000 - 0x000050)
class FMapShipDestinations : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<FGuid, class UShipDestinationData*>)  Destinations                                                OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Class /Script/Indiana.ShipTravelData
/// Size: 0x0058 (0x000038 - 0x000090)
class UShipTravelData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UMapInformation*)                    ShipMapInformation                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TMap<TWeakObjectPtr<UWorld*>, FMapShipDestinations>) ShipDestinations                                  OFFSET(get<T>, {0x40, 80, 0, 0})
};

/// Class /Script/Indiana.ShipTravelDataCollection
/// Size: 0x0070 (0x000038 - 0x0000A8)
class UShipTravelDataCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TArray<class UShipTravelData*>)            Sources                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TMap<TWeakObjectPtr<UWorld*>, FMapShipDestinations>) ShipDestinations                                  OFFSET(get<T>, {0x48, 80, 0, 0})
};

/// Class /Script/Indiana.SkeletalMeshModVisual
/// Size: 0x0030 (0x0000C0 - 0x0000F0)
class USkeletalMeshModVisual : public UMeshModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0xC0, 8, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
};

/// Class /Script/Indiana.SkillAdjustment
/// Size: 0x0040 (0x000300 - 0x000340)
class USkillAdjustment : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class UImage*)                             AdjustmentTypeImage                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AdjustmentValue                                             OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AdjustmentDescription                                       OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.SkillButtonEntryWidget
/// Size: 0x0020 (0x000470 - 0x000490)
class USkillButtonEntryWidget : public UStatsSkillButtonEntryBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(class UImage*)                             SkillUnlockedAnim                                           OFFSET(get<T>, {0x488, 8, 0, 0})
};

/// Class /Script/Indiana.SkillGroupDetailWidget
/// Size: 0x0040 (0x000278 - 0x0002B8)
class USkillGroupDetailWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	CMember(class UImage*)                             TwoSkillsBackground                                         OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UImage*)                             ThreeSkillsBackground                                       OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UCategoryButtonEntryWidget*)         SkillGroupCategory                                          OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UVerticalBox*)                       ChildSkills                                                 OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UClass*)                             SkillEntryClass                                             OFFSET(get<T>, {0x298, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SkillGroupDetailWidget.OnSkillSelected
	// void OnSkillSelected();                                                                                                  // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.SkillStatusEffect
/// Size: 0x0078 (0x000188 - 0x000200)
class USkillStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(ESkill)                                    SkillToCheck                                                OFFSET(get<T>, {0x188, 1, 0, 0})
	CMember(TMap<int32_t, class UClass*>)              SkillEffects                                                OFFSET(get<T>, {0x190, 80, 0, 0})
	DMember(bool)                                      bAllThatPass                                                OFFSET(get<bool>, {0x1E0, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.SkillStatusEffect.OnSpawnedEffectCleared
	// void OnSpawnedEffectCleared(class UStatusEffect* SpawnedEffect);                                                         // [0x18bfff0] Final|Native|Protected 
};

/// Class /Script/Indiana.SkillSummaryEntryWidget
/// Size: 0x0020 (0x000278 - 0x000298)
class USkillSummaryEntryWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SkillNameText                                               OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SkillLevelText                                              OFFSET(get<T>, {0x288, 8, 0, 0})
};

/// Class /Script/Indiana.SkillUnlockEntryWidget
/// Size: 0x0050 (0x000300 - 0x000350)
class USkillUnlockEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class USkillUnlockPanelMeter*)             Meter                                                       OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             SkillUnlockedImage                                          OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             SkillFadedLine                                              OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             SkillUnlockAnim                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             HalfMeterLine                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SkillUnlockTextBlock                                        OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.SkillUnlockPanelMeter
/// Size: 0x0020 (0x000300 - 0x000320)
class USkillUnlockPanelMeter : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UImage*)                             MeterBase                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             MeterOld                                                    OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             MeterNew                                                    OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.SkillUnlockPanelWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class USkillUnlockPanelWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class USkillUnlockPanelMeter*)             InitialMeter                                                OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UOverlay*)                           SkillsOverlay                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UVerticalBox*)                       SkillUnlocksVerticalBox                                     OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/Indiana.SkinTone
/// Size: 0x0008 (0x000038 - 0x000040)
class USkinTone : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     SkinTemp                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     SkinTone                                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Struct /Script/Indiana.IndianaSliderStyle
/// Size: 0x0388 (0x000008 - 0x000390)
class FIndianaSliderStyle : public FSlateWidgetStyle
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	SMember(FSlateBrushContainer)                      NormalBarBrush                                              OFFSET(getStruct<T>, {0x8, 144, 0, 0})
	SMember(FSlateBrushContainer)                      FocusedBarBrush                                             OFFSET(getStruct<T>, {0x98, 144, 0, 0})
	SMember(FSlateBrushContainer)                      DisabledBarBrush                                            OFFSET(getStruct<T>, {0x128, 144, 0, 0})
	SMember(FSlateBrushContainer)                      NormalThumbBrush                                            OFFSET(getStruct<T>, {0x1B8, 144, 0, 0})
	SMember(FSlateBrushContainer)                      FocusedThumbBrush                                           OFFSET(getStruct<T>, {0x248, 144, 0, 0})
	SMember(FSlateBrushContainer)                      DisabledThumbBrush                                          OFFSET(getStruct<T>, {0x2D8, 144, 0, 0})
	DMember(float)                                     BarThickness                                                OFFSET(get<float>, {0x368, 4, 0, 0})
	CMember(class UAkAudioEvent*)                      HoveredSoundOverride                                        OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      FocusedSoundOverride                                        OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      StepSoundOverride                                           OFFSET(get<T>, {0x380, 8, 0, 0})
	DMember(float)                                     SliderIndentation                                           OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(bool)                                      bUseSliderIndentation                                       OFFSET(get<bool>, {0x38C, 1, 0, 0})
};

/// Class /Script/Indiana.SliderBase
/// Size: 0x0458 (0x000120 - 0x000578)
class USliderBase : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1400;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x120, 4, 0, 0})
	SMember(FDelegateProperty)                         ValueDelegate                                               OFFSET(getStruct<T>, {0x124, 16, 0, 0})
	CMember(TEnumAsByte<EOrientation>)                 Orientation                                                 OFFSET(get<T>, {0x134, 1, 0, 0})
	DMember(bool)                                      IndentHandle                                                OFFSET(get<bool>, {0x135, 1, 0, 0})
	DMember(bool)                                      Locked                                                      OFFSET(get<bool>, {0x136, 1, 0, 0})
	DMember(float)                                     StepSize                                                    OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(bool)                                      IsFocusable                                                 OFFSET(get<bool>, {0x13C, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnValueChanged                                              OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHovered                                                   OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUnhovered                                                 OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFocusReceived                                             OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFocusLost                                                 OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	SMember(FIndianaSliderStyle)                       WidgetStyle                                                 OFFSET(getStruct<T>, {0x190, 912, 0, 0})


	/// Functions
	// Function /Script/Indiana.SliderBase.SetValue
	// void SetValue(float InValue);                                                                                            // [0x18c0430] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.SetStepSize
	// void SetStepSize(float InValue);                                                                                         // [0x18c03b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.SetLocked
	// void SetLocked(bool InValue);                                                                                            // [0x18c0190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.SetIndentHandle
	// void SetIndentHandle(bool InValue);                                                                                      // [0x18c0100] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.SetAndCommitValue
	// void SetAndCommitValue(float InValue);                                                                                   // [0x18c0080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.ModifySliderValue
	// void ModifySliderValue(float InValue);                                                                                   // [0x18bf970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SliderBase.GetValue
	// float GetValue();                                                                                                        // [0x18bf940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaSliderWidgetStyle
/// Size: 0x0390 (0x000038 - 0x0003C8)
class UIndianaSliderWidgetStyle : public USlateWidgetStyleContainerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 968;

public:
	SMember(FIndianaSliderStyle)                       SliderStyle                                                 OFFSET(getStruct<T>, {0x38, 912, 0, 0})
};

/// Class /Script/Indiana.SlideshowImageSet
/// Size: 0x0050 (0x000038 - 0x000088)
class USlideshowImageSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<FString, class UTexture2D*>)          TextureMapping                                              OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/Indiana.SlideshowWidget
/// Size: 0x00C8 (0x000360 - 0x000428)
class USlideshowWidget : public UConversationBaseWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1064;

public:
	DMember(float)                                     ActiveInputLabelTime                                        OFFSET(get<float>, {0x360, 4, 0, 0})
	CMember(class UTextBlockBase*)                     BodyText                                                    OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UOverlay*)                           MainOverlay                                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UBorder*)                            BodyBorder                                                  OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UImage*)                             PrimaryImage                                                OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InputLabelBack                                              OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InputLabelForward                                           OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MissingImageTextBlock                                       OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(TMap<FString, class UTexture2D*>)          Textures                                                    OFFSET(get<T>, {0x3A0, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.SlideshowWidget.SetSlideshowImagesAsset
	// void SetSlideshowImagesAsset(class USlideshowImageSet* ImageSet);                                                        // [0x18c0320] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SlideshowWidget.SetSlideshowImageKey
	// void SetSlideshowImageKey(FString ImageKey);                                                                             // [0x18c0220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SlideshowWidget.OnSlideshowEnd
	// void OnSlideshowEnd(class UConversationInstance* Instance);                                                              // [0x18bff60] Final|Native|Protected 
	// Function /Script/Indiana.SlideshowWidget.OnCinematicSubtitleSettingChanged
	// void OnCinematicSubtitleSettingChanged(bool bVisibleIn);                                                                 // [0x18bfe40] Final|Native|Protected 
};

/// Class /Script/Indiana.SpawnActorBehaviorStateInfo
/// Size: 0x0018 (0x000178 - 0x000190)
class USpawnActorBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
};

/// Class /Script/Indiana.SpawnActorRequestData
/// Size: 0x0018 (0x000080 - 0x000098)
class USpawnActorRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FGameplayTag)                              AnimationTag                                                OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	CMember(class UClass*)                             ActorToSpawn                                                OFFSET(get<T>, {0x88, 8, 0, 0})
	DMember(int32_t)                                   SpawnAmount                                                 OFFSET(get<int32_t>, {0x90, 4, 0, 0})
};

/// Class /Script/Indiana.SpawnActorEventEffect
/// Size: 0x0010 (0x000030 - 0x000040)
class USpawnActorEventEffect : public UEventEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UClass*)                             SpawnActorClass                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(ESpawnActorEventLocationSetting)           LocationSetting                                             OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(ESpawnActorEventRotationSetting)           RotationSetting                                             OFFSET(get<T>, {0x39, 1, 0, 0})
};

/// Class /Script/Indiana.SpawnActorStatusEffect
/// Size: 0x0040 (0x000188 - 0x0001C8)
class USpawnActorStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(class UClass*)                             CharacterClass                                              OFFSET(get<T>, {0x188, 8, 0, 0})
	DMember(int32_t)                                   NumCharactersToSpawn                                        OFFSET(get<int32_t>, {0x190, 4, 0, 0})
	SMember(FVector)                                   CharacterScale                                              OFFSET(getStruct<T>, {0x194, 12, 0, 0})
	SMember(FVector)                                   SpawnLocationOffset                                         OFFSET(getStruct<T>, {0x1A0, 12, 0, 0})
	CMember(class UEQSRequest_IndianaBase*)            EQSRequest                                                  OFFSET(get<T>, {0x1B0, 8, 0, 0})
};

/// Class /Script/Indiana.SpawnHazardStatusEffect
/// Size: 0x0050 (0x000188 - 0x0001D8)
class USpawnHazardStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	CMember(class UClass*)                             HazardClass                                                 OFFSET(get<T>, {0x188, 8, 0, 0})
	DMember(float)                                     DistanceBetweenHazards                                      OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(int32_t)                                   MaxHazards                                                  OFFSET(get<int32_t>, {0x194, 4, 0, 0})
	SMember(FVector)                                   HazardScale                                                 OFFSET(getStruct<T>, {0x198, 12, 0, 0})
};

/// Class /Script/Indiana.SpawnSource
/// Size: 0x0000 (0x000030 - 0x000030)
class USpawnSource : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.TrackedSpawn
/// Size: 0x0000 (0x000030 - 0x000030)
class UTrackedSpawn : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.SpawnNodeComponent
/// Size: 0x0008 (0x000268 - 0x000270)
class USpawnNodeComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/Indiana.SpeakerGameDataReference
/// Size: 0x0000 (0x000050 - 0x000050)
class USpeakerGameDataReference : public UGameDataReference
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:


	/// Functions
	// Function /Script/Indiana.SpeakerGameDataReference.GetWwiseChatterVoiceOverride
	// FString GetWwiseChatterVoiceOverride();                                                                                  // [0x18c4b30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetWwiseChatterEventOverride
	// FString GetWwiseChatterEventOverride();                                                                                  // [0x18c4ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetInGameNameWithGender
	// FString GetInGameNameWithGender(EGender CharacterGender);                                                                // [0x18c4a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetInGameNameID
	// int32_t GetInGameNameID();                                                                                               // [0x18c49e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetInGameName
	// FString GetInGameName();                                                                                                 // [0x18c49a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetGender
	// EGender GetGender();                                                                                                     // [0x18c4970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetChatterPrefix
	// FString GetChatterPrefix();                                                                                              // [0x18c48f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetChatterFile
	// FGuid GetChatterFile();                                                                                                  // [0x18c48b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.SpeakerGameDataReference.GetCharacterGrouping
	// ECharacterGrouping GetCharacterGrouping();                                                                               // [0x18c4880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.AreaOfEffect
/// Size: 0x0060 (0x000000 - 0x000060)
class FAreaOfEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FTransformedShape)                         CollisionShapeInfo                                          OFFSET(getStruct<T>, {0x0, 64, 0, 0})
	CMember(class URpgStat*)                           CollisionSizeStat                                           OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(ESpellEffectTarget)                        SourceType                                                  OFFSET(get<T>, {0x48, 1, 0, 0})
	DMember(bool)                                      bIgnoreSources                                              OFFSET(get<bool>, {0x49, 1, 0, 0})
	DMember(bool)                                      bOnlyTargetPlayerHostiles                                   OFFSET(get<bool>, {0x4A, 1, 0, 0})
	DMember(bool)                                      bPenetratesWalls                                            OFFSET(get<bool>, {0x4B, 1, 0, 0})
	SMember(FName)                                     CollisionSocket                                             OFFSET(getStruct<T>, {0x4C, 8, 0, 0})
	CMember(EMeshTarget)                               MeshTarget                                                  OFFSET(get<T>, {0x54, 1, 0, 0})
};

/// Struct /Script/Indiana.TargetCone
/// Size: 0x0030 (0x000000 - 0x000030)
class FTargetCone : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class URpgStat*)                           CollisionSizeStat                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     ConeHalfAngle                                               OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(EConeAxis)                                 ConeAxis                                                    OFFSET(get<T>, {0xC, 1, 0, 0})
	DMember(bool)                                      bInvertAxis                                                 OFFSET(get<bool>, {0xD, 1, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector)                                   SocketOffset                                                OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	CMember(ESpellEffectTarget)                        SourceType                                                  OFFSET(get<T>, {0x20, 1, 0, 0})
	DMember(bool)                                      bPenetratesWalls                                            OFFSET(get<bool>, {0x21, 1, 0, 0})
	SMember(FName)                                     CollisionSocket                                             OFFSET(getStruct<T>, {0x24, 8, 0, 0})
	CMember(EMeshTarget)                               MeshTarget                                                  OFFSET(get<T>, {0x2C, 1, 0, 0})
};

/// Struct /Script/Indiana.TargetEffect
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FTargetEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(ESpellEffectTarget)                        SpellEffectTarget                                           OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TArray<class UStatusEffect*>)              StatusEffects                                               OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<class USpellConditional*>)          EffectTargetConditionals                                    OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(ESpellEffectDirectionType)                 EffectDirectionType                                         OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(float)                                     RotationAngle                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(bool)                                      bRandomlyNegateRotationAngle                                OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bInverseDirection                                           OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      bForceTwoDimensionalDirection                               OFFSET(get<bool>, {0x32, 1, 0, 0})
	SMember(FAreaOfEffect)                             AreaOfEffect                                                OFFSET(getStruct<T>, {0x40, 96, 0, 0})
	SMember(FTargetCone)                               TargetCone                                                  OFFSET(getStruct<T>, {0xA0, 48, 0, 0})
};

/// Struct /Script/Indiana.SpellEffectByEvent
/// Size: 0x0028 (0x000000 - 0x000028)
class FSpellEffectByEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UEventListener*)                     ApplyEvent                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UEventListener*)                     RemoveEvent                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<FTargetEffect>)                     TargetEffects                                               OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bRemoveSingleStack                                          OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/Indiana.Spell
/// Size: 0x0160 (0x000030 - 0x000190)
class USpell : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FLocString)                                DisplayName                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FLocString)                                DisplayDescription                                          OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bCheckMiscID                                                OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(float)                                     Cooldown                                                    OFFSET(get<float>, {0x44, 4, 0, 0})
	CMember(class URpgStat*)                           CooldownRpgStat                                             OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(float)                                     EventCooldown                                               OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(class URpgStat*)                           EventCooldownRpgStat                                        OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<class USpellConditional*>)          TargetConditionals                                          OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FTargetEffect)                             OnCastEffects                                               OFFSET(getStruct<T>, {0x70, 208, 0, 0})
	CMember(TArray<FTargetEffect>)                     OnCastEffectsArray                                          OFFSET(get<T>, {0x140, 16, 0, 0})
	SMember(FSpellEffectByEvent)                       OnEventEffects                                              OFFSET(getStruct<T>, {0x150, 40, 0, 0})
	CMember(class URpgStat*)                           ApplyChanceRpgStat                                          OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class URpgStat*)                           ReceiveChanceRpgStat                                        OFFSET(get<T>, {0x180, 8, 0, 0})
	DMember(bool)                                      bOrientTowardsFirstExplicitTarget                           OFFSET(get<bool>, {0x188, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional
/// Size: 0x0008 (0x000030 - 0x000038)
class USpellConditional : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bCheckCaster                                                OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      bNot                                                        OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_CreatureType
/// Size: 0x0028 (0x000038 - 0x000060)
class USpellConditional_CreatureType : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FGameplayTagContainer)                     CreatureTypes                                               OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	DMember(bool)                                      bNegateCheck                                                OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_Health
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_Health : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      bUsePercentage                                              OFFSET(get<bool>, {0x3C, 1, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x3D, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_Encumbrance
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_Encumbrance : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      bUsePercentage                                              OFFSET(get<bool>, {0x3C, 1, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x3D, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_MeleeWeaponCategory
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_MeleeWeaponCategory : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGameplayTag)                              WeaponCategory                                              OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_NumCompanions
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_NumCompanions : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   NumCompanions                                               OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x3C, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_RandomChance
/// Size: 0x0010 (0x000038 - 0x000048)
class USpellConditional_RandomChance : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     Chance                                                      OFFSET(get<float>, {0x38, 4, 0, 0})
	CMember(class URpgStat*)                           ChanceStat                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_MinSkill
/// Size: 0x0010 (0x000038 - 0x000048)
class USpellConditional_MinSkill : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x38, 1, 0, 0})
	DMember(int32_t)                                   MinSkill                                                    OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	CMember(class URpgStat*)                           MinSkillStat                                                OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_HasStatusEffect
/// Size: 0x0010 (0x000038 - 0x000048)
class USpellConditional_HasStatusEffect : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(int32_t)                                   NumStacks                                                   OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x44, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_HasSpell
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_HasSpell : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UClass*)                             CastSpell                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_IsPlayer
/// Size: 0x0000 (0x000038 - 0x000038)
class USpellConditional_IsPlayer : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.SpellConditional_IsFacingCaster
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_IsFacingCaster : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     ValidAngle                                                  OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_IsDifficulty
/// Size: 0x0010 (0x000038 - 0x000048)
class USpellConditional_IsDifficulty : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<EGameDifficulty>)                   AllowedDifficulties                                         OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_HostileStatusEffect
/// Size: 0x0000 (0x000038 - 0x000038)
class USpellConditional_HostileStatusEffect : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/Indiana.SpellConditional_TTDMeter
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_TTDMeter : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x38, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x3C, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_IsInCombatWithPlayer
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_IsInCombatWithPlayer : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bNegateCheck                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_IsPacifist
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_IsPacifist : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bNegateCheck                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_IsHostileToPlayer
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_IsHostileToPlayer : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bNegateCheck                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_IsHostileToCaster
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_IsHostileToCaster : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bNegateCheck                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_IsOnPlayerShip
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_IsOnPlayerShip : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bNegateCheck                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_IsCompanion
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_IsCompanion : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bNegateCheck                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_RosterSize
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_RosterSize : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x3C, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_FlawCount
/// Size: 0x0008 (0x000038 - 0x000040)
class USpellConditional_FlawCount : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x3C, 1, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_IsAmmoTypeEquipped
/// Size: 0x0010 (0x000038 - 0x000048)
class USpellConditional_IsAmmoTypeEquipped : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bNegateCheck                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
	CMember(class UClass*)                             AmmoClass                                                   OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.SpellConditional_CheckGlobalVariable
/// Size: 0x0018 (0x000038 - 0x000050)
class USpellConditional_CheckGlobalVariable : public USpellConditional
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FString)                                   GlobalVariable                                              OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	CMember(ComparisonOperator)                        Operator                                                    OFFSET(get<T>, {0x4C, 1, 0, 0})
};

/// Struct /Script/Indiana.SpellInstance
/// Size: 0x0058 (0x000000 - 0x000058)
class FSpellInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UEventListener*)                     ApplyEvent                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UEventListener*)                     RemoveEvent                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Indiana.SpellManagerComponent
/// Size: 0x0160 (0x0000E0 - 0x000240)
class USpellManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(TMap<class UClass*, FSpellInstance>)       PersistentSpells                                            OFFSET(get<T>, {0xF8, 80, 0, 0})
	SMember(FSpellSet)                                 PassiveSpellSet                                             OFFSET(getStruct<T>, {0x1A0, 80, 0, 0})
};

/// Class /Script/Indiana.SpellRemoveStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class USpellRemoveStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x188, 8, 0, 0})
};

/// Class /Script/Indiana.SpellTargetBehaviorStateInfo
/// Size: 0x0000 (0x000178 - 0x000178)
class USpellTargetBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
};

/// Class /Script/Indiana.SpellTargetRequestData
/// Size: 0x0018 (0x000080 - 0x000098)
class USpellTargetRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(float)                                     MinMoveDistance                                             OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     MaxMoveDistance                                             OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     MaxCastDistance                                             OFFSET(get<float>, {0x88, 4, 0, 0})
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Class /Script/Indiana.SpreadManagerComponent
/// Size: 0x0068 (0x0000E0 - 0x000148)
class USpreadManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	DMember(float)                                     CrouchingModifier                                           OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     InAirModifier                                               OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     FineAimModifier                                             OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     NPCModifier                                                 OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     SpreadSmoothReturnTime                                      OFFSET(get<float>, {0x100, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.SpreadManagerComponent.OnCombatStateChange
	// void OnCombatStateChange(bool bInCombat, bool bRestoring);                                                               // [0x18c4c30] Final|Native|Private 
	// Function /Script/Indiana.SpreadManagerComponent.OnAttack
	// void OnAttack(float DurationScalar);                                                                                     // [0x18c4bb0] Final|Native|Private 
};

/// Class /Script/Indiana.StackSplittingWidget
/// Size: 0x01C0 (0x000308 - 0x0004C8)
class UStackSplittingWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1224;

public:
	CMember(class UTextBlockBase*)                     TextBlock                                                   OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SubTextBlock                                                OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ValueTextBlock                                              OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UTextBlockBase*)                     FullStackValue                                              OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UButtonBase*)                        ConfirmButton                                               OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UButtonBase*)                        CancelButton                                                OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  ConfirmLabel                                                OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  BackLabel                                                   OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UButtonBase*)                        MinButton                                                   OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UButtonBase*)                        MaxButton                                                   OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InputLabelMin                                               OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  InputLabelMax                                               OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class USizeBox*)                           BackingBotSizeBox                                           OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UVerticalBox*)                       ContentVerticalBox                                          OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UHorizontalBox*)                     KeyboardInputBox                                            OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UHorizontalBox*)                     GamepadInputBox                                             OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UWaitTimeSliderWidget*)              ValueSlider                                                 OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class USizeBox*)                           ContentSizeBox                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UUserWidget*)                        BackgroundWidget                                            OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(TMap<EStackSplitStyle, FVector2D>)         StyleMinimums                                               OFFSET(get<T>, {0x3F8, 80, 0, 0})
	CMember(TMap<EStackSplitStyle, FVector2D>)         StyleMaximums                                               OFFSET(get<T>, {0x448, 80, 0, 0})
	DMember(float)                                     ContentVerticalPadding                                      OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(int32_t)                                   BackingMaterialSize                                         OFFSET(get<int32_t>, {0x49C, 4, 0, 0})
	DMember(int32_t)                                   BackingTopSize                                              OFFSET(get<int32_t>, {0x4A0, 4, 0, 0})
	CMember(class UItem*)                              ItemToSplit                                                 OFFSET(get<T>, {0x4A8, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.StackSplittingWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StackSplittingWidget.OnStackSplitMin
	// void OnStackSplitMin();                                                                                                  // [0x18c4e70] Final|Native|Protected 
	// Function /Script/Indiana.StackSplittingWidget.OnStackSplitMax
	// void OnStackSplitMax();                                                                                                  // [0x18c4e50] Final|Native|Protected 
	// Function /Script/Indiana.StackSplittingWidget.OnSliderValueChanged
	// void OnSliderValueChanged(FSliderEvent& Event);                                                                          // [0x18c4d40] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.StackSplittingWidget.OnInputConfirm
	// void OnInputConfirm();                                                                                                   // [0x18c4d20] Final|Native|Protected 
	// Function /Script/Indiana.StackSplittingWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18c4d00] Final|Native|Protected 
};

/// Class /Script/Indiana.StageItem
/// Size: 0x0018 (0x000390 - 0x0003A8)
class AStageItem : public AItemVisualizer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
};

/// Class /Script/Indiana.StaminaComponent
/// Size: 0x0028 (0x0000E0 - 0x000108)
class UStaminaComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     RegenDelay                                                  OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     RegenRate                                                   OFFSET(get<float>, {0xE8, 4, 0, 0})
	CMember(class UAkAudioEvent*)                      OutOfStaminaEvent                                           OFFSET(get<T>, {0xF0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.StaminaComponent.StaminaReplenish
	// void StaminaReplenish(float Amount);                                                                                     // [0x18c8930] Final|Exec|Native|Public 
	// Function /Script/Indiana.StaminaComponent.StaminaConsume
	// void StaminaConsume(float Amount);                                                                                       // [0x18c88b0] Final|Exec|Native|Public 
	// Function /Script/Indiana.StaminaComponent.OnCauseDamage
	// void OnCauseDamage(FCauseDamageInfo& CauseDamageInfo);                                                                   // [0x18c83a0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.StaminaComponent.GetValue
	// float GetValue();                                                                                                        // [0x18c8340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.StaminaComponent.GetNormalizedValue
	// float GetNormalizedValue();                                                                                              // [0x18c82c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.StaminaComponent.GetMaxValue
	// float GetMaxValue();                                                                                                     // [0x18c8290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.StandardAmmoPool
/// Size: 0x0038 (0x000080 - 0x0000B8)
class UStandardAmmoPool : public UAmmoPoolBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   PoolSize                                                    OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	CMember(EAmmoType)                                 AmmoType                                                    OFFSET(get<T>, {0x84, 1, 0, 0})
	SMember(FGameplayTag)                              AmmoTypeTag                                                 OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	CMember(class UClass*)                             DefaultAmmoClass                                            OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UAmmo*)                              CurrentAmmo                                                 OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UClass*)                             PendingAmmoClass                                            OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UClass*)                             LoadingAmmoClass                                            OFFSET(get<T>, {0xA8, 8, 0, 0})
};

/// Class /Script/Indiana.StasisLogicDataAsset
/// Size: 0x0090 (0x000038 - 0x0000C8)
class UStasisLogicDataAsset : public UStasisLogicBaseDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FString)                                   Comment                                                     OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bAllowNonStasisEvenIfCompanionRecruited                     OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      bInvertStasisConditions                                     OFFSET(get<bool>, {0x49, 1, 0, 0})
	SMember(FLogicalGroupedExpression)                 StasisConditions                                            OFFSET(getStruct<T>, {0x50, 120, 0, 0})
};

/// Class /Script/Indiana.StaticMeshModVisual
/// Size: 0x0030 (0x0000C0 - 0x0000F0)
class UStaticMeshModVisual : public UMeshModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TWeakObjectPtr<class UStaticMesh*>)        Mesh                                                        OFFSET(get<T>, {0xC0, 8, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
};

/// Class /Script/Indiana.StatModifierStatusEffect
/// Size: 0x00B8 (0x000188 - 0x000240)
class UStatModifierStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FStatModifierDescription)                  StatModifier                                                OFFSET(getStruct<T>, {0x198, 24, 0, 0})
	DMember(bool)                                      bReapplyOnSkillChange                                       OFFSET(get<bool>, {0x1B0, 1, 0, 0})
	DMember(bool)                                      bUseSkillScalarCurve                                        OFFSET(get<bool>, {0x1B1, 1, 0, 0})
	SMember(FRuntimeFloatCurve)                        SkillScalarCurve                                            OFFSET(getStruct<T>, {0x1B8, 136, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatModifierStatusEffect.OnSkillUpdated
	// void OnSkillUpdated(ESkill UpdatedSkill, int32_t NewValue);                                                              // [0x18c8570] Final|Native|Protected 
};

/// Class /Script/Indiana.StatsFlawSummaryWidget
/// Size: 0x0010 (0x000300 - 0x000310)
class UStatsFlawSummaryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UVerticalBox*)                       VerticalBox                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UClass*)                             EntryClass                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.StatsPerksPageWidget
/// Size: 0x00E8 (0x000300 - 0x0003E8)
class UStatsPerksPageWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	CMember(TArray<float>)                             TierHeights                                                 OFFSET(get<T>, {0x348, 16, 0, 0})
	CMember(TArray<class UClass*>)                     PerksIgnoringArrowAdjustment                                OFFSET(get<T>, {0x358, 16, 0, 0})
	CMember(class UCharacterDescriptionPanel*)         DescriptionPanel                                            OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PointsAvailableTextBlock                                    OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkTotalTextBlock                                          OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkTotalValueTextBlock                                     OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UPerksListWidget*)                   PlayerPerkList                                              OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UImage*)                             TierBottomImage                                             OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class USizeBox*)                           DynamicSizeBox                                              OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x3A8, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatsPerksPageWidget.OnRevertAllocationsClicked
	// void OnRevertAllocationsClicked();                                                                                       // [0x18c8550] Final|Native|Protected 
	// Function /Script/Indiana.StatsPerksPageWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18c8440] Final|Native|Protected 
	// Function /Script/Indiana.StatsPerksPageWidget.OnDeallocation
	// void OnDeallocation();                                                                                                   // [0x18b9ba0] Final|Native|Protected 
	// Function /Script/Indiana.StatsPerksPageWidget.OnAllocation
	// void OnAllocation();                                                                                                     // [0x18b9ba0] Final|Native|Protected 
	// Function /Script/Indiana.StatsPerksPageWidget.OnAcceptAllocations
	// void OnAcceptAllocations();                                                                                              // [0x18c8360] Final|Native|Protected 
};

/// Class /Script/Indiana.StatsPerkSummaryWidget
/// Size: 0x0028 (0x000300 - 0x000328)
class UStatsPerkSummaryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(class UVerticalBox*)                       VerticalBox                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UClass*)                             EntryClass                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.StatsSkillsPageWidget
/// Size: 0x0070 (0x000430 - 0x0004A0)
class UStatsSkillsPageWidget : public UCharacterSkillsBasePage
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(class UTextBlockBase*)                     SkillsHeaderTextBlock                                       OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SkillPointsTitle                                            OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UHorizontalBox*)                     SkillPointDisplayHorizontalBox                              OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x480, 8, 0, 0})
	DMember(float)                                     GamepadZoomMultiplier                                       OFFSET(get<float>, {0x488, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatsSkillsPageWidget.OnSkillUpdated
	// void OnSkillUpdated(ESkill Skill, int32_t Value);                                                                        // [0x18c8640] Final|Native|Protected 
	// Function /Script/Indiana.StatsSkillsPageWidget.OnResetAllAllocations
	// void OnResetAllAllocations();                                                                                            // [0x18c8530] Final|Native|Public  
	// Function /Script/Indiana.StatsSkillsPageWidget.OnPlayerLevelUp
	// void OnPlayerLevelUp(int32_t NewLevel);                                                                                  // [0x18c84a0] Final|Native|Protected 
	// Function /Script/Indiana.StatsSkillsPageWidget.OnLedgerToggle
	// void OnLedgerToggle();                                                                                                   // [0x18c8480] Final|Native|Protected 
	// Function /Script/Indiana.StatsSkillsPageWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18c8460] Final|Native|Protected 
	// Function /Script/Indiana.StatsSkillsPageWidget.OnAllocation
	// void OnAllocation();                                                                                                     // [0x18b9ba0] Final|Native|Public  
};

/// Class /Script/Indiana.StatsSkillSummaryWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class UStatsSkillSummaryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UVerticalBox*)                       SkillVerticalBox                                            OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(TArray<ESkill>)                            SkillDisplayOrder                                           OFFSET(get<T>, {0x308, 16, 0, 0})
	CMember(class UClass*)                             SkillEntryClass                                             OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.StatsSummaryPageWidget
/// Size: 0x0040 (0x000300 - 0x000340)
class UStatsSummaryPageWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	DMember(float)                                     GamepadScrollMultiplier                                     OFFSET(get<float>, {0x300, 4, 0, 0})
	CMember(class UAttributeSummaryWidget*)            AttributeSummary                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UAptitudeSummaryWidget*)             AptitudeSummary                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UCharacterDescriptionPanel*)         DescriptionPanel                                            OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.StatusEffectApplier
/// Size: 0x0018 (0x000030 - 0x000048)
class UStatusEffectApplier : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UStatusEffect*)                      OwnerFireEffect                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UStatusEffect*)                      OwnerHitTargetEffect                                        OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/Indiana.StatusEffectBarEntryWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class UStatusEffectBarEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UImage*)                             StatusEffectImage                                           OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UImage*)                             BulbImage                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	DMember(bool)                                      bAnimInProgress                                             OFFSET(get<bool>, {0x310, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatusEffectBarEntryWidget.ResetWidgetState
	// void ResetWidgetState(float DesiredRenderOpacity);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusEffectBarEntryWidget.OnAnimComplete
	// void OnAnimComplete();                                                                                                   // [0x18c8380] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.StatusEffectBarEntryWidget.AnimateOut
	// void AnimateOut();                                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusEffectBarEntryWidget.AnimateIn
	// void AnimateIn();                                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.StatusEffectBarWidget
/// Size: 0x0098 (0x000300 - 0x000398)
class UStatusEffectBarWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	CMember(class UStatusEffectBarEntryWidget*)        StatusEffectEntryOne                                        OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UStatusEffectBarEntryWidget*)        StatusEffectEntryTwo                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UStatusEffectBarEntryWidget*)        StatusEffectEntryThree                                      OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UStatusEffectBarEntryWidget*)        StatusEffectEntryFour                                       OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UStatusEffectBarEntryWidget*)        StatusEffectEntryFive                                       OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UStatusEffectBarEntryWidget*)        StatusEffectEntrySix                                        OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(float)                                     AnimationTime                                               OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(int32_t)                                   StatusBlockAnimDistance                                     OFFSET(get<int32_t>, {0x334, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatusEffectBarWidget.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);              // [0x18c87e0] Final|Native|Protected 
	// Function /Script/Indiana.StatusEffectBarWidget.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                // [0x18c8710] Final|Native|Protected 
};

/// Class /Script/Indiana.StatusEffectEntryWidget
/// Size: 0x0028 (0x000300 - 0x000328)
class UStatusEffectEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TimeRemainingTextBlock                                      OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             Icon                                                        OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.StatusEffectManagerComponent
/// Size: 0x0088 (0x0000E0 - 0x000168)
class UStatusEffectManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(TArray<class UStatusEffect*>)              StatusEffects                                               OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TArray<class UStatusEffect*>)              StatusEffectsToClear                                        OFFSET(get<T>, {0x100, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAddStatusEffect                                           OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRemoveStatusEffect                                        OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRestoredStatusEffect                                      OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	CMember(TArray<class UClass*>)                     StatusEffectImmunities                                      OFFSET(get<T>, {0x150, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatusEffectManagerComponent.RemoveStatusEffectsOfClass
	// void RemoveStatusEffectsOfClass(class UClass* Data);                                                                     // [0x18cc130] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventHostileStatusEffectsOnCompanions
	// void PreventHostileStatusEffectsOnCompanions(bool bPreventHostileStatusEffectsIn, bool bShouldClear);                    // [0x18cc060] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventHostileStatusEffectsNPC
	// void PreventHostileStatusEffectsNPC(bool bPreventHostileStatusEffectsIn, bool bShouldClear);                             // [0x18cbf90] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventHostileStatusEffects
	// void PreventHostileStatusEffects(bool bPreventHostileStatusEffectsIn, bool bShouldClear);                                // [0x18cbec0] Final|Exec|Native|Public 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventAllStatusEffectsOnCompanions
	// void PreventAllStatusEffectsOnCompanions(bool bPreventStatusEffectsIn, bool bShouldClear);                               // [0x18cbdf0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventAllStatusEffectsNPC
	// void PreventAllStatusEffectsNPC(bool bPreventStatusEffectsIn, bool bShouldClear);                                        // [0x18cbd20] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.PreventAllStatusEffects
	// void PreventAllStatusEffects(bool bPreventStatusEffectsIn, bool bShouldClear);                                           // [0x18cbc50] Final|Exec|Native|Public 
	// Function /Script/Indiana.StatusEffectManagerComponent.OnRestoredStateOfBeing
	// void OnRestoredStateOfBeing(EStateOfBeing RestoredStateOfBeing);                                                         // [0x18cb9f0] Final|Native|Private 
	// Function /Script/Indiana.StatusEffectManagerComponent.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x18cb7c0] Final|Native|Private 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearStatusEffectOnCompanions
	// void ClearStatusEffectOnCompanions(FString Name);                                                                        // [0x18cb2f0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearStatusEffectNPC
	// void ClearStatusEffectNPC(FString Name);                                                                                 // [0x18cb240] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearStatusEffect
	// void ClearStatusEffect(FString Name);                                                                                    // [0x18cb190] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearAllStatusEffectsOnCompanions
	// void ClearAllStatusEffectsOnCompanions(bool bOnlyHostile);                                                               // [0x18cb100] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearAllStatusEffectsNPC
	// void ClearAllStatusEffectsNPC(bool bOnlyHostile);                                                                        // [0x18cb070] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.ClearAllStatusEffects
	// void ClearAllStatusEffects(bool bOnlyHostile);                                                                           // [0x18cafe0] Final|Exec|Native|Public 
	// Function /Script/Indiana.StatusEffectManagerComponent.BPAddEffect
	// class UStatusEffect* BPAddEffect(class UClass* Data, TScriptInterface<Class> Origin, FDynamicEffectProperties& AddProperties); // [0x18cae70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.StatusEffectManagerComponent.AddStatusEffectToCompanions
	// void AddStatusEffectToCompanions(FString Name);                                                                          // [0x18cadc0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.AddStatusEffectNPC
	// void AddStatusEffectNPC(FString Name);                                                                                   // [0x18cad10] Final|Exec|Native|Protected 
	// Function /Script/Indiana.StatusEffectManagerComponent.AddStatusEffect
	// void AddStatusEffect(FString Name);                                                                                      // [0x18cac60] Final|Exec|Native|Protected 
};

/// Class /Script/Indiana.StatusEffectOrigin
/// Size: 0x0000 (0x000030 - 0x000030)
class UStatusEffectOrigin : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.StatusEffectRemove
/// Size: 0x0008 (0x000188 - 0x000190)
class UStatusEffectRemove : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x188, 8, 0, 0})
};

/// Class /Script/Indiana.StatusEffectTagEntryWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class UStatusEffectTagEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UImage*)                             StatusEffectImage                                           OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StackQuantityTextBlock                                      OFFSET(get<T>, {0x308, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatusEffectTagEntryWidget.OnImageSet
	// void OnImageSet();                                                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.StatusEffectTagWidget
/// Size: 0x0068 (0x000300 - 0x000368)
class UStatusEffectTagWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UStatusEffectTagEntryWidget*)        StatusEffectEntryOne                                        OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UStatusEffectTagEntryWidget*)        StatusEffectEntryTwo                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UStatusEffectTagEntryWidget*)        StatusEffectEntryThree                                      OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UStatusEffectTagEntryWidget*)        StatusEffectEntryFour                                       OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UStatusEffectTagEntryWidget*)        StatusEffectEntryFive                                       OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatusEffectTagWidget.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);              // [0x18cbb60] Final|Native|Protected 
	// Function /Script/Indiana.StatusEffectTagWidget.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                // [0x18cba90] Final|Native|Protected 
};

/// Class /Script/Indiana.StatusEffectTarget
/// Size: 0x0000 (0x000030 - 0x000030)
class UStatusEffectTarget : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.StatusEffectUIVisualsData
/// Size: 0x0040 (0x000038 - 0x000078)
class UStatusEffectUIVisualsData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(ESymbolType)                               SymbolType                                                  OFFSET(get<T>, {0x38, 1, 0, 0})
	SMember(FLocString)                                StatusEffectName                                            OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
	SMember(FLocString)                                StatusEffectDescription                                     OFFSET(getStruct<T>, {0x44, 8, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UTexture2D*)                         IconLarge                                                   OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UTexture2D*)                         IconHUD                                                     OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<EDLCFlags>)                         DLCFlags                                                    OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/Indiana.StatusTagActor
/// Size: 0x0020 (0x0002C0 - 0x0002E0)
class AStatusTagActor : public APooledActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(class UStatusWidgetComponent*)             StatusTagComponent                                          OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x2C8, 8, 0, 0})
};

/// Struct /Script/Indiana.AlertStateImageSet
/// Size: 0x0010 (0x000000 - 0x000010)
class FAlertStateImageSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UTexture2D*)                         BackingTexture                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTexture2D*)                         FillTexture                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.AwarenessImageSet
/// Size: 0x0060 (0x000000 - 0x000060)
class FAwarenessImageSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FAlertStateImageSet)                       ImageSetUnaware                                             OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FAlertStateImageSet)                       ImageSetSuspicious                                          OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FAlertStateImageSet)                       ImageSetInvestigating                                       OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FAlertStateImageSet)                       ImageSetAlerted                                             OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FAlertStateImageSet)                       ImageSetDisguise                                            OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FAlertStateImageSet)                       ImageSetDisguiseAlert                                       OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/Indiana.AwarenessTalkImageSet
/// Size: 0x0020 (0x000000 - 0x000020)
class FAwarenessTalkImageSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UTexture2D*)                         DisguiseUnalerted                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTexture2D*)                         DisguiseAlerted                                             OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UTexture2D*)                         NonDisguiseUnalerted                                        OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UTexture2D*)                         NonDisguiseAlerted                                          OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Class /Script/Indiana.StatusTagAwarenessWidget
/// Size: 0x00C8 (0x000300 - 0x0003C8)
class UStatusTagAwarenessWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 968;

public:
	SMember(FName)                                     BackingTextureParamName                                     OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	SMember(FName)                                     FillTextureParamName                                        OFFSET(getStruct<T>, {0x308, 8, 0, 0})
	SMember(FName)                                     FillParamName                                               OFFSET(getStruct<T>, {0x310, 8, 0, 0})
	SMember(FAwarenessImageSet)                        AwarenessImageSet                                           OFFSET(getStruct<T>, {0x318, 96, 0, 0})
	SMember(FAwarenessTalkImageSet)                    AwarenessTalkImageSet                                       OFFSET(getStruct<T>, {0x378, 32, 0, 0})
	CMember(class UImage*)                             MaterialImage                                               OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UImage*)                             AlertImage                                                  OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UImage*)                             TalkImage                                                   OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           MaterialInstance                                            OFFSET(get<T>, {0x3B0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatusTagAwarenessWidget.SetTextures
	// void SetTextures(class UTexture2D* BackingTexture, class UTexture2D* FillTexture);                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusTagAwarenessWidget.SetTalkImage
	// void SetTalkImage(class UTexture2D* TalkTexture);                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.StatusTagGenerator
/// Size: 0x0060 (0x000030 - 0x000090)
class UStatusTagGenerator : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UActorPool*)                         StatusTagPool                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             StatusTagSubclass                                           OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.StatusTagWidget
/// Size: 0x0100 (0x000300 - 0x000400)
class UStatusTagWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     BarkTextBlock                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UCanvasPanel*)                       RootPanel                                                   OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             SneakBlip                                                   OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             HostileImage                                                OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             TargetMarked                                                OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             FactionImage                                                OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             HealthBar                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UImage*)                             RecentDamage                                                OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UBorder*)                            DisguiseEmblemContainer                                     OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UBorder*)                            RootBorder                                                  OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UBorder*)                            TargetBorder                                                OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UOverlay*)                           HealthOverlay                                               OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UVerticalBox*)                       HealthVerticalBox                                           OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UStatusEffectTagWidget*)             StatusEffectDisplay                                         OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UImage*)                             InterrogationAlerted                                        OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UStatusTagAwarenessWidget*)          AwarenessWidget                                             OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UOverlay*)                           AwarenessOverlay                                            OFFSET(get<T>, {0x388, 8, 0, 0})
	DMember(float)                                     LostHealthAnimTime                                          OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(bool)                                      bFadeOutComplete                                            OFFSET(get<bool>, {0x394, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.StatusTagWidget.OnSetPlayerTargeted
	// void OnSetPlayerTargeted(bool bIsTarget);                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.StatusTagWidget.OnMeterVisibilityChanged
	// void OnMeterVisibilityChanged(bool bVisible);                                                                            // [0x18cb730] Final|Native|Protected 
	// Function /Script/Indiana.StatusTagWidget.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18cb610] Final|Native|Protected 
	// Function /Script/Indiana.StatusTagWidget.OnHealthBarModeChanged
	// void OnHealthBarModeChanged(int32_t ModeIn);                                                                             // [0x18cb6a0] Final|Native|Protected 
	// Function /Script/Indiana.StatusTagWidget.OnCombatStateChanged
	// void OnCombatStateChanged(bool bCombatIn, bool bRestoring);                                                              // [0x18cb540] Final|Native|Protected 
};

/// Class /Script/Indiana.StatusWidgetComponent
/// Size: 0x0010 (0x000670 - 0x000680)
class UStatusWidgetComponent : public UIndianaWidgetComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	DMember(float)                                     Offset                                                      OFFSET(get<float>, {0x670, 4, 0, 0})
};

/// Class /Script/Indiana.StealthComponent
/// Size: 0x0158 (0x0000E0 - 0x000238)
class UStealthComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	SMember(FMulticastInlineDelegate)                  OnStealthChanged                                            OFFSET(getStruct<T>, {0x200, 16, 0, 0})
	DMember(float)                                     PickpocketClearTime                                         OFFSET(get<float>, {0x234, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.StealthComponent.OnStopStealth
	// void OnStopStealth();                                                                                                    // [0x18cbc30] Final|Native|Protected 
	// Function /Script/Indiana.StealthComponent.OnStartStealth
	// void OnStartStealth();                                                                                                   // [0x18cba70] Final|Native|Protected 
	// Function /Script/Indiana.StealthComponent.OnPickpocketDetectionChange
	// void OnPickpocketDetectionChange(class AActor* TargetActor, EAlertState PreviousAlertState, EAlertState TargetAlertState, bool bRestoring); // [0x18cb890] Final|Native|Protected 
	// Function /Script/Indiana.StealthComponent.OnBumped
	// void OnBumped(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);                // [0x18cb3a0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/Indiana.SteamDLCManager
/// Size: 0x0028 (0x000050 - 0x000078)
class USteamDLCManager : public UDLCManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/Indiana.IDSet
/// Size: 0x0050 (0x000000 - 0x000050)
class FIDSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<int32_t>)                             Ids                                                         OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Indiana.OEIStringEntry
/// Size: 0x0058 (0x000000 - 0x000058)
class FOEIStringEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(int32_t)                                   ID                                                          OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FString)                                   DefaultText                                                 OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   FemaleText                                                  OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FString)                                   AlternateXboxText                                           OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   AlternatePS5Text                                            OFFSET(getStruct<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/Indiana.OEIStringTable
/// Size: 0x0100 (0x000000 - 0x000100)
class FOEIStringTable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TSet<int32_t>)                             StringsWithTokens                                           OFFSET(get<T>, {0x10, 80, 0, 0})
	CMember(TMap<FString, FIDSet>)                     StringsWithFemaleVO                                         OFFSET(get<T>, {0x60, 80, 0, 0})
	CMember(TMap<int32_t, FOEIStringEntry>)            Entries                                                     OFFSET(get<T>, {0xB0, 80, 0, 0})
};

/// Class /Script/Indiana.StringTableBundleSet
/// Size: 0x0058 (0x000038 - 0x000090)
class UStringTableBundleSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TMap<FString, FOEIStringTable>)            StringTables                                                OFFSET(get<T>, {0x38, 80, 0, 0})
	DMember(int32_t)                                   Hash                                                        OFFSET(get<int32_t>, {0x88, 4, 0, 0})
};

/// Struct /Script/Indiana.MiniTimeSpan
/// Size: 0x000C (0x000000 - 0x00000C)
class FMiniTimeSpan : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Minutes                                                     OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Seconds                                                     OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   Milliseconds                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/Indiana.SubtitleEntry
/// Size: 0x0038 (0x000000 - 0x000038)
class FSubtitleEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   DebugName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMiniTimeSpan)                             StartTime                                                   OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FMiniTimeSpan)                             EndTime                                                     OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	SMember(FLocString)                                NameString                                                  OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   SubtitleStringID                                            OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(EGender)                                   Gender                                                      OFFSET(get<T>, {0x34, 1, 0, 0})
};

/// Class /Script/Indiana.SubtitleData
/// Size: 0x0020 (0x000038 - 0x000058)
class USubtitleData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FString)                                   ConversationFile                                            OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(TArray<FSubtitleEntry>)                    SubtitleEntries                                             OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/Indiana.SubtitleEntryWidget
/// Size: 0x0008 (0x000300 - 0x000308)
class USubtitleEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class UTextBlockBase*)                     EntryTextBlock                                              OFFSET(get<T>, {0x300, 8, 0, 0})
};

/// Class /Script/Indiana.SubtitleManagerWidget
/// Size: 0x0098 (0x000308 - 0x0003A0)
class USubtitleManagerWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(class UVerticalBox*)                       SubtitleVerticalBox                                         OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UMovieSubtitleData*)                 MasterSubtitleData                                          OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UClass*)                             SubtitleEntryClass                                          OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class USubtitleData*)                      CurrentSubtitleData                                         OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SubtitleManagerWidget.OnCinematicSubtitleVisibilityChanged
	// void OnCinematicSubtitleVisibilityChanged(bool bVisible);                                                                // [0x18d0db0] Final|Native|Protected 
	// Function /Script/Indiana.SubtitleManagerWidget.GetCorrectName
	// FString GetCorrectName(FText currentName);                                                                               // [0x18d0bc0] Final|Native|Protected 
};

/// Class /Script/Indiana.SubtitlesWidget
/// Size: 0x0170 (0x000300 - 0x000470)
class USubtitlesWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	CMember(class UTextBlockBase*)                     SpeakerTextBlock                                            OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MessageTextBlock                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class USizeBox*)                           TextSizeBox                                                 OFFSET(get<T>, {0x310, 8, 0, 0})
	DMember(float)                                     TextSizeBoxVerticalOffset                                   OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     TextSizeBoxHorizontalOffset                                 OFFSET(get<float>, {0x31C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.SubtitlesWidget.SetSizeBoxRatio
	// void SetSizeBoxRatio(float HorizontalRatio, float VerticalRatio);                                                        // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.SubtitlesWidget.OnBarkSubtitleVisibilityChanged
	// void OnBarkSubtitleVisibilityChanged(bool bVisible);                                                                     // [0x18d0d20] Final|Native|Protected 
};

/// Class /Script/Indiana.SuppressableInterface
/// Size: 0x0000 (0x000030 - 0x000030)
class USuppressableInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/Indiana.SuppressRandomPlayerPerkStatusEffect
/// Size: 0x0010 (0x000188 - 0x000198)
class USuppressRandomPlayerPerkStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
};

/// Class /Script/Indiana.SuppressStatusEffect
/// Size: 0x0000 (0x000188 - 0x000188)
class USuppressStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.SurvivalBarGroupWidget
/// Size: 0x0050 (0x000300 - 0x000350)
class USurvivalBarGroupWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class USurvivalBarWidget*)                 HungerBar                                                   OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class USurvivalBarWidget*)                 ThirstBar                                                   OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class USurvivalBarWidget*)                 SleepBar                                                    OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SurvivalBarGroupWidget.OnSubSurvivalBarUpdated
	// void OnSubSurvivalBarUpdated();                                                                                          // [0x18b9be0] Final|Native|Protected 
	// Function /Script/Indiana.SurvivalBarGroupWidget.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty NewDifficulty);                                                                 // [0x18d0e40] Final|Native|Protected 
};

/// Class /Script/Indiana.SurvivalBarWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class USurvivalBarWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(ESurvivalBar)                              SurvivalMode                                                OFFSET(get<T>, {0x310, 1, 0, 0})
	CMember(class UImage*)                             SurvivalIcon                                                OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UProgressBar*)                       SurvivalProgressBar                                         OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SurvivalBarWidget.OnDifficultyChanged
	// void OnDifficultyChanged(EGameDifficulty DifficultyIn);                                                                  // [0x18d0ec0] Final|Native|Protected 
};

/// Class /Script/Indiana.SuspiciousBehaviorStateInfo
/// Size: 0x0008 (0x000120 - 0x000128)
class USuspiciousBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.SuspiciousRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class USuspiciousRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      bActiveDuringInvestigate                                    OFFSET(get<bool>, {0x68, 1, 0, 0})
};

/// Class /Script/Indiana.Switch
/// Size: 0x0098 (0x0002B8 - 0x000350)
class ASwitch : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FMulticastInlineDelegate)                  OnSwitchStateChanged                                        OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UAkComponent*)                       AkComponent                                                 OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTravelTriggerComponent*)            TravelTriggerComponent                                      OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(CycleBehavior)                             CyclingType                                                 OFFSET(get<T>, {0x338, 1, 0, 0})
	DMember(int32_t)                                   NumStates                                                   OFFSET(get<int32_t>, {0x33C, 4, 0, 0})
	DMember(int32_t)                                   InitialState                                                OFFSET(get<int32_t>, {0x340, 4, 0, 0})
	DMember(bool)                                      bPreventInCombatUsage                                       OFFSET(get<bool>, {0x344, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.Switch.SetCurrentState
	// void SetCurrentState(int32_t NewState, class AActor* Initiator);                                                         // [0x18d0f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Switch.GetCurrentState
	// int32_t GetCurrentState();                                                                                               // [0x18d0d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Switch.CycleNextState
	// void CycleNextState(class AActor* Initiator);                                                                            // [0x18d0b30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.SwitchAudioComponent
/// Size: 0x0050 (0x000150 - 0x0001A0)
class USwitchAudioComponent : public UInteractableAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TMap<ESwitchEventType, class UAkPlaySoundEventEffect*>) AudioEvents                                    OFFSET(get<T>, {0x150, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.SwitchAudioComponent.Stop
	// void Stop(ESwitchEventType Type);                                                                                        // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.SwitchAudioComponent.Play
	// void Play(ESwitchEventType Type);                                                                                        // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.SwitchContextBehaviorStateInfo
/// Size: 0x0008 (0x000120 - 0x000128)
class USwitchContextBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
};

/// Class /Script/Indiana.SwitchContextRequestData
/// Size: 0x0008 (0x000068 - 0x000070)
class USwitchContextRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(EDecisionTreeContextType)                  Context                                                     OFFSET(get<T>, {0x68, 4, 0, 0})
};

/// Class /Script/Indiana.SwitchTargetBehaviorStateInfo
/// Size: 0x0000 (0x000120 - 0x000120)
class USwitchTargetBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/Indiana.SwitchTargetRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class USwitchTargetRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.SwitchWeaponBehaviorStateInfo
/// Size: 0x0010 (0x000120 - 0x000130)
class USwitchWeaponBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
};

/// Class /Script/Indiana.SwitchWeaponRequestData
/// Size: 0x0010 (0x000068 - 0x000078)
class USwitchWeaponRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(bool)                                      bInstant                                                    OFFSET(get<bool>, {0x68, 1, 0, 0})
	CMember(EWeaponSwitchType)                         WeaponSwitchType                                            OFFSET(get<T>, {0x69, 1, 0, 0})
	SMember(FGameplayTag)                              WeaponType                                                  OFFSET(getStruct<T>, {0x6C, 8, 0, 0})
	DMember(int32_t)                                   WeaponSlotIndex                                             OFFSET(get<int32_t>, {0x74, 4, 0, 0})
};

/// Class /Script/Indiana.SymbolDescriptionPanelEntry
/// Size: 0x0018 (0x000300 - 0x000318)
class USymbolDescriptionPanelEntry : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UScalableImage*)                     ScalableSymbol                                              OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SymbolName                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SymbolDescription                                           OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Struct /Script/Indiana.StatuEffectVisualSet
/// Size: 0x0050 (0x000000 - 0x000050)
class FStatuEffectVisualSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<TWeakObjectPtr<UStatusEffectUIVisualsData*>>) StatusEffectVisuals                                 OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Class /Script/Indiana.SymbolList
/// Size: 0x00F0 (0x000358 - 0x000448)
class USymbolList : public UGenericCollapsableList
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1096;

public:
	CMember(TMap<ESymbolType, FLocString>)             SymbolEntryNames                                            OFFSET(get<T>, {0x358, 80, 0, 0})
	CMember(TMap<ESymbolType, FStatuEffectVisualSet>)  StatusEffectVisuals                                         OFFSET(get<T>, {0x3A8, 80, 0, 0})
	CMember(class UClass*)                             SymbolEntryClass                                            OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UMapCompassUIVisualData*)            MapCompassVisualData                                        OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(TArray<class UClass*>)                     DamageTypesData                                             OFFSET(get<T>, {0x438, 16, 0, 0})
};

/// Struct /Script/Indiana.AlternateBrushSet
/// Size: 0x03B8 (0x000000 - 0x0003B8)
class FAlternateBrushSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	SMember(FSlateBrush)                               HiddenBrush                                                 OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	SMember(FSlateBrush)                               LockedBrush                                                 OFFSET(getStruct<T>, {0x88, 136, 0, 0})
	SMember(FSlateBrush)                               LockedHoverFocused                                          OFFSET(getStruct<T>, {0x110, 136, 0, 0})
	SMember(FSlateBrush)                               LockedSelected                                              OFFSET(getStruct<T>, {0x198, 136, 0, 0})
	SMember(FSlateBrush)                               UnlockedBrush                                               OFFSET(getStruct<T>, {0x220, 136, 0, 0})
	SMember(FSlateBrush)                               UnlockedHoverFocused                                        OFFSET(getStruct<T>, {0x2A8, 136, 0, 0})
	SMember(FSlateBrush)                               UnlockedSelected                                            OFFSET(getStruct<T>, {0x330, 136, 0, 0})
};

/// Struct /Script/Indiana.SystemMapEntryData
/// Size: 0x0C00 (0x000000 - 0x000C00)
class FSystemMapEntryData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 3072;

public:
	SMember(FString)                                   DebugName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FVector2D)                                 Position                                                    OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FLocString)                                NameString                                                  OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FLocString)                                DescString                                                  OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FVector2D)                                 TextPadding                                                 OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FVector2D)                                 TextAlignment                                               OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FVector2D)                                 QuestIconPadding                                            OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FVector2D)                                 PlayerIconPadding                                           OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   TextZOrder                                                  OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   ButtonZOrder                                                OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   QuestIconZOrder                                             OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   PlayerIconZOrder                                            OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   SortingOrder                                                OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(bool)                                      bDisplayPointOfNoReturnWarning                              OFFSET(get<bool>, {0x5C, 1, 0, 0})
	DMember(bool)                                      bShowWhileHidden                                            OFFSET(get<bool>, {0x5D, 1, 0, 0})
	DMember(bool)                                      bFlipHorizontal                                             OFFSET(get<bool>, {0x5E, 1, 0, 0})
	SMember(FSlateBrush)                               HiddenBrush                                                 OFFSET(getStruct<T>, {0x60, 136, 0, 0})
	SMember(FVector2D)                                 HiddenPosition                                              OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	SMember(FSlateBrush)                               LockedBrush                                                 OFFSET(getStruct<T>, {0xF0, 136, 0, 0})
	SMember(FSlateBrush)                               LockedHoverFocused                                          OFFSET(getStruct<T>, {0x178, 136, 0, 0})
	SMember(FSlateBrush)                               LockedSelected                                              OFFSET(getStruct<T>, {0x200, 136, 0, 0})
	SMember(FSlateBrush)                               UnlockedBrush                                               OFFSET(getStruct<T>, {0x288, 136, 0, 0})
	SMember(FSlateBrush)                               UnlockedHoverFocused                                        OFFSET(getStruct<T>, {0x310, 136, 0, 0})
	SMember(FSlateBrush)                               UnlockedSelected                                            OFFSET(getStruct<T>, {0x398, 136, 0, 0})
	DMember(bool)                                      bHasINX1Overrides                                           OFFSET(get<bool>, {0x420, 1, 0, 0})
	SMember(FAlternateBrushSet)                        INX1BrushSet                                                OFFSET(getStruct<T>, {0x428, 952, 0, 0})
	DMember(bool)                                      bHasINX2Overrides                                           OFFSET(get<bool>, {0x7E0, 1, 0, 0})
	SMember(FAlternateBrushSet)                        INX2BrushSet                                                OFFSET(getStruct<T>, {0x7E8, 952, 0, 0})
	CMember(TArray<class UShipDestinationData*>)       Destinations                                                OFFSET(get<T>, {0xBA0, 16, 0, 0})
	CMember(TMap<class UShipDestinationData*, class UTexture2D*>) DestinationImages                                OFFSET(get<T>, {0xBB0, 80, 0, 0})
};

/// Class /Script/Indiana.SystemMapData
/// Size: 0x0078 (0x000038 - 0x0000B0)
class USystemMapData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<FSystemMapEntryData>)               SystemEntries                                               OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TWeakObjectPtr<class USystemMapData*>)     DLC1SystemMapData                                           OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TWeakObjectPtr<class USystemMapData*>)     DLC2SystemMapData                                           OFFSET(get<T>, {0x70, 8, 0, 0})
};

/// Struct /Script/Indiana.SystemMapEntryHelper
/// Size: 0x0018 (0x000000 - 0x000018)
class FSystemMapEntryHelper : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FLocString)                                NameString                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                DescString                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bAwareLocation                                              OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bHiddenLocation                                             OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      bLockedLocation                                             OFFSET(get<bool>, {0x12, 1, 0, 0})
	DMember(bool)                                      bActiveQuestLocation                                        OFFSET(get<bool>, {0x13, 1, 0, 0})
	DMember(bool)                                      bInactiveQuestLocation                                      OFFSET(get<bool>, {0x14, 1, 0, 0})
};

/// Class /Script/Indiana.SystemMapEntryWidget
/// Size: 0x0C60 (0x000300 - 0x000F60)
class USystemMapEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3936;

public:
	DMember(float)                                     InactiveBeaconOpacity                                       OFFSET(get<float>, {0x300, 4, 0, 0})
	CMember(class UCanvasPanel*)                       EntryCanvasPanel                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UButtonBase*)                        Button                                                      OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UImage*)                             ActiveQuestIcon                                             OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UImage*)                             InactiveQuestIcon                                           OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             PlayerIcon                                                  OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(TArray<class UShipDestinationData*>)       ValidDestinations                                           OFFSET(get<T>, {0x338, 16, 0, 0})
	SMember(FSystemMapEntryData)                       SystemMapEntryData                                          OFFSET(getStruct<T>, {0x348, 3072, 0, 0})
	SMember(FSystemMapEntryHelper)                     EntryHelper                                                 OFFSET(getStruct<T>, {0xF48, 24, 0, 0})
};

/// Class /Script/Indiana.SystemMapInfoWidget
/// Size: 0x0020 (0x000300 - 0x000320)
class USystemMapInfoWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionTextBlock                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UVerticalBox*)                       ObjectiveVBox                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UClass*)                             ObjectiveClass                                              OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.SystemMapInterfaceWidget
/// Size: 0x0018 (0x000308 - 0x000320)
class USystemMapInterfaceWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class USystemMapWidget*)                   SystemMapWidget                                             OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.SystemMapObjectiveWidget
/// Size: 0x0010 (0x000300 - 0x000310)
class USystemMapObjectiveWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UHorizontalBox*)                     HorizontalBox                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TextBlock                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
};

/// Class /Script/Indiana.SystemMapPlayerShipWidget
/// Size: 0x0048 (0x000300 - 0x000348)
class USystemMapPlayerShipWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	CMember(class UImage*)                             PlayerShipImage                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UCurveVector*)                       ScaleCurve                                                  OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UCurveVector*)                       DistanceCurve                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     UnitsPerSecond                                              OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     MinimumTravelTime                                           OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     MaximumTravelTime                                           OFFSET(get<float>, {0x330, 4, 0, 0})
};

/// Class /Script/Indiana.SystemMapSelectionEntryWidget
/// Size: 0x0040 (0x000300 - 0x000340)
class USystemMapSelectionEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	DMember(float)                                     InactiveBeaconOpacity                                       OFFSET(get<float>, {0x300, 4, 0, 0})
	CMember(class UButtonBase*)                        EntryButton                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UImage*)                             ActiveQuestIcon                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UImage*)                             InactiveQuestIcon                                           OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     EntryTextBlock                                              OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UShipDestinationData*)               ShipDestination                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTexture2D*)                         DestinationImage                                            OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class USystemMapSelectionWidget*)          ParentSelectionWidget                                       OFFSET(get<T>, {0x338, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.SystemMapSelectionEntryWidget.OnEntryUnhoveredUnfocused
	// void OnEntryUnhoveredUnfocused();                                                                                        // [0x18d0f60] Final|Native|Protected 
	// Function /Script/Indiana.SystemMapSelectionEntryWidget.OnEntryHoveredFocused
	// void OnEntryHoveredFocused();                                                                                            // [0x18d0f40] Final|Native|Protected 
};

/// Class /Script/Indiana.SystemMapSelectionWidget
/// Size: 0x00E0 (0x000308 - 0x0003E8)
class USystemMapSelectionWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	CMember(class UClass*)                             EntryClass                                                  OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UMultiQuestMapTracker*)              MultiQuestMapTracker                                        OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     HeaderTextblock                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UImage*)                             MapPreview                                                  OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UVerticalBox*)                       EntryList                                                   OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UButtonBase*)                        CancelButton                                                OFFSET(get<T>, {0x350, 8, 0, 0})
	SMember(FMargin)                                   EntryPadding                                                OFFSET(getStruct<T>, {0x358, 16, 0, 0})
	CMember(class USizeBox*)                           BackgroundSizeBox                                           OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class USizeBox*)                           ContentSizeBox                                              OFFSET(get<T>, {0x370, 8, 0, 0})
};

/// Class /Script/Indiana.SystemMapWidget
/// Size: 0x0D30 (0x0004B8 - 0x0011E8)
class USystemMapWidget : public UMapBaseWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4584;

public:
	CMember(class UClass*)                             SelectionWidgetClass                                        OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class USystemMapPlayerShipWidget*)         PlayerShipWidget                                            OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class USystemMapInfoWidget*)               InfoWidget                                                  OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class UClass*)                             EntryWidgetClass                                            OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class USystemMapData*)                     SystemMapData                                               OFFSET(get<T>, {0x4D8, 8, 0, 0})
	SMember(FVector2D)                                 MinGamepadBounds                                            OFFSET(getStruct<T>, {0x4E0, 8, 0, 0})
	SMember(FVector2D)                                 MaxGamepadBounds                                            OFFSET(getStruct<T>, {0x4E8, 8, 0, 0})
};

/// Class /Script/Indiana.TacticalTimeDilationComponent
/// Size: 0x0180 (0x0000E0 - 0x000260)
class UTacticalTimeDilationComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	SMember(FMulticastInlineDelegate)                  TacticalTimeDilationStarted                                 OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  TacticalTimeDilationEnded                                   OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  TacticalTimeDilationMeterChange                             OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	DMember(float)                                     TimeDilation                                                OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(float)                                     PlayerTimeDilation                                          OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(float)                                     TimeDilationMeterMax                                        OFFSET(get<float>, {0x174, 4, 0, 0})
	DMember(float)                                     TimeDilationDrainRate                                       OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(float)                                     TimeDilationFillRate                                        OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(float)                                     TimeDilationFillDelay                                       OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(float)                                     TimeDilationMinMeterToStart                                 OFFSET(get<float>, {0x184, 4, 0, 0})
	DMember(float)                                     TimeDilationDrainRateAction                                 OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     TimeDilationDrainRateMovement                               OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(float)                                     TransitionTime                                              OFFSET(get<float>, {0x190, 4, 0, 0})
	CMember(class URpgStat*)                           TimeDilationStat                                            OFFSET(get<T>, {0x198, 8, 0, 0})
	DMember(float)                                     ReloadScalar                                                OFFSET(get<float>, {0x1A0, 4, 0, 0})
	DMember(float)                                     LookRateScalar                                              OFFSET(get<float>, {0x1A4, 4, 0, 0})
	CMember(class UAkAudioEvent*)                      TTDMeterDepleted                                            OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      TTDDeactivated                                              OFFSET(get<T>, {0x1B0, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      TTDUsuable                                                  OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      TTDMeterFull                                                OFFSET(get<T>, {0x1C0, 8, 0, 0})
	DMember(float)                                     MovementAudioDrainRate                                      OFFSET(get<float>, {0x1C8, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        FasterTTDDrainCurve                                         OFFSET(getStruct<T>, {0x1D0, 136, 0, 0})
	DMember(float)                                     TimeDilationActionDuration                                  OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     TimeDilationMovementDuration                                OFFSET(get<float>, {0x25C, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.TacticalTimeDilationComponent.PreventTTD
	// void PreventTTD(bool bPrevent);                                                                                          // [0x18d5870] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TacticalTimeDilationComponent.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18d53c0] Final|Native|Protected 
	// Function /Script/Indiana.TacticalTimeDilationComponent.OnPlayerConversationChange
	// void OnPlayerConversationChange(class UConversationInstance* Instance, bool bEntered);                                   // [0x18d4ff0] Final|Native|Protected 
	// Function /Script/Indiana.TacticalTimeDilationComponent.OnDeath
	// void OnDeath(FCauseDamageInfo& CauseDamageInfo);                                                                         // [0x18d4c00] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TacticalTimeDilationComponent.OnAttack
	// void OnAttack(float DurationScalar);                                                                                     // [0x18d4a10] Final|Native|Protected 
	// Function /Script/Indiana.TacticalTimeDilationComponent.EnableTimeDilation
	// void EnableTimeDilation(bool bEnabled, bool bInstant, bool bForce);                                                      // [0x18d42c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TacticalTimeDilationComponent.AttributeUpdated
	// void AttributeUpdated(EAttribute Attribute, int32_t NewValue);                                                           // [0x18d3e10] Final|Native|Protected 
};

/// Struct /Script/Indiana.WwiseVOEvent
/// Size: 0x0020 (0x000000 - 0x000020)
class FWwiseVOEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UAkAudioEvent*)                      AudioEvent                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/Indiana.TalkManager
/// Size: 0x1EA8 (0x000030 - 0x001ED8)
class UTalkManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 7896;

public:
	SMember(FWwiseVOEvent)                             SourceChatterWiseEvents                                     OFFSET(getStruct<T>, {0xD0, 7680, 0, 0})
	CMember(class UObjectLibrary*)                     AudioEventObjectLibrary                                     OFFSET(get<T>, {0x1ED0, 8, 0, 0})
};

/// Class /Script/Indiana.TargetableComponent
/// Size: 0x0020 (0x0000E0 - 0x000100)
class UTargetableComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(float)                                     OuterBoundingBoxWidthMultiplier                             OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     OuterBoundingBoxHeightMultiplier                            OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     InnerBoundingBoxWidthMultiplier                             OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     InnerBoundingBoxHeightMultiplier                            OFFSET(get<float>, {0xEC, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.TargetableComponent.OnStateOfBeingChanged
	// void OnStateOfBeingChanged(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                // [0x18d5450] Final|Native|Private 
	// Function /Script/Indiana.TargetableComponent.OnActionToggled
	// void OnActionToggled(ETogglableAction ToggleActionType, bool bIsToggled);                                                // [0x18d4940] Final|Native|Private 
};

/// Class /Script/Indiana.TargetInfoComponent
/// Size: 0x0118 (0x0000E0 - 0x0001F8)
class UTargetInfoComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	CMember(TWeakObjectPtr<class AActor*>)             PrimaryTarget                                               OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             QueuedTarget                                                OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             OverrideTarget                                              OFFSET(get<T>, {0x118, 8, 0, 0})
};

/// Class /Script/Indiana.TeamComponent
/// Size: 0x0118 (0x0000E0 - 0x0001F8)
class UTeamComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	CMember(class UClass*)                             TeamData                                                    OFFSET(get<T>, {0xF8, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.TeamComponent.SetRelationshipToPlayer
	// void SetRelationshipToPlayer(TEnumAsByte<ETeamAttitude> InRelationship, EChangeRelationshipSource InSource, ECrimeType InCrimeType); // [0x18d5c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TeamComponent.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& DamageInfo);                                                                         // [0x18d55c0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TeamComponent.OnDetectedPlayerCrime
	// void OnDetectedPlayerCrime(ECrimeType InCrimeType, bool bPlayerDisguised, EInterrogationResult InInterrogationResult);   // [0x18d4d40] Final|Native|Protected 
	// Function /Script/Indiana.TeamComponent.OnDeath
	// void OnDeath(FCauseDamageInfo& DamageInfo);                                                                              // [0x18d4ca0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TeamComponent.GetRelationshipWithTeam
	// TEnumAsByte<ETeamAttitude> GetRelationshipWithTeam(class UClass* InTeamData);                                            // [0x18d45d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TeamComponent.GetRelationshipWithPlayer
	// TEnumAsByte<ETeamAttitude> GetRelationshipWithPlayer();                                                                  // [0x18d45a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TeamComponent.GetRelationship
	// TEnumAsByte<ETeamAttitude> GetRelationship(class AActor* InActor);                                                       // [0x18d4500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TeamComponent.ClearRelationshipToPlayer
	// void ClearRelationshipToPlayer(EChangeRelationshipSource InSource);                                                      // [0x18d4240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TeamComponent.BPSetRelationshipToPlayer
	// void BPSetRelationshipToPlayer(class AIndianaAiCharacter* Character, TEnumAsByte<ETeamAttitude> Relationship);           // [0x18d4180] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.TeamComponent.BPClearRelationshipToPlayer
	// void BPClearRelationshipToPlayer(class AIndianaAiCharacter* Character);                                                  // [0x18d3ee0] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/Indiana.TeamRelationship
/// Size: 0x0002 (0x000000 - 0x000002)
class FTeamRelationship : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
};

/// Class /Script/Indiana.TeamData
/// Size: 0x01B8 (0x000080 - 0x000238)
class UTeamData : public UBaseTeamData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class UClass*)                             Faction                                                     OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(TEnumAsByte<ETeamAttitude>)                DefaultRelationship                                         OFFSET(get<T>, {0x88, 1, 0, 0})
	CMember(TSet<UClass*>)                             HostileTeams                                                OFFSET(get<T>, {0x90, 80, 0, 0})
	CMember(TSet<UClass*>)                             NeutralTeams                                                OFFSET(get<T>, {0xE0, 80, 0, 0})
	CMember(TSet<UClass*>)                             FriendlyTeams                                               OFFSET(get<T>, {0x130, 80, 0, 0})
	CMember(TMap<class UClass*, FTeamRelationship>)    TeamRelationships                                           OFFSET(get<T>, {0x180, 80, 0, 0})
};

/// Class /Script/Indiana.TeamManager
/// Size: 0x0050 (0x000030 - 0x000080)
class UTeamManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TMap<class UClass*, class UTeamData*>)     TeamMap                                                     OFFSET(get<T>, {0x30, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.TeamManager.BPSetRelationship
	// void BPSetRelationship(class UClass* SourceTeamData, class UClass* OtherTeamData, TEnumAsByte<ETeamAttitude> Relationship, bool bMutual); // [0x18d4030] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.TeamManager.BPGetRelationship
	// TEnumAsByte<ETeamAttitude> BPGetRelationship(class UClass* SourceTeamData, class UClass* OtherTeamData);                 // [0x18d3f60] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TelemetryComponent
/// Size: 0x0038 (0x0000E0 - 0x000118)
class UTelemetryComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	DMember(float)                                     MinMoveTelemetry                                            OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(bool)                                      bEnableTelemetryTick                                        OFFSET(get<bool>, {0xE4, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.TelemetryComponent.OnVendorTransactionComplete
	// void OnVendorTransactionComplete(int32_t BuyingBalance, int32_t SellingBalance, int32_t RepairingBalance, FItemStackSplit& ItemStackSplit); // [0x18d5700] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TelemetryComponent.OnTakeDamage
	// void OnTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                    // [0x18d5660] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TelemetryComponent.OnTacticalTimeDialationStarted
	// void OnTacticalTimeDialationStarted();                                                                                   // [0x18d55a0] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnTacticalTimeDialationEnded
	// void OnTacticalTimeDialationEnded(float Duration);                                                                       // [0x18d5520] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnStartGameSession
	// void OnStartGameSession(FGuid& Guid);                                                                                    // [0x18d5320] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.TelemetryComponent.OnPlayerZoneChange
	// void OnPlayerZoneChange(FVector& Location, FString NewMapName, FString OldMapName);                                      // [0x18d51c0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.TelemetryComponent.OnPlayerMove
	// void OnPlayerMove(FVector& Location, FString MapName);                                                                   // [0x18d50c0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/Indiana.TelemetryComponent.OnMedKitUsed
	// void OnMedKitUsed(int32_t ConsumablesUsed);                                                                              // [0x18d4f60] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnLevelChanged
	// void OnLevelChanged(int32_t Level);                                                                                      // [0x18d4ed0] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnEndGameSession
	// void OnEndGameSession(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                        // [0x18d4e50] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnCombatStateChanged
	// void OnCombatStateChanged(bool bInCombat, bool bRestoring);                                                              // [0x18d4b30] Final|Native|Protected 
	// Function /Script/Indiana.TelemetryComponent.OnCharacterKilled
	// void OnCharacterKilled(FCauseDamageInfo& CauseDamageInfo);                                                               // [0x18d4a90] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.TelemetryManager
/// Size: 0x0040 (0x000030 - 0x000070)
class UTelemetryManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:


	/// Functions
	// Function /Script/Indiana.TelemetryManager.SendDataKeys
	// void SendDataKeys();                                                                                                     // [0xbb4890] Final|Exec|Native|Public 
};

/// Class /Script/Indiana.TeleportBehaviorStateInfo
/// Size: 0x0010 (0x000120 - 0x000130)
class UTeleportBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(class UEQSRequest_IndianaBase*)            EQSRequest                                                  OFFSET(get<T>, {0x120, 8, 0, 0})
};

/// Class /Script/Indiana.TeleportRequestData
/// Size: 0x0010 (0x000068 - 0x000078)
class UTeleportRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UEQSRequest_IndianaBase*)            EQSRequest                                                  OFFSET(get<T>, {0x68, 8, 0, 0})
	DMember(float)                                     TeleportDurationMin                                         OFFSET(get<float>, {0x70, 4, 0, 0})
	DMember(float)                                     TeleportDurationMax                                         OFFSET(get<float>, {0x74, 4, 0, 0})
};

/// Class /Script/Indiana.TemporaryActor
/// Size: 0x0000 (0x0002B8 - 0x0002B8)
class ATemporaryActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
};

/// Class /Script/Indiana.TestAudioDataTypeReference
/// Size: 0x0000 (0x000050 - 0x000050)
class UTestAudioDataTypeReference : public UGameDataReference
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:


	/// Functions
	// Function /Script/Indiana.TestAudioDataTypeReference.GetTestAudioState
	// FString GetTestAudioState();                                                                                             // [0x18d47f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TestAudioDataTypeReference.GetTestAudioEvent
	// FString GetTestAudioEvent();                                                                                             // [0x18d4770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TestAudioDataTypeReference.GetTestAudioEnvironment
	// FString GetTestAudioEnvironment();                                                                                       // [0x18d46f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TestAudioDataTypeReference.GetTestAudioBank
	// FString GetTestAudioBank();                                                                                              // [0x18d4670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.TestAudioComponent
/// Size: 0x0000 (0x0000E0 - 0x0000E0)
class UTestAudioComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
};

/// Class /Script/Indiana.TetherBehaviorStateInfo
/// Size: 0x0000 (0x000178 - 0x000178)
class UTetherBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
};

/// Class /Script/Indiana.TetherRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UTetherRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.TextBlockBase
/// Size: 0x02D8 (0x000140 - 0x000418)
class UTextBlockBase : public UTextLayoutWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
	SMember(FLocString)                                TextReference                                               OFFSET(getStruct<T>, {0x140, 8, 0, 0})
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x148, 24, 0, 0})
	DMember(float)                                     MinDesiredWidth                                             OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(bool)                                      bConvertToUpper                                             OFFSET(get<bool>, {0x164, 1, 0, 0})
	DMember(int32_t)                                   MaxFontScaling                                              OFFSET(get<int32_t>, {0x168, 4, 0, 0})
	DMember(bool)                                      bWrapWithInvalidationPanel                                  OFFSET(get<bool>, {0x16C, 1, 0, 0})
	SMember(FIndianaTextBlockStyle)                    WidgetStyle                                                 OFFSET(getStruct<T>, {0x170, 648, 0, 0})
	DMember(bool)                                      bUseShadowOffset                                            OFFSET(get<bool>, {0x3F8, 1, 0, 0})
	DMember(bool)                                      bUseOutline                                                 OFFSET(get<bool>, {0x3F9, 1, 0, 0})
	DMember(int32_t)                                   InitialFontSize                                             OFFSET(get<int32_t>, {0x3FC, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.TextBlockBase.UseTextStyleShadowOffset
	// void UseTextStyleShadowOffset(bool bShouldUse);                                                                          // [0x18d6060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.UseTextStyleOutline
	// void UseTextStyleOutline(bool bShouldUse);                                                                               // [0x18d5fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetTextByLocString
	// void SetTextByLocString(FLocString& LocString);                                                                          // [0x18d5f30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetText
	// void SetText(FString inString);                                                                                          // [0x18d5e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetShadowOffset
	// void SetShadowOffset(FVector2D InShadowOffset);                                                                          // [0x18d5e00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetShadowColorAndOpacity
	// void SetShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);                                                     // [0x18d5d70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetOutline
	// void SetOutline(FFontOutlineSettings OutlineSettings);                                                                   // [0x18d5bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetOpacity
	// void SetOpacity(float InOpacity);                                                                                        // [0x18d5b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetFont
	// void SetFont(FSlateFontInfo InFontInfo);                                                                                 // [0x18d5a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.SetColorAndOpacity
	// void SetColorAndOpacity(FSlateColor InColorAndOpacity);                                                                  // [0x18d5900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TextBlockBase.IsEmpty
	// bool IsEmpty();                                                                                                          // [0x18d4910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TextBlockBase.GetText
	// FText GetText();                                                                                                         // [0x18d4870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TextBlockBase.GetFont
	// FSlateFontInfo GetFont();                                                                                                // [0x18d4470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TextBlockBase.GetColorAndOpacity
	// FSlateColor GetColorAndOpacity();                                                                                        // [0x18d43f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.IndianaTextBlockWidgetStyle
/// Size: 0x0278 (0x000038 - 0x0002B0)
class UIndianaTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	SMember(FTextBlockStyle)                           TextBlockStyle                                              OFFSET(getStruct<T>, {0x38, 632, 0, 0})
};

/// Class /Script/Indiana.TextEntryWidget
/// Size: 0x0080 (0x000300 - 0x000380)
class UTextEntryWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(class UEditableText*)                      EditableTextField                                           OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CapacityTextBlock                                           OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     BadNameWarning                                              OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(int32_t)                                   CharacterMax                                                OFFSET(get<int32_t>, {0x360, 4, 0, 0})
	DMember(int32_t)                                   CharacterMin                                                OFFSET(get<int32_t>, {0x364, 4, 0, 0})
	SMember(FLocString)                                HintText                                                    OFFSET(getStruct<T>, {0x368, 8, 0, 0})
	CMember(EIndianaUIColorType)                       HintTextColor                                               OFFSET(get<T>, {0x370, 1, 0, 0})


	/// Functions
	// Function /Script/Indiana.TextEntryWidget.OnTextfieldCommitted
	// void OnTextfieldCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitType);                                             // [0x18d9e90] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TextEntryWidget.OnTextfieldChanged
	// void OnTextfieldChanged(FText& Text);                                                                                    // [0x18d9dc0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/Indiana.TextSectionWidget
/// Size: 0x0018 (0x000288 - 0x0002A0)
class UTextSectionWidget : public URadialSectionWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(class UPanelWidget*)                       Panel                                                       OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UTextBlockBase*)                     TextBlock                                                   OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Indiana.ThreatStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UThreatStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     ThreatScalar                                                OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(bool)                                      bClearSwitchTargetCooldown                                  OFFSET(get<bool>, {0x18C, 1, 0, 0})
};

/// Class /Script/Indiana.TimeDilationComponent
/// Size: 0x00A8 (0x0000E0 - 0x000188)
class UTimeDilationComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FMulticastInlineDelegate)                  OnTimeDilationUpdated                                       OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x108, 8, 0, 0})
	DMember(float)                                     ScreenFxBlendTime                                           OFFSET(get<float>, {0x110, 4, 0, 0})
	CMember(TMap<FName, FRuntimeFloatCurve>)           Params                                                      OFFSET(get<T>, {0x118, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.TimeDilationComponent.TimeDilatePlayer
	// void TimeDilatePlayer(float Dilation);                                                                                   // [0x18da2a0] Final|Exec|Native|Protected 
	// Function /Script/Indiana.TimeDilationComponent.SlomoWorld
	// void SlomoWorld(float Dilation);                                                                                         // [0x18da220] Final|Exec|Native|Protected 
	// Function /Script/Indiana.TimeDilationComponent.OnTimeDilationStart
	// void OnTimeDilationStart();                                                                                              // [0x1c5deb0] Event|Public|BlueprintEvent 
	// Function /Script/Indiana.TimeDilationComponent.OnTimeDilationEnd
	// void OnTimeDilationEnd();                                                                                                // [0x1c5deb0] Event|Public|BlueprintEvent 
};

/// Class /Script/Indiana.TinkeringWidget
/// Size: 0x0098 (0x000308 - 0x0003A0)
class UTinkeringWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(class UInputLabelWidget*)                  ConfirmLabel                                                OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  BackLabel                                                   OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UVerticalBox*)                       ContentVerticalBox                                          OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UHorizontalBox*)                     KeyboardInputBox                                            OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UHorizontalBox*)                     GamepadInputBox                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class USizeBox*)                           BackingBotSizeBox                                           OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ItemNameTextBlock                                           OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescTextBlock                                               OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTextBlockBase*)                     BaseValueTextBlock                                          OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UTextBlockBase*)                     UpgradeTextBlock                                            OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UButtonBase*)                        ConfirmButton                                               OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UButtonBase*)                        CancelButton                                                OFFSET(get<T>, {0x380, 8, 0, 0})
	DMember(float)                                     ContentVerticalPadding                                      OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(int32_t)                                   BackingMaterialSize                                         OFFSET(get<int32_t>, {0x38C, 4, 0, 0})
	DMember(int32_t)                                   BackingTopSize                                              OFFSET(get<int32_t>, {0x390, 4, 0, 0})
	CMember(class UDegradableItem*)                    CachedItem                                                  OFFSET(get<T>, {0x398, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.TinkeringWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.ToggleActionStatusEffect
/// Size: 0x0010 (0x000188 - 0x000198)
class UToggleActionStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	CMember(ETogglableAction)                          Action                                                      OFFSET(get<T>, {0x188, 1, 0, 0})
};

/// Class /Script/Indiana.ToolTipContainerWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UToolTipContainerWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	SMember(FMargin)                                   AdjacencyPadding                                            OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	CMember(class UHorizontalBox*)                     ContentHorizontalBox                                        OFFSET(get<T>, {0x328, 8, 0, 0})
};

/// Class /Script/Indiana.OverrideRotationSpeedAnimMetaData
/// Size: 0x0008 (0x000030 - 0x000038)
class UOverrideRotationSpeedAnimMetaData : public UAnimMetaData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     MaxRotationSpeed                                            OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/Indiana.TracerSoundData
/// Size: 0x0018 (0x000038 - 0x000050)
class UTracerSoundData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UAkAudioEvent*)                      ProjectileSound                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(int32_t)                                   TooCloseFadeInPercent                                       OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      bStopOnImpact                                               OFFSET(get<bool>, {0x44, 1, 0, 0})
	DMember(float)                                     ImpactFadeDuration                                          OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/Indiana.Trap
/// Size: 0x0340 (0x0002B8 - 0x0005F8)
class ATrap : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1528;

public:
	SMember(FMulticastInlineDelegate)                  OnTrapStateChange                                           OFFSET(getStruct<T>, {0x2C8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapArmed                                                 OFFSET(getStruct<T>, {0x2D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapDisarmed                                              OFFSET(getStruct<T>, {0x2E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapDeactivated                                           OFFSET(getStruct<T>, {0x2F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapArmAttemptedFailed                                    OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapDisarmAttemptedFailed                                 OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapArmStart                                              OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapDisarmStart                                           OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapArmInterrupted                                        OFFSET(getStruct<T>, {0x348, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapDisarmInterrupted                                     OFFSET(getStruct<T>, {0x358, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapActivated                                             OFFSET(getStruct<T>, {0x368, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapActivationCancelled                                   OFFSET(getStruct<T>, {0x378, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapPreDetonate                                           OFFSET(getStruct<T>, {0x388, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapDetonated                                             OFFSET(getStruct<T>, {0x398, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapAttacked                                              OFFSET(getStruct<T>, {0x3A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapRearming                                              OFFSET(getStruct<T>, {0x3B8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapRearmed                                               OFFSET(getStruct<T>, {0x3C8, 16, 0, 0})
	CMember(ETrapState)                                InitialState                                                OFFSET(get<T>, {0x3D8, 1, 0, 0})
	DMember(bool)                                      bCanArm                                                     OFFSET(get<bool>, {0x3D9, 1, 0, 0})
	DMember(bool)                                      bCanDisarm                                                  OFFSET(get<bool>, {0x3DA, 1, 0, 0})
	CMember(ETrapDifficulty)                           TrapDifficulty                                              OFFSET(get<T>, {0x3DB, 1, 0, 0})
	DMember(float)                                     PreDetonationSeconds                                        OFFSET(get<float>, {0x3DC, 4, 0, 0})
	DMember(float)                                     DetonationDelaySeconds                                      OFFSET(get<float>, {0x3E0, 4, 0, 0})
	DMember(float)                                     DetonationsPerSecond                                        OFFSET(get<float>, {0x3E4, 4, 0, 0})
	DMember(float)                                     RearmDelaySeconds                                           OFFSET(get<float>, {0x3E8, 4, 0, 0})
	CMember(class UClass*)                             StatusEffectType                                            OFFSET(get<T>, {0x3F0, 8, 0, 0})
	SMember(FDamageDescription)                        DamageDescription                                           OFFSET(getStruct<T>, {0x3F8, 120, 0, 0})
	SMember(FDamageLevelScaler)                        DamageLevelScaler                                           OFFSET(getStruct<T>, {0x470, 144, 0, 0})
	CMember(class UImpactDataSet*)                     ImpactDataSet                                               OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(class UParticleSystem*)                    AttackFxShotOrigin                                          OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UParticleSystem*)                    AttackFxShotEnd                                             OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UParticleSystem*)                    AttackFxBeam                                                OFFSET(get<T>, {0x518, 8, 0, 0})
	SMember(FName)                                     AttackFxBeamEndParam                                        OFFSET(getStruct<T>, {0x520, 8, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x538, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x540, 8, 0, 0})
	CMember(class UAkComponent*)                       AkComponent                                                 OFFSET(get<T>, {0x548, 8, 0, 0})
	CMember(class UShapeComponent*)                    ActivationShapeComponent                                    OFFSET(get<T>, {0x560, 8, 0, 0})
	CMember(class UShapeComponent*)                    ActivatorTrackingShapeComponent                             OFFSET(get<T>, {0x568, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.Trap.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18d9d30] Final|Native|Protected 
	// Function /Script/Indiana.Trap.OnNewStateOfBeing
	// void OnNewStateOfBeing(EStateOfBeing NewStateOfBeing, EStateOfBeing OldStateOfBeing);                                    // [0x18d9c60] Final|Native|Protected 
	// Function /Script/Indiana.Trap.OnActivatorTrackingShapeEndOverlap
	// void OnActivatorTrackingShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18d99a0] Final|Native|Protected 
	// Function /Script/Indiana.Trap.OnActivatorTrackingShapeBeginOverlap
	// void OnActivatorTrackingShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18d9780] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Trap.OnActivationShapeEndOverlap
	// void OnActivationShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18d9620] Final|Native|Protected 
	// Function /Script/Indiana.Trap.OnActivationShapeBeginOverlap
	// void OnActivationShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18d9400] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.Trap.IsRearming
	// bool IsRearming();                                                                                                       // [0x18d93d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.IsDetonationPending
	// bool IsDetonationPending();                                                                                              // [0x18d93a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.GetExactTrapDifficulty
	// char GetExactTrapDifficulty();                                                                                           // [0x18d92f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.GetCurrentState
	// ETrapState GetCurrentState();                                                                                            // [0x18d92d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.GetActivatorTrackingShapeComponent
	// class UShapeComponent* GetActivatorTrackingShapeComponent();                                                             // [0x18d9280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.GetActivationShapeComponent
	// class UShapeComponent* GetActivationShapeComponent();                                                                    // [0x18d9250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Trap.DisarmTrap
	// void DisarmTrap(class AIndianaCharacter* Initiator, bool bFireTrapDisarmedEvent);                                        // [0x18d9180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Trap.DeactivateTrap
	// void DeactivateTrap(class AIndianaCharacter* Initiator, bool bFireTrapDeactivatedEvent);                                 // [0x18d90b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Trap.ArmTrap
	// void ArmTrap(class AIndianaCharacter* Initiator, bool bFireTrapArmedEvent);                                              // [0x18d8fc0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TrapAudioComponent
/// Size: 0x0050 (0x000150 - 0x0001A0)
class UTrapAudioComponent : public UInteractableAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TMap<ETrapEventType, class UAkPlaySoundEventEffect*>) AudioEvents                                      OFFSET(get<T>, {0x150, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.TrapAudioComponent.Stop
	// void Stop(ETrapEventType Type);                                                                                          // [0x17e1b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TrapAudioComponent.Play
	// void Play(ETrapEventType Type);                                                                                          // [0x17e1ae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TrapEffectSource
/// Size: 0x0000 (0x000030 - 0x000030)
class UTrapEffectSource : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/Indiana.TrapEffectSource.ReceiveTriggerUntripped
	// void ReceiveTriggerUntripped();                                                                                          // [0x18ded50] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceiveTriggerTripped
	// void ReceiveTriggerTripped();                                                                                            // [0x18ded30] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceiveTriggerDisarmed
	// void ReceiveTriggerDisarmed();                                                                                           // [0x18ded10] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceiveTriggerArmed
	// void ReceiveTriggerArmed();                                                                                              // [0x18decf0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceivePreDeploy
	// void ReceivePreDeploy();                                                                                                 // [0x18decd0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.ReceiveDeployOrder
	// void ReceiveDeployOrder();                                                                                               // [0x18decb0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TrapEffectSource.GetCurrentActivators
	// void GetCurrentActivators(TArray<AIndianaCharacter*>& OutActivators);                                                    // [0x18de1f0] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/Indiana.TrapTerminal
/// Size: 0x0020 (0x000430 - 0x000450)
class ATrapTerminal : public AComputerTerminal
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(TArray<class ATrapTrigger*>)               ConnectedTrapTriggers                                       OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(TArray<class AHazard*>)                    ConnectedHazards                                            OFFSET(get<T>, {0x440, 16, 0, 0})
};

/// Class /Script/Indiana.TrapTrigger
/// Size: 0x0120 (0x0002B8 - 0x0003D8)
class ATrapTrigger : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 984;

public:
	CMember(ETrapTriggerState)                         InitialState                                                OFFSET(get<T>, {0x2B8, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapTriggerStateChange                                    OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapTriggerArmed                                          OFFSET(getStruct<T>, {0x2D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapTriggerDisarmed                                       OFFSET(getStruct<T>, {0x2E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapTriggerTripped                                        OFFSET(getStruct<T>, {0x2F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapTriggerUntripped                                      OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapTriggerPreDeploy                                      OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapTriggerDeployed                                       OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapTriggerRearming                                       OFFSET(getStruct<T>, {0x330, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTrapTriggerRearmed                                        OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	DMember(float)                                     PreDeploymentSeconds                                        OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     DeploymentDelaySeconds                                      OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     DeploymentsPerSecond                                        OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     RearmDelaySeconds                                           OFFSET(get<float>, {0x35C, 4, 0, 0})
	CMember(class UClass*)                             TeamClass                                                   OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class USceneComponent*)                    SceneComponent                                              OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UObsidianIDComponent*)               IDComponent                                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<AActor*>>)           EffectSources                                               OFFSET(get<T>, {0x378, 16, 0, 0})
	CMember(class UShapeComponent*)                    ActivationShapeComponent                                    OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UShapeComponent*)                    ActivatorTrackingShapeComponent                             OFFSET(get<T>, {0x390, 8, 0, 0})
	DMember(bool)                                      bBlocksNavMesh                                              OFFSET(get<bool>, {0x3C1, 1, 0, 0})
	CMember(class UClass*)                             ArmedNavAreaClass                                           OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UIndianaNavModifierComponent*)       NavModifierComponent                                        OFFSET(get<T>, {0x3D0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.TrapTrigger.OnActivatorTrackingShapeEndOverlap
	// void OnActivatorTrackingShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18de640] Final|Native|Protected 
	// Function /Script/Indiana.TrapTrigger.OnActivatorTrackingShapeBeginOverlap
	// void OnActivatorTrackingShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18d9780] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TrapTrigger.OnActivationShapeEndOverlap
	// void OnActivationShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18d9620] Final|Native|Protected 
	// Function /Script/Indiana.TrapTrigger.OnActivationShapeBeginOverlap
	// void OnActivationShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18de420] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TrapTrigger.IsRearming
	// bool IsRearming();                                                                                                       // [0x18de3f0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TrapTrigger.IsDeploymentPending
	// bool IsDeploymentPending();                                                                                              // [0x18de3c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TrapTrigger.GetCurrentState
	// ETrapTriggerState GetCurrentState();                                                                                     // [0x18de2a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.TrapTrigger.DisarmTrapTrigger
	// void DisarmTrapTrigger(bool bAlertEffectSources);                                                                        // [0x18de0e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TrapTrigger.ChangeState
	// void ChangeState(ETrapTriggerState State);                                                                               // [0x18de060] Final|Native|Private|BlueprintCallable 
	// Function /Script/Indiana.TrapTrigger.ArmTrapTrigger
	// void ArmTrapTrigger();                                                                                                   // [0x18de040] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TravelDestinationData
/// Size: 0x00A0 (0x000038 - 0x0000D8)
class UTravelDestinationData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TWeakObjectPtr<class UWorld*>)             DestinationMap                                              OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(ERegionType)                               OwningRegion                                                OFFSET(get<T>, {0x60, 1, 0, 0})
	CMember(class UTravelRegionData*)                  ParentRegion                                                OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         MapPreview                                                  OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TArray<class UTravelRegionData*>)          RegionsToMarkAware                                          OFFSET(get<T>, {0x98, 16, 0, 0})
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	DMember(uint32_t)                                  InitialDiscoveryFlags                                       OFFSET(get<uint32_t>, {0xB8, 4, 0, 0})
	CMember(EPointOfInterestLocationType)              PointOfInterestType                                         OFFSET(get<T>, {0xBC, 1, 0, 0})
	CMember(EPointOfInterestXPType)                    PointOfInterestXP                                           OFFSET(get<T>, {0xBD, 1, 0, 0})
	DMember(bool)                                      bFakeShipLocation                                           OFFSET(get<bool>, {0xBE, 1, 0, 0})
	DMember(float)                                     AvailablityDurationDays                                     OFFSET(get<float>, {0xC0, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<UAssetList*>>)       DestinationAssets                                           OFFSET(get<T>, {0xC8, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.TravelDestinationData.GetDebugString
	// FString GetDebugString();                                                                                                // [0x18de2c0] Final|Native|Public|Const 
};

/// Class /Script/Indiana.ShipDestinationData
/// Size: 0x0008 (0x0000D8 - 0x0000E0)
class UShipDestinationData : public UTravelDestinationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(class UMapInformation*)                    RegionMapInformation                                        OFFSET(get<T>, {0xD8, 8, 0, 0})
};

/// Struct /Script/Indiana.TravelMapPosition
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FTravelMapPosition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<class UTravelDestinationData*>)     TravelDestinations                                          OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   PrimaryDestinationIndex                                     OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	SMember(FVector2D)                                 WorldCoordinate                                             OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
	DMember(bool)                                      bInvertVisibilityConditions                                 OFFSET(get<bool>, {0x24, 1, 0, 0})
	SMember(FLogicalGroupedExpression)                 VisibilityConditions                                        OFFSET(getStruct<T>, {0x28, 120, 0, 0})
};

/// Struct /Script/Indiana.TravelShipMapPosition
/// Size: 0x0080 (0x000000 - 0x000080)
class FTravelShipMapPosition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UShipDestinationData*)               ShipDestination                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bUseConditional                                             OFFSET(get<bool>, {0x8, 1, 0, 0})
	SMember(FLogicalExpression)                        Conditional                                                 OFFSET(getStruct<T>, {0x10, 104, 0, 0})
	SMember(FVector2D)                                 WorldCoordinate                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Struct /Script/Indiana.TravelShipData
/// Size: 0x0020 (0x000000 - 0x000020)
class FTravelShipData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UTravelDestinationData*)             PlayerShipDestinationData                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<FTravelShipMapPosition>)            ShipLocations                                               OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Class /Script/Indiana.TravelMapLayoutData
/// Size: 0x0060 (0x000038 - 0x000098)
class UTravelMapLayoutData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TWeakObjectPtr<class UWorld*>)             AssociatedPersistentMap                                     OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      bLoadAllSublevels                                           OFFSET(get<bool>, {0x60, 1, 0, 0})
	CMember(TArray<FTravelMapPosition>)                TravelMapPositions                                          OFFSET(get<T>, {0x68, 16, 0, 0})
	SMember(FTravelShipData)                           ShipTravelData                                              OFFSET(getStruct<T>, {0x78, 32, 0, 0})
};

/// Class /Script/Indiana.TravelRegionData
/// Size: 0x0028 (0x000038 - 0x000060)
class UTravelRegionData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(TArray<class UClass*>)                     AssociatedFactions                                          OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(float)                                     GamepadMovementScalar                                       OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/Indiana.TravelTriggerComponent
/// Size: 0x0020 (0x0000E0 - 0x000100)
class UTravelTriggerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(class UTravelDestinationData*)             TravelDestinationData                                       OFFSET(get<T>, {0xE0, 8, 0, 0})
	DMember(bool)                                      bHideTransition                                             OFFSET(get<bool>, {0xE8, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTravelInitiated                                           OFFSET(getStruct<T>, {0xF0, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.TravelTriggerComponent.OnOverlapActor
	// void OnOverlapActor(class AActor* OverlappedActor, class AActor* OtherActor);                                            // [0x18de9b0] Final|Native|Public  
	// Function /Script/Indiana.TravelTriggerComponent.OnOpen
	// void OnOpen(class AActor* OpeningActor);                                                                                 // [0x18de920] Final|Native|Public  
	// Function /Script/Indiana.TravelTriggerComponent.OnInteract
	// void OnInteract(FInteractionDescription& Description);                                                                   // [0x18de850] Final|Native|Public|HasOutParms 
	// Function /Script/Indiana.TravelTriggerComponent.GetDebugString
	// FString GetDebugString();                                                                                                // [0x18de340] Final|Native|Public|Const 
	// Function /Script/Indiana.TravelTriggerComponent.GetAreaName
	// FString GetAreaName();                                                                                                   // [0x18de1b0] Final|Native|Public|Const 
	// Function /Script/Indiana.TravelTriggerComponent.GetAreaDescription
	// FString GetAreaDescription();                                                                                            // [0x18de170] Final|Native|Public|Const 
};

/// Class /Script/Indiana.TTDEnemyScanner
/// Size: 0x00C0 (0x000300 - 0x0003C0)
class UTTDEnemyScanner : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	CMember(class UInvalidationBox*)                   MainInvalidationBox                                         OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UOverlay*)                           ContentOverlay                                              OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     EnemyName                                                   OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlockBase*)                     FactionLabel                                                OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlockBase*)                     FactionName                                                 OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     HealthTextBlock                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ArmorTextBlock                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AnalysisText                                                OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     FlavorText                                                  OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     AnalysisHeaderTextBlock                                     OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UTextBlockBase*)                     StatusHeaderTextBlock                                       OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UImage*)                             FactionIcon                                                 OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UEnemyDifficultyWidget*)             EnemyDifficulty                                             OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UTTDStatusEffectsWidget*)            StatusEffects                                               OFFSET(get<T>, {0x368, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.TTDEnemyScanner.StopFactionImageAnimation
	// void StopFactionImageAnimation();                                                                                        // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TTDEnemyScanner.ScanEnded
	// void ScanEnded();                                                                                                        // [0x18ded90] Final|Native|Protected 
	// Function /Script/Indiana.TTDEnemyScanner.ScanCompleted
	// void ScanCompleted();                                                                                                    // [0x18ded70] Final|Native|Protected 
	// Function /Script/Indiana.TTDEnemyScanner.OnTTDScannerVisibilityChanged
	// void OnTTDScannerVisibilityChanged(bool bVisible);                                                                       // [0x18dec20] Final|Native|Protected 
	// Function /Script/Indiana.TTDEnemyScanner.OnMakeVisible
	// void OnMakeVisible();                                                                                                    // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TTDEnemyScanner.OnMakeInvisible
	// void OnMakeInvisible();                                                                                                  // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TTDEnemyScanner.OnMadeInvisible
	// void OnMadeInvisible();                                                                                                  // [0x18de900] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Indiana.TTDEnemyScanner.OnHUDVisibilityChanged
	// void OnHUDVisibilityChanged(bool bVisible);                                                                              // [0x18de7c0] Final|Native|Protected 
	// Function /Script/Indiana.TTDEnemyScanner.OnFactionImageLoaded
	// void OnFactionImageLoaded();                                                                                             // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TTDEnemyScanner.OnActiveScannerTargetChanged
	// void OnActiveScannerTargetChanged();                                                                                     // [0x18de7a0] Final|Native|Protected 
};

/// Class /Script/Indiana.TTDStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UTTDStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	DMember(float)                                     Adjustment                                                  OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(bool)                                      bStartTTD                                                   OFFSET(get<bool>, {0x18C, 1, 0, 0})
	DMember(bool)                                      bNoFastDraining                                             OFFSET(get<bool>, {0x18D, 1, 0, 0})
};

/// Class /Script/Indiana.TTDStatusEffectsWidget
/// Size: 0x0018 (0x000300 - 0x000318)
class UTTDStatusEffectsWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	CMember(class UHorizontalBox*)                     StatusEffectsHorizontalBox                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UClass*)                             StatusEffectEntryClass                                      OFFSET(get<T>, {0x308, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.TTDStatusEffectsWidget.OnStatusEffectRemoved
	// void OnStatusEffectRemoved(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);              // [0x18deb50] Final|Native|Protected 
	// Function /Script/Indiana.TTDStatusEffectsWidget.OnStatusEffectAdded
	// void OnStatusEffectAdded(class UStatusEffectManagerComponent* Sender, class UStatusEffect* StatusEffect);                // [0x18dea80] Final|Native|Protected 
};

/// Struct /Script/Indiana.TutorialBaseEventData
/// Size: 0x0078 (0x000000 - 0x000078)
class FTutorialBaseEventData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(bool)                                      bIsGamepadTutorial                                          OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(ETutorialEvent)                            MouseAndKeyboardTutorialEvent                               OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(ETutorialEvent)                            GamepadTutorialEvent                                        OFFSET(get<T>, {0x2, 1, 0, 0})
	SMember(FLogicalExpression)                        Conditional                                                 OFFSET(getStruct<T>, {0x8, 104, 0, 0})
	CMember(ETutorialCategory)                         Category                                                    OFFSET(get<T>, {0x70, 1, 0, 0})
	DMember(bool)                                      bNeverDisplayInJournal                                      OFFSET(get<bool>, {0x71, 1, 0, 0})
	DMember(char)                                      TutorialSortOrder                                           OFFSET(get<char>, {0x72, 1, 0, 0})
};

/// Struct /Script/Indiana.TutorialPlatformStringContainer
/// Size: 0x0010 (0x000000 - 0x000010)
class FTutorialPlatformStringContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                Description                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.TutorialEventDataContainer
/// Size: 0x0088 (0x000078 - 0x000100)
class FTutorialEventDataContainer : public FTutorialBaseEventData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FLocString)                                TutorialNameString                                          OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FLocString)                                TutorialEventString                                         OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	CMember(TMap<EPlatformFamily, FTutorialPlatformStringContainer>) PlatformOverrides                             OFFSET(get<T>, {0x88, 80, 0, 0})
	DMember(bool)                                      bDisplayInJournalByDefault                                  OFFSET(get<bool>, {0xD8, 1, 0, 0})
	DMember(bool)                                      bDisplayTitleInSideNotification                             OFFSET(get<bool>, {0xD9, 1, 0, 0})
	SMember(FString)                                   ActionName                                                  OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	CMember(TArray<FString>)                           ActionNameList                                              OFFSET(get<T>, {0xF0, 16, 0, 0})
};

/// Struct /Script/Indiana.TutorialFullScreenEventDataContainer
/// Size: 0x01D8 (0x000078 - 0x000250)
class FTutorialFullScreenEventDataContainer : public FTutorialBaseEventData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(ETutorialDisplayType)                      DisplayType                                                 OFFSET(get<T>, {0x78, 1, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x7C, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x8C, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x8D, 1, 0, 0})
	DMember(bool)                                      bShowTutorialTag                                            OFFSET(get<bool>, {0x8E, 1, 0, 0})
	DMember(bool)                                      bShowTutorialName                                           OFFSET(get<bool>, {0x8F, 1, 0, 0})
	DMember(bool)                                      bDisplayInJournalByDefault                                  OFFSET(get<bool>, {0x90, 1, 0, 0})
	SMember(FLocString)                                PreFlavorString                                             OFFSET(getStruct<T>, {0x94, 8, 0, 0})
	SMember(FLocString)                                TutorialNameString                                          OFFSET(getStruct<T>, {0x9C, 8, 0, 0})
	SMember(FLocString)                                TutorialBodyString                                          OFFSET(getStruct<T>, {0xA4, 8, 0, 0})
	CMember(TMap<EPlatformFamily, FTutorialPlatformStringContainer>) PlatformOverrides                             OFFSET(get<T>, {0xB0, 80, 0, 0})
	SMember(FLocString)                                SubHeaderString                                             OFFSET(getStruct<T>, {0x100, 8, 0, 0})
	SMember(FLocString)                                SubDescriptionString                                        OFFSET(getStruct<T>, {0x108, 8, 0, 0})
	CMember(TMap<EPlatformFamily, FTutorialPlatformStringContainer>) SubPlatformOverrides                          OFFSET(get<T>, {0x110, 80, 0, 0})
	SMember(FLocString)                                ColoredString                                               OFFSET(getStruct<T>, {0x160, 8, 0, 0})
	SMember(FInputLabelDescription)                    PrimaryDescription                                          OFFSET(getStruct<T>, {0x168, 56, 0, 0})
	SMember(FInputLabelDescription)                    SecondaryDescription                                        OFFSET(getStruct<T>, {0x1A0, 56, 0, 0})
	SMember(FInputLabelDescription)                    BindingDescriptionOne                                       OFFSET(getStruct<T>, {0x1D8, 56, 0, 0})
	SMember(FInputLabelDescription)                    BindingDescriptionTwo                                       OFFSET(getStruct<T>, {0x210, 56, 0, 0})
	CMember(class UBrandDataAsset*)                    BrandType                                                   OFFSET(get<T>, {0x248, 8, 0, 0})
};

/// Class /Script/Indiana.TutorialDataAsset
/// Size: 0x0240 (0x000038 - 0x000278)
class UTutorialDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(TMap<ETutorialEvent, FTutorialEventDataContainer>) TutorialEventData                                   OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(TMap<ETutorialEvent, FTutorialFullScreenEventDataContainer>) FullScreenTutorialEventData               OFFSET(get<T>, {0x88, 80, 0, 0})
	SMember(FInputLabelDescription)                    DefaultDescription                                          OFFSET(getStruct<T>, {0xD8, 56, 0, 0})
	SMember(FInputLabelDescription)                    FlawPrimaryDescription                                      OFFSET(getStruct<T>, {0x110, 56, 0, 0})
	SMember(FInputLabelDescription)                    FlawSecondaryDescription                                    OFFSET(getStruct<T>, {0x148, 56, 0, 0})
	SMember(FInputLabelDescription)                    PointOfNoReturnPrimaryDescription                           OFFSET(getStruct<T>, {0x180, 56, 0, 0})
	SMember(FInputLabelDescription)                    PointOfNoReturnSecondaryDescription                         OFFSET(getStruct<T>, {0x1B8, 56, 0, 0})
	SMember(FInputLabelDescription)                    DLCInfoPopupPrimaryDescription                              OFFSET(getStruct<T>, {0x1F0, 56, 0, 0})
	CMember(TMap<ETutorialCategory, FLocString>)       TutorialCategoryStrings                                     OFFSET(get<T>, {0x228, 80, 0, 0})
};

/// Class /Script/Indiana.TutorialList
/// Size: 0x0040 (0x000358 - 0x000398)
class UTutorialList : public UGenericCollapsableList
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:


	/// Functions
	// Function /Script/Indiana.TutorialList.AddNewCompletedTutorial
	// void AddNewCompletedTutorial(ETutorialEvent TutorialEvent);                                                              // [0x18e1a00] Final|Native|Public  
};

/// Class /Script/Indiana.TutorialListContainer
/// Size: 0x0018 (0x000310 - 0x000328)
class UTutorialListContainer : public UGenericCollapsableListContainer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
};

/// Class /Script/Indiana.TutorialManager
/// Size: 0x0250 (0x000030 - 0x000280)
class UTutorialManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(TSet<ESkill>)                              DialogueSkills                                              OFFSET(get<T>, {0x40, 80, 0, 0})
	DMember(float)                                     TutorialLogDuration                                         OFFSET(get<float>, {0x200, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ShroudItem                                                  OFFSET(get<T>, {0x208, 40, 0, 0})
	CMember(TMap<FName, EControlDevice>)               DeviceSpecificActions                                       OFFSET(get<T>, {0x230, 80, 0, 0})


	/// Functions
	// Function /Script/Indiana.TutorialManager.ShowTutorialEventMessage
	// void ShowTutorialEventMessage(ETutorialEvent TutorialEvent, bool bShowOncePerSession, bool bInfiniteDuration);           // [0x18e2b20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.TutorialManager.PlayerTargetChange
	// void PlayerTargetChange(bool bAdded);                                                                                    // [0x18e2a00] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerTakeDamage
	// void PlayerTakeDamage(FCauseDamageInfo& CauseDamageInfo);                                                                // [0x18e2960] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TutorialManager.PlayerSkillUpdated
	// void PlayerSkillUpdated(ESkill Skill, int32_t NewValue);                                                                 // [0x18e2890] Final|Native|Public  
	// Function /Script/Indiana.TutorialManager.PlayerSkillCheckSuccess
	// void PlayerSkillCheckSuccess(EXPGainReason Reason, int32_t XPEarned, ESkill SkillUsed);                                  // [0x18e2780] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerMedKitUsed
	// void PlayerMedKitUsed();                                                                                                 // [0xbb4890] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerLevelChanged
	// void PlayerLevelChanged(int32_t NewLevel);                                                                               // [0x18e26f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.TutorialManager.PlayerLanded
	// void PlayerLanded(float DistanceFell);                                                                                   // [0x18e2670] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerKill
	// void PlayerKill(class AActor* Victim, FCauseDamageInfo& CauseDamageInfo);                                                // [0x18e2580] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TutorialManager.PlayerItemAdded
	// void PlayerItemAdded(FItemStack& Item);                                                                                  // [0x18e24e0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TutorialManager.PlayerHealthChanged
	// void PlayerHealthChanged(float HealthChanged, class AActor* Instigator);                                                 // [0x18e2410] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerFinishedEquipping
	// void PlayerFinishedEquipping(class UWeapon* Weapon);                                                                     // [0x18e2380] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerEnteredRestrictedArea
	// void PlayerEnteredRestrictedArea(class ARestrictedArea* RestrictedArea);                                                 // [0x18e22f0] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerEncumberedChanged
	// void PlayerEncumberedChanged(bool bEncumbered);                                                                          // [0x18e2260] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerDisguiseDrainEnd
	// void PlayerDisguiseDrainEnd();                                                                                           // [0x18e2240] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerCompanionKilled
	// void PlayerCompanionKilled(class AActor* Companion);                                                                     // [0x18e21b0] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerCompanionAdded
	// void PlayerCompanionAdded(class AIndianaAiCharacter* NPC, bool bRegister);                                               // [0x18e20e0] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerCombatStateChanged
	// void PlayerCombatStateChanged(bool bIsInCombat, bool bRestoring);                                                        // [0x18e2010] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.PlayerCausedDamage
	// void PlayerCausedDamage(FCauseDamageInfo& CauseDamageInfo);                                                              // [0x18e1f70] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.TutorialManager.MarkTutorialEventComplete
	// void MarkTutorialEventComplete(ETutorialEvent TutorialEvent);                                                            // [0x18e1bf0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.TutorialManager.ItemDamageStatusChange
	// void ItemDamageStatusChange(EItemDegradationState DegredationState);                                                     // [0x18e1b70] Final|Native|Protected 
	// Function /Script/Indiana.TutorialManager.IsTutorialEventCompleted
	// bool IsTutorialEventCompleted(ETutorialEvent TutorialEvent);                                                             // [0x18e1af0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Indiana.TutorialManager.HideTutorialEventMessage
	// void HideTutorialEventMessage(ETutorialEvent TutorialEvent);                                                             // [0x18e1a80] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Indiana.TutorialPopupStyleWidget
/// Size: 0x0100 (0x000300 - 0x000400)
class UTutorialPopupStyleWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(ETutorialDisplayType)                      DisplayType                                                 OFFSET(get<T>, {0x300, 1, 0, 0})
	DMember(float)                                     ContentVerticalPadding                                      OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     NarrowerNameWrapping                                        OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(int32_t)                                   BackingMaterialSize                                         OFFSET(get<int32_t>, {0x30C, 4, 0, 0})
	DMember(int32_t)                                   BackingTopSize                                              OFFSET(get<int32_t>, {0x310, 4, 0, 0})
	CMember(class UVerticalBox*)                       ContentVerticalBox                                          OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UHorizontalBox*)                     TutorialTagBox                                              OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PreFlavorTextBlock                                          OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     NameTextBlock                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DescriptionTextBlock                                        OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SubheaderTextblock                                          OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SubDescriptionTextBlock                                     OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UOverlay*)                           ColoredOverlay                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ColoredTextBlock                                            OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UImage*)                             ColoredImage                                                OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UImage*)                             MascotImage                                                 OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UHorizontalBox*)                     OptionalBindings                                            OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  OptionalBindingOne                                          OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  OptionalBindingTwo                                          OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  PrimaryInputLabel                                           OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  SecondaryInputLabel                                         OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UButtonBase*)                        PrimaryButton                                               OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UButtonBase*)                        SecondaryButton                                             OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class USizeBox*)                           BackingBotSizeBox                                           OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UImage*)                             BackingBot                                                  OFFSET(get<T>, {0x3B0, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.TutorialPopupStyleWidget.SetNewBackingMaterialHeight
	// void SetNewBackingMaterialHeight(float NewHeight);                                                                       // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.TutorialPopupStyleWidget.FadeInMascotImage
	// void FadeInMascotImage();                                                                                                // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.TutorialPopupWidget
/// Size: 0x0048 (0x000308 - 0x000350)
class UTutorialPopupWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class UUserWidget*)                        BGAlpha                                                     OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UOverlay*)                           StyleContainerOverlay                                       OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UIndianaUserWidget*)                 CachedCurrentTutorialWidget                                 OFFSET(get<T>, {0x338, 8, 0, 0})
};

/// Class /Script/Indiana.TutorialTriggerVolume
/// Size: 0x0008 (0x000358 - 0x000360)
class ATutorialTriggerVolume : public ATriggerVolume
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(ETutorialEvent)                            TutorialEvent                                               OFFSET(get<T>, {0x358, 1, 0, 0})
	DMember(bool)                                      MarkTutorialEventCompleteTrigger                            OFFSET(get<bool>, {0x359, 1, 0, 0})
};

/// Class /Script/Indiana.UglyStickStatusEffect
/// Size: 0x0018 (0x000188 - 0x0001A0)
class UUglyStickStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(class UBoneModificationsPreset*)           OriginalBoneModPreset                                       OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class UBoneModificationsPreset*)           UglyStickBoneModPreset                                      OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(class UBoneModificationsPreset*)           DuplicatePreset                                             OFFSET(get<T>, {0x198, 8, 0, 0})
};

/// Class /Script/Indiana.UIFlipBookData
/// Size: 0x0018 (0x000038 - 0x000050)
class UUIFlipBookData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(uint32_t)                                  NumColumns                                                  OFFSET(get<uint32_t>, {0x38, 4, 0, 0})
	DMember(uint32_t)                                  NumRows                                                     OFFSET(get<uint32_t>, {0x3C, 4, 0, 0})
	DMember(uint32_t)                                  FrameRate                                                   OFFSET(get<uint32_t>, {0x40, 4, 0, 0})
	DMember(uint32_t)                                  NumFrames                                                   OFFSET(get<uint32_t>, {0x44, 4, 0, 0})
	CMember(class UTexture*)                           FlipbookTexture                                             OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/Indiana.UnlockAbilityStatusEffect
/// Size: 0x0008 (0x000188 - 0x000190)
class UUnlockAbilityStatusEffect : public UStatusEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(EUnlockAbility)                            UnlockedAbility                                             OFFSET(get<T>, {0x188, 1, 0, 0})
};

/// Struct /Script/Indiana.ResolutionFontSizeData
/// Size: 0x0020 (0x000000 - 0x000020)
class FResolutionFontSizeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   DebugName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FVector2D)                                 Resolution                                                  OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(int8_t)                                    FontSize                                                    OFFSET(get<int8_t>, {0x18, 1, 0, 0})
};

/// Class /Script/Indiana.RenderThreadLoadingScreenWidget
/// Size: 0x01C0 (0x000278 - 0x000438)
class URenderThreadLoadingScreenWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1080;

public:
	CMember(TArray<class UTexture2D*>)                 LoadingImages                                               OFFSET(get<T>, {0x290, 16, 0, 0})
	CMember(TArray<FString>)                           LoadingTips                                                 OFFSET(get<T>, {0x2A0, 16, 0, 0})
	DMember(float)                                     SecondsBetweenImages                                        OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     SecondsBetweenTips                                          OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(int32_t)                                   MaxNumberOfTips                                             OFFSET(get<int32_t>, {0x2B8, 4, 0, 0})
	CMember(class UImage*)                             LoadingImage                                                OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UImage*)                             BlockerImage                                                OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock                                                OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock0                                               OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock1                                               OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock2                                               OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock3                                               OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock4                                               OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock5                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock6                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock7                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock8                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UTextBlock*)                         TipTextBlock9                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UInvalidationBox*)                   TipArrayInvalidationBox                                     OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UImage*)                             AnimatingMascot                                             OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(TArray<FResolutionFontSizeData>)           ResolutionFontSizes                                         OFFSET(get<T>, {0x338, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         MascotFBTexture                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterial*>)          MascotFBMaterial                                            OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInstance*>)  MascotFBInstance                                            OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UTexture2D*)                         MascotFBTexturePtr                                          OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UMaterial*)                          MascotFBMaterialPtr                                         OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UMaterialInstance*)                  MascotFBInstancePtr                                         OFFSET(get<T>, {0x3D0, 8, 0, 0})
};

/// Struct /Script/Indiana.VendorStockDescriptor
/// Size: 0x0028 (0x000000 - 0x000028)
class FVendorStockDescriptor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class ULootTableData*)                     LootTable                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIsOneOff                                                   OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bIsRestricted                                               OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bIgnoreRestockDelay                                         OFFSET(get<bool>, {0xA, 1, 0, 0})
	CMember(class UGenericLogicDataAsset*)             GenerationConditionsDataAsset                               OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FGuid)                                     DescriptorGuid                                              OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Indiana.PerkCostModifier
/// Size: 0x0010 (0x000000 - 0x000010)
class FPerkCostModifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             Perk                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     CostModifier                                                OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/Indiana.VendorComponent
/// Size: 0x0100 (0x0000E0 - 0x0001E0)
class UVendorComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	SMember(FLocString)                                VendorName                                                  OFFSET(getStruct<T>, {0xE0, 8, 0, 0})
	CMember(TWeakObjectPtr<class AContainer*>)         VendorContainer                                             OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(TArray<FVendorStockDescriptor>)            VendorStockDescriptors                                      OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(TArray<class ULootTableData*>)             VendorLootTables                                            OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<class ULootTableData*>)             OneOffLootTables                                            OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(TArray<class ULootTableData*>)             RestrictedLootTables                                        OFFSET(get<T>, {0x140, 16, 0, 0})
	DMember(bool)                                      bReputationBreaksRestriction                                OFFSET(get<bool>, {0x150, 1, 0, 0})
	DMember(bool)                                      bHackingBreaksRestriction                                   OFFSET(get<bool>, {0x151, 1, 0, 0})
	DMember(bool)                                      bPurchaseOnly                                               OFFSET(get<bool>, {0x152, 1, 0, 0})
	DMember(bool)                                      bIsVendingMachine                                           OFFSET(get<bool>, {0x153, 1, 0, 0})
	DMember(bool)                                      bIgnorePlayerMerchantSkill                                  OFFSET(get<bool>, {0x154, 1, 0, 0})
	DMember(bool)                                      bCanRepair                                                  OFFSET(get<bool>, {0x155, 1, 0, 0})
	CMember(class UClass*)                             OwningFaction                                               OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(TArray<FPerkCostModifier>)                 CostModifierPerks                                           OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(class UAkAudioEvent*)                      TransactionCompleteAudioEvent                               OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      VendorCloseAudioEvent                                       OFFSET(get<T>, {0x178, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.VendorComponent.SetVendorContainer
	// void SetVendorContainer(class AContainer* Container);                                                                    // [0x18e2a90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Indiana.VendorWidget
/// Size: 0x0318 (0x000308 - 0x000620)
class UVendorWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1568;

public:
	DMember(float)                                     StackSplittingViewerOpacity                                 OFFSET(get<float>, {0x308, 4, 0, 0})
	CMember(class UTexture2D*)                         RestrictedLockedTexture                                     OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UTexture2D*)                         RestrictedUnlockedTexture                                   OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UClass*)                             PerkAdditionalStock                                         OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UClass*)                             PerkBuyingPrice                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UClass*)                             PerkSurcharge                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UItemViewerButtonWidget*)            HoveredItem                                                 OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UTextBlockBase*)                     VendorNameTextBlock                                         OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UImage*)                             FactionImage                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UHorizontalBox*)                     ActionHBox                                                  OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ActionValueTextBlock                                        OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UTextBlockBase*)                     SellDisabledMessage                                         OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UVerticalBox*)                       RestrictedVerticalBox                                       OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UImage*)                             RestrictedIcon                                              OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UTextBlockBase*)                     RestrictedHeaderTextBlock                                   OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UTextBlockBase*)                     RestrictedDescTextBlock                                     OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UVerticalBox*)                       BuySellItemDetailsVerticalBox                               OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ItemNameTextBlock                                           OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ItemDescTextBlock                                           OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UVerticalBox*)                       ItemModdingVerticalBox                                      OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     InstalledModificationsTextBlock                             OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UVerticalBox*)                       InstalledModsVerticalBox                                    OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UEquipmentModsWidget*)               ModWidget                                                   OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UVerticalBox*)                       RepairItemDetailsVerticalBox                                OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class USizeBox*)                           CurrentRepairStatusSizeBox                                  OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UProgressBar*)                       CurrentRepairStatusBar                                      OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class USizeBox*)                           CurrentRepairPristineStatusSizeBox                          OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UProgressBar*)                       CurrentRepairPristineStatusBar                              OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     CurrentRepairStatusTextBlock                                OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class USizeBox*)                           RepairedStatusSizeBox                                       OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UProgressBar*)                       RepairedStatusBar                                           OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class USizeBox*)                           RepairedPristineSizeBox                                     OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UProgressBar*)                       RepairedPristineStatusBar                                   OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UTextBlockBase*)                     RepairedPristineStatusTextBlock                             OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UItemStatEntryWidget*)               PreItemStat                                                 OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UItemStatEntryWidget*)               PostItemStat                                                OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DiscountSurchargeTextBlock                                  OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UCartInfoWidget*)                    CartInfoWidget                                              OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UPlayerStatsWidget*)                 PlayerStats                                                 OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             LabelGroup                                                  OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  ActionInputLabelBuy                                         OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  ActionInputLabelSell                                        OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UInputLabelWidget*)                  ActionInputLabelRepair                                      OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UNavigationGroupWidget*)             NavigationGroupWidget                                       OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UScrollingWidgetGroup*)              ScrollingWidgetGroup                                        OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UScrollBox*)                         PageScrollBox                                               OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UHorizontalBox*)                     PerkStockHBox                                               OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkStockDesc                                               OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UHorizontalBox*)                     PerkPriceHBox                                               OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkPriceDesc                                               OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UHorizontalBox*)                     PerkSurchargeHBox                                           OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PerkSurchargeDesc                                           OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UItemViewerWidget*)                  VendorViewer                                                OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UItemViewerNavigationWidget*)        VendorSubNavigationWidget                                   OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     VendorFilterType                                            OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class UItemViewerWidget*)                  PlayerSellViewer                                            OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UItemViewerNavigationWidget*)        PlayerSellSubNavigationWidget                               OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PlayerSellFilterType                                        OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class UItemViewerWidget*)                  PlayerRepairViewer                                          OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(class UItemViewerNavigationWidget*)        PlayerRepairSubNavigationWidget                             OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class UTextBlockBase*)                     PlayerRepairFilterType                                      OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(class UClass*)                             ItemRepairClass                                             OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UClass*)                             StackSplittingClass                                         OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(TArray<FKey>)                              VendorNiceSequence                                          OFFSET(get<T>, {0x500, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.VendorWidget.UpdateSubnavigationActivation
	// void UpdateSubnavigationActivation();                                                                                    // [0x18e2c40] Final|Native|Protected 
	// Function /Script/Indiana.VendorWidget.OnStoreItemRemoved
	// void OnStoreItemRemoved(FItemStack& ItemStack);                                                                          // [0x18e1ed0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.VendorWidget.OnStoreItemAdded
	// void OnStoreItemAdded(FItemStack& ItemStack);                                                                            // [0x18e1e30] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.VendorWidget.OnSetCurrentPage
	// void OnSetCurrentPage(EVendorPages Page, bool bAnimate);                                                                 // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.OnPlayerItemRemoved
	// void OnPlayerItemRemoved(FItemStack& ItemStack);                                                                         // [0x18e1d90] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.VendorWidget.OnPlayerItemAdded
	// void OnPlayerItemAdded(FItemStack& ItemStack);                                                                           // [0x18e1cf0] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.VendorWidget.OnItemInspectorClosed
	// void OnItemInspectorClosed(class UItemInspectorWidget* ItemInspectorWidget);                                             // [0x18e1c60] Final|Native|Protected 
	// Function /Script/Indiana.VendorWidget.OnAnimationSoldJunk
	// void OnAnimationSoldJunk();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.OnAnimationSoldItem
	// void OnAnimationSoldItem();                                                                                              // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.OnAnimationRepairedItem
	// void OnAnimationRepairedItem();                                                                                          // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.OnAnimationBoughtItem
	// void OnAnimationBoughtItem();                                                                                            // [0x1c5deb0] Event|Protected|BlueprintEvent 
	// Function /Script/Indiana.VendorWidget.FadeInFactionImage
	// void FadeInFactionImage();                                                                                               // [0x1c5deb0] Event|Protected|BlueprintEvent 
};

/// Class /Script/Indiana.WaitAction
/// Size: 0x0008 (0x000038 - 0x000040)
class UWaitAction : public UAIAction
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     WaitTime                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/Indiana.WaitTimeSliderWidget
/// Size: 0x0038 (0x000300 - 0x000338)
class UWaitTimeSliderWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UButtonBase*)                        LeftButton                                                  OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UButtonBase*)                        RightButton                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class USliderBase*)                        Slider                                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UAkAudioEvent*)                      GamepadNextAudio                                            OFFSET(get<T>, {0x328, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.WaitTimeSliderWidget.OnValueChanged
	// void OnValueChanged(FSliderEvent& Event);                                                                                // [0x18e5f10] Final|Native|Protected|HasOutParms 
};

/// Struct /Script/Indiana.WaitData
/// Size: 0x000C (0x000000 - 0x00000C)
class FWaitData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     StepValue                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FLocString)                                LocString                                                   OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Class /Script/Indiana.WaitTimeWidget
/// Size: 0x0098 (0x000308 - 0x0003A0)
class UWaitTimeWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(class UTextBlockBase*)                     WaitDurationTextBlock                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UButtonBase*)                        ConfirmButton                                               OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UButtonBase*)                        CancelButton                                                OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             LabelGroup                                                  OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UWaitTimeSliderWidget*)              RestSlider                                                  OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MinTimeTextBlock                                            OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UTextBlockBase*)                     MaxTimeTextBlock                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(TMap<ERestType, FWaitData>)                WaitTypeData                                                OFFSET(get<T>, {0x340, 80, 0, 0})
	DMember(int32_t)                                   DefaultStartingTime                                         OFFSET(get<int32_t>, {0x390, 4, 0, 0})


	/// Functions
	// Function /Script/Indiana.WaitTimeWidget.OnSliderValueChanged
	// void OnSliderValueChanged(FSliderEvent& Event);                                                                          // [0x18e5d70] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.WaitTimeWidget.OnInputConfirm
	// void OnInputConfirm();                                                                                                   // [0x18e5d50] Final|Native|Protected 
	// Function /Script/Indiana.WaitTimeWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18e5d30] Final|Native|Protected 
};

/// Class /Script/Indiana.WalkBehaviorStateInfo
/// Size: 0x0010 (0x000178 - 0x000188)
class UWalkBehaviorStateInfo : public UEQS_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
};

/// Class /Script/Indiana.WalkRequestData
/// Size: 0x0000 (0x000080 - 0x000080)
class UWalkRequestData : public UDecisionTreeEQSRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Class /Script/Indiana.WalkNavLink
/// Size: 0x0000 (0x0002E8 - 0x0002E8)
class AWalkNavLink : public AReservableNavLink
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
};

/// Class /Script/Indiana.WanderBehaviorStateInfo
/// Size: 0x0020 (0x000120 - 0x000140)
class UWanderBehaviorStateInfo : public UEmpty_BehaviorStateInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
};

/// Class /Script/Indiana.WanderRequestData
/// Size: 0x0000 (0x000068 - 0x000068)
class UWanderRequestData : public UDecisionTreeEmptyRequestData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/Indiana.WorkbenchPageWidget
/// Size: 0x0060 (0x0003A0 - 0x000400)
class UWorkbenchPageWidget : public UBaseInventoryItemManagement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(class UInventoryWeaponsPageWidget*)        Weapons                                                     OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UInventoryArmorPageWidget*)          Armor                                                       OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UInputLabelGroupWidget*)             InputLabelGroup                                             OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UFlavorTextWidget*)                  FlavorTextWidget                                            OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UTextBlockBase*)                     DisabledMessage                                             OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ProhibitedCharacterClasses                                  OFFSET(get<T>, {0x3E8, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.WorkbenchPageWidget.OnItemRemoved
	// void OnItemRemoved(FItemStack& ItemStack);                                                                               // [0x18ebb90] Final|Native|Protected|HasOutParms 
	// Function /Script/Indiana.WorkbenchPageWidget.OnDragDrop_SwapWeaponSlot
	// void OnDragDrop_SwapWeaponSlot(class UIndianaDragDropOperation* Operation);                                              // [0x18ebb00] Final|Native|Protected 
	// Function /Script/Indiana.WorkbenchPageWidget.OnDragDrop_SetWeaponSlot
	// void OnDragDrop_SetWeaponSlot(class UIndianaDragDropOperation* Operation);                                               // [0x18eba70] Final|Native|Protected 
	// Function /Script/Indiana.WorkbenchPageWidget.OnDragDrop_ClearArmorSlot
	// void OnDragDrop_ClearArmorSlot(class UIndianaDragDropOperation* Operation);                                              // [0x18eb9e0] Final|Native|Protected 
};

/// Class /Script/Indiana.WBBreakdownPageWidget
/// Size: 0x0018 (0x000400 - 0x000418)
class UWBBreakdownPageWidget : public UWorkbenchPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
	CMember(class UCartInfoWidget*)                    CartInfoWidget                                              OFFSET(get<T>, {0x400, 8, 0, 0})
};

/// Class /Script/Indiana.WBModificationPageWidget
/// Size: 0x0028 (0x000400 - 0x000428)
class UWBModificationPageWidget : public UWorkbenchPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1064;

public:
	CMember(class UClass*)                             ItemModdingClass                                            OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ItemNameTextBlock                                           OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UTextBlockBase*)                     ItemDescTextBlock                                           OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UVerticalBox*)                       ItemDetailsContainer                                        OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UEquipmentModsWidget*)               EquipmentMods                                               OFFSET(get<T>, {0x420, 8, 0, 0})
};

/// Class /Script/Indiana.WBRepairPageWidget
/// Size: 0x0050 (0x000400 - 0x000450)
class UWBRepairPageWidget : public UWorkbenchPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(class URepairUpgradeInfoWidget*)           RepairInfoWidget                                            OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UCartInfoWidget*)                    CartInfoWidget                                              OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UVerticalBox*)                       InfoVerticalBox                                             OFFSET(get<T>, {0x428, 8, 0, 0})
};

/// Class /Script/Indiana.WBUpgradePageWidget
/// Size: 0x0028 (0x000400 - 0x000428)
class UWBUpgradePageWidget : public UWorkbenchPageWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1064;

public:
	CMember(class URepairUpgradeInfoWidget*)           RepairInfoWidget                                            OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UCartInfoWidget*)                    CartInfoWidget                                              OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UClass*)                             TinkeringClass                                              OFFSET(get<T>, {0x410, 8, 0, 0})
};

/// Struct /Script/Indiana.OnHitStatusEffects
/// Size: 0x0028 (0x000000 - 0x000028)
class FOnHitStatusEffects : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(class URpgStat*)                           SkillModifierStat                                           OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   MinSkill                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   Chance                                                      OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      bAlwaysApply                                                OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/Indiana.Weapon
/// Size: 0x04A8 (0x000128 - 0x0005D0)
class UWeapon : public UDegradableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1488;

public:
	SMember(FMulticastInlineDelegate)                  StartEquipDelegate                                          OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  EndEquipDelegate                                            OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  StartUnequipDelegate                                        OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  EndUnequipDelegate                                          OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  StartReloadDelegate                                         OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  EndReloadDelegate                                           OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  InterruptReloadDelegate                                     OFFSET(getStruct<T>, {0x190, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  StartHolsterDelegate                                        OFFSET(getStruct<T>, {0x1A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  EndHolsterDelegate                                          OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  StartUnholsterDelegate                                      OFFSET(getStruct<T>, {0x1C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  EndUnholsterDelegate                                        OFFSET(getStruct<T>, {0x1D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  CalledShotStartedDelegate                                   OFFSET(getStruct<T>, {0x1E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  CalledShotEndedDelegate                                     OFFSET(getStruct<T>, {0x1F0, 16, 0, 0})
	CMember(class UFPVSkeletalMeshComponent*)          SkeletalMeshComponent                                       OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(class URpgStatComponent*)                  StatComponent                                               OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(class URpgStatComponent*)                  OwnerStatComponent                                          OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(class UCharacterInfoComponent*)            CharacterInfoComponent                                      OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(class UTacticalTimeDilationComponent*)     TTDComponent                                                OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UWeaponMode*)                        PrimaryMode                                                 OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UAmmoPoolBase*)                      AmmoPool                                                    OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UWeaponModContainer*)                WeaponModContainer                                          OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UBodyLocationSpellAsset*)            WeaponLocationSpellAsset                                    OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      WeaponMesh                                                  OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             WeaponAnimInstance                                          OFFSET(get<T>, {0x270, 40, 0, 0})
	DMember(char)                                      PrimaryTriggerThreshold                                     OFFSET(get<char>, {0x298, 1, 0, 0})
	DMember(float)                                     EquipTime                                                   OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     UnequipTime                                                 OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     HolsterTime                                                 OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     UnholsterTime                                               OFFSET(get<float>, {0x2A8, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             FPVVisualsClass                                             OFFSET(get<T>, {0x2B0, 40, 0, 0})
	CMember(class UTriggerEffect*)                     TriggerEffectPS5                                            OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             TPVVisualsClass                                             OFFSET(get<T>, {0x2E0, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             FPAnimationsClass                                           OFFSET(get<T>, {0x308, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             CreatureTPAnimationsClass                                   OFFSET(get<T>, {0x330, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             SharedVisualsClass                                          OFFSET(get<T>, {0x358, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             SoundEffectsClass                                           OFFSET(get<T>, {0x380, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             PreviewAnimationsClass                                      OFFSET(get<T>, {0x3A8, 40, 0, 0})
	SMember(FRpgStatCollection)                        RpgStatCollection                                           OFFSET(getStruct<T>, {0x3D0, 104, 0, 0})
	CMember(TArray<class UMicroModTable*>)             MicroModTables                                              OFFSET(get<T>, {0x438, 16, 0, 0})
	CMember(class UClass*)                             EquippedMicroMod                                            OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(ESkill)                                    Skill                                                       OFFSET(get<T>, {0x450, 1, 0, 0})
	CMember(ESkill)                                    SkillSecondary                                              OFFSET(get<T>, {0x451, 1, 0, 0})
	DMember(float)                                     ImpulseOverride                                             OFFSET(get<float>, {0x454, 4, 0, 0})
	DMember(float)                                     ArmorPenetration                                            OFFSET(get<float>, {0x458, 4, 0, 0})
	SMember(FGameplayTag)                              WeaponCategory                                              OFFSET(getStruct<T>, {0x45C, 8, 0, 0})
	CMember(class UAISettings_Weapon*)                 AISettings                                                  OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UAISettings_Weapon*)                 CompanionOverrideAISettings                                 OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UAssetCollection*)                   AssetCollection                                             OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(TArray<FOnHitStatusEffects>)               OnHitStatusEffects                                          OFFSET(get<T>, {0x480, 16, 0, 0})
	SMember(FSpellSet)                                 WeaponSpellSet                                              OFFSET(getStruct<T>, {0x490, 80, 0, 0})
	DMember(char)                                      MinSkill                                                    OFFSET(get<char>, {0x4E0, 1, 0, 0})
	DMember(char)                                      MinAttribute                                                OFFSET(get<char>, {0x4E1, 1, 0, 0})
	DMember(float)                                     WeakSpotMultiplier                                          OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     SwarmScalar                                                 OFFSET(get<float>, {0x4E8, 4, 0, 0})
	CMember(class UClass*)                             CritSpell                                                   OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UClass*)                             OnHitSpell                                                  OFFSET(get<T>, {0x4F8, 8, 0, 0})
	DMember(float)                                     OnHitSpellChance                                            OFFSET(get<float>, {0x500, 4, 0, 0})
	DMember(bool)                                      bRequireDirectHitForHitSpell                                OFFSET(get<bool>, {0x504, 1, 0, 0})
	DMember(bool)                                      bOverrideProjectileWizzRadius                               OFFSET(get<bool>, {0x505, 1, 0, 0})
	DMember(float)                                     ProjectileWizzRadius                                        OFFSET(get<float>, {0x508, 4, 0, 0})
	DMember(bool)                                      bOverrideProjectileCollisionRadius                          OFFSET(get<bool>, {0x50C, 1, 0, 0})
	DMember(float)                                     ProjectileCollisionRadius                                   OFFSET(get<float>, {0x510, 4, 0, 0})
	DMember(bool)                                      bCanGenerateLootOnBreakdown                                 OFFSET(get<bool>, {0x514, 1, 0, 0})
	CMember(class UPrimaryWeaponVisuals*)              CurrentVisuals                                              OFFSET(get<T>, {0x550, 8, 0, 0})
	DMember(bool)                                      bCalledShotWeapon                                           OFFSET(get<bool>, {0x570, 1, 0, 0})
	DMember(bool)                                      bIsHealGun                                                  OFFSET(get<bool>, {0x5A9, 1, 0, 0})
	DMember(bool)                                      bImprovised                                                 OFFSET(get<bool>, {0x5AA, 1, 0, 0})
	DMember(float)                                     QuietWeaponNoiseRadius                                      OFFSET(get<float>, {0x5AC, 4, 0, 0})
	DMember(bool)                                      bCanDamageFriendlies                                        OFFSET(get<bool>, {0x5B8, 1, 0, 0})
	DMember(bool)                                      bShouldScanForEvidence                                      OFFSET(get<bool>, {0x5B9, 1, 0, 0})
	CMember(TArray<FString>)                           ActiveWorldNames                                            OFFSET(get<T>, {0x5C0, 16, 0, 0})


	/// Functions
	// Function /Script/Indiana.Weapon.StartUnequip
	// void StartUnequip(bool bInstantUnequip);                                                                                 // [0x18e6020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.OnStatUpdated
	// void OnStatUpdated(class URpgStat* Stat);                                                                                // [0x18e5e80] Final|Native|Protected 
	// Function /Script/Indiana.Weapon.OnAnimNotifyEvent
	// void OnAnimNotifyEvent(EAnimNotify AnimNotifyEvent);                                                                     // [0x18e5cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsUnequipping
	// bool IsUnequipping();                                                                                                    // [0x18e5c80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.IsThirdPersonEquipMode
	// bool IsThirdPersonEquipMode(EWeaponEquipMode EquipMode);                                                                 // [0x18e5c00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsPreviewEquipMode
	// bool IsPreviewEquipMode(EWeaponEquipMode EquipMode);                                                                     // [0x18e5b80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsOnActiveWorld
	// bool IsOnActiveWorld();                                                                                                  // [0x18e5b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsNearbyEvidence
	// bool IsNearbyEvidence();                                                                                                 // [0x18e5b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.IsHealGun
	// bool IsHealGun();                                                                                                        // [0x18e5b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.IsFirstPersonEquipMode
	// bool IsFirstPersonEquipMode(EWeaponEquipMode EquipMode);                                                                 // [0x18e5a80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Indiana.Weapon.IsEquipping
	// bool IsEquipping();                                                                                                      // [0x18e5a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetWeaponModContainer
	// class UWeaponModContainer* GetWeaponModContainer();                                                                      // [0x18e5a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetWeaponEquipMode
	// EWeaponEquipMode GetWeaponEquipMode();                                                                                   // [0x18e5a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetStats
	// class URpgStatComponent* GetStats();                                                                                     // [0x18e59e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetRadialDamageOuterRadius
	// float GetRadialDamageOuterRadius();                                                                                      // [0x18e59b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetProjectileCollisionRadius
	// float GetProjectileCollisionRadius();                                                                                    // [0x18e5980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetPrimaryMode
	// class UWeaponMode* GetPrimaryMode();                                                                                     // [0x18e5920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetMesh
	// class UFPVSkeletalMeshComponent* GetMesh();                                                                              // [0x18e5960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetCurrentVisuals
	// class UPrimaryWeaponVisuals* GetCurrentVisuals();                                                                        // [0x18e5940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetCurrentMode
	// class UWeaponMode* GetCurrentMode();                                                                                     // [0x18e5920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetCharacterInfoComponent
	// class UCharacterInfoComponent* GetCharacterInfoComponent();                                                              // [0x18e5900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetAmmoPool
	// class UAmmoPoolBase* GetAmmoPool();                                                                                      // [0x18e58e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.Weapon.GetAISettings
	// class UAISettings_Weapon* GetAISettings(class AIndianaAiCharacter* InOwner);                                             // [0x18e5840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Indiana.AnimEventGameplayTagData
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimEventGameplayTagData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FGameplayTag)                              GameplayTag                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UBasePlayAnimEventEffect*)           AnimEventEffect                                             OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/Indiana.AnimEventGameplayTagContainer
/// Size: 0x0010 (0x000000 - 0x000010)
class FAnimEventGameplayTagContainer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FAnimEventGameplayTagData>)         AnimationData                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/Indiana.WeaponAnimations
/// Size: 0x00A0 (0x000200 - 0x0002A0)
class UWeaponAnimations : public UWeaponVisuals
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	DMember(bool)                                      bUseAltIKTargets                                            OFFSET(get<bool>, {0x200, 1, 0, 0})
	DMember(bool)                                      bDisableArmIK                                               OFFSET(get<bool>, {0x201, 1, 0, 0})
	CMember(class UAnimSequence*)                      JumpSequence                                                OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(class UAnimSequence*)                      FallSequence                                                OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(class UAnimSequence*)                      LandSequence                                                OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravJumpSequence                                         OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravFallSequence                                         OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravLandSequence                                         OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UDeathMontageSet*)                   DeathMontages                                               OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UAnimMontage*)                       CowerMontage                                                OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeLeftMontage                                            OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeRightMontage                                           OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeBackMontage                                            OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeForwardMontage                                         OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UAnimMontage*)                       TeleportEnterMontage                                        OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UAnimMontage*)                       TeleportEmergingMontage                                     OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UAnimMontage*)                       TeleportExitMontage                                         OFFSET(get<T>, {0x278, 8, 0, 0})
	SMember(FAnimEventGameplayTagContainer)            Disables                                                    OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	SMember(FAnimEventGameplayTagContainer)            OptionalAnimations                                          OFFSET(getStruct<T>, {0x290, 16, 0, 0})
};

/// Struct /Script/Indiana.HitFlinchAnim
/// Size: 0x0028 (0x000000 - 0x000028)
class FHitFlinchAnim : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayTagContainer)                     BodyParts                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(class UAnimMontage*)                       Anim                                                        OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Class /Script/Indiana.WeaponAnimationsCreature
/// Size: 0x0030 (0x0002A0 - 0x0002D0)
class UWeaponAnimationsCreature : public UWeaponAnimations
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(TArray<FHitFlinchAnim>)                    HitFlinches                                                 OFFSET(get<T>, {0x2A0, 16, 0, 0})
	CMember(TArray<FHitFlinchAnim>)                    BlockingHitFlinches                                         OFFSET(get<T>, {0x2B0, 16, 0, 0})
	DMember(float)                                     AimHorizontalOffset                                         OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     AimVerticalOffset                                           OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     AimSourceVerticalOffset                                     OFFSET(get<float>, {0x2C8, 4, 0, 0})
};

/// Class /Script/Indiana.WeaponAnimationSet
/// Size: 0x0038 (0x000038 - 0x000070)
class UWeaponAnimationSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UDeathMontageSet*)                   DeathMontages                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeLeftMontage                                            OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeRightMontage                                           OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeBackMontage                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     WalkSpeed                                                   OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     RunSpeed                                                    OFFSET(get<float>, {0x5C, 4, 0, 0})
	SMember(FAnimEventGameplayTagContainer)            Disables                                                    OFFSET(getStruct<T>, {0x60, 16, 0, 0})
};

/// Class /Script/Indiana.WeaponAnimationsFPV
/// Size: 0x01C0 (0x0002A0 - 0x000460)
class UWeaponAnimationsFPV : public UWeaponAnimations
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(class UAnimSequence*)                      RunSequence                                                 OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               RunDirectionAimOffset                                       OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UAnimSequence*)                      IdleSequence                                                OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class UBlendSpaceBase*)                    LocomotionBlendSpace                                        OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               LookAimOffset                                               OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UAnimMontage*)                       StartCrouch                                                 OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UAnimMontage*)                       StopCrouch                                                  OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UAnimSequence*)                      WeaponCharge                                                OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               HitReact                                                    OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UAnimMontage*)                       BlockStart                                                  OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UAnimSequence*)                      BlockIdle                                                   OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UAnimMontage*)                       BlockEnd                                                    OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UAnimMontage*)                       BlockHit                                                    OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UAnimSequence*)                      BlockRunSequence                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               BlockRunDirectionAimOffset                                  OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UBlendSpaceBase*)                    BlockLocomotionBlendSpace                                   OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               BlockLookAimOffset                                          OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeLeftBlockMontage                                       OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeRightBlockMontage                                      OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeBackBlockMontage                                       OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UAnimMontage*)                       DodgeForwardBlockMontage                                    OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UAnimSequence*)                      BlockJumpSequence                                           OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UAnimSequence*)                      BlockFallSequence                                           OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UAnimSequence*)                      BlockLandSequence                                           OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(float)                                     BlockJumpAdditiveScale                                      OFFSET(get<float>, {0x360, 4, 0, 0})
	CMember(class UAnimSequence*)                      LowGravBlockJumpSequence                                    OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravBlockFallSequence                                    OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravBlockLandSequence                                    OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UAnimMontage*)                       StartCrouchBlock                                            OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UAnimMontage*)                       StopCrouchBlock                                             OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UAnimSequence*)                      SprintSequence                                              OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UAnimSequence*)                      SprintStartSequence                                         OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UAnimSequence*)                      SprintEndSequence                                           OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravSprintSequence                                       OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravSprintStartSequence                                  OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravSprintEndSequence                                    OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UAnimSequence*)                      FineAimRunSequence                                          OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               FineAimRunDirectionAimOffset                                OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UAnimSequence*)                      FineAimIdleSequence                                         OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UBlendSpaceBase*)                    FineAimLocomotionBlendSpace                                 OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UAimOffsetBlendSpace*)               FineAimLookAimOffset                                        OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UAnimSequence*)                      FineAimJumpSequence                                         OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UAnimSequence*)                      FineAimFallSequence                                         OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UAnimSequence*)                      FineAimLandSequence                                         OFFSET(get<T>, {0x3F8, 8, 0, 0})
	DMember(float)                                     FineAimJumpAdditiveScale                                    OFFSET(get<float>, {0x400, 4, 0, 0})
	CMember(class UAnimSequence*)                      LowGravFineAimJumpSequence                                  OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravFineAimFallSequence                                  OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UAnimSequence*)                      LowGravFineAimLandSequence                                  OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UAnimMontage*)                       StartCrouchFineAim                                          OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UAnimMontage*)                       StopCrouchFineAim                                           OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UAnimSequence*)                      FineAimWeaponCharge                                         OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UAnimMontage*)                       FineAimDodgeForwardMontage                                  OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UAnimMontage*)                       FineAimDodgeLeftMontage                                     OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UAnimMontage*)                       FineAimDodgeRightMontage                                    OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UAnimMontage*)                       FineAimDodgeBackMontage                                     OFFSET(get<T>, {0x450, 8, 0, 0})
	DMember(float)                                     FineAimDodgeAdditiveScale                                   OFFSET(get<float>, {0x458, 4, 0, 0})
};

/// Class /Script/Indiana.WeaponAnimationsTPV
/// Size: 0x01C8 (0x0002D0 - 0x000498)
class UWeaponAnimationsTPV : public UWeaponAnimationsCreature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1176;

public:
	CMember(class UAimOffsetBlendSpace*)               CombatAimBlendSpace                                         OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   CombatIdleSequences                                         OFFSET(get<T>, {0x2D8, 16, 0, 0})
	CMember(class UAnimSequence*)                      CombatIdle                                                  OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UAnimSequence*)                      HobbledWalkForward                                          OFFSET(get<T>, {0x2F0, 8, 0, 0})
	DMember(float)                                     HobbledWalkForwardDistance                                  OFFSET(get<float>, {0x2F8, 4, 0, 0})
	CMember(class UAnimSequence*)                      CombatWalkForward                                           OFFSET(get<T>, {0x300, 8, 0, 0})
	DMember(float)                                     CombatWalkForwardDistance                                   OFFSET(get<float>, {0x308, 4, 0, 0})
	CMember(class UAnimSequence*)                      CombatRunForward                                            OFFSET(get<T>, {0x310, 8, 0, 0})
	DMember(float)                                     CombatRunForwardDistance                                    OFFSET(get<float>, {0x318, 4, 0, 0})
	CMember(class UBlendSpace1D*)                      ForwardBlendSpace                                           OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RunForwardBlendSpace                                        OFFSET(get<T>, {0x328, 8, 0, 0})
	DMember(float)                                     ForwardBlendMin                                             OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     ForwardBlendMax                                             OFFSET(get<float>, {0x334, 4, 0, 0})
	CMember(class UAnimSequence*)                      CombatWalkBackward                                          OFFSET(get<T>, {0x338, 8, 0, 0})
	DMember(float)                                     CombatWalkBackwardDistance                                  OFFSET(get<float>, {0x340, 4, 0, 0})
	CMember(class UAnimSequence*)                      CombatRunBackward                                           OFFSET(get<T>, {0x348, 8, 0, 0})
	DMember(float)                                     CombatRunBackwardDistance                                   OFFSET(get<float>, {0x350, 4, 0, 0})
	CMember(class UBlendSpace1D*)                      BackwardBlendSpace                                          OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RunBackwardBlendSpace                                       OFFSET(get<T>, {0x360, 8, 0, 0})
	DMember(float)                                     BackwardBlendMin                                            OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     BackwardBlendMax                                            OFFSET(get<float>, {0x36C, 4, 0, 0})
	CMember(class UAnimSequence*)                      CombatWalkLeft                                              OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(float)                                     CombatWalkLeftDistance                                      OFFSET(get<float>, {0x378, 4, 0, 0})
	CMember(class UAnimSequence*)                      CombatRunLeft                                               OFFSET(get<T>, {0x380, 8, 0, 0})
	DMember(float)                                     CombatRunLeftDistance                                       OFFSET(get<float>, {0x388, 4, 0, 0})
	CMember(class UBlendSpace1D*)                      LeftBlendSpace                                              OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RunLeftBlendSpace                                           OFFSET(get<T>, {0x398, 8, 0, 0})
	DMember(float)                                     LeftBlendMin                                                OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(float)                                     LeftBlendMax                                                OFFSET(get<float>, {0x3A4, 4, 0, 0})
	CMember(class UAnimSequence*)                      CombatWalkRight                                             OFFSET(get<T>, {0x3A8, 8, 0, 0})
	DMember(float)                                     CombatWalkRightDistance                                     OFFSET(get<float>, {0x3B0, 4, 0, 0})
	CMember(class UAnimSequence*)                      CombatRunRight                                              OFFSET(get<T>, {0x3B8, 8, 0, 0})
	DMember(float)                                     CombatRunRightDistance                                      OFFSET(get<float>, {0x3C0, 4, 0, 0})
	CMember(class UBlendSpace1D*)                      RightBlendSpace                                             OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      RunRightBlendSpace                                          OFFSET(get<T>, {0x3D0, 8, 0, 0})
	DMember(float)                                     RightBlendMin                                               OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(float)                                     RightBlendMax                                               OFFSET(get<float>, {0x3DC, 4, 0, 0})
	CMember(TArray<class UAnimSequence*>)              CombatTurnInPlace                                           OFFSET(get<T>, {0x3E0, 16, 0, 0})
	CMember(class UAnimSequence*)                      CombatCrouchStartSequence                                   OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatCrouchIdleSequence                                    OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UAnimSequence*)                      CombatCrouchEndSequence                                     OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UAnimSequence*)                      ReadyFireArmPose                                            OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UAnimSequence*)                      IdleFireArmPose                                             OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UAnimSequence*)                      WeaponDownWalkArm                                           OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UAnimSequence*)                      WeaponDownRunArm                                            OFFSET(get<T>, {0x420, 8, 0, 0})
	DMember(float)                                     ReadyFireDelay                                              OFFSET(get<float>, {0x428, 4, 0, 0})
	CMember(class UAnimSequence*)                      BlockStartSequence                                          OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UAnimSequence*)                      BlockIdleSequence                                           OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UAnimSequence*)                      SearchingStartSequence                                      OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   SearchingIdleSequences                                      OFFSET(get<T>, {0x448, 16, 0, 0})
	CMember(TArray<FRandomPlayerSequenceEntryNamed>)   DeadBodySearchSequences                                     OFFSET(get<T>, {0x458, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               GetUpFromFaceDownPose                                       OFFSET(get<T>, {0x468, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               GetUpFromFaceUpPose                                         OFFSET(get<T>, {0x478, 16, 0, 0})
	DMember(float)                                     AuthoredWalkSpeed                                           OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     AuthoredRunSpeed                                            OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     RunSpeedThreshold                                           OFFSET(get<float>, {0x490, 4, 0, 0})
};

/// Class /Script/Indiana.WeaponAnimInstance
/// Size: 0x0048 (0x0002C8 - 0x000310)
class UWeaponAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UWeapon*)                            Weapon                                                      OFFSET(get<T>, {0x2C8, 8, 0, 0})
	DMember(float)                                     WeaponCharge                                                OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     AmmoGaugeAlpha                                              OFFSET(get<float>, {0x2D4, 4, 0, 0})
	CMember(EIndianaDamageType)                        PrimaryDamageType                                           OFFSET(get<T>, {0x2D8, 1, 0, 0})
	CMember(EIndianaDamageType)                        SecondaryDamageType                                         OFFSET(get<T>, {0x2D9, 1, 0, 0})
	DMember(bool)                                      WeaponIsSwinging                                            OFFSET(get<bool>, {0x2DA, 1, 0, 0})
	DMember(float)                                     SpinProgress                                                OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(bool)                                      ForceSpin                                                   OFFSET(get<bool>, {0x2E0, 1, 0, 0})
	DMember(bool)                                      SpinningUp                                                  OFFSET(get<bool>, {0x2E1, 1, 0, 0})
	DMember(float)                                     ProjectileCharge                                            OFFSET(get<float>, {0x2E4, 4, 0, 0})
	SMember(FVector)                                   WeaponOffset                                                OFFSET(getStruct<T>, {0x2E8, 12, 0, 0})
	SMember(FRotator)                                  WeaponRotation                                              OFFSET(getStruct<T>, {0x2F4, 12, 0, 0})
	SMember(FVector)                                   WeaponScale                                                 OFFSET(getStruct<T>, {0x300, 12, 0, 0})


	/// Functions
	// Function /Script/Indiana.WeaponAnimInstance.WeaponCharging
	// bool WeaponCharging();                                                                                                   // [0x18e9a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.WeaponAudio
/// Size: 0x0000 (0x000200 - 0x000200)
class UWeaponAudio : public UWeaponVisuals
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
};

/// Struct /Script/Indiana.WeaponModDefaultVisuals
/// Size: 0x0028 (0x000000 - 0x000028)
class FWeaponModDefaultVisuals : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FGameplayTagContainer)                     WeaponCategories                                            OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	CMember(class UModVisual*)                         DefaultVisuals                                              OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Class /Script/Indiana.WeaponMod
/// Size: 0x00B8 (0x000118 - 0x0001D0)
class UWeaponMod : public UItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(TWeakObjectPtr<class UStaticMesh*>)        PickupMesh                                                  OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           EquippableWeapons                                           OFFSET(get<T>, {0x140, 16, 0, 0})
	SMember(FGameplayTagContainer)                     EquippableCategories                                        OFFSET(getStruct<T>, {0x150, 32, 0, 0})
	CMember(EModSlot)                                  ModificationSlot                                            OFFSET(get<T>, {0x170, 1, 0, 0})
	CMember(class UClass*)                             DamageTypeOverride                                          OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(TWeakObjectPtr<class UScopeData*>)         ScopeData                                                   OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TArray<FStatModifierDescription>)          WeaponStatModifiers                                         OFFSET(get<T>, {0x1A8, 16, 0, 0})
	CMember(TArray<FWeaponModDefaultVisuals>)          DefaultWeaponVisuals                                        OFFSET(get<T>, {0x1B8, 16, 0, 0})
	CMember(class UClass*)                             Spell                                                       OFFSET(get<T>, {0x1C8, 8, 0, 0})
};

/// Class /Script/Indiana.RangedBarrelMod
/// Size: 0x0000 (0x0001D0 - 0x0001D0)
class URangedBarrelMod : public UWeaponMod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Class /Script/Indiana.RangedUnderbarrelMod
/// Size: 0x0000 (0x0001D0 - 0x0001D0)
class URangedUnderbarrelMod : public UWeaponMod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Class /Script/Indiana.RangedSightMod
/// Size: 0x0000 (0x0001D0 - 0x0001D0)
class URangedSightMod : public UWeaponMod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Class /Script/Indiana.RangedMagazineMod
/// Size: 0x0000 (0x0001D0 - 0x0001D0)
class URangedMagazineMod : public UWeaponMod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Class /Script/Indiana.MeleeGripMod
/// Size: 0x0000 (0x0001D0 - 0x0001D0)
class UMeleeGripMod : public UWeaponMod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Class /Script/Indiana.MeleeAttackMod
/// Size: 0x0000 (0x0001D0 - 0x0001D0)
class UMeleeAttackMod : public UWeaponMod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
};

/// Struct /Script/Indiana.WeaponModSlot
/// Size: 0x0058 (0x000000 - 0x000058)
class FWeaponModSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UModVisual*)                         SlotDefaultVisuals                                          OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(bool)                                      bModdable                                                   OFFSET(get<bool>, {0x10, 1, 0, 0})
	CMember(class UClass*)                             DefaultMod                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UWeaponMod*)                         CurrentMod                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UModVisual*)                         CurrentVisuals                                              OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UModVisual*)                         PendingRemovalVisuals                                       OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/Indiana.WeaponModVisualOverride
/// Size: 0x0018 (0x000000 - 0x000018)
class FWeaponModVisualOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<TSoftObjectPtr<UClass*>>)           Mods                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(class UModVisual*)                         VisualOverride                                              OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Indiana.WeaponModProjectileOverride
/// Size: 0x0060 (0x000000 - 0x000060)
class FWeaponModProjectileOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<TSoftObjectPtr<UClass*>>)           Mods                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             OverrideProjectileClass                                     OFFSET(get<T>, {0x10, 40, 0, 0})
	CMember(TWeakObjectPtr<class UInstantHitData*>)    OverrideInstantHitData                                      OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/Indiana.WeaponModContainer
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UWeaponModContainer : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TMap<EModSlot, FWeaponModSlot>)            ModSlots                                                    OFFSET(get<T>, {0x30, 80, 0, 0})
	CMember(TArray<FWeaponModVisualOverride>)          ModVisualOverrides                                          OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FWeaponModProjectileOverride>)      ProjectileOverrides                                         OFFSET(get<T>, {0x90, 16, 0, 0})
};

/// Class /Script/Indiana.WeaponRadialSectionWidget
/// Size: 0x0010 (0x000288 - 0x000298)
class UWeaponRadialSectionWidget : public URadialSectionWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(class UVerticalBox*)                       VerticalBox                                                 OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UImage*)                             Image                                                       OFFSET(get<T>, {0x290, 8, 0, 0})
};

/// Class /Script/Indiana.WeaponSelectWidget
/// Size: 0x0190 (0x000300 - 0x000490)
class UWeaponSelectWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	SMember(FMulticastInlineDelegate)                  OnSetWeaponEquippedDelegate                                 OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSetAmmoEquippedDelegate                                   OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	CMember(class URadialWidget*)                      Radial                                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UWeaponRadialSectionWidget*)         WeaponSection0                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UWeaponRadialSectionWidget*)         WeaponSection1                                              OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UWeaponRadialSectionWidget*)         WeaponSection2                                              OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UWeaponRadialSectionWidget*)         WeaponSection3                                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UAmmoRadialSectionWidget*)           AmmoSection0                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UAmmoRadialSectionWidget*)           AmmoSection1                                                OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UAmmoRadialSectionWidget*)           AmmoSection2                                                OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class URadialBackgroundSectionWidget*)     Section0                                                    OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class URadialBackgroundSectionWidget*)     Section1                                                    OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class URadialBackgroundSectionWidget*)     Section2                                                    OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class URadialBackgroundSectionWidget*)     Section3                                                    OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class URadialBackgroundSectionWidget*)     Section4                                                    OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class URadialBackgroundSectionWidget*)     Section5                                                    OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class URadialBackgroundSectionWidget*)     Section6                                                    OFFSET(get<T>, {0x390, 8, 0, 0})


	/// Functions
	// Function /Script/Indiana.WeaponSelectWidget.OnInputBack
	// void OnInputBack();                                                                                                      // [0x18e9900] Final|Native|Protected 
	// Function /Script/Indiana.WeaponSelectWidget.IsWeaponSectionValid
	// bool IsWeaponSectionValid(int32_t Index);                                                                                // [0x18e97d0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponSelectWidget.IsSectionValid
	// bool IsSectionValid(int32_t Index);                                                                                      // [0x18e9730] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponSelectWidget.IsAmmoSectionValid
	// bool IsAmmoSectionValid(int32_t Index);                                                                                  // [0x18e9600] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Indiana.WeaponSelectWidget.HasAmmo
	// bool HasAmmo();                                                                                                          // [0x18e95d0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Indiana.WeaponStateWidget
/// Size: 0x0030 (0x000300 - 0x000330)
class UWeaponStateWidget : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(class UTextBlockBase*)                     WeaponValueTextBlock                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UTextBlockBase*)                     WeaponValueMaxTextBlock                                     OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UHorizontalBox*)                     MaxAmmoContainer                                            OFFSET(get<T>, {0x318, 8, 0, 0})
};

/// Class /Script/Indiana.WeaponStateWidgetComponent
/// Size: 0x0010 (0x000670 - 0x000680)
class UWeaponStateWidgetComponent : public UIndianaWidgetComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
	DMember(float)                                     FineAimScale                                                OFFSET(get<float>, {0x670, 4, 0, 0})
};

/// Class /Script/Indiana.WeaponStatusEffectApplier
/// Size: 0x0018 (0x000048 - 0x000060)
class UWeaponStatusEffectApplier : public UStatusEffectApplier
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UStatusEffect*)                      WeaponFireEffect                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UStatusEffect*)                      WeaponHitTargetEffect                                       OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/Indiana.WeaponVisualStateModVisual
/// Size: 0x0010 (0x000068 - 0x000078)
class UWeaponVisualStateModVisual : public UModVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     Event                                                       OFFSET(getStruct<T>, {0x68, 8, 0, 0})
};

/// Class /Script/Indiana.WindowsSaveGameManager
/// Size: 0x0020 (0x000690 - 0x0006B0)
class UWindowsSaveGameManager : public USaveGameManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1712;

public:
};

/// Class /Script/Indiana.Workbench
/// Size: 0x0010 (0x0002B8 - 0x0002C8)
class AWorkbench : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(class UInteractableComponent*)             InteractableComponent                                       OFFSET(get<T>, {0x2C0, 8, 0, 0})
};

/// Class /Script/Indiana.WorkbenchTransactionDetails
/// Size: 0x0000 (0x000300 - 0x000300)
class UWorkbenchTransactionDetails : public UIndianaUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
};

/// Class /Script/Indiana.WorkbenchWidget
/// Size: 0x0050 (0x000308 - 0x000358)
class UWorkbenchWidget : public UIndianaInterfaceUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(class UWBModificationPageWidget*)          ModificationPage                                            OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UWBUpgradePageWidget*)               UpgradePage                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UWBRepairPageWidget*)                RepairPage                                                  OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UWBBreakdownPageWidget*)             BreakdownPage                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UNavigationGroupWidget*)             NavigationBar                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UScrollBox*)                         PageScrollBox                                               OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UScrollingWidgetGroup*)              ScrollingWidgetGroup                                        OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UPlayerStatsWidget*)                 PlayerStats                                                 OFFSET(get<T>, {0x348, 8, 0, 0})
};

/// Struct /Script/Indiana.HitTypeData
/// Size: 0x0020 (0x000000 - 0x000020)
class FHitTypeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UCurveVector*)                       Curve                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     AnimationDuration                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     HorizontalMovementScalarMin                                 OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     HorizontalMovementScalarMax                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     VerticalMovementScalarMin                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     VerticalMovementScalarMax                                   OFFSET(get<float>, {0x18, 4, 0, 0})
	CMember(ETextDirectionType)                        TextMovementDirectionType                                   OFFSET(get<T>, {0x1C, 1, 0, 0})
};

/// Struct /Script/Indiana.DamageTypeColors
/// Size: 0x0002 (0x000000 - 0x000002)
class FDamageTypeColors : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(EIndianaUIColorType)                       TextColor                                                   OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EIndianaUIColorType)                       OutlineColor                                                OFFSET(get<T>, {0x1, 1, 0, 0})
};

/// Class /Script/Indiana.WorldSpaceDamageTextGenerator
/// Size: 0x00D0 (0x000030 - 0x000100)
class UWorldSpaceDamageTextGenerator : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FHitTypeData)                              WeakspotHits                                                OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	SMember(FHitTypeData)                              StandardHits                                                OFFSET(getStruct<T>, {0x50, 32, 0, 0})
	SMember(FHitTypeData)                              GrazeHits                                                   OFFSET(getStruct<T>, {0x70, 32, 0, 0})
	CMember(TMap<EIndianaDamageType, FDamageTypeColors>) DamageTypeColors                                          OFFSET(get<T>, {0x90, 80, 0, 0})
	SMember(FDamageTypeColors)                         HealingColor                                                OFFSET(getStruct<T>, {0xE0, 2, 0, 0})
	DMember(float)                                     PlayerTextScalar                                            OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     CompanionTextScalar                                         OFFSET(get<float>, {0xE8, 4, 0, 0})
	CMember(class UClass*)                             DamageTextSubclass                                          OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UActorPool*)                         DamageTextPool                                              OFFSET(get<T>, {0xF8, 8, 0, 0})
};

/// Class /Script/Indiana.WorldSpaceDamageWidgetComponent
/// Size: 0x0010 (0x000670 - 0x000680)
class UWorldSpaceDamageWidgetComponent : public UIndianaWidgetComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1664;

public:
};

/// Class /Script/Indiana.WormAnimInstance
/// Size: 0x0050 (0x000950 - 0x0009A0)
class UWormAnimInstance : public UTPVAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2464;

public:
	DMember(float)                                     IKStrength                                                  OFFSET(get<float>, {0x95C, 4, 0, 0})
	DMember(float)                                     HipBlendSpeed                                               OFFSET(get<float>, {0x960, 4, 0, 0})
	SMember(FVector)                                   HipOffset                                                   OFFSET(getStruct<T>, {0x964, 12, 0, 0})
	CMember(TArray<class UAnimSequence*>)              LocomotionTurnInPlace                                       OFFSET(get<T>, {0x970, 16, 0, 0})
	CMember(TArray<class UAnimSequence*>)              CombatTurnInPlace                                           OFFSET(get<T>, {0x980, 16, 0, 0})
	DMember(bool)                                      bIsTeleporting                                              OFFSET(get<bool>, {0x990, 1, 0, 0})
	CMember(class UAnimSequence*)                      TeleportIdleAnim                                            OFFSET(get<T>, {0x998, 8, 0, 0})
};

/// Struct /Script/Indiana.CauseDamageInfo
/// Size: 0x0110 (0x000000 - 0x000110)
class FCauseDamageInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(TWeakObjectPtr<class AController*>)        InstigatorController                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             SourceActor                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             Target                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(EDamageEventType)                          DamageEventType                                             OFFSET(get<T>, {0x18, 1, 0, 0})
	DMember(float)                                     DesiredDamage                                               OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     ActualDamage                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	SMember(FVector_NetQuantize)                       ImpactLocation                                              OFFSET(getStruct<T>, {0x28, 12, 0, 0})
	SMember(FVector_NetQuantize)                       ImpactDirection                                             OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	SMember(FName)                                     HitBone                                                     OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPhysicalMaterial*>)  HitPhysMaterial                                             OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FGameplayTag)                              BodyPartHit                                                 OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(class UClass*)                             DamageType                                                  OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FGameplayTag)                              WeaponCategory                                              OFFSET(getStruct<T>, {0x60, 8, 0, 0})
};

/// Struct /Script/Indiana.ItemStackSplit
/// Size: 0x0018 (0x000000 - 0x000018)
class FItemStackSplit : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FItemStack)                                ItemStack                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   SplitCount                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/Indiana.InteractionDescription
/// Size: 0x0028 (0x000000 - 0x000028)
class FInteractionDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class AActor*)                             Interactee                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class AIndianaCharacter*)                  Initiator                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(EInteractionType)                          Interaction                                                 OFFSET(get<T>, {0x10, 1, 0, 0})
	CMember(TWeakObjectPtr<class UInteractableComponent*>) Interactable                                            OFFSET(get<T>, {0x14, 8, 0, 0})
};

/// Struct /Script/Indiana.ComponentEvent
/// Size: 0x0030 (0x000000 - 0x000030)
class FComponentEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UWidget*)                            Dispatcher                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/Indiana.ButtonEvent
/// Size: 0x0000 (0x000030 - 0x000030)
class FButtonEvent : public FComponentEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Indiana.SliderEvent
/// Size: 0x0008 (0x000030 - 0x000038)
class FSliderEvent : public FComponentEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/Indiana.AchievementProgress
/// Size: 0x0004 (0x000000 - 0x000004)
class FAchievementProgress : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
};

/// Struct /Script/Indiana.AIDetectionData
/// Size: 0x0018 (0x000000 - 0x000018)
class FAIDetectionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.AISoundDetectionData
/// Size: 0x0028 (0x000018 - 0x000040)
class FAISoundDetectionData : public FAIDetectionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(ESoundDetectionType)                       SoundType                                                   OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             ShoutTarget                                                 OFFSET(get<T>, {0x1C, 8, 0, 0})
};

/// Struct /Script/Indiana.JointDriverData
/// Size: 0x0090 (0x000000 - 0x000090)
class FJointDriverData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FName)                                     IKChainName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(EFootID)                                   FootID                                                      OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     FootDownDistance                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     FootUpDistance                                              OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FBoneReference)                            BoneThatWillBeIKed                                          OFFSET(getStruct<T>, {0x14, 16, 0, 0})
	SMember(FBoneReference)                            BoneToModify                                                OFFSET(getStruct<T>, {0x24, 16, 0, 0})
	SMember(FBoneReference)                            UpperLegJoint                                               OFFSET(getStruct<T>, {0x34, 16, 0, 0})
	SMember(FBoneReference)                            HipBoneToUseForHeightCalculation                            OFFSET(getStruct<T>, {0x44, 16, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_BatchJointDriver
/// Size: 0x0118 (0x0000C8 - 0x0001E0)
class FAnimNode_BatchJointDriver : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(TArray<FJointDriverData>)                  Legs                                                        OFFSET(get<T>, {0xC8, 16, 0, 0})
	DMember(float)                                     PlantRollAmount                                             OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     MaxPitchClamp                                               OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(float)                                     MinPitchClamp                                               OFFSET(get<float>, {0xE0, 4, 0, 0})
	SMember(FName)                                     BackLeftName                                                OFFSET(getStruct<T>, {0xE4, 8, 0, 0})
	SMember(FName)                                     BackRightName                                               OFFSET(getStruct<T>, {0xEC, 8, 0, 0})
	SMember(FName)                                     FrontLeftName                                               OFFSET(getStruct<T>, {0xF4, 8, 0, 0})
	SMember(FName)                                     FrontRightName                                              OFFSET(getStruct<T>, {0xFC, 8, 0, 0})
	DMember(float)                                     MaxHeightCompensation                                       OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(bool)                                      SetTransformOnMiss                                          OFFSET(get<bool>, {0x108, 1, 0, 0})
	DMember(bool)                                      bDoHeightCompensation                                       OFFSET(get<bool>, {0x109, 1, 0, 0})
	DMember(float)                                     GroundRollMultiplier                                        OFFSET(get<float>, {0x10C, 4, 0, 0})
	SMember(FBoneReference)                            HipBoneToModify                                             OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FBoneReference)                            BipedHipCounterBone                                         OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FBoneReference)                            ConversationCameraBone                                      OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	DMember(float)                                     HipAdjustRange                                              OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     HipTranslationSpeedRun                                      OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     HipTranslationSpeedIdle                                     OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     HipLimitSpeedRun                                            OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     HipRotationSpeedRun                                         OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     HipTranslationSpeed                                         OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     HipLimitSpeed                                               OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     HipRotationSpeed                                            OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     FootTranslationSpeed                                        OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     FootTranslationSpeedRun                                     OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(float)                                     FootRotationSpeed                                           OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     FootRotationSpeedRun                                        OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(float)                                     MaxTickBeforeReset                                          OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(bool)                                      bIgnoreNormalRays                                           OFFSET(get<bool>, {0x174, 1, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_BatchModify
/// Size: 0x0010 (0x0000C8 - 0x0000D8)
class FAnimNode_BatchModify : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
};

/// Struct /Script/Indiana.AnimNode_BoneMatch
/// Size: 0x0068 (0x0000C8 - 0x000130)
class FAnimNode_BoneMatch : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FBoneReference)                            SourceBone                                                  OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FBoneReference)                            TargetBone                                                  OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_CurveSlot
/// Size: 0x00A0 (0x000010 - 0x0000B0)
class FAnimNode_CurveSlot : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FPoseLink)                                 Source                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     SlotName                                                    OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	DMember(bool)                                      bAlwaysUpdateSourcePose                                     OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_EyeLidLimitEntry
/// Size: 0x005C (0x000000 - 0x00005C)
class FAnimNode_EyeLidLimitEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 92;

public:
	SMember(FBoneReference)                            UpperEyelidBone                                             OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FBoneReference)                            UpperEyelidMidBone                                          OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FBoneReference)                            LowerEyelidBone                                             OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FBoneReference)                            LowerEyelidMidBone                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      bFlipAngles                                                 OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_EyeLidLimits
/// Size: 0x0020 (0x0000C8 - 0x0000E8)
class FAnimNode_EyeLidLimits : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	DMember(float)                                     UpperLidCorrectAmount                                       OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     OverlapDistance                                             OFFSET(get<float>, {0xCC, 4, 0, 0})
	CMember(TArray<FAnimNode_EyeLidLimitEntry>)        EyeLidEntries                                               OFFSET(get<T>, {0xD0, 16, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_EyeLookAt
/// Size: 0x00F8 (0x0000C8 - 0x0001C0)
class FAnimNode_EyeLookAt : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	SMember(FBoneReference)                            BoneToModify                                                OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FBoneReference)                            LookAtBone                                                  OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FName)                                     LookAtSocket                                                OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	SMember(FVector)                                   LookAtLocation                                              OFFSET(getStruct<T>, {0xF0, 12, 0, 0})
	CMember(TEnumAsByte<EAxisOption>)                  LookAtAxis                                                  OFFSET(get<T>, {0xFC, 1, 0, 0})
	DMember(bool)                                      bUseLookUpAxis                                              OFFSET(get<bool>, {0xFD, 1, 0, 0})
	CMember(TEnumAsByte<EAxisOption>)                  LookUpAxis                                                  OFFSET(get<T>, {0xFE, 1, 0, 0})
	DMember(float)                                     LookAtClampUp                                               OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     LookAtClampRight                                            OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     InterpolationTime                                           OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(bool)                                      bEnableDebug                                                OFFSET(get<bool>, {0x10C, 1, 0, 0})
	DMember(bool)                                      bClearRotationFirst                                         OFFSET(get<bool>, {0x10D, 1, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_JointDriver
/// Size: 0x00A8 (0x0000C8 - 0x000170)
class FAnimNode_JointDriver : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FName)                                     IKChainName                                                 OFFSET(getStruct<T>, {0xC8, 8, 0, 0})
	CMember(EFootID)                                   FootID                                                      OFFSET(get<T>, {0xD0, 1, 0, 0})
	DMember(float)                                     FootDownDistance                                            OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     FootUpDistance                                              OFFSET(get<float>, {0xD8, 4, 0, 0})
	SMember(FBoneReference)                            BoneThatWillBeIKed                                          OFFSET(getStruct<T>, {0xDC, 16, 0, 0})
	SMember(FBoneReference)                            BoneToModify                                                OFFSET(getStruct<T>, {0xEC, 16, 0, 0})
	SMember(FBoneReference)                            UpperLegJoint                                               OFFSET(getStruct<T>, {0xFC, 16, 0, 0})
	SMember(FBoneReference)                            HipBoneToUseForHeightCalculation                            OFFSET(getStruct<T>, {0x10C, 16, 0, 0})
	DMember(float)                                     PlantRollAmount                                             OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     MaxPitchClamp                                               OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     MinPitchClamp                                               OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(float)                                     MaxHeightCompensation                                       OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(bool)                                      SetTransformOnMiss                                          OFFSET(get<bool>, {0x12C, 1, 0, 0})
	DMember(bool)                                      bDoHeightCompensation                                       OFFSET(get<bool>, {0x12D, 1, 0, 0})
	DMember(bool)                                      bPerformVelocityCompensation                                OFFSET(get<bool>, {0x12E, 1, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_LocomotionPlay
/// Size: 0x0010 (0x000080 - 0x000090)
class FAnimNode_LocomotionPlay : public FAnimNode_SequencePlayer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(int32_t)                                   CurrentSlot                                                 OFFSET(get<int32_t>, {0x80, 4, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_RandomSequenceNamed
/// Size: 0x0078 (0x000010 - 0x000088)
class FAnimNode_RandomSequenceNamed : public FAnimNode_Base
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(bool)                                      bShuffleMode                                                OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bRandomTimeOnInitialize                                     OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(float)                                     RandomTimePercentage                                        OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     RandomTimeStart                                             OFFSET(get<float>, {0x18, 4, 0, 0})
	SMember(FName)                                     ListName                                                    OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
	SMember(FName)                                     SetUpdateName                                               OFFSET(getStruct<T>, {0x24, 8, 0, 0})
	DMember(float)                                     PlayRate                                                    OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Struct /Script/Indiana.AnimNode_RotateBoneAboutBone
/// Size: 0x0038 (0x0000C8 - 0x000100)
class FAnimNode_RotateBoneAboutBone : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FBoneReference)                            SourceBone                                                  OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FBoneReference)                            TargetBone                                                  OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xE8, 12, 0, 0})
};

/// Struct /Script/Indiana.BannedNameReaderData
/// Size: 0x0010 (0x000008 - 0x000018)
class FBannedNameReaderData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.TrackingRegion
/// Size: 0x00F0 (0x000000 - 0x0000F0)
class FTrackingRegion : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
};

/// Struct /Script/Indiana.BodyTrackingRegion
/// Size: 0x0028 (0x0000F0 - 0x000118)
class FBodyTrackingRegion : public FTrackingRegion
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(class ULocomotionLogicComponent*)          LocomotionLogic                                             OFFSET(get<T>, {0x108, 8, 0, 0})
};

/// Struct /Script/Indiana.CharacterCreationAttributeData
/// Size: 0x0050 (0x000000 - 0x000050)
class FCharacterCreationAttributeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<EAttribute, ECharacterAttributeRange>) AttributeValues                                            OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/Indiana.CharacterCreationSkillData
/// Size: 0x0020 (0x000000 - 0x000020)
class FCharacterCreationSkillData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<ESkillCategory>)                    StartingSkillCategories                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.CharacterCreationPerkData
/// Size: 0x0010 (0x000000 - 0x000010)
class FCharacterCreationPerkData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UClass*>)                     SelectedPerks                                               OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/Indiana.CreationTemplate
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FCreationTemplate : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FLocString)                                TitleTextReference                                          OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FLocString)                                BodyTextReference                                           OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(class UClass*)                             Aptitude                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FCharacterCreationAttributeData)           AttributeData                                               OFFSET(getStruct<T>, {0x18, 80, 0, 0})
	SMember(FCharacterCreationSkillData)               SkillData                                                   OFFSET(getStruct<T>, {0x68, 32, 0, 0})
	SMember(FCharacterCreationPerkData)                PerkData                                                    OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	CMember(class UAppearancePreset*)                  AppearancePreset                                            OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(bool)                                      bIsCustomCharacter                                          OFFSET(get<bool>, {0xA0, 1, 0, 0})
};

/// Struct /Script/Indiana.AttributeMetaData
/// Size: 0x0002 (0x000000 - 0x000002)
class FAttributeMetaData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	DMember(char)                                      PointedAttributeIndex                                       OFFSET(get<char>, {0x0, 1, 0, 0})
	DMember(bool)                                      bPointIsUp                                                  OFFSET(get<bool>, {0x1, 1, 0, 0})
};

/// Struct /Script/Indiana.ScannerData
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FScannerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
};

/// Struct /Script/Indiana.ScannerArmorData
/// Size: 0x0060 (0x000000 - 0x000060)
class FScannerArmorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Indiana.ChatterCooldownSet
/// Size: 0x0028 (0x000008 - 0x000030)
class FChatterCooldownSet : public FGameDataStructure
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Indiana.ChatterCooldownSettings
/// Size: 0x0010 (0x000008 - 0x000018)
class FChatterCooldownSettings : public FGameDataStructure
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.ChatterEventsGameDataReferenceID
/// Size: 0x0000 (0x000018 - 0x000018)
class FChatterEventsGameDataReferenceID : public FGameDataReferenceID
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.CompanionCommandMoveToLocation
/// Size: 0x0040 (0x000000 - 0x000040)
class FCompanionCommandMoveToLocation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Struct /Script/Indiana.LocationCost
/// Size: 0x0010 (0x000000 - 0x000010)
class FLocationCost : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Indiana.AddictionModifier
/// Size: 0x000C (0x000000 - 0x00000C)
class FAddictionModifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FGameplayTag)                              AddictionTag                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     AmountToRemove                                              OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Indiana.NodeConfig
/// Size: 0x0018 (0x000000 - 0x000018)
class FNodeConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bOverrideCameraProperties                                   OFFSET(get<bool>, {0x1, 1, 0, 0})
	SMember(FCameraProperties)                         CameraProperties                                            OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/Indiana.ReceiveDamageData
/// Size: 0x0048 (0x000000 - 0x000048)
class FReceiveDamageData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Struct /Script/Indiana.IndianaGenericDamageEvent
/// Size: 0x00C8 (0x000010 - 0x0000D8)
class FIndianaGenericDamageEvent : public FDamageEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
};

/// Struct /Script/Indiana.IndianaPointDamageEvent
/// Size: 0x00C8 (0x0000A8 - 0x000170)
class FIndianaPointDamageEvent : public FPointDamageEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
};

/// Struct /Script/Indiana.IndianaRadialDamageEvent
/// Size: 0x00C8 (0x000040 - 0x000108)
class FIndianaRadialDamageEvent : public FRadialDamageEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
};

/// Struct /Script/Indiana.DeathPoseData
/// Size: 0x0068 (0x000000 - 0x000068)
class FDeathPoseData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Struct /Script/Indiana.DeathBodyInstanceData
/// Size: 0x0060 (0x000000 - 0x000060)
class FDeathBodyInstanceData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/Indiana.EventEffectParams
/// Size: 0x0080 (0x000000 - 0x000080)
class FEventEffectParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
};

/// Struct /Script/Indiana.EyesTrackingRegion
/// Size: 0x0000 (0x0000F0 - 0x0000F0)
class FEyesTrackingRegion : public FTrackingRegion
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
};

/// Struct /Script/Indiana.FaceFxRigsGameDataReferenceID
/// Size: 0x0000 (0x000018 - 0x000018)
class FFaceFxRigsGameDataReferenceID : public FGameDataReferenceID
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.FaceFxRigStructure
/// Size: 0x0018 (0x000008 - 0x000020)
class FFaceFxRigStructure : public FGameDataStructure
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Indiana.BlockedActorData
/// Size: 0x0028 (0x000000 - 0x000028)
class FBlockedActorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   Slot                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EEntryLocationStatus)                      LocationStatus                                              OFFSET(get<T>, {0x4, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<AActor*>>)           BlockingActors                                              OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UPrimitiveComponent*>>) BlockingComponents                                       OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/Indiana.DelayedEventData
/// Size: 0x0020 (0x000000 - 0x000020)
class FDelayedEventData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Indiana.ReputationActionModifiers
/// Size: 0x000C (0x000000 - 0x00000C)
class FReputationActionModifiers : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     BribeModifier                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TalkModifier                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     FightModifier                                               OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Indiana.MeleeAnim
/// Size: 0x000C (0x000000 - 0x00000C)
class FMeleeAnim : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(EWeaponEvent)                              WeaponEvent                                                 OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     AnimTime                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      bLoop                                                       OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bSkippable                                                  OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bSkipIfHoldReleased                                         OFFSET(get<bool>, {0xA, 1, 0, 0})
};

/// Struct /Script/Indiana.TransitionGroupElement
/// Size: 0x0010 (0x000000 - 0x000010)
class FTransitionGroupElement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Indiana.HeadTrackingRegion
/// Size: 0x0060 (0x0000F0 - 0x000150)
class FHeadTrackingRegion : public FTrackingRegion
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Struct /Script/Indiana.PerceptionRangeScalar
/// Size: 0x0030 (0x000000 - 0x000030)
class FPerceptionRangeScalar : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Indiana.IndianaAINoiseEvent
/// Size: 0x0000 (0x000030 - 0x000030)
class FIndianaAINoiseEvent : public FAINoiseEvent
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Indiana.CompanionInfo
/// Size: 0x000C (0x000000 - 0x00000C)
class FCompanionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Health                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     DTBody                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     DTHead                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/Indiana.TrajectoryResult
/// Size: 0x0010 (0x000000 - 0x000010)
class FTrajectoryResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Indiana.InteractPayloadParamDescription
/// Size: 0x0020 (0x000000 - 0x000020)
class FInteractPayloadParamDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Indiana.NavigationCategory
/// Size: 0x0090 (0x000000 - 0x000090)
class FNavigationCategory : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FLocString)                                Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x8, 136, 0, 0})
};

/// Struct /Script/Indiana.MeleeEQSResult
/// Size: 0x0010 (0x000000 - 0x000010)
class FMeleeEQSResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Indiana.MeleeAttacker
/// Size: 0x0018 (0x000000 - 0x000018)
class FMeleeAttacker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.ObjectRefCounter
/// Size: 0x0030 (0x000000 - 0x000030)
class FObjectRefCounter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/Indiana.ObjectiveWaypointGameDataReferenceID
/// Size: 0x0000 (0x000018 - 0x000018)
class FObjectiveWaypointGameDataReferenceID : public FGameDataReferenceID
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.RandomBank
/// Size: 0x0018 (0x000008 - 0x000020)
class FRandomBank : public FGameDataStructure
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Indiana.RandomBankGameDataReferenceID
/// Size: 0x0000 (0x000018 - 0x000018)
class FRandomBankGameDataReferenceID : public FGameDataReferenceID
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.RandomTextEntry
/// Size: 0x0008 (0x000008 - 0x000010)
class FRandomTextEntry : public FGameDataStructure
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Indiana.SharedStateStubData
/// Size: 0x001C (0x000000 - 0x00001C)
class FSharedStateStubData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
};

/// Struct /Script/Indiana.SaveGameGeneralMetadata
/// Size: 0x00E8 (0x000000 - 0x0000E8)
class FSaveGameGeneralMetadata : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
};

/// Struct /Script/Indiana.LevelReference
/// Size: 0x0028 (0x000000 - 0x000028)
class FLevelReference : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Indiana.GenericGameStateHeader
/// Size: 0x000C (0x000000 - 0x00000C)
class FGenericGameStateHeader : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/Indiana.GenericVersionedGameStateHeader
/// Size: 0x0004 (0x00000C - 0x000010)
class FGenericVersionedGameStateHeader : public FGenericGameStateHeader
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Indiana.CompanionGameStateHeader
/// Size: 0x0030 (0x000010 - 0x000040)
class FCompanionGameStateHeader : public FGenericVersionedGameStateHeader
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Struct /Script/Indiana.PlayerGameStateHeader
/// Size: 0x0010 (0x000010 - 0x000020)
class FPlayerGameStateHeader : public FGenericVersionedGameStateHeader
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Indiana.ActorGameStateHeader
/// Size: 0x001C (0x00000C - 0x000028)
class FActorGameStateHeader : public FGenericGameStateHeader
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/Indiana.LevelGameStateHeader
/// Size: 0x0028 (0x000010 - 0x000038)
class FLevelGameStateHeader : public FGenericVersionedGameStateHeader
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/Indiana.GenericVersionedWithDependenciesGameStateHeader
/// Size: 0x0010 (0x000010 - 0x000020)
class FGenericVersionedWithDependenciesGameStateHeader : public FGenericVersionedGameStateHeader
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/Indiana.DependencyLoadRequest
/// Size: 0x0010 (0x000000 - 0x000010)
class FDependencyLoadRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Indiana.DestroyedPrePlacedActorRegistry
/// Size: 0x0050 (0x000000 - 0x000050)
class FDestroyedPrePlacedActorRegistry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/Indiana.StatusEffectSerializationContext
/// Size: 0x0010 (0x000000 - 0x000010)
class FStatusEffectSerializationContext : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Indiana.DynamicEffectProperties
/// Size: 0x0024 (0x000000 - 0x000024)
class FDynamicEffectProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(bool)                                      bIgnoreApplyChance                                          OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FVector)                                   EffectDirection                                             OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FName)                                     EffectBone                                                  OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/Indiana.ScriptedTeamDataSource
/// Size: 0x0010 (0x000000 - 0x000010)
class FScriptedTeamDataSource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/Indiana.TestAudioDataTypeReferenceID
/// Size: 0x0000 (0x000018 - 0x000018)
class FTestAudioDataTypeReferenceID : public FGameDataReferenceID
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/Indiana.IKChainConfig
/// Size: 0x0001 (0x000000 - 0x000001)
class FIKChainConfig : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	CMember(EFootID)                                   FootID                                                      OFFSET(get<T>, {0x0, 1, 0, 0})
};

/// Struct /Script/Indiana.CostModifiers
/// Size: 0x0014 (0x000000 - 0x000014)
class FCostModifiers : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
};

/// Struct /Script/Indiana.WeaponAimTrackingRegion
/// Size: 0x0020 (0x0000F0 - 0x000110)
class FWeaponAimTrackingRegion : public FTrackingRegion
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
};

/// Struct /Script/Indiana.LerpTimer
/// Size: 0x0018 (0x000000 - 0x000018)
class FLerpTimer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FDelegateProperty)                         TickDelegate                                                OFFSET(getStruct<T>, {0x4, 16, 0, 0})
};

/// Enum /Script/Indiana.EDamageEventType
/// Size: 0x04
enum class EDamageEventType : uint8_t
{
	EDamageEventType__Invalid                                                        = 0,
	EDamageEventType__Point                                                          = 1,
	EDamageEventType__Radial                                                         = 2,
	EDamageEventType__Generic                                                        = 3
};

/// Enum /Script/Indiana.EPhaseOfDay
/// Size: 0x05
enum class EPhaseOfDay : uint8_t
{
	EPhaseOfDay__Morning                                                             = 0,
	EPhaseOfDay__Midday                                                              = 1,
	EPhaseOfDay__Afternoon                                                           = 2,
	EPhaseOfDay__Evening                                                             = 3,
	EPhaseOfDay__Night                                                               = 4
};

/// Enum /Script/Indiana.EDodgeDirection
/// Size: 0x06
enum class EDodgeDirection : uint8_t
{
	EDodgeDirection__Invalid                                                         = 0,
	EDodgeDirection__Back                                                            = 1,
	EDodgeDirection__Left                                                            = 2,
	EDodgeDirection__Right                                                           = 3,
	EDodgeDirection__Forward                                                         = 4,
	EDodgeDirection__Count                                                           = 5
};

/// Enum /Script/Indiana.EFootstepType
/// Size: 0x05
enum class EFootstepType : uint8_t
{
	EFootstepType__Run                                                               = 0,
	EFootstepType__Sprint                                                            = 1,
	EFootstepType__Crouched                                                          = 2,
	EFootstepType__Climb                                                             = 3,
	EFootstepType__Count                                                             = 4
};

/// Enum /Script/Indiana.EFootID
/// Size: 0x18
enum class EFootID : uint8_t
{
	EFootID__None                                                                    = 0,
	EFootID__LeftFoot                                                                = 1,
	EFootID__RightFoot                                                               = 2,
	EFootID__Foot3                                                                   = 3,
	EFootID__Foot4                                                                   = 4,
	EFootID__Foot5                                                                   = 5,
	EFootID__Foot6                                                                   = 6,
	EFootID__Foot7                                                                   = 7,
	EFootID__Foot8                                                                   = 8,
	EFootID__Foot9                                                                   = 9,
	EFootID__Foot10                                                                  = 10,
	EFootID__Foot11                                                                  = 11,
	EFootID__Foot12                                                                  = 12,
	EFootID__Foot13                                                                  = 13,
	EFootID__Foot14                                                                  = 14,
	EFootID__Foot15                                                                  = 15,
	EFootID__Foot16                                                                  = 16,
	EFootID__NumFeetID                                                               = 17
};

/// Enum /Script/Indiana.ESpecialMovementEvent
/// Size: 0x06
enum class ESpecialMovementEvent : uint8_t
{
	ESpecialMovementEvent__None                                                      = 0,
	ESpecialMovementEvent__Crouch                                                    = 1,
	ESpecialMovementEvent__Uncrouch                                                  = 2,
	ESpecialMovementEvent__Jump                                                      = 3,
	ESpecialMovementEvent__Land                                                      = 4,
	ESpecialMovementEvent__Dodge                                                     = 5
};

/// Enum /Script/Indiana.EStateOfBeing
/// Size: 0x03
enum class EStateOfBeing : uint8_t
{
	EStateOfBeing__Healthy                                                           = 0,
	EStateOfBeing__Dying                                                             = 1,
	EStateOfBeing__Dead                                                              = 2
};

/// Enum /Script/Indiana.EAnimNotify
/// Size: 0x20
enum class EAnimNotify : uint8_t
{
	EAnimNotify__CalledShotCameraStart                                               = 0,
	EAnimNotify__WeaponFire                                                          = 1,
	EAnimNotify__MeleeAllowInput                                                     = 2,
	EAnimNotify__MeleeDisallowInput                                                  = 3,
	EAnimNotify__MeleeCanStartQueuedAction                                           = 4,
	EAnimNotify__MeleeActionFinished                                                 = 5,
	EAnimNotify__MeleeRecoilFrame                                                    = 6,
	EAnimNotify__MeleeCheckInput                                                     = 7,
	EAnimNotify__MeleeDamageTypePending                                              = 8,
	EAnimNotify__MeleeDamageTypeNext                                                 = 9,
	EAnimNotify__AnimationFinished                                                   = 10,
	EAnimNotify__RefillAmmo                                                          = 11,
	EAnimNotify__AttachWeapon                                                        = 12,
	EAnimNotify__DetachWeapon                                                        = 13,
	EAnimNotify__UseMedKit                                                           = 14,
	EAnimNotify__MedKitEnd                                                           = 15,
	EAnimNotify__Finished                                                            = 16,
	EAnimNotify__MeleeEnableBlock                                                    = 17,
	EAnimNotify__UpdateCanisterVisual                                                = 18,
	EAnimNotify__Invalid                                                             = 19
};

/// Enum /Script/Indiana.EGameDifficulty
/// Size: 0x06
enum class EGameDifficulty : uint8_t
{
	EGameDifficulty__Story                                                           = 0,
	EGameDifficulty__Normal                                                          = 1,
	EGameDifficulty__Hard                                                            = 2,
	EGameDifficulty__SuperNova                                                       = 3,
	EGameDifficulty__Count                                                           = 4,
	EGameDifficulty__Invalid                                                         = 5
};

/// Enum /Script/Indiana.EInterrogationResult
/// Size: 0x04
enum class EInterrogationResult : uint8_t
{
	EInterrogationResult__Invalid                                                    = 0,
	EInterrogationResult__Bribe                                                      = 1,
	EInterrogationResult__Talk                                                       = 2,
	EInterrogationResult__Fight                                                      = 3
};

/// Enum /Script/Indiana.ECrimeType
/// Size: 0x07
enum class ECrimeType : uint8_t
{
	ECrimeType__None                                                                 = 0,
	ECrimeType__RestrictedArea                                                       = 1,
	ECrimeType__Pickpocket                                                           = 2,
	ECrimeType__Lockpick                                                             = 3,
	ECrimeType__Hack                                                                 = 4,
	ECrimeType__Disguised                                                            = 5,
	ECrimeType__Theft                                                                = 6
};

/// Enum /Script/Indiana.ECalledShotCameraStep
/// Size: 0x04
enum class ECalledShotCameraStep : uint8_t
{
	ECalledShotCameraStep__Attacker                                                  = 0,
	ECalledShotCameraStep__Target                                                    = 1,
	ECalledShotCameraStep__TargetReaction                                            = 2,
	ECalledShotCameraStep__Complete                                                  = 3
};

/// Enum /Script/Indiana.EAttribute
/// Size: 0x11
enum class EAttribute : uint8_t
{
	EAttribute__Strength                                                             = 0,
	EAttribute__Dexterity                                                            = 1,
	EAttribute__Endurance                                                            = 2,
	EAttribute__Intelligence                                                         = 3,
	EAttribute__Perception                                                           = 4,
	EAttribute__Willpower                                                            = 5,
	EAttribute__Charm                                                                = 6,
	EAttribute__Wits                                                                 = 7,
	EAttribute__Temperament                                                          = 8,
	EAttribute__Count                                                                = 9,
	EAttribute__Invalid                                                              = 10
};

/// Enum /Script/Indiana.ESkill
/// Size: 0x20
enum class ESkill : uint8_t
{
	ESkill__HandGuns                                                                 = 0,
	ESkill__LongGuns                                                                 = 1,
	ESkill__HeavyWeapons                                                             = 2,
	ESkill__Sneak                                                                    = 3,
	ESkill__Lockpick                                                                 = 4,
	ESkill__Engineering                                                              = 5,
	ESkill__Hack                                                                     = 6,
	ESkill__Medical                                                                  = 7,
	ESkill__LightMelee                                                               = 8,
	ESkill__HeavyMelee                                                               = 9,
	ESkill__Science                                                                  = 10,
	ESkill__Persuade                                                                 = 11,
	ESkill__Lie                                                                      = 12,
	ESkill__Intimidate                                                               = 13,
	ESkill__Dodge                                                                    = 14,
	ESkill__Block                                                                    = 15,
	ESkill__Inspiration                                                              = 16,
	ESkill__Determination                                                            = 17,
	ESkill__Count                                                                    = 18,
	ESkill__Invalid                                                                  = 19
};

/// Enum /Script/Indiana.EOCLState
/// Size: 0x11
enum class EOCLState : uint8_t
{
	EOCLState__Closed                                                                = 0,
	EOCLState__Open                                                                  = 1,
	EOCLState__Locked                                                                = 2,
	EOCLState__SealedClosed                                                          = 3,
	EOCLState__SealedOpen                                                            = 4,
	EOCLState__Barred                                                                = 5,
	EOCLState__Opening                                                               = 6,
	EOCLState__OpeningToSealed                                                       = 7,
	EOCLState__Closing                                                               = 8,
	EOCLState__ClosingToSealed                                                       = 9,
	EOCLState__ClosingToLocked                                                       = 10
};

/// Enum /Script/Indiana.ESaveGameType
/// Size: 0x08
enum class ESaveGameType : uint8_t
{
	ESaveGameType__Standard                                                          = 0,
	ESaveGameType__Quicksave                                                         = 1,
	ESaveGameType__Autosave                                                          = 2,
	ESaveGameType__PostGame                                                          = 3,
	ESaveGameType__PointOfNoReturn                                                   = 4,
	ESaveGameType__BeforeSkip                                                        = 5,
	ESaveGameType__BeforeEVTransition                                                = 6,
	ESaveGameType__Invalid                                                           = 255
};

/// Enum /Script/Indiana.ESaveGameResult
/// Size: 0x19
enum class ESaveGameResult : uint8_t
{
	ESaveGameResult__Success                                                         = 0,
	ESaveGameResult__Restricted                                                      = 1,
	ESaveGameResult__FileWritingFailure                                              = 2,
	ESaveGameResult__UnableToSaveCompanionStates                                     = 3,
	ESaveGameResult__PlayerNotAvailable                                              = 4,
	ESaveGameResult__AsyncSaveTask_Begun                                             = 5,
	ESaveGameResult__AsyncSaveTask_Failed_DeviceFull                                 = 6,
	ESaveGameResult__AsyncSaveTask_FailedDeletingStaleTargetDir                      = 7,
	ESaveGameResult__AsyncSaveTask_FailedCreatingTargetDir                           = 8,
	ESaveGameResult__AsyncSaveTask_StorageUninitialized                              = 9,
	ESaveGameResult__AsyncSaveTask_FailedStorageContainer                            = 10,
	ESaveGameResult__AsyncSaveTask_Suspended                                         = 11,
	ESaveGameResult__AsyncSaveTask_NoMetadata                                        = 12,
	ESaveGameResult__AsyncSaveTask_BufferAccessFailed                                = 13,
	ESaveGameResult__AsyncSaveTask_BufferMaximumReached                              = 14,
	ESaveGameResult__AsyncSaveTask_FailedPopulatingSaveFileMap                       = 15,
	ESaveGameResult__AsyncSaveTask_Delayed                                           = 16,
	ESaveGameResult__AsyncSaveTask_FailedScreenshotWaitTimeout                       = 17,
	ESaveGameResult__AsyncSaveTask_FailedSaveStateCompression                        = 18
};

/// Enum /Script/Indiana.EActiveUserChangeType
/// Size: 0x05
enum class EActiveUserChangeType : uint8_t
{
	EActiveUserChangeType__Login                                                     = 0,
	EActiveUserChangeType__LoggingOut                                                = 1,
	EActiveUserChangeType__Logout                                                    = 2,
	EActiveUserChangeType__SwitchingUser                                             = 3,
	EActiveUserChangeType__ControllerChange                                          = 4
};

/// Enum /Script/Indiana.ELoadGameResult
/// Size: 0x22
enum class ELoadGameResult : uint8_t
{
	ELoadGameResult__Success                                                         = 0,
	ELoadGameResult__Restricted                                                      = 1,
	ELoadGameResult__MissingFile                                                     = 2,
	ELoadGameResult__FileReadingFailure                                              = 3,
	ELoadGameResult__CorruptionDetected                                              = 4,
	ELoadGameResult__UnableToRestorePlayerState                                      = 5,
	ELoadGameResult__UnableToRestoreCompanionState                                   = 6,
	ELoadGameResult__NoCompanionManager                                              = 7,
	ELoadGameResult__ClassDependencyLoadFailure                                      = 8,
	ELoadGameResult__SpawnFailure                                                    = 9,
	ELoadGameResult__InvalidQuicksaveIndex                                           = 10,
	ELoadGameResult__InvalidAutosaveIndex                                            = 11,
	ELoadGameResult__SaveOfGivenNameNotFound                                         = 12,
	ELoadGameResult__PlatformLoadUnsuccessful                                        = 13,
	ELoadGameResult__StorageUninitialized                                            = 14,
	ELoadGameResult__SaveVersionUnsupported                                          = 15,
	ELoadGameResult__SaveFromNewerBuild                                              = 16,
	ELoadGameResult__MapLoadFailure                                                  = 17,
	ELoadGameResult__ChunkInstallation                                               = 18,
	ELoadGameResult__CompressedGameStateUnpackFailure                                = 19,
	ELoadGameResult__LoadCanceledByUser                                              = 20,
	ELoadGameResult__LoadInturruptedForPONR                                          = 21
};

/// Enum /Script/Indiana.EBehaviorStateEventType
/// Size: 0x04
enum class EBehaviorStateEventType : uint8_t
{
	EBehaviorStateEventType__Added                                                   = 0,
	EBehaviorStateEventType__Entered                                                 = 1,
	EBehaviorStateEventType__Exited                                                  = 2,
	EBehaviorStateEventType__Removed                                                 = 3
};

/// Enum /Script/Indiana.EBehaviorState
/// Size: 0x48
enum class EBehaviorState : uint8_t
{
	EBehaviorState__None                                                             = 0,
	EBehaviorState__Cover                                                            = 1,
	EBehaviorState__Range                                                            = 2,
	EBehaviorState__MeleeSlot                                                        = 3,
	EBehaviorState__Search                                                           = 4,
	EBehaviorState__RepositionSearch                                                 = 5,
	EBehaviorState__MeleeBlock                                                       = 6,
	EBehaviorState__Dodge                                                            = 7,
	EBehaviorState__Idle                                                             = 8,
	EBehaviorState__Tether                                                           = 9,
	EBehaviorState__SwitchWeapon                                                     = 10,
	EBehaviorState__SwitchTarget                                                     = 11,
	EBehaviorState__Dead                                                             = 12,
	EBehaviorState__Disabled                                                         = 13,
	EBehaviorState__SwitchContext                                                    = 14,
	EBehaviorState__Suspicious                                                       = 15,
	EBehaviorState__Investigate                                                      = 16,
	EBehaviorState__Patrol                                                           = 17,
	EBehaviorState__Wander                                                           = 18,
	EBehaviorState__CompanionFollow                                                  = 19,
	EBehaviorState__Conversation                                                     = 20,
	EBehaviorState__Flee                                                             = 21,
	EBehaviorState__Furniture                                                        = 22,
	EBehaviorState__Jump                                                             = 23,
	EBehaviorState__CompanionCommandMoveTo                                           = 24,
	EBehaviorState__CompanionCommandSuppress                                         = 25,
	EBehaviorState__CompanionCommandHunkerDown                                       = 26,
	EBehaviorState__Deactivated                                                      = 27,
	EBehaviorState__Activated                                                        = 28,
	EBehaviorState__CompanionCommandFlank                                            = 29,
	EBehaviorState__Approach                                                         = 30,
	EBehaviorState__CalledShot                                                       = 31,
	EBehaviorState__Persuade                                                         = 32,
	EBehaviorState__Teleport                                                         = 33,
	EBehaviorState__SpawnActor                                                       = 34,
	EBehaviorState__Cower                                                            = 35,
	EBehaviorState__Follow                                                           = 36,
	EBehaviorState__SpellTarget                                                      = 37,
	EBehaviorState__Retreat                                                          = 38,
	EBehaviorState__Animation                                                        = 39,
	EBehaviorState__MoveTo                                                           = 40,
	EBehaviorState__Crouch                                                           = 41,
	EBehaviorState__QuickCover                                                       = 42,
	EBehaviorState__OnRails                                                          = 43,
	EBehaviorState__HopeBot                                                          = 44,
	EBehaviorState__Walk                                                             = 45,
	EBehaviorState__HealGun                                                          = 46,
	EBehaviorState__Count                                                            = 47
};

/// Enum /Script/Indiana.EUnlockAbility
/// Size: 0x44
enum class EUnlockAbility : uint8_t
{
	EUnlockAbility__Invalid                                                          = 0,
	EUnlockAbility__PerfectDodge                                                     = 1,
	EUnlockAbility__PerfectDodgeCounter                                              = 2,
	EUnlockAbility__PerfectDodgeCounterCrit                                          = 3,
	EUnlockAbility__PerfectBlock                                                     = 4,
	EUnlockAbility__PerfectBlockCounter                                              = 5,
	EUnlockAbility__PerfectBlockCounterCrit                                          = 6,
	EUnlockAbility__PickPocket                                                       = 7,
	EUnlockAbility__HackRobots                                                       = 8,
	EUnlockAbility__MedKitOneDrug                                                    = 9,
	EUnlockAbility__MedKitTwoDrugs                                                   = 10,
	EUnlockAbility__MedKitThreeDrugs                                                 = 11,
	EUnlockAbility__Acrophobia                                                       = 12,
	EUnlockAbility__PowerAttacksLightMelee                                           = 13,
	EUnlockAbility__PowerAttacksHeavyMelee                                           = 14,
	EUnlockAbility__WeakSpotLightMelee                                               = 15,
	EUnlockAbility__WeakSpotHeavyMelee                                               = 16,
	EUnlockAbility__WeakSpotHandGuns                                                 = 17,
	EUnlockAbility__WeakSpotLongGuns                                                 = 18,
	EUnlockAbility__WeakSpotHeavyWeapons                                             = 19,
	EUnlockAbility__TTDSpellsLightMelee                                              = 20,
	EUnlockAbility__TTDSpellsHeavyMelee                                              = 21,
	EUnlockAbility__TTDSpellsHandGuns                                                = 22,
	EUnlockAbility__TTDSpellsLongGuns                                                = 23,
	EUnlockAbility__TTDSpellsHeavyWeapons                                            = 24,
	EUnlockAbility__MeleeFartherReach                                                = 25,
	EUnlockAbility__MeleeCannotBeBlocked                                             = 26,
	EUnlockAbility__SneakAttack                                                      = 27,
	EUnlockAbility__FieldRepair                                                      = 28,
	EUnlockAbility__SellToAnyVendingMachine                                          = 29,
	EUnlockAbility__CompanionCommands                                                = 30,
	EUnlockAbility__DodgeForward                                                     = 31,
	EUnlockAbility__FastTravelWhileEncumbered                                        = 32,
	EUnlockAbility__Tinkering                                                        = 33,
	EUnlockAbility__LockPickPreview                                                  = 34,
	EUnlockAbility__MedKitHealsCompanions                                            = 35,
	EUnlockAbility__TinkerScienceCostCap                                             = 36,
	EUnlockAbility__DoubleHackRobots                                                 = 37,
	EUnlockAbility__UndetectableLockpicking                                          = 38,
	EUnlockAbility__UseScienceAsWeaponSkill                                          = 39,
	EUnlockAbility__InstantReloadHeavyOnEmpty                                        = 40,
	EUnlockAbility__StealthInstantKillUndetectable                                   = 41,
	EUnlockAbility__NoDamageOnPerfectBlock                                           = 42,
	EUnlockAbility__Count                                                            = 43
};

/// Enum /Script/Indiana.EStringTableType
/// Size: 0x20
enum class EStringTableType : uint8_t
{
	EStringTableType__Unassigned                                                     = 0,
	EStringTableType__Gui                                                            = 1,
	EStringTableType__Items                                                          = 2,
	EStringTableType__Abilities                                                      = 3,
	EStringTableType__Tutorial                                                       = 4,
	EStringTableType__Achievements                                                   = 5,
	EStringTableType__Credits                                                        = 6,
	EStringTableType__Debug                                                          = 7,
	EStringTableType__LoadingTips                                                    = 8,
	EStringTableType__Characters                                                     = 9,
	EStringTableType__Areas                                                          = 10,
	EStringTableType__Waypoints                                                      = 11,
	EStringTableType__Random                                                         = 12,
	EStringTableType__Factions                                                       = 13,
	EStringTableType__Vendors                                                        = 14,
	EStringTableType__Codex                                                          = 15,
	EStringTableType__BrandSlogans                                                   = 16,
	EStringTableType__CutsceneSubtitles                                              = 17,
	EStringTableType__Legal                                                          = 18,
	EStringTableType__Count                                                          = 19
};

/// Enum /Script/Indiana.ERestType
/// Size: 0x02
enum class ERestType : uint8_t
{
	ERestType__Sleep                                                                 = 0,
	ERestType__Wait                                                                  = 1
};

/// Enum /Script/Indiana.ETraverseType
/// Size: 0x05
enum class ETraverseType : uint8_t
{
	ETraverseType__None                                                              = 0,
	ETraverseType__Jump                                                              = 1,
	ETraverseType__Crouch                                                            = 2,
	ETraverseType__Climb                                                             = 3,
	ETraverseType__Walk                                                              = 4
};

/// Enum /Script/Indiana.EAlarmState
/// Size: 0x03
enum class EAlarmState : uint8_t
{
	EAlarmState__Off                                                                 = 0,
	EAlarmState__On                                                                  = 1,
	EAlarmState__Disabled                                                            = 2
};

/// Enum /Script/Indiana.EAlertState
/// Size: 0x05
enum class EAlertState : uint8_t
{
	EAlertState__Unaware                                                             = 0,
	EAlertState__Suspicious                                                          = 1,
	EAlertState__Investigating                                                       = 2,
	EAlertState__Alerted                                                             = 3,
	EAlertState__Count                                                               = 4
};

/// Enum /Script/Indiana.EItemDegradationState
/// Size: 0x04
enum class EItemDegradationState : uint8_t
{
	EItemDegradationState__None                                                      = 0,
	EItemDegradationState__Damaged                                                   = 1,
	EItemDegradationState__SeverelyDamaged                                           = 2,
	EItemDegradationState__Destroyed                                                 = 3
};

/// Enum /Script/Indiana.EWeaponPreference
/// Size: 0x08
enum class EWeaponPreference : uint8_t
{
	EWeaponPreference__UsePrimary                                                    = 0,
	EWeaponPreference__PreferRanged                                                  = 1,
	EWeaponPreference__PreferMelee                                                   = 2,
	EWeaponPreference__StronglyPreferMelee                                           = 3,
	EWeaponPreference__AlwaysRanged                                                  = 4,
	EWeaponPreference__AlwaysMelee                                                   = 5,
	EWeaponPreference__PreferLimitedRanged                                           = 6,
	EWeaponPreference__AlwaysUnlimitedRanged                                         = 7
};

/// Enum /Script/Indiana.EInteractionType
/// Size: 0x30
enum class EInteractionType : uint8_t
{
	EInteractionType__None                                                           = 0,
	EInteractionType__Door                                                           = 1,
	EInteractionType__DoorBar                                                        = 2,
	EInteractionType__Ladder                                                         = 3,
	EInteractionType__Elevator                                                       = 4,
	EInteractionType__Switch                                                         = 5,
	EInteractionType__Pickup                                                         = 6,
	EInteractionType__Container                                                      = 7,
	EInteractionType__Computer                                                       = 8,
	EInteractionType__Trap                                                           = 9,
	EInteractionType__Loot                                                           = 10,
	EInteractionType__Conversation                                                   = 11,
	EInteractionType__PickPocket                                                     = 12,
	EInteractionType__Workbench                                                      = 13,
	EInteractionType__Vendor                                                         = 14,
	EInteractionType__Generic                                                        = 15,
	EInteractionType__OCL                                                            = 16,
	EInteractionType__Travel                                                         = 17,
	EInteractionType__NoConversationChatter                                          = 18,
	EInteractionType__Bed                                                            = 19,
	EInteractionType__NotAllowedInCombat                                             = 20,
	EInteractionType__Chair                                                          = 21,
	EInteractionType__Hack                                                           = 22,
	EInteractionType__ShipTerminal                                                   = 23,
	EInteractionType__Respec                                                         = 24,
	EInteractionType__GenericDelayed                                                 = 25,
	EInteractionType__ContainerKeyUnlock                                             = 26,
	EInteractionType__Pet                                                            = 27,
	EInteractionType__Evidence                                                       = 28,
	EInteractionType__AudioLog                                                       = 29
};

/// Enum /Script/Indiana.EDetectionType
/// Size: 0x09
enum class EDetectionType : uint8_t
{
	EDetectionType__None                                                             = 0,
	EDetectionType__Suspicious                                                       = 1,
	EDetectionType__Investigate                                                      = 2,
	EDetectionType__Pacifist                                                         = 3,
	EDetectionType__MindControlled                                                   = 4,
	EDetectionType__PacifistCombat                                                   = 5,
	EDetectionType__Crime                                                            = 6,
	EDetectionType__Combat                                                           = 7,
	EDetectionType__Count                                                            = 8
};

/// Enum /Script/Indiana.EReputationType
/// Size: 0x02
enum class EReputationType : uint8_t
{
	EReputationType__Positive                                                        = 0,
	EReputationType__Negative                                                        = 1
};

/// Enum /Script/Indiana.EComputerLockState
/// Size: 0x02
enum class EComputerLockState : uint8_t
{
	EComputerLockState__Unlocked                                                     = 0,
	EComputerLockState__Locked                                                       = 1
};

/// Enum /Script/Indiana.ETrapState
/// Size: 0x03
enum class ETrapState : uint8_t
{
	ETrapState__Armed                                                                = 0,
	ETrapState__Disarmed                                                             = 1,
	ETrapState__Deactivated                                                          = 2
};

/// Enum /Script/Indiana.ECompanionCommand
/// Size: 0x10
enum class ECompanionCommand : uint8_t
{
	ECompanionCommand__Invalid                                                       = 0,
	ECompanionCommand__MoveTo                                                        = 1,
	ECompanionCommand__Return                                                        = 2,
	ECompanionCommand__ForceReturn                                                   = 3,
	ECompanionCommand__Attack                                                        = 4,
	ECompanionCommand__Flank                                                         = 5,
	ECompanionCommand__Suppress                                                      = 6,
	ECompanionCommand__HunkerDown                                                    = 7,
	ECompanionCommand__CalledShot                                                    = 8,
	ECompanionCommand__Count                                                         = 9
};

/// Enum /Script/Indiana.ETrapTriggerState
/// Size: 0x03
enum class ETrapTriggerState : uint8_t
{
	ETrapTriggerState__Armed                                                         = 0,
	ETrapTriggerState__Disarmed                                                      = 1,
	ETrapTriggerState__Deployed                                                      = 2
};

/// Enum /Script/Indiana.EAudioLogPlayState
/// Size: 0x04
enum class EAudioLogPlayState : uint8_t
{
	EAudioLogPlayState__Stopped                                                      = 0,
	EAudioLogPlayState__Playing                                                      = 1,
	EAudioLogPlayState__PausedByGame                                                 = 2,
	EAudioLogPlayState__PausedByPlayer                                               = 3
};

/// Enum /Script/Indiana.EIndianaUIColorType
/// Size: 0x54
enum class EIndianaUIColorType : uint8_t
{
	EIndianaUIColorType__Invalid                                                     = 0,
	EIndianaUIColorType__Stamina                                                     = 1,
	EIndianaUIColorType__Health                                                      = 2,
	EIndianaUIColorType__TacticalTimeDilation                                        = 3,
	EIndianaUIColorType__Ammo                                                        = 4,
	EIndianaUIColorType__CalledShot                                                  = 5,
	EIndianaUIColorType__Intimidate                                                  = 6,
	EIndianaUIColorType__Hostile                                                     = 7,
	EIndianaUIColorType__Neutral                                                     = 8,
	EIndianaUIColorType__ConversationVisitedNode                                     = 9,
	EIndianaUIColorType__ConversationUnvisitedNode                                   = 10,
	EIndianaUIColorType__UIPiping                                                    = 11,
	EIndianaUIColorType__InteractionPlayerResources                                  = 12,
	EIndianaUIColorType__InteractionPossible                                         = 13,
	EIndianaUIColorType__InteractionImpossible                                       = 14,
	EIndianaUIColorType__InteractIcon                                                = 15,
	EIndianaUIColorType__InWorldQuestBeacon                                          = 16,
	EIndianaUIColorType__StandardFontGlow                                            = 17,
	EIndianaUIColorType__QuestBeaconFontGlow                                         = 18,
	EIndianaUIColorType__CompanionCommandMoveTo                                      = 19,
	EIndianaUIColorType__NotificationQuestMessage                                    = 20,
	EIndianaUIColorType__NotificationComputerInteractionMessage                      = 21,
	EIndianaUIColorType__NotificationGenericMessage                                  = 22,
	EIndianaUIColorType__OutOfAmmo                                                   = 23,
	EIndianaUIColorType__IndianaYellow                                               = 24,
	EIndianaUIColorType__IndianaNotQuiteYellow                                       = 25,
	EIndianaUIColorType__IndianaGrey                                                 = 26,
	EIndianaUIColorType__IndianaBrown                                                = 27,
	EIndianaUIColorType__IndianaDarkBrown                                            = 28,
	EIndianaUIColorType__IndianaRed                                                  = 29,
	EIndianaUIColorType__IndianaGreen                                                = 30,
	EIndianaUIColorType__NRayDamageText                                              = 31,
	EIndianaUIColorType__NRayDamageTextShadow                                        = 32,
	EIndianaUIColorType__EnergyDamageText                                            = 33,
	EIndianaUIColorType__EnergyDamageTextShadow                                      = 34,
	EIndianaUIColorType__ThermalDamageText                                           = 35,
	EIndianaUIColorType__ThermalDamageTextShadow                                     = 36,
	EIndianaUIColorType__CorrosiveDamageText                                         = 37,
	EIndianaUIColorType__CorrosiveDamageTextShadow                                   = 38,
	EIndianaUIColorType__ShockDamageText                                             = 39,
	EIndianaUIColorType__ShockDamageTextShadow                                       = 40,
	EIndianaUIColorType__BallisticDamageText                                         = 41,
	EIndianaUIColorType__BallisticDamageTextShadow                                   = 42,
	EIndianaUIColorType__TTDTextColor                                                = 43,
	EIndianaUIColorType__Pacifist                                                    = 44,
	EIndianaUIColorType__SkillTextColor                                              = 45,
	EIndianaUIColorType__IndianaBlack                                                = 46,
	EIndianaUIColorType__HealingText                                                 = 47,
	EIndianaUIColorType__HealingTextShadow                                           = 48,
	EIndianaUIColorType__INX1Color                                                   = 49,
	EIndianaUIColorType__INX2Color                                                   = 50,
	EIndianaUIColorType__ColdDamageText                                              = 51,
	EIndianaUIColorType__ColdDamageTextShadow                                        = 52,
	EIndianaUIColorType__Count                                                       = 53
};

/// Enum /Script/Indiana.ECharacterAttributeRange
/// Size: 0x09
enum class ECharacterAttributeRange : uint8_t
{
	ECharacterAttributeRange__Minimum                                                = 0,
	ECharacterAttributeRange__BelowAverage                                           = 1,
	ECharacterAttributeRange__Average                                                = 2,
	ECharacterAttributeRange__Good                                                   = 3,
	ECharacterAttributeRange__High                                                   = 4,
	ECharacterAttributeRange__VeryHigh                                               = 5,
	ECharacterAttributeRange__Maximum                                                = 6,
	ECharacterAttributeRange__Count                                                  = 7,
	ECharacterAttributeRange__Invalid                                                = 8
};

/// Enum /Script/Indiana.ECharacterCreationPageType
/// Size: 0x07
enum class ECharacterCreationPageType : uint8_t
{
	ECharacterCreationPageType__Attributes                                           = 0,
	ECharacterCreationPageType__Skills                                               = 1,
	ECharacterCreationPageType__Aptitude                                             = 2,
	ECharacterCreationPageType__Physical                                             = 3,
	ECharacterCreationPageType__Naming                                               = 4,
	ECharacterCreationPageType__Summary                                              = 5,
	ECharacterCreationPageType__Count                                                = 6
};

/// Enum /Script/Indiana.ESkillCategory
/// Size: 0x09
enum class ESkillCategory : uint8_t
{
	ESkillCategory__Melee                                                            = 0,
	ESkillCategory__Ranged                                                           = 1,
	ESkillCategory__Defense                                                          = 2,
	ESkillCategory__Dialog                                                           = 3,
	ESkillCategory__Stealth                                                          = 4,
	ESkillCategory__Tech                                                             = 5,
	ESkillCategory__Leadership                                                       = 6,
	ESkillCategory__Count                                                            = 7,
	ESkillCategory__Invalid                                                          = 8
};

/// Enum /Script/Indiana.EAptitudeType
/// Size: 0x16
enum class EAptitudeType : uint8_t
{
	EAptitudeType__NoAptitude                                                        = 0,
	EAptitudeType__BeverageTech                                                      = 1,
	EAptitudeType__Bureaucrat                                                        = 2,
	EAptitudeType__Cashier                                                           = 3,
	EAptitudeType__Construction                                                      = 4,
	EAptitudeType__Elevator                                                          = 5,
	EAptitudeType__Factory                                                           = 6,
	EAptitudeType__Farmer                                                            = 7,
	EAptitudeType__FoodTester                                                        = 8,
	EAptitudeType__Janitor                                                           = 9,
	EAptitudeType__Mascot                                                            = 10,
	EAptitudeType__MedicalTech                                                       = 11,
	EAptitudeType__SafetyInspector                                                   = 12,
	EAptitudeType__Scientist                                                         = 13,
	EAptitudeType__Chef                                                              = 14,
	EAptitudeType__Invalid                                                           = 15
};

/// Enum /Script/Indiana.EAbilityPosition
/// Size: 0x04
enum class EAbilityPosition : uint8_t
{
	EAbilityPosition__Bottom                                                         = 0,
	EAbilityPosition__Left                                                           = 1,
	EAbilityPosition__Top                                                            = 2,
	EAbilityPosition__Right                                                          = 3
};

/// Enum /Script/Indiana.EAchievementOnlineUpdateType
/// Size: 0x03
enum class EAchievementOnlineUpdateType : uint8_t
{
	EAchievementOnlineUpdateType__None                                               = 0,
	EAchievementOnlineUpdateType__ProgressChangeOnly                                 = 1,
	EAchievementOnlineUpdateType__Force                                              = 2
};

/// Enum /Script/Indiana.EActorPoolingMethod
/// Size: 0x03
enum class EActorPoolingMethod : uint32_t
{
	EActorPoolingMethod__Unregister                                                  = 0,
	EActorPoolingMethod__Hide                                                        = 1,
	EActorPoolingMethod__Nothing                                                     = 2
};

/// Enum /Script/Indiana.ESoundAcceptanceType
/// Size: 0x06
enum class ESoundAcceptanceType : uint8_t
{
	ESoundAcceptanceType__None                                                       = 0,
	ESoundAcceptanceType__Hostile                                                    = 1,
	ESoundAcceptanceType__NonHostile                                                 = 2,
	ESoundAcceptanceType__ChangeHostile                                              = 3,
	ESoundAcceptanceType__AutoDetectPlayer                                           = 4,
	ESoundAcceptanceType__ChangeHostileAutoDetectPlayer                              = 5
};

/// Enum /Script/Indiana.ESoundDetectionType
/// Size: 0x18
enum class ESoundDetectionType : uint8_t
{
	ESoundDetectionType__None                                                        = 0,
	ESoundDetectionType__Projectile                                                  = 1,
	ESoundDetectionType__Gun                                                         = 2,
	ESoundDetectionType__Shout                                                       = 3,
	ESoundDetectionType__ShoutLoS                                                    = 4,
	ESoundDetectionType__ShoutDeath                                                  = 5,
	ESoundDetectionType__LockPick                                                    = 6,
	ESoundDetectionType__Hack                                                        = 7,
	ESoundDetectionType__ArmTrap                                                     = 8,
	ESoundDetectionType__DisarmTrap                                                  = 9,
	ESoundDetectionType__Footstep                                                    = 10,
	ESoundDetectionType__PickPocket                                                  = 11,
	ESoundDetectionType__ProjectileWizz                                              = 12,
	ESoundDetectionType__Bumped                                                      = 13,
	ESoundDetectionType__ShoutSight                                                  = 14,
	ESoundDetectionType__ShoutProxy                                                  = 15,
	ESoundDetectionType__ShoutDeathProxy                                             = 16,
	ESoundDetectionType__NumSoundDetectionType                                       = 17
};

/// Enum /Script/Indiana.EDetectionDataType
/// Size: 0x04
enum class EDetectionDataType : uint8_t
{
	EDetectionDataType__Unknown                                                      = 0,
	EDetectionDataType__SoundData                                                    = 1,
	EDetectionDataType__DamageData                                                   = 2,
	EDetectionDataType__Count                                                        = 3
};

/// Enum /Script/Indiana.ETeamAttitudeFlag
/// Size: 0x05
enum class ETeamAttitudeFlag : uint32_t
{
	ETeamAttitudeFlag__None                                                          = 0,
	ETeamAttitudeFlag__Friendly                                                      = 2,
	ETeamAttitudeFlag__Neutral                                                       = 4,
	ETeamAttitudeFlag__Hostile                                                       = 8,
	ETeamAttitudeFlag__All                                                           = -1
};

/// Enum /Script/Indiana.EAsyncQueryResult
/// Size: 0x04
enum class EAsyncQueryResult : uint8_t
{
	EAsyncQueryResult__Invalid                                                       = 0,
	EAsyncQueryResult__Pending                                                       = 1,
	EAsyncQueryResult__Success                                                       = 2,
	EAsyncQueryResult__Failure                                                       = 3
};

/// Enum /Script/Indiana.EBehaviorRestoreType
/// Size: 0x03
enum class EBehaviorRestoreType : uint8_t
{
	EBehaviorRestoreType__Restore                                                    = 0,
	EBehaviorRestoreType__None                                                       = 1,
	EBehaviorRestoreType__Discard                                                    = 2
};

/// Enum /Script/Indiana.ECompanionState
/// Size: 0x04
enum class ECompanionState : uint8_t
{
	ECompanionState__CompanionNotRecruited                                           = 0,
	ECompanionState__CompanionRecruited                                              = 1,
	ECompanionState__CompanionInActiveParty                                          = 2,
	ECompanionState__CompanionDismissed                                              = 3
};

/// Enum /Script/Indiana.ECompanionCombatMode
/// Size: 0x03
enum class ECompanionCombatMode : uint8_t
{
	ECompanionCombatMode__Passive                                                    = 0,
	ECompanionCombatMode__Defensive                                                  = 1,
	ECompanionCombatMode__Aggressive                                                 = 2
};

/// Enum /Script/Indiana.ERagdollFreezeState
/// Size: 0x03
enum class ERagdollFreezeState : uint8_t
{
	ERagdollFreezeState__None                                                        = 0,
	ERagdollFreezeState__PrePhysicsFreeze                                            = 1,
	ERagdollFreezeState__Frozen                                                      = 2
};

/// Enum /Script/Indiana.ERagdollSettleState
/// Size: 0x03
enum class ERagdollSettleState : uint8_t
{
	ERagdollSettleState__None                                                        = 0,
	ERagdollSettleState__Alive                                                       = 1,
	ERagdollSettleState__Dead                                                        = 2
};

/// Enum /Script/Indiana.EFurnitureAnimationInterrupt
/// Size: 0x03
enum class EFurnitureAnimationInterrupt : uint8_t
{
	EFurnitureAnimationInterrupt__BlendToBaseIdle                                    = 0,
	EFurnitureAnimationInterrupt__BlendToEnd                                         = 1,
	EFurnitureAnimationInterrupt__BlendEndToBaseIdleInConversation                   = 2
};

/// Enum /Script/Indiana.EFurnitureBehaviorState
/// Size: 0x08
enum class EFurnitureBehaviorState : uint8_t
{
	EFurnitureBehaviorState__InitialMove                                             = 0,
	EFurnitureBehaviorState__MovingToEnter                                           = 1,
	EFurnitureBehaviorState__MovingToExit                                            = 2,
	EFurnitureBehaviorState__Furniture                                               = 3,
	EFurnitureBehaviorState__Conversation                                            = 4,
	EFurnitureBehaviorState__ReEnterFurniture                                        = 5,
	EFurnitureBehaviorState__Complete                                                = 6,
	EFurnitureBehaviorState__WaitingToReserve                                        = 7
};

/// Enum /Script/Indiana.EPseudoGodMode
/// Size: 0x04
enum class EPseudoGodMode : uint8_t
{
	EPseudoGodMode__Off                                                              = 0,
	EPseudoGodMode__NonPlayer_LowMinHealth                                           = 1,
	EPseudoGodMode__NonPlayer_MediumMinHealth                                        = 2,
	EPseudoGodMode__NonPlayer_HighMinHealth                                          = 3
};

/// Enum /Script/Indiana.ETetherExpansionEvent
/// Size: 0x08
enum class ETetherExpansionEvent : uint8_t
{
	ETetherExpansionEvent__None                                                      = 0,
	ETetherExpansionEvent__PlayerDamage                                              = 1,
	ETetherExpansionEvent__CompanionDamage                                           = 2,
	ETetherExpansionEvent__NPCDamage                                                 = 3,
	ETetherExpansionEvent__CompanionCommand                                          = 4,
	ETetherExpansionEvent__SwitchTargetFromPlayer                                    = 5,
	ETetherExpansionEvent__SwitchTargetToPlayer                                      = 6,
	ETetherExpansionEvent__EnterCombat                                               = 7
};

/// Enum /Script/Indiana.EBribeDifficulty
/// Size: 0x05
enum class EBribeDifficulty : uint8_t
{
	EBribeDifficulty__CrimeInterrogation                                             = 0,
	EBribeDifficulty__Easy                                                           = 1,
	EBribeDifficulty__Medium                                                         = 2,
	EBribeDifficulty__Hard                                                           = 3,
	EBribeDifficulty__Extreme                                                        = 4
};

/// Enum /Script/Indiana.ECombatReaction
/// Size: 0x05
enum class ECombatReaction : uint8_t
{
	ECombatReaction__Attack                                                          = 0,
	ECombatReaction__Cower                                                           = 1,
	ECombatReaction__Flee                                                            = 2,
	ECombatReaction__CowerOrFlee                                                     = 3,
	ECombatReaction__None                                                            = 4
};

/// Enum /Script/Indiana.EDetectionMode
/// Size: 0x03
enum class EDetectionMode : uint8_t
{
	EDetectionMode__Perception                                                       = 0,
	EDetectionMode__PlayerProximity                                                  = 1,
	EDetectionMode__None                                                             = 2
};

/// Enum /Script/Indiana.EThirdPersonSocket
/// Size: 0x08
enum class EThirdPersonSocket : uint8_t
{
	EThirdPersonSocket__None                                                         = 0,
	EThirdPersonSocket__Chest                                                        = 1,
	EThirdPersonSocket__Head                                                         = 2,
	EThirdPersonSocket__RightArm                                                     = 3,
	EThirdPersonSocket__LeftArm                                                      = 4,
	EThirdPersonSocket__RightLeg                                                     = 5,
	EThirdPersonSocket__LeftLeg                                                      = 6,
	EThirdPersonSocket__Groin                                                        = 7
};

/// Enum /Script/Indiana.EStationaryRotateTarget
/// Size: 0x03
enum class EStationaryRotateTarget : uint8_t
{
	EStationaryRotateTarget__None                                                    = 0,
	EStationaryRotateTarget__NextPathCorner                                          = 1,
	EStationaryRotateTarget__CurrentTarget                                           = 2
};

/// Enum /Script/Indiana.EStationaryRotationType
/// Size: 0x04
enum class EStationaryRotationType : uint8_t
{
	EStationaryRotationType__None                                                    = 0,
	EStationaryRotationType__OutOfCombatOnly                                         = 1,
	EStationaryRotationType__AlwaysDuringTurns                                       = 2,
	EStationaryRotationType__Always                                                  = 3
};

/// Enum /Script/Indiana.EChangeRelationshipSource
/// Size: 0x04
enum class EChangeRelationshipSource : uint8_t
{
	EChangeRelationshipSource__CompanionCommand                                      = 0,
	EChangeRelationshipSource__CrimeActive                                           = 1,
	EChangeRelationshipSource__CrimeDetected                                         = 2,
	EChangeRelationshipSource__Default                                               = 3
};

/// Enum /Script/Indiana.EReputationRankType
/// Size: 0x04
enum class EReputationRankType : uint8_t
{
	EReputationRankType__Bad                                                         = 0,
	EReputationRankType__Mixed                                                       = 1,
	EReputationRankType__Default                                                     = 2,
	EReputationRankType__Good                                                        = 3
};

/// Enum /Script/Indiana.EReputationIncrementType
/// Size: 0x05
enum class EReputationIncrementType : uint8_t
{
	EReputationIncrementType__None                                                   = 0,
	EReputationIncrementType__Low                                                    = 1,
	EReputationIncrementType__Medium                                                 = 2,
	EReputationIncrementType__High                                                   = 3,
	EReputationIncrementType__Custom                                                 = 4
};

/// Enum /Script/Indiana.EMoraleContribution
/// Size: 0x04
enum class EMoraleContribution : uint8_t
{
	EMoraleContribution__Low                                                         = 0,
	EMoraleContribution__Medium                                                      = 1,
	EMoraleContribution__High                                                        = 2,
	EMoraleContribution__Custom                                                      = 3
};

/// Enum /Script/Indiana.EReputationActionType
/// Size: 0x11
enum class EReputationActionType : uint8_t
{
	EReputationActionType__Invalid                                                   = 0,
	EReputationActionType__Damage                                                    = 1,
	EReputationActionType__Kill                                                      = 2,
	EReputationActionType__Trespass                                                  = 3,
	EReputationActionType__CrimeRestrictedAreaDisguise                               = 4,
	EReputationActionType__CrimeRestrictedAreaNoDisguise                             = 5,
	EReputationActionType__CrimePickpocket                                           = 6,
	EReputationActionType__CrimeLockpick                                             = 7,
	EReputationActionType__CrimeHack                                                 = 8,
	EReputationActionType__CrimeDisguised                                            = 9,
	EReputationActionType__CrimeTheft                                                = 10
};

/// Enum /Script/Indiana.ETrackingMode
/// Size: 0x05
enum class ETrackingMode : uint8_t
{
	ETrackingMode__None                                                              = 0,
	ETrackingMode__Default                                                           = 1,
	ETrackingMode__Bark                                                              = 2,
	ETrackingMode__Conversation                                                      = 4,
	ETrackingMode__Elevator                                                          = 8
};

/// Enum /Script/Indiana.ETrackingRegion
/// Size: 0x05
enum class ETrackingRegion : uint8_t
{
	TR_Head                                                                          = 0,
	TR_Body                                                                          = 1,
	TR_Eyes                                                                          = 2,
	TR_WeaponAim                                                                     = 3,
	TR_Count                                                                         = 4
};

/// Enum /Script/Indiana.ETrackingPriority
/// Size: 0x09
enum class ETrackingPriority : uint8_t
{
	TP_Default                                                                       = 0,
	TP_PersonalSpace                                                                 = 1,
	TP_Moving                                                                        = 2,
	TP_Conversation                                                                  = 3,
	TP_Scripted                                                                      = 4,
	TP_Behavior                                                                      = 5,
	TP_Reaction                                                                      = 6,
	TP_Debug                                                                         = 7,
	TP_Count                                                                         = 8
};

/// Enum /Script/Indiana.EBehaviorStateCompletionType
/// Size: 0x04
enum class EBehaviorStateCompletionType : uint8_t
{
	EBehaviorStateCompletionType__None                                               = 0,
	EBehaviorStateCompletionType__Success                                            = 1,
	EBehaviorStateCompletionType__Complete                                           = 2,
	EBehaviorStateCompletionType__ExternalComplete                                   = 3
};

/// Enum /Script/Indiana.EAIEventType
/// Size: 0x05
enum class EAIEventType : uint8_t
{
	EAIEventType__Invalid                                                            = 0,
	EAIEventType__BehaviorDiscrete                                                   = 1,
	EAIEventType__BehaviorContinuous                                                 = 2,
	EAIEventType__ExternalDiscrete                                                   = 3,
	EAIEventType__ExternalContinuous                                                 = 4
};

/// Enum /Script/Indiana.EStimulusType
/// Size: 0x19
enum class EStimulusType : uint8_t
{
	EStimulusType__None                                                              = 0,
	EStimulusType__Distraction                                                       = 1,
	EStimulusType__SightInactive                                                     = 2,
	EStimulusType__Projectile                                                        = 3,
	EStimulusType__GenericSound                                                      = 4,
	EStimulusType__DeadBodyKiller                                                    = 5,
	EStimulusType__Shout                                                             = 6,
	EStimulusType__ForceDetect                                                       = 7,
	EStimulusType__SightActive                                                       = 8,
	EStimulusType__Damage                                                            = 9,
	EStimulusType__FriendInCombat                                                    = 10,
	EStimulusType__EncounterAggro                                                    = 11,
	EStimulusType__EnteredRestrictedArea                                             = 12,
	EStimulusType__Crime                                                             = 13,
	EStimulusType__SawFriendKilledByPlayer                                           = 14,
	EStimulusType__AutoDetect                                                        = 15,
	EStimulusType__PickpocketSound                                                   = 16,
	EStimulusType__LockpickSound                                                     = 17,
	EStimulusType__HackSound                                                         = 18
};

/// Enum /Script/Indiana.ETargetOverrideType
/// Size: 0x04
enum class ETargetOverrideType : uint8_t
{
	ETargetOverrideType__None                                                        = 0,
	ETargetOverrideType__Taunt                                                       = 1,
	ETargetOverrideType__CommandAttack                                               = 2,
	ETargetOverrideType__CommandCalledShot                                           = 3
};

/// Enum /Script/Indiana.ETargetRequestType
/// Size: 0x10
enum class ETargetRequestType : uint8_t
{
	ETargetRequestType__Clear                                                        = 0,
	ETargetRequestType__Fresh                                                        = 1,
	ETargetRequestType__FirstTarget                                                  = 2,
	ETargetRequestType__Override                                                     = 3,
	ETargetRequestType__ClearOverride                                                = 4,
	ETargetRequestType__Lost                                                         = 5,
	ETargetRequestType__Untargetable                                                 = 6,
	ETargetRequestType__Threat                                                       = 7,
	ETargetRequestType__Unreachable                                                  = 8,
	ETargetRequestType__Restore                                                      = 9
};

/// Enum /Script/Indiana.ECoverTypes
/// Size: 0x03
enum class ECoverTypes : uint8_t
{
	ECoverTypes__FullHeight                                                          = 0,
	ECoverTypes__HalfHeight                                                          = 1,
	ECoverTypes__None                                                                = 2
};

/// Enum /Script/Indiana.ERangedRepositionCondition
/// Size: 0x04
enum class ERangedRepositionCondition : uint8_t
{
	ERangedRepositionCondition__None                                                 = 0,
	ERangedRepositionCondition__TooNear                                              = 1,
	ERangedRepositionCondition__PreferredRange                                       = 2,
	ERangedRepositionCondition__TooFar                                               = 3
};

/// Enum /Script/Indiana.ERangedRepositionType
/// Size: 0x05
enum class ERangedRepositionType : uint8_t
{
	ERangedRepositionType__Default                                                   = 0,
	ERangedRepositionType__Stationary                                                = 1,
	ERangedRepositionType__Forward                                                   = 2,
	ERangedRepositionType__Backward                                                  = 3,
	ERangedRepositionType__Strafe                                                    = 4
};

/// Enum /Script/Indiana.EAnimTreeState
/// Size: 0x06
enum class EAnimTreeState : uint8_t
{
	EAnimTreeState__None                                                             = 0,
	EAnimTreeState__Neutral                                                          = 1,
	EAnimTreeState__Precombat                                                        = 2,
	EAnimTreeState__CombatNotReady                                                   = 3,
	EAnimTreeState__Combat                                                           = 4,
	EAnimTreeState__Count                                                            = 5
};

/// Enum /Script/Indiana.EDecisionTreeContextType
/// Size: 0x05
enum class EDecisionTreeContextType : uint32_t
{
	EDecisionTreeContextType__None                                                   = 0,
	EDecisionTreeContextType__All                                                    = 1,
	EDecisionTreeContextType__OutOfCombat                                            = 2,
	EDecisionTreeContextType__InCombat                                               = 3,
	EDecisionTreeContextType__Count                                                  = 4
};

/// Enum /Script/Indiana.EDisablePriority
/// Size: 0x10
enum class EDisablePriority : uint8_t
{
	EDisablePriority__Invalid                                                        = 0,
	EDisablePriority__IdleDisable                                                    = 1,
	EDisablePriority__ShockFace                                                      = 2,
	EDisablePriority__DelayableCombatEffect                                          = 3,
	EDisablePriority__LightHitReact                                                  = 4,
	EDisablePriority__HeavyHitReact                                                  = 5,
	EDisablePriority__ImmediateCombatEffect                                          = 6,
	EDisablePriority__CalledShotCombatEffect                                         = 7,
	EDisablePriority__PushEffect                                                     = 8,
	EDisablePriority__RagdollDisable                                                 = 9
};

/// Enum /Script/Indiana.EParentDefaultBehaviorType
/// Size: 0x02
enum class EParentDefaultBehaviorType : uint8_t
{
	EParentDefaultBehaviorType__Idle                                                 = 0,
	EParentDefaultBehaviorType__Wander                                               = 1
};

/// Enum /Script/Indiana.EDefaultBehaviorType
/// Size: 0x06
enum class EDefaultBehaviorType : uint8_t
{
	EDefaultBehaviorType__None                                                       = 0,
	EDefaultBehaviorType__Idle                                                       = 1,
	EDefaultBehaviorType__Patrol                                                     = 2,
	EDefaultBehaviorType__Follow                                                     = 3,
	EDefaultBehaviorType__FollowPlayer                                               = 4,
	EDefaultBehaviorType__Wander                                                     = 5
};

/// Enum /Script/Indiana.EBehaviorStatePriority
/// Size: 0x19
enum class EBehaviorStatePriority : uint8_t
{
	EBehaviorStatePriority__None                                                     = 0,
	EBehaviorStatePriority__Default                                                  = 1,
	EBehaviorStatePriority__SwitchContext                                            = 2,
	EBehaviorStatePriority__SwitchWeapon                                             = 3,
	EBehaviorStatePriority__Approach                                                 = 4,
	EBehaviorStatePriority__IdleDisable                                              = 5,
	EBehaviorStatePriority__Conversation                                             = 6,
	EBehaviorStatePriority__ShockFace                                                = 7,
	EBehaviorStatePriority__Blackout                                                 = 8,
	EBehaviorStatePriority__DelayableCombatEffect                                    = 9,
	EBehaviorStatePriority__LightHitReact                                            = 10,
	EBehaviorStatePriority__HeavyHitReact                                            = 11,
	EBehaviorStatePriority__ImmediateCombatEffect                                    = 12,
	EBehaviorStatePriority__CalledShotCombatEffect                                   = 13,
	EBehaviorStatePriority__PushEffect                                               = 14,
	EBehaviorStatePriority__RagdollDisable                                           = 15,
	EBehaviorStatePriority__CalledShot                                               = 16,
	EBehaviorStatePriority__ForceTeleport                                            = 17,
	EBehaviorStatePriority__Dead                                                     = 18
};

/// Enum /Script/Indiana.EDecisionTreeRequestPriority
/// Size: 0x06
enum class EDecisionTreeRequestPriority : uint8_t
{
	EDecisionTreeRequestPriority__None                                               = 0,
	EDecisionTreeRequestPriority__OutOfCombat                                        = 1,
	EDecisionTreeRequestPriority__Default                                            = 2,
	EDecisionTreeRequestPriority__ForcedQueued                                       = 3,
	EDecisionTreeRequestPriority__HardScript                                         = 4,
	EDecisionTreeRequestPriority__ForcedImmediate                                    = 5
};

/// Enum /Script/Indiana.ESlotPriority
/// Size: 0x05
enum class ESlotPriority : uint8_t
{
	ESlotPriority__Lowest                                                            = 0,
	ESlotPriority__Low                                                               = 1,
	ESlotPriority__Normal                                                            = 2,
	ESlotPriority__High                                                              = 3,
	ESlotPriority__Highest                                                           = 4
};

/// Enum /Script/Indiana.EWeaponSwitchType
/// Size: 0x05
enum class EWeaponSwitchType : uint8_t
{
	EWeaponSwitchType__Type                                                          = 0,
	EWeaponSwitchType__Slot                                                          = 1,
	EWeaponSwitchType__LimitedRanged                                                 = 2,
	EWeaponSwitchType__UnlimitedRanged                                               = 3,
	EWeaponSwitchType__CalledShot                                                    = 4
};

/// Enum /Script/Indiana.EAvoidanceGroupType
/// Size: 0x02
enum class EAvoidanceGroupType : uint8_t
{
	EAvoidanceGroupType__Default                                                     = 0,
	EAvoidanceGroupType__FleeingCritter                                              = 1
};

/// Enum /Script/Indiana.EJumpGravityState
/// Size: 0x03
enum class EJumpGravityState : uint8_t
{
	EJumpGravityState__Off                                                           = 0,
	EJumpGravityState__On                                                            = 1,
	EJumpGravityState__ForcedOn                                                      = 2
};

/// Enum /Script/Indiana.EStationaryRotateState
/// Size: 0x02
enum class EStationaryRotateState : uint8_t
{
	EStationaryRotateState__None                                                     = 0,
	EStationaryRotateState__Rotating                                                 = 1
};

/// Enum /Script/Indiana.ETraverseState
/// Size: 0x03
enum class ETraverseState : uint8_t
{
	ETraverseState__None                                                             = 0,
	ETraverseState__Waiting                                                          = 1,
	ETraverseState__Traversing                                                       = 2
};

/// Enum /Script/Indiana.EAIMovementState
/// Size: 0x04
enum class EAIMovementState : uint8_t
{
	EAIMovementState__Walk                                                           = 0,
	EAIMovementState__Run                                                            = 1,
	EAIMovementState__Sprint                                                         = 2,
	EAIMovementState__Dynamic                                                        = 3
};

/// Enum /Script/Indiana.EUsableCoverTypes
/// Size: 0x03
enum class EUsableCoverTypes : uint8_t
{
	EUsableCoverTypes__All                                                           = 0,
	EUsableCoverTypes__FullOnly                                                      = 1,
	EUsableCoverTypes__HalfOnly                                                      = 2
};

/// Enum /Script/Indiana.EDefensiveActionType
/// Size: 0x05
enum class EDefensiveActionType : uint8_t
{
	EDefensiveActionType__Unknown                                                    = 0,
	EDefensiveActionType__MeleeBlock                                                 = 1,
	EDefensiveActionType__Dodge                                                      = 2,
	EDefensiveActionType__ReactiveRange                                              = 3,
	EDefensiveActionType__Count                                                      = 4
};

/// Enum /Script/Indiana.ELostTargetSearchMode
/// Size: 0x02
enum class ELostTargetSearchMode : uint8_t
{
	ELostTargetSearchMode__DirectSearch                                              = 0,
	ELostTargetSearchMode__RepositionSearch                                          = 1
};

/// Enum /Script/Indiana.ELostTargetWaitTime
/// Size: 0x05
enum class ELostTargetWaitTime : uint8_t
{
	ELostTargetWaitTime__Invalid                                                     = 0,
	ELostTargetWaitTime__VeryShort                                                   = 1,
	ELostTargetWaitTime__Short                                                       = 2,
	ELostTargetWaitTime__Medium                                                      = 3,
	ELostTargetWaitTime__Long                                                        = 4
};

/// Enum /Script/Indiana.EMeleeRecoveryType
/// Size: 0x03
enum class EMeleeRecoveryType : uint8_t
{
	EMeleeRecoveryType__None                                                         = 0,
	EMeleeRecoveryType__Move                                                         = 1,
	EMeleeRecoveryType__Dodge                                                        = 2
};

/// Enum /Script/Indiana.EMeleeActionUseCase
/// Size: 0x05
enum class EMeleeActionUseCase : uint8_t
{
	EMeleeActionUseCase__Default                                                     = 0,
	EMeleeActionUseCase__WithinRange                                                 = 1,
	EMeleeActionUseCase__OutsideRange                                                = 2,
	EMeleeActionUseCase__AbilityOnly                                                 = 3,
	EMeleeActionUseCase__ForceIfOutsideRange                                         = 4
};

/// Enum /Script/Indiana.EPatrolType
/// Size: 0x03
enum class EPatrolType : uint8_t
{
	EPatrolType__OneShot                                                             = 0,
	EPatrolType__Loop                                                                = 1,
	EPatrolType__PingPong                                                            = 2
};

/// Enum /Script/Indiana.EAggresionType
/// Size: 0x03
enum class EAggresionType : uint8_t
{
	EAggresionType__Low                                                              = 0,
	EAggresionType__Medium                                                           = 1,
	EAggresionType__High                                                             = 2
};

/// Enum /Script/Indiana.ERangeBehaviorType
/// Size: 0x04
enum class ERangeBehaviorType : uint8_t
{
	ERangeBehaviorType__Cover                                                        = 0,
	ERangeBehaviorType__Range                                                        = 1,
	ERangeBehaviorType__PreferredRange                                               = 2,
	ERangeBehaviorType__None                                                         = 3
};

/// Enum /Script/Indiana.EOnEnterCombatBehavior
/// Size: 0x03
enum class EOnEnterCombatBehavior : uint8_t
{
	EOnEnterCombatBehavior__None                                                     = 0,
	EOnEnterCombatBehavior__StationaryFire                                           = 1,
	EOnEnterCombatBehavior__StationaryFireIfOutsidePreferredRange                    = 2
};

/// Enum /Script/Indiana.ESuppressingFireDuration
/// Size: 0x05
enum class ESuppressingFireDuration : uint8_t
{
	ESuppressingFireDuration__Invalid                                                = 0,
	ESuppressingFireDuration__Disabled                                               = 1,
	ESuppressingFireDuration__Short                                                  = 2,
	ESuppressingFireDuration__Medium                                                 = 3,
	ESuppressingFireDuration__Long                                                   = 4
};

/// Enum /Script/Indiana.EWeaponFireType
/// Size: 0x02
enum class EWeaponFireType : uint8_t
{
	EWeaponFireType__Ranged                                                          = 0,
	EWeaponFireType__Melee                                                           = 1
};

/// Enum /Script/Indiana.EAmmoType
/// Size: 0x08
enum class EAmmoType : uint8_t
{
	EAmmoType__Invalid                                                               = 0,
	EAmmoType__Handgun                                                               = 1,
	EAmmoType__Rifle                                                                 = 2,
	EAmmoType__Shotgun                                                               = 3,
	EAmmoType__Battery                                                               = 4,
	EAmmoType__EnergyCell                                                            = 5,
	EAmmoType__RPG                                                                   = 6,
	EAmmoType__Needler                                                               = 7
};

/// Enum /Script/Indiana.ENotifyChatterEventType
/// Size: 0x13
enum class ENotifyChatterEventType : uint8_t
{
	ENotifyChatterEventType__Invalid                                                 = 0,
	ENotifyChatterEventType__Event01                                                 = 1,
	ENotifyChatterEventType__Event02                                                 = 2,
	ENotifyChatterEventType__Event03                                                 = 3,
	ENotifyChatterEventType__Event04                                                 = 4,
	ENotifyChatterEventType__Event05                                                 = 5,
	ENotifyChatterEventType__Event06                                                 = 6,
	ENotifyChatterEventType__Event07                                                 = 7,
	ENotifyChatterEventType__Event08                                                 = 8,
	ENotifyChatterEventType__Event09                                                 = 9,
	ENotifyChatterEventType__Event10                                                 = 10,
	ENotifyChatterEventType__Event11                                                 = 11,
	ENotifyChatterEventType__Event12                                                 = 12
};

/// Enum /Script/Indiana.EDespawnRules
/// Size: 0x03
enum class EDespawnRules : uint8_t
{
	EDespawnRules__Idle                                                              = 0,
	EDespawnRules__Combat                                                            = 1,
	EDespawnRules__Never                                                             = 2
};

/// Enum /Script/Indiana.EHeadStyle
/// Size: 0x08
enum class EHeadStyle : uint8_t
{
	EHeadStyle__Normal                                                               = 0,
	EHeadStyle__NormalWithoutBeard                                                   = 1,
	EHeadStyle__CappedHair                                                           = 2,
	EHeadStyle__CappedHairWithoutBeard                                               = 3,
	EHeadStyle__HiddenHair                                                           = 4,
	EHeadStyle__HiddenHairWithoutBeard                                               = 5,
	EHeadStyle__CompletelyHidden                                                     = 6,
	EHeadStyle__None                                                                 = 7
};

/// Enum /Script/Indiana.EArmorModSlot
/// Size: 0x06
enum class EArmorModSlot : uint8_t
{
	EArmorModSlot__Armoring                                                          = 0,
	EArmorModSlot__Resistance                                                        = 1,
	EArmorModSlot__Dampening                                                         = 2,
	EArmorModSlot__Utility                                                           = 3,
	EArmorModSlot__Count                                                             = 4,
	EArmorModSlot__Invalid                                                           = 5
};

/// Enum /Script/Indiana.EArmorSlot
/// Size: 0x04
enum class EArmorSlot : uint8_t
{
	EArmorSlot__ArmorSet                                                             = 0,
	EArmorSlot__Helmet                                                               = 1,
	EArmorSlot__Count                                                                = 2,
	EArmorSlot__Invalid                                                              = 3
};

/// Enum /Script/Indiana.EAudioLogPackageType
/// Size: 0x03
enum class EAudioLogPackageType : uint8_t
{
	EAudioLogPackageType__BaseGame                                                   = 0,
	EAudioLogPackageType__INX01                                                      = 1,
	EAudioLogPackageType__INX02                                                      = 2
};

/// Enum /Script/Indiana.EUIMarkerType
/// Size: 0x10
enum class EUIMarkerType : uint8_t
{
	EUIMarkerType__None                                                              = 0,
	EUIMarkerType__Quest                                                             = 1,
	EUIMarkerType__POI_Undiscovered                                                  = 2,
	EUIMarkerType__AreaBeacon                                                        = 3,
	EUIMarkerType__Enemy                                                             = 4,
	EUIMarkerType__Hostile                                                           = 5,
	EUIMarkerType__POI_Discovered                                                    = 6,
	EUIMarkerType__NonHostile                                                        = 7,
	EUIMarkerType__HostilePacifist                                                   = 8,
	EUIMarkerType__Error                                                             = 9
};

/// Enum /Script/Indiana.EBeaconType
/// Size: 0x04
enum class EBeaconType : uint8_t
{
	EBeaconType__None                                                                = 0,
	EBeaconType__Type1                                                               = 1,
	EBeaconType__POI                                                                 = 2,
	EBeaconType__Max                                                                 = 3
};

/// Enum /Script/Indiana.ESpecialBeaconType
/// Size: 0x04
enum class ESpecialBeaconType : uint8_t
{
	ESpecialBeaconType__None                                                         = 0,
	ESpecialBeaconType__Ship                                                         = 1,
	ESpecialBeaconType__ShipDoor                                                     = 2,
	ESpecialBeaconType__ShipTerminal                                                 = 3
};

/// Enum /Script/Indiana.EFlowAbortCondition
/// Size: 0x02
enum class EFlowAbortCondition : uint8_t
{
	EFlowAbortCondition__Conditional                                                 = 0,
	EFlowAbortCondition__Custom                                                      = 1
};

/// Enum /Script/Indiana.EFlowAbortMode
/// Size: 0x02
enum class EFlowAbortMode : uint8_t
{
	EFlowAbortMode__None                                                             = 0,
	EFlowAbortMode__Self                                                             = 1
};

/// Enum /Script/Indiana.EAIScriptExecutionType
/// Size: 0x03
enum class EAIScriptExecutionType : uint8_t
{
	EAIScriptExecutionType__OnEnter                                                  = 0,
	EAIScriptExecutionType__OnUpdate                                                 = 1,
	EAIScriptExecutionType__OnExit                                                   = 2
};

/// Enum /Script/Indiana.EToggleScriptType
/// Size: 0x02
enum class EToggleScriptType : uint8_t
{
	EToggleScriptType__OnEnter                                                       = 0,
	EToggleScriptType__OnExit                                                        = 1
};

/// Enum /Script/Indiana.EAIAnimationParameter
/// Size: 0x02
enum class EAIAnimationParameter : uint8_t
{
	EAIAnimationParameter__InCover                                                   = 0,
	EAIAnimationParameter__InvestigatingDeadBody                                     = 1
};

/// Enum /Script/Indiana.EAnimationState
/// Size: 0x04
enum class EAnimationState : uint8_t
{
	EAnimationState__Combat                                                          = 0,
	EAnimationState__PreCombat                                                       = 1,
	EAnimationState__Neutral                                                         = 2,
	EAnimationState__None                                                            = 100
};

/// Enum /Script/Indiana.ETargetLostResponse
/// Size: 0x03
enum class ETargetLostResponse : uint8_t
{
	ETargetLostResponse__None                                                        = 0,
	ETargetLostResponse__AIEvent                                                     = 1,
	ETargetLostResponse__RequestNewTarget                                            = 2
};

/// Enum /Script/Indiana.EFiringPatternState
/// Size: 0x07
enum class EFiringPatternState : uint8_t
{
	EFiringPatternState__PrePause                                                    = 0,
	EFiringPatternState__StartPause                                                  = 1,
	EFiringPatternState__Burst                                                       = 2,
	EFiringPatternState__BurstAnimation                                              = 3,
	EFiringPatternState__BurstPause                                                  = 4,
	EFiringPatternState__EndPause                                                    = 5,
	EFiringPatternState__Invalid                                                     = 6
};

/// Enum /Script/Indiana.EFiringPatternCompleteType
/// Size: 0x03
enum class EFiringPatternCompleteType : uint8_t
{
	EFiringPatternCompleteType__FinishBehavior                                       = 0,
	EFiringPatternCompleteType__FinishTask                                           = 1,
	EFiringPatternCompleteType__Repeat                                               = 2
};

/// Enum /Script/Indiana.EMoveToResultResponse
/// Size: 0x03
enum class EMoveToResultResponse : uint8_t
{
	EMoveToResultResponse__ContinueTask                                              = 0,
	EMoveToResultResponse__ExitTask                                                  = 1,
	EMoveToResultResponse__ExitBehavior                                              = 2
};

/// Enum /Script/Indiana.EMoveToState
/// Size: 0x07
enum class EMoveToState : uint8_t
{
	EMoveToState__None                                                               = 0,
	EMoveToState__MoveToTarget                                                       = 1,
	EMoveToState__MoveToNavMesh                                                      = 2,
	EMoveToState__PartialSuccess                                                     = 3,
	EMoveToState__WaitForUnblock                                                     = 4,
	EMoveToState__Failed                                                             = 5,
	EMoveToState__Succeeded                                                          = 6
};

/// Enum /Script/Indiana.EMoveToResult
/// Size: 0x07
enum class EMoveToResult : uint8_t
{
	EMoveToResult__Pending                                                           = 0,
	EMoveToResult__Success                                                           = 1,
	EMoveToResult__Blocked                                                           = 2,
	EMoveToResult__UnexpectedFailure                                                 = 3,
	EMoveToResult__OffNavMesh                                                        = 4,
	EMoveToResult__Repath                                                            = 5,
	EMoveToResult__TotalFailure                                                      = 6
};

/// Enum /Script/Indiana.EAnimMovementModifierState
/// Size: 0x03
enum class EAnimMovementModifierState : uint8_t
{
	EAnimMovementModifierState__None                                                 = 0,
	EAnimMovementModifierState__Lamed                                                = 1,
	EAnimMovementModifierState__Hobbled                                              = 2
};

/// Enum /Script/Indiana.EAnimMovementState
/// Size: 0x04
enum class EAnimMovementState : uint8_t
{
	EAnimMovementState__OnGround                                                     = 0,
	EAnimMovementState__InAir                                                        = 1,
	EAnimMovementState__Sprinting                                                    = 2,
	EAnimMovementState__Climbing                                                     = 3
};

/// Enum /Script/Indiana.EDeathType
/// Size: 0x09
enum class EDeathType : uint8_t
{
	EDeathType__Corrosive                                                            = 0,
	EDeathType__Dismember                                                            = 1,
	EDeathType__Energy                                                               = 2,
	EDeathType__Gib                                                                  = 3,
	EDeathType__NRay                                                                 = 4,
	EDeathType__Ragdoll                                                              = 5,
	EDeathType__Shock                                                                = 6,
	EDeathType__Thermal                                                              = 7,
	EDeathType__Count                                                                = 8
};

/// Enum /Script/Indiana.ECharacterDeathTriBool
/// Size: 0x04
enum class ECharacterDeathTriBool : uint8_t
{
	ECharacterDeathTriBool__BFalse                                                   = 0,
	ECharacterDeathTriBool__BTrue                                                    = 1,
	ECharacterDeathTriBool__Any                                                      = 2,
	ECharacterDeathTriBool__Count                                                    = 3
};

/// Enum /Script/Indiana.ECharacterGrouping
/// Size: 0x22
enum class ECharacterGrouping : uint8_t
{
	ECharacterGrouping__None                                                         = 0,
	ECharacterGrouping__Complex                                                      = 1,
	ECharacterGrouping__GuardGardener                                                = 2,
	ECharacterGrouping__GuardIconoclasts                                             = 3,
	ECharacterGrouping__GuardLlama                                                   = 4,
	ECharacterGrouping__GuardMardets                                                 = 5,
	ECharacterGrouping__GuardOtherCorporate                                          = 6,
	ECharacterGrouping__GuardOutlaws                                                 = 7,
	ECharacterGrouping__GuardSublight                                                = 8,
	ECharacterGrouping__GuardUDL                                                     = 9,
	ECharacterGrouping__Infected                                                     = 10,
	ECharacterGrouping__Marauder                                                     = 11,
	ECharacterGrouping__RobotBipedCombatant                                          = 12,
	ECharacterGrouping__RobotBipedNonCombatant                                       = 13,
	ECharacterGrouping__RobotHoverCombatant                                          = 14,
	ECharacterGrouping__RobotHoverNonCombatant                                       = 15,
	ECharacterGrouping__RobotTripedCombatant                                         = 16,
	ECharacterGrouping__RobotTripedNonCombatant                                      = 17,
	ECharacterGrouping__TownieByzantium                                              = 18,
	ECharacterGrouping__TownieHoodlum                                                = 19,
	ECharacterGrouping__TownieLight                                                  = 20,
	ECharacterGrouping__TownieNonByzantium                                           = 21
};

/// Enum /Script/Indiana.ECreatureXPType
/// Size: 0x06
enum class ECreatureXPType : uint8_t
{
	ECreatureXPType__Invalid                                                         = 0,
	ECreatureXPType__Trivial                                                         = 1,
	ECreatureXPType__Fodder                                                          = 2,
	ECreatureXPType__Normal                                                          = 3,
	ECreatureXPType__Leader                                                          = 4,
	ECreatureXPType__Boss                                                            = 5
};

/// Enum /Script/Indiana.ECharacterSkillRange
/// Size: 0x07
enum class ECharacterSkillRange : uint8_t
{
	ECharacterSkillRange__Low                                                        = 0,
	ECharacterSkillRange__Medium                                                     = 1,
	ECharacterSkillRange__High                                                       = 2,
	ECharacterSkillRange__Extreme                                                    = 3,
	ECharacterSkillRange__Cosmetic                                                   = 4,
	ECharacterSkillRange__Count                                                      = 5,
	ECharacterSkillRange__Invalid                                                    = 6
};

/// Enum /Script/Indiana.EAttributeGroup
/// Size: 0x05
enum class EAttributeGroup : uint8_t
{
	EAttributeGroup__Body                                                            = 0,
	EAttributeGroup__Mind                                                            = 1,
	EAttributeGroup__Personality                                                     = 2,
	EAttributeGroup__Count                                                           = 3,
	EAttributeGroup__Invalid                                                         = 4
};

/// Enum /Script/Indiana.EChatterEventType
/// Size: 0x166
enum class EChatterEventType : uint8_t
{
	EChatterEventType__ALL_BlockHit                                                  = 0,
	EChatterEventType__ALL_Death                                                     = 1,
	EChatterEventType__ALL_DeathCorrosive                                            = 2,
	EChatterEventType__ALL_DeathEnergy                                               = 3,
	EChatterEventType__ALL_DeathGibbed                                               = 4,
	EChatterEventType__ALL_DeathNray                                                 = 5,
	EChatterEventType__ALL_DeathShock                                                = 6,
	EChatterEventType__ALL_DeathThermal                                              = 7,
	EChatterEventType__ALL_FallDamage                                                = 8,
	EChatterEventType__ALL_Hit                                                       = 9,
	EChatterEventType__ALL_HitCrit                                                   = 10,
	EChatterEventType__ALL_HitGraze                                                  = 11,
	EChatterEventType__ALL_HitHeavy                                                  = 12,
	EChatterEventType__ALL_HitNoDamage                                               = 13,
	EChatterEventType__ALL_LowHealth                                                 = 14,
	EChatterEventType__ALL_Melee                                                     = 15,
	EChatterEventType__ALL_MeleeHeavy                                                = 16,
	EChatterEventType__ALL_MeleeSweep                                                = 17,
	EChatterEventType__ALL_MovementDodge                                             = 18,
	EChatterEventType__ALL_MovementFalling                                           = 19,
	EChatterEventType__ALL_MovementJump                                              = 20,
	EChatterEventType__ALL_MovementLand                                              = 21,
	EChatterEventType__ALL_StateAcid                                                 = 22,
	EChatterEventType__ALL_StateBleed                                                = 23,
	EChatterEventType__ALL_StateBlind                                                = 24,
	EChatterEventType__ALL_StateBurning                                              = 25,
	EChatterEventType__ALL_StateConcuss                                              = 26,
	EChatterEventType__ALL_StateCripple                                              = 27,
	EChatterEventType__ALL_StateKnockback                                            = 28,
	EChatterEventType__ALL_StateMaim                                                 = 29,
	EChatterEventType__ALL_StatePoison                                               = 30,
	EChatterEventType__ALL_StateStaggered                                            = 31,
	EChatterEventType__COM_CommandAttack                                             = 32,
	EChatterEventType__COM_CommandCalledshot1                                        = 33,
	EChatterEventType__COM_CommandCalledshot2                                        = 34,
	EChatterEventType__COM_CommandCalledshot3                                        = 35,
	EChatterEventType__COM_CommandMoveInvalidLocation                                = 36,
	EChatterEventType__COM_CommandMove                                               = 37,
	EChatterEventType__COM_CommandReturn                                             = 38,
	EChatterEventType__COM_HackSuccessEasy                                           = 39,
	EChatterEventType__COM_HackSuccessHard                                           = 40,
	EChatterEventType__COM_Idle                                                      = 41,
	EChatterEventType__COM_LockpickSuccessEasy                                       = 42,
	EChatterEventType__COM_LockpickSuccessHard                                       = 43,
	EChatterEventType__COM_PartyCombatEnd                                            = 44,
	EChatterEventType__COM_PartyCombatEndNoDamageTaken                               = 45,
	EChatterEventType__COM_PartyCombatStartAttacked                                  = 46,
	EChatterEventType__COM_PartyCombatStartAttacking                                 = 47,
	EChatterEventType__COM_PartyCombatStartEasy                                      = 48,
	EChatterEventType__COM_PartyCombatStartHard                                      = 49,
	EChatterEventType__COM_PlayerDeath                                               = 50,
	EChatterEventType__COM_PlayerHitCrit                                             = 51,
	EChatterEventType__COM_PlayerHitGraze                                            = 52,
	EChatterEventType__COM_PlayerHitGrazeCorrosive                                   = 53,
	EChatterEventType__COM_PlayerHitGrazeEnergy                                      = 54,
	EChatterEventType__COM_PlayerHitGrazeNray                                        = 55,
	EChatterEventType__COM_PlayerHitGrazeShock                                       = 56,
	EChatterEventType__COM_PlayerHitGrazeThermal                                     = 57,
	EChatterEventType__COM_PlayerKill                                                = 58,
	EChatterEventType__COM_PlayerKillStealth                                         = 59,
	EChatterEventType__COM_PlayerLowHealth                                           = 60,
	EChatterEventType__COM_PlayerUseDrug                                             = 61,
	EChatterEventType__COM_ResumeBanter                                              = 62,
	EChatterEventType__COM_StealthEnter                                              = 63,
	EChatterEventType__COM_StealthExit                                               = 64,
	EChatterEventType__COM_StealthWarning                                            = 65,
	EChatterEventType__COM_WantsToTalk                                               = 66,
	EChatterEventType__NPC_AlertAllyDeath                                            = 67,
	EChatterEventType__NPC_AlertCorpse                                               = 68,
	EChatterEventType__NPC_AlertInvestigate                                          = 69,
	EChatterEventType__NPC_AlertSuspicious                                           = 70,
	EChatterEventType__NPC_CombatEndLostTarget                                       = 71,
	EChatterEventType__NPC_CombatEndTether                                           = 72,
	EChatterEventType__NPC_CombatEndVictory                                          = 73,
	EChatterEventType__NPC_CombatSearchIdle                                          = 74,
	EChatterEventType__NPC_CombatStartAttacked                                       = 75,
	EChatterEventType__NPC_CombatStartAttacking                                      = 76,
	EChatterEventType__NPC_CombatStartCrime                                          = 77,
	EChatterEventType__NPC_CombatStartScared                                         = 78,
	EChatterEventType__NPC_CombatTargetLost                                          = 79,
	EChatterEventType__NPC_CombatTargetReacquired                                    = 80,
	EChatterEventType__NPC_CrimeDetected                                             = 81,
	EChatterEventType__NPC_CrimeDetectedDisguise                                     = 82,
	EChatterEventType__NPC_CrimeDetectedHack                                         = 83,
	EChatterEventType__NPC_CrimeDetectedLockpick                                     = 84,
	EChatterEventType__NPC_CrimeDetectedPickpocket                                   = 85,
	EChatterEventType__NPC_CrimeDetectedRestrictedArea                               = 86,
	EChatterEventType__NPC_CrimeDetectedTheft                                        = 87,
	EChatterEventType__NPC_CrimeFleeing                                              = 88,
	EChatterEventType__NPC_DialogIntimidated                                         = 89,
	EChatterEventType__NPC_DialogLiedTo                                              = 90,
	EChatterEventType__NPC_DialogPersuaded                                           = 91,
	EChatterEventType__NPC_FriendlyFire                                              = 92,
	EChatterEventType__NPC_InterrogationBegin                                        = 93,
	EChatterEventType__NPC_InterrogationBeginRestrictedArea                          = 94,
	EChatterEventType__NPC_InterrogationBribed                                       = 95,
	EChatterEventType__NPC_InterrogationConvinced                                    = 96,
	EChatterEventType__NPC_InterrogationFight                                        = 97,
	EChatterEventType__NPC_InvestigateGiveUp                                         = 98,
	EChatterEventType__NPC_Kill                                                      = 99,
	EChatterEventType__NPC_MeleeWaiting                                              = 100,
	EChatterEventType__NPC_NoConversation                                            = 101,
	EChatterEventType__NPC_HeardCombat                                               = 102,
	EChatterEventType__NPC_ObserveCombat                                             = 103,
	EChatterEventType__NPC_PerfectDisguise                                           = 104,
	EChatterEventType__NPC_PersonalSpaceEnter                                        = 105,
	EChatterEventType__NPC_PersonalSpaceExit                                         = 106,
	EChatterEventType__NPC_SelfAdvance                                               = 107,
	EChatterEventType__NPC_SelfCover                                                 = 108,
	EChatterEventType__NPC_SelfReload                                                = 109,
	EChatterEventType__NPC_SelfSuppress                                              = 110,
	EChatterEventType__NPC_SelfSwitchTarget                                          = 111,
	EChatterEventType__NPC_SquadAdvance                                              = 112,
	EChatterEventType__NPC_SquadCover                                                = 113,
	EChatterEventType__NPC_SquadSuppress                                             = 114,
	EChatterEventType__NPC_SquadSwitchTarget                                         = 115,
	EChatterEventType__NPC_StateDisarmed                                             = 116,
	EChatterEventType__NPC_StateKnockdown                                            = 117,
	EChatterEventType__NPC_StateKnockout                                             = 118,
	EChatterEventType__NPC_StateStunned                                              = 119,
	EChatterEventType__NPC_Threatened                                                = 120,
	EChatterEventType__PL_Medkit                                                     = 121,
	EChatterEventType__PL_SkillIntimidate                                            = 122,
	EChatterEventType__PL_SkillLie                                                   = 123,
	EChatterEventType__PL_SkillPersuade                                              = 124,
	EChatterEventType__ROBO_HackPowerDown                                            = 125,
	EChatterEventType__ROBO_HackPowerUp                                              = 126,
	EChatterEventType__ROBO_HackWarning                                              = 127,
	EChatterEventType__COM_NPCTargetedPlayerBack                                     = 128,
	EChatterEventType__COM_NPCTargetedPlayerFront                                    = 129,
	EChatterEventType__COM_NPCTargetedPlayerLeft                                     = 130,
	EChatterEventType__COM_NPCTargetedPlayerRight                                    = 131,
	EChatterEventType__AnimNotify01                                                  = 132,
	EChatterEventType__AnimNotify02                                                  = 133,
	EChatterEventType__AnimNotify03                                                  = 134,
	EChatterEventType__AnimNotify04                                                  = 135,
	EChatterEventType__AnimNotify05                                                  = 136,
	EChatterEventType__AnimNotify06                                                  = 137,
	EChatterEventType__AnimNotify07                                                  = 138,
	EChatterEventType__AnimNotify08                                                  = 139,
	EChatterEventType__AnimNotify09                                                  = 140,
	EChatterEventType__AnimNotify10                                                  = 141,
	EChatterEventType__AnimNotify11                                                  = 142,
	EChatterEventType__AnimNotify12                                                  = 143,
	EChatterEventType__Cutscene_Line01                                               = 144,
	EChatterEventType__Cutscene_Line02                                               = 145,
	EChatterEventType__Cutscene_Line03                                               = 146,
	EChatterEventType__Cutscene_Line04                                               = 147,
	EChatterEventType__Cutscene_Line05                                               = 148,
	EChatterEventType__Cutscene_Line06                                               = 149,
	EChatterEventType__Cutscene_Line07                                               = 150,
	EChatterEventType__Cutscene_Line08                                               = 151,
	EChatterEventType__Cutscene_Line09                                               = 152,
	EChatterEventType__Cutscene_Line10                                               = 153,
	EChatterEventType__Cutscene_Line11                                               = 154,
	EChatterEventType__Cutscene_Line12                                               = 155,
	EChatterEventType__Cutscene_Line13                                               = 156,
	EChatterEventType__Cutscene_Line14                                               = 157,
	EChatterEventType__Cutscene_Line15                                               = 158,
	EChatterEventType__Cutscene_Line16                                               = 159,
	EChatterEventType__Stub1                                                         = 160,
	EChatterEventType__Stub2                                                         = 161,
	EChatterEventType__Stub3                                                         = 162,
	EChatterEventType__Stub4                                                         = 163,
	EChatterEventType__Stub5                                                         = 164,
	EChatterEventType__Count                                                         = 165
};

/// Enum /Script/Indiana.EChatterLevel
/// Size: 0x04
enum class EChatterLevel : uint8_t
{
	EChatterLevel__All                                                               = 0,
	EChatterLevel__EventType                                                         = 1,
	EChatterLevel__Group                                                             = 2,
	EChatterLevel__Character                                                         = 3
};

/// Enum /Script/Indiana.EClearThreatTarget
/// Size: 0x03
enum class EClearThreatTarget : uint32_t
{
	EClearThreatTarget__Applier                                                      = 0,
	EClearThreatTarget__Companions                                                   = 1,
	EClearThreatTarget__Player                                                       = 2
};

/// Enum /Script/Indiana.ECameraParamsScore
/// Size: 0x07
enum class ECameraParamsScore : uint8_t
{
	ECameraParamsScore__Invalid                                                      = 0,
	ECameraParamsScore__Fail                                                         = 1,
	ECameraParamsScore__InitialEnvSweepFail                                          = 2,
	ECameraParamsScore__InitialEnvCharSweepFail                                      = 3,
	ECameraParamsScore__EnvClear                                                     = 4,
	ECameraParamsScore__InitialEnvCharSweepEnv                                       = 5,
	ECameraParamsScore__EnvCharClear                                                 = 6
};

/// Enum /Script/Indiana.ECompanionSlot
/// Size: 0x02
enum class ECompanionSlot : uint8_t
{
	ECompanionSlot__Slot1                                                            = 0,
	ECompanionSlot__Slot2                                                            = 1
};

/// Enum /Script/Indiana.ECompanionFollowDistance
/// Size: 0x04
enum class ECompanionFollowDistance : uint8_t
{
	ECompanionFollowDistance__Close                                                  = 0,
	ECompanionFollowDistance__Medium                                                 = 1,
	ECompanionFollowDistance__Far                                                    = 2,
	ECompanionFollowDistance__Invalid                                                = 3
};

/// Enum /Script/Indiana.ECompanionPosition
/// Size: 0x04
enum class ECompanionPosition : uint8_t
{
	ECompanionPosition__CompanionLeft                                                = 0,
	ECompanionPosition__CompanionRight                                               = 1,
	ECompanionPosition__NumCompanionPositions                                        = 2,
	ECompanionPosition__Follower                                                     = 3
};

/// Enum /Script/Indiana.EEaseType
/// Size: 0x14
enum class EEaseType : uint32_t
{
	EEaseType__CircularIn                                                            = 0,
	EEaseType__CircularOut                                                           = 1,
	EEaseType__CircularInOut                                                         = 2,
	EEaseType__EaseIn                                                                = 3,
	EEaseType__EaseOut                                                               = 4,
	EEaseType__EaseInOut                                                             = 5,
	EEaseType__ExpoIn                                                                = 6,
	EEaseType__ExpoOut                                                               = 7,
	EEaseType__ExpoInOut                                                             = 8,
	EEaseType__SinIn                                                                 = 9,
	EEaseType__SinOut                                                                = 10,
	EEaseType__SinInOut                                                              = 11,
	EEaseType__Step                                                                  = 12,
	EEaseType__Lerp                                                                  = 13
};

/// Enum /Script/Indiana.EComputerTerminalResult
/// Size: 0x09
enum class EComputerTerminalResult : uint8_t
{
	EComputerTerminalResult__Success                                                 = 0,
	EComputerTerminalResult__Failed_Locked                                           = 1,
	EComputerTerminalResult__Failed_Locked_Permanent                                 = 2,
	EComputerTerminalResult__Failed_Locked_Key_NoHack                                = 3,
	EComputerTerminalResult__Failed_Locked_ComputerNoKey_HackResource                = 4,
	EComputerTerminalResult__Failed_Locked_Key_HackResource                          = 5,
	EComputerTerminalResult__Failed_Locked_Hack_SkillInsufficient                    = 6,
	EComputerTerminalResult__Failed_Locked_Error                                     = 7,
	EComputerTerminalResult__Pending_Hacking                                         = 8
};

/// Enum /Script/Indiana.EComputerTerminalEventType
/// Size: 0x10
enum class EComputerTerminalEventType : uint8_t
{
	EComputerTerminalEventType__Invalid                                              = 0,
	EComputerTerminalEventType__Use                                                  = 1,
	EComputerTerminalEventType__Unlocked                                             = 2,
	EComputerTerminalEventType__UnlockAttemptedLocked                                = 3,
	EComputerTerminalEventType__Locked                                               = 4,
	EComputerTerminalEventType__InsufficientSkill                                    = 5,
	EComputerTerminalEventType__HackSuccess                                          = 6,
	EComputerTerminalEventType__HackStart                                            = 7,
	EComputerTerminalEventType__HackInterrupted                                      = 8,
	EComputerTerminalEventType__InteractLoopFinished                                 = 9
};

/// Enum /Script/Indiana.EComputerType
/// Size: 0x14
enum class EComputerType : uint8_t
{
	EComputerType__Invalid                                                           = 0,
	EComputerType__None                                                              = 1,
	EComputerType__SpacersChoice                                                     = 2,
	EComputerType__AuntieCleos                                                       = 3,
	EComputerType__UniversalDefenseLogistics                                         = 4,
	EComputerType__CandP                                                             = 5,
	EComputerType__Rizzo                                                             = 6,
	EComputerType__MonarchStellarIndustries                                          = 7,
	EComputerType__TandL                                                             = 8,
	EComputerType__Error                                                             = 9,
	EComputerType__TheGroundbreaker                                                  = 10,
	EComputerType__TheHope                                                           = 11,
	EComputerType__Iconoclast                                                        = 12,
	EComputerType__JobBoard                                                          = 13
};

/// Enum /Script/Indiana.EConversationRestrictions
/// Size: 0x04
enum class EConversationRestrictions : uint32_t
{
	EConversationRestrictions__None                                                  = 0,
	EConversationRestrictions__Combat                                                = 1,
	EConversationRestrictions__HostileSE                                             = 2,
	EConversationRestrictions__All                                                   = -1
};

/// Enum /Script/Indiana.EPayloadID
/// Size: 0x31
enum class EPayloadID : uint8_t
{
	EPayloadID__None                                                                 = 0,
	EPayloadID__Payload1                                                             = 1,
	EPayloadID__Payload2                                                             = 2,
	EPayloadID__Payload3                                                             = 3,
	EPayloadID__Payload4                                                             = 4,
	EPayloadID__Payload5                                                             = 5,
	EPayloadID__Payload6                                                             = 6,
	EPayloadID__Payload7                                                             = 7,
	EPayloadID__Payload8                                                             = 8,
	EPayloadID__Payload9                                                             = 9,
	EPayloadID__Payload10                                                            = 10,
	EPayloadID__Payload11                                                            = 11,
	EPayloadID__Payload12                                                            = 12,
	EPayloadID__Payload13                                                            = 13,
	EPayloadID__Payload14                                                            = 14,
	EPayloadID__Payload15                                                            = 15,
	EPayloadID__Payload16                                                            = 16,
	EPayloadID__Payload17                                                            = 17,
	EPayloadID__Payload18                                                            = 18,
	EPayloadID__Payload19                                                            = 19,
	EPayloadID__Payload20                                                            = 20,
	EPayloadID__Payload21                                                            = 21,
	EPayloadID__Payload22                                                            = 22,
	EPayloadID__Payload23                                                            = 23,
	EPayloadID__Payload24                                                            = 24,
	EPayloadID__Payload25                                                            = 25,
	EPayloadID__Payload26                                                            = 26,
	EPayloadID__Payload27                                                            = 27,
	EPayloadID__Payload28                                                            = 28,
	EPayloadID__Payload29                                                            = 29,
	EPayloadID__Payload30                                                            = 30
};

/// Enum /Script/Indiana.ECameraFramingOffset
/// Size: 0x04
enum class ECameraFramingOffset : uint8_t
{
	ECameraFramingOffset__Auto                                                       = 0,
	ECameraFramingOffset__Center                                                     = 1,
	ECameraFramingOffset__Left                                                       = 2,
	ECameraFramingOffset__Right                                                      = 3
};

/// Enum /Script/Indiana.ECreateItemCountRule
/// Size: 0x04
enum class ECreateItemCountRule : uint8_t
{
	ECreateItemCountRule__UseItemDefinitionCount                                     = 0,
	ECreateItemCountRule__UseFormulaTier1Count                                       = 1,
	ECreateItemCountRule__UseFormulaTier2Count                                       = 2,
	ECreateItemCountRule__UseFormulaTier3Count                                       = 3
};

/// Enum /Script/Indiana.FCreditsSpacingType
/// Size: 0x06
enum class FCreditsSpacingType : uint8_t
{
	FCreditsSpacingType__None                                                        = 0,
	FCreditsSpacingType__VerySmall                                                   = 1,
	FCreditsSpacingType__Small                                                       = 2,
	FCreditsSpacingType__Average                                                     = 3,
	FCreditsSpacingType__Large                                                       = 4,
	FCreditsSpacingType__VeryLarge                                                   = 5
};

/// Enum /Script/Indiana.FCreditsTextType
/// Size: 0x06
enum class FCreditsTextType : uint8_t
{
	FCreditsTextType__None                                                           = 0,
	FCreditsTextType__Header                                                         = 1,
	FCreditsTextType__Subheader                                                      = 2,
	FCreditsTextType__Title                                                          = 3,
	FCreditsTextType__Subtitle                                                       = 4,
	FCreditsTextType__Normal                                                         = 5
};

/// Enum /Script/Indiana.FCreditsDisplayType
/// Size: 0x04
enum class FCreditsDisplayType : uint8_t
{
	FCreditsDisplayType__None                                                        = 0,
	FCreditsDisplayType__Text                                                        = 1,
	FCreditsDisplayType__Image                                                       = 2,
	FCreditsDisplayType__Spacing                                                     = 3
};

/// Enum /Script/Indiana.EMeleeAttackType
/// Size: 0x04
enum class EMeleeAttackType : uint8_t
{
	EMeleeAttackType__None                                                           = 0,
	EMeleeAttackType__Light                                                          = 1,
	EMeleeAttackType__Heavy                                                          = 2,
	EMeleeAttackType__WindUp                                                         = 3
};

/// Enum /Script/Indiana.EHitReactType
/// Size: 0x03
enum class EHitReactType : uint8_t
{
	EHitReactType__None                                                              = 0,
	EHitReactType__Light                                                             = 1,
	EHitReactType__Heavy                                                             = 2
};

/// Enum /Script/Indiana.EDamageFlags
/// Size: 0x26
enum class EDamageFlags : uint32_t
{
	EDamageFlags__None                                                               = 0,
	EDamageFlags__Critical                                                           = 1,
	EDamageFlags__Graze                                                              = 2,
	EDamageFlags__Melee                                                              = 4,
	EDamageFlags__CalledShot                                                         = 8,
	EDamageFlags__Stealth                                                            = 16,
	EDamageFlags__NoDamage                                                           = 32,
	EDamageFlags__Blocked                                                            = 64,
	EDamageFlags__Range                                                              = 128,
	EDamageFlags__IgnoreNonSealedArmor                                               = 256,
	EDamageFlags__WeakSpot                                                           = 512,
	EDamageFlags__KillingBlow                                                        = 1024,
	EDamageFlags__CanDamageFriends                                                   = 2048,
	EDamageFlags__AllDamageTypes                                                     = 4096,
	EDamageFlags__PowerAttack                                                        = 8192,
	EDamageFlags__IgnorePostArmorMult                                                = 16384,
	EDamageFlags__SweepAttack                                                        = 32768,
	EDamageFlags__FriendlyFire                                                       = 65536,
	EDamageFlags__TacticalTimeDilation                                               = 131072,
	EDamageFlags__ScienceWeapon                                                      = 262144,
	EDamageFlags__IgnoreDTDR                                                         = 524288,
	EDamageFlags__Suicide                                                            = 1048576,
	EDamageFlags__HeadShot                                                           = 2097152,
	EDamageFlags__ApplyOnTick                                                        = 4194304,
	EDamageFlags__Spell                                                              = 8388608,
	EDamageFlags__IsLastTarget                                                       = 16777216
};

/// Enum /Script/Indiana.EDamageScalars
/// Size: 0x07
enum class EDamageScalars : uint8_t
{
	EDamageScalars__WeaponLevel                                                      = 0,
	EDamageScalars__CharLevel                                                        = 1,
	EDamageScalars__TargetLevel                                                      = 2,
	EDamageScalars__WeaponDurability                                                 = 3,
	EDamageScalars__SneakAttack                                                      = 4,
	EDamageScalars__WeaponCritMult                                                   = 5,
	EDamageScalars__SimulateCrit                                                     = 6
};

/// Enum /Script/Indiana.EDamageValueType
/// Size: 0x02
enum class EDamageValueType : uint8_t
{
	EDamageValueType__Value                                                          = 0,
	EDamageValueType__Percent                                                        = 1
};

/// Enum /Script/Indiana.EDamageBaseAmount
/// Size: 0x02
enum class EDamageBaseAmount : uint8_t
{
	EDamageBaseAmount__Default                                                       = 0,
	EDamageBaseAmount__WeaponDPS                                                     = 1
};

/// Enum /Script/Indiana.EDecisionTreeProcessType
/// Size: 0x03
enum class EDecisionTreeProcessType : uint8_t
{
	EDecisionTreeProcessType__None                                                   = 0,
	EDecisionTreeProcessType__FirstSuccess                                           = 1,
	EDecisionTreeProcessType__Sequential                                             = 2
};

/// Enum /Script/Indiana.EStateInfoResultType
/// Size: 0x03
enum class EStateInfoResultType : uint8_t
{
	EStateInfoResultType__Failure                                                    = 0,
	EStateInfoResultType__Success                                                    = 1,
	EStateInfoResultType__RunScript                                                  = 2
};

/// Enum /Script/Indiana.EDestructibleState
/// Size: 0x03
enum class EDestructibleState : uint8_t
{
	EDestructibleState__Pristine                                                     = 0,
	EDestructibleState__Damaged                                                      = 1,
	EDestructibleState__Destroyed                                                    = 2
};

/// Enum /Script/Indiana.EDestructibleEventType
/// Size: 0x04
enum class EDestructibleEventType : uint8_t
{
	EDestructibleEventType__Invalid                                                  = 0,
	EDestructibleEventType__Pristine                                                 = 1,
	EDestructibleEventType__Damaged                                                  = 2,
	EDestructibleEventType__Destroyed                                                = 3
};

/// Enum /Script/Indiana.EDialogPromptMode
/// Size: 0x05
enum class EDialogPromptMode : uint8_t
{
	EDialogPromptMode__AcceptCancel                                                  = 0,
	EDialogPromptMode__ContinueCancel                                                = 1,
	EDialogPromptMode__YesNo                                                         = 2,
	EDialogPromptMode__ConfirmBack                                                   = 3,
	EDialogPromptMode__KeepRevert                                                    = 4
};

/// Enum /Script/Indiana.EVOPositioning
/// Size: 0x03
enum class EVOPositioning : uint8_t
{
	EVOPositioning__Default                                                          = 0,
	EVOPositioning__NonPositional                                                    = 1,
	EVOPositioning__Positional                                                       = 2
};

/// Enum /Script/Indiana.EDisableTrackingType
/// Size: 0x03
enum class EDisableTrackingType : uint8_t
{
	EDisableTrackingType__Locked                                                     = 0,
	EDisableTrackingType__TrackCaster                                                = 1,
	EDisableTrackingType__None                                                       = 2
};

/// Enum /Script/Indiana.EDisguiseKeyResult
/// Size: 0x03
enum class EDisguiseKeyResult : uint8_t
{
	EDisguiseKeyResult__MissingShroud                                                = 0,
	EDisguiseKeyResult__MissingKey                                                   = 1,
	EDisguiseKeyResult__Passed                                                       = 2
};

/// Enum /Script/Indiana.EWeatherType
/// Size: 0x04
enum class EWeatherType : uint8_t
{
	EWeatherType__None                                                               = 0,
	EWeatherType__Rain                                                               = 1,
	EWeatherType__Dust                                                               = 2,
	EWeatherType__Snow                                                               = 3
};

/// Enum /Script/Indiana.EElevatorEventType
/// Size: 0x03
enum class EElevatorEventType : uint8_t
{
	EElevatorEventType__Invalid                                                      = 0,
	EElevatorEventType__MoveStart                                                    = 1,
	EElevatorEventType__MoveEnd                                                      = 2
};

/// Enum /Script/Indiana.ECoreFaceEmotion
/// Size: 0x24
enum class ECoreFaceEmotion : uint8_t
{
	ECoreFaceEmotion__DoNotChange                                                    = 0,
	ECoreFaceEmotion__Fear                                                           = 27,
	ECoreFaceEmotion__Angry                                                          = 1,
	ECoreFaceEmotion__Disgust                                                        = 28,
	ECoreFaceEmotion__Flirtatious                                                    = 17,
	ECoreFaceEmotion__Happy                                                          = 8,
	ECoreFaceEmotion__Sad                                                            = 11,
	ECoreFaceEmotion__Shock                                                          = 12,
	ECoreFaceEmotion__Neutral                                                        = 9,
	ECoreFaceEmotion__Annoyed                                                        = 2,
	ECoreFaceEmotion__Anxious                                                        = 3,
	ECoreFaceEmotion__Awkward                                                        = 4,
	ECoreFaceEmotion__Despair                                                        = 6,
	ECoreFaceEmotion__Proud                                                          = 10,
	ECoreFaceEmotion__Skeptical                                                      = 13,
	ECoreFaceEmotion__SlightlyAngry                                                  = 14,
	ECoreFaceEmotion__SlightlyHappy                                                  = 15,
	ECoreFaceEmotion__Livid                                                          = 20,
	ECoreFaceEmotion__SlightlyAnnoyed                                                = 21,
	ECoreFaceEmotion__Smolder                                                        = 30,
	ECoreFaceEmotion__Confused                                                       = 31,
	ECoreFaceEmotion__Smug                                                           = 32,
	ECoreFaceEmotion__Grimace                                                        = 33,
	ECoreFaceEmotion__Smirk                                                          = 16
};

/// Enum /Script/Indiana.EPosture
/// Size: 0x09
enum class EPosture : uint8_t
{
	EPosture__DoNotUse                                                               = 0,
	EPosture__Conspiratorial                                                         = 5,
	EPosture__Drunk                                                                  = 7,
	EPosture__DrunkBar                                                               = 26,
	EPosture__Thinking                                                               = 18,
	EPosture__Neutral                                                                = 9,
	EPosture__Angry                                                                  = 36,
	EPosture__Relaxed                                                                = 37,
	EPosture__ReadDocument                                                           = 38
};

/// Enum /Script/Indiana.EEmotion
/// Size: 0x40
enum class EEmotion : uint8_t
{
	EEmotion__DoNotUse                                                               = 0,
	EEmotion__Angry                                                                  = 1,
	EEmotion__Annoyed                                                                = 2,
	EEmotion__Anxious                                                                = 3,
	EEmotion__Awkward                                                                = 4,
	EEmotion__Conspiratorial                                                         = 5,
	EEmotion__Despair                                                                = 6,
	EEmotion__Drunk                                                                  = 7,
	EEmotion__Happy                                                                  = 8,
	EEmotion__Neutral                                                                = 9,
	EEmotion__Proud                                                                  = 10,
	EEmotion__Sad                                                                    = 11,
	EEmotion__Shock                                                                  = 12,
	EEmotion__Skeptical                                                              = 13,
	EEmotion__SlightlyAngry                                                          = 14,
	EEmotion__SlightlyHappy                                                          = 15,
	EEmotion__Smirk                                                                  = 16,
	EEmotion__Smolder                                                                = 17,
	EEmotion__Thinking                                                               = 18,
	EEmotion__WorkBench                                                              = 19,
	EEmotion__Livid                                                                  = 20,
	EEmotion__SlightlyAnnoyed                                                        = 21,
	EEmotion__LookDown                                                               = 22,
	EEmotion__LookLeft                                                               = 23,
	EEmotion__LookRight                                                              = 24,
	EEmotion__LookUp                                                                 = 25,
	EEmotion__DrunkBar                                                               = 26,
	EEmotion__Fear                                                                   = 27,
	EEmotion__Disgust                                                                = 28,
	EEmotion__Injured                                                                = 29,
	EEmotion__SmolderNew                                                             = 30,
	EEmotion__Confused                                                               = 31,
	EEmotion__Smug                                                                   = 32,
	EEmotion__Grimace                                                                = 33,
	EEmotion__Yes                                                                    = 34,
	EEmotion__No                                                                     = 35,
	EEmotion__AngryPosture                                                           = 36,
	EEmotion__RelaxedPosture                                                         = 37,
	EEmotion__ReadDocumentPosture                                                    = 38,
	EEmotion__NumEmotionStates                                                       = 39
};

/// Enum /Script/Indiana.EEncounterAggroType
/// Size: 0x03
enum class EEncounterAggroType : uint8_t
{
	EEncounterAggroType__Default                                                     = 0,
	EEncounterAggroType__On                                                          = 1,
	EEncounterAggroType__Off                                                         = 2
};

/// Enum /Script/Indiana.EEndGameImageType
/// Size: 0x04
enum class EEndGameImageType : uint8_t
{
	EEndGameImageType__Invalid                                                       = 0,
	EEndGameImageType__SkipHopeToSun                                                 = 1,
	EEndGameImageType__BoardPath                                                     = 2,
	EEndGameImageType__ScientistPath                                                 = 3
};

/// Enum /Script/Indiana.EHolsterRequestSource
/// Size: 0x05
enum class EHolsterRequestSource : uint8_t
{
	EHolsterRequestSource__None                                                      = 0,
	EHolsterRequestSource__Player                                                    = 1,
	EHolsterRequestSource__Ladder                                                    = 2,
	EHolsterRequestSource__Medkit                                                    = 4,
	EHolsterRequestSource__Scripted                                                  = 8
};

/// Enum /Script/Indiana.EEventEffectFloatParams
/// Size: 0x08
enum class EEventEffectFloatParams : uint8_t
{
	EEventEffectFloatParams__Duration                                                = 0,
	EEventEffectFloatParams__Size                                                    = 1,
	EEventEffectFloatParams__Scalar                                                  = 2,
	EEventEffectFloatParams__NormalizedStartTime                                     = 3,
	EEventEffectFloatParams__SkipAnimations                                          = 4,
	EEventEffectFloatParams__RateOfFire                                              = 5,
	EEventEffectFloatParams__Count                                                   = 6,
	EEventEffectFloatParams__Invalid                                                 = 7
};

/// Enum /Script/Indiana.ETTDState
/// Size: 0x03
enum class ETTDState : uint8_t
{
	ETTDState__Invalid                                                               = 0,
	ETTDState__TTDOnly                                                               = 1,
	ETTDState__NotInTTDOnly                                                          = 2
};

/// Enum /Script/Indiana.EFactionHardEnum
/// Size: 0x23
enum class EFactionHardEnum : uint8_t
{
	EFactionHardEnum__Anarchists                                                     = 0,
	EFactionHardEnum__Byzantium                                                      = 1,
	EFactionHardEnum__CnPFactory                                                     = 2,
	EFactionHardEnum__Deserters                                                      = 3,
	EFactionHardEnum__EmeraldVale                                                    = 4,
	EFactionHardEnum__Fairfield                                                      = 5,
	EFactionHardEnum__Groundbreaker                                                  = 6,
	EFactionHardEnum__InformationBroker                                              = 7,
	EFactionHardEnum__Keystone                                                       = 8,
	EFactionHardEnum__Marauders                                                      = 9,
	EFactionHardEnum__MatherFamily                                                   = 10,
	EFactionHardEnum__Midway                                                         = 11,
	EFactionHardEnum__MSI                                                            = 12,
	EFactionHardEnum__Roseway                                                        = 13,
	EFactionHardEnum__SpacersChoice                                                  = 14,
	EFactionHardEnum__StellarBayResidents                                            = 15,
	EFactionHardEnum__Syndicate                                                      = 16,
	EFactionHardEnum__TartarusMilitary                                               = 17,
	EFactionHardEnum__TartarusPrisoners                                              = 18,
	EFactionHardEnum__TartarusWorkers                                                = 19,
	EFactionHardEnum__TheBoard                                                       = 20,
	EFactionHardEnum__TheHope                                                        = 21,
	EFactionHardEnum__Count                                                          = 22
};

/// Enum /Script/Indiana.EFactionVisibility
/// Size: 0x03
enum class EFactionVisibility : uint8_t
{
	EFactionVisibility__Never                                                        = 0,
	EFactionVisibility__Always                                                       = 1,
	EFactionVisibility__Encounter                                                    = 2
};

/// Enum /Script/Indiana.ERapidFireMode
/// Size: 0x03
enum class ERapidFireMode : uint8_t
{
	ERapidFireMode__None                                                             = 0,
	ERapidFireMode__RapidFire                                                        = 1,
	ERapidFireMode__FineRapidFire                                                    = 2
};

/// Enum /Script/Indiana.EFireMode
/// Size: 0x06
enum class EFireMode : uint8_t
{
	EFireMode__Automatic                                                             = 0,
	EFireMode__Burst                                                                 = 1,
	EFireMode__Charge                                                                = 2,
	EFireMode__SemiAutomatic                                                         = 3,
	EFireMode__SpinUp                                                                = 4,
	EFireMode__ProjectileCharge                                                      = 5
};

/// Enum /Script/Indiana.EFlawTrigger
/// Size: 0x25
enum class EFlawTrigger : uint8_t
{
	EFlawTrigger__SpendMoney                                                         = 0,
	EFlawTrigger__EyeInjury                                                          = 1,
	EFlawTrigger__HeadInjury                                                         = 2,
	EFlawTrigger__DialogFastSelection                                                = 3,
	EFlawTrigger__DialogAttack                                                       = 4,
	EFlawTrigger__SetOffAlarm                                                        = 5,
	EFlawTrigger__MaimedArm                                                          = 6,
	EFlawTrigger__CrippledLeg                                                        = 7,
	EFlawTrigger__Blinded                                                            = 8,
	EFlawTrigger__Concussed                                                          = 9,
	EFlawTrigger__DamageThermal                                                      = 10,
	EFlawTrigger__DamageCorrosion                                                    = 11,
	EFlawTrigger__DamageNRay                                                         = 12,
	EFlawTrigger__DamageShock                                                        = 13,
	EFlawTrigger__DamagePoison                                                       = 14,
	EFlawTrigger__DamageSwarm                                                        = 15,
	EFlawTrigger__DamageFalling                                                      = 16,
	EFlawTrigger__DamageRaptidon                                                     = 17,
	EFlawTrigger__DamageRobot                                                        = 18,
	EFlawTrigger__DamagePhysical                                                     = 19,
	EFlawTrigger__AddictionDrug                                                      = 20,
	EFlawTrigger__AddictionFood                                                      = 21,
	EFlawTrigger__AddictionAlcohol                                                   = 22,
	EFlawTrigger__AddictionSmoke                                                     = 23,
	EFlawTrigger__Count                                                              = 24
};

/// Enum /Script/Indiana.EFlawType
/// Size: 0x02
enum class EFlawType : uint8_t
{
	EFlawType__Systemic                                                              = 0,
	EFlawType__Specific                                                              = 1
};

/// Enum /Script/Indiana.ETalkNodeVOAttenuationType
/// Size: 0x15
enum class ETalkNodeVOAttenuationType : uint8_t
{
	ETalkNodeVOAttenuationType__Default                                              = 0,
	ETalkNodeVOAttenuationType__None                                                 = 1,
	ETalkNodeVOAttenuationType__SmallDistance                                        = 2,
	ETalkNodeVOAttenuationType__MediumDistance                                       = 3,
	ETalkNodeVOAttenuationType__LargeDistance                                        = 4,
	ETalkNodeVOAttenuationType__Custom01                                             = 5,
	ETalkNodeVOAttenuationType__Custom02                                             = 6,
	ETalkNodeVOAttenuationType__Custom03                                             = 7,
	ETalkNodeVOAttenuationType__Custom04                                             = 8,
	ETalkNodeVOAttenuationType__Custom05                                             = 9,
	ETalkNodeVOAttenuationType__Custom06                                             = 10,
	ETalkNodeVOAttenuationType__Custom07                                             = 11,
	ETalkNodeVOAttenuationType__Custom08                                             = 12,
	ETalkNodeVOAttenuationType__Custom09                                             = 13,
	ETalkNodeVOAttenuationType__Custom10                                             = 14
};

/// Enum /Script/Indiana.EQuestDifficulty
/// Size: 0x05
enum class EQuestDifficulty : uint8_t
{
	EQuestDifficulty__Easy                                                           = 0,
	EQuestDifficulty__Normal                                                         = 1,
	EQuestDifficulty__Hard                                                           = 2,
	EQuestDifficulty__Deadly                                                         = 3,
	EQuestDifficulty__Count                                                          = 4
};

/// Enum /Script/Indiana.EQuestLocation
/// Size: 0x23
enum class EQuestLocation : uint8_t
{
	EQuestLocation__EmeraldVale                                                      = 0,
	EQuestLocation__Groundbreaker                                                    = 1,
	EQuestLocation__Terra2                                                           = 2,
	EQuestLocation__Monarch                                                          = 3,
	EQuestLocation__Tartarus                                                         = 4,
	EQuestLocation__Roseway                                                          = 5,
	EQuestLocation__Scylla                                                           = 6,
	EQuestLocation__Hephaestus                                                       = 7,
	EQuestLocation__Space                                                            = 8,
	EQuestLocation__Hope                                                             = 9,
	EQuestLocation__Gorgon                                                           = 10,
	EQuestLocation__Eridanos                                                         = 11,
	EQuestLocation__PhaethonPilothouse                                               = 12,
	EQuestLocation__RizzosDistillationStation                                        = 13,
	EQuestLocation__EridanosSpaceport                                                = 14,
	EQuestLocation__TheGrandColonialHotel                                            = 15,
	EQuestLocation__WildernessExploitationReserve                                    = 16,
	EQuestLocation__RizzosPurpleberryOrchards                                        = 17,
	EQuestLocation__RizzosResearchDevelopmentDistrictLabs                            = 18,
	EQuestLocation__HappyDaleFarms                                                   = 19,
	EQuestLocation__StormtailShelter                                                 = 20,
	EQuestLocation__None                                                             = 21,
	EQuestLocation__Count                                                            = 22
};

/// Enum /Script/Indiana.EResponseType
/// Size: 0x06
enum class EResponseType : uint8_t
{
	EResponseType__None                                                              = 0,
	EResponseType__Lie                                                               = 1,
	EResponseType__Intimidate                                                        = 2,
	EResponseType__Persuade                                                          = 3,
	EResponseType__Dumb                                                              = 4,
	EResponseType__Science                                                           = 5
};

/// Enum /Script/Indiana.EOEIQuestType
/// Size: 0x24
enum class EOEIQuestType : uint8_t
{
	EOEIQuestType__MajorStoryQuest                                                   = 0,
	EOEIQuestType__MajorSideQuest                                                    = 1,
	EOEIQuestType__Task                                                              = 2,
	EOEIQuestType__MinorStoryQuest                                                   = 3,
	EOEIQuestType__MinorSideQuest                                                    = 4,
	EOEIQuestType__MajorFaction                                                      = 5,
	EOEIQuestType__MinorFaction                                                      = 6,
	EOEIQuestType__Companion                                                         = 7,
	EOEIQuestType__INX1MajorStoryQuest                                               = 8,
	EOEIQuestType__INX1MajorSideQuest                                                = 9,
	EOEIQuestType__INX1Task                                                          = 10,
	EOEIQuestType__INX1MinorStoryQuest                                               = 11,
	EOEIQuestType__INX1MinorSideQuest                                                = 12,
	EOEIQuestType__INX1MajorFaction                                                  = 13,
	EOEIQuestType__INX1MinorFaction                                                  = 14,
	EOEIQuestType__INX1Companion                                                     = 15,
	EOEIQuestType__INX2MajorStoryQuest                                               = 16,
	EOEIQuestType__INX2MajorSideQuest                                                = 17,
	EOEIQuestType__INX2Task                                                          = 18,
	EOEIQuestType__INX2MinorStoryQuest                                               = 19,
	EOEIQuestType__INX2MinorSideQuest                                                = 20,
	EOEIQuestType__INX2MajorFaction                                                  = 21,
	EOEIQuestType__INX2MinorFaction                                                  = 22,
	EOEIQuestType__INX2Companion                                                     = 23
};

/// Enum /Script/Indiana.EQuestType
/// Size: 0x25
enum class EQuestType : uint8_t
{
	EQuestType__MajorStoryQuest                                                      = 0,
	EQuestType__MinorStoryQuest                                                      = 1,
	EQuestType__INX1MajorStoryQuest                                                  = 2,
	EQuestType__INX1MinorStoryQuest                                                  = 3,
	EQuestType__INX2MajorStoryQuest                                                  = 4,
	EQuestType__INX2MinorStoryQuest                                                  = 5,
	EQuestType__MajorSideQuest                                                       = 6,
	EQuestType__MinorSideQuest                                                       = 7,
	EQuestType__INX1MajorSideQuest                                                   = 8,
	EQuestType__INX1MinorSideQuest                                                   = 9,
	EQuestType__INX2MajorSideQuest                                                   = 10,
	EQuestType__INX2MinorSideQuest                                                   = 11,
	EQuestType__MajorFaction                                                         = 12,
	EQuestType__MinorFaction                                                         = 13,
	EQuestType__INX1MajorFaction                                                     = 14,
	EQuestType__INX1MinorFaction                                                     = 15,
	EQuestType__INX2MajorFaction                                                     = 16,
	EQuestType__INX2MinorFaction                                                     = 17,
	EQuestType__Companion                                                            = 18,
	EQuestType__INX1Companion                                                        = 19,
	EQuestType__INX2Companion                                                        = 20,
	EQuestType__Task                                                                 = 21,
	EQuestType__INX1Task                                                             = 22,
	EQuestType__INX2Task                                                             = 23,
	EQuestType__Count                                                                = 24
};

/// Enum /Script/Indiana.QuestionNodeDisplayType
/// Size: 0x03
enum class QuestionNodeDisplayType : uint8_t
{
	QuestionNodeDisplayType__ShowOnce                                                = 0,
	QuestionNodeDisplayType__ShowAlways                                              = 1,
	QuestionNodeDisplayType__ShowNever                                               = 2
};

/// Enum /Script/Indiana.FlowChartNodeType
/// Size: 0x14
enum class FlowChartNodeType : uint8_t
{
	FlowChartNodeType__Talk                                                          = 0,
	FlowChartNodeType__PlayerResponse                                                = 1,
	FlowChartNodeType__Script                                                        = 2,
	FlowChartNodeType__TriggerConversation                                           = 3,
	FlowChartNodeType__Chatter                                                       = 4,
	FlowChartNodeType__Bank                                                          = 5,
	FlowChartNodeType__Quest                                                         = 6,
	FlowChartNodeType__Objective                                                     = 7,
	FlowChartNodeType__EndState                                                      = 8,
	FlowChartNodeType__GlobalQuest                                                   = 9,
	FlowChartNodeType__BranchComplete                                                = 10,
	FlowChartNodeType__ChatterEvent                                                  = 11,
	FlowChartNodeType__ChatterBranch                                                 = 12,
	FlowChartNodeType__SoundEffect                                                   = 13
};

/// Enum /Script/Indiana.NodeDisplayType
/// Size: 0x04
enum class NodeDisplayType : uint8_t
{
	NodeDisplayType__Hidden                                                          = 0,
	NodeDisplayType__Conversation                                                    = 1,
	NodeDisplayType__Bark                                                            = 2,
	NodeDisplayType__Overlay                                                         = 3
};

/// Enum /Script/Indiana.NodePlayType
/// Size: 0x05
enum class NodePlayType : uint8_t
{
	NodePlayType__Normal                                                             = 0,
	NodePlayType__Random                                                             = 1,
	NodePlayType__CycleLoop                                                          = 2,
	NodePlayType__CycleStop                                                          = 3,
	NodePlayType__CycleRandom                                                        = 4
};

/// Enum /Script/Indiana.ConversationType
/// Size: 0x04
enum class ConversationType : uint8_t
{
	ConversationType__Conversation                                                   = 0,
	ConversationType__Chatter                                                        = 1,
	ConversationType__Count                                                          = 2,
	ConversationType__Invalid                                                        = 3
};

/// Enum /Script/Indiana.PersistenceType
/// Size: 0x04
enum class PersistenceType : uint8_t
{
	PersistenceType__None                                                            = 0,
	PersistenceType__OnceEver                                                        = 1,
	PersistenceType__OncePerConversation                                             = 2,
	PersistenceType__MarkAsRead                                                      = 3
};

/// Enum /Script/Indiana.EParticleSpawnType
/// Size: 0x03
enum class EParticleSpawnType : uint8_t
{
	EParticleSpawnType__AtStepLocation                                               = 0,
	EParticleSpawnType__AtSocketLocation                                             = 1,
	EParticleSpawnType__AttachedToSocket                                             = 2
};

/// Enum /Script/Indiana.EClimbValidityStatus
/// Size: 0x04
enum class EClimbValidityStatus : uint8_t
{
	EClimbValidityStatus__Valid                                                      = 0,
	EClimbValidityStatus__InvalidStart                                               = 1,
	EClimbValidityStatus__InvalidExit                                                = 2,
	EClimbValidityStatus__InvalidStartExit                                           = 3
};

/// Enum /Script/Indiana.EFurniturePreviewType
/// Size: 0x03
enum class EFurniturePreviewType : uint8_t
{
	EFurniturePreviewType__Start                                                     = 0,
	EFurniturePreviewType__Loop                                                      = 1,
	EFurniturePreviewType__Exit                                                      = 2
};

/// Enum /Script/Indiana.EEntryLocationStatus
/// Size: 0x07
enum class EEntryLocationStatus : uint32_t
{
	EEntryLocationStatus__Clear                                                      = 0,
	EEntryLocationStatus__InvalidLocation                                            = 1,
	EEntryLocationStatus__Ignored                                                    = 2,
	EEntryLocationStatus__InvalidNav                                                 = 3,
	EEntryLocationStatus__InvalidExitLocation                                        = 4,
	EEntryLocationStatus__SpaceBlocked                                               = 5,
	EEntryLocationStatus__MissingFloor                                               = 6
};

/// Enum /Script/Indiana.EGender
/// Size: 0x04
enum class EGender : uint8_t
{
	EGender__Male                                                                    = 0,
	EGender__Female                                                                  = 1,
	EGender__Neuter                                                                  = 2,
	EGender__Count                                                                   = 3
};

/// Enum /Script/Indiana.ENotificationState
/// Size: 0x12
enum class ENotificationState : uint8_t
{
	ENotificationState__NotificationHidden                                           = 0,
	ENotificationState__NotificationFadingIn                                         = 1,
	ENotificationState__NotificationFadingInComplete                                 = 2,
	ENotificationState__NotificationSetText                                          = 3,
	ENotificationState__NotificationAnimateIn                                        = 4,
	ENotificationState__NotificationAnimateInComplete                                = 5,
	ENotificationState__NotificationVisible                                          = 6,
	ENotificationState__NotificationShowText                                         = 7,
	ENotificationState__NotificationAnimateOut                                       = 8,
	ENotificationState__NotificationAnimateOutComplete                               = 9,
	ENotificationState__NotificationFadingOut                                        = 10,
	ENotificationState__NotificationFadingOutComplete                                = 11
};

/// Enum /Script/Indiana.EInputBindingType
/// Size: 0x18
enum class EInputBindingType : uint8_t
{
	EInputBindingType__Press                                                         = 0,
	EInputBindingType__PressAndRelease                                               = 1,
	EInputBindingType__ReleaseNotHeld                                                = 2,
	EInputBindingType__ReleaseNoConsume                                              = 3,
	EInputBindingType__Release                                                       = 4,
	EInputBindingType__HoldPoint25                                                   = 5,
	EInputBindingType__HoldPoint35                                                   = 6,
	EInputBindingType__HoldPoint5                                                    = 7,
	EInputBindingType__Hold1                                                         = 8,
	EInputBindingType__Hold1Point5                                                   = 9,
	EInputBindingType__Axis                                                          = 10,
	EInputBindingType__Linked                                                        = 11,
	EInputBindingType__ReleaseOnHeldPoint25                                          = 12,
	EInputBindingType__ReleaseOnHeldPoint35                                          = 13,
	EInputBindingType__ReleaseOnHeldPoint5                                           = 14,
	EInputBindingType__ReleaseOnHeld1                                                = 15,
	EInputBindingType__ReleaseOnHeld1Point5                                          = 16,
	EInputBindingType__Invalid                                                       = 17
};

/// Enum /Script/Indiana.EStickLayoutType
/// Size: 0x02
enum class EStickLayoutType : uint8_t
{
	EStickLayoutType__Righty                                                         = 0,
	EStickLayoutType__Lefty                                                          = 1
};

/// Enum /Script/Indiana.EGamepadLayoutType
/// Size: 0x04
enum class EGamepadLayoutType : uint8_t
{
	EGamepadLayoutType__Standard                                                     = 0,
	EGamepadLayoutType__Modern                                                       = 1,
	EGamepadLayoutType__Legacy                                                       = 2,
	EGamepadLayoutType__Flipped                                                      = 3
};

/// Enum /Script/Indiana.EButtonPress
/// Size: 0x05
enum class EButtonPress : uint8_t
{
	EButtonPress__Invalid                                                            = 0,
	EButtonPress__OnPress                                                            = 1,
	EButtonPress__OnTap                                                              = 2,
	EButtonPress__OnHold                                                             = 3,
	EButtonPress__OnRelease                                                          = 4
};

/// Enum /Script/Indiana.EMeleeAction
/// Size: 0x20
enum class EMeleeAction : uint8_t
{
	EMeleeAction__Invalid                                                            = 0,
	EMeleeAction__Idle                                                               = 1,
	EMeleeAction__WindUpRight                                                        = 2,
	EMeleeAction__WindUpLeft                                                         = 3,
	EMeleeAction__AttackRightToLeft                                                  = 4,
	EMeleeAction__AttackLeftToRight                                                  = 5,
	EMeleeAction__WindUpPower                                                        = 6,
	EMeleeAction__PowerAttack                                                        = 7,
	EMeleeAction__WindUpSweep                                                        = 8,
	EMeleeAction__SweepAttack                                                        = 9,
	EMeleeAction__CounterAttack                                                      = 10,
	EMeleeAction__Recoil                                                             = 11,
	EMeleeAction__WindUpNoStamina                                                    = 12,
	EMeleeAction__NoStaminaAttack                                                    = 13,
	EMeleeAction__CalledShotAttack                                                   = 14,
	EMeleeAction__SpecialAttack1                                                     = 15,
	EMeleeAction__SpecialAttack2                                                     = 16,
	EMeleeAction__SpecialAttack3                                                     = 17,
	EMeleeAction__SpecialAttack4                                                     = 18,
	EMeleeAction__CalledShot                                                         = 19
};

/// Enum /Script/Indiana.EHazardEventType
/// Size: 0x04
enum class EHazardEventType : uint8_t
{
	EHazardEventType__Enabling                                                       = 0,
	EHazardEventType__Enabled                                                        = 1,
	EHazardEventType__Disabling                                                      = 2,
	EHazardEventType__Disabled                                                       = 3
};

/// Enum /Script/Indiana.EHealValueType
/// Size: 0x02
enum class EHealValueType : uint8_t
{
	EHealValueType__Value                                                            = 0,
	EHealValueType__Percent                                                          = 1
};

/// Enum /Script/Indiana.EHighlightMode
/// Size: 0x01
enum class EHighlightMode : uint8_t
{
	EHighlightMode__InteractableItems                                                = 0
};

/// Enum /Script/Indiana.EIdleCamFailReason
/// Size: 0x12
enum class EIdleCamFailReason : uint8_t
{
	EIdleCamFailReason__Invalid                                                      = 0,
	EIdleCamFailReason__PlayerInputDetected                                          = 1,
	EIdleCamFailReason__PlayerInCombat                                               = 2,
	EIdleCamFailReason__PlayerInConversation                                         = 3,
	EIdleCamFailReason__PlayerIsReloading                                            = 4,
	EIdleCamFailReason__PlayerIsAiming                                               = 5,
	EIdleCamFailReason__PlayerIsMoving                                               = 6,
	EIdleCamFailReason__PlayerIsCrouching                                            = 7,
	EIdleCamFailReason__PlayerIsTakingSurvivalDamage                                 = 8,
	EIdleCamFailReason__PlayerHasHostileStatusEffects                                = 9,
	EIdleCamFailReason__PlayerIsNotHealthy                                           = 10,
	EIdleCamFailReason__Success                                                      = 11
};

/// Enum /Script/Indiana.EAnimationAudioLoopType
/// Size: 0x05
enum class EAnimationAudioLoopType : uint8_t
{
	EAnimationAudioLoopType__None                                                    = 0,
	EAnimationAudioLoopType__Furniture                                               = 1,
	EAnimationAudioLoopType__Jump                                                    = 2,
	EAnimationAudioLoopType__AnimNotifyState                                         = 3,
	EAnimationAudioLoopType__Count                                                   = 4
};

/// Enum /Script/Indiana.EAudioMovementState
/// Size: 0x04
enum class EAudioMovementState : uint8_t
{
	EAudioMovementState__Idle                                                        = 0,
	EAudioMovementState__Walking                                                     = 1,
	EAudioMovementState__Sprinting                                                   = 2,
	EAudioMovementState__Count                                                       = 3
};

/// Enum /Script/Indiana.ECharacterMovementAudioEvents
/// Size: 0x14
enum class ECharacterMovementAudioEvents : uint8_t
{
	ECharacterMovementAudioEvents__None                                              = 0,
	ECharacterMovementAudioEvents__Crouch                                            = 1,
	ECharacterMovementAudioEvents__CrouchStanding                                    = 2,
	ECharacterMovementAudioEvents__Uncrouch                                          = 3,
	ECharacterMovementAudioEvents__UncrouchStanding                                  = 4,
	ECharacterMovementAudioEvents__Jump                                              = 5,
	ECharacterMovementAudioEvents__DodgeLeft                                         = 6,
	ECharacterMovementAudioEvents__DodgeBack                                         = 7,
	ECharacterMovementAudioEvents__DodgeRight                                        = 8,
	ECharacterMovementAudioEvents__DodgeForward                                      = 9,
	ECharacterMovementAudioEvents__Land                                              = 10,
	ECharacterMovementAudioEvents__StartClimbing                                     = 11,
	ECharacterMovementAudioEvents__StopClimbing                                      = 12,
	ECharacterMovementAudioEvents__Count                                             = 13
};

/// Enum /Script/Indiana.ECharacterAudioEvent
/// Size: 0x02
enum class ECharacterAudioEvent : uint8_t
{
	ECharacterAudioEvent__None                                                       = 0,
	ECharacterAudioEvent__Passive                                                    = 1
};

/// Enum /Script/Indiana.ECrouchState
/// Size: 0x03
enum class ECrouchState : uint8_t
{
	ECrouchState__Current                                                            = 0,
	ECrouchState__Crouched                                                           = 1,
	ECrouchState__UnCrouched                                                         = 2
};

/// Enum /Script/Indiana.EUISelectionState
/// Size: 0x04
enum class EUISelectionState : uint8_t
{
	EUISelectionState__None                                                          = 0,
	EUISelectionState__Select                                                        = 1,
	EUISelectionState__SelectLoop                                                    = 2,
	EUISelectionState__Deselect                                                      = 3
};

/// Enum /Script/Indiana.EPhaseMode
/// Size: 0x03
enum class EPhaseMode : uint8_t
{
	EPhaseMode__None                                                                 = 0,
	EPhaseMode__Partial                                                              = 1,
	EPhaseMode__Full                                                                 = 2
};

/// Enum /Script/Indiana.EIndianaCustomMovementType
/// Size: 0x01
enum class EIndianaCustomMovementType : uint8_t
{
	EIndianaCustomMovementType__Climbing                                             = 0
};

/// Enum /Script/Indiana.EIndianaDamageType
/// Size: 0x09
enum class EIndianaDamageType : uint8_t
{
	EIndianaDamageType__Physical                                                     = 0,
	EIndianaDamageType__Thermal                                                      = 1,
	EIndianaDamageType__Energy                                                       = 2,
	EIndianaDamageType__Shock                                                        = 3,
	EIndianaDamageType__Corrosion                                                    = 4,
	EIndianaDamageType__NRay                                                         = 5,
	EIndianaDamageType__Swarm                                                        = 6,
	EIndianaDamageType__Cold                                                         = 7,
	EIndianaDamageType__Count                                                        = 8
};

/// Enum /Script/Indiana.EDLCType
/// Size: 0x02
enum class EDLCType : uint8_t
{
	EDLCType__INX1                                                                   = 0,
	EDLCType__INX2                                                                   = 1
};

/// Enum /Script/Indiana.EDLCFlags
/// Size: 0x03
enum class EDLCFlags : uint8_t
{
	EDLCFlags__None                                                                  = 0,
	EDLCFlags__INX1                                                                  = 1,
	EDLCFlags__INX2                                                                  = 2
};

/// Enum /Script/Indiana.EBoolResult
/// Size: 0x02
enum class EBoolResult : uint8_t
{
	EBoolResult__OnTrue                                                              = 0,
	EBoolResult__OnFalse                                                             = 1
};

/// Enum /Script/Indiana.EDownLoadableContent
/// Size: 0x02
enum class EDownLoadableContent : uint8_t
{
	EDownLoadableContent__INX1                                                       = 0,
	EDownLoadableContent__INX2                                                       = 1
};

/// Enum /Script/Indiana.ETogglableAction
/// Size: 0x13
enum class ETogglableAction : uint8_t
{
	ETogglableAction__Dodge                                                          = 0,
	ETogglableAction__Lunge                                                          = 1,
	ETogglableAction__Disarmed                                                       = 2,
	ETogglableAction__CanFlinch                                                      = 3,
	ETogglableAction__MindControlled                                                 = 4,
	ETogglableAction__IgnoreMeleeDamage                                              = 5,
	ETogglableAction__IgnorePawnCollision                                            = 6,
	ETogglableAction__Untargetable                                                   = 7,
	ETogglableAction__Undamageable                                                   = 8,
	ETogglableAction__Blind                                                          = 9,
	ETogglableAction__Sprint                                                         = 10,
	ETogglableAction__StatusEffectImmune                                             = 11,
	ETogglableAction__WeaponCrit                                                     = 12
};

/// Enum /Script/Indiana.EMeshTarget
/// Size: 0x03
enum class EMeshTarget : uint8_t
{
	EMeshTarget__FirstMesh                                                           = 0,
	EMeshTarget__CurrentCharacterMesh                                                = 1,
	EMeshTarget__WeaponMesh                                                          = 2
};

/// Enum /Script/Indiana.ESimplifiedLockpickHackingMode
/// Size: 0x02
enum class ESimplifiedLockpickHackingMode : uint8_t
{
	ESimplifiedLockpickHackingMode__Normal                                           = 0,
	ESimplifiedLockpickHackingMode__Simplified                                       = 1
};

/// Enum /Script/Indiana.EWeaponSelectAxisMode
/// Size: 0x02
enum class EWeaponSelectAxisMode : uint8_t
{
	EWeaponSelectAxisMode__Vertical                                                  = 0,
	EWeaponSelectAxisMode__Horizontal                                                = 1
};

/// Enum /Script/Indiana.EWeaponSelectMode
/// Size: 0x03
enum class EWeaponSelectMode : uint8_t
{
	EWeaponSelectMode__Off                                                           = 0,
	EWeaponSelectMode__TimedFade                                                     = 1,
	EWeaponSelectMode__On                                                            = 2
};

/// Enum /Script/Indiana.ETTDReticleMeterMode
/// Size: 0x03
enum class ETTDReticleMeterMode : uint8_t
{
	ETTDReticleMeterMode__Off                                                        = 0,
	ETTDReticleMeterMode__CombatOnly                                                 = 1,
	ETTDReticleMeterMode__On                                                         = 2
};

/// Enum /Script/Indiana.ECompanionAbilityPassiveNotificationMode
/// Size: 0x04
enum class ECompanionAbilityPassiveNotificationMode : uint8_t
{
	ECompanionAbilityPassiveNotificationMode__Off                                    = 0,
	ECompanionAbilityPassiveNotificationMode__CombatOnly                             = 1,
	ECompanionAbilityPassiveNotificationMode__TimedFade                              = 2,
	ECompanionAbilityPassiveNotificationMode__On                                     = 3
};

/// Enum /Script/Indiana.ECompanionAbilityPassiveCDMode
/// Size: 0x04
enum class ECompanionAbilityPassiveCDMode : uint8_t
{
	ECompanionAbilityPassiveCDMode__Off                                              = 0,
	ECompanionAbilityPassiveCDMode__CombatOnly                                       = 1,
	ECompanionAbilityPassiveCDMode__TimedFade                                        = 2,
	ECompanionAbilityPassiveCDMode__On                                               = 3
};

/// Enum /Script/Indiana.ECompanionStatusMode
/// Size: 0x04
enum class ECompanionStatusMode : uint8_t
{
	ECompanionStatusMode__Off                                                        = 0,
	ECompanionStatusMode__CombatOnly                                                 = 1,
	ECompanionStatusMode__TimedFade                                                  = 2,
	ECompanionStatusMode__On                                                         = 3
};

/// Enum /Script/Indiana.EDodgeDisplayMode
/// Size: 0x03
enum class EDodgeDisplayMode : uint8_t
{
	EDodgeDisplayMode__Off                                                           = 0,
	EDodgeDisplayMode__CombatOnly                                                    = 1,
	EDodgeDisplayMode__On                                                            = 2
};

/// Enum /Script/Indiana.ETTDDisplayMode
/// Size: 0x03
enum class ETTDDisplayMode : uint8_t
{
	ETTDDisplayMode__Off                                                             = 0,
	ETTDDisplayMode__CombatOnly                                                      = 1,
	ETTDDisplayMode__On                                                              = 2
};

/// Enum /Script/Indiana.EAbilityControlMode
/// Size: 0x04
enum class EAbilityControlMode : uint8_t
{
	EAbilityControlMode__Off                                                         = 0,
	EAbilityControlMode__CombatOnly                                                  = 1,
	EAbilityControlMode__TimedFade                                                   = 2,
	EAbilityControlMode__On                                                          = 3
};

/// Enum /Script/Indiana.EMedicalInhalerMode
/// Size: 0x03
enum class EMedicalInhalerMode : uint8_t
{
	EMedicalInhalerMode__Off                                                         = 0,
	EMedicalInhalerMode__CombatOnly                                                  = 1,
	EMedicalInhalerMode__On                                                          = 2
};

/// Enum /Script/Indiana.ESurvivalMode
/// Size: 0x03
enum class ESurvivalMode : uint8_t
{
	ESurvivalMode__Off                                                               = 0,
	ESurvivalMode__TimedFade                                                         = 1,
	ESurvivalMode__On                                                                = 2
};

/// Enum /Script/Indiana.EFPSIndicatorMode
/// Size: 0x05
enum class EFPSIndicatorMode : uint8_t
{
	EFPSIndicatorMode__Off                                                           = 0,
	EFPSIndicatorMode__TopLeft                                                       = 1,
	EFPSIndicatorMode__TopRight                                                      = 2,
	EFPSIndicatorMode__BottomRight                                                   = 3,
	EFPSIndicatorMode__BottomLeft                                                    = 4
};

/// Enum /Script/Indiana.EDirectionalDamageIndicatorMode
/// Size: 0x03
enum class EDirectionalDamageIndicatorMode : uint8_t
{
	EDirectionalDamageIndicatorMode__Off                                             = 0,
	EDirectionalDamageIndicatorMode__CombatOnly                                      = 1,
	EDirectionalDamageIndicatorMode__On                                              = 2
};

/// Enum /Script/Indiana.EEnemyAwarenessMeterMode
/// Size: 0x03
enum class EEnemyAwarenessMeterMode : uint8_t
{
	EEnemyAwarenessMeterMode__Off                                                    = 0,
	EEnemyAwarenessMeterMode__CombatOnly                                             = 1,
	EEnemyAwarenessMeterMode__On                                                     = 2
};

/// Enum /Script/Indiana.EEnemyHealthBarMode
/// Size: 0x03
enum class EEnemyHealthBarMode : uint8_t
{
	EEnemyHealthBarMode__Off                                                         = 0,
	EEnemyHealthBarMode__CombatOnly                                                  = 1,
	EEnemyHealthBarMode__On                                                          = 2
};

/// Enum /Script/Indiana.ECompassVisibilityMode
/// Size: 0x03
enum class ECompassVisibilityMode : uint8_t
{
	ECompassVisibilityMode__Off                                                      = 0,
	ECompassVisibilityMode__CombatOnly                                               = 1,
	ECompassVisibilityMode__On                                                       = 2
};

/// Enum /Script/Indiana.EHUDMode
/// Size: 0x04
enum class EHUDMode : uint8_t
{
	EHUDMode__Minimal                                                                = 0,
	EHUDMode__Default                                                                = 1,
	EHUDMode__Maximum                                                                = 2,
	EHUDMode__Custom                                                                 = 3
};

/// Enum /Script/Indiana.EAreaNameMode
/// Size: 0x03
enum class EAreaNameMode : uint8_t
{
	EAreaNameMode__Off                                                               = 0,
	EAreaNameMode__TimedFade                                                         = 1,
	EAreaNameMode__On                                                                = 2
};

/// Enum /Script/Indiana.EHeldWeaponDisplayText
/// Size: 0x04
enum class EHeldWeaponDisplayText : uint8_t
{
	EHeldWeaponDisplayText__Off                                                      = 0,
	EHeldWeaponDisplayText__CombatOnly                                               = 1,
	EHeldWeaponDisplayText__TimedFade                                                = 2,
	EHeldWeaponDisplayText__On                                                       = 3
};

/// Enum /Script/Indiana.EHeldWeaponDisplayMode
/// Size: 0x04
enum class EHeldWeaponDisplayMode : uint8_t
{
	EHeldWeaponDisplayMode__Off                                                      = 0,
	EHeldWeaponDisplayMode__CombatOnly                                               = 1,
	EHeldWeaponDisplayMode__TimedFade                                                = 2,
	EHeldWeaponDisplayMode__On                                                       = 3
};

/// Enum /Script/Indiana.ECompanionAbilityBindingMode
/// Size: 0x04
enum class ECompanionAbilityBindingMode : uint8_t
{
	ECompanionAbilityBindingMode__Off                                                = 0,
	ECompanionAbilityBindingMode__CombatOnly                                         = 1,
	ECompanionAbilityBindingMode__TimedFade                                          = 2,
	ECompanionAbilityBindingMode__On                                                 = 3
};

/// Enum /Script/Indiana.ECompanionAbilityUIMode
/// Size: 0x04
enum class ECompanionAbilityUIMode : uint8_t
{
	ECompanionAbilityUIMode__Off                                                     = 0,
	ECompanionAbilityUIMode__CombatOnly                                              = 1,
	ECompanionAbilityUIMode__TimedFade                                               = 2,
	ECompanionAbilityUIMode__On                                                      = 3
};

/// Enum /Script/Indiana.EPlayerStatusEffectTextMode
/// Size: 0x03
enum class EPlayerStatusEffectTextMode : uint8_t
{
	EPlayerStatusEffectTextMode__Off                                                 = 0,
	EPlayerStatusEffectTextMode__TimedFade                                           = 1,
	EPlayerStatusEffectTextMode__AlwaysOn                                            = 2
};

/// Enum /Script/Indiana.EPlayerStatusBarMode
/// Size: 0x03
enum class EPlayerStatusBarMode : uint8_t
{
	EPlayerStatusBarMode__Off                                                        = 0,
	EPlayerStatusBarMode__TimedFade                                                  = 1,
	EPlayerStatusBarMode__On                                                         = 2
};

/// Enum /Script/Indiana.EQuestUpdateMode
/// Size: 0x03
enum class EQuestUpdateMode : uint8_t
{
	EQuestUpdateMode__Off                                                            = 0,
	EQuestUpdateMode__TimedFade                                                      = 1,
	EQuestUpdateMode__On                                                             = 2
};

/// Enum /Script/Indiana.EReticleMode
/// Size: 0x04
enum class EReticleMode : uint8_t
{
	EReticleMode__Off                                                                = 0,
	EReticleMode__ADSOnly                                                            = 1,
	EReticleMode__CombatOnly                                                         = 2,
	EReticleMode__On                                                                 = 3
};

/// Enum /Script/Indiana.EAimingReticleMode
/// Size: 0x03
enum class EAimingReticleMode : uint8_t
{
	EAimingReticleMode__Off                                                          = 0,
	EAimingReticleMode__CombatOnly                                                   = 1,
	EAimingReticleMode__On                                                           = 2
};

/// Enum /Script/Indiana.EDialogSkillMode
/// Size: 0x03
enum class EDialogSkillMode : uint8_t
{
	EDialogSkillMode__Never                                                          = 0,
	EDialogSkillMode__OnlyWhenClose                                                  = 1,
	EDialogSkillMode__Always                                                         = 2
};

/// Enum /Script/Indiana.ESSGIMode
/// Size: 0x02
enum class ESSGIMode : uint8_t
{
	ESSGIMode__Halfres                                                               = 1,
	ESSGIMode__Fullres                                                               = 2
};

/// Enum /Script/Indiana.EFSR2Mode
/// Size: 0x04
enum class EFSR2Mode : uint8_t
{
	EFSR2Mode__Quality                                                               = 1,
	EFSR2Mode__Balanced                                                              = 2,
	EFSR2Mode__Performance                                                           = 3,
	EFSR2Mode__UltraPerf                                                             = 4
};

/// Enum /Script/Indiana.EPerformanceMode
/// Size: 0x02
enum class EPerformanceMode : uint8_t
{
	EPerformanceMode__Performance                                                    = 0,
	EPerformanceMode__Cinematic                                                      = 1
};

/// Enum /Script/Indiana.ELanguageMode
/// Size: 0x13
enum class ELanguageMode : uint8_t
{
	ELanguageMode__English                                                           = 0,
	ELanguageMode__French                                                            = 1,
	ELanguageMode__Italian                                                           = 2,
	ELanguageMode__German                                                            = 3,
	ELanguageMode__SpanishCastilian                                                  = 4,
	ELanguageMode__PortugueseBrazilian                                               = 5,
	ELanguageMode__Russian                                                           = 6,
	ELanguageMode__Korean                                                            = 7,
	ELanguageMode__Japanese                                                          = 8,
	ELanguageMode__ChineseSimplified                                                 = 9,
	ELanguageMode__Polish                                                            = 10,
	ELanguageMode__Count                                                             = 11,
	ELanguageMode__Invalid                                                           = 12
};

/// Enum /Script/Indiana.EWeaponTooltipStatMode
/// Size: 0x02
enum class EWeaponTooltipStatMode : uint8_t
{
	EWeaponTooltipStatMode__DPS                                                      = 0,
	EWeaponTooltipStatMode__Damage                                                   = 1
};

/// Enum /Script/Indiana.ECompanionOutlineMode
/// Size: 0x03
enum class ECompanionOutlineMode : uint8_t
{
	ECompanionOutlineMode__On                                                        = 0,
	ECompanionOutlineMode__CombatOnly                                                = 1,
	ECompanionOutlineMode__Off                                                       = 2
};

/// Enum /Script/Indiana.EConversationSubtitleMode
/// Size: 0x03
enum class EConversationSubtitleMode : uint8_t
{
	EConversationSubtitleMode__On                                                    = 0,
	EConversationSubtitleMode__Delayed                                               = 1,
	EConversationSubtitleMode__Off                                                   = 2
};

/// Enum /Script/Indiana.EFPSLimit
/// Size: 0x10
enum class EFPSLimit : uint8_t
{
	EFPSLimit__Thirty                                                                = 0,
	EFPSLimit__Sixty                                                                 = 1,
	EFPSLimit__HundredTwenty                                                         = 2,
	EFPSLimit__HundredFourtyFour                                                     = 3,
	EFPSLimit__HundredSixty                                                          = 4,
	EFPSLimit__HundredSixtyFive                                                      = 5,
	EFPSLimit__HundredEighty                                                         = 6,
	EFPSLimit__TwoHundred                                                            = 7,
	EFPSLimit__TwoHundredFourty                                                      = 8,
	EFPSLimit__Unlimited                                                             = 9
};

/// Enum /Script/Indiana.EItemInteraction
/// Size: 0x04
enum class EItemInteraction : uint8_t
{
	EItemInteraction__EDragDropStart                                                 = 0,
	EItemInteraction__EDragDropEnd                                                   = 1,
	EItemInteraction__EItemPickup                                                    = 2,
	EItemInteraction__EItemConsumed                                                  = 3
};

/// Enum /Script/Indiana.ECheckBranches
/// Size: 0x02
enum class ECheckBranches : uint8_t
{
	ECheckBranches__Valid                                                            = 0,
	ECheckBranches__Invalid                                                          = 1
};

/// Enum /Script/Indiana.EOccupationChannel
/// Size: 0x03
enum class EOccupationChannel : uint8_t
{
	EOccupationChannel__Firing                                                       = 0,
	EOccupationChannel__CharacterArea                                                = 1,
	EOccupationChannel__Count                                                        = 2
};

/// Enum /Script/Indiana.EPathBlockedType
/// Size: 0x04
enum class EPathBlockedType : uint8_t
{
	EPathBlockedType__None                                                           = 0,
	EPathBlockedType__Stuck                                                          = 1,
	EPathBlockedType__Lost                                                           = 2,
	EPathBlockedType__Destination                                                    = 3
};

/// Enum /Script/Indiana.EPlayerAudioEvent
/// Size: 0x44
enum class EPlayerAudioEvent : uint8_t
{
	EPlayerAudioEvent__None                                                          = 0,
	EPlayerAudioEvent__TacticalTimeDilation                                          = 1,
	EPlayerAudioEvent__EndTacticalTimeDilation                                       = 2,
	EPlayerAudioEvent__CalledShot                                                    = 3,
	EPlayerAudioEvent__CalledShotImpactClose                                         = 4,
	EPlayerAudioEvent__CalledShotImpactFar                                           = 5,
	EPlayerAudioEvent__CalledShotCameraCutToTarget                                   = 6,
	EPlayerAudioEvent__CalledShotEnd                                                 = 7,
	EPlayerAudioEvent__CalledShotOffCooldown                                         = 8,
	EPlayerAudioEvent__KillCamera                                                    = 9,
	EPlayerAudioEvent__QuestStarted                                                  = 10,
	EPlayerAudioEvent__QuestCompleted                                                = 11,
	EPlayerAudioEvent__QuestFailed                                                   = 12,
	EPlayerAudioEvent__ObjectiveCompleted                                            = 13,
	EPlayerAudioEvent__ObjectiveFailed                                               = 14,
	EPlayerAudioEvent__AddendumAdded                                                 = 15,
	EPlayerAudioEvent__ObjectiveUpdated                                              = 16,
	EPlayerAudioEvent__CombatStart                                                   = 17,
	EPlayerAudioEvent__BlockRangedAttack                                             = 18,
	EPlayerAudioEvent__BlockMeleeAttack                                              = 19,
	EPlayerAudioEvent__Bribe                                                         = 20,
	EPlayerAudioEvent__DisguiseMeter                                                 = 21,
	EPlayerAudioEvent__DisguiseMeterDrain                                            = 22,
	EPlayerAudioEvent__DisguiseMeterDepleted                                         = 23,
	EPlayerAudioEvent__DisguiseMeterRefilled                                         = 24,
	EPlayerAudioEvent__PickPocketStart                                               = 25,
	EPlayerAudioEvent__PickPocketSuccess                                             = 26,
	EPlayerAudioEvent__PickPocketFail                                                = 27,
	EPlayerAudioEvent__PickPocketStop                                                = 28,
	EPlayerAudioEvent__HackStart                                                     = 29,
	EPlayerAudioEvent__HackSuccess                                                   = 30,
	EPlayerAudioEvent__HackFail                                                      = 31,
	EPlayerAudioEvent__WeaponDamaged                                                 = 32,
	EPlayerAudioEvent__WeaponSeverelyDamaged                                         = 33,
	EPlayerAudioEvent__WeaponDestroyed                                               = 34,
	EPlayerAudioEvent__HelmetDamaged                                                 = 35,
	EPlayerAudioEvent__HelmetSeverelyDamaged                                         = 36,
	EPlayerAudioEvent__HelmetDestroyed                                               = 37,
	EPlayerAudioEvent__ArmorDamaged                                                  = 38,
	EPlayerAudioEvent__ArmorSeverelyDamaged                                          = 39,
	EPlayerAudioEvent__ArmorDestroyed                                                = 40,
	EPlayerAudioEvent__StealthEntered                                                = 41,
	EPlayerAudioEvent__StealthExited                                                 = 42,
	EPlayerAudioEvent__ReloadFail                                                    = 43
};

/// Enum /Script/Indiana.EPlayerAudioDetectionState
/// Size: 0x03
enum class EPlayerAudioDetectionState : uint8_t
{
	EPlayerAudioDetectionState__Undetected                                           = 0,
	EPlayerAudioDetectionState__Danger                                               = 1,
	EPlayerAudioDetectionState__Combat                                               = 2
};

/// Enum /Script/Indiana.EMapFlags
/// Size: 0x03
enum class EMapFlags : uint8_t
{
	EMapFlags__None                                                                  = 0,
	EMapFlags__Known                                                                 = 1,
	EMapFlags__Visited                                                               = 2
};

/// Enum /Script/Indiana.EIndianaTextAnimationType
/// Size: 0x05
enum class EIndianaTextAnimationType : uint8_t
{
	EIndianaTextAnimationType__Invalid                                               = 0,
	EIndianaTextAnimationType__DefaultComputerTerminalHeader                         = 1,
	EIndianaTextAnimationType__DefaultComputerTerminalSubheader                      = 2,
	EIndianaTextAnimationType__ComputerTerminalBody                                  = 3,
	EIndianaTextAnimationType__Count                                                 = 4
};

/// Enum /Script/Indiana.EIndianaAudioEvent
/// Size: 0x148
enum class EIndianaAudioEvent : uint8_t
{
	EIndianaAudioEvent__Invalid                                                      = 0,
	EIndianaAudioEvent__CCAptitudeSelect                                             = 1,
	EIndianaAudioEvent__CCRandomizeAppearance                                        = 2,
	EIndianaAudioEvent__CCFinalize                                                   = 3,
	EIndianaAudioEvent__CompanionGained                                              = 4,
	EIndianaAudioEvent__CompanionLost                                                = 5,
	EIndianaAudioEvent__ToggleAdvanceStats                                           = 6,
	EIndianaAudioEvent__CollapseExpandList                                           = 7,
	EIndianaAudioEvent__SliderValueChange                                            = 8,
	EIndianaAudioEvent__PageNext                                                     = 9,
	EIndianaAudioEvent__PagePrev                                                     = 10,
	EIndianaAudioEvent__SubPageChange                                                = 11,
	EIndianaAudioEvent__Back                                                         = 12,
	EIndianaAudioEvent__Sort                                                         = 13,
	EIndianaAudioEvent__FlipSort                                                     = 14,
	EIndianaAudioEvent__Hold                                                         = 15,
	EIndianaAudioEvent__HoldCancel                                                   = 16,
	EIndianaAudioEvent__HoldFinished                                                 = 17,
	EIndianaAudioEvent__OpenToMap                                                    = 18,
	EIndianaAudioEvent__OpenToQuests                                                 = 19,
	EIndianaAudioEvent__OpenToInventory                                              = 20,
	EIndianaAudioEvent__TabOpenLedger                                                = 21,
	EIndianaAudioEvent__LootBody                                                     = 22,
	EIndianaAudioEvent__PickpocketAction                                             = 23,
	EIndianaAudioEvent__ItemViewerPageChange                                         = 24,
	EIndianaAudioEvent__InventoryChangeTab                                           = 25,
	EIndianaAudioEvent__CantDo                                                       = 26,
	EIndianaAudioEvent__CharacterCreationRespecConfirm                               = 27,
	EIndianaAudioEvent__ExaminablePopUp                                              = 28,
	EIndianaAudioEvent__GlobalSelect                                                 = 29,
	EIndianaAudioEvent__TutorialAccept                                               = 30,
	EIndianaAudioEvent__ItemAdded                                                    = 31,
	EIndianaAudioEvent__ItemRemoved                                                  = 32,
	EIndianaAudioEvent__ItemRepair                                                   = 33,
	EIndianaAudioEvent__ItemRepairAll                                                = 34,
	EIndianaAudioEvent__ItemBreakdown                                                = 35,
	EIndianaAudioEvent__ItemJunkUnjunk                                               = 36,
	EIndianaAudioEvent__ItemDrop                                                     = 37,
	EIndianaAudioEvent__ItemInspect                                                  = 38,
	EIndianaAudioEvent__ItemCompare                                                  = 39,
	EIndianaAudioEvent__ItemInspectZoom                                              = 40,
	EIndianaAudioEvent__TutorialPopUpFullScreen                                      = 41,
	EIndianaAudioEvent__TutorialPopUpMinor                                           = 42,
	EIndianaAudioEvent__RepIncreased                                                 = 43,
	EIndianaAudioEvent__RepDecreased                                                 = 44,
	EIndianaAudioEvent__SkillCheckPass                                               = 45,
	EIndianaAudioEvent__POIDiscovered                                                = 46,
	EIndianaAudioEvent__XPGained                                                     = 47,
	EIndianaAudioEvent__LevelUpNotificationStart                                     = 48,
	EIndianaAudioEvent__LevelUpNotificationEnd                                       = 49,
	EIndianaAudioEvent__FastTravelImpossible_Encumbered                              = 50,
	EIndianaAudioEvent__FastTravelImpossible_Combat                                  = 51,
	EIndianaAudioEvent__ManualSave                                                   = 52,
	EIndianaAudioEvent__FastTravelAdded                                              = 53,
	EIndianaAudioEvent__TextEntryTyping                                              = 54,
	EIndianaAudioEvent__WarningDialog                                                = 55,
	EIndianaAudioEvent__NewGame                                                      = 56,
	EIndianaAudioEvent__ContinueGame                                                 = 57,
	EIndianaAudioEvent__Zoom                                                         = 58,
	EIndianaAudioEvent__Pan                                                          = 59,
	EIndianaAudioEvent__FastTravelConfirm                                            = 60,
	EIndianaAudioEvent__MapTabChange                                                 = 61,
	EIndianaAudioEvent__SystemMapOpen                                                = 62,
	EIndianaAudioEvent__SystemMapOpenAmbient                                         = 63,
	EIndianaAudioEvent__SystemMapClose                                               = 64,
	EIndianaAudioEvent__SystemMapCloseAmbient                                        = 65,
	EIndianaAudioEvent__SystemMapShipStart                                           = 66,
	EIndianaAudioEvent__SystemMapShipStop                                            = 67,
	EIndianaAudioEvent__SystemMapShipLandingPad                                      = 68,
	EIndianaAudioEvent__SystemMapFastTravelConfirm                                   = 69,
	EIndianaAudioEvent__SystemMapPanStart                                            = 70,
	EIndianaAudioEvent__SystemMapPanStop                                             = 71,
	EIndianaAudioEvent__SystemMapDestinationUnlocked                                 = 72,
	EIndianaAudioEvent__QuestSelect                                                  = 73,
	EIndianaAudioEvent__QuestFilterChange                                            = 74,
	EIndianaAudioEvent__SkillSelectUnselect                                          = 75,
	EIndianaAudioEvent__SkillUnavailable                                             = 76,
	EIndianaAudioEvent__SkillApply                                                   = 77,
	EIndianaAudioEvent__PerkAddRemove                                                = 78,
	EIndianaAudioEvent__PerkApply                                                    = 79,
	EIndianaAudioEvent__PerkFinalConfirm                                             = 80,
	EIndianaAudioEvent__VendorOpenClose                                              = 81,
	EIndianaAudioEvent__VendorOpenClose_AC                                           = 82,
	EIndianaAudioEvent__VendorOpenClose_CP                                           = 83,
	EIndianaAudioEvent__VendorOpenClose_Groundbreaker                                = 84,
	EIndianaAudioEvent__VendorOpenClose_MSI                                          = 85,
	EIndianaAudioEvent__VendorOpenClose_SC                                           = 86,
	EIndianaAudioEvent__VendorOpenClose_Sublight                                     = 87,
	EIndianaAudioEvent__VendorOpenClose_TL                                           = 88,
	EIndianaAudioEvent__VendorChangeTab                                              = 89,
	EIndianaAudioEvent__VendorBuy                                                    = 90,
	EIndianaAudioEvent__VendorCantBuy                                                = 91,
	EIndianaAudioEvent__VendorSell                                                   = 92,
	EIndianaAudioEvent__VendorChangeCategory                                         = 93,
	EIndianaAudioEvent__VendorSellJunk                                               = 94,
	EIndianaAudioEvent__VendorRepair                                                 = 95,
	EIndianaAudioEvent__Vendor_Machine_Open_Factionless                              = 96,
	EIndianaAudioEvent__Vendor_Machine_Open_AC                                       = 97,
	EIndianaAudioEvent__Vendor_Machine_Open_CP                                       = 98,
	EIndianaAudioEvent__Vendor_Machine_Open_Groundbreaker                            = 99,
	EIndianaAudioEvent__Vendor_Machine_Open_MSI                                      = 100,
	EIndianaAudioEvent__Vendor_Machine_Open_SC                                       = 101,
	EIndianaAudioEvent__Vendor_Machine_Open_Sublight                                 = 102,
	EIndianaAudioEvent__Vendor_Machine_Open_TL                                       = 103,
	EIndianaAudioEvent__Vendor_Human_Open_Factionless                                = 104,
	EIndianaAudioEvent__Vendor_Human_Open_AC                                         = 105,
	EIndianaAudioEvent__Vendor_Human_Open_CP                                         = 106,
	EIndianaAudioEvent__Vendor_Human_Open_Groundbreaker                              = 107,
	EIndianaAudioEvent__Vendor_Human_Open_MSI                                        = 108,
	EIndianaAudioEvent__Vendor_Human_Open_SC                                         = 109,
	EIndianaAudioEvent__Vendor_Human_Open_Sublight                                   = 110,
	EIndianaAudioEvent__Vendor_Human_Open_TL                                         = 111,
	EIndianaAudioEvent__Vendor_Machine_Close_Factionless                             = 112,
	EIndianaAudioEvent__Vendor_Machine_Close_AC                                      = 113,
	EIndianaAudioEvent__Vendor_Machine_Close_CP                                      = 114,
	EIndianaAudioEvent__Vendor_Machine_Close_Groundbreaker                           = 115,
	EIndianaAudioEvent__Vendor_Machine_Close_MSI                                     = 116,
	EIndianaAudioEvent__Vendor_Machine_Close_SC                                      = 117,
	EIndianaAudioEvent__Vendor_Machine_Close_Sublight                                = 118,
	EIndianaAudioEvent__Vendor_Machine_Close_TL                                      = 119,
	EIndianaAudioEvent__Vendor_Human_Close_Factionless                               = 120,
	EIndianaAudioEvent__Vendor_Human_Close_AC                                        = 121,
	EIndianaAudioEvent__Vendor_Human_Close_CP                                        = 122,
	EIndianaAudioEvent__Vendor_Human_Close_Groundbreaker                             = 123,
	EIndianaAudioEvent__Vendor_Human_Close_MSI                                       = 124,
	EIndianaAudioEvent__Vendor_Human_Close_SC                                        = 125,
	EIndianaAudioEvent__Vendor_Human_Close_Sublight                                  = 126,
	EIndianaAudioEvent__Vendor_Human_Close_TL                                        = 127,
	EIndianaAudioEvent__WBOpenClose                                                  = 128,
	EIndianaAudioEvent__WBInstallMod                                                 = 129,
	EIndianaAudioEvent__WBRepair                                                     = 130,
	EIndianaAudioEvent__WBTinker                                                     = 131,
	EIndianaAudioEvent__TextReadOut                                                  = 132,
	EIndianaAudioEvent__TerminalEnter                                                = 133,
	EIndianaAudioEvent__TerminalExit                                                 = 134,
	EIndianaAudioEvent__RespecEnter                                                  = 135,
	EIndianaAudioEvent__SleepBed                                                     = 136,
	EIndianaAudioEvent__WaitChair                                                    = 137,
	EIndianaAudioEvent__PauseMenuOpen                                                = 138,
	EIndianaAudioEvent__PauseMenuClose                                               = 139,
	EIndianaAudioEvent__PerkSuppressionNotification                                  = 140,
	EIndianaAudioEvent__AudioLogAcquiredNew                                          = 141,
	EIndianaAudioEvent__AudioLogAcquiredRepeat                                       = 142,
	EIndianaAudioEvent__AudioLogStarted                                              = 143,
	EIndianaAudioEvent__AudioLogResumed                                              = 144,
	EIndianaAudioEvent__AudioLogPaused                                               = 145,
	EIndianaAudioEvent__AudioLogStopped                                              = 146,
	EIndianaAudioEvent__Count                                                        = 147
};

/// Enum /Script/Indiana.EIndianaUIOpacityType
/// Size: 0x04
enum class EIndianaUIOpacityType : uint8_t
{
	EIndianaUIOpacityType__Invalid                                                   = 0,
	EIndianaUIOpacityType__PipingOpacity                                             = 1,
	EIndianaUIOpacityType__BackgroundOpacity                                         = 2,
	EIndianaUIOpacityType__Count                                                     = 3
};

/// Enum /Script/Indiana.EWidgetOpenState
/// Size: 0x04
enum class EWidgetOpenState : uint8_t
{
	EWidgetOpenState__Maximized                                                      = 0,
	EWidgetOpenState__TransitioningToMinimized                                       = 1,
	EWidgetOpenState__Minimized                                                      = 2,
	EWidgetOpenState__TransitioningToMaximized                                       = 3
};

/// Enum /Script/Indiana.EPlayerHomeBaseType
/// Size: 0x03
enum class EPlayerHomeBaseType : uint8_t
{
	EPlayerHomeBaseType__None                                                        = 0,
	EPlayerHomeBaseType__Fake                                                        = 1,
	EPlayerHomeBaseType__Real                                                        = 2
};

/// Enum /Script/Indiana.EObjectInteractionUIType
/// Size: 0x04
enum class EObjectInteractionUIType : uint8_t
{
	EObjectInteractionUIType__Lockpick                                               = 0,
	EObjectInteractionUIType__Hack                                                   = 1,
	EObjectInteractionUIType__Trap                                                   = 2,
	EObjectInteractionUIType__Pickpocket                                             = 3
};

/// Enum /Script/Indiana.EPropagationMode
/// Size: 0x03
enum class EPropagationMode : uint8_t
{
	EPropagationMode__None                                                           = 0,
	EPropagationMode__Parent                                                         = 1,
	EPropagationMode__Indirect                                                       = 2
};

/// Enum /Script/Indiana.EInteractPayloadType
/// Size: 0x03
enum class EInteractPayloadType : uint8_t
{
	EInteractPayloadType__Int32                                                      = 0,
	EInteractPayloadType__Float                                                      = 1,
	EInteractPayloadType__String                                                     = 2
};

/// Enum /Script/Indiana.EInterruptType
/// Size: 0x02
enum class EInterruptType : uint8_t
{
	EInterruptType__Interrupt                                                        = 0,
	EInterruptType__PlaySimultaneously                                               = 1
};

/// Enum /Script/Indiana.EItemType
/// Size: 0x16
enum class EItemType : uint8_t
{
	EItemType__Weapon                                                                = 0,
	EItemType__ArmorSet                                                              = 1,
	EItemType__Ammo                                                                  = 2,
	EItemType__Currency                                                              = 3,
	EItemType__Resource                                                              = 4,
	EItemType__Quest                                                                 = 5,
	EItemType__WeaponMod                                                             = 6,
	EItemType__Helmet                                                                = 7,
	EItemType__ArmorModArmoring                                                      = 8,
	EItemType__ArmorModUtility                                                       = 9,
	EItemType__ArmorModResistance                                                    = 10,
	EItemType__ArmorModDampening                                                     = 11,
	EItemType__MedKit                                                                = 12,
	EItemType__Gadget                                                                = 13,
	EItemType__Count                                                                 = 14,
	EItemType__Invalid                                                               = 15
};

/// Enum /Script/Indiana.EItemStat
/// Size: 0x48
enum class EItemStat : uint8_t
{
	EItemStat__WeaponType                                                            = 0,
	EItemStat__FireMode                                                              = 1,
	EItemStat__AmmoType                                                              = 2,
	EItemStat__SkillType                                                             = 3,
	EItemStat__DamageType                                                            = 4,
	EItemStat__DamageTypeEnumValue                                                   = 5,
	EItemStat__Damage                                                                = 6,
	EItemStat__DPM                                                                   = 7,
	EItemStat__DPS                                                                   = 8,
	EItemStat__RPM                                                                   = 9,
	EItemStat__RoF                                                                   = 10,
	EItemStat__SwingAttackRate                                                       = 11,
	EItemStat__EquipTime                                                             = 12,
	EItemStat__ReloadTime                                                            = 13,
	EItemStat__CriticalChance                                                        = 14,
	EItemStat__CriticalMultiplier                                                    = 15,
	EItemStat__PostArmorMultiplier                                                   = 16,
	EItemStat__MagazineSize                                                          = 17,
	EItemStat__EffectiveRange                                                        = 18,
	EItemStat__MaxRange                                                              = 19,
	EItemStat__Recoil                                                                = 20,
	EItemStat__AimSpreadReduction                                                    = 21,
	EItemStat__SwayAngle                                                             = 22,
	EItemStat__SpreadAngle                                                           = 23,
	EItemStat__NoiseRange                                                            = 24,
	EItemStat__AoEOuterRadius                                                        = 25,
	EItemStat__MaxChargeTime                                                         = 26,
	EItemStat__AmmoPerShot                                                           = 27,
	EItemStat__AmmoTypeEmbedded                                                      = 28,
	EItemStat__DamageSpecialEffect                                                   = 29,
	EItemStat__ArmorThresholdPhysical                                                = 30,
	EItemStat__ArmorResistancePhysical                                               = 31,
	EItemStat__ArmorThresholdThermal                                                 = 32,
	EItemStat__ArmorResistanceThermal                                                = 33,
	EItemStat__ArmorThresholdEnergy                                                  = 34,
	EItemStat__ArmorResistanceEnergy                                                 = 35,
	EItemStat__ArmorThresholdCorruption                                              = 36,
	EItemStat__ArmorResistanceCorruption                                             = 37,
	EItemStat__ArmorThresholdShock                                                   = 38,
	EItemStat__ArmorResistanceShock                                                  = 39,
	EItemStat__ArmorThresholdNRay                                                    = 40,
	EItemStat__ArmorResistanceNRay                                                   = 41,
	EItemStat__ArmorThresholdCold                                                    = 42,
	EItemStat__ArmorResistanceCold                                                   = 43,
	EItemStat__ArmorSkillBonus                                                       = 44,
	EItemStat__ArmorType                                                             = 45,
	EItemStat__Durability                                                            = 46,
	EItemStat__Count                                                                 = 47
};

/// Enum /Script/Indiana.EItemSorting
/// Size: 0x10
enum class EItemSorting : uint8_t
{
	EItemSorting__CustomSort                                                         = 0,
	EItemSorting__Alphabetical                                                       = 1,
	EItemSorting__Value                                                              = 2,
	EItemSorting__Weight                                                             = 3,
	EItemSorting__ValueToWeight                                                      = 4,
	EItemSorting__DamageRating                                                       = 5,
	EItemSorting__WeaponType                                                         = 6,
	EItemSorting__ArmorRating                                                        = 7,
	EItemSorting__ArmorType                                                          = 8,
	EItemSorting__RangedMeleeArmorMod                                                = 9
};

/// Enum /Script/Indiana.ELedgerPages
/// Size: 0x13
enum class ELedgerPages : uint8_t
{
	ELedgerPages__CharacterStats                                                     = 0,
	ELedgerPages__Inventory                                                          = 1,
	ELedgerPages__Journal                                                            = 2,
	ELedgerPages__Map                                                                = 3,
	ELedgerPages__Companion1                                                         = 4,
	ELedgerPages__Companion2                                                         = 5,
	ELedgerPages__Companion3                                                         = 6,
	ELedgerPages__Companion4                                                         = 7,
	ELedgerPages__Companion5                                                         = 8,
	ELedgerPages__Companion6                                                         = 9,
	ELedgerPages__Null                                                               = 10,
	ELedgerPages__Count                                                              = 11,
	ELedgerPages__Invalid                                                            = 12
};

/// Enum /Script/Indiana.ELoadingScreenRegion
/// Size: 0x14
enum class ELoadingScreenRegion : uint8_t
{
	ELoadingScreenRegion__NoRegion                                                   = 0,
	ELoadingScreenRegion__Byzantium                                                  = 1,
	ELoadingScreenRegion__EmeraldVale                                                = 2,
	ELoadingScreenRegion__Groundbreaker                                              = 3,
	ELoadingScreenRegion__Monarch                                                    = 4,
	ELoadingScreenRegion__PlayerShip                                                 = 5,
	ELoadingScreenRegion__Roseway                                                    = 6,
	ELoadingScreenRegion__ScientistLab                                               = 7,
	ELoadingScreenRegion__Scylla                                                     = 8,
	ELoadingScreenRegion__Tartarus                                                   = 9,
	ELoadingScreenRegion__TheHope                                                    = 10,
	ELoadingScreenRegion__Gorgon                                                     = 11,
	ELoadingScreenRegion__Eridanos                                                   = 12,
	ELoadingScreenRegion__Count                                                      = 13
};

/// Enum /Script/Indiana.ELocomotionCategory
/// Size: 0x13
enum class ELocomotionCategory : uint8_t
{
	ELocomotionCategory__LC_WalkStart                                                = 0,
	ELocomotionCategory__LC_WalkStop                                                 = 1,
	ELocomotionCategory__LC_WalkTurn                                                 = 2,
	ELocomotionCategory__LC_RunStart                                                 = 3,
	ELocomotionCategory__LC_RunStop                                                  = 4,
	ELocomotionCategory__LC_RunTurn                                                  = 5,
	ELocomotionCategory__LC_WalkToRun                                                = 6,
	ELocomotionCategory__LC_RunToWalk                                                = 7,
	ELocomotionCategory__LC_TurnInPlace                                              = 8,
	ELocomotionCategory__LC_Walk                                                     = 9,
	ELocomotionCategory__LC_Idle                                                     = 10,
	ELocomotionCategory__LC_Run                                                      = 11,
	ELocomotionCategory__LC_Invalid                                                  = 12
};

/// Enum /Script/Indiana.EEqualityComparison
/// Size: 0x02
enum class EEqualityComparison : uint8_t
{
	EEqualityComparison__Equal                                                       = 0,
	EEqualityComparison__NotEqual                                                    = 1
};

/// Enum /Script/Indiana.EGlobalVariableComparison
/// Size: 0x06
enum class EGlobalVariableComparison : uint8_t
{
	EGlobalVariableComparison__Equal                                                 = 0,
	EGlobalVariableComparison__NotEqual                                              = 1,
	EGlobalVariableComparison__GreaterThan                                           = 2,
	EGlobalVariableComparison__LessThan                                              = 3,
	EGlobalVariableComparison__GreaterThanEqual                                      = 4,
	EGlobalVariableComparison__LessThanEqual                                         = 5
};

/// Enum /Script/Indiana.EConditionalType
/// Size: 0x05
enum class EConditionalType : uint8_t
{
	EConditionalType__GlobalVar                                                      = 0,
	EConditionalType__QuestState                                                     = 1,
	EConditionalType__CompanionState                                                 = 2,
	EConditionalType__PCGender                                                       = 3,
	EConditionalType__DLCInstalled                                                   = 4
};

/// Enum /Script/Indiana.ELogicalOperator
/// Size: 0x02
enum class ELogicalOperator : uint8_t
{
	ELogicalOperator__And                                                            = 0,
	ELogicalOperator__Or                                                             = 1
};

/// Enum /Script/Indiana.EDebugPCPlatformID
/// Size: 0x05
enum class EDebugPCPlatformID : uint8_t
{
	EDebugPCPlatformID__Normal                                                       = 0,
	EDebugPCPlatformID__PC_EpicGamesStore                                            = 1,
	EDebugPCPlatformID__PC_Steam                                                     = 2,
	EDebugPCPlatformID__PC_WindowsStore                                              = 3,
	EDebugPCPlatformID__PC_Gamepass                                                  = 4
};

/// Enum /Script/Indiana.EWaitingForInputState
/// Size: 0x04
enum class EWaitingForInputState : uint8_t
{
	EWaitingForInputState__AutosaveSplash                                            = 0,
	EWaitingForInputState__WaitingForInput                                           = 1,
	EWaitingForInputState__HidingText                                                = 2,
	EWaitingForInputState__Complete                                                  = 3
};

/// Enum /Script/Indiana.EMaterialParamType
/// Size: 0x03
enum class EMaterialParamType : uint8_t
{
	EMaterialParamType__Scalar                                                       = 0,
	EMaterialParamType__Vector                                                       = 1,
	EMaterialParamType__Texture                                                      = 2
};

/// Enum /Script/Indiana.EAttackerSlottingState
/// Size: 0x04
enum class EAttackerSlottingState : uint8_t
{
	EAttackerSlottingState__Unslotted_NoMove                                         = 0,
	EAttackerSlottingState__Unslotted                                                = 1,
	EAttackerSlottingState__Waiting                                                  = 2,
	EAttackerSlottingState__Slotted                                                  = 3
};

/// Enum /Script/Indiana.EMusicChangeReason
/// Size: 0x11
enum class EMusicChangeReason : uint8_t
{
	EMusicChangeReason__NoMusicAvailable                                             = 0,
	EMusicChangeReason__LoadingDefault                                               = 1,
	EMusicChangeReason__LoadingConditional                                           = 2,
	EMusicChangeReason__GameOver                                                     = 3,
	EMusicChangeReason__ScriptedOverride                                             = 4,
	EMusicChangeReason__ConditionalOverride                                          = 5,
	EMusicChangeReason__PlayerInDanger                                               = 6,
	EMusicChangeReason__PlayerInCombat                                               = 7,
	EMusicChangeReason__Default                                                      = 8,
	EMusicChangeReason__PlayerInPostCombat                                           = 9,
	EMusicChangeReason__UserSkip                                                     = 10
};

/// Enum /Script/Indiana.ESpecialObsidianID
/// Size: 0x09
enum class ESpecialObsidianID : uint8_t
{
	ESpecialObsidianID__None                                                         = 0,
	ESpecialObsidianID__Companion1                                                   = 1,
	ESpecialObsidianID__Companion2                                                   = 2,
	ESpecialObsidianID__Companion3                                                   = 3,
	ESpecialObsidianID__Companion4                                                   = 4,
	ESpecialObsidianID__Companion5                                                   = 5,
	ESpecialObsidianID__Companion6                                                   = 6,
	ESpecialObsidianID__Companion7                                                   = 7,
	ESpecialObsidianID__Count                                                        = 8
};

/// Enum /Script/Indiana.EOCLEventType
/// Size: 0x16
enum class EOCLEventType : uint8_t
{
	EOCLEventType__Invalid                                                           = 0,
	EOCLEventType__Open                                                              = 1,
	EOCLEventType__Opening                                                           = 2,
	EOCLEventType__Closed                                                            = 3,
	EOCLEventType__Closing                                                           = 4,
	EOCLEventType__Unlocked                                                          = 5,
	EOCLEventType__Barred                                                            = 6,
	EOCLEventType__Locked                                                            = 7,
	EOCLEventType__LockpickSuccess                                                   = 8,
	EOCLEventType__LockpickInterrupted                                               = 9,
	EOCLEventType__Lockpick                                                          = 10,
	EOCLEventType__TravelStart                                                       = 11,
	EOCLEventType__Ambient                                                           = 12,
	EOCLEventType__Unbarred                                                          = 13,
	EOCLEventType__Unsealed                                                          = 14,
	EOCLEventType__InteractLoopFinished                                              = 15
};

/// Enum /Script/Indiana.EOCLResult
/// Size: 0x08
enum class EOCLResult : uint8_t
{
	EOCLResult__Success                                                              = 0,
	EOCLResult__Failed_Locked                                                        = 1,
	EOCLResult__Failed_LockedPermanent                                               = 2,
	EOCLResult__Failed_Sealed                                                        = 3,
	EOCLResult__Failed_IsOpening                                                     = 4,
	EOCLResult__Failed_IsClosing                                                     = 5,
	EOCLResult__Failed_Barred                                                        = 6,
	EOCLResult__Pending_Lockpicking                                                  = 7
};

/// Enum /Script/Indiana.EOCLDifficulty
/// Size: 0x04
enum class EOCLDifficulty : uint8_t
{
	EOCLDifficulty__Easy                                                             = 0,
	EOCLDifficulty__Medium                                                           = 1,
	EOCLDifficulty__Difficult                                                        = 2,
	EOCLDifficulty__Extreme                                                          = 3
};

/// Enum /Script/Indiana.EPatrolMovementType
/// Size: 0x02
enum class EPatrolMovementType : uint32_t
{
	EPatrolMovementType__Run                                                         = 0,
	EPatrolMovementType__Walk                                                        = 1
};

/// Enum /Script/Indiana.EPerkCategory
/// Size: 0x05
enum class EPerkCategory : uint8_t
{
	EPerkCategory__Military                                                          = 0,
	EPerkCategory__Adventurer                                                        = 1,
	EPerkCategory__SilverTongue                                                      = 2,
	EPerkCategory__Companion                                                         = 3,
	EPerkCategory__Count                                                             = 4
};

/// Enum /Script/Indiana.EPersonalSpaceZone
/// Size: 0x04
enum class EPersonalSpaceZone : uint8_t
{
	EPersonalSpaceZone__None                                                         = 0,
	EPersonalSpaceZone__Acknowledgement                                              = 1,
	EPersonalSpaceZone__Interaction                                                  = 2,
	EPersonalSpaceZone__Violation                                                    = 3
};

/// Enum /Script/Indiana.EPlanetType
/// Size: 0x04
enum class EPlanetType : uint8_t
{
	EPlanetType__Hephaestus                                                          = 0,
	EPlanetType__Monarch                                                             = 1,
	EPlanetType__Tartarus                                                            = 2,
	EPlanetType__Terra2                                                              = 3
};

/// Enum /Script/Indiana.EDesiredEvent
/// Size: 0x03
enum class EDesiredEvent : uint8_t
{
	EDesiredEvent__None                                                              = 0,
	EDesiredEvent__Single                                                            = 1,
	EDesiredEvent__Loop                                                              = 2
};

/// Enum /Script/Indiana.EXPGainReason
/// Size: 0x10
enum class EXPGainReason : uint8_t
{
	EXPGainReason__EnemyKilled                                                       = 0,
	EXPGainReason__QuestCompleted                                                    = 1,
	EXPGainReason__QuestObjectiveCompleted                                           = 2,
	EXPGainReason__DiscoveredPointOfInterest                                         = 3,
	EXPGainReason__HackTerminal                                                      = 4,
	EXPGainReason__LockPick                                                          = 5,
	EXPGainReason__Conversation                                                      = 6,
	EXPGainReason__FoundCollectible                                                  = 7,
	EXPGainReason__Debug                                                             = 8,
	EXPGainReason__DiscoveredTravelDestination                                       = 9
};

/// Enum /Script/Indiana.EPointOfInterestXPType
/// Size: 0x06
enum class EPointOfInterestXPType : uint8_t
{
	EPointOfInterestXPType__None                                                     = 0,
	EPointOfInterestXPType__LargePointOfInterest                                     = 1,
	EPointOfInterestXPType__MediumPointOfInterest                                    = 2,
	EPointOfInterestXPType__SmallPointOfInterest                                     = 3,
	EPointOfInterestXPType__MicroPointOfInterest                                     = 4,
	EPointOfInterestXPType__Services                                                 = 5
};

/// Enum /Script/Indiana.EPointOfInterestLocationType
/// Size: 0x08
enum class EPointOfInterestLocationType : uint8_t
{
	EPointOfInterestLocationType__FastTravel                                         = 0,
	EPointOfInterestLocationType__Town                                               = 1,
	EPointOfInterestLocationType__Cave                                               = 2,
	EPointOfInterestLocationType__Dungeon                                            = 3,
	EPointOfInterestLocationType__Landmark                                           = 4,
	EPointOfInterestLocationType__Vendor                                             = 5,
	EPointOfInterestLocationType__VendingMachine                                     = 6,
	EPointOfInterestLocationType__Workbench                                          = 7
};

/// Enum /Script/Indiana.EPointOfInterestState
/// Size: 0x05
enum class EPointOfInterestState : uint8_t
{
	EPointOfInterestState__Hidden                                                    = 0,
	EPointOfInterestState__HiddenUndiscoverable                                      = 1,
	EPointOfInterestState__Unknown                                                   = 2,
	EPointOfInterestState__Mentioned                                                 = 3,
	EPointOfInterestState__Discovered                                                = 4
};

/// Enum /Script/Indiana.EQuestState
/// Size: 0x05
enum class EQuestState : uint8_t
{
	EQuestState__Invalid                                                             = 0,
	EQuestState__InProgress                                                          = 1,
	EQuestState__Completed                                                           = 2,
	EQuestState__Failed                                                              = 3,
	EQuestState__Mentioned                                                           = 4
};

/// Enum /Script/Indiana.ECompletionStatus
/// Size: 0x05
enum class ECompletionStatus : uint8_t
{
	ECompletionStatus__Invalid                                                       = 0,
	ECompletionStatus__Unstarted                                                     = 1,
	ECompletionStatus__InProgress                                                    = 2,
	ECompletionStatus__Completed                                                     = 3,
	ECompletionStatus__Botched                                                       = 4
};

/// Enum /Script/Indiana.EQueueType
/// Size: 0x02
enum class EQueueType : uint8_t
{
	EQueueType__Queue                                                                = 0,
	EQueueType__Discard                                                              = 1
};

/// Enum /Script/Indiana.ERandomBankType
/// Size: 0x02
enum class ERandomBankType : uint8_t
{
	ERandomBankType__RandomGoodbye                                                   = 0,
	ERandomBankType__Count                                                           = 1
};

/// Enum /Script/Indiana.ERecoilState
/// Size: 0x03
enum class ERecoilState : uint8_t
{
	ERecoilState__Active                                                             = 0,
	ERecoilState__ReturnToZero                                                       = 1,
	ERecoilState__Inactive                                                           = 2
};

/// Enum /Script/Indiana.ERegionType
/// Size: 0x24
enum class ERegionType : uint8_t
{
	ERegionType__None                                                                = 0,
	ERegionType__Player_Ship_0301                                                    = 1,
	ERegionType__EmeraldVale_0001_Exterior                                           = 2,
	ERegionType__EmeraldVale_0002_Town                                               = 3,
	ERegionType__EmeraldVale_0004_Geothermal_Plant                                   = 4,
	ERegionType__EmeraldVale_0005_Outcast_Camp                                       = 5,
	ERegionType__Groundbreaker_0101_Docking_Bays                                     = 6,
	ERegionType__Groundbreaker_0102_Promenade                                        = 7,
	ERegionType__Groundbreaker_0103_Operations                                       = 8,
	ERegionType__Monarch_0401_Exterior                                               = 9,
	ERegionType__Monarch_0402_Stellar_Bay                                            = 10,
	ERegionType__Monarch_0410_Stellar_Bay_Secret_Entrance                            = 11,
	ERegionType__Monarch_0403_Info_Broker_Compound                                   = 12,
	ERegionType__Monarch_0406_Devils_Peak_Station                                    = 13,
	ERegionType__Monarch_0408_Devils_Peak_Caverns                                    = 14,
	ERegionType__Monarch_0409_Nyoka_Secret_Passage                                   = 15,
	ERegionType__Roseway_0801_Forest                                                 = 16,
	ERegionType__Roseway_0802_Town                                                   = 17,
	ERegionType__Roseway_0804_Cleo_Lab                                               = 18,
	ERegionType__Roseway_0803_Covert_Lab                                             = 19,
	ERegionType__Roseway_0805_Storage_Facility                                       = 20,
	ERegionType__Terra2_0201_Exterior                                                = 21,
	ERegionType__Terra2_0202_Byzantium                                               = 22,
	ERegionType__Terra2_0203_HHCBuilding                                             = 23
};

/// Enum /Script/Indiana.ERelevancyType
/// Size: 0x03
enum class ERelevancyType : uint8_t
{
	ERelevancyType__None                                                             = 0,
	ERelevancyType__Standard                                                         = 1,
	ERelevancyType__Complete                                                         = 2
};

/// Enum /Script/Indiana.ECrosshairState
/// Size: 0x04
enum class ECrosshairState : uint8_t
{
	ECrosshairState__Invalid                                                         = 0,
	ECrosshairState__Default                                                         = 1,
	ECrosshairState__Hostile                                                         = 2,
	ECrosshairState__Neutral                                                         = 3
};

/// Enum /Script/Indiana.EReticleType
/// Size: 0x03
enum class EReticleType : uint8_t
{
	EReticleType__Invalid                                                            = 0,
	EReticleType__GenericMelee                                                       = 1,
	EReticleType__GenericRanged                                                      = 2
};

/// Enum /Script/Indiana.EStatClampingMethod
/// Size: 0x05
enum class EStatClampingMethod : uint8_t
{
	EStatClampingMethod__None                                                        = 0,
	EStatClampingMethod__ClampTo0                                                    = 1,
	EStatClampingMethod__Custom                                                      = 2,
	EStatClampingMethod__Attribute                                                   = 3,
	EStatClampingMethod__Skill                                                       = 4
};

/// Enum /Script/Indiana.EIndianaChunkIndex
/// Size: 0x04
enum class EIndianaChunkIndex : uint32_t
{
	EIndianaChunkIndex__EarlyInteractive                                             = 0,
	EIndianaChunkIndex__BaseGame                                                     = 1,
	EIndianaChunkIndex__INX1                                                         = 15,
	EIndianaChunkIndex__INX2                                                         = 16
};

/// Enum /Script/Indiana.EAutoSaveType
/// Size: 0x03
enum class EAutoSaveType : uint8_t
{
	EAutoSaveType__Default                                                           = 0,
	EAutoSaveType__Travel                                                            = 1,
	EAutoSaveType__Scripted                                                          = 2
};

/// Enum /Script/Indiana.EDeleteGameResult
/// Size: 0x05
enum class EDeleteGameResult : uint8_t
{
	EDeleteGameResult__Success                                                       = 0,
	EDeleteGameResult__Restricted                                                    = 1,
	EDeleteGameResult__Failed                                                        = 2,
	EDeleteGameResult__SaveOfGivenNameNotFound                                       = 3,
	EDeleteGameResult__FailedDeletingStaleTargetDir                                  = 4
};

/// Enum /Script/Indiana.ESaveLoadRestriction
/// Size: 0x26
enum class ESaveLoadRestriction : uint8_t
{
	ESaveLoadRestriction__NoCurrentRestriction                                       = 0,
	ESaveLoadRestriction__RunningPlayInEditor                                        = 1,
	ESaveLoadRestriction__NoPlayerPresent                                            = 2,
	ESaveLoadRestriction__CinematicInProgress                                        = 3,
	ESaveLoadRestriction__PlayerInConversation                                       = 4,
	ESaveLoadRestriction__PlayerInCombat                                             = 5,
	ESaveLoadRestriction__PlayerCrimeDetected                                        = 6,
	ESaveLoadRestriction__LevelTraveling                                             = 7,
	ESaveLoadRestriction__ModalInterface                                             = 8,
	ESaveLoadRestriction__PlayerIsIncapacitated                                      = 9,
	ESaveLoadRestriction__SaveInProgress                                             = 10,
	ESaveLoadRestriction__LoadInProgress                                             = 11,
	ESaveLoadRestriction__TimeDilation                                               = 12,
	ESaveLoadRestriction__ManualRestriction                                          = 13,
	ESaveLoadRestriction__Unsupported                                                = 14,
	ESaveLoadRestriction__DeviceFull                                                 = 15,
	ESaveLoadRestriction__PlatformSaveSystemNull                                     = 16,
	ESaveLoadRestriction__PlatformStorageInaccessible                                = 17,
	ESaveLoadRestriction__PlayerFalling                                              = 18,
	ESaveLoadRestriction__PlayerInActiveHazard                                       = 19,
	ESaveLoadRestriction__PlayerInterpolatingToSpline                                = 20,
	ESaveLoadRestriction__PlayerDeadOrDying                                          = 21,
	ESaveLoadRestriction__SuperNovaOnlySaveOnShip                                    = 22,
	ESaveLoadRestriction__UserLoggingOut                                             = 23,
	ESaveLoadRestriction__UIWindowActive                                             = 24,
	ESaveLoadRestriction__UICharacterCreationActive                                  = 25
};

/// Enum /Script/Indiana.EButtonType
/// Size: 0x02
enum class EButtonType : uint8_t
{
	EButtonType__Normal                                                              = 0,
	EButtonType__Selectable                                                          = 1
};

/// Enum /Script/Indiana.EScalarType
/// Size: 0x04
enum class EScalarType : uint8_t
{
	EScalarType__Invalid                                                             = 0,
	EScalarType__Health                                                              = 1,
	EScalarType__Damage                                                              = 2,
	EScalarType__Armor                                                               = 3
};

/// Enum /Script/Indiana.ComparisonOperator
/// Size: 0x08
enum class ComparisonOperator : uint8_t
{
	ComparisonOperator__Equals                                                       = 0,
	ComparisonOperator__GreaterThan                                                  = 1,
	ComparisonOperator__LessThan                                                     = 2,
	ComparisonOperator__NotEqual                                                     = 3,
	ComparisonOperator__GreaterThanOrEquals                                          = 4,
	ComparisonOperator__LessThanOrEquals                                             = 5,
	ComparisonOperator__Count                                                        = 6,
	ComparisonOperator__Invalid                                                      = 7
};

/// Enum /Script/Indiana.ExpressionComponentType
/// Size: 0x02
enum class ExpressionComponentType : uint8_t
{
	ExpressionComponentType__ScriptCall                                              = 0,
	ExpressionComponentType__Expression                                              = 1
};

/// Enum /Script/Indiana.LogicalOperator
/// Size: 0x02
enum class LogicalOperator : uint8_t
{
	LogicalOperator__And                                                             = 0,
	LogicalOperator__Or                                                              = 1
};

/// Enum /Script/Indiana.EPlatformFamily
/// Size: 0x04
enum class EPlatformFamily : uint8_t
{
	EPlatformFamily__PC                                                              = 0,
	EPlatformFamily__Xbox                                                            = 1,
	EPlatformFamily__PS4                                                             = 2,
	EPlatformFamily__Switch                                                          = 3
};

/// Enum /Script/Indiana.ESettingSubcategory
/// Size: 0x17
enum class ESettingSubcategory : uint8_t
{
	ESettingSubcategory__Invalid                                                     = 0,
	ESettingSubcategory__GraphicsDisplay                                             = 1,
	ESettingSubcategory__GraphicsQuality                                             = 2,
	ESettingSubcategory__AudioVolume                                                 = 3,
	ESettingSubcategory__ControlsController                                          = 4,
	ESettingSubcategory__Subtitles                                                   = 5,
	ESettingSubcategory__General                                                     = 6,
	ESettingSubcategory__Quests                                                      = 7,
	ESettingSubcategory__Movement                                                    = 8,
	ESettingSubcategory__Gameplay                                                    = 9,
	ESettingSubcategory__Menus                                                       = 10,
	ESettingSubcategory__ControlsMouseKeyboard                                       = 11,
	ESettingSubcategory__UI                                                          = 12,
	ESettingSubcategory__GameplayDisplay                                             = 13,
	ESettingSubcategory__HUD                                                         = 14,
	ESettingSubcategory__UIGeneral                                                   = 15,
	ESettingSubcategory__GraphicsEffects                                             = 16
};

/// Enum /Script/Indiana.ESetting
/// Size: 0x169
enum class ESetting : uint8_t
{
	ESetting__Invalid                                                                = 0,
	ESetting__Resolution                                                             = 1,
	ESetting__WindowMode                                                             = 2,
	ESetting__VerticalSync                                                           = 3,
	ESetting__ViewDistanceQuality                                                    = 4,
	ESetting__ShadowQuality                                                          = 5,
	ESetting__AAQuality                                                              = 6,
	ESetting__TextureQuality                                                         = 7,
	ESetting__VisualEffectQuality                                                    = 8,
	ESetting__PostProcessingQuality                                                  = 9,
	ESetting__FolliageQuality                                                        = 10,
	ESetting__MasterVolume                                                           = 11,
	ESetting__EffectsVolume                                                          = 12,
	ESetting__MusicVolume                                                            = 13,
	ESetting__UIVolume                                                               = 14,
	ESetting__InvertControllerY                                                      = 15,
	ESetting__ConversationSubtitleMode                                               = 16,
	ESetting__ConversationContinueOnVOEnd                                            = 17,
	ESetting__ConversationResponsesVisibleDuringVO                                   = 18,
	ESetting__QuestLogVisibleAllTimes                                                = 19,
	ESetting__MotionBlur                                                             = 20,
	ESetting__AAMethod                                                               = 21,
	ESetting__MouseSensitivity                                                       = 22,
	ESetting__VoiceVolume                                                            = 23,
	ESetting__ItemStatsRaw                                                           = 24,
	ESetting__GameDifficulty                                                         = 25,
	ESetting__RadialSensitivity                                                      = 26,
	ESetting__ControllerSensitivity                                                  = 27,
	ESetting__ShowTutorials                                                          = 28,
	ESetting__ShowFloatingDamageText                                                 = 29,
	ESetting__ShowPlayerHelmet                                                       = 30,
	ESetting__ShowCompanionHelmets                                                   = 31,
	ESetting__GeneralQuality                                                         = 32,
	ESetting__Gamma                                                                  = 33,
	ESetting__BarkSubtitleVisibility                                                 = 34,
	ESetting__CinematicSubtitleVisibility                                            = 35,
	ESetting__CompanionOutlineVisibility                                             = 36,
	ESetting__KeyBinds                                                               = 37,
	ESetting__GamePadLayout                                                          = 38,
	ESetting__StickLayout                                                            = 39,
	ESetting__MoveForward                                                            = 40,
	ESetting__MoveBackward                                                           = 41,
	ESetting__StrafeLeft                                                             = 42,
	ESetting__StrafeRight                                                            = 43,
	ESetting__LookUp                                                                 = 44,
	ESetting__LookDown                                                               = 45,
	ESetting__TurnLeft                                                               = 46,
	ESetting__TurnRight                                                              = 47,
	ESetting__Sprint                                                                 = 48,
	ESetting__Jump                                                                   = 49,
	ESetting__CrouchSneak                                                            = 50,
	ESetting__QuickSave                                                              = 51,
	ESetting__QuickLoad                                                              = 52,
	ESetting__UseInteract                                                            = 53,
	ESetting__WeaponOne                                                              = 54,
	ESetting__WeaponTwo                                                              = 55,
	ESetting__WeaponThree                                                            = 56,
	ESetting__WeaponFour                                                             = 57,
	ESetting__Inhaler                                                                = 58,
	ESetting__NextWeapon                                                             = 59,
	ESetting__PreviousWeapon                                                         = 60,
	ESetting__LastWeapon                                                             = 61,
	ESetting__PrimaryFire                                                            = 62,
	ESetting__AlernateFire                                                           = 63,
	ESetting__Overcharge                                                             = 64,
	ESetting__QuickMelee                                                             = 65,
	ESetting__Reload                                                                 = 66,
	ESetting__WeaponWheel                                                            = 67,
	ESetting__TimeDilation                                                           = 68,
	ESetting__CompanionMove                                                          = 69,
	ESetting__CompanionAttack                                                        = 70,
	ESetting__CompanionFollow                                                        = 71,
	ESetting__CompanionOneSpecialAbility                                             = 72,
	ESetting__CompanionTwoSpecialAbility                                             = 73,
	ESetting__Pause                                                                  = 74,
	ESetting__ViewInventory                                                          = 75,
	ESetting__ViewLedger                                                             = 76,
	ESetting__ViewCharacterMenu                                                      = 77,
	ESetting__ViewJournal                                                            = 78,
	ESetting__ViewMap                                                                = 79,
	ESetting__ViewRegionMap                                                          = 80,
	ESetting__ViewCompanionMenu                                                      = 81,
	ESetting__ViewPerks                                                              = 82,
	ESetting__ViewSkills                                                             = 83,
	ESetting__ViewCodex                                                              = 84,
	ESetting__ViewSummary                                                            = 85,
	ESetting__ViewDetails                                                            = 86,
	ESetting__ViewReputation                                                         = 87,
	ESetting__InvertMouseY                                                           = 88,
	ESetting__ControllerRumble                                                       = 89,
	ESetting__AutoCollapseInventory                                                  = 90,
	ESetting__GameplayGamma                                                          = 91,
	ESetting__Language                                                               = 92,
	ESetting__WeaponTooltipStatMode                                                  = 93,
	ESetting__HUDVisibility                                                          = 94,
	ESetting__HUDMode                                                                = 95,
	ESetting__CompassVisibility                                                      = 96,
	ESetting__ShowDialogSkill                                                        = 97,
	ESetting__TooltipDelay                                                           = 98,
	ESetting__NotificationDuration                                                   = 99,
	ESetting__InteractionOutlines                                                    = 100,
	ESetting__InteractionControls                                                    = 101,
	ESetting__WaypointMarkers                                                        = 102,
	ESetting__EnemyHealthBars                                                        = 103,
	ESetting__EnemyAwarenessMeters                                                   = 104,
	ESetting__AimingReticle                                                          = 105,
	ESetting__ReticleFeedback                                                        = 106,
	ESetting__QuestUpdates                                                           = 107,
	ESetting__PlayerStatusBars                                                       = 108,
	ESetting__PlayerStatusEffects                                                    = 109,
	ESetting__PlayerStatusEffectNames                                                = 110,
	ESetting__CompanionAbilityUI                                                     = 111,
	ESetting__CompanionAbilityBindings                                               = 112,
	ESetting__HeldWeaponDisplay                                                      = 113,
	ESetting__HeldWeaponDisplayText                                                  = 114,
	ESetting__AreaNames                                                              = 115,
	ESetting__DirectionalDamageIndicators                                            = 116,
	ESetting__FPSIndicator                                                           = 117,
	ESetting__SurvivalMeters                                                         = 118,
	ESetting__MedicalInhaler                                                         = 119,
	ESetting__AbilityControls                                                        = 120,
	ESetting__CompanionStatus                                                        = 121,
	ESetting__CompanionPassiveCooldowns                                              = 122,
	ESetting__CompanionPassiveCooldownNotification                                   = 123,
	ESetting__LevelUpNotifications                                                   = 124,
	ESetting__LevelUpReminders                                                       = 125,
	ESetting__CombatIndicator                                                        = 126,
	ESetting__TTDScanner                                                             = 127,
	ESetting__TTDReticleMeter                                                        = 128,
	ESetting__TTDStatusEffectPreview                                                 = 129,
	ESetting__DisguiseMeter                                                          = 130,
	ESetting__EquipmentRepairWarning                                                 = 131,
	ESetting__SimplifiedEquipmentRepairWarning                                       = 132,
	ESetting__WeaponSelect                                                           = 133,
	ESetting__WeaponSelectAxis                                                       = 134,
	ESetting__SimplifiedLockpickHacking                                              = 135,
	ESetting__LootTooltips                                                           = 136,
	ESetting__LootControls                                                           = 137,
	ESetting__ShowTutorialNotifications                                              = 138,
	ESetting__FPSLimit                                                               = 139,
	ESetting__Resolution3D                                                           = 140,
	ESetting__DetectGraphics                                                         = 141,
	ESetting__FieldOfView                                                            = 142,
	ESetting__TTDDisplayMode                                                         = 143,
	ESetting__DodgeDisplayMode                                                       = 144,
	ESetting__ControllerDeadZoneLeftInner                                            = 145,
	ESetting__ControllerDeadZoneLeftOuter                                            = 146,
	ESetting__ControllerDeadZoneRightInner                                           = 147,
	ESetting__ControllerDeadZoneRightOuter                                           = 148,
	ESetting__EnlargedFontSize                                                       = 149,
	ESetting__ColorblindMode                                                         = 150,
	ESetting__OffsetReticle                                                          = 151,
	ESetting__CinematicKillCam                                                       = 152,
	ESetting__ChromaticAberration                                                    = 153,
	ESetting__Headbobbing                                                            = 154,
	ESetting__MouseADSSensitivity                                                    = 155,
	ESetting__ControllerADSSensitivity                                               = 156,
	ESetting__FontSizeModifier                                                       = 157,
	ESetting__ControllerEnableAutoSprint                                             = 158,
	ESetting__AutoSprint                                                             = 159,
	ESetting__InvertMouseX                                                           = 160,
	ESetting__InvertControllerX                                                      = 161,
	ESetting__InterruptAudioLog                                                      = 162,
	ESetting__PerformanceMode                                                        = 163,
	ESetting__ControllerEnableImpulseTriggers                                        = 164,
	ESetting__ImpulseTriggerIntensity                                                = 165,
	ESetting__DynamicResolution                                                      = 166,
	ESetting__SSGI                                                                   = 167,
	ESetting__FSR2                                                                   = 168
};

/// Enum /Script/Indiana.ECategory
/// Size: 0x08
enum class ECategory : uint8_t
{
	ECategory__None                                                                  = 0,
	ECategory__Graphics                                                              = 1,
	ECategory__Audio                                                                 = 2,
	ECategory__Control                                                               = 3,
	ECategory__Gameplay                                                              = 4,
	ECategory__UI                                                                    = 5,
	ECategory__Debug                                                                 = 6,
	ECategory__Count                                                                 = 7
};

/// Enum /Script/Indiana.EShapeType
/// Size: 0x04
enum class EShapeType : uint8_t
{
	EShapeType__Unknown                                                              = 0,
	EShapeType__Box                                                                  = 1,
	EShapeType__Sphere                                                               = 2,
	EShapeType__Capsule                                                              = 3
};

/// Enum /Script/Indiana.ESpawnActorEventLocationSetting
/// Size: 0x02
enum class ESpawnActorEventLocationSetting : uint8_t
{
	ESpawnActorEventLocationSetting__MatchTargetActor                                = 0,
	ESpawnActorEventLocationSetting__ProjectToGround                                 = 1
};

/// Enum /Script/Indiana.ESpawnActorEventRotationSetting
/// Size: 0x02
enum class ESpawnActorEventRotationSetting : uint8_t
{
	ESpawnActorEventRotationSetting__DoNotRotate                                     = 0,
	ESpawnActorEventRotationSetting__MatchTargetActor                                = 1
};

/// Enum /Script/Indiana.ESpellApplicationResult
/// Size: 0x03
enum class ESpellApplicationResult : uint8_t
{
	ESpellApplicationResult__NotApplied                                              = 0,
	ESpellApplicationResult__OneShot                                                 = 1,
	ESpellApplicationResult__Persistent                                              = 2
};

/// Enum /Script/Indiana.EConeAxis
/// Size: 0x04
enum class EConeAxis : uint8_t
{
	EConeAxis__None                                                                  = 0,
	EConeAxis__X                                                                     = 1,
	EConeAxis__Y                                                                     = 2,
	EConeAxis__Z                                                                     = 3
};

/// Enum /Script/Indiana.ESpellEffectDirectionType
/// Size: 0x04
enum class ESpellEffectDirectionType : uint8_t
{
	ESpellEffectDirectionType__Default                                               = 0,
	ESpellEffectDirectionType__CasterToTarget                                        = 1,
	ESpellEffectDirectionType__CasterForward                                         = 2,
	ESpellEffectDirectionType__TargetForward                                         = 3
};

/// Enum /Script/Indiana.ESpellEffectTarget
/// Size: 0x14
enum class ESpellEffectTarget : uint8_t
{
	ESpellEffectTarget__Self                                                         = 0,
	ESpellEffectTarget__Player                                                       = 1,
	ESpellEffectTarget__Companions                                                   = 2,
	ESpellEffectTarget__Target                                                       = 3,
	ESpellEffectTarget__Party                                                        = 4,
	ESpellEffectTarget__AOE                                                          = 5,
	ESpellEffectTarget__Cone                                                         = 6,
	ESpellEffectTarget__RandomCompanion                                              = 7,
	ESpellEffectTarget__RandomCompanionOnCooldown                                    = 8,
	ESpellEffectTarget__OtherCompanion                                               = 9,
	ESpellEffectTarget__CharactersDetectingPlayer                                    = 10,
	ESpellEffectTarget__AOESingleChoice                                              = 11,
	ESpellEffectTarget__Count                                                        = 12,
	ESpellEffectTarget__Invalid                                                      = 13
};

/// Enum /Script/Indiana.ESpellCastResult
/// Size: 0x07
enum class ESpellCastResult : uint8_t
{
	ESpellCastResult__Success                                                        = 0,
	ESpellCastResult__AlreadyActive                                                  = 1,
	ESpellCastResult__InvalidTarget                                                  = 2,
	ESpellCastResult__OnCooldown                                                     = 3,
	ESpellCastResult__NotEnoughResources                                             = 4,
	ESpellCastResult__Count                                                          = 5,
	ESpellCastResult__Invalid                                                        = 6
};

/// Enum /Script/Indiana.EStackSplitStyle
/// Size: 0x11
enum class EStackSplitStyle : uint8_t
{
	EStackSplitStyle__Default                                                        = 0,
	EStackSplitStyle__CenterBG                                                       = 1,
	EStackSplitStyle__Center                                                         = 2,
	EStackSplitStyle__LeftBG                                                         = 3,
	EStackSplitStyle__Left                                                           = 4,
	EStackSplitStyle__TopBG                                                          = 5,
	EStackSplitStyle__Top                                                            = 6,
	EStackSplitStyle__RightBG                                                        = 7,
	EStackSplitStyle__Right                                                          = 8,
	EStackSplitStyle__BottomBG                                                       = 9,
	EStackSplitStyle__Bottom                                                         = 10
};

/// Enum /Script/Indiana.TestEnum
/// Size: 0x03
enum class TestEnum : uint8_t
{
	TestEnum__EnumValue0                                                             = 0,
	TestEnum__EnumValue1                                                             = 1,
	TestEnum__EnumValue2                                                             = 2
};

/// Enum /Script/Indiana.EAdjustmentDirection
/// Size: 0x03
enum class EAdjustmentDirection : uint8_t
{
	EAdjustmentDirection__Neutral                                                    = 0,
	EAdjustmentDirection__Positive                                                   = 1,
	EAdjustmentDirection__Negative                                                   = 2
};

/// Enum /Script/Indiana.ERpgStatGroupMask
/// Size: 0x04
enum class ERpgStatGroupMask : uint8_t
{
	ERpgStatGroupMask__None                                                          = 0,
	ERpgStatGroupMask__CharacterOnly                                                 = 1,
	ERpgStatGroupMask__WeaponOnly                                                    = 2,
	ERpgStatGroupMask__CharacterAndWeapon                                            = 3
};

/// Enum /Script/Indiana.ERpgStatGroup
/// Size: 0x04
enum class ERpgStatGroup : uint8_t
{
	ERpgStatGroup__Character                                                         = 0,
	ERpgStatGroup__Weapon                                                            = 1,
	ERpgStatGroup__Count                                                             = 2,
	ERpgStatGroup__Invalid                                                           = 255
};

/// Enum /Script/Indiana.EStatModifierType
/// Size: 0x03
enum class EStatModifierType : uint8_t
{
	EStatModifierType__PreAdd                                                        = 0,
	EStatModifierType__Multiplier                                                    = 1,
	EStatModifierType__PostAdd                                                       = 2
};

/// Enum /Script/Indiana.EStatusEffectApplicationType
/// Size: 0x04
enum class EStatusEffectApplicationType : uint8_t
{
	EStatusEffectApplicationType__ApplyOnStart                                       = 0,
	EStatusEffectApplicationType__ApplyOnTick                                        = 1,
	EStatusEffectApplicationType__ApplyOverTime                                      = 2,
	EStatusEffectApplicationType__ApplyAtEnd                                         = 3
};

/// Enum /Script/Indiana.EStatusEffectDurationType
/// Size: 0x06
enum class EStatusEffectDurationType : uint8_t
{
	EStatusEffectDurationType__UseDurationTime                                       = 0,
	EStatusEffectDurationType__Instant                                               = 1,
	EStatusEffectDurationType__Infinite                                              = 2,
	EStatusEffectDurationType__Parent                                                = 3,
	EStatusEffectDurationType__Formula                                               = 4,
	EStatusEffectDurationType__PassThroughValue                                      = 5
};

/// Enum /Script/Indiana.EStatusEffectInitialApplicationType
/// Size: 0x06
enum class EStatusEffectInitialApplicationType : uint8_t
{
	EStatusEffectInitialApplicationType__StackIfAlreadyApplied                       = 0,
	EStatusEffectInitialApplicationType__RemoveExistingIfAlreadyApplied              = 1,
	EStatusEffectInitialApplicationType__UseLongerDurationIfAlreadyApplied           = 2,
	EStatusEffectInitialApplicationType__AddDurationIfAlreadyApplied                 = 3,
	EStatusEffectInitialApplicationType__DontApplyIfAlreadyApplied                   = 4,
	EStatusEffectInitialApplicationType__StackSingleInstance                         = 5
};

/// Enum /Script/Indiana.EStatusEffectKeywordType
/// Size: 0x07
enum class EStatusEffectKeywordType : uint8_t
{
	EStatusEffectKeywordType__None                                                   = 0,
	EStatusEffectKeywordType__Acid                                                   = 1,
	EStatusEffectKeywordType__Bleed                                                  = 2,
	EStatusEffectKeywordType__Disease                                                = 3,
	EStatusEffectKeywordType__Fire                                                   = 4,
	EStatusEffectKeywordType__Ice                                                    = 5,
	EStatusEffectKeywordType__Poison                                                 = 6
};

/// Enum /Script/Indiana.EGuiText
/// Size: 0x1169
enum class EGuiText : uint16_t
{
	EGuiText____Invalid__                                                            = 0,
	EGuiText__No                                                                     = 1,
	EGuiText__Accept                                                                 = 2,
	EGuiText__Cancel                                                                 = 3,
	EGuiText__Continue                                                               = 4,
	EGuiText__EndDialogue                                                            = 6,
	EGuiText__Back                                                                   = 7,
	EGuiText__Quit                                                                   = 9,
	EGuiText__NewSaveFile                                                            = 17,
	EGuiText__LedgerNavigation_Inventory                                             = 18,
	EGuiText__Ledger_Tab_Journal                                                     = 19,
	EGuiText__LedgerNavigation_Map                                                   = 20,
	EGuiText__Male                                                                   = 22,
	EGuiText__Female                                                                 = 23,
	EGuiText__StatusEffect_Injure                                                    = 24,
	EGuiText__StatusEffect_Stagger                                                   = 25,
	EGuiText__StatusEffect_Knockback                                                 = 26,
	EGuiText__StatusEffect_Wind                                                      = 27,
	EGuiText__StatusEffect_Lame                                                      = 28,
	EGuiText__StatusEffect_Maim                                                      = 29,
	EGuiText__StatusEffect_Stun                                                      = 30,
	EGuiText__StatusEffect_Concuss                                                   = 31,
	EGuiText__StatusEffect_Knockdown                                                 = 32,
	EGuiText__StatusEffect_Blur                                                      = 33,
	EGuiText__StatusEffect_Disarm                                                    = 34,
	EGuiText__StatusEffect_Knockout                                                  = 35,
	EGuiText__On                                                                     = 36,
	EGuiText__Off                                                                    = 37,
	EGuiText__Revert                                                                 = 38,
	EGuiText__Yes                                                                    = 39,
	EGuiText__SoundMaster                                                            = 40,
	EGuiText__SoundEffects                                                           = 41,
	EGuiText__SoundMusic                                                             = 42,
	EGuiText__SoundUI                                                                = 43,
	EGuiText__SettingCategorySound                                                   = 44,
	EGuiText__SettingCategoryGeneral                                                 = 45,
	EGuiText__YAxisInverted                                                          = 46,
	EGuiText__Default                                                                = 47,
	EGuiText__Fullscreen                                                             = 48,
	EGuiText__ResponseLie                                                            = 49,
	EGuiText__ResponseIntimidate                                                     = 50,
	EGuiText__ResponsePersuade                                                       = 51,
	EGuiText__QuestAdded                                                             = 52,
	EGuiText__QuestUpdated                                                           = 53,
	EGuiText__QuestCompleted                                                         = 54,
	EGuiText__QuestFailed                                                            = 55,
	EGuiText__Door_BarredShut                                                        = 56,
	EGuiText__Door_InformLocked                                                      = 57,
	EGuiText__Door_InformPermanentlyLocked                                           = 58,
	EGuiText__Door_Unlocked                                                          = 61,
	EGuiText__KeyItem_Removed                                                        = 63,
	EGuiText__Menu_Resume                                                            = 64,
	EGuiText__Menu_Restart                                                           = 65,
	EGuiText__Menu_MainMenu                                                          = 66,
	EGuiText__Menu_Settings                                                          = 67,
	EGuiText__Settings_Debug                                                         = 68,
	EGuiText__Menu_Dead                                                              = 69,
	EGuiText__Menu_Levels                                                            = 70,
	EGuiText__Level_BeautifulCorner                                                  = 71,
	EGuiText__Level_Prototype                                                        = 72,
	EGuiText__Level_Dialog                                                           = 73,
	EGuiText__Level_Stealth                                                          = 74,
	EGuiText__Level_Combat                                                           = 75,
	EGuiText__Level_Movement                                                         = 76,
	EGuiText__Level_Back                                                             = 77,
	EGuiText__Settings_VSync                                                         = 78,
	EGuiText__Settings_General                                                       = 79,
	EGuiText__Container_BarredShut                                                   = 81,
	EGuiText__Level_Area                                                             = 82,
	EGuiText__Level_QuestTest                                                        = 83,
	EGuiText__Level_GameObjectsTest                                                  = 84,
	EGuiText__Button_Claim                                                           = 85,
	EGuiText__Button_Close                                                           = 86,
	EGuiText__Button_Unlock                                                          = 88,
	EGuiText__Button_Transfer                                                        = 89,
	EGuiText__Button_Claim_All                                                       = 90,
	EGuiText__Door_Guide_Open                                                        = 92,
	EGuiText__Door_Guide_Locked                                                      = 93,
	EGuiText__Door_Guide_Barred                                                      = 94,
	EGuiText__Guide_Unlock_With_Requirement                                          = 95,
	EGuiText__Switch_Guide_Use                                                       = 96,
	EGuiText__Ladder_Guide_Use                                                       = 97,
	EGuiText__Pickup_Guide_Use                                                       = 98,
	EGuiText__Elevator_Guide_Use                                                     = 99,
	EGuiText__Switch_Guide_Use_Travel                                                = 106,
	EGuiText__Build_Version                                                          = 107,
	EGuiText__Computer_Guide_Use                                                     = 108,
	EGuiText__Computer_Guide_Locked                                                  = 109,
	EGuiText__Computer_KeyItem_Removed                                               = 111,
	EGuiText__Computer_Unlocked_Key                                                  = 113,
	EGuiText__Computer_Locked                                                        = 114,
	EGuiText__Computer_InformLocked_Error                                            = 117,
	EGuiText__Computer_Difficulty_Easy                                               = 118,
	EGuiText__Computer_Difficulty_Medium                                             = 119,
	EGuiText__Computer_Difficulty_Difficult                                          = 120,
	EGuiText__Computer_Difficulty_Extreme                                            = 121,
	EGuiText__Button_Clear                                                           = 122,
	EGuiText__Talk                                                                   = 123,
	EGuiText__Available                                                              = 132,
	EGuiText__StatusEffect_Intimidate                                                = 133,
	EGuiText__StatusEffect_ReducedRange                                              = 134,
	EGuiText__StatusEffect_ReducedSight                                              = 135,
	EGuiText__StatusEffect_Disabled                                                  = 136,
	EGuiText__StatusEffect_ReducedDamage                                             = 137,
	EGuiText__StatusEffect_Slow                                                      = 138,
	EGuiText__Settings_Apply                                                         = 139,
	EGuiText__Settings_Back                                                          = 140,
	EGuiText__Settings_Graphics                                                      = 141,
	EGuiText__Settings_Audio                                                         = 142,
	EGuiText__Settings_Controls                                                      = 143,
	EGuiText__Settings_Game                                                          = 144,
	EGuiText__Settings_UI                                                            = 145,
	EGuiText__Settings_Subcat_Volume                                                 = 146,
	EGuiText__Settings_Fullscreen                                                    = 147,
	EGuiText__Settings_WindowedFullscreen                                            = 148,
	EGuiText__Settings_Windowed                                                      = 149,
	EGuiText__Settings_WindowMode                                                    = 150,
	EGuiText__Settings_Low                                                           = 151,
	EGuiText__Settings_Medium                                                        = 152,
	EGuiText__Settings_High                                                          = 153,
	EGuiText__Settings_VeryHigh                                                      = 154,
	EGuiText__Settings_ViewDistanceQuality                                           = 155,
	EGuiText__Settings_ShadowQuality                                                 = 156,
	EGuiText__Settings_AAQuality                                                     = 157,
	EGuiText__Settings_TextureQuality                                                = 158,
	EGuiText__Settings_PostProcessingQuality                                         = 159,
	EGuiText__Settings_FoliageQuality                                                = 160,
	EGuiText__Settings_HDR                                                           = 161,
	EGuiText__Settings_VisualEffectQuality                                           = 162,
	EGuiText__Settings_Subcat_Quality                                                = 163,
	EGuiText__Settings_Subcat_General                                                = 164,
	EGuiText__Settings_Resolution                                                    = 165,
	EGuiText__Settings_Subcat_Camera                                                 = 166,
	EGuiText__Settings_Reserved                                                      = 167,
	EGuiText__Settings_Subcat_Display                                                = 168,
	EGuiText__InputLabel_MoveSelection                                               = 169,
	EGuiText__InputLabel_Select                                                      = 170,
	EGuiText__InputLabel_Back                                                        = 171,
	EGuiText__InputLabel_PageLeft                                                    = 172,
	EGuiText__InputLabel_PageRight                                                   = 173,
	EGuiText__Settings_Defaults_Confirmation                                         = 176,
	EGuiText__Trap_Difficulty_Easy                                                   = 177,
	EGuiText__Trap_Difficulty_Medium                                                 = 178,
	EGuiText__Trap_Difficulty_Difficult                                              = 179,
	EGuiText__Trap_Difficulty_Extreme                                                = 180,
	EGuiText__Trap_Guide_Armed                                                       = 181,
	EGuiText__Trap_Guide_Disarmed                                                    = 182,
	EGuiText__Trap_Guide_Deactivated                                                 = 183,
	EGuiText__Conversation_PlayerName                                                = 185,
	EGuiText__Settings_On                                                            = 193,
	EGuiText__Settings_Off                                                           = 194,
	EGuiText__Conversation_Exit_Conversation                                         = 201,
	EGuiText__ContextMenu_Repair                                                     = 205,
	EGuiText__ContextMenu_Drop                                                       = 206,
	EGuiText__ContextMenu_Deconstruct                                                = 207,
	EGuiText__ContextMenu_Inspect                                                    = 208,
	EGuiText__ContextMenu_Unequip                                                    = 209,
	EGuiText__Input_Zero                                                             = 210,
	EGuiText__Input_One                                                              = 211,
	EGuiText__Input_Two                                                              = 212,
	EGuiText__Input_Three                                                            = 213,
	EGuiText__Input_Four                                                             = 214,
	EGuiText__Input_Five                                                             = 215,
	EGuiText__Input_Six                                                              = 216,
	EGuiText__Input_Seven                                                            = 217,
	EGuiText__Input_Eight                                                            = 218,
	EGuiText__Input_Nine                                                             = 219,
	EGuiText__StatusEffect_Burn                                                      = 220,
	EGuiText__StatusEffect_Bleed                                                     = 221,
	EGuiText__ContextMenu_MarkAsJunk                                                 = 222,
	EGuiText__ContextMenu_UnmarkAsJunk                                               = 223,
	EGuiText__LedgerNavigation_Quests                                                = 224,
	EGuiText__Ledger_Tab_Companion                                                   = 225,
	EGuiText__Inventory_ToggleComparison                                             = 226,
	EGuiText__Inventory_AddToJunk                                                    = 227,
	EGuiText__Inventory_Keep                                                         = 228,
	EGuiText__Inventory_Inspect                                                      = 229,
	EGuiText__CharacterTitleFighting                                                 = 232,
	EGuiText__CharacterTitleDialog                                                   = 233,
	EGuiText__CharacterTitleStealth                                                  = 234,
	EGuiText__CharacterTitleLeadership                                               = 235,
	EGuiText__CharacterNameFighting                                                  = 236,
	EGuiText__CharacterNameDialog                                                    = 237,
	EGuiText__CharacterNameStealth                                                   = 238,
	EGuiText__CharacterNameLeadership                                                = 239,
	EGuiText__CharacterBioFighting                                                   = 240,
	EGuiText__CharacterBioDialog                                                     = 241,
	EGuiText__CharacterBioStealth                                                    = 242,
	EGuiText__CharacterBioLeadership                                                 = 243,
	EGuiText__Item_Inspector                                                         = 244,
	EGuiText__WeaponStats_UnoccupiedMod                                              = 245,
	EGuiText__WeaponStat_Damage                                                      = 247,
	EGuiText__WeaponStat_Rof                                                         = 248,
	EGuiText__WeaponStat_MagSize                                                     = 249,
	EGuiText__WeaponStat_DPS                                                         = 250,
	EGuiText__WeaponStat_Accuracy                                                    = 251,
	EGuiText__WeaponStat_ReloadTime                                                  = 252,
	EGuiText__WeaponStat_Range                                                       = 253,
	EGuiText__WeaponStat_EquipTime                                                   = 254,
	EGuiText__WeaponStat_CritChanceBonus                                             = 255,
	EGuiText__WeaponStat_CritDamageBonus                                             = 256,
	EGuiText__WeaponStat_NoiseRange                                                  = 257,
	EGuiText__WeaponStat_Recoil                                                      = 258,
	EGuiText__WeaponStat_AimAccuracyBonus                                            = 259,
	EGuiText__WeaponStat_AimStaminaCost                                              = 260,
	EGuiText__WeaponStat_AmmoPerShot                                                 = 261,
	EGuiText__WeaponStat_PostArmorMultiplier                                         = 262,
	EGuiText__WeaponStat_OverchargeDurationBonus                                     = 263,
	EGuiText__WeaponStat_OverchargeTime                                              = 264,
	EGuiText__WeaponStat_AOESpreadRadius                                             = 265,
	EGuiText__Settings_ConversationSubtitle_Delayed                                  = 266,
	EGuiText__DT_Physical                                                            = 268,
	EGuiText__DT_Thermal                                                             = 269,
	EGuiText__DT_Energy                                                              = 270,
	EGuiText__DT_Shock                                                               = 271,
	EGuiText__DT_Corrosion                                                           = 272,
	EGuiText__DT_NRay                                                                = 273,
	EGuiText__WeaponStat_DamageType                                                  = 274,
	EGuiText__Unit_RoundsOverSeconds                                                 = 275,
	EGuiText__WeaponStat_MinMaxEffectiveRange                                        = 276,
	EGuiText__WeaponStat_EffectiveRange                                              = 277,
	EGuiText__Unit_Meters                                                            = 278,
	EGuiText__Unit_Percent                                                           = 279,
	EGuiText__Unit_Meters_Range                                                      = 280,
	EGuiText__Unit_Range                                                             = 281,
	EGuiText__WeaponStat_Ranged                                                      = 282,
	EGuiText__WeaponStat_Melee                                                       = 283,
	EGuiText__WeaponStat_Type                                                        = 284,
	EGuiText__WeaponStat_Class                                                       = 285,
	EGuiText__WeaponStat_SwayAngle                                                   = 291,
	EGuiText__WeaponStat_SpreadAngle                                                 = 292,
	EGuiText__Unit_PerSecond                                                         = 293,
	EGuiText__Unit_PercentPerSecond                                                  = 294,
	EGuiText__Unit_Degrees                                                           = 295,
	EGuiText__WeaponStat_AimSpreadReduction                                          = 296,
	EGuiText__WeaponStat_DPM                                                         = 297,
	EGuiText__ContextMenu_Use                                                        = 298,
	EGuiText__Unit_Seconds                                                           = 299,
	EGuiText__Health_Kit                                                             = 300,
	EGuiText__Quest_InProgress                                                       = 301,
	EGuiText__Quest_Completed                                                        = 302,
	EGuiText__Quest_Botched                                                          = 303,
	EGuiText__ContextMenu_Equip                                                      = 304,
	EGuiText__Quest_SetAsActive                                                      = 305,
	EGuiText__Quest_SortQuestType                                                    = 307,
	EGuiText__Quest_SortNewest                                                       = 308,
	EGuiText__Quest_SortOldest                                                       = 309,
	EGuiText__ResponseDumb                                                           = 314,
	EGuiText__ResponseScience                                                        = 315,
	EGuiText__Computer_Guide_Hack_Requirements                                       = 316,
	EGuiText__Door_Guide_Lockpick_Requirements                                       = 317,
	EGuiText__InteractionGuide_Lockpick_Hold                                         = 318,
	EGuiText__InteractionGuide_Hack_Hold                                             = 319,
	EGuiText__InteractionGuide_Disarm_Hold                                           = 320,
	EGuiText__Container_GenericName                                                  = 321,
	EGuiText__Door_Guide_Close                                                       = 328,
	EGuiText__InventoryCategory_Weapons                                              = 329,
	EGuiText__InventoryCategory_Armor                                                = 330,
	EGuiText__InventoryCategory_Consumables                                          = 331,
	EGuiText__InventoryCategory_Modifications                                        = 332,
	EGuiText__InventoryCategory_General                                              = 333,
	EGuiText__InventoryCategory_Quests                                               = 334,
	EGuiText__Settings_Ultra                                                         = 338,
	EGuiText__Guide_Unlock_With_Key                                                  = 342,
	EGuiText__Guide_Requires_Key                                                     = 343,
	EGuiText__Settings_MotionBlur                                                    = 344,
	EGuiText__Settings_None                                                          = 345,
	EGuiText__Settings_FXAA                                                          = 346,
	EGuiText__Settings_Temporal                                                      = 347,
	EGuiText__Settings_MSAA                                                          = 348,
	EGuiText__Settings_AAMethod                                                      = 349,
	EGuiText__Settings_MouseSensitivity                                              = 350,
	EGuiText__CharacterStats_Attributes                                              = 351,
	EGuiText__CharacterStats_Skills                                                  = 352,
	EGuiText__CharacterStats_Abilities                                               = 353,
	EGuiText__Skill_Desc_Block                                                       = 368,
	EGuiText__Skill_Desc_Determination                                               = 369,
	EGuiText__Skill_Desc_Dodge                                                       = 370,
	EGuiText__Skill_Desc_Hack                                                        = 371,
	EGuiText__Skill_Desc_HandGuns                                                    = 372,
	EGuiText__Skill_Desc_HeavyMelee                                                  = 373,
	EGuiText__Skill_Desc_HeavyWeapons                                                = 374,
	EGuiText__Skill_Desc_Inspiration                                                 = 375,
	EGuiText__Skill_Desc_Intimidate                                                  = 376,
	EGuiText__Skill_Desc_Lie                                                         = 377,
	EGuiText__Skill_Desc_LightMelee                                                  = 378,
	EGuiText__Skill_Desc_Lockpick                                                    = 379,
	EGuiText__Skill_Desc_LongGuns                                                    = 380,
	EGuiText__Skill_Desc_Medical                                                     = 381,
	EGuiText__Skill_Desc_Persuade                                                    = 382,
	EGuiText__Skill_Desc_Engineering                                                 = 383,
	EGuiText__Skill_Desc_Science                                                     = 384,
	EGuiText__Skill_Desc_Sneak                                                       = 385,
	EGuiText__LedgerNavigation_Character                                             = 386,
	EGuiText__GenericNotification_Quest                                              = 388,
	EGuiText__InteractionGuide_Lockpick_Impossible                                   = 389,
	EGuiText__InteractionGuide_Hack_Impossible                                       = 390,
	EGuiText__InteractionGuide_Trap_Impossible                                       = 391,
	EGuiText__InteractionGuide_Arm_Hold                                              = 392,
	EGuiText__PauseMenu_Dialog_ConfirmExit                                           = 393,
	EGuiText__PauseMenu_Dialog_ConfirmMainMenu                                       = 394,
	EGuiText__Location_EmeraldVale                                                   = 404,
	EGuiText__Door_Guide_Unbar                                                       = 405,
	EGuiText__CompanionCommand_Temp_Ability_One                                      = 406,
	EGuiText__CompanionCommand_Temp_Ability_Two                                      = 407,
	EGuiText__CompanionCommand_Temp_Ability_Three                                    = 408,
	EGuiText__CompanionCommand_Temp_Ability_Desc                                     = 409,
	EGuiText__CompanionCommand_MissingCompanion                                      = 410,
	EGuiText__CompanionCommand_Flank                                                 = 411,
	EGuiText__CompanionCommand_Attack                                                = 412,
	EGuiText__CompanionCommand_Suppress                                              = 413,
	EGuiText__Location_Monarch                                                       = 414,
	EGuiText__Location_Groundbreaker                                                 = 415,
	EGuiText__SaveLoad_ConfirmLoad                                                   = 418,
	EGuiText__SaveLoad_ConfirmSaveOverwrite                                          = 419,
	EGuiText__SaveLoad_LoadHeader                                                    = 420,
	EGuiText__SaveLoad_SaveHeader                                                    = 421,
	EGuiText__UseVendingMachine                                                      = 429,
	EGuiText__SaveLoad_ConfirmSaveDelete                                             = 432,
	EGuiText__SaveLoad_StandardSave                                                  = 433,
	EGuiText__SaveLoad_Quicksave                                                     = 434,
	EGuiText__SaveLoad_Autosave                                                      = 435,
	EGuiText__SaveLoad_PostgameSave                                                  = 436,
	EGuiText__Saveload_Playtime                                                      = 437,
	EGuiText__SaveLoad_SaveDate                                                      = 438,
	EGuiText__SaveLoad_SaveSubHeader                                                 = 439,
	EGuiText__SaveLoad__PlayerLevel                                                  = 442,
	EGuiText__SaveLoad_SaveTypeAndRegion                                             = 443,
	EGuiText__Computer_Guide_Unlock_Requirement                                      = 444,
	EGuiText__CharacterTab_Perks                                                     = 447,
	EGuiText__GenericNotification_SaveComplete                                       = 449,
	EGuiText__GenericNotification_SaveFailed                                         = 450,
	EGuiText__Skill_HandGuns                                                         = 451,
	EGuiText__Skill_LightMelee                                                       = 452,
	EGuiText__Skill_HeavyMelee                                                       = 453,
	EGuiText__Skill_LongGuns                                                         = 454,
	EGuiText__Skill_HeavyWeapons                                                     = 455,
	EGuiText__Skill_Dodge                                                            = 456,
	EGuiText__Skill_Block                                                            = 457,
	EGuiText__Skill_Persuade                                                         = 458,
	EGuiText__Skill_Lie                                                              = 459,
	EGuiText__Skill_Intimidate                                                       = 460,
	EGuiText__Skill_Sneak                                                            = 461,
	EGuiText__Skill_Hack                                                             = 462,
	EGuiText__Skill_Lockpick                                                         = 463,
	EGuiText__Skill_Medical                                                          = 464,
	EGuiText__Skill_Engineering                                                      = 465,
	EGuiText__Skill_Science                                                          = 466,
	EGuiText__Skill_Inspiration                                                      = 467,
	EGuiText__Skill_Determination                                                    = 468,
	EGuiText__Category_Melee                                                         = 469,
	EGuiText__Category_Ranged                                                        = 470,
	EGuiText__Category_Defense                                                       = 471,
	EGuiText__Category_Dialog                                                        = 472,
	EGuiText__Category_Stealth                                                       = 473,
	EGuiText__Category_Tech                                                          = 474,
	EGuiText__Category_Leadership                                                    = 475,
	EGuiText__CharacterStats_Attribute_Strength                                      = 526,
	EGuiText__CharacterStats_Attribute_Desc_Strength                                 = 527,
	EGuiText__CharacterStats_Attribute_Dexterity                                     = 528,
	EGuiText__CharacterStats_Attribute_Desc_Dexterity                                = 529,
	EGuiText__CharacterStats_Attribute_Endurance                                     = 530,
	EGuiText__CharacterStats_Attribute_Desc_Endurance                                = 531,
	EGuiText__CharacterStats_Attribute_Intelligence                                  = 532,
	EGuiText__CharacterStats_Attribute_Desc_Intelligence                             = 533,
	EGuiText__CharacterStats_Attribute_Perception                                    = 534,
	EGuiText__CharacterStats_Attribute_Desc_Perception                               = 535,
	EGuiText__CharacterStats_Attribute_Willpower                                     = 536,
	EGuiText__CharacterStats_Attribute_Charm                                         = 538,
	EGuiText__CharacterStats_Attribute_Desc_Charm                                    = 539,
	EGuiText__CharacterStats_Attribute_Wits                                          = 540,
	EGuiText__CharacterStats_Attribute_Temperament                                   = 542,
	EGuiText__CharacterStats_Attribute_Desc_Temperament                              = 543,
	EGuiText__Attribute_Category_Mind                                                = 544,
	EGuiText__Attribute_Category_Body                                                = 545,
	EGuiText__Attribute_Category_Personality                                         = 546,
	EGuiText__Attribute_Range_Minimum                                                = 547,
	EGuiText__Attribute_Range_BelowAverage                                           = 548,
	EGuiText__Attribute_Range_Average                                                = 549,
	EGuiText__Attribute_Range_Good                                                   = 550,
	EGuiText__Attribute_Range_High                                                   = 551,
	EGuiText__Attribute_Range_VeryHigh                                               = 552,
	EGuiText__Maximum                                                                = 553,
	EGuiText__WeaponStat_ProjectilesPerShot                                          = 557,
	EGuiText__WeaponStat_MaxChargeTime                                               = 558,
	EGuiText__CharacterStats_CategoryRefund_Warning                                  = 559,
	EGuiText__CharacterStats_SkillsPage_Leave_Warning                                = 560,
	EGuiText__InventoryCategory_Gadgets                                              = 562,
	EGuiText__WeaponStat_RoundsPerMin                                                = 563,
	EGuiText__ContextMenu_Compare                                                    = 566,
	EGuiText__ContextMenu_StopCompare                                                = 567,
	EGuiText__Unit_RoundsOverMinutes                                                 = 568,
	EGuiText__WeaponStat_Skill                                                       = 569,
	EGuiText__AmmoType_Handgun                                                       = 570,
	EGuiText__AmmoType_Rifle                                                         = 571,
	EGuiText__AmmoType_EnergyCell                                                    = 572,
	EGuiText__WeaponStat_AmmoType                                                    = 573,
	EGuiText__WeaponStat_SwingAttackRate                                             = 574,
	EGuiText__WeaponStat_PowerAttackRate                                             = 575,
	EGuiText__WeaponStat_SweepAttackRate                                             = 576,
	EGuiText__WeaponStat_FireMode                                                    = 577,
	EGuiText__FireMode_SemiAutomatic                                                 = 578,
	EGuiText__FireMode_Automatic                                                     = 579,
	EGuiText__FireMode_Burst                                                         = 580,
	EGuiText__FireMode_Charge                                                        = 581,
	EGuiText__WeaponStat_AOE                                                         = 582,
	EGuiText__ArmorStat_DT                                                           = 583,
	EGuiText__ArmorStat_DTP                                                          = 584,
	EGuiText__ArmorStat_DR                                                           = 585,
	EGuiText__ArmorStat_DRP                                                          = 586,
	EGuiText__ModSlot_MeleeGrip                                                      = 587,
	EGuiText__ModSlot_MeleeAttack                                                    = 588,
	EGuiText__ModSlot_Barrel                                                         = 589,
	EGuiText__ModSlot_Sight                                                          = 590,
	EGuiText__ModSlot_Magazine                                                       = 591,
	EGuiText__ModSlot_UnderBarrel                                                    = 592,
	EGuiText__Mod_DamageType                                                         = 593,
	EGuiText__Stat_Delta                                                             = 594,
	EGuiText__WeaponStat_SecondaryDamageType                                         = 595,
	EGuiText__ModAffix_Add                                                           = 598,
	EGuiText__Unit_AttacksOverSeconds                                                = 599,
	EGuiText__Location_Terra2                                                        = 600,
	EGuiText__CharacterStats_FinalAllocation_Confirmation                            = 601,
	EGuiText__WeaponStat_OnHitEffectChance                                           = 602,
	EGuiText__WeaponStat_OnHitEffect                                                 = 603,
	EGuiText__AmmoType_Needler                                                       = 604,
	EGuiText__WeaponStat_SkillRequirement                                            = 629,
	EGuiText__WeaponStat_DamageMultiProjectile                                       = 630,
	EGuiText__Unit_Count                                                             = 644,
	EGuiText__ItemStack_Count                                                        = 645,
	EGuiText__Body                                                                   = 646,
	EGuiText__Mind                                                                   = 647,
	EGuiText__Personality                                                            = 648,
	EGuiText__CharacterCreation_AtttributeGroupDesc_Body                             = 649,
	EGuiText__CharacterCreation_AtttributeGroupDesc_Mind                             = 650,
	EGuiText__CharacterCreation_AtttributeGroupDesc_Personality                      = 651,
	EGuiText__CharacterCreation_SkillsRemaining                                      = 652,
	EGuiText__RawItemStats                                                           = 654,
	EGuiText__Background01                                                           = 661,
	EGuiText__Background02                                                           = 662,
	EGuiText__Background03                                                           = 663,
	EGuiText__Background04                                                           = 664,
	EGuiText__Background05                                                           = 665,
	EGuiText__Background_Desc_Background01                                           = 666,
	EGuiText__Background_Desc_Background02                                           = 667,
	EGuiText__Background_Desc_Background03                                           = 668,
	EGuiText__Background_Desc_Background04                                           = 669,
	EGuiText__Background_Desc_Background05                                           = 670,
	EGuiText__UseWorkbench                                                           = 671,
	EGuiText__NoBackground                                                           = 672,
	EGuiText__CharacterCreation_FinalizationConfirmation                             = 673,
	EGuiText__Background_Desc_NoBackground                                           = 674,
	EGuiText__ContextMenu_Mod                                                        = 677,
	EGuiText__ContextMenu_InstallMod                                                 = 681,
	EGuiText__AttributeBonus_Strength_Maximum                                        = 686,
	EGuiText__AttributeBonus_Strength_VeryHigh                                       = 687,
	EGuiText__AttributeBonus_Strength_High                                           = 688,
	EGuiText__AttributeBonus_Strength_Good                                           = 689,
	EGuiText__AttributeBonus_Strength_Average                                        = 690,
	EGuiText__AttributeBonus_Strength_BelowAverage                                   = 691,
	EGuiText__AttributeBonus_Strength_Minimum                                        = 692,
	EGuiText__AttributeBonus_Dexterity_Maximum                                       = 693,
	EGuiText__AttributeBonus_Dexterity_VeryHigh                                      = 694,
	EGuiText__AttributeBonus_Dexterity_High                                          = 695,
	EGuiText__AttributeBonus_Dexterity_Good                                          = 696,
	EGuiText__AttributeBonus_Dexterity_Average                                       = 697,
	EGuiText__AttributeBonus_Dexterity_BelowAverage                                  = 698,
	EGuiText__AttributeBonus_Dexterity_Minimum                                       = 699,
	EGuiText__AttributeBonus_Endurance_Maximum                                       = 700,
	EGuiText__AttributeBonus_Endurance_VeryHigh                                      = 701,
	EGuiText__AttributeBonus_Endurance_High                                          = 702,
	EGuiText__AttributeBonus_Endurance_Good                                          = 703,
	EGuiText__AttributeBonus_Endurance_Average                                       = 704,
	EGuiText__AttributeBonus_Endurance_BelowAverage                                  = 705,
	EGuiText__AttributeBonus_Endurance_Minimum                                       = 706,
	EGuiText__AttributeBonus_Intelligence_Maximum                                    = 707,
	EGuiText__AttributeBonus_Intelligence_VeryHigh                                   = 708,
	EGuiText__AttributeBonus_Intelligence_High                                       = 709,
	EGuiText__AttributeBonus_Intelligence_Good                                       = 710,
	EGuiText__AttributeBonus_Intelligence_Average                                    = 711,
	EGuiText__AttributeBonus_Intelligence_BelowAverage                               = 712,
	EGuiText__AttributeBonus_Intelligence_Minimum                                    = 713,
	EGuiText__AttributeBonus_Perception_Maximum                                      = 714,
	EGuiText__AttributeBonus_Perception_VeryHigh                                     = 715,
	EGuiText__AttributeBonus_Perception_High                                         = 716,
	EGuiText__AttributeBonus_Perception_Good                                         = 717,
	EGuiText__AttributeBonus_Perception_Average                                      = 718,
	EGuiText__AttributeBonus_Perception_BelowAverage                                 = 719,
	EGuiText__AttributeBonus_Perception_Minimum                                      = 720,
	EGuiText__AttributeBonus_Willpower_Maximum                                       = 721,
	EGuiText__AttributeBonus_Charm_Maximum                                           = 728,
	EGuiText__AttributeBonus_Charm_VeryHigh                                          = 729,
	EGuiText__AttributeBonus_Charm_High                                              = 730,
	EGuiText__AttributeBonus_Charm_Good                                              = 731,
	EGuiText__AttributeBonus_Charm_Average                                           = 732,
	EGuiText__AttributeBonus_Charm_BelowAverage                                      = 733,
	EGuiText__AttributeBonus_Charm_Minimum                                           = 734,
	EGuiText__AttributeBonus_Wits_Maximum                                            = 735,
	EGuiText__AttributeBonus_Temperament_Maximum                                     = 742,
	EGuiText__AttributeBonus_Temperament_VeryHigh                                    = 743,
	EGuiText__AttributeBonus_Temperament_High                                        = 744,
	EGuiText__AttributeBonus_Temperament_Good                                        = 745,
	EGuiText__AttributeBonus_Temperament_Average                                     = 746,
	EGuiText__AttributeBonus_Temperament_BelowAverage                                = 747,
	EGuiText__AttributeBonus_Temperament_Minimum                                     = 748,
	EGuiText__Modifications_InstallConfirmation                                      = 750,
	EGuiText__Breakdown_Confirmation                                                 = 751,
	EGuiText__Repair_Confirm                                                         = 753,
	EGuiText__CharacterCreation_ReturnToMenu                                         = 785,
	EGuiText__AttributeBonus_Strength_Advanced                                       = 787,
	EGuiText__AttributeBonus_Dexterity_Advanced                                      = 788,
	EGuiText__AttributeBonus_Endurance_Advanced                                      = 789,
	EGuiText__AttributeBonus_Intelligence_Advanced                                   = 790,
	EGuiText__AttributeBonus_Perception_Advanced                                     = 791,
	EGuiText__AttributeBonus_Willpower_Advanced                                      = 792,
	EGuiText__AttributeBonus_Charm_Advanced                                          = 793,
	EGuiText__AttributeBonus_Wits_Advanced                                           = 794,
	EGuiText__AttributeBonus_Temperament_Advanced                                    = 795,
	EGuiText__X_Of_Y                                                                 = 819,
	EGuiText__Perks_PerksRemaining                                                   = 823,
	EGuiText__ArmorStat_DamageThreshold                                              = 824,
	EGuiText__ArmorStat_DamageThresholdPercentage                                    = 825,
	EGuiText__ArmorModSlot_Armoring                                                  = 827,
	EGuiText__ArmorModSlot_Dampening                                                 = 828,
	EGuiText__ArmorModSlot_Resistance                                                = 829,
	EGuiText__ArmorModSlot_Utility                                                   = 830,
	EGuiText__Dialog_Dumb                                                            = 889,
	EGuiText__Dialog_Prefix                                                          = 890,
	EGuiText__Requirements_Header                                                    = 891,
	EGuiText__Perk_Purchase_Requirements                                             = 892,
	EGuiText__Perk_Requirement_Skill                                                 = 893,
	EGuiText__CharacterStats_PerkUpgrade                                             = 899,
	EGuiText__Category_Desc_Ranged                                                   = 955,
	EGuiText__Category_Desc_Defense                                                  = 956,
	EGuiText__Category_Desc_Dialog                                                   = 957,
	EGuiText__Category_Desc_Stealth                                                  = 958,
	EGuiText__Category_Desc_Tech                                                     = 959,
	EGuiText__Category_Desc_Leadership                                               = 960,
	EGuiText__AttributeBonus_Strength_BAEffect                                       = 961,
	EGuiText__AttributeBonus_Dexterity_BAEffect                                      = 962,
	EGuiText__AttributeBonus_Endurance_BAEffect                                      = 963,
	EGuiText__AttributeBonus_Intelligence_BAEffect                                   = 964,
	EGuiText__AttributeBonus_Perception_BAEffect                                     = 965,
	EGuiText__AttributeBonus_Willpower_BAEffect                                      = 966,
	EGuiText__AttributeBonus_Charm_BAEffect                                          = 967,
	EGuiText__AttributeBonus_Wits_BAEffect                                           = 968,
	EGuiText__AttributeBonus_Temperament_BAEffect                                    = 969,
	EGuiText__FactionResponse_KOS                                                    = 1001,
	EGuiText__FactionResponse_Friendly                                               = 1002,
	EGuiText__FactionResponse_Neutral                                                = 1003,
	EGuiText__FactionResponse_VendorPriceIncrease                                    = 1004,
	EGuiText__FactionResponse_VendorPriceDecrease                                    = 1005,
	EGuiText__AmmoType_Light                                                         = 1028,
	EGuiText__AmmoType_Heavy                                                         = 1029,
	EGuiText__AmmoType_Energy                                                        = 1030,
	EGuiText__UseVendor                                                              = 1032,
	EGuiText__ContextMenu_Buy                                                        = 1038,
	EGuiText__ContextMenu_Pawn                                                       = 1039,
	EGuiText__ContextMenu_ClearBuy                                                   = 1041,
	EGuiText__ContextMenu_ClearPawn                                                  = 1042,
	EGuiText__Trade                                                                  = 1043,
	EGuiText__Vendor_TotalToPay                                                      = 1044,
	EGuiText__Vendor_TotalToEarn                                                     = 1045,
	EGuiText__Vendor_TotalEven                                                       = 1046,
	EGuiText__Vendor_VendorLacksCurrency                                             = 1047,
	EGuiText__Vendor_BuyerLacksCurrency                                              = 1048,
	EGuiText__Vendor_BuyerHasCurrency                                                = 1049,
	EGuiText__LedgerMap_AcceptFastTravel                                             = 1056,
	EGuiText__LedgerMap_FastTravel                                                   = 1062,
	EGuiText__WalkSpeed                                                              = 1072,
	EGuiText__CrouchSpeed                                                            = 1073,
	EGuiText__SprintSpeed                                                            = 1074,
	EGuiText__Unit_MetersOverSeconds                                                 = 1076,
	EGuiText__Unit_Ratio                                                             = 1077,
	EGuiText__Unit_HealthOverSeconds                                                 = 1079,
	EGuiText__Generic_Guide_Locked                                                   = 1090,
	EGuiText__Generic_Guide_Travel                                                   = 1091,
	EGuiText__OCL_Guide_Sealed                                                       = 1097,
	EGuiText__ContextMenu_Unload                                                     = 1139,
	EGuiText__GameDifficulty                                                         = 1143,
	EGuiText__GameDifficulty_Story                                                   = 1144,
	EGuiText__GameDifficulty_Normal                                                  = 1145,
	EGuiText__GameDifficulty_Hard                                                    = 1146,
	EGuiText__GameDifficulty_SuperNova                                               = 1147,
	EGuiText__Difficulty_Desc_Story                                                  = 1162,
	EGuiText__Difficulty_Desc_Normal                                                 = 1163,
	EGuiText__Difficulty_Desc_Hard                                                   = 1164,
	EGuiText__Difficulty_Desc_SuperNova                                              = 1165,
	EGuiText__ArmorPartsRequired                                                     = 1329,
	EGuiText__WeaponPartsRequired                                                    = 1330,
	EGuiText__ItemBreakdown_ArmorParts                                               = 1331,
	EGuiText__ItemBreakdown_WeaponParts                                              = 1332,
	EGuiText__Heal_Percent_Over_Time                                                 = 1441,
	EGuiText__RestrictedStock                                                        = 1442,
	EGuiText__RestrictedStockLocked                                                  = 1443,
	EGuiText__Skill_Category_Weapon_Melee                                            = 1449,
	EGuiText__Skill_Category_Weapon_Ranged                                           = 1450,
	EGuiText__Skill_Category_Defense                                                 = 1451,
	EGuiText__Skill_Category_Dialog                                                  = 1452,
	EGuiText__Skill_Category_Stealth                                                 = 1453,
	EGuiText__Skill_Category_Tech                                                    = 1454,
	EGuiText__Skill_Category_Leadership                                              = 1455,
	EGuiText__Skill_Unlock_Header                                                    = 1456,
	EGuiText__Stat_WalkSpeed                                                         = 1457,
	EGuiText__Skill_Tier1_Format                                                     = 1458,
	EGuiText__Skill_Tier2_Format                                                     = 1459,
	EGuiText__Skill_Tier3_Format                                                     = 1460,
	EGuiText__Weapon_OnCritHit                                                       = 1469,
	EGuiText__QuestLog_NoActiveQuest                                                 = 1470,
	EGuiText__ContextMenu_Swap                                                       = 1472,
	EGuiText__Location_Hephaestus                                                    = 1475,
	EGuiText__Location_Scylla                                                        = 1476,
	EGuiText__AbilityUnlock_WeakSpotHandguns                                         = 1511,
	EGuiText__AbilityUnlock_TTDSpellsHandguns                                        = 1514,
	EGuiText__AbilityUnlock_PowerAttackHeavyMelee                                    = 1531,
	EGuiText__AbilityUnlock_WeakSpotHeavyMelee                                       = 1533,
	EGuiText__AbilityUnlock_MeleeUnblockable                                         = 1535,
	EGuiText__AbilityUnlock_WeakSpotHeavyWeapons                                     = 1540,
	EGuiText__AbilityUnlock_TTDSpellsHeavyWeapons                                    = 1542,
	EGuiText__AbilityUnlock_CompanionAbilities                                       = 1548,
	EGuiText__AbilityUnlock_WeakSpotLongGuns                                         = 1573,
	EGuiText__AbilityUnlock_TTDSpellsLongGuns                                        = 1575,
	EGuiText__AbilityUnlock_PowerAttackLightMelee                                    = 1582,
	EGuiText__AbilityUnlock_WeakSpotLightMelee                                       = 1584,
	EGuiText__AbilityUnlock_MeleeReach                                               = 1586,
	EGuiText__WeaponStat_AmmoPerSecond                                               = 1605,
	EGuiText__Dialog_Bribe                                                           = 1606,
	EGuiText__UseBed                                                                 = 1611,
	EGuiText__Positive_Reputation_Gained                                             = 1616,
	EGuiText__Positive_Reputation_Lost                                               = 1617,
	EGuiText__Negative_Reputation_Gained                                             = 1620,
	EGuiText__Negative_Reputation_Lost                                               = 1621,
	EGuiText__Faction_Reputation_Changed                                             = 1623,
	EGuiText__Companion_Gained_Morale                                                = 1624,
	EGuiText__Companion_Lost_Morale                                                  = 1625,
	EGuiText__Companion_Joined                                                       = 1627,
	EGuiText__Companion_Left                                                         = 1628,
	EGuiText__XP_Enemy_Killed                                                        = 1631,
	EGuiText__XP_Point_of_Interest                                                   = 1632,
	EGuiText__XP_Skill_Used                                                          = 1633,
	EGuiText__XP_Collectible_Found                                                   = 1634,
	EGuiText__XP_Generic                                                             = 1635,
	EGuiText__Item_Gained                                                            = 1647,
	EGuiText__Item_Lost                                                              = 1648,
	EGuiText__PerkSurcharges_Percent                                                 = 1765,
	EGuiText__PerkBuyingPrice_Percent                                                = 1766,
	EGuiText__Duration_S                                                             = 1801,
	EGuiText__Duration_M_S                                                           = 1802,
	EGuiText__Duration_M                                                             = 1803,
	EGuiText__Duration_H                                                             = 1804,
	EGuiText__Duration_H_M                                                           = 1805,
	EGuiText__DT_All                                                                 = 1811,
	EGuiText__AbilityUnlock_Dodge                                                    = 1813,
	EGuiText__AbilityUnlock_Block                                                    = 1816,
	EGuiText__AbilityUnlock_Pickpocket                                               = 1819,
	EGuiText__AbilityUnlock_HackRobots                                               = 1820,
	EGuiText__AbilityUnlock_Medkit1                                                  = 1821,
	EGuiText__AbilityUnlock_Medkit2                                                  = 1822,
	EGuiText__AbilityUnlock_Medkit3                                                  = 1823,
	EGuiText__DT_Abbreviation                                                        = 1829,
	EGuiText__Rank_X_Colon                                                           = 1834,
	EGuiText__Heal_Over_Duration                                                     = 1837,
	EGuiText__Distance_Meters                                                        = 1843,
	EGuiText__UI_Cooldown                                                            = 1844,
	EGuiText__UI_Create_Item_Format                                                  = 1854,
	EGuiText__Location_Roseway                                                       = 1903,
	EGuiText__UI_Passive_Bonuses                                                     = 1907,
	EGuiText__RestrictedArea                                                         = 1966,
	EGuiText__FastTravel_InCombat                                                    = 1972,
	EGuiText__FastTravel_InConversation                                              = 1973,
	EGuiText__FastTravel_Hazard                                                      = 1974,
	EGuiText__FastTravel_Encumbered                                                  = 1975,
	EGuiText__FastTravel_Interior                                                    = 1976,
	EGuiText__FastTravel_Crime                                                       = 1977,
	EGuiText__FastTravel_General                                                     = 1978,
	EGuiText__FastTravel_NearHostiles                                                = 1979,
	EGuiText__NotAllowedInCombat                                                     = 1988,
	EGuiText__FastTravelLocationDiscovered                                           = 1989,
	EGuiText__Bribe_Prefix                                                           = 1993,
	EGuiText__Companion_Unlocked                                                     = 1994,
	EGuiText__Skills_Level_X                                                         = 2012,
	EGuiText__UseChair                                                               = 2031,
	EGuiText__SystemMap_SelectDestination                                            = 2073,
	EGuiText__SystemMap_TravelTo_X                                                   = 2074,
	EGuiText__CharacterCreation_NameEntry                                            = 2075,
	EGuiText__Location_Tartarus                                                      = 2085,
	EGuiText__Companion_Follow_Close                                                 = 2093,
	EGuiText__Companion_Follow_Medium                                                = 2094,
	EGuiText__Companion_Follow_Far                                                   = 2095,
	EGuiText__Companion_WeaponPref_Melee                                             = 2096,
	EGuiText__Companion_WeaponPref_Mixed                                             = 2097,
	EGuiText__Companion_WeaponPref_Ranged                                            = 2098,
	EGuiText__Companion_Combat_Defensive                                             = 2099,
	EGuiText__Companion_Combat_Offensive                                             = 2100,
	EGuiText__CharacterCreation_NamePrompt                                           = 2101,
	EGuiText__SurvivalMode_Desc                                                      = 2110,
	EGuiText__Input_X_Hold                                                           = 2145,
	EGuiText__Hold                                                                   = 2146,
	EGuiText__AbilityUnlock_Acrophobia                                               = 2148,
	EGuiText__ShipTerminal                                                           = 2151,
	EGuiText__Companion_Combat_Passive                                               = 2152,
	EGuiText__Companion_PerksPage_Revert_Warning                                     = 2153,
	EGuiText__FastTravel_Exhausted                                                   = 2157,
	EGuiText__FastTravel_Starving                                                    = 2158,
	EGuiText__FastTravel_Dehydrated                                                  = 2159,
	EGuiText__FastTravel_ShipRestrict                                                = 2160,
	EGuiText__ItemCondition                                                          = 2173,
	EGuiText__ItemStats_AmmoTypeEmbedded                                             = 2174,
	EGuiText__ArmorType_Heavy                                                        = 2176,
	EGuiText__ArmorType_Medium                                                       = 2177,
	EGuiText__ArmorType_Light                                                        = 2178,
	EGuiText__ArmorType_Header                                                       = 2179,
	EGuiText__StatBonus_SkillBonus                                                   = 2180,
	EGuiText__SpacersChoice_Flaw                                                     = 2181,
	EGuiText__Reward_Perk_Point                                                      = 2182,
	EGuiText__Name_Exclamation                                                       = 2183,
	EGuiText__CharacterTab_Skills                                                    = 2190,
	EGuiText__Ledger_Level_Up_Offer                                                  = 2192,
	EGuiText__Flaw_Effects                                                           = 2193,
	EGuiText__Skill_Tier4_Format                                                     = 2200,
	EGuiText__Skill_Tier5_Format                                                     = 2201,
	EGuiText__AbilityUnlock_SneakAttack                                              = 2215,
	EGuiText__AbilityUnlock_LockpickPreview                                          = 2217,
	EGuiText__Item_Salvaged_With_Count                                               = 2220,
	EGuiText__Item_Salvaged                                                          = 2221,
	EGuiText__AbilityUnlock_SellToMachine                                            = 2225,
	EGuiText__AbilityUnlock_FieldRepair                                              = 2237,
	EGuiText__Optional_Item_Name_X                                                   = 2244,
	EGuiText__Value_X_Seconds                                                        = 2245,
	EGuiText__AbilityUnlock_Leap                                                     = 2249,
	EGuiText__SaveLoad_SaveUnavailable                                               = 2254,
	EGuiText__AbilityUnlock_TTDSpellsLightMelee                                      = 2262,
	EGuiText__AbilityUnlock_TTDSpellsHeavyMelee                                      = 2263,
	EGuiText__AbilityUnlock_FastTravelWhileEncumbered                                = 2266,
	EGuiText__PerkAdditionalAmmoStock_Percent                                        = 2280,
	EGuiText__PerkAdditionalConsumableStock_Percent                                  = 2281,
	EGuiText__Perk_Tier_Header                                                       = 2283,
	EGuiText__Prompt_Steal_Item                                                      = 2284,
	EGuiText__Category_Desc_Melee                                                    = 2314,
	EGuiText__SaveLoad_XboxActiveUserSignedOutInGame                                 = 2348,
	EGuiText__SaveLoad_XboxActiveUserSignedOutTitle                                  = 2349,
	EGuiText__SaveLoad_XboxActiveUserSignedOutMainMenu                               = 2353,
	EGuiText__AbilityUnlock_Tinkering                                                = 2354,
	EGuiText__FlavorAptitude                                                         = 2356,
	EGuiText__FlavorCharacterGeneric                                                 = 2360,
	EGuiText__FlavorCharacterLevelUp                                                 = 2361,
	EGuiText__FlavorSkills                                                           = 2362,
	EGuiText__FlavorPerks                                                            = 2363,
	EGuiText__FlavorCharacterDetails                                                 = 2364,
	EGuiText__FlavorCharacterReputation                                              = 2365,
	EGuiText__FlavorInventoryGeneric                                                 = 2366,
	EGuiText__FlavorInventoryBucket                                                  = 2367,
	EGuiText__FlavorQuestsGeneric                                                    = 2368,
	EGuiText__FlavorMapGeneric                                                       = 2369,
	EGuiText__FlavorCompanionsGeneric                                                = 2370,
	EGuiText__FlavorCompanionsInventoryHover                                         = 2371,
	EGuiText__FlavorCompanionsStatsHover                                             = 2372,
	EGuiText__FlavorCompanionsBehaviorHover                                          = 2373,
	EGuiText__FlavorCompanionPerksHover                                              = 2374,
	EGuiText__FlavorWorkbenchGeneric                                                 = 2375,
	EGuiText__FlavorWorkbenchRepairHover                                             = 2376,
	EGuiText__FlavorWorkbenchBreakdownHover                                          = 2377,
	EGuiText__FlavorWorkbenchJunkHover                                               = 2378,
	EGuiText__FlavorWorkbenchModGeneric                                              = 2379,
	EGuiText__FlavorWorkbenchBreakdownHover765                                       = 2380,
	EGuiText__FlavorCCAttributes                                                     = 2381,
	EGuiText__FlavorCCAppearance                                                     = 2382,
	EGuiText__FlavorCCName                                                           = 2383,
	EGuiText__FlavorCCReview                                                         = 2384,
	EGuiText__FlavorPartySelection                                                   = 2385,
	EGuiText__FlavorCCAtrributesMajor                                                = 2386,
	EGuiText__FlavorCCAttributesMinor                                                = 2387,
	EGuiText__FlavorCCSkills                                                         = 2388,
	EGuiText__FlavorInventoryCategoryWeapons                                         = 2396,
	EGuiText__FlavorInventoryCategoryArmor                                           = 2397,
	EGuiText__FlavorInventoryCategoryConsumables                                     = 2398,
	EGuiText__FlavorInventoryCategoryModifications                                   = 2399,
	EGuiText__FlavorInventoryCategoryGeneral                                         = 2400,
	EGuiText__FlavorInventoryCategoryQuests                                          = 2401,
	EGuiText__FlavorCompanionsPerksGeneric                                           = 2404,
	EGuiText__FlavorCompanionsPerksAvailable                                         = 2405,
	EGuiText__FlavorCompanionsInventoryRanged                                        = 2406,
	EGuiText__FlavorCompanionsInventoryMelee                                         = 2407,
	EGuiText__FlavorCompanionsInventoryHelmet                                        = 2408,
	EGuiText__FlavorCompanionsInventoryArmor                                         = 2409,
	EGuiText__FlavorWorkbenchBreakDownGeneric                                        = 2419,
	EGuiText__FlavorWorkbenchRepairGeneric                                           = 2420,
	EGuiText__Archive                                                                = 2434,
	EGuiText__CharacterStats_Respec                                                  = 2455,
	EGuiText__CharacterStats_Respec_Dialog1                                          = 2456,
	EGuiText__CharacterStats_Respec_Dialog2                                          = 2457,
	EGuiText__QualityLevel                                                           = 2460,
	EGuiText__Settings_Custom                                                        = 2461,
	EGuiText__SavingWidget_Saving                                                    = 2483,
	EGuiText__X_Number_Uses                                                          = 2485,
	EGuiText__Disguise_RequiresKey                                                   = 2489,
	EGuiText__Disguise_Failed                                                        = 2490,
	EGuiText__Disguise_DialogueDifficulty                                            = 2491,
	EGuiText__X_Number                                                               = 2492,
	EGuiText__Companion_WeaponPref_LongRange                                         = 2493,
	EGuiText__Companion_WeaponPref_CloseRange                                        = 2494,
	EGuiText__Scanner_EnemyLevel                                                     = 2501,
	EGuiText__X_Percent_Discount                                                     = 2506,
	EGuiText__X_Percent_Surcharge                                                    = 2508,
	EGuiText__Workbench_TinkerItem                                                   = 2509,
	EGuiText__Workbench_TinkerWeaponBase                                             = 2510,
	EGuiText__Workbench_TinkerArmorBase                                              = 2511,
	EGuiText__ItemModding_ItemNameDesc                                               = 2522,
	EGuiText__RepairAllEquipped_X_Bits                                               = 2523,
	EGuiText__RepairAllEquipped_X_WeaponParts                                        = 2524,
	EGuiText__RepairAllEquipped_X_ArmorParts                                         = 2525,
	EGuiText__Quest_SortLocation                                                     = 2530,
	EGuiText__Quest_SortDifficulty                                                   = 2531,
	EGuiText__Quest_SortAlphabetical                                                 = 2533,
	EGuiText__Inventory_StackSplitDrop                                               = 2534,
	EGuiText__Inventory_StackSplitJunk                                               = 2535,
	EGuiText__Inventory_StackSplitUnjunk                                             = 2536,
	EGuiText__QuestType_Main                                                         = 2537,
	EGuiText__QuestType_Side                                                         = 2538,
	EGuiText__QuestType_Faction                                                      = 2539,
	EGuiText__QuestType_Companion                                                    = 2540,
	EGuiText__QuestType_Task                                                         = 2541,
	EGuiText__Location_Space                                                         = 2542,
	EGuiText__QuestDifficulty_Easy                                                   = 2543,
	EGuiText__QuestDifficulty_Normal                                                 = 2544,
	EGuiText__QuestDifficulty_Hard                                                   = 2545,
	EGuiText__QuestDifficulty_Deadly                                                 = 2546,
	EGuiText__Sell_X                                                                 = 2547,
	EGuiText__Buy_X                                                                  = 2548,
	EGuiText__Clear_Cart                                                             = 2550,
	EGuiText__SaveLoad_LoadSubHeader                                                 = 2551,
	EGuiText__SaveLoad_SaveFlavorText                                                = 2552,
	EGuiText__SaveLoad_LoadFlavorText                                                = 2553,
	EGuiText__VendorStackSplitBuy                                                    = 2566,
	EGuiText__VendorStackSplitUnbuy                                                  = 2567,
	EGuiText__VendorStackSplitSell                                                   = 2568,
	EGuiText__VendorStackSplitUnsell                                                 = 2569,
	EGuiText__LevelUp_NewLevel                                                       = 2577,
	EGuiText__PointsAvailable_Skills                                                 = 2578,
	EGuiText__PointOfInterestDiscovered                                              = 2592,
	EGuiText__XP_Fast_Travel                                                         = 2593,
	EGuiText__Weapon_Parts_Required_Value                                            = 2595,
	EGuiText__Armor_Parts_Required_Value                                             = 2596,
	EGuiText__FlavorInventoryCategoryJunk                                            = 2600,
	EGuiText__SaveLoad_PointOfNoReturnDelete                                         = 2601,
	EGuiText__UI_Empty                                                               = 2603,
	EGuiText__Unicode_Infinity                                                       = 2605,
	EGuiText__Warning_PointOfNoReturn_Phineas                                        = 2608,
	EGuiText__SettingName_PseudoGod                                                  = 2609,
	EGuiText__SettingCategory_Cheat                                                  = 2610,
	EGuiText__SettingName_God                                                        = 2611,
	EGuiText__SettingName_InfiniteAmmo                                               = 2612,
	EGuiText__SettingCategory_Movement                                               = 2613,
	EGuiText__SettingCategory_Attributes                                             = 2614,
	EGuiText__SettingCategory_Skills                                                 = 2615,
	EGuiText__SaveLoad_PointOfNoReturn                                               = 2616,
	EGuiText__Unknown                                                                = 2629,
	EGuiText__CC_ChangeAttributeValue                                                = 2645,
	EGuiText__CharacterCreation_AttributePoints_Remaining                            = 2647,
	EGuiText__AbilityUnlock_PowerAttackScience                                       = 2648,
	EGuiText__EyeHorizontal                                                          = 2665,
	EGuiText__MouthVertical                                                          = 2675,
	EGuiText__Missing                                                                = 2683,
	EGuiText__Skills_AdjustedValue                                                   = 2690,
	EGuiText__Value_Hyphen_Locked                                                    = 2699,
	EGuiText__MainMenu_Keyboard_Prompt                                               = 2715,
	EGuiText__Perk_Purchased                                                         = 2719,
	EGuiText__Perk_Unlocked                                                          = 2720,
	EGuiText__Perk_Marked                                                            = 2721,
	EGuiText__CharacterCustomization_PlayerAge                                       = 2722,
	EGuiText__SaveLoad_XboxActiveUserSignedOut                                       = 2876,
	EGuiText__SaveLoad_XboxActiveUserDisconnected                                    = 2877,
	EGuiText__Item_on_Display                                                        = 2969,
	EGuiText__LedgerMap_LocalMapName                                                 = 2982,
	EGuiText__Lasts_Duration                                                         = 3002,
	EGuiText__OneYear                                                                = 3003,
	EGuiText__XYears                                                                 = 3004,
	EGuiText__OneMonth                                                               = 3005,
	EGuiText__XMonths                                                                = 3006,
	EGuiText__OneWeek                                                                = 3007,
	EGuiText__XWeeks                                                                 = 3008,
	EGuiText__OneDay                                                                 = 3009,
	EGuiText__XDays                                                                  = 3010,
	EGuiText__OneHour                                                                = 3011,
	EGuiText__XHours                                                                 = 3012,
	EGuiText__OneMinute                                                              = 3013,
	EGuiText__XMinutes                                                               = 3014,
	EGuiText__OneSecond                                                              = 3015,
	EGuiText__XSeconds                                                               = 3016,
	EGuiText__ValueCommaSpace                                                        = 3017,
	EGuiText__Vendor_Confirm                                                         = 3018,
	EGuiText__NameColonText                                                          = 3033,
	EGuiText__Journal_Codex                                                          = 3102,
	EGuiText__RespecificationMachine                                                 = 3108,
	EGuiText__MainMenu_Gamepad_Prompt                                                = 3142,
	EGuiText__Inventory_InCombat                                                     = 3146,
	EGuiText__SelectTravelDestinationOn_X                                            = 3164,
	EGuiText__Disguise_RequiresID                                                    = 3170,
	EGuiText__SavedLoadRestriction_LoggingOut                                        = 3172,
	EGuiText__SavedLoadRestriction_PlatformStorageInacessible                        = 3173,
	EGuiText__SavedLoadRestriction_PlatformSaveSystemNull                            = 3174,
	EGuiText__SavedLoadRestriction_DeviceFull                                        = 3175,
	EGuiText__SavedLoadRestriction_Unsupported                                       = 3176,
	EGuiText__SavedLoadRestriction_GenericFail                                       = 3177,
	EGuiText__Supernova_DifficultyChange                                             = 3179,
	EGuiText__DownloadComplete_Percent_X                                             = 3181,
	EGuiText__Disguise_RequiresShroud                                                = 3183,
	EGuiText__Key_CannotBeRebound                                                    = 3189,
	EGuiText__Key_CannotBeAssignedTo_Action                                          = 3190,
	EGuiText__Key_AssignedTo_Action_NewAction                                        = 3191,
	EGuiText__MissingKeybinds_Actions                                                = 3192,
	EGuiText__AutosaveSplash_PS4                                                     = 3197,
	EGuiText__AutosaveSplash_Xbox                                                    = 3198,
	EGuiText__AutosaveSplash_PC                                                      = 3199,
	EGuiText__AutosaveSplash_PS5                                                     = 3200,
	EGuiText__Keybinds_Rebind                                                        = 3239,
	EGuiText__Keybindings_Attack                                                     = 3279,
	EGuiText__Keybindings_Reload                                                     = 3284,
	EGuiText__Keybindings_CompanionMove                                              = 3287,
	EGuiText__Righty                                                                 = 3317,
	EGuiText__Lefty                                                                  = 3318,
	EGuiText__Normal                                                                 = 3319,
	EGuiText__Inverted                                                               = 3320,
	EGuiText__Hold_X                                                                 = 3329,
	EGuiText__Click_X                                                                = 3330,
	EGuiText__Move                                                                   = 3332,
	EGuiText__Look                                                                   = 3337,
	EGuiText__CodexCategory_Symbols                                                  = 3339,
	EGuiText__CombatOnly                                                             = 3348,
	EGuiText__SystemMapLocationUnlocked                                              = 3355,
	EGuiText__Items_Gained                                                           = 3358,
	EGuiText__Items_Lost                                                             = 3359,
	EGuiText__Repair_X                                                               = 3378,
	EGuiText__ArmorType_Flesh                                                        = 3379,
	EGuiText__GamepadNotAllowedWarning                                               = 3381,
	EGuiText__RestrictedStockUnlocked                                                = 3382,
	EGuiText__NowAvailable                                                           = 3384,
	EGuiText__Breakdown_EngineeringLevel                                             = 3387,
	EGuiText__Breakdown_BasicModChance                                               = 3388,
	EGuiText__Breakdown_RareModChance                                                = 3389,
	EGuiText__Breakdown_PopupTitle                                                   = 3390,
	EGuiText__ModifyNoRecovery                                                       = 3393,
	EGuiText__ModifyItemWithMod                                                      = 3394,
	EGuiText__CurrentMod_MeleeGrip                                                   = 3396,
	EGuiText__NewMod_MeleeGrip                                                       = 3397,
	EGuiText__CurrentMod_MeleeAttack                                                 = 3398,
	EGuiText__NewMod_MeleeAttack                                                     = 3399,
	EGuiText__CurrentMod_Barrel                                                      = 3400,
	EGuiText__NewMod_Barrel                                                          = 3401,
	EGuiText__CurrentMod_Magazine                                                    = 3402,
	EGuiText__NewMod_Magazine                                                        = 3403,
	EGuiText__CurrentMod_Sight                                                       = 3404,
	EGuiText__NewMod_Sight                                                           = 3405,
	EGuiText__CurrentMod_Armoring                                                    = 3406,
	EGuiText__NewMod_Armoring                                                        = 3407,
	EGuiText__CurrentMod_Resistance                                                  = 3408,
	EGuiText__NewMod_Resistance                                                      = 3409,
	EGuiText__CurrentMod_Dampening                                                   = 3410,
	EGuiText__NewMod_Dampening                                                       = 3411,
	EGuiText__CurrentMod_Utility                                                     = 3412,
	EGuiText__NewMod_Utility                                                         = 3413,
	EGuiText__YourBits                                                               = 3423,
	EGuiText__SaveLoad_BeforeSkippingHope                                            = 3424,
	EGuiText__YourWeaponParts                                                        = 3433,
	EGuiText__YourArmorParts                                                         = 3434,
	EGuiText__ItemSorting_Alphabetical                                               = 3436,
	EGuiText__ItemSorting_Value                                                      = 3437,
	EGuiText__ItemSorting_Weight                                                     = 3438,
	EGuiText__ItemSorting_ValueToWeight                                              = 3439,
	EGuiText__ItemSorting_DamageRating                                               = 3440,
	EGuiText__ItemSorting_ArmorRating                                                = 3441,
	EGuiText__ItemSorting_WeaponType                                                 = 3442,
	EGuiText__ItemSorting_ArmorType                                                  = 3443,
	EGuiText__ItemSorting_RangedMeleeArmorMod                                        = 3445,
	EGuiText__Breakdown_ItemCount                                                    = 3449,
	EGuiText__EquipmentMods_ModCount                                                 = 3496,
	EGuiText__AlreadyInstalledMod                                                    = 3497,
	EGuiText__TinkerMaxLevelReachedPostDLC                                           = 3498,
	EGuiText__TinkerSkillLocked                                                      = 3499,
	EGuiText__SaveLoad_PS4ActiveUserDisconnected                                     = 3503,
	EGuiText__MainMenu_Gamepad_PS4_Prompt                                            = 3531,
	EGuiText__PointsAvailable_Perks                                                  = 3536,
	EGuiText__Perk_Cost                                                              = 3537,
	EGuiText__PointsAvailable_SkillPerks                                             = 3538,
	EGuiText__Language_English                                                       = 3570,
	EGuiText__Language_French                                                        = 3571,
	EGuiText__Language_Italian                                                       = 3572,
	EGuiText__Language_German                                                        = 3573,
	EGuiText__Language_Spanish                                                       = 3574,
	EGuiText__Language_Portuguese                                                    = 3575,
	EGuiText__Language_Russian                                                       = 3576,
	EGuiText__Language_Korean                                                        = 3577,
	EGuiText__Language_Japanese                                                      = 3578,
	EGuiText__Language_Chinese                                                       = 3579,
	EGuiText__Language_Polish                                                        = 3580,
	EGuiText__Minimal                                                                = 3622,
	EGuiText__Always                                                                 = 3627,
	EGuiText__OnlyWhenClose                                                          = 3628,
	EGuiText__Never                                                                  = 3629,
	EGuiText__TimedFade                                                              = 3646,
	EGuiText__FPSIndicator                                                           = 3668,
	EGuiText__FPSIndicatorDescription                                                = 3669,
	EGuiText__TopLeft                                                                = 3670,
	EGuiText__TopRight                                                               = 3671,
	EGuiText__BottomLeft                                                             = 3672,
	EGuiText__BottomRight                                                            = 3673,
	EGuiText__AbilityUnlock_TinkerScienceCostCap                                     = 3789,
	EGuiText__Vertical                                                               = 3804,
	EGuiText__Horizontal                                                             = 3805,
	EGuiText__Simplified                                                             = 3809,
	EGuiText__SellToVendingMachines_Locked                                           = 3810,
	EGuiText__Conversation_Trade                                                     = 3814,
	EGuiText__Attribute_Range_Maximum                                                = 3822,
	EGuiText__Setting_LanguageDisabled                                               = 3839,
	EGuiText__Keybinds_UnbindKey                                                     = 3840,
	EGuiText__Keybinds_ResetDefault                                                  = 3841,
	EGuiText__Keybinds_CurrentlyBound                                                = 3842,
	EGuiText__Keybinds_CurrentBinding                                                = 3843,
	EGuiText__Keybinds_CurrentlyUnbound                                              = 3844,
	EGuiText__DetectGraphicsSettings                                                 = 3845,
	EGuiText__Thirty                                                                 = 3846,
	EGuiText__Sixty                                                                  = 3847,
	EGuiText__OneHundredTwenty                                                       = 3848,
	EGuiText__OneHundredFourtyFour                                                   = 3849,
	EGuiText__OneHundredSixty                                                        = 3850,
	EGuiText__OneHundredSixtyFive                                                    = 3851,
	EGuiText__OneHundredEighty                                                       = 3852,
	EGuiText__TwoHundred                                                             = 3853,
	EGuiText__TwoHundredFourty                                                       = 3854,
	EGuiText__Unlimited                                                              = 3855,
	EGuiText__CompanionCommand_Ability_One                                           = 3864,
	EGuiText__CompanionCommand_Ability_Two                                           = 3865,
	EGuiText__ModifyReplaceWarning                                                   = 3873,
	EGuiText__RepairAllEquipped_X_Parts                                              = 3875,
	EGuiText__Inventory_SamWarning                                                   = 3876,
	EGuiText__InventorySlot_BodyArmor                                                = 3877,
	EGuiText__InventorySlot_Helmet                                                   = 3878,
	EGuiText__Companion_Disguise                                                     = 3879,
	EGuiText__Perk_Purchase_Requirements1039                                         = 3880,
	EGuiText__Flavor_CompanionsInventory_Hover                                       = 3881,
	EGuiText__SaveLoad_Maximum_Saves                                                 = 3882,
	EGuiText__Keybindings_Unbind                                                     = 3884,
	EGuiText__Keybindings_Bind                                                       = 3887,
	EGuiText__Keybindings_Rebind                                                     = 3888,
	EGuiText__CompanionPerkUnlocked                                                  = 3890,
	EGuiText__SaveLoad_LeavingEV                                                     = 3891,
	EGuiText__SaveLoad_LeavingEVDescription                                          = 3892,
	EGuiText__SaveLoad_Sorting_Date                                                  = 3899,
	EGuiText__SaveLoad_Sorting_PlayTime                                              = 3900,
	EGuiText__SaveLoad_Sorting_Location                                              = 3901,
	EGuiText__SaveLoad_Sorting_Level                                                 = 3902,
	EGuiText__SaveLoad_SaveConfirm                                                   = 3903,
	EGuiText__SaveLoad_SaveDoubleConfirm                                             = 3904,
	EGuiText__Cannot_Rebind                                                          = 3905,
	EGuiText__Menus_Cannot_Rebind                                                    = 3906,
	EGuiText__PartySelect_Encumbered                                                 = 3907,
	EGuiText__PartySelect_WeightAllowance                                            = 3908,
	EGuiText__Settings_ApplyNow                                                      = 3912,
	EGuiText__Settings_RevertWarn                                                    = 3913,
	EGuiText__NameBlacklisted                                                        = 3914,
	EGuiText__Appearance_Warn                                                        = 3920,
	EGuiText__NotSignedIn_Xbox                                                       = 3921,
	EGuiText__Settings_LanguageSelect                                                = 3922,
	EGuiText__Perk_Confirmation                                                      = 3923,
	EGuiText__Map_Active                                                             = 3994,
	EGuiText__Map_Inactive                                                           = 3995,
	EGuiText__Map_Toggle_Inactive                                                    = 3996,
	EGuiText__Pristine                                                               = 3997,
	EGuiText__Settings_AimingOnly                                                    = 4001,
	EGuiText__AndMore_Ellipsis                                                       = 4038,
	EGuiText__InactiveQuests                                                         = 4039,
	EGuiText__ShowInactiveQuests                                                     = 4040,
	EGuiText__HideInactiveQuests                                                     = 4041,
	EGuiText__MultipleQuests                                                         = 4042,
	EGuiText__Format_DotSpaceEntry                                                   = 4043,
	EGuiText__DoubleClick_x                                                          = 4048,
	EGuiText__IdleCameraAvailable                                                    = 4064,
	EGuiText__IdleCameraUnavailable                                                  = 4067,
	EGuiText__AdjustedSkillValue                                                     = 4093,
	EGuiText__Location_Gorgon                                                        = 4094,
	EGuiText__UsePet                                                                 = 4105,
	EGuiText__Play                                                                   = 4181,
	EGuiText__Stop                                                                   = 4182,
	EGuiText__AudioLog                                                               = 4183,
	EGuiText__AudioLogs                                                              = 4184,
	EGuiText__AudioLogs_BaseGame                                                     = 4185,
	EGuiText__AudioLogs_INX01                                                        = 4186,
	EGuiText__AudioLogs_INX02                                                        = 4187,
	EGuiText__INX01_Name                                                             = 4216,
	EGuiText__INX02_Name                                                             = 4217,
	EGuiText__NowAvailableExclamation                                                = 4218,
	EGuiText__ComingSoon                                                             = 4219,
	EGuiText__OwnedUninstalled                                                       = 4220,
	EGuiText__Installed                                                              = 4221,
	EGuiText__Skill_Tier6_Format                                                     = 4228,
	EGuiText__AbilityUnlock_InstantReloadHeavyOnEmpty                                = 4232,
	EGuiText__DT_Cold                                                                = 4273,
	EGuiText__PerkSuppressed                                                         = 4309,
	EGuiText__PerkUnsuppressed                                                       = 4310,
	EGuiText__PerkSuppressedEffect                                                   = 4312,
	EGuiText__AbilityUnlock__StealthInstantKillUndetectable                          = 4315,
	EGuiText__AbilityUnlock__DoubleHackRobots                                        = 4316,
	EGuiText__AbilityUnlock__UndetectableLockpicking                                 = 4317,
	EGuiText__AbilityUnlock__UseScienceAsWeaponSkill                                 = 4325,
	EGuiText__FlawDecidophobia                                                       = 4327,
	EGuiText__PerkSuppressedByNameDuration                                           = 4328,
	EGuiText__CurSuppressingNameDuration                                             = 4329,
	EGuiText__CurrentBitsValue                                                       = 4332,
	EGuiText__CurrentWeaponPartsValue                                                = 4333,
	EGuiText__CurrentArmorPartsValue                                                 = 4334,
	EGuiText__CurVersionValue                                                        = 4335,
	EGuiText__VersionMismatchValue                                                   = 4336,
	EGuiText__SaveVersionValue                                                       = 4337,
	EGuiText__QuoteValueMissing                                                      = 4338,
	EGuiText__QuoteValueInstalled                                                    = 4339,
	EGuiText__PurchaseDLC                                                            = 4340,
	EGuiText__Workbench_PlayerLacksWeaponParts                                       = 4341,
	EGuiText__Workbench_PlayerLacksArmorParts                                        = 4342,
	EGuiText__Analyze                                                                = 4373,
	EGuiText__TinkerMaxLevelReachedPreDLC                                            = 4374,
	EGuiText__TinkerMaxLevelReached                                                  = 4375,
	EGuiText__Location_PhaethonPilothouse                                            = 4438,
	EGuiText__Location_RizzosDistillationStation                                     = 4439,
	EGuiText__Location_EridanosSpaceport                                             = 4440,
	EGuiText__Location_TheGrandColonialHotel                                         = 4441,
	EGuiText__Location_WildernessExploitationReserve                                 = 4442,
	EGuiText__Location_RizzosPurpleberryOrchards                                     = 4443,
	EGuiText__Location_RizzosResearchDevelopmentDistrictLabs                         = 4444,
	EGuiText__Location_HappyDaleFarms                                                = 4445,
	EGuiText__Location_StormtailShelter                                              = 4446,
	EGuiText__SkillName_Virtuoso_Value                                               = 4455,
	EGuiText__ModRecoveryEngineeringVirtuoso                                         = 4456,
	EGuiText__PreviousModRecovered                                                   = 4457,
	EGuiText__ModInstallWarningEngineeringVirtuoso                                   = 4458,
	EGuiText__GameName                                                               = 4461,
	EGuiText__Quest_SortContent                                                      = 4462,
	EGuiText__Stop_Audio_Log                                                         = 4487,
	EGuiText__Warning_PointOfNoReturn_Overwrite                                      = 4493,
	EGuiText__DLCpopup_Gorgon_Title                                                  = 4506,
	EGuiText__DLCpopup_Gorgon                                                        = 4507,
	EGuiText__FastTravel_EridanosQuest                                               = 4511,
	EGuiText__MoreInfo                                                               = 4512,
	EGuiText__DLCpopup_Eridanos_Title                                                = 4513,
	EGuiText__DLCpopup_Eridanos                                                      = 4514,
	EGuiText__DLC_PONR_Prompt                                                        = 4574,
	EGuiText__DLC_PONR_Prompt_Dual                                                   = 4575,
	EGuiText__DLCpopup_Dual                                                          = 4576,
	EGuiText__DLCpopup_Dual_Title                                                    = 4577,
	EGuiText__EvidenceNearbyNotification                                             = 4583,
	EGuiText__Settings_ControllerEnableImpulseTriggers                               = 4585,
	EGuiText__Settings_ImpulseTriggerIntensity                                       = 4586,
	EGuiText__Settings_ControllerEnableImpulseTriggersDescription                    = 4587,
	EGuiText__Settings_ImpulseTriggerIntensityDescription                            = 4588,
	EGuiText__Settings_PerformanceMode                                               = 4589,
	EGuiText__Settings_PerformanceModeDescription                                    = 4590,
	EGuiText__Mode_PerformanceMode                                                   = 4591,
	EGuiText__Mode_CinematicMode                                                     = 4592,
	EGuiText__Settings_SSGI                                                          = 4593,
	EGuiText__Settings_SSGIDescription                                               = 4594,
	EGuiText__Mode_SSGIOff                                                           = 4595,
	EGuiText__Mode_SSGIFullres                                                       = 4596,
	EGuiText__Mode_SSGIHalfres                                                       = 4597,
	EGuiText__Settings_DynRes                                                        = 4598,
	EGuiText__Settings_DynResDescription                                             = 4599,
	EGuiText__Settings_FSR2                                                          = 4600,
	EGuiText__Settings_FSR2Description                                               = 4601,
	EGuiText__Settings_FSR2Quality                                                   = 4602,
	EGuiText__Settings_FSR2Balanced                                                  = 4603,
	EGuiText__Settings_FSR2Performance                                               = 4604
};

/// Enum /Script/Indiana.ESurvivalBar
/// Size: 0x04
enum class ESurvivalBar : uint8_t
{
	ESurvivalBar__Hunger                                                             = 0,
	ESurvivalBar__Thirst                                                             = 1,
	ESurvivalBar__Sleep                                                              = 2,
	ESurvivalBar__Invalid                                                            = 3
};

/// Enum /Script/Indiana.CycleBehavior
/// Size: 0x03
enum class CycleBehavior : uint8_t
{
	CycleBehavior__LinearRepeat                                                      = 0,
	CycleBehavior__LinearOnceOnly                                                    = 1,
	CycleBehavior__PingPong                                                          = 2
};

/// Enum /Script/Indiana.ESwitchEventType
/// Size: 0x03
enum class ESwitchEventType : uint8_t
{
	ESwitchEventType__Invalid                                                        = 0,
	ESwitchEventType__Changed                                                        = 1,
	ESwitchEventType__AnimateSwitch                                                  = 2
};

/// Enum /Script/Indiana.ESymbolType
/// Size: 0x06
enum class ESymbolType : uint8_t
{
	ESymbolType__DamageType                                                          = 0,
	ESymbolType__Buff                                                                = 1,
	ESymbolType__Debuff                                                              = 2,
	ESymbolType__MapCompass                                                          = 3,
	ESymbolType__Count                                                               = 4,
	ESymbolType__Invalid                                                             = 5
};

/// Enum /Script/Indiana.EDesiredBrushType
/// Size: 0x04
enum class EDesiredBrushType : uint8_t
{
	EDesiredBrushType__Normal                                                        = 0,
	EDesiredBrushType__Hovered                                                       = 1,
	EDesiredBrushType__Pressed                                                       = 2,
	EDesiredBrushType__Focused                                                       = 3
};

/// Enum /Script/Indiana.ETargetRelationship
/// Size: 0x04
enum class ETargetRelationship : uint8_t
{
	ETargetRelationship__Friendly                                                    = 0,
	ETargetRelationship__Neutral                                                     = 1,
	ETargetRelationship__Hostile                                                     = 2,
	ETargetRelationship__PacifistHostile                                             = 3
};

/// Enum /Script/Indiana.EScriptedTeamType
/// Size: 0x02
enum class EScriptedTeamType : uint8_t
{
	EScriptedTeamType__Script                                                        = 0,
	EScriptedTeamType__MindControl                                                   = 1
};

/// Enum /Script/Indiana.ETimeDilationType
/// Size: 0x02
enum class ETimeDilationType : uint8_t
{
	ETimeDilationType__Static                                                        = 0,
	ETimeDilationType__Curve                                                         = 1
};

/// Enum /Script/Indiana.ETimeDilationPriority
/// Size: 0x04
enum class ETimeDilationPriority : uint8_t
{
	ETimeDilationPriority__Low                                                       = 0,
	ETimeDilationPriority__Medium                                                    = 1,
	ETimeDilationPriority__High                                                      = 2,
	ETimeDilationPriority__Critical                                                  = 3
};

/// Enum /Script/Indiana.ERagdollGetupState
/// Size: 0x05
enum class ERagdollGetupState : uint8_t
{
	ERagdollGetupState__Inactive                                                     = 0,
	ERagdollGetupState__AnimationDelayed                                             = 1,
	ERagdollGetupState__AnimationQueued                                              = 2,
	ERagdollGetupState__AnimationBegan                                               = 3,
	ERagdollGetupState__AnimationActive                                              = 4
};

/// Enum /Script/Indiana.ETrapResult
/// Size: 0x06
enum class ETrapResult : uint8_t
{
	ETrapResult__Success                                                             = 0,
	ETrapResult__Failed                                                              = 1,
	ETrapResult__Failed_Skill                                                        = 2,
	ETrapResult__Failed_Error                                                        = 3,
	ETrapResult__Pending_Arming                                                      = 4,
	ETrapResult__Pending_Disarming                                                   = 5
};

/// Enum /Script/Indiana.ETrapDifficulty
/// Size: 0x04
enum class ETrapDifficulty : uint8_t
{
	ETrapDifficulty__Easy                                                            = 0,
	ETrapDifficulty__Medium                                                          = 1,
	ETrapDifficulty__Difficult                                                       = 2,
	ETrapDifficulty__Extreme                                                         = 3
};

/// Enum /Script/Indiana.ETrapEventType
/// Size: 0x05
enum class ETrapEventType : uint8_t
{
	ETrapEventType__Invalid                                                          = 0,
	ETrapEventType__Armed                                                            = 1,
	ETrapEventType__Disarmed                                                         = 2,
	ETrapEventType__PreDetonate                                                      = 3,
	ETrapEventType__Detonate                                                         = 4
};

/// Enum /Script/Indiana.EDiscoveryStatusFlags
/// Size: 0x04
enum class EDiscoveryStatusFlags : uint8_t
{
	EDiscoveryStatusFlags__Aware                                                     = 0,
	EDiscoveryStatusFlags__Visited                                                   = 1,
	EDiscoveryStatusFlags__Locked                                                    = 2,
	EDiscoveryStatusFlags__Hidden                                                    = 3
};

/// Enum /Script/Indiana.ETutorialCategory
/// Size: 0x11
enum class ETutorialCategory : uint8_t
{
	ETutorialCategory__Basics                                                        = 0,
	ETutorialCategory__Exploration                                                   = 1,
	ETutorialCategory__Loot                                                          = 2,
	ETutorialCategory__WeaponsAndArmor                                               = 3,
	ETutorialCategory__SkillsAndReputation                                           = 4,
	ETutorialCategory__Combat                                                        = 5,
	ETutorialCategory__Stealth                                                       = 6,
	ETutorialCategory__Companions                                                    = 7,
	ETutorialCategory__Supernova                                                     = 8,
	ETutorialCategory__Count                                                         = 9,
	ETutorialCategory__Invalid                                                       = 10
};

/// Enum /Script/Indiana.ETutorialEvent
/// Size: 0x123
enum class ETutorialEvent : uint8_t
{
	ETutorialEvent__Invalid                                                          = 0,
	ETutorialEvent__DisguiseActivated                                                = 1,
	ETutorialEvent__DisguiseDurationEnded                                            = 2,
	ETutorialEvent__DisguiseImperfectThresholdReached                                = 3,
	ETutorialEvent__DisguiseInterrogationBegun                                       = 4,
	ETutorialEvent__DisguiseInterrogationFailed                                      = 5,
	ETutorialEvent__DisguiseInterrogationSuccess                                     = 6,
	ETutorialEvent__DisguiseIntro                                                    = 7,
	ETutorialEvent__DisguiseIntro9                                                   = 8,
	ETutorialEvent__DisguiseIntro10                                                  = 9,
	ETutorialEvent__DisguiseIntro11                                                  = 10,
	ETutorialEvent__FastTravelPointLearned                                           = 11,
	ETutorialEvent__FlawOffered                                                      = 12,
	ETutorialEvent__InterrogationBegun                                               = 13,
	ETutorialEvent__InterrogationFailed                                              = 14,
	ETutorialEvent__InterrogationSuccess                                             = 15,
	ETutorialEvent__PlayerArmor                                                      = 16,
	ETutorialEvent__PlayerArmorGamepad                                               = 17,
	ETutorialEvent__PlayerBasicMovement                                              = 18,
	ETutorialEvent__PlayerBlocking                                                   = 19,
	ETutorialEvent__PlayerCombatAttack                                               = 20,
	ETutorialEvent__PlayerCombatDialogAbilities                                      = 21,
	ETutorialEvent__PlayerCompanionAbilities                                         = 22,
	ETutorialEvent__PlayerCompanionBonuses                                           = 23,
	ETutorialEvent__PlayerCompanionCommands                                          = 24,
	ETutorialEvent__PlayerCompanionGain                                              = 25,
	ETutorialEvent__PlayerCompanionGear                                              = 26,
	ETutorialEvent__PlayerCompanionPerks                                             = 27,
	ETutorialEvent__PlayerCompanionPerksAssigned                                     = 28,
	ETutorialEvent__PlayerConsumables                                                = 29,
	ETutorialEvent__PlayerConsumablesController                                      = 30,
	ETutorialEvent__PlayerCover                                                      = 31,
	ETutorialEvent__PlayerCriminalActivities                                         = 32,
	ETutorialEvent__PlayerCrouch                                                     = 33,
	ETutorialEvent__PlayerDamageTypes                                                = 34,
	ETutorialEvent__PlayerDestructibles                                              = 35,
	ETutorialEvent__PlayerDodging                                                    = 36,
	ETutorialEvent__PlayerDodgeLeap                                                  = 37,
	ETutorialEvent__PlayerEncumbrance                                                = 38,
	ETutorialEvent__PlayerEnemyAwareness                                             = 39,
	ETutorialEvent__PlayerFalling                                                    = 40,
	ETutorialEvent__PlayerFlaws                                                      = 41,
	ETutorialEvent__PlayerFlawOffered                                                = 42,
	ETutorialEvent__PlayerGrazes                                                     = 43,
	ETutorialEvent__PlayerFastTravel                                                 = 44,
	ETutorialEvent__PlayerHealthMedkitMax                                            = 45,
	ETutorialEvent__PlayerItemBroke                                                  = 46,
	ETutorialEvent__PlayerItemDegradation                                            = 47,
	ETutorialEvent__PlayerItemGain                                                   = 48,
	ETutorialEvent__PlayerItemPristine                                               = 49,
	ETutorialEvent__PlayerItemRepair                                                 = 50,
	ETutorialEvent__PlayerJump                                                       = 51,
	ETutorialEvent__PlayerLevelInstructions                                          = 52,
	ETutorialEvent__PlayerLevelSkills                                                = 53,
	ETutorialEvent__PlayerLevelUp                                                    = 54,
	ETutorialEvent__PlayerLoot                                                       = 55,
	ETutorialEvent__PlayerLootController                                             = 56,
	ETutorialEvent__PlayerMedKit                                                     = 57,
	ETutorialEvent__PlayerMeleePowerAttack                                           = 58,
	ETutorialEvent__PlayerMeleeWithRanged                                            = 59,
	ETutorialEvent__PlayerModIntro                                                   = 60,
	ETutorialEvent__PlayerModUse                                                     = 61,
	ETutorialEvent__PlayerNRayDamage                                                 = 62,
	ETutorialEvent__PlayerObjectiveMarkers                                           = 63,
	ETutorialEvent__PlayerPerfectBlocks                                              = 64,
	ETutorialEvent__PlayerPerks                                                      = 65,
	ETutorialEvent__PlayerPerksUnlocked                                              = 66,
	ETutorialEvent__PlayerLockpicks                                                  = 67,
	ETutorialEvent__PlayerQuestDependencies                                          = 68,
	ETutorialEvent__PlayerQuestScreen                                                = 69,
	ETutorialEvent__PlayerQuestSwitching                                             = 70,
	ETutorialEvent__PlayerReinforcement                                              = 71,
	ETutorialEvent__PlayerReinforcement2                                             = 72,
	ETutorialEvent__PlayerReinforcement3                                             = 73,
	ETutorialEvent__PlayerReinforcement4                                             = 74,
	ETutorialEvent__PlayerReinforcement5                                             = 75,
	ETutorialEvent__PlayerReinforcement6                                             = 76,
	ETutorialEvent__PlayerReinforcement7                                             = 77,
	ETutorialEvent__PlayerReinforcement8                                             = 78,
	ETutorialEvent__PlayerReinforcement9                                             = 79,
	ETutorialEvent__PlayerReinforcement10                                            = 80,
	ETutorialEvent__PlayerReinforcement11                                            = 81,
	ETutorialEvent__PlayerReinforcement12                                            = 82,
	ETutorialEvent__PlayerReinforcement13                                            = 83,
	ETutorialEvent__PlayerReinforcement14                                            = 84,
	ETutorialEvent__PlayerReinforcement15                                            = 85,
	ETutorialEvent__PlayerReputations                                                = 86,
	ETutorialEvent__PlayerRespec                                                     = 87,
	ETutorialEvent__PlayerResting                                                    = 88,
	ETutorialEvent__PlayerScienceWeapons                                             = 89,
	ETutorialEvent__PlayerSneak                                                      = 90,
	ETutorialEvent__PlayerSneakAttack                                                = 91,
	ETutorialEvent__PlayerSprint                                                     = 92,
	ETutorialEvent__PlayerStarmap                                                    = 93,
	ETutorialEvent__PlayerStealthAttack                                              = 94,
	ETutorialEvent__PlayerSwitchingWeapons                                           = 95,
	ETutorialEvent__PlayerTacticalTimeDilation                                       = 96,
	ETutorialEvent__PlayerTTDLocationHits                                            = 97,
	ETutorialEvent__PlayerTallGrass                                                  = 98,
	ETutorialEvent__PlayerVendingMachine                                             = 99,
	ETutorialEvent__PlayerVendorScreen                                               = 100,
	ETutorialEvent__PlayerWeakspots                                                  = 101,
	ETutorialEvent__PlayerWeapons                                                    = 102,
	ETutorialEvent__PlayerWeaponsController                                          = 103,
	ETutorialEvent__PlayerWorkbench                                                  = 104,
	ETutorialEvent__PlayerHunger                                                     = 105,
	ETutorialEvent__PlayerSleepDeprivation                                           = 106,
	ETutorialEvent__PlayerThirst                                                     = 107,
	ETutorialEvent__PlayerSpecialEffects                                             = 108,
	ETutorialEvent__PlayerDamageTypeCodex                                            = 109,
	ETutorialEvent__PlayerReinforcement16                                            = 110,
	ETutorialEvent__PlayerReinforcement17                                            = 111,
	ETutorialEvent__PlayerReinforcement18                                            = 112,
	ETutorialEvent__PlayerReinforcement19                                            = 113,
	ETutorialEvent__PlayerReinforcement20                                            = 114,
	ETutorialEvent__SpinUpWeapons                                                    = 115,
	ETutorialEvent__ChargedBurstWeapons                                              = 116,
	ETutorialEvent__LowGravity                                                       = 117,
	ETutorialEvent__DiscrepancyAmplifierAcquired                                     = 118,
	ETutorialEvent__DiscrepancyAmplifierEquipped                                     = 119,
	ETutorialEvent__DiscrepancyAmplifierUnacquired                                   = 120,
	ETutorialEvent__PlayerItemImprovised                                             = 121,
	ETutorialEvent__Count                                                            = 122
};

/// Enum /Script/Indiana.EControlDevice
/// Size: 0x03
enum class EControlDevice : uint8_t
{
	EControlDevice__None                                                             = 0,
	EControlDevice__Keyboard                                                         = 1,
	EControlDevice__Gamepad                                                          = 2
};

/// Enum /Script/Indiana.ETutorialDisplayType
/// Size: 0x04
enum class ETutorialDisplayType : uint8_t
{
	ETutorialDisplayType__Invalid                                                    = 0,
	ETutorialDisplayType__Simple                                                     = 1,
	ETutorialDisplayType__CorporateLarge                                             = 2,
	ETutorialDisplayType__Count                                                      = 3
};

/// Enum /Script/Indiana.EInputGroup
/// Size: 0x04
enum class EInputGroup : uint8_t
{
	EInputGroup__None                                                                = 0,
	EInputGroup__LeftStick                                                           = 1,
	EInputGroup__RightStick                                                          = 2,
	EInputGroup__DPad                                                                = 4
};

/// Enum /Script/Indiana.ETransactionValidationResult
/// Size: 0x12
enum class ETransactionValidationResult : uint8_t
{
	ETransactionValidationResult__Valid                                              = 0,
	ETransactionValidationResult__PlayerLacksCurrency                                = 1,
	ETransactionValidationResult__VendorLacksCurrency                                = 2,
	ETransactionValidationResult__NullPlayerInventory                                = 3,
	ETransactionValidationResult__VendorLacksInventory                               = 4,
	ETransactionValidationResult__VendorInventoryMismatch                            = 5,
	ETransactionValidationResult__PlayerInventoryMismatch                            = 6,
	ETransactionValidationResult__VendorDoesntBuy                                    = 7,
	ETransactionValidationResult__CantBuyRestrictedStock                             = 8,
	ETransactionValidationResult__CantPawnNoDropItems                                = 9,
	ETransactionValidationResult__NoItems                                            = 10,
	ETransactionValidationResult__CantRepairHealthyItems                             = 11
};

/// Enum /Script/Indiana.EVendorPages
/// Size: 0x04
enum class EVendorPages : uint8_t
{
	EVendorPages__Buy                                                                = 0,
	EVendorPages__Sell                                                               = 1,
	EVendorPages__Repair                                                             = 2,
	EVendorPages__Count                                                              = 3
};

/// Enum /Script/Indiana.EHolsterState
/// Size: 0x04
enum class EHolsterState : uint8_t
{
	EHolsterState__Holstered                                                         = 0,
	EHolsterState__Holstering                                                        = 1,
	EHolsterState__Unholstering                                                      = 2,
	EHolsterState__Unholstered                                                       = 3
};

/// Enum /Script/Indiana.EWeaponEquipMode
/// Size: 0x03
enum class EWeaponEquipMode : uint8_t
{
	EWeaponEquipMode__FirstPerson                                                    = 0,
	EWeaponEquipMode__ThirdPerson                                                    = 1,
	EWeaponEquipMode__UIPreview                                                      = 2
};

/// Enum /Script/Indiana.EModSlot
/// Size: 0x08
enum class EModSlot : uint8_t
{
	EModSlot__None                                                                   = 0,
	EModSlot__Barrel                                                                 = 1,
	EModSlot__UnderBarrel                                                            = 2,
	EModSlot__Magazine                                                               = 3,
	EModSlot__Sight                                                                  = 4,
	EModSlot__MeleeGrip                                                              = 5,
	EModSlot__MeleeAttack                                                            = 6,
	EModSlot__SlotCount                                                              = 7
};

/// Enum /Script/Indiana.EAttackRestrictions
/// Size: 0x10
enum class EAttackRestrictions : uint16_t
{
	EAttackRestrictions__None                                                        = 0,
	EAttackRestrictions__PendingReload                                               = 1,
	EAttackRestrictions__Sprinting                                                   = 2,
	EAttackRestrictions__Blocking                                                    = 4,
	EAttackRestrictions__AttackSuspended                                             = 8,
	EAttackRestrictions__InputSuppressed                                             = 16,
	EAttackRestrictions__Reloading                                                   = 32,
	EAttackRestrictions__NoAmmo                                                      = 64,
	EAttackRestrictions__QuickMeleeCooldown                                          = 128,
	EAttackRestrictions__FireCooldown                                                = 256
};

/// Enum /Script/Indiana.EWeaponState
/// Size: 0x15
enum class EWeaponState : uint8_t
{
	EWeaponState__Invalid                                                            = 0,
	EWeaponState__Equipped                                                           = 1,
	EWeaponState__Reloading                                                          = 2,
	EWeaponState__Firing                                                             = 3,
	EWeaponState__Active                                                             = 4,
	EWeaponState__Charging                                                           = 5,
	EWeaponState__ChargeUp                                                           = 6,
	EWeaponState__ChargeFull                                                         = 7,
	EWeaponState__Scoped                                                             = 8,
	EWeaponState__FineAiming                                                         = 9,
	EWeaponState__BeamLocked                                                         = 10,
	EWeaponState__FiringFineAiming                                                   = 11,
	EWeaponState__FiringScoped                                                       = 12,
	EWeaponState__FiringNotAiming                                                    = 13,
	EWeaponState__CalledShot                                                         = 14
};

/// Enum /Script/Indiana.EWeaponEvent
/// Size: 0x48
enum class EWeaponEvent : uint8_t
{
	EWeaponEvent__Invalid                                                            = 0,
	EWeaponEvent__Equip                                                              = 1,
	EWeaponEvent__Unequip                                                            = 2,
	EWeaponEvent__Holster                                                            = 3,
	EWeaponEvent__Unholster                                                          = 4,
	EWeaponEvent__InstantEquip                                                       = 5,
	EWeaponEvent__InstantUnequip                                                     = 6,
	EWeaponEvent__Fire                                                               = 7,
	EWeaponEvent__FireFineAim                                                        = 8,
	EWeaponEvent__FireScoped                                                         = 9,
	EWeaponEvent__DryFire                                                            = 10,
	EWeaponEvent__DamageTicked                                                       = 11,
	EWeaponEvent__CalledShot                                                         = 12,
	EWeaponEvent__FireCalledShot                                                     = 13,
	EWeaponEvent__FakeFireCalledShot                                                 = 14,
	EWeaponEvent__Reload                                                             = 15,
	EWeaponEvent__ChargeMax                                                          = 16,
	EWeaponEvent__MeleeWindUpLeft                                                    = 17,
	EWeaponEvent__MeleeWindUpRight                                                   = 18,
	EWeaponEvent__MeleeAttackRight                                                   = 19,
	EWeaponEvent__MeleeAttackLeft                                                    = 20,
	EWeaponEvent__PowerAttackWindUp                                                  = 21,
	EWeaponEvent__PowerAttackSwing                                                   = 22,
	EWeaponEvent__SweepAttackWindUp                                                  = 23,
	EWeaponEvent__SweepAttackSwing                                                   = 24,
	EWeaponEvent__CounterAttack                                                      = 25,
	EWeaponEvent__Recoil                                                             = 26,
	EWeaponEvent__WindUpNoStamina                                                    = 27,
	EWeaponEvent__NoStaminaAttack                                                    = 28,
	EWeaponEvent__MeleeImpact                                                        = 29,
	EWeaponEvent__Block                                                              = 30,
	EWeaponEvent__QuickMelee                                                         = 31,
	EWeaponEvent__Stagger                                                            = 32,
	EWeaponEvent__CustomFire                                                         = 33,
	EWeaponEvent__SpecialAttack1                                                     = 34,
	EWeaponEvent__SpecialAttack2                                                     = 35,
	EWeaponEvent__SpecialAttack3                                                     = 36,
	EWeaponEvent__SpecialAttack4                                                     = 37,
	EWeaponEvent__FineAimStart                                                       = 38,
	EWeaponEvent__FineAimLeave                                                       = 39,
	EWeaponEvent__ScopeStart                                                         = 40,
	EWeaponEvent__ScopeLeave                                                         = 41,
	EWeaponEvent__ScopeEnter                                                         = 42,
	EWeaponEvent__ScopeExit                                                          = 43,
	EWeaponEvent__InstantHolster                                                     = 44,
	EWeaponEvent__InstantUnholster                                                   = 45,
	EWeaponEvent__StealthMelee                                                       = 46,
	EWeaponEvent__PerfectBlock                                                       = 47
};

/// Enum /Script/Indiana.EWorkbenchPages
/// Size: 0x05
enum class EWorkbenchPages : uint8_t
{
	EWorkbenchPages__Modification                                                    = 0,
	EWorkbenchPages__Upgrade                                                         = 1,
	EWorkbenchPages__Repair                                                          = 2,
	EWorkbenchPages__Breakdown                                                       = 3,
	EWorkbenchPages__Count                                                           = 4
};

/// Enum /Script/Indiana.ETextDirectionType
/// Size: 0x03
enum class ETextDirectionType : uint8_t
{
	ETextDirectionType__NoDirectionalBias                                            = 0,
	ETextDirectionType__Up                                                           = 1,
	ETextDirectionType__Down                                                         = 2
};

